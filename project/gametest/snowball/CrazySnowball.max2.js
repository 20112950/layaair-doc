
/***********************************/
/*http://www.layabox.com  2017/3/23*/
/***********************************/
var Laya=window.Laya=(function(window,document){
	var Laya={
		__internals:[],
		__packages:{},
		__classmap:{'Object':Object,'Function':Function,'Array':Array,'String':String},
		__sysClass:{'object':'Object','array':'Array','string':'String','dictionary':'Dictionary'},
		__propun:{writable: true,enumerable: false,configurable: true},
		__presubstr:String.prototype.substr,
		__substr:function(ofs,sz){return arguments.length==1?Laya.__presubstr.call(this,ofs):Laya.__presubstr.call(this,ofs,sz>0?sz:(this.length+sz));},
		__init:function(_classs){_classs.forEach(function(o){o.__init$ && o.__init$();});},
		__isClass:function(o){return o && (o.__isclass || o==Object || o==String || o==Array);},
		__newvec:function(sz,value){
			var d=[];
			d.length=sz;
			for(var i=0;i<sz;i++) d[i]=value;
			return d;
		},
		__extend:function(d,b){
			for (var p in b){
				if (!b.hasOwnProperty(p)) continue;
				var gs=Object.getOwnPropertyDescriptor(b, p);
				var g = gs.get, s = gs.set; 
				if ( g || s ) {
					if ( g && s)
						Object.defineProperty(d,p,gs);
					else{
						g && Object.defineProperty(d, p, g);
						s && Object.defineProperty(d, p, s);
					}
				}
				else d[p] = b[p];
			}
			function __() { Laya.un(this,'constructor',d); }__.prototype=b.prototype;d.prototype=new __();Laya.un(d.prototype,'__imps',Laya.__copy({},b.prototype.__imps));
		},
		__copy:function(dec,src){
			if(!src) return null;
			dec=dec||{};
			for(var i in src) dec[i]=src[i];
			return dec;
		},
		__package:function(name,o){
			if(Laya.__packages[name]) return;
			Laya.__packages[name]=true;
			var p=window,strs=name.split('.');
			if(strs.length>1){
				for(var i=0,sz=strs.length-1;i<sz;i++){
					var c=p[strs[i]];
					p=c?c:(p[strs[i]]={});
				}
			}
			p[strs[strs.length-1]] || (p[strs[strs.length-1]]=o||{});
		},
		__hasOwnProperty:function(name,o){
			o=o ||this;
		    function classHas(name,o){
				if(Object.hasOwnProperty.call(o.prototype,name)) return true;
				var s=o.prototype.__super;
				return s==null?null:classHas(name,s);
			}
			return (Object.hasOwnProperty.call(o,name)) || classHas(name,o.__class);
		},
		__typeof:function(o,value){
			if(!o || !value) return false;
			if(value===String) return (typeof o==='string');
			if(value===Number) return (typeof o==='number');
			if(value.__interface__) value=value.__interface__;
			else if(typeof value!='string')  return (o instanceof value);
			return (o.__imps && o.__imps[value]) || (o.__class==value);
		},
		__as:function(value,type){
			return (this.__typeof(value,type))?value:null;
		},		
		interface:function(name,_super){
			Laya.__package(name,{});
			var ins=Laya.__internals;
			var a=ins[name]=ins[name] || {self:name};
			if(_super)
			{
				var supers=_super.split(',');
				a.extend=[];
				for(var i=0;i<supers.length;i++){
					var nm=supers[i];
					ins[nm]=ins[nm] || {self:nm};
					a.extend.push(ins[nm]);
				}
			}
			var o=window,words=name.split('.');
			for(var i=0;i<words.length-1;i++) o=o[words[i]];
			o[words[words.length-1]]={__interface__:name};
		},
		class:function(o,fullName,_super,miniName){
			_super && Laya.__extend(o,_super);
			if(fullName){
				Laya.__package(fullName,o);
				Laya.__classmap[fullName]=o;
				if(fullName.indexOf('.')>0){
					if(fullName.indexOf('laya.')==0){
						var paths=fullName.split('.');
						miniName=miniName || paths[paths.length-1];
						if(Laya[miniName]) console.log("Warning!,this class["+miniName+"] already exist:",Laya[miniName]);
						Laya[miniName]=o;
					}
				}
				else {
					if(fullName=="Main")
						window.Main=o;
					else{
						if(Laya[fullName]){
							console.log("Error!,this class["+fullName+"] already exist:",Laya[fullName]);
						}
						Laya[fullName]=o;
					}
				}
			}
			var un=Laya.un,p=o.prototype;
			un(p,'hasOwnProperty',Laya.__hasOwnProperty);
			un(p,'__class',o);
			un(p,'__super',_super);
			un(p,'__className',fullName);
			un(o,'__super',_super);
			un(o,'__className',fullName);
			un(o,'__isclass',true);
			un(o,'super',function(o){this.__super.call(o);});
		},
		imps:function(dec,src){
			if(!src) return null;
			var d=dec.__imps|| Laya.un(dec,'__imps',{});
			function __(name){
				var c,exs;
				if(! (c=Laya.__internals[name]) ) return;
				d[name]=true;
				if(!(exs=c.extend)) return;
				for(var i=0;i<exs.length;i++){
					__(exs[i].self);
				}
			}
			for(var i in src) __(i);
		},
		getset:function(isStatic,o,name,getfn,setfn){
			if(!isStatic){
				getfn && Laya.un(o,'_$get_'+name,getfn);
				setfn && Laya.un(o,'_$set_'+name,setfn);
			}
			else{
				getfn && (o['_$GET_'+name]=getfn);
				setfn && (o['_$SET_'+name]=setfn);
			}
			if(getfn && setfn) 
				Object.defineProperty(o,name,{get:getfn,set:setfn,enumerable:false});
			else{
				getfn && Object.defineProperty(o,name,{get:getfn,enumerable:false});
				setfn && Object.defineProperty(o,name,{set:setfn,enumerable:false});
			}
		},
		static:function(_class,def){
				for(var i=0,sz=def.length;i<sz;i+=2){
					if(def[i]=='length') 
						_class.length=def[i+1].call(_class);
					else{
						function tmp(){
							var name=def[i];
							var getfn=def[i+1];
							Object.defineProperty(_class,name,{
								get:function(){delete this[name];return this[name]=getfn.call(this);},
								set:function(v){delete this[name];this[name]=v;},enumerable: true,configurable: true});
						}
						tmp();
					}
				}
		},		
		un:function(obj,name,value){
			value || (value=obj[name]);
			Laya.__propun.value=value;
			Object.defineProperty(obj, name, Laya.__propun);
			return value;
		},
		uns:function(obj,names){
			names.forEach(function(o){Laya.un(obj,o)});
		}
	};

    window.console=window.console || ({log:function(){}});
	window.trace=window.console.log;
	Error.prototype.throwError=function(){throw arguments;};
	//String.prototype.substr=Laya.__substr;
	Object.defineProperty(Array.prototype,'fixed',{enumerable: false});

	return Laya;
})(window,document);

(function(window,document,Laya){
	var __un=Laya.un,__uns=Laya.uns,__static=Laya.static,__class=Laya.class,__getset=Laya.getset,__newvec=Laya.__newvec;
	Laya.interface('skill.ISkill');
	Laya.interface('laya.ui.IItem');
	Laya.interface('laya.ui.ISelect');
	Laya.interface('laya.utils.IError');
	Laya.interface('logic.union.IUnion');
	Laya.interface('laya.runtime.IMarket');
	Laya.interface('laya.filters.IFilter');
	Laya.interface('laya.display.ILayout');
	Laya.interface('laya.resource.IDispose');
	Laya.interface('laya.runtime.IConchNode');
	Laya.interface('laya.webgl.shapes.IShape');
	Laya.interface('laya.webgl.submit.ISubmit');
	Laya.interface('laya.filters.IFilterAction');
	Laya.interface('laya8.client.player.IActive');
	Laya.interface('laya.webgl.text.ICharSegment');
	Laya.interface('laya.runtime.ICPlatformClass');
	Laya.interface('view.page.gaming.ISkillAttack');
	Laya.interface('laya8.client.player.IViewCenter');
	Laya.interface('laya.webgl.canvas.save.ISaveData');
	Laya.interface('laya8.core.game.IGameEventHandler');
	Laya.interface('laya8.client.player.buffer.IBuffer');
	Laya.interface('laya8.client.player.game.IBattleMsg');
	Laya.interface('Lparticle.Affector.AffectorInterface');
	Laya.interface('laya.webgl.resource.IMergeAtlasBitmap');
	Laya.interface('laya8.client.player.skill.ISKillEffect');
	Laya.interface('laya8.client.player.attackCircle.ICircle');
	Laya.interface('laya8.client.player.game.fakeSV.ICollision');
	Laya.interface('Lparticle.Initializer.InitializerInterface');
	Laya.interface('view.page.wheel.ITips','laya.display.ILayout');
	Laya.interface('laya.filters.IFilterActionGL','laya.filters.IFilterAction');
	/**
	*@private
	*/
	//class laya.utils.RunDriver
	var RunDriver=(function(){
		function RunDriver(){};
		__class(RunDriver,'laya.utils.RunDriver');
		RunDriver.FILTER_ACTIONS=[];
		RunDriver.pixelRatio=-1;
		RunDriver._charSizeTestDiv=null
		RunDriver.now=function(){
			return Date.now();
		}

		RunDriver.getWindow=function(){
			return window;
		}

		RunDriver.getPixelRatio=function(){
			if (RunDriver.pixelRatio < 0){
				var ctx=Browser.context;
				var backingStore=ctx.backingStorePixelRatio || ctx.webkitBackingStorePixelRatio || ctx.mozBackingStorePixelRatio || ctx.msBackingStorePixelRatio || ctx.oBackingStorePixelRatio || ctx.backingStorePixelRatio || 1;
				RunDriver.pixelRatio=(Browser.window.devicePixelRatio || 1)/ backingStore;
				if (RunDriver.pixelRatio < 1)RunDriver.pixelRatio=1;
			}
			return RunDriver.pixelRatio;
		}

		RunDriver.getIncludeStr=function(name){
			return null;
		}

		RunDriver.createShaderCondition=function(conditionScript){
			var fn="(function() {return "+conditionScript+";})";
			return Browser.window.eval(fn);
		}

		RunDriver.fontMap=[];
		RunDriver.measureText=function(txt,font){
			var isChinese=RunDriver.hanzi.test(txt);
			if (isChinese && RunDriver.fontMap[font]){
				return RunDriver.fontMap[font];
			};
			var ctx=Browser.context;
			ctx.font=font;
			var r=ctx.measureText(txt);
			if (isChinese)RunDriver.fontMap[font]=r;
			return r;
		}

		RunDriver.getWebGLContext=function(canvas){
		};

		RunDriver.beginFlush=function(){
		};

		RunDriver.endFinish=function(){
		};

		RunDriver.addToAtlas=null
		RunDriver.flashFlushImage=function(atlasWebGLCanvas){
		};

		RunDriver.drawToCanvas=function(sprite,_renderType,canvasWidth,canvasHeight,offsetX,offsetY){
			var canvas=HTMLCanvas.create("2D");
			var context=new RenderContext(canvasWidth,canvasHeight,canvas);
			RenderSprite.renders[_renderType]._fun(sprite,context,offsetX,offsetY);
			return canvas;
		}

		RunDriver.createParticleTemplate2D=null
		RunDriver.createGLTextur=null;
		RunDriver.createWebGLContext2D=null;
		RunDriver.changeWebGLSize=function(w,h){
		};

		RunDriver.createRenderSprite=function(type,next){
			return new RenderSprite(type,next);
		}

		RunDriver.createFilterAction=function(type){
			return new ColorFilterAction();
		}

		RunDriver.createGraphics=function(){
			return new Graphics();
		}

		RunDriver.clear=function(value){
			Render._context.ctx.clear();
		}

		RunDriver.clearAtlas=function(value){
		};

		RunDriver.addTextureToAtlas=function(value){
		};

		RunDriver.getTexturePixels=function(value,x,y,width,height){
			return null;
		}

		RunDriver.skinAniSprite=function(){
			return null;
		}

		__static(RunDriver,
		['hanzi',function(){return this.hanzi=new RegExp("^[\u4E00-\u9FA5]$");}
		]);
		return RunDriver;
	})()


	/**
	*<code>Laya</code> 是全局对象的引用入口集。
	*Laya类引用了一些常用的全局对象，比如Laya.stage：舞台，Laya.timer：时间管理器，Laya.loader：加载管理器，使用时注意大小写。
	*/
	//class Laya
	var ___Laya=(function(){
		//function Laya(){};
		/**
		*表示是否捕获全局错误并弹出提示。默认为false。
		*适用于移动设备等不方便调试的时候，设置为true后，如有未知错误，可以弹窗抛出详细错误堆栈。
		*/
		__getset(1,Laya,'alertGlobalError',null,function(value){
			var erralert=0;
			if (value){
				Browser.window.onerror=function (msg,url,line,column,detail){
					if (erralert++< 5 && detail)
						alert("出错啦，请把此信息截图给研发商\n"+msg+"\n"+detail.stack);
				}
				}else {
				Browser.window.onerror=null;
			}
		});

		Laya.init=function(width,height,__plugins){
			var plugins=[];for(var i=2,sz=arguments.length;i<sz;i++)plugins.push(arguments[i]);
			if (Laya._isinit)return;
			ArrayBuffer.prototype.slice || (ArrayBuffer.prototype.slice=Laya._arrayBufferSlice);
			Laya._isinit=true;
			Browser.__init__();
			Context.__init__();
			Graphics.__init__();
			Laya.timer=new Timer();
			Laya.loader=new LoaderManager();
			for (var i=0,n=plugins.length;i < n;i++){
				if (plugins[i].enable)plugins[i].enable();
			}
			Font.__init__();
			Style.__init__();
			ResourceManager.__init__();
			CacheManger.beginCheck();
			Laya._currentStage=Laya.stage=new Stage();
			Laya.stage.conchModel && Laya.stage.conchModel.setRootNode();
			Laya.getUrlPath();
			Laya.render=new Render(0,0);
			Laya.stage.size(width,height);
			RenderSprite.__init__();
			KeyBoardManager.__init__();
			MouseManager.instance.__init__(Laya.stage,Render.canvas);
			Input.__init__();
			SoundManager.autoStopMusic=true;
			LocalStorage.__init__();
			return Render.canvas;
		}

		Laya.getUrlPath=function(){
			var location=Browser.window.location;
			var pathName=location.pathname;
			pathName=pathName.charAt(2)==':' ? pathName.substring(1):pathName;
			URL.rootPath=URL.basePath=URL.getPath(location.protocol=="file:" ? pathName :location.protocol+"//"+location.host+location.pathname);
		}

		Laya._arrayBufferSlice=function(start,end){
			var arr=this;
			var arrU8List=new Uint8Array(arr,start,end-start);
			var newU8List=new Uint8Array(arrU8List.length);
			newU8List.set(arrU8List);
			return newU8List.buffer;
		}

		Laya.stage=null;
		Laya.timer=null;
		Laya.loader=null;
		Laya.version="1.7.7beta";
		Laya.render=null
		Laya._currentStage=null
		Laya._isinit=false;
		__static(Laya,
		['conchMarket',function(){return this.conchMarket=window.conch?conchMarket:null;},'PlatformClass',function(){return this.PlatformClass=window.PlatformClass;}
		]);
		return Laya;
	})()


	/**
	*...
	*@author rivetr
	*/
	//class aniEffect.PowerElement
	var PowerElement=(function(){
		function PowerElement(){
			this.x=NaN;
			this.y=NaN;
			this.size=NaN;
			this.scale=NaN;
			this.texture=null;
		}

		__class(PowerElement,'aniEffect.PowerElement');
		var __proto=PowerElement.prototype;
		/**
		*初始化数据。
		*@param xi
		*@param yi
		*@param iscale
		*@param tex
		*/
		__proto.initPE=function(xi,yi,iscale,tex){
			this.x=xi;this.y=yi;
			this.texture=tex;
			this.size=this.texture.width;
			this.scale=iscale;
		}

		/**
		*核心渲染函数
		*@param xoff
		*@param yoff
		*@param graphics
		*/
		__proto.DrawPE=function(xoff,yoff,graphics){
			if (!this.texture)return;
			var hfsize=this.size *this.scale /2;
			graphics.drawTexture(this.texture,this.x-hfsize+xoff ,this.y-hfsize+yoff,hfsize *2,hfsize *2);
		}

		return PowerElement;
	})()


	/**
	*<code>EventDispatcher</code> 类是可调度事件的所有类的基类。
	*/
	//class laya.events.EventDispatcher
	var EventDispatcher=(function(){
		var EventHandler;
		function EventDispatcher(){
			this._events=null;
		}

		__class(EventDispatcher,'laya.events.EventDispatcher');
		var __proto=EventDispatcher.prototype;
		/**
		*检查 EventDispatcher 对象是否为特定事件类型注册了任何侦听器。
		*@param type 事件的类型。
		*@return 如果指定类型的侦听器已注册，则值为 true；否则，值为 false。
		*/
		__proto.hasListener=function(type){
			var listener=this._events && this._events[type];
			return !!listener;
		}

		/**
		*派发事件。
		*@param type 事件类型。
		*@param data （可选）回调数据。<b>注意：</b>如果是需要传递多个参数 p1,p2,p3,...可以使用数组结构如：[p1,p2,p3,...] ；如果需要回调单个参数 p 是一个数组，则需要使用结构如：[p]，其他的单个参数 p ，可以直接传入参数 p。
		*@return 此事件类型是否有侦听者，如果有侦听者则值为 true，否则值为 false。
		*/
		__proto.event=function(type,data){
			if (!this._events || !this._events[type])return false;
			var listeners=this._events[type];
			if (listeners.run){
				if (listeners.once)delete this._events[type];
				data !=null ? listeners.runWith(data):listeners.run();
				}else {
				for (var i=0,n=listeners.length;i < n;i++){
					var listener=listeners[i];
					if (listener){
						(data !=null)? listener.runWith(data):listener.run();
					}
					if (!listener || listener.once){
						listeners.splice(i,1);
						i--;
						n--;
					}
				}
				if (listeners.length===0 && this._events)delete this._events[type];
			}
			return true;
		}

		/**
		*使用 EventDispatcher 对象注册指定类型的事件侦听器对象，以使侦听器能够接收事件通知。
		*@param type 事件的类型。
		*@param caller 事件侦听函数的执行域。
		*@param listener 事件侦听函数。
		*@param args （可选）事件侦听函数的回调参数。
		*@return 此 EventDispatcher 对象。
		*/
		__proto.on=function(type,caller,listener,args){
			return this._createListener(type,caller,listener,args,false);
		}

		/**
		*使用 EventDispatcher 对象注册指定类型的事件侦听器对象，以使侦听器能够接收事件通知，此侦听事件响应一次后自动移除。
		*@param type 事件的类型。
		*@param caller 事件侦听函数的执行域。
		*@param listener 事件侦听函数。
		*@param args （可选）事件侦听函数的回调参数。
		*@return 此 EventDispatcher 对象。
		*/
		__proto.once=function(type,caller,listener,args){
			return this._createListener(type,caller,listener,args,true);
		}

		/**@private */
		__proto._createListener=function(type,caller,listener,args,once,offBefore){
			(offBefore===void 0)&& (offBefore=true);
			offBefore && this.off(type,caller,listener,once);
			var handler=EventHandler.create(caller || this,listener,args,once);
			this._events || (this._events={});
			var events=this._events;
			if (!events[type])events[type]=handler;
			else {
				if (!events[type].run)events[type].push(handler);
				else events[type]=[events[type],handler];
			}
			return this;
		}

		/**
		*从 EventDispatcher 对象中删除侦听器。
		*@param type 事件的类型。
		*@param caller 事件侦听函数的执行域。
		*@param listener 事件侦听函数。
		*@param onceOnly （可选）如果值为 true ,则只移除通过 once 方法添加的侦听器。
		*@return 此 EventDispatcher 对象。
		*/
		__proto.off=function(type,caller,listener,onceOnly){
			(onceOnly===void 0)&& (onceOnly=false);
			if (!this._events || !this._events[type])return this;
			var listeners=this._events[type];
			if (listener !=null){
				if (listeners.run){
					if ((!caller || listeners.caller===caller)&& listeners.method===listener && (!onceOnly || listeners.once)){
						delete this._events[type];
						listeners.recover();
					}
					}else {
					var count=0;
					for (var i=0,n=listeners.length;i < n;i++){
						var item=listeners[i];
						if (item && (!caller || item.caller===caller)&& item.method===listener && (!onceOnly || item.once)){
							count++;
							listeners[i]=null;
							item.recover();
						}
					}
					if (count===n)delete this._events[type];
				}
			}
			return this;
		}

		/**
		*从 EventDispatcher 对象中删除指定事件类型的所有侦听器。
		*@param type （可选）事件类型，如果值为 null，则移除本对象所有类型的侦听器。
		*@return 此 EventDispatcher 对象。
		*/
		__proto.offAll=function(type){
			var events=this._events;
			if (!events)return this;
			if (type){
				this._recoverHandlers(events[type]);
				delete events[type];
				}else {
				for (var name in events){
					this._recoverHandlers(events[name]);
				}
				this._events=null;
			}
			return this;
		}

		__proto._recoverHandlers=function(arr){
			if (!arr)return;
			if (arr.run){
				arr.recover();
				}else {
				for (var i=arr.length-1;i >-1;i--){
					if (arr[i]){
						arr[i].recover();
						arr[i]=null;
					}
				}
			}
		}

		/**
		*检测指定事件类型是否是鼠标事件。
		*@param type 事件的类型。
		*@return 如果是鼠标事件，则值为 true;否则，值为 false。
		*/
		__proto.isMouseEvent=function(type){
			return EventDispatcher.MOUSE_EVENTS[type];
		}

		EventDispatcher.MOUSE_EVENTS={"rightmousedown":true,"rightmouseup":true,"rightclick":true,"mousedown":true,"mouseup":true,"mousemove":true,"mouseover":true,"mouseout":true,"click":true,"doubleclick":true};
		EventDispatcher.__init$=function(){
			Object.defineProperty(laya.events.EventDispatcher.prototype,"_events",{enumerable:false,writable:true});
			/**@private */
			//class EventHandler extends laya.utils.Handler
			EventHandler=(function(_super){
				function EventHandler(caller,method,args,once){
					EventHandler.__super.call(this,caller,method,args,once);
				}
				__class(EventHandler,'',_super);
				var __proto=EventHandler.prototype;
				__proto.recover=function(){
					if (this._id > 0){
						this._id=0;
						EventHandler._pool.push(this.clear());
					}
				}
				EventHandler.create=function(caller,method,args,once){
					(once===void 0)&& (once=true);
					if (EventHandler._pool.length)return EventHandler._pool.pop().setTo(caller,method,args,once);
					return new EventHandler(caller,method,args,once);
				}
				EventHandler._pool=[];
				return EventHandler;
			})(Handler)
		}

		return EventDispatcher;
	})()


	/**
	*<p><code>Handler</code> 是事件处理器类。</p>
	*<p>推荐使用 Handler.create()方法从对象池创建，减少对象创建消耗。创建的 Handler 对象不再使用后，可以使用 Handler.recover()将其回收到对象池，回收后不要再使用此对象，否则会导致不可预料的错误。</p>
	*<p><b>注意：</b>由于鼠标事件也用本对象池，不正确的回收及调用，可能会影响鼠标事件的执行。</p>
	*/
	//class laya.utils.Handler
	var Handler=(function(){
		function Handler(caller,method,args,once){
			//this.caller=null;
			//this.method=null;
			//this.args=null;
			this.once=false;
			this._id=0;
			(once===void 0)&& (once=false);
			this.setTo(caller,method,args,once);
		}

		__class(Handler,'laya.utils.Handler');
		var __proto=Handler.prototype;
		/**
		*设置此对象的指定属性值。
		*@param caller 执行域(this)。
		*@param method 回调方法。
		*@param args 携带的参数。
		*@param once 是否只执行一次，如果为true，执行后执行recover()进行回收。
		*@return 返回 handler 本身。
		*/
		__proto.setTo=function(caller,method,args,once){
			this._id=Handler._gid++;
			this.caller=caller;
			this.method=method;
			this.args=args;
			this.once=once;
			return this;
		}

		/**
		*执行处理器。
		*/
		__proto.run=function(){
			if (this.method==null)return null;
			var id=this._id;
			var result=this.method.apply(this.caller,this.args);
			this._id===id && this.once && this.recover();
			return result;
		}

		/**
		*执行处理器，携带额外数据。
		*@param data 附加的回调数据，可以是单数据或者Array(作为多参)。
		*/
		__proto.runWith=function(data){
			if (this.method==null)return null;
			var id=this._id;
			if (data==null)
				var result=this.method.apply(this.caller,this.args);
			else if (!this.args && !data.unshift)result=this.method.call(this.caller,data);
			else if (this.args)result=this.method.apply(this.caller,this.args.concat(data));
			else result=this.method.apply(this.caller,data);
			this._id===id && this.once && this.recover();
			return result;
		}

		/**
		*清理对象引用。
		*/
		__proto.clear=function(){
			this.caller=null;
			this.method=null;
			this.args=null;
			return this;
		}

		/**
		*清理并回收到 Handler 对象池内。
		*/
		__proto.recover=function(){
			if (this._id > 0){
				this._id=0;
				Handler._pool.push(this.clear());
			}
		}

		Handler.create=function(caller,method,args,once){
			(once===void 0)&& (once=true);
			if (Handler._pool.length)return Handler._pool.pop().setTo(caller,method,args,once);
			return new Handler(caller,method,args,once);
		}

		Handler._pool=[];
		Handler._gid=1;
		return Handler;
	})()


	//class aniEffect.TraceOtherNode
	var TraceOtherNode=(function(){
		function TraceOtherNode(){
			this._self=null;
			this._todoSprite=null;
			this._offsetX=NaN;
			this._offsetY=NaN;
			this._sameParent=null;
			this._tmpPos1=null;
			this._tmpPos2=null;
		}

		__class(TraceOtherNode,'aniEffect.TraceOtherNode');
		var __proto=TraceOtherNode.prototype;
		/**
		*位置跟随控制
		*@param self 自己
		*@param todo 兄弟节点
		*@param sameParent 父对象
		*@param x 偏移
		*@param y 偏移
		*/
		__proto.init=function(self,todo,sameParent,x,y){
			this._tmpPos1=new Point();
			this._tmpPos2=new Point();
			this._self=self;
			this._todoSprite=todo;
			this._offsetX=x;
			this._offsetY=y;
			this._sameParent=sameParent;
		}

		__proto._getPosToThisParent=function(mi,pos){
			while(true){
				mi=mi.parent;
				if(mi==null)
					return;
				pos.x+=mi.x;
				pos.y+=mi.y;
				if(mi==this._sameParent)return;
			}
		}

		__proto.update=function(){
			if(this._todoSprite==null)
				return;
			this._tmpPos1.x=this._todoSprite.x;
			this._tmpPos1.y=this._todoSprite.y;
			this._getPosToThisParent(this._todoSprite,this._tmpPos1);
			this._tmpPos2.x=this._self.x-this._offsetX;
			this._tmpPos2.y=this._self.y-this._offsetY
			this._getPosToThisParent(this._self,this._tmpPos2);
			this._self.x+=this._tmpPos1.x-this._tmpPos2.x+this._offsetX;
			this._self.y+=this._tmpPos1.y-this._tmpPos2.y+this._offsetY;
		}

		return TraceOtherNode;
	})()


	//class controller.ResCacheManager
	var ResCacheManager=(function(){
		function ResCacheManager(){
			this.uiResList=[];
			this.battleResList=[];
			this.tLoadedRes=[];
			this.tResGroup=null;
			ResCacheManager.noClearFiles[URL.formatURL("res/atlas/ani/snow.atlas")]=true;
			this.uiResList=[
			"res/role/100.atlas",
			"res/atlas/rankList.atlas",
			"res/atlas/ani/guanzhu.atla",
			"res/atlas/chat.atlas",
			"res/atlas/huodong.atlas",
			"res/atlas/task.atlas",
			"res/atlas/shop.atlas",
			"res/atlas/email.atlas",
			"res/atlas/gametips.atlas",
			"res/atlas/team.atlas",
			"res/atlas/player.atlas",
			"res/atlas/setupInfo.atlas"];
		}

		__class(ResCacheManager,'controller.ResCacheManager');
		var __proto=ResCacheManager.prototype;
		__proto.leaveMainUI=function(){
			this.clearUIRes();
		}

		__proto.enterMainUI=function(){
			this.tResGroup="GroupMain";
		}

		__proto.leaveBattle=function(){
			this.clearBattleRes();
		}

		__proto.enterBattle=function(){
			this.tResGroup="GroupBattle";
		}

		__proto.addLoad=function(urls){
			if(!ResCacheManager.enable)return;
			if((urls instanceof Array)){
				var i=0,len=0;
				var urlList;
				urlList=urls;
				len=urlList.length;
				for(i=0;i<len;i++){
					this.addLoadObj(urls[i]);
				}
				}else{
				this.addLoadObj(urls);
			}
		}

		/**
		*获取指定资源地址的数据类型。
		*@param url 资源地址。
		*@return 数据类型。
		*/
		__proto.getTypeFromUrl=function(url){
			var type=Utils$2.getFileExtension(url);
			if (type)return Loader.typeMap[type];
			console.warn("Not recognize the resources suffix",url);
			return "text";
		}

		__proto.addLoadObj=function(url){
			var type;
			if(url.type){
				type=url.type;
				url=url.url;
				}else{
				if(url.url)url=url.url;
				type=this.getTypeFromUrl(url);
			}
			if(this.tResGroup=="GroupBattle"){
				if(type=="image"||type=="atlas"){
					this.battleResList.push(url);
				}
			}
		}

		__proto.clearUIRes=function(){
			console.log("clearUIRes");
			this.clearResList(this.uiResList);
		}

		__proto.clearBattleRes=function(){
			console.log("clearBattleRes");
			this.clearResList(this.battleResList);
			this.battleResList.length=0;
		}

		__proto.releaseRes=function(url){
			url=URL.formatURL(url);
			var arr=Loader.getAtlas(url);
			var res;
			if(arr){
				res=Loader.getRes(arr[0]);
				}else{
				res=Loader.getRes(url);
			}
			if ((res instanceof laya.resource.Texture )&& res.bitmap&& (res.bitmap instanceof laya.webgl.resource.WebGLImage )){
				res.bitmap.releaseResource(true);
			}
		}

		__proto.clearResList=function(resList){
			if(!ResCacheManager.enable)return;
			var i=0,len=0;
			len=resList.length;
			for(i=0;i<len;i++){
				this.releaseRes(resList[i]);
			}
		}

		ResCacheManager.enable=true;
		ResCacheManager.GroupMain="GroupMain";
		ResCacheManager.GroupBattle="GroupBattle";
		ResCacheManager.noClearFiles={};
		__static(ResCacheManager,
		['I',function(){return this.I=new ResCacheManager();}
		]);
		return ResCacheManager;
	})()


	/**
	*...
	*@author lisa
	*/
	//class CrazySnowball
	var CrazySnowball=(function(){
		function CrazySnowball(){
			this._extendStr=null;
			this._errorBg=null;
			this._errorBox=null;
			this._preImage=null;
			this._preImageArr=[
			"MessageBox/loginBG1.jpg",
			"res/load_bj.png",
			"res/bj_part.png",
			"res/atlas/ani/snow.png",
			"res/atlas/login2.png",
			"common/bg.jpg",
			"common/bg031.png",
			"res/atlas/newhall.png"];
			this.errorCount=0;
			this.pNum=0;
			var _$this=this;
			MiniAdpter.init(true);
			CrazySnowball.isRelease=window.isRelease || CrazySnowball.isRelease;
			Laya.alertGlobalError=!CrazySnowball.isRelease;
			StatManager.isDebug=1;
			StatManager.isUse=false;
			Laya.init(1280,720,WebGL);
			if(!SnowUtils.chkIsFB()){
				SoundManager.useAudioMusic=true;
			}
			Laya.stage.scaleMode="fixedheight";
			Laya.stage.screenMode="horizontal";
			this.onSetPath();
			if (!Browser.onMiniGame){
				Laya8Hall.langSpec='us';
				Laya.stage.bgColor='#000000';
				window.hostStr=document.baseURI.substr(document.baseURI.indexOf('?'));
				UIMgr.init();
				this.onWxCallBack();
			}
			else{
				Laya.stage.bgColor='#fffffe';
				Browser.window.hostStr='?';
				MsgMgr.instance.initWxFunc();
				NotifyCenter.I.on("onLoginError",this,this.onLoginError);
				wx.onShow(function(data){
					MouseManager.enabled=true;
					if(CrazySnowball.shareData==null)
						CrazySnowball.shareData=data;
					console.log("---------------shareData--------------");
					console.log(CrazySnowball.shareData);
					console.log("---------------data--------------");
					console.log(data);
					var query=data.query;
					Browser.window.hostStr='?';
					for(var k in query){
						if(Browser.window.hostStr !="?")
							Browser.window.hostStr+="&"
						Browser.window.hostStr+=k+"="+query[k];
					};
					var configData=Loader.getRes("layaNativeDir/config.json");
					console.log("--------------------configData---------1-------------");
					if(configData){
						console.log("--------------------configData-------2---------------");
						var query2=configData;
						for(k in query2){
							if(Browser.window.hostStr !="?")
								Browser.window.hostStr+="&";
							Browser.window.hostStr+=k+"="+query2[k];
						}
					}
					console.log("-----------1-------------Browser.window.hostStr:"+Browser.window.hostStr);
					if(!CrazySnowball.isInitGame){
						_$this.onCreatePreBox(query);
						CrazySnowball.isInitGame=true;
						UIMgr.init();
						_$this.onPreUseImage();
						}else{
						if(data && data.query){
							if(!FreeMatch.isZuDui && data.query.sh){
								CrazySnowball.shareData=data;
								_$this.onLoadShareRes();
								}else{
								console.log("------------------1---------------------");
								console.log(CrazySnowball.shareData);
								if(!MsgManager.isInRoom && !FreeMatch.isZuDui)
									MenuList.I && MenuList.I.checkTeam();
							}
						}
						MenuList.I && MenuList.I.onSetSound(1);
					}
				});
			}
			this.initVer();
			this.initErrorUpload();
		}

		__class(CrazySnowball,'CrazySnowball');
		var __proto=CrazySnowball.prototype;
		__proto.onToReal=function(){
			Browser.window.location.href="https://client.xq.qq.com/pre/snow.html?gameid=10000&spId=-5&isinsert=1&_wv=2147666864&_wwv=2048";
		}

		__proto.onLoginError=function(){
			this._errorBox=new Box();
			Laya.stage.addChild(this._errorBox);
			this._errorBox.left=this._errorBox.right=this._errorBox.top=this._errorBox.bottom=0;
			this._errorBg=new Image();
			this._errorBg.skin="layaNativeDir/errorbg.jpg";
			this._errorBox.addChild(this._errorBg);
			this._errorBg.centerX=0.5;
			this._errorBg.centerY=0.5;
		}

		/**
		*预加载处理使用图片
		*/
		__proto.onPreUseImage=function(){
			if(this._preImageArr.length){
				if(this._preImage==null){
					this._preImage=new Image();
					Laya.stage.addChild(this._preImage);
					this._preImage.pos(-2000,-2000);
				}
				this._preImage.skin=this._preImageArr.pop();
				Laya.timer.once(100,this,this.onPreUseImage);
				}else{
				if(this._preImage){
					this._preImage.removeSelf();
					this._preImage=null;
				}
				Laya.timer.clear(this,this.onPreUseImage);
				Laya.timer.once(100,this,this.onWxCallBack);
			}
		}

		/**
		*创建预加载页面
		*@param query
		*/
		__proto.onCreatePreBox=function(query){
			if(query.sh){
				CrazySnowball.preBox=new Box();
				Laya.stage.addChild(CrazySnowball.preBox);
				CrazySnowball.preBox.left=CrazySnowball.preBox.right=CrazySnowball.preBox.top=CrazySnowball.preBox.bottom=0;
				var image=new Image();
				image.skin="MessageBox/loginBG1.jpg";
				CrazySnowball.preBox.addChild(image);
				image.left=image.right=image.top=image.bottom=0;
			}
		}

		/**设置路径信息**/
		__proto.onSetPath=function(){
			if (CrazySnowball.isRelease){
				CrazySnowball.version=window.version || CrazySnowball.version;
				CrazySnowball.sourcePath=window.imagePath || "";
				SnowUtils.isSSL=window.wxSSL;
				URL.rootPath=URL.basePath=MiniFileMgr.loadPath=CrazySnowball.sourcePath+CrazySnowball.version+"/";
				if (CrazySnowball.sourcePath){
					Conf.CUSTOMUI_BASE_URL=CrazySnowball.sourcePath+CrazySnowball.version+"/laya8/";
					var baseURL=Browser.document.baseURI;
					if (!Browser.onMiniGame){
						var indexw=baseURL.indexOf("?");
						var str=baseURL.substring(0,indexw);
						var prePath=str.substring(0,str.lastIndexOf("/"));
						Conf.CONFIGCENTER_URL=CrazySnowball.sourcePath+"/laya8/";
					}
				}
				else{
					var loc=window.location;
					prePath=loc.protocol+"//"+loc.host+loc.pathname.substring(0,loc.pathname.lastIndexOf('/'))+"/";
					Conf.CUSTOMUI_BASE_URL=prePath+CrazySnowball.version+"/laya8/";
				}
			}
			if(!CrazySnowball.isRelease && Browser.onMiniGame){
				URL.rootPath=URL.basePath=MiniFileMgr.loadPath=window.imagePath+window.version+"/";
			}
		}

		/**点击分享回调处理**/
		__proto.onWxCallBack=function(){
			HareObject;
			FoodBulletObject;
			PathSimple;
			SnowGroupObject;
			SBBulletObject;
			DiamondObject;
			AniObject;
			Pathfollow;
			MSGInit.init();
			BufferManager.__init__();
			SkillManger.__init__();
			SoundManager.autoStopMusic=false;
			if (!Browser.onMiniGame&&SnowUtils.getQueryString("fps")){
				Stat.show();
			}
			View.regComponent("FontClip",FontClip);
			Browser.window.document.write=function (){};
			Font.defaultFamily="SimHei";
			if(Browser.onMiniGame){
				var shareType=SnowUtils.getQueryString("sh");
				if(Browser.onMiniGame&&!shareType){
					LoadingSplash.I.addSplash(Handler.create(this,this.loadFilesFst));
					}else{
					this.loadFilesFst();
				}
				}else{
				this.loadFilesFst();
			}
		}

		__proto.initVer=function(){
			CrazySnowball.gameId=parseInt(SnowUtils.getQueryString("gameid"));
			var href=Browser.document.baseURI;
			var sv="";
			if (Browser.onMiniGame){
				sv="5";
				StatManager.isDebug=0;
				StatManager.isUse=true;
				CrazySnowball.errorType="wx";
				CrazySnowball.realyVersion=CrazySnowball.version+"."+sv;
				return;
			}
			else{
				sv="6";
				StatManager.isDebug=0;
				StatManager.isUse=true;
				CrazySnowball.errorType="fb";
				CrazySnowball.realyVersion=CrazySnowball.version+"."+sv;
				return;
			}
			if (href.indexOf('client.xq.qq.com/test')>-1){
				sv="2";
				CrazySnowball.errorType="test";
			}
			else if (href.indexOf('client.xq.qq.com/qq')>-1){
				StatManager.isDebug=0;
				StatManager.isUse=true;
				sv="2";
				CrazySnowball.errorType="qq";
			}
			else if(href.indexOf('client.xq.qq.com/qzone')>-1){
				StatManager.isDebug=0;
				StatManager.isUse=true;
				sv="4";
				CrazySnowball.errorType="qzone";
			}
			else{
				sv="3";
			}
			CrazySnowball.realyVersion=CrazySnowball.version+"."+sv;
		}

		/**当前版本号对应资源的离线缓存更新*/
		__proto.chkMemUpdate=function(){
			var navigator=window.navigator;
			if (navigator.serviceWorker&&window.location.protocol=='https:'){
				navigator.serviceWorker.register('sw.js').then(function(registration){
					console.log('sw 注册成功');
					}).catch (function(err){
					console.log('sw 注册失败');
				});
				if (navigator.serviceWorker.controller){
					var channel=new MessageChannel;
					channel.port1.onmessage=handleMessage;
					function handleMessage (event){
						console.log("------>sw port1.onmessage 页面接收到service worker的回传消息: "+event.data.msg);
					}
					navigator.serviceWorker.controller.postMessage({verNum:CrazySnowball.version},[channel.port2]);
				}
			}
			else{
			}
		}

		__proto.initErrorUpload=function(){
			ErrorLog.init(CrazySnowball.errorType,Method.getUnionId(),CrazySnowball.gameId,CrazySnowball.version);
		}

		/**加载资源更新信息-判断资源*/
		__proto.loadFilesFst=function(){
			if(!CrazySnowball.isConnected){
				CrazySnowball.onShowDialog();
				return;
			}
			SnowUtils.I.visionLoad();
			var resArr=[
			{url:"res/atlas/loading.atlas",type:"atlas"},
			{url:"ui.json",type:"json"},
			{url:"res/atlas/newhall.atlas",type:"atlas"},
			{url:"res/atlas/common.atlas",type:"atlas"},
			{url:"res/atlas/login2.atlas",type:"atlas"},
			{url:"res/atlas/login.atlas",type:"atlas"},
			{url:"load/LoadingAni.ani",type:"json"}];
			if(SnowUtils.chkIsFB()){
				resArr.push({url:"res/atlas/ani/snow.atlas",type:"atlas"});
				resArr.push({url:"res/atlas/login2.atlas",type:"atlas"});
				resArr.push({url:"res/atlas/layacommon.atlas",type:"atlas"});
				resArr.push({url:"newLb/bg031.png",type:"image"});
				resArr.push({url:"res/atlas/newLb.atlas",type:"atlas"});
			}
			resArr.push({url:"layaNativeDir/config.json",type:"json"});
			if(Browser.onMiniGame){
				resArr.push({url:"laya8/MessageBox.json",type:"json"});
				if(CrazySnowball.shareData && CrazySnowball.shareData.query && CrazySnowball.shareData.query.sh){
					resArr.push({url:"res/atlas/newRank.atlas",type:"atlas"});
					if(CrazySnowball.shareData.scene==1007){
						resArr.push({url:"newRank/bg2.jpg",type:"image"});
						}else if(CrazySnowball.shareData.scene==1044 || CrazySnowball.shareData.scene==1008){
						if(CrazySnowball.shareData.hasOwnProperty("shareTicket")|| CrazySnowball.shareData.scene==1008){
							resArr.push({url:"newRank/bg.jpg",type:"image"});
							}else{
							resArr.push({url:"newRank/bg2.jpg",type:"image"});
						}
					}
				}
				}else{
				resArr.push({url:"res/atlas/newhall.atlas",type:"atlas"});
			}
			SnowLoad.I.load(resArr,Handler.create(this,this.onLoadGameConfigRes));
		}

		__proto.onLoadGameConfigRes=function(){
			if(!CrazySnowball.isConnected && Browser.onMiniGame){
				CrazySnowball.onShowDialog();
				return;
			}
			SnowLoad.I.load([{url:"json/gameconfig.json",type:"json"}],Handler.create(this,this.loadingSrc));
		}

		__proto.onLoadShareRes=function(){
			var resArr=[];
			if(Browser.onMiniGame){
				if(CrazySnowball.shareData && CrazySnowball.shareData.query && CrazySnowball.shareData.query.sh){
					console.log("-------------------------share----------playerpk----------1------------");
					resArr.push({url:"res/atlas/newRank.atlas",type:"atlas"});
					if(CrazySnowball.shareData.scene==1007){
						console.log("-------------------------share----------playerpk----------2------------");
						resArr.push({url:"newRank/bg2.jpg",type:"image"});
						}else if(CrazySnowball.shareData.scene==1044 || CrazySnowball.shareData.scene==1008){
						console.log("-------------------------share----------playerpk----------3------------");
						if(CrazySnowball.shareData.hasOwnProperty("shareTicket")|| CrazySnowball.shareData.scene==1008){
							resArr.push({url:"newRank/bg.jpg",type:"image"});
							}else{
							resArr.push({url:"newRank/bg2.jpg",type:"image"});
						}
					}
				}
			}
			SnowLoad.I.load(resArr,Handler.create(this,this.loadingSrc2));
		}

		__proto.loadingSrc2=function(){
			var shareType=SnowUtils.getQueryString("sh");
			console.log("----share----------playerpk-----shareType:"+shareType);
			if(Browser.onMiniGame && shareType){
				if(CrazySnowball.shareData.scene==1007){
					console.log("-------------------------share----------playerpk----------4------------");
					ShareSingleFView.onShowMe();
					Laya.timer.once(1000,this,function(){
						NotifyCenter.I.event("onRenderPersonPk");
					});
					}else if(CrazySnowball.shareData.scene==1044 || CrazySnowball.shareData.scene==1008){
					console.log("-------------------------share----------playerpk----------5------------");
					if(CrazySnowball.shareData.hasOwnProperty("shareTicket")|| CrazySnowball.shareData.scene==1008){
						console.log("----------------shareTicket----------存在---------------");
						NewRankView.onShowMe();
						Laya.timer.once(1000,this,function(){
							NotifyCenter.I.event("onRenderRanklist");
						});
						}else{
						ShareSingleFView.onShowMe();
						Laya.timer.once(1000,this,function(){
							NotifyCenter.I.event("onRenderPersonPk");
						});
					}
				}
			}
		}

		__proto.loadingSrc=function(){
			var configData=Laya.loader.getRes("layaNativeDir/config.json");
			var query=configData;
			for(var k in query){
				if(Browser.window.hostStr !="?")
					Browser.window.hostStr+="&";
				Browser.window.hostStr+=k+"="+query[k];
			}
			View.uiMap=Laya.loader.getRes("ui.json");
			ConfigData.initConfig();
			this.loadAssets();
			var shareType=SnowUtils.getQueryString("sh");
			if(Browser.onMiniGame && shareType){
				if(CrazySnowball.shareData.scene==1007){
					ShareSingleFView.onShowMe();
					}else if(CrazySnowball.shareData.scene==1044 || CrazySnowball.shareData.scene==1008){
					if(CrazySnowball.shareData.hasOwnProperty("shareTicket")|| CrazySnowball.shareData.scene==1008){
						NewRankView.onShowMe();
						}else{
						ShareSingleFView.onShowMe();
					}
				}
			}
		}

		__proto.loadAssets=function(){
			NotifyCenter.I.init();
			UserInfoMgr.I.init();
			CrazySnowball.normalLog=Render.isConchApp || !!SnowUtils.getQueryString("gameid")|| (Browser.window.self !=Browser.window.parent);
			if (CrazySnowball.normalLog){
				var isinsert=!!SnowUtils.getQueryString("isinsert");
				CrazySnowball.isembed=!!SnowUtils.getQueryString("isembed")|| isinsert;
				var gameId=parseInt(SnowUtils.getQueryString("gameId"));
				if (CrazySnowball.isembed){
					var halls=new Laya8Hall(gameId,Handler.create(this,this.goGame));
					}else{
					this.goGame();
				}
			}
		}

		__proto.goGame=function(){
			var _$this=this;
			HallApp.init(CrazySnowball.gameId,MyGameEventHandler.I,CrazySnowball.realyVersion);
			this.loadProSet();
			var ww=Browser.window._lyww || "";
			if (ww)ww+=("/"+Browser.window._lyqd+"/");
			var ver=Laya.timer.currTimer;
			CrazySnowball.buyswitch=ww+"buySwitch.json?"+ver;
			Laya.loader.load([ww+"gg.json?"+ver,CrazySnowball.buyswitch],Handler.create(this,function(b){
				if (b){
					var ggList=Laya.loader.getRes(ww+"gg.json?"+ver);
					if (!SnowUtils.getQueryString("ignoregg")){
						if (ggList && ggList.id !=-1){
							TipsView.showMe("",ggList.desc);
							if(Browser.onMiniGame){
								LoadingSplash.I.dispose();
								TipsView.myCallback=Handler.create(this,function(){
									MsgMgr.exit();
								});
								}else{
								HallApp.myRemoveSplash();
							}
							return;
						}
					}
				}
				_$this.enterGame();
			}));
		}

		__proto.loadProSet=function(){
			this.pNum=0;
			Laya.timer.frameLoop(2,this,this.loadChg);
		}

		__proto.loadChg=function(){
			this.pNum+=1;
			if (this.pNum >=100)
				this.pNum=99;
			Laya8Core.game.setLoadingProgress(this.pNum);
		}

		__proto.enterGame=function(){
			var show=LocalStorage.getItem("ResloadingShow");
			RoleCenter.I.on("onMyGotLoginData",this,this.onGotLoginData);
			HallApp.userLogin();
		}

		__proto.onGotLoginData=function(){
			RoleCenter.I.off("onMyGotLoginData",this,this.onGotLoginData);
			HallApp.getDirectPayItems();
			Log_Test.info("大厅消息初始化完毕");
			ErrorLog.initUser(RoleCenter.I.userId+"",RoleCenter.I.openId);
			ErrorLog.I && (ErrorLog.I.reportError("logined","0.2",null));
			HallApp.notify(new RequestNewUserEnter());
			var buySwitch=Laya.loader.getRes(CrazySnowball.buyswitch);
			if (buySwitch){
				var unionList=buySwitch.unionList;
				var whiteList=buySwitch.whiteList;
				if (unionList.indexOf(Method.getUnionId())!=-1){
					RoleCenter.buySwitchOff=true;
				}
				if (whiteList.indexOf(RoleCenter.I.openId)!=-1){
					RoleCenter.buySwitchOff=false;
				}
			}
			Laya.timer.clear(this,this.loadChg);
			Laya8Core.game.setLoadingProgress(100);
		}

		CrazySnowball.removePreBox=function(){
			if(CrazySnowball.preBox){
				CrazySnowball.preBox.removeChildren();
				CrazySnowball.preBox.removeSelf();
				CrazySnowball.preBox=null;
			}
		}

		CrazySnowball.reportError=function(type,str){
			ErrorLog.I && ErrorLog.I.reportError(type,str,null);
		}

		CrazySnowball.newGuid=function(){
			var guid="";
			for (var i=1;i <=32;i++){
				var n=Math.floor(Math.random()*16.0).toString(16);
				guid+=n;
				if((i==8)||(i==12)||(i==16)||(i==20))
					guid+="-";
			}
			return guid;
		}

		CrazySnowball.reportOneMin=function(type,value){
			ErrorLog.I && ErrorLog.I.reportOneMin(type,value);
		}

		CrazySnowball.addStat=function(type,data){
			ErrorLog.I && ErrorLog.I.addStat(type,data);
		}

		CrazySnowball.onShowDialog=function(msg){
			(msg===void 0)&& (msg="Something seems to be wrong with your network. It's not connected to the game right now. Please exit and try again.");
			msg=SnowUtils.chkIsFB()? msg :"你的网络出现异常，无法正常连接游戏，请退出重新尝试!";
			UIMgr.closeUI(TipsView);
			if(CrazySnowball.isOpen){
				lMessage !=null && (lMessage.text=msg);
				return;
			}
			CrazySnowball.isOpen=true;
			UIMgr.closeUI(TipsView);
			CrazySnowball.box2=new Box();
			Laya.stage.addChild(CrazySnowball.box2);
			CrazySnowball.box2.left=CrazySnowball.box2.right=CrazySnowball.box2.top=CrazySnowball.box2.bottom=0;
			CrazySnowball.boxBg=new Image();
			CrazySnowball.boxBg.skin="MessageBox/loginBG1.jpg";
			CrazySnowball.boxBg.left=CrazySnowball.boxBg.right=CrazySnowball.boxBg.top=CrazySnowball.boxBg.bottom=0;
			CrazySnowball.box2.addChild(CrazySnowball.boxBg);
			CrazySnowball.myDialog=new Box();
			CrazySnowball.myDialog.size(644,470);
			CrazySnowball.myDialog.centerX=CrazySnowball.myDialog.centerY=0;
			CrazySnowball.box2.addChild(CrazySnowball.myDialog);
			var bg=new Image();
			bg.skin="common/bg031.png";
			bg.sizeGrid="157,114,172,114";
			bg.size(642,447);
			CrazySnowball.myDialog.addChild(bg);
			var tishi=new Image();
			tishi.skin="common/tishi.png";
			CrazySnowball.myDialog.addChild(tishi);
			tishi.pos(322,54);
			tishi.anchorX=tishi.anchorY=0.5;
			var lMessage=new Label();
			lMessage.text=msg;
			lMessage.color="#bff7ff";
			lMessage.bold=false;
			lMessage.font="SimHei";
			lMessage.fontSize=26;
			lMessage.align="center";
			lMessage.valign="middle";
			lMessage.pos(322,217);
			lMessage.size(512,200);
			lMessage.wordWrap=true;
			lMessage.anchorX=lMessage.anchorY=0.5;
			lMessage.centerX=0.5;
			CrazySnowball.myDialog.addChild(lMessage);
			var btnOk=new Image();
			btnOk.skin="common/yes.png";
			btnOk.pos(322,373);
			btnOk.anchorX=btnOk.anchorY=0.5;
			CrazySnowball.myDialog.addChild(btnOk);
			btnOk.on("click",null,CrazySnowball.onBtnOkClick);
			MouseManager.enabled=true;
		}

		CrazySnowball.onBtnOkClick=function(){
			MsgMgr.exit();
		}

		CrazySnowball.showError=function(msg){
			HallApp.showErrorMsgBox("","网络异常,请刷新重试("+msg+")");
		}

		CrazySnowball.showRoomList=function(){
			if (!CrazySnowball.normalLog){
				Browser.window.location.reload();
				return;
			}
			if (enumRoomType.isAgain){
				Loading.I.showAgain();
				HallApp.match(enumRoomType.nowType);
				}else{
				RoleCenter.finalMusic=ConfigData.soundCfg[1];
				SoundManager.playMusic(RoleCenter.finalMusic);
				MenuList.onShowMe();
			}
		}

		CrazySnowball.removeRoomList=function(){
			UIMgr.closeUI(MenuList);
			UIMgr.closeAllByLayer("layer_pop2");
		}

		CrazySnowball.version="V1.0.7";
		CrazySnowball.sourcePath="";
		CrazySnowball.realyVersion=null
		CrazySnowball.gameId=10000;
		CrazySnowball.ip="10.10.20.43";
		CrazySnowball.port=9000;
		CrazySnowball.normalLog=false;
		CrazySnowball.isembed=false;
		CrazySnowball.isSelf=true;
		CrazySnowball.isDanji=false;
		CrazySnowball.isDevelop=false;
		CrazySnowball.isRelease=false;
		CrazySnowball.errorType="dev";
		CrazySnowball.hostStr="?gameid=10000&spId=-107&isinsert=1";
		CrazySnowball.isInitGame=false;
		CrazySnowball.shareData=null;
		CrazySnowball.isConnected=true;
		CrazySnowball.preBox=null
		CrazySnowball.isOpen=false;
		CrazySnowball.box2=null
		CrazySnowball.boxBg=null
		CrazySnowball.myDialog=null
		CrazySnowball.buyswitch=null
		return CrazySnowball;
	})()


	/**
	*时间线管理类
	*@author xiaosong
	*@date-2017-03-19
	*/
	//class effect.EffectUtils
	var EffectUtils=(function(){
		function EffectUtils(){}
		__class(EffectUtils,'effect.EffectUtils');
		EffectUtils.alphaHideEffect=function(target,complete,time){
			(time===void 0)&& (time=500);
			if(EffectUtils._isMove)
				return;
			EffectUtils._isMove=true;
			EffectUtils._timeLine.addLabel("sacle1.1",0).to(target,{alpha:0},time,null,0);
			EffectUtils._timeLine.play(0,false);
			EffectUtils._timeLine.on("complete",EffectUtils,effect.EffectUtils.onTLAComplete,[complete,target]);
		}

		EffectUtils.onTLAComplete=function(complete,target){
			EffectUtils._isMove=false;
			EffectUtils._timeLine.reset();
			target.alpha=1;
			target.visible=false;
			Laya.timer.once(1000,EffectUtils,function(){
				complete !=null && complete.run();
			});
			EffectUtils._timeLine.off("complete",EffectUtils,effect.EffectUtils.onTLAComplete);
		}

		EffectUtils.sacleOrAlphaEffect=function(target,complete,time,isHide,yanchiTime){
			(time===void 0)&& (time=500);
			(isHide===void 0)&& (isHide=false);
			(yanchiTime===void 0)&& (yanchiTime=1000);
			if(EffectUtils._isMove)
				return;
			EffectUtils._isMove=true;
			EffectUtils._timeLine.addLabel("sacle1.1",0).to(target,{scaleX:1.1,scaleY:1.1},time,null,0);
			EffectUtils._timeLine.addLabel("sacle0.9",0).to(target,{scaleX:0.9,scaleY:0.9},time,null,0);
			EffectUtils._timeLine.addLabel("sacle1",0).to(target,{scaleX:1,scaleY:1},time,null,0);
			if(isHide){
				EffectUtils._timeLine.addLabel("sacle1.0",0).to(target,{alpha:0},time*4,null,yanchiTime);
			}
			EffectUtils._timeLine.play(0,false);
			EffectUtils._timeLine.on("complete",EffectUtils,effect.EffectUtils.onTLComplete,[complete,target,isHide]);
		}

		EffectUtils.onTLComplete=function(complete,target,isHide){
			EffectUtils._isMove=false;
			EffectUtils._timeLine.reset();
			target.alpha=1;
			if(isHide){
				target.visible=false;
				Laya.timer.once(500,EffectUtils,function(){
					complete !=null && complete.run();
				});
				}else{
				complete !=null && complete.run();
			}
			EffectUtils._timeLine.off("complete",EffectUtils,effect.EffectUtils.onTLComplete);
		}

		EffectUtils.scaleEffect=function(target,complete,time){
			(time===void 0)&& (time=150);
			if(EffectUtils._isMove)
				return;
			EffectUtils._isMove=true;
			EffectUtils._timeLine.addLabel("first0.9",0).to(target,{scaleX:1.1,scaleY:1.1},time,null,0)
			EffectUtils._timeLine.addLabel("three0.9",0).to(target,{scaleX:0.9,scaleY:0.9},time,null,0)
			EffectUtils._timeLine.addLabel("four1",0).to(target,{scaleX:1,scaleY:1},time,null,0);
			EffectUtils._timeLine.on("complete",EffectUtils,EffectUtils.onTimeLineComplete,[complete,target]);
			EffectUtils._timeLine.play(0,false);
		}

		EffectUtils.scaleDoubleEffect=function(target,complete,time){
			(time===void 0)&& (time=300);
			if(EffectUtils._isMove)
				return;
			EffectUtils._isMove=true;
			EffectUtils._timeLine.addLabel("first1.1",0).to(target,{scaleX:1.1,scaleY:1.1},time,null,0)
			EffectUtils._timeLine.addLabel("three0.9",0).to(target,{scaleX:0.9,scaleY:0.9},time,null,0)
			EffectUtils._timeLine.addLabel("first1.11",0).to(target,{scaleX:1.1,scaleY:1.1},time,null,0)
			EffectUtils._timeLine.addLabel("three0.99",0).to(target,{scaleX:0.9,scaleY:0.9},time,null,0)
			EffectUtils._timeLine.addLabel("four1",0).to(target,{scaleX:1,scaleY:1},time,null,0);
			EffectUtils._timeLine.play(0,false);
			EffectUtils._timeLine.on("complete",EffectUtils,EffectUtils.onTimeLineComplete,[complete,target]);
		}

		EffectUtils.onTimeLineComplete=function(complete,target,evt){
			EffectUtils._isMove=false;
			EffectUtils._timeLine.reset();
			complete&& complete.run();
		}

		EffectUtils.openDialog=function(target,compH){
			target.cacheAs="none";
			target&&(target.mouseEnabled=false);
			target.pivot(target.width/2,target.height/2);
			target.pos(EffectUtils.CURRENTWIDTH/UIMgr.scale/2,EffectUtils.CURRENTHEIGHT/UIMgr.scale/2);
			target.scale(0,0);
			Tween.to(target,{scaleX:1,scaleY:1},250,Ease.backOut,Handler.create(EffectUtils,function(){
				if (target){
					target.mouseEnabled=true;
					target.cacheAs="none";
					compH && compH.run();
				}
			}));
		}

		EffectUtils.closeDialog=function(target,callBack){
			target&&(target.mouseEnabled=false);
			Tween.to(target,{scaleX:0,scaleY:0},250,Ease.backIn,Handler.create(EffectUtils,function(){
				target&&(target.mouseEnabled=true);
				callBack&&callBack.run();
			}));
		}

		EffectUtils.shrinkEffect=function(target,targetObj,time,ease,direction){
			(time===void 0)&& (time=300);
			(direction===void 0)&& (direction=true);
			var targetX=NaN,targetY=NaN;
			if(targetObj.hasOwnProperty("x"))
				targetX=targetObj.x;
			if(targetObj.hasOwnProperty("y"))
				targetY=targetObj.y;
			if(direction)
				Tween.to(target,{x:targetX},time,ease);
			else
			Tween.to(target,{y:targetY},time,ease);
		}

		EffectUtils.tada=function(target,tTime){
			var tl=new TimeLine();
			tl.reset();
			tl.to(target,{scaleX:1.1,scaleY:1.1,rotation:3},tTime *0.1)
			.to(target,{scaleX:1.1,scaleY:1.1,rotation:-3},tTime *0.1)
			.to(target,{scaleX:1.1,scaleY:1.1,rotation:3},tTime *0.1)
			.to(target,{scaleX:1.1,scaleY:1.1,rotation:-3},tTime *0.1)
			.to(target,{scaleX:1.1,scaleY:1.1,rotation:3},tTime *0.1)
			.to(target,{scaleX:1.1,scaleY:1.1,rotation:-3},tTime *0.1)
			.to(target,{scaleX:1.1,scaleY:1.1,rotation:3},tTime *0.1)
			.to(target,{scaleX:1.1,scaleY:1.1,rotation:-3},tTime *0.1)
			.to(target,{scaleX:1.1,scaleY:1.1,rotation:3},tTime *0.1)
			.to(target,{scaleX:1,scaleY:1,rotation:0},tTime *0.1);
			tl.play(0);
			return tl;
		}

		EffectUtils.CURRENTWIDTH=0;
		EffectUtils.CURRENTHEIGHT=0;
		EffectUtils._isMove=false;
		__static(EffectUtils,
		['_timeLine',function(){return this._timeLine=new TimeLine();}
		]);
		return EffectUtils;
	})()


	/**
	*...
	*@author yung
	*/
	//class effect.PanelEffect
	var PanelEffect=(function(){
		function PanelEffect(){
			this.target=null;
			this.left=null;
			this.top=null;
			this.bottom=null;
			this.complete=null;
			this.caches=[false,false,false];
			this.pTarget=null;
			this.sp=null;
			this.leftPoint=new Point();
			this.topPoint=new Point();
			this.bottomPoint=new Point();
		}

		__class(PanelEffect,'effect.PanelEffect');
		var __proto=PanelEffect.prototype;
		__proto.reg=function(target){
			if (!this.target){
				this.target=target;
				this.sp=target.getChildByName("spBox");
				if (this.sp)this.pTarget=this.sp;
				else this.pTarget=target;
				this.left=this.pTarget.getChildByName("leftPanel");
				this.top=target.getChildByName("topPanel");
				this.bottom=this.pTarget.getChildByName("bottomPanel");
				if(this.left)this.leftPoint.setTo(this.left.x,this.left.centerY);
				if(this.top)this.topPoint.setTo(this.top.x,this.top.y);
				if(this.bottom)this.bottomPoint.setTo(this.bottom.centerX,this.bottom.centerY);
			}
		}

		__proto.start=function(delay,complete){
			(delay===void 0)&& (delay=0);
			this.complete=complete;
			if (this.left){
				this.left.x=-300;
				this.caches[0]=this.left.cacheAs;
				this.left.cacheAs="none";
			}
			if (this.top){
				this.top.y=-200;
				this.caches[1]=this.top.cacheAs;
				this.top.cacheAs="none";
			}
			if (this.bottom){
				this.bottom.centerY=Laya.stage.height+100;
				this.caches[2]=this.bottom.cacheAs;
				this.bottom.cacheAs="none";
			}
			if (delay)Laya.timer.once(delay,this,this.show);
			else this.show();
		}

		__proto.show=function(){
			this.target&&(this.target.mouseEnabled=false);
			if(this.left)Tween.to(this.left,{x:this.leftPoint.x },350,Ease.backOut);
			if(this.top)Tween.to(this.top,{y:this.topPoint.y },350,Ease.backOut);
			if (this.bottom)Tween.to(this.bottom,{centerY:this.bottomPoint.y },350,Ease.backOut,Handler.create(this,this.onComplete));
		}

		__proto.onComplete=function(){
			if (this.left)this.left.cacheAs=this.caches[0];
			if (this.top)this.top.cacheAs=this.caches[1];
			if (this.bottom){
				this.bottom.cacheAs=this.caches[2];
				this.bottom.staticCache=false;
			}
			this.target&&(this.target.mouseEnabled=true);
			Loader.completeCallbackPause=false;
			Socket.onMessagePause=false;
			this.complete && this.complete.run();
		}

		/**
		*此方法添加关闭禁用鼠标事件
		*@param handler
		*
		*/
		__proto.close=function(handler){
			var _$this=this;
			this.target&&(this.target.mouseEnabled=false);
			if(this.left)Tween.to(this.left,{x:-300 },280,Ease.backIn);
			if(this.top)Tween.to(this.top,{y:-200 },280,Ease.backIn,Handler.create(this,function(){
				handler&&handler.run();
				_$this.target&&(_$this.target.mouseEnabled=true);
			}));
			if(this.bottom)Tween.to(this.bottom,{centerY:Laya.stage.height },280,Ease.backIn);
		}

		return PanelEffect;
	})()


	/**
	*...
	*@author luohuantao
	*/
	//class hall.FriendNotifyCenter
	var FriendNotifyCenter=(function(){
		function FriendNotifyCenter(){
			NotifyCenter.I.on('onFriendInviteResult',this,this.chkError);
			NotifyCenter.I.on('onFriendRejectResult',this,this.chkError);
			NotifyCenter.I.on('onFriendAcceptResult',this,this.chkError);
			NotifyCenter.I.on('onFriendBlockResult',this,this.chkError);
			NotifyCenter.I.on('onFriendUnblockResult',this,this.chkError);
			NotifyCenter.I.on('onFriendDeleteResult',this,this.chkError);
			NotifyCenter.I.on('onFriendListResult',this,this.chkError);
			NotifyCenter.I.on('onListInvitingResult',this,this.chkError);
			NotifyCenter.I.on('onFriendMoveResult',this,this.chkError);
			NotifyCenter.I.on('onFriendAttentionResult',this,this.chkError);
			NotifyCenter.I.on('onFriendInattentionResult',this,this.chkError);
		}

		__class(FriendNotifyCenter,'hall.FriendNotifyCenter');
		var __proto=FriendNotifyCenter.prototype;
		__proto.chkError=function(dat){
			if (!dat)return false;
			switch(dat.code){
				case 0:
					return true;
				case 101:
					TipsManager.instance.showText("对方与你已经是好友");
					return true;
				case 102:
					TipsManager.instance.showText("你已经申请过与对方成为好友了");
					return true;
				case 404:
					TipsManager.instance.showText("数据错误");
					return true;
				case 405:
					TipsManager.instance.showText("当前还不是好友");
					return true;
				case 500:
					TipsManager.instance.showText("找不到默认分组");
					return true;
				case 501:
					TipsManager.instance.showText("数据错误");
					return true;
				case 600:
					TipsManager.instance.showText("已经在目标组里");
					return true;
				case 604:
					TipsManager.instance.showText("组不存在");
					return true;
				case enumFriendCodeType.SOCIAL_GAMEID_INVALID:
					TipsManager.instance.showText("GameId无效");
					return true;
				case enumFriendCodeType.SOCIAL_USERID_INVALID:
					TipsManager.instance.showText("UserId无效");
					return true;
				case enumFriendCodeType.SOCIAL_PARAMETER_NOT_ENOUGH:
					TipsManager.instance.showText("参数不足");
					return true;
				case enumFriendCodeType.SOCIAL_FAILURE:
					TipsManager.instance.showText("不明失败");
					return true;
				case enumFriendCodeType.SOCIAL_CANT_INVITE_SELF:
					TipsManager.instance.showText("不能邀请自己");
					return true;
				case enumFriendCodeType.SOCIAL_CANT_ACCEPT_SELF:
					TipsManager.instance.showText("不能同意自己");
					return true;
				case enumFriendCodeType.SOCIAL_CANT_REJECT_SELF:
					TipsManager.instance.showText("不能拒绝自己");
					return true;
				case enumFriendCodeType.SOCIAL_CANT_BLOCK_SELF:
					TipsManager.instance.showText("不能拉黑自己");
					return true;
				case enumFriendCodeType.SOCIAL_CANT_UNBLOCK_SELF:
					TipsManager.instance.showText("不能解除拉黑自己");
					return true;
				case enumFriendCodeType.SOCIAL_CANT_DELETE_SELF:
					TipsManager.instance.showText("不能删除自己");
					return true;
				case enumFriendCodeType.SOCIAL_CANT_MOVE_SELF:
					TipsManager.instance.showText("不能移动自己");
					return true;
				case enumFriendCodeType.SOCIAL_CANT_ATTENTION_SELF:
					TipsManager.instance.showText("不能关注自己");
					return true;
				case enumFriendCodeType.SOCIAL_CANT_INATTENTION_SELF:
					TipsManager.instance.showText("不能取消关注自己");
					return true;
				case 406:
					TipsManager.instance.showText("没发出过邀请");
					return true;
				case 700:
					TipsManager.instance.showText("伺服的服务器不在线");
					return true;
				case 50:
					TipsManager.instance.showText("更新好友关系时，更新前置条件不符");
					return true;
				case 3:
					TipsManager.instance.showText("远程调用失败");
					return true;
				case 10:
					TipsManager.instance.showText("用户不存在");
					return true;
				case 1:
					TipsManager.instance.showText("其它失败");
					return true;
				case 100:
					TipsManager.instance.showText("关注人数已达上限");
					return true;
				default :
					TipsManager.instance.showText("未知错误");
					Log_Test.error("社交-未知错误："+JSON.stringify(dat));
					break ;
				}
			return false;
		}

		return FriendNotifyCenter;
	})()


	/**
	*...
	*@author anling
	*/
	//class hall.GameEventHandler
	var GameEventHandler=(function(){
		function GameEventHandler(){}
		__class(GameEventHandler,'hall.GameEventHandler');
		var __proto=GameEventHandler.prototype;
		Laya.imps(__proto,{"laya8.core.game.IGameEventHandler":true})
		/**
		*授权失败
		*/
		__proto.onLoginError=function(){
			console.log("------------授权失败----------");
			NotifyCenter.I.event("onLoginError");
		}

		/**获取小游戏中某个玩家排行榜信息**/
		__proto.onGotLeaderboardEntry=function(dat){
			console.log("------------获得某个排行榜信息----------");
			NotifyCenter.I.event("onGetRankListNum",[dat]);
		}

		/**设置上传数据事件回调**/
		__proto.onSetScoreAsync=function(dat){
			console.log("------------上传数据事件回调----------");
			NotifyCenter.I.event("onSetScoreCallBack",[dat]);
		}

		/**
		*插屏广告
		*@param dat
		*/
		__proto.onGotInterstitialAdAsync=function(dat){
			console.log("------------插屏广告----------");
			NotifyCenter.I.event("onGetChaPingReward",[dat]);
		}

		/**
		*视频广告
		*@param dat
		*/
		__proto.onGotRewardedVideoAsync=function(dat){
			console.log("-----------奖励广告-----------");
			NotifyCenter.I.event("onGetGuangGaoReward",[dat]);
		}

		__proto.onGotShareInfo=function(dat){
			console.log("-------------获取分享携带的数据-------------------");
			NotifyCenter.I.event("onGetShareData",[dat]);
		}

		__proto.onSentGroupMessage=function(dat){}
		__proto.onDecryptWechatInfo=function(dat){}
		__proto.onPreloadQQBrowserResource=function(rsp){}
		__proto.onGameError=function(err){
			switch(err.errorCode){
				case "-110001":
					LoadUI.isquit=true;
					break ;
				}
		}

		// 打开主界面
		__proto.onGotRoomTypeList=function(list){
			NotifyCenter.I.event("onGotRoomTypeList",[list]);
		}

		// 开始游戏
		__proto.startGame=function(data){}
		// 基础数据改变-laya8平台主动推送
		__proto.onBasicDataChg=function(data){
			var info=NotifyCenter.I.Query("on_GotLoginData");
			if(info)data.userId=info.UserId;
			NotifyCenter.I.SetData("on_BasicDataChg",data);
			NotifyCenter.I.event("on_BasicDataChg",data);
		}

		// 游戏数据改变-laya8平台主动推送
		__proto.onGameDataChg=function(data){
			NotifyCenter.I.SetData("on_GameDataChg",data);
			NotifyCenter.I.event("on_GameDataChg",data);
		}

		// 获得排行榜
		__proto.onGotRankList=function(data){
			NotifyCenter.I.SetData("on_GotRankList",data);
			NotifyCenter.I.event("on_GotRankList",data);
		}

		// 用户异常数据
		__proto.onUserError=function(err){
			Log_Test.error("用户异常数据",JSON.stringify(err));
			NotifyCenter.I.event("on_usererror",err);
		}

		// 道具数据改变 这个似乎是多余的
		__proto.onItemChg=function(items){}
		// 网络状态
		__proto.roomSocketStatus=function(isConnected){
			Laya.timer && Laya.timer.clear(this,this.onShowDuanWang);
			LoadUI.instance.onLoad(false);
			if (isConnected){
				NotifyCenter.I.Laya8ScoketStaus=1;
				return;
			}
			NotifyCenter.I.Laya8ScoketStaus=0;
		}

		/**个人排行榜改变-laya8平台主动推送--对于雪球来说，收到此消息，即laya8平台主动推送数据完成
		*[{Rank:榜中排名,Value:值,RankListId:排行榜ID,Rate:表示自己在当前榜中的百分之几(显示时可以用100减去Rate后直接在后面加 % 展示，表示超越了百分之几的人)}]
		**/
		__proto.onMyRanksChg=function(list){
			NotifyCenter.I.SetData("on_MyRanksChg",list);
			NotifyCenter.I.event("on_MyRanksChg",[list]);
		}

		// 商城列表
		__proto.onListMallsResult=function(dat){}
		// 商品列表
		__proto.onListGoodsResult=function(data){}
		// 购买消息返回结果
		__proto.onPurchaseResult=function(data){
			NotifyCenter.I.event("on_PurchaseResult",data);
		}

		// 背包列表
		__proto.onListBackpacksResult=function(data){
			NotifyCenter.I.SetData("on_ListBackpacksResult",data)
			NotifyCenter.I.event("on_ListBackpacksResult",data);
		}

		__proto.onUnlockCellsResult=function(data){}
		__proto.onMoveItemResult=function(dat){}
		// 获取使用数据
		__proto.onUseItemResult=function(data){
			if(!SnowUtils.isEmptyObject(data.params))
				NotifyCenter.I.SetData("activeItems",data.params)
			NotifyCenter.I.SetData("on_UseItemResult",data)
			NotifyCenter.I.event("on_UseItemResult",data);
		}

		// 随机名称
		__proto.onGotRandomName=function(nkname){
			NotifyCenter.I.event("on_randomName",nkname);
		}

		// 登录信息-laya8平台主动推送
		__proto.onGotLoginData=function(user){
			var userData=NotifyCenter.I.Query("on_BasicDataChg");
			if(userData)userData.userId=user.UserId;
			NotifyCenter.I.SetData("on_GotLoginData",user);
			RoleCenter.I.userId=user.UserId;
			RoleCenter.I.openId=user.OpenId;
			if (ErrorLog.deltaTime==0){
				user.tm &&(ErrorLog.deltaTime=(user.tm *1000-Date.now()));
			}
			RoleCenter.I.event("onMyGotLoginData",user);
		}

		// 获取游戏数据 fjson为获取商品使用数据 fclient客户端设置数据
		__proto.onGotGameDataResult=function(data){
			if (data.results.hasOwnProperty("fclient")){
				NotifyCenter.I.SetData("client_data",data.results.fclient);
			}
			if(data.results.hasOwnProperty("fjson")|| data.results["fjson.activeItems"]){
				var activeItems=data.results.fjson?data.results.fjson.activeItems:data.results["fjson.activeItems"];
				if(activeItems && activeItems[1]=="-1"){
					activeItems[1]="1006";
				}
				NotifyCenter.I.SetData("activeItems",activeItems);
				if (!activeItems){
					Log_Test.error("请求不到正在使用物品的数据，2S后再次请求！");
					Laya.timer.once(2000,this,this.getActiveItems);
				}
			}
			if(!data.results.hasOwnProperty("fjson")){
				var oldData=NotifyCenter.I.Query("on_GotGameDataResult");
				if(!oldData){
					oldData={};
					oldData.results={};
					oldData.results.fjson={};
				};
				var results=data.results;
				for(var key in results){
					if(key.indexOf("fjson.")!=-1){
						var newKey=key.substr(6,key.length-1);
						oldData.results.fjson[newKey]=results[key];
					}
				}
				data=oldData;
			}
			NotifyCenter.I.SetData("on_GotGameDataResult",data)
			NotifyCenter.I.event("on_GotGameDataResult",data);
		}

		__proto.getActiveItems=function(){
			HallApp.getGameData({activeItems:1});
		}

		// 领赏数据 现阶段用于对比时间
		__proto.onGotRewardData=function(data){
			NotifyCenter.I.event("on_GotRewardData",data);
		}

		//获取聊天历史记录-只在上线后执行一次
		__proto.onGotHistoryResult=function(dat){
			NotifyCenter.I.SetData("on_GotHistoryResult",dat);
			NotifyCenter.I.event("on_GotHistoryResult",[dat]);
		}

		//收到聊天消息
		__proto.onSaid=function(dat){
			NotifyCenter.I.SetData("onSaid",dat);
			NotifyCenter.I.event("onSaid",dat);
		}

		//收到微信二维码路径
		__proto.onGotQRCode=function(data){
			NotifyCenter.I.event('onGotQRCode',data);
		}

		/**
		*收到设置相关信息
		*@param data {gameId:1000,userId:500,code:0}
		*<br> code 0 表示成功，-1 为系统 PHP 请求失败，-70011 为内容含有屏蔽词，其它值为各种错误码
		*/
		__proto.onGotClientObjectResult=function(data){
			if (data.code==-1){
				TipsManager.instance.showText("存储数据失败，code:-1");
				MouseManager.enabled=true;
				return;
			}
			NotifyCenter.I.event('onGotClientObjectResult',data);
		}

		//收到上次进入的房间
		__proto.onGotLastRoom=function(roomId){
			NotifyCenter.I.event('onGotLastRoom',roomId);
		}

		// 透传数据
		__proto.onNotify=function(data){
			NotifyCenter.I.SetData((data).method+"",data);
			NotifyCenter.I.event('onNotify',data);
		}

		/*INTERFACE laya8.core.game.IGameEventHandler */
		__proto.onPayError=function(err){}
		__proto.onGotDirectPayItems=function(dat){
			RoleCenter.buyItems=dat;
		}

		/**邀请玩家成为自己的好友*/
		__proto.onFriendInviteResult=function(dat){
			NotifyCenter.I.SetData('onFriendInviteResult',dat);
			NotifyCenter.I.event('onFriendInviteResult',dat);
		}

		/**拒绝玩家的添加好友请求*/
		__proto.onFriendRejectResult=function(dat){
			NotifyCenter.I.SetData('onFriendRejectResult',dat);
			NotifyCenter.I.event('onFriendRejectResult',dat);
		}

		/**接受玩家的添加好友请求*/
		__proto.onFriendAcceptResult=function(dat){
			NotifyCenter.I.SetData('onFriendAcceptResult',dat);
			NotifyCenter.I.event('onFriendAcceptResult',dat);
		}

		/**拉黑好友*/
		__proto.onFriendBlockResult=function(dat){
			NotifyCenter.I.event('onFriendBlockResult',dat);
		}

		/**恢复拉黑的好友*/
		__proto.onFriendUnblockResult=function(dat){
			NotifyCenter.I.event('onFriendUnblockResult',dat);
		}

		/**删除好友*/
		__proto.onFriendDeleteResult=function(dat){
			NotifyCenter.I.SetData('onFriendDeleteResult',dat);
			NotifyCenter.I.event('onFriendDeleteResult',dat);
		}

		/**获取组和好友的完整列表*/
		__proto.onFriendListResult=function(dat){
			NotifyCenter.I.SetData('onFriendListResult',dat);
			NotifyCenter.I.event('onFriendListResult',dat);
		}

		/**获取自己未处理的好友请求*/
		__proto.onListInvitingResult=function(dat){
			NotifyCenter.I.SetData('onListInvitingResult',dat);
			NotifyCenter.I.event('onListInvitingResult',dat);
			NotifyCenter.I.event('onFriendInvited',dat);
		}

		/**移动好友到组*/
		__proto.onFriendMoveResult=function(dat){
			NotifyCenter.I.event('onFriendMoveResult',dat);
		}

		/**好友上线*/
		__proto.onFriendOnline=function(dat){
			NotifyCenter.I.upDataDate('onFriendOnline',dat);
		}

		/**好友下线*/
		__proto.onFriendOffline=function(dat){
			NotifyCenter.I.upDataDate('onFriendOffline',dat);
		}

		/**好友进入房间-需要先发送HallApp.attention才会收到消息*/
		__proto.onFriendJoinRoom=function(dat){
			NotifyCenter.I.SetData('onFriendJoinRoom',dat);
			NotifyCenter.I.event('onFriendJoinRoom',dat);
		}

		/**好友离开房间-需要先发送HallApp.attention才会收到消息*/
		__proto.onFriendLeaveRoom=function(dat){
			NotifyCenter.I.SetData('onFriendLeaveRoom',dat);
			NotifyCenter.I.event('onFriendLeaveRoom',dat);
		}

		/**
		*好友离开队伍通知
		*@param dat
		*
		*/
		__proto.onFriendJoinTeam=function(dat){
			NotifyCenter.I.SetData('onFriendJoinTeam',dat);
			NotifyCenter.I.event('onFriendJoinTeam',dat);
		}

		/**
		*好友加入队伍通知
		*@param dat
		*
		*/
		__proto.onFriendLeaveTeam=function(dat){
			NotifyCenter.I.SetData('onFriendLeaveTeam',dat);
			NotifyCenter.I.event('onFriendLeaveTeam',dat);
		}

		/**被其他玩家邀请*/
		__proto.onFriendInvited=function(dat){
			NotifyCenter.I.SetData('onFriendInvited',dat);
			NotifyCenter.I.event('onFriendInvited',dat);
		}

		/**被其他玩家拒绝*/
		__proto.onFriendRejected=function(dat){
			NotifyCenter.I.SetData('onFriendRejected',dat);
			NotifyCenter.I.event('onFriendRejected',dat);
		}

		/**被其他玩家接受*/
		__proto.onFriendAccepted=function(dat){
			NotifyCenter.I.SetData('onFriendAccepted',dat);
			NotifyCenter.I.event('onFriendAccepted',dat);
		}

		/**被别人关注*/
		__proto.attentioned=function(dat){
			NotifyCenter.I.SetData('attentioned',dat);
		}

		/**被其他玩家拉黑*/
		__proto.onFriendBlocked=function(dat){
			NotifyCenter.I.SetData('onFriendBlocked',dat);
			NotifyCenter.I.event('onFriendBlocked',dat);
		}

		/**被其他玩家恢复*/
		__proto.onFriendUnblocked=function(dat){
			NotifyCenter.I.SetData('onFriendUnblocked',dat);
			NotifyCenter.I.event('onFriendUnblocked',dat);
		}

		/**被其他玩家删除*/
		__proto.onFriendDeleted=function(dat){
			NotifyCenter.I.SetData('onFriendDeleted',dat);
			NotifyCenter.I.event('onFriendDeleted',dat);
		}

		/**被其他玩家移动（组）*/
		__proto.onFriendMoved=function(dat){
			NotifyCenter.I.SetData('onFriendMoved',dat);
			NotifyCenter.I.event('onFriendMoved',dat);
		}

		/**关注好友进出游戏消息*/
		__proto.onFriendAttentionResult=function(dat){
			NotifyCenter.I.event('onFriendAttentionResult',dat);
		}

		/**取消对好友进出的关注*/
		__proto.onFriendInattentionResult=function(dat){
			NotifyCenter.I.event('onFriendInattentionResult',dat);
		}

		/**发给某个好友的消息-反馈*/
		__proto.onTold=function(dat){
			NotifyCenter.I.event('onTold',dat);
		}

		/**收到某个好友的消息*/
		__proto.onToldToMe=function(dat){
			NotifyCenter.I.SetData('onToldToMe',dat);
			NotifyCenter.I.event('onToldToMe',dat);
		}

		/**根据uid搜索用户(好友)接口 返回消息*/
		__proto.searchByUIdResult=function(dat){
			NotifyCenter.I.SetData('searchByUIdResult',dat);
			NotifyCenter.I.event('searchByUIdResult',dat);
		}

		/**获取制定玩家当前的排行榜信息*/
		__proto.onGotCurrentSeasonDataResult=function(dat){
			NotifyCenter.I.event('onGotCurrentSeasonDataResult',dat);
		}

		/**获取制定玩家当前的排行榜信息*/
		__proto.seasonQueryCurrentDataResult=function(dat){
			NotifyCenter.I.event('seasonQueryCurrentDataResult',dat);
		}

		/**返回获取关注自己的所有人信息*/
		__proto.onListBeInGroupResult=function(dat){
			NotifyCenter.I.SetData('onListBeInGroupResult',dat);
			NotifyCenter.I.event('onListBeInGroupResult',dat);
		}

		/**
		*创建队伍返回
		*@param team
		*
		*/
		__proto.onTeamCreated=function(team){
			NotifyCenter.I.event("onTeamCreated",team);
		}

		/**
		*加入队伍返回
		*@param dat
		*
		*/
		__proto.onTeamJoined=function(dat){
			NotifyCenter.I.event("onTeamJoined",dat);
		}

		/**
		*离开队伍返回
		*@param dat
		*
		*/
		__proto.onTeamLeft=function(dat){
			NotifyCenter.I.event("onTeamLeft",dat);
		}

		/**
		*邀请好友返回
		*@param dat
		*
		*/
		__proto.onTeamInvite=function(dat){
			NotifyCenter.I.event("onTeamInvite",dat);
		}

		/**
		*发送给另一个玩家fromId,message
		*@param dat
		*
		*/
		__proto.receiveMessage=function(dat){
			NotifyCenter.I.event("onReceiveMessage",dat);
		}

		/**
		*回复自己状态targetId,code
		*@param dat
		*
		*/
		__proto.sendMessageResult=function(dat){
			NotifyCenter.I.event("onSendMessageResult",dat);
		}

		/**
		*设备恢复返回事件
		*@param flag
		*
		*/
		__proto.onGameVisibilityChange=function(flag,state){
			NotifyCenter.I.event("gameVisibilityChange",flag);
		}

		__proto.onBasicDataQueried=function(dat){}
		/**好像是大厅断网重连接口*/
		__proto.onReconnect=function(dat){
			Laya.timer.once(dat.span,this,this.onShowDuanWang,[dat]);
		}

		//onShowDuanWang(dat);
		__proto.onShowDuanWang=function(dat){
			LoadUI.instance.onLoad(true,"("+dat.cur+"/"+dat.max+")Connecting..");
			if(dat.cur >=dat.max){
				TipsView.myCallback=Handler.create(this,function(){
					if(!RoleCenter.I.bIsNewPlayer){
						MsgManager.I.backHome();
						LoadUI.instance.dispose();
						FreeMatch.onHide();
						}else{
						Method.refreshWindow();
					}
				});
				TipsView.showMe("",SnowUtils.chkIsFB()?"The current network is abnormal, please click to return.":"当前网络异常，点击返回",1,true,false);
			}
			NotifyCenter.I.Laya8ScoketStaus=2;
		}

		/**
		*监听网络状态
		*@param dat
		*
		*/
		__proto.onGotNetworkInfo=function(dat){
			NotifyCenter.I.event("onGotNetworkInfo",dat);
		}

		/**
		*
		*获取关系链
		*@param dat
		*
		*/
		__proto.onGotRelation=function(dat){
			NotifyCenter.I.SetData("onGotRelation",dat);
			NotifyCenter.I.event("onGotRelation",dat);
		}

		/**
		*批量订阅
		*@param dat
		*
		*/
		__proto.onSetWXListSubscribeResult=function(dat){
			NotifyCenter.I.event("onSetWXListSubscribeResult",dat);
		}

		/**
		*获取消息订阅列表
		*@param dat
		*
		*/
		__proto.onGotWXListSubscribe=function(dat){
			NotifyCenter.I.event("onGotWXListSubscribe",dat);
		}

		/**
		*分享返回结果
		*@param dat
		*
		*/
		__proto.onShareFinish=function(dat){
			NotifyCenter.I.event("onShareFinish",dat);
		}

		/**根据openID返回角色基础信息*/
		__proto.queryByOpenIdResult=function(dat){
			NotifyCenter.I.SetData("queryByOpenIdResult",dat);
			NotifyCenter.I.event("queryByOpenIdResult",dat);
		}

		/**根据userId返回监控的结果*/
		__proto.attentionResult=function(dat){
			if (dat.code !=0){
				Log_Test.error("attentionResult is error. 监控错误 code:"+dat.code);
				return;
			}
			NotifyCenter.I.SetData("attentionResult",dat);
		}

		/**根据userId返回取消监控的结果*/
		__proto.inattentionResult=function(dat){
			if (dat.code !=0){
				Log_Test.error("inattentionResult is error. 取消监控错误 code:"+dat.code);
			}
		}

		/**
		*获取可用登录方式
		*@param dat
		*
		*/
		__proto.onGotAvailableLoginType=function(dat){}
		/**
		*领取附件结果
		*@param dat
		*/
		__proto.onMailGotAttachment=function(dat){
			NotifyCenter.I.event("onMailGotAttachment",[dat.list]);
		}

		/**
		*获取邮件列表
		*@param dat
		*/
		__proto.onMailGotList=function(dat){
			if(!dat.code)
				NotifyCenter.I.event("onMailGotList",[dat.list]);
			else{
				NotifyCenter.I.event("onMailGotList",[dat]);
				Log_Test.error("onMailGotList erro code:"+dat.code);
			}
		}

		/**
		*获取未读邮件数量
		*@param dat
		*/
		__proto.onMailGotUnreadMailCount=function(dat){
			if(!dat.code)
				NotifyCenter.I.event("onMailGotUnreadMailCount",[dat.list]);
			else{
				NotifyCenter.I.event("onMailGotUnreadMailCount",[dat]);
				Log_Test.error("onMailGotUnreadMailCount erro code:"+dat.code);
			}
		}

		/**
		*获取删除邮件结果
		*@param dat
		*/
		__proto.onMailDeleted=function(dat){
			if(!dat.code)
				NotifyCenter.I.event("onMailDeleted",[dat.list]);
			else{
				NotifyCenter.I.event("onMailDeleted",[dat]);
				Log_Test.error("onMailDeleted erro code:"+dat.code);
			}
		}

		/**
		*获取标记邮件已读结果
		*@param dat
		*/
		__proto.onRead=function(dat){
			if(!dat.code)
				NotifyCenter.I.event("onRead",[dat.list]);
			else{
				NotifyCenter.I.event("onRead",[dat]);
				Log_Test.error("onRead erro code:"+dat.code);
			}
		}

		/**
		*组队准备返回
		*@param teamId
		*@param userId
		*@param ready
		*
		*/
		__proto.onTeamReady=function(teamId,userId,ready){
			NotifyCenter.I.event("onTeamReady",{"teamId":teamId,"userId":userId,"ready":ready});
		}

		/**
		*公告推送
		*@param dat
		*
		*/
		__proto.onGotAnnouncementList=function(dat){
			NotifyCenter.I.event("onGotAnnouncementList",dat);
		}

		/**
		*推送其他人信息变更
		*@param dat
		*
		*/
		__proto.onOtherUserBasicDataChange=function(dat){
			NotifyCenter.I.event("onOtherUserBasicdataChange",dat);
		}

		__proto.onGotWXShareParams=function(dat){
			NotifyCenter.I.event("onGotWxShareParams",dat);
		}

		__proto.onGotShareOpenid=function(dat){}
		__proto.onGotShareChannel=function(dat){}
		/**
		*悬浮球发送桌面回调
		*@param dat
		*
		*/
		__proto.onSentDesktop=function(dat){
			NotifyCenter.I.event("onSentDesktop",dat);
		}

		__proto.onGotRandomTeamList=function(dat){}
		__proto.onGotExtraTeamList=function(dat){}
		__proto.onTeamUpdated=function(dat){}
		__proto.onTeamInfoRefreshed=function(dat){}
		__proto.onAddedQQFriend=function(dat){}
		/**
		*返回截屏结果
		*@param dat
		*/
		__proto.onShareScreenshot=function(dat){
			NotifyCenter.I.event("onShareFinish",dat);
		}

		/**
		*返回消息列表
		*@param dat
		*/
		__proto.onSwitchToMsgList=function(dat){}
		/*INTERFACE laya8.core.game.IGameEventHandler */
		__proto.onMidasPayResult=function(code,count){
			if (code){
				MenuList.I.onReqEnd();
			}
			else{
				NotifyCenter.I.event('onDiamondUpdate',count);
			}
		}

		/*INTERFACE laya8.core.game.IGameEventHandler */
		__proto.onPayFinish=function(code,count){
			if (code){
				MenuList.I.onReqEnd();
			}
			else{
				NotifyCenter.I.event('onDiamondUpdate',count);
			}
		}

		/*INTERFACE laya8.core.game.IGameEventHandler */
		__proto.onSetDataAsync=function(){}
		__proto.onGotDataAsync=function(dat){}
		return GameEventHandler;
	})()


	/**laya8Hall 平台数据请求接口合集
	*...
	*@author luohuantao
	*/
	//class hall.HallApp
	var HallApp=(function(){
		function HallApp(){}
		__class(HallApp,'hall.HallApp');
		HallApp.init=function(gameId,eventHandler,clientVersion){
			(clientVersion===void 0)&& (clientVersion="");
			HallApp._gameId=gameId;
			Laya8Core.init(gameId,eventHandler ? eventHandler :new GameEventHandler(),clientVersion);
		}

		HallApp.removeSplash=function(){
			Laya8Core.game.removeSplash();
		}

		HallApp.myRemoveSplash=function(){
			var start=Browser.document.getElementById('start');
			if (start !=null){
				start.parentNode.removeChild(start);
			}
		}

		HallApp.showErrorMsgBox=function(title,msg){
			Laya8Core.game.showErrorMsgBox(title,msg);
		}

		HallApp.match=function(roomType,mustNewRoom){
			(mustNewRoom===void 0)&& (mustNewRoom=0);
			if (CrazySnowball.isDanji){
				SnowUtils.setBattleType(false);
			}
			else{
				SnowUtils.setBattleType(mustNewRoom !=999);
			}
			SnowUtils.battleMsg.match(roomType,mustNewRoom);
		}

		HallApp.notify=function(cmd){
			if (HallApp.checkNetState()){
				Laya8Core.game.notify(cmd);
			}
		}

		HallApp.purchase=function(goodsId,itemInGoodsId,amount){
			if (HallApp.checkNetState()){
				Laya8Core.game.mall.purchase(10001,goodsId,itemInGoodsId,10001,amount);
			}
		}

		HallApp.useItem=function(itemStaticId,amount){
			if (HallApp.checkNetState()){
				if (HallApp._tempCurUseId==itemStaticId){
					Log_Test.error("短时间内，重复使用相同的道具："+itemStaticId);
					return;
				};
				var voItemCfg=ConfigData.itemData[itemStaticId];
				if (voItemCfg){
					if (voItemCfg.type==4){
						SoundManager.playSound(ConfigData.soundCfg[106]);
					}
					else {
						SoundManager.playSound(ConfigData.soundCfg[105]);
					}
				}
				HallApp._tempCurUseId=itemStaticId;
				Laya8Core.game.backpack.useItem(10001,itemStaticId,amount);
				Laya.timer.once(1000,HallApp,clearUseId=function(){HallApp._tempCurUseId=-1;});
			}
		}

		HallApp.listBackpacks=function(){
			if (HallApp.checkNetState()){
				Laya8Core.game.backpack.listBackpacks();
			}
		}

		HallApp.setClientObject=function(data){
			Laya8Core.game.user.setClientObject(data);
		}

		HallApp.getHistory=function(){
			if (HallApp.checkNetState()){
				Laya8Core.game.chat.getHistory();
			}
		}

		HallApp.say=function(msg){
			if (HallApp.checkNetState()){
				Laya8Core.game.chat.say(msg);
			}
		}

		HallApp.getRewardData=function(rewardIdArray){
			if (HallApp.checkNetState()){
				Laya8Core.game.user.getRewardData(rewardIdArray);
			}
		}

		HallApp.getGameData=function(obj){
			if (HallApp.checkNetState()){
				Laya8Core.game.user.getGameData(obj);
			}
		}

		HallApp.getRankList=function(rankListId,cacheTime){
			(cacheTime===void 0)&& (cacheTime=60);
			if (HallApp.checkNetState()){
				Laya8Core.game.getRankList(rankListId,cacheTime);
			}
		}

		HallApp.getLastRoom=function(){
			if (HallApp.checkNetState()){
				Laya8Core.game.user.getLastRoom();
			}
		}

		HallApp.getVars=function(key){
			(key===void 0)&& (key='');
			return Laya8Core.getVars(key);
		}

		HallApp.joinRoom=function(roomId,force){
			Laya8Core.game.joinRoom(roomId,force);
		}

		HallApp.getRandomName=function(){
			if (HallApp.checkNetState()){
				Laya8Core.game.user.getRandomName();
			}
		}

		HallApp.updateBasicData=function(nkname,gender,avtor){
			(gender===void 0)&& (gender=0);
			(avtor===void 0)&& (avtor=0);
			if (HallApp.checkNetState()){
				Laya8Core.game.user.updateBasicData(nkname,gender,avtor);
			}
		}

		HallApp.getReward=function(rewardIdArray){
			if (HallApp.checkNetState()){
				Laya8Core.game.user.getReward(rewardIdArray);
			}
		}

		HallApp.getRoomTypeList=function(){
			Laya8Core.game.getRoomTypeList();
		}

		HallApp.getQRCode=function(url){
			if (HallApp.checkNetState()){
				Laya8Core.game.getQRCode(url);
			}
		}

		HallApp.invite=function(targetId,groupId,params){
			if (HallApp.checkNetState()){
				var info=NotifyCenter.I.Query("on_GotLoginData");
				if (info.UserId==targetId){
					(groupId==101)&& TipsManager.instance.showText("不能添加自己为好友");
					(groupId==102)&& TipsManager.instance.showText("不能关注自己");
					return;
				}
				if (groupId==101){
					TipsManager.instance.showText("好友邀请已经发出");
					}else if (groupId==102){
					if (NotifyCenter.I.guanzhuNum >=100){
						TipsManager.instance.showText("关注人数已达上限");
						return;
					}
					if (NotifyCenter.I.isMyFriend[targetId]){
						TipsManager.instance.showText("关注失败，已经关注过该玩家");
						return;
					}
				}
				Laya8Core.game.friend.invite(targetId,groupId,params);
			}
		}

		HallApp.reject=function(targetId){
			if (HallApp.checkNetState()){
				Laya8Core.game.friend.reject(targetId);
			}
		}

		HallApp.accept=function(targetId,groupId,params){
			if (HallApp.checkNetState()){
				Laya8Core.game.friend.accept(targetId,groupId,params);
			}
		}

		HallApp.block=function(targetId){
			if (HallApp.checkNetState()){
				Laya8Core.game.friend.block(targetId);
			}
		}

		HallApp.unblock=function(targetId){
			if (HallApp.checkNetState()){
				Laya8Core.game.friend.unblock(targetId);
			}
		}

		HallApp.Delete=function(targetId){
			if (HallApp.checkNetState()){
				Laya8Core.game.friend.Delete(targetId);
			}
		}

		HallApp.list=function(){
			if (HallApp.checkNetState()){
				Laya8Core.game.friend.list();
			}
		}

		HallApp.listInviting=function(){
			if (HallApp.checkNetState()){
				Laya8Core.game.friend.listInviting();
			}
		}

		HallApp.move=function(friendId,groupId){
			if (HallApp.checkNetState()){
				Laya8Core.game.friend.move(friendId,groupId);
			}
		}

		HallApp.attention=function(friendId){
			if (HallApp.checkNetState()){
				Laya8Core.game.friend.attention(friendId);
			}
		}

		HallApp.inattention=function(friendId){
			if (HallApp.checkNetState()){
				Laya8Core.game.friend.inattention(friendId);
			}
		}

		HallApp.tell=function(targetId,message){
			if (HallApp.checkNetState()){
				Laya8Core.game.chat.tell(targetId,message);
			}
		}

		HallApp.searchByUId=function(targetId){
			if (HallApp.checkNetState()){
				Laya8Core.game.user.searchByUId(targetId);
			}
		}

		HallApp.listBeInGroup=function(groupId){
			if (HallApp.checkNetState()){
				Laya8Core.game.friend.listBeInGroup(groupId);
			}
		}

		HallApp.getCurrentSeasonData=function(userId,args){
			if (HallApp.checkNetState()){
				Laya8Core.game.getCurrentSeasonData(userId,args);
			}
		}

		HallApp.queryCurrentData=function(userIds,args){
			if (HallApp.checkNetState()){
				Laya8Core.game.queryCurrentData(userIds,args);
			}
		}

		HallApp.setWXBasicReport=function(info){
			if (HallApp.checkNetState()){
				Laya8Core.game.setWXBasicReport(info);
			}
		}

		HallApp.setWXReportLogin=function(info){
			if (HallApp.checkNetState()){
				Laya8Core.game.setWXReport(info);
			}
		}

		HallApp.setWXReportLogout=function(info){
			if (HallApp.checkNetState()){
				Laya8Core.game.setWXReport(info);
			}
		}

		HallApp.setWXReportShare=function(info){
			Laya8Core.game.setWXReport(info);
		}

		HallApp.initShareConfig=function(cfg){
			Laya8Core.game.initShareConfig(cfg);
		}

		HallApp.sendMessageToFriend=function(opts){
			Laya8Core.game.sendMessageToFriend(opts);
		}

		HallApp.shareMessage=function(info){
			Laya8Core.game.shareMessage(info);
		}

		HallApp.openUrlWithExtraWebview=function(opts){
			Laya8Core.game.openUrlWithExtraWebview(opts);
		}

		HallApp.closeWindow=function(){
			Laya8Core.game.closeWindow();
		}

		HallApp.sendDesktop=function(opts){
			Laya8Core.game.sendDesktop(opts);
		}

		HallApp.setCloseWindowConfirmDialogInfo=function(opts){
			Laya8Core.game.setCloseWindowConfirmDialogInfo(opts);
		}

		HallApp.getNetworkInfo=function(){
			Laya8Core.game.getNetworkInfo();
		}

		HallApp.relation=function(){
			Laya8Core.game.relation();
		}

		HallApp.addQQGameShortcut=function(opts){
			Laya8Core.game.addQQGameShortcut(opts);
		}

		HallApp.setWXListSubscribe=function(subscribeId,subscribeType){
			Laya8Core.game.setWXListSubscribe(subscribeId,subscribeType);
		}

		HallApp.getWXListSubscribe=function(){
			Laya8Core.game.getWXListSubscribe();
		}

		HallApp.getWXShareParams=function(){
			Laya8Core.game.getWXShareParams();
		}

		HallApp.getShareOpenid=function(){
			Laya8Core.game.getShareOpenid();
		}

		HallApp.getShareChannel=function(){
			Laya8Core.game.getShareChannel();
		}

		HallApp.openTopicCircle=function(){
			Laya8Core.game.openTopicCircle();
		}

		HallApp.shareScreenshot=function(dat){
			Laya8Core.game.shareScreenshot(dat);
		}

		HallApp.createTeam=function(roomType){
			if (HallApp.checkNetState()){
				Laya8Core.game.user.createTeam(roomType);
			}
		}

		HallApp.leaveTeam=function(){
			if (HallApp.checkNetState()){
				Laya8Core.game.user.leaveTeam();
			}
		}

		HallApp.teamReady=function(ready){
			if (HallApp.checkNetState()){
				Laya8Core.game.user.teamReady(ready);
			}
		}

		HallApp.joinTeam=function(team,payload){
			if (HallApp.checkNetState()){
				Laya8Core.game.user.joinTeam(team,payload);
			}
		}

		HallApp.pay=function(amout){
			if (HallApp.checkNetState()){
				var issandbox=SnowUtils.getQueryString("sandbox");
				if (RoleCenter.buyItems){
					for (var k in RoleCenter.buyItems){
						if (RoleCenter.buyItems[k].goodCount==amout){
							Laya8Core.game.pay.buyDirectPayItem(k);
							return;
						}
					}
					Laya8Core.game.pay.midasPay(amout,issandbox?1:0);
				}
				else{
					Laya8Core.game.pay.midasPay(amout,issandbox?1:0);
				}
			}
		}

		HallApp.getDirectPayItems=function(){
			if (HallApp.checkNetState()){
				Laya8Core.game.pay.getDirectPayItems();
			}
		}

		HallApp.inviteTeam=function(userId,payload){
			(payload===void 0)&& (payload='');
			if (HallApp.checkNetState()){
				Laya8Core.game.user.inviteTeam(userId,payload);
			}
		}

		HallApp.kickTeam=function(userId){
			if (HallApp.checkNetState()){
				Laya8Core.game.user.kickTeam(userId);
			}
		}

		HallApp.sendMessage=function(id,msg){
			if (HallApp.checkNetState()){
				Laya8Core.game.user.sendMessage(id,msg);
			}
		}

		HallApp.matchFun=function(type){
			var match=Pool.getItemByClass("RequestMatch",RequestMatch);
			match.roomtype=type;
			hall.HallApp.notify(match);
			Pool.recover("RequestMatch",match);
		}

		HallApp.queryByOpenId=function(openIds){
			if (HallApp.checkNetState())Laya8Core.game.user.queryByOpenId(openIds);
		}

		HallApp.user_attention=function(userIds){
			if (HallApp.checkNetState())Laya8Core.game.user.attention(userIds);
		}

		HallApp.user_inattention=function(userIds){
			if (HallApp.checkNetState())Laya8Core.game.user.inattention(userIds);
		}

		HallApp.getList=function(data){
			if (HallApp.checkNetState()){
				Laya8Core.game.mail.getList(data);
			}
		}

		HallApp.getUnreadMailCount=function(types){
			if (HallApp.checkNetState()){
				Laya8Core.game.mail.getUnreadMailCount(types);
			}
		}

		HallApp.delEmails=function(idArr){
			if (HallApp.checkNetState()){
				Laya8Core.game.mail.del(idArr);
			}
		}

		HallApp.readEmails=function(idArr){
			if (HallApp.checkNetState()){
				Laya8Core.game.mail.read(idArr);
			}
		}

		HallApp.userSex=function(){
			return Browser.window.userSex;
		}

		HallApp.getAttachment=function(idArr){
			if (HallApp.checkNetState()){
				Laya8Core.game.mail.getAttachment(idArr);
			}
		}

		HallApp.checkNetState=function(){
			if (!RoleCenter.I.netState){
				LoadUI.instance.onShow();
				return false;
			}
			return true;
		}

		HallApp.userLogin=function(){
			Laya8Core.game.user.Login();
		}

		HallApp.addQQFriend=function(dat){
			Laya8Core.game.addQQFriend(dat);
		}

		HallApp.switchToMsgList=function(dat){
			Laya8Core.game.switchToMsgList(dat);
		}

		HallApp.getNrFriend=function(callBack){
			if(Browser.window.H5jssdk && Browser.window.H5jssdk.getBosomFriendsFromCache){
				Browser.window.H5jssdk.getBosomFriendsFromCache({
					count :20
					},function(data){
					NotifyCenter.nrFriend=data;
					callBack && callBack.run();
					},function(data){
					Log_Test.error("拉取未注册关系好友失败！");
				})
			}
		}

		HallApp.getInterstitialAdAsync=function(placement_id){
			Laya8Core.game.getInterstitialAdAsync(placement_id);
		}

		HallApp.getRewardedVideoAsync=function(placement_id){
			Laya8Core.game.getRewardedVideoAsync(placement_id);
		}

		HallApp.setScoreAsync=function(boardName,score,extData){
			Laya8Core.game.setScoreAsync(boardName,score,extData);
		}

		HallApp.getLeaderboardAsync=function(boardName){
			Laya8Core.game.getLeaderboardAsync(boardName);
		}

		HallApp.getEntriesAsync=function(option){
			Laya8Core.game.getEntriesAsync(option);
		}

		HallApp.senMsgToFriend=function(openid,param,type,bottomStr,topStr,iconUr){
			(type===void 0)&& (type=0);
			(bottomStr===void 0)&& (bottomStr="快來玩啊");
			(topStr===void 0)&& (topStr="打雪仗");
			(iconUr===void 0)&& (iconUr="shareIcon/icon.png");
			var loc=Browser.window.location;
			var temp=CrazySnowball.isRelease?(CrazySnowball.version+"/"):"";
			var prePath=loc.protocol+"//"+loc.host+loc.pathname.substring(0,loc.pathname.lastIndexOf('/'))+"/";
			var a=new SendMessageToFriendInfo();
			a.description=topStr;
			a.fopenid=openid;
			a.title=bottomStr;
			a.thumb_url=prePath+temp+iconUr;
			var pStr="";
			for(var key in param){
				pStr+=key+"="+param[key]+"&";
			}
			if(pStr){
				pStr=pStr.substr(0,pStr.length-1);
			}
			a.url=prePath+"snowIndex.html?"+pStr;
			a.game_tag=type;
			hall.HallApp.sendMessageToFriend(a);
		}

		HallApp.mallId=10001;
		HallApp.backpackId=10001;
		HallApp._gameId=0;
		HallApp._tempCurUseId=0;
		return HallApp;
	})()


	/**
	*...
	*@author anling
	*/
	//class hall.HallUtil
	var HallUtil=(function(){
		function HallUtil(){}
		__class(HallUtil,'hall.HallUtil');
		HallUtil.getSeasonNameByExp=function(exp){
			if(!exp)exp=0;
			var vod=ConfigData.duanweiCfgByStar [exp];
			if(vod)
				return vod.name;
			console.log("当前段位超过了最大上限，取最后上限值");
			vod=ConfigData.duanweiCfgByStar [dwIcon.MAX_STAR];
			return vod.name+(exp-dwIcon.MAX_STAR)+"星";
		}

		HallUtil.getSeasonNameByID=function(seasonId){
			if (seasonId==1)return HallUtil.getSeasonNameByExp(seasonId);
			var vod=ConfigData.duanweiCfgByID [seasonId];
			return vod.name;
		}

		HallUtil.getSeasonNameByID2=function(exp){
			if(!exp)exp=0;
			var id=0;
			var vod2=ConfigData.duanweiCfgByStar [exp];
			if(vod2)
				id=vod2.id;
			console.log("----------------------------duanweiId:"+id);
			var vod=ConfigData.segName[id];
			var name;
			if(Browser.onMiniGame)
				name=vod.cn;
			else
			name=vod.us;
			return name;
		}

		HallUtil.getRankInfoByID=function(rankId){
			console.log("----------------------------rankId:"+rankId);
			var vod;
			if (rankId==0)
				vod=ConfigData.segName[1011];
			else
			vod=ConfigData.segName[rankId];
			var name;
			if(Browser.onMiniGame)
				name=vod.cn;
			else
			name=vod.us;
			return name;
		}

		HallUtil.getNkName=function(usdi,length,isAll){
			(length===void 0)&& (length=12);
			(isAll===void 0)&& (isAll=false);
			if (!isAll){
				var name="";
				try{
					name=decodeURIComponent(usdi.NkName);
				}
				catch(error){
					name=usdi.NkName;
				}
				return SnowUtils.cutString(name,length);
				}else{
				return "显示组合名字";
			}
		}

		HallUtil.getHeadIcon=function(usdi){
			var AvtorIP=usdi.AvtorIP;
			if(AvtorIP && AvtorIP.indexOf("http")!=-1){
				var newUrl=decodeURIComponent(AvtorIP);
				var urlIsHttps=newUrl.indexOf("https:")==0;
				var isSSL=SnowUtils.isSSL;
				if (isSSL !=urlIsHttps){
					return isSSL?newUrl.replace("http","https"):newUrl.replace("https","http");
				}
				return newUrl;
				}else{
				return SnowUtils.roleIconUrl(usdi.Avtor);
			}
		}

		return HallUtil;
	})()


	/**
	*...
	*@author
	*/
	//class laya8.client.ai.Think
	var Think=(function(){
		function Think(defs){
			this._defs=[];
			var sz=0;
			defs.forEach(function(o){sz+=o;});
			this._defs.length=200;
			var s=0;
			for (var i=0;i < defs.length;i++){
				var n=(defs[i] *200 / sz)| 0;
				for (var j=0;j < n;j++)
				this._defs[j+s]=i;
				s+=n;
			}
		}

		__class(Think,'laya8.client.ai.Think');
		var __proto=Think.prototype;
		__proto.think=function(){
			return this._defs[ Math.random()*200 | 0];
		}

		Think.WALK=0;
		Think.DAI=1;
		Think.ACTACK=2;
		Think.REVENGE=3;
		return Think;
	})()


	/**
	*...
	*@author
	*/
	//class laya8.client.player.attackCircle.AttackCircle
	var AttackCircle=(function(){
		function AttackCircle(){
			this.ac=null;
			this.attackType=-1;
		}

		__class(AttackCircle,'laya8.client.player.attackCircle.AttackCircle');
		var __proto=AttackCircle.prototype;
		__proto.addToParent=function(){
			this.ac && this.ac.appendTo(null);
		}

		__proto.setVisible=function(b){
			this.ac && (this.ac.visible=b);
		}

		__proto.setAlpha=function(a){
			this.ac && (this.ac.alpha=a);
		}

		__proto.init=function(type,obj){
			if (this.attackType !=type){
				this.attackType=type;
				var preX=0;
				var preY=0;
				var preSX=1;
				var preSY=1;
				if (this.ac){
					preX=this.ac.x;
					preY=this.ac.y;
					preSX=this.ac.scaleX;
					preSY=this.ac.scaleY;
					this.destory();
				}
				switch(type){
					case 0:
						this.ac=NormalCircle.DEFAULT;
						break ;
					case 1:
						this.ac=XuliCircle.DEFAULT;
						break ;
					case 2:
						this.ac=DoubleCircle.DEFAULT;
						break ;
					case 3:
						this.ac=JuJiCircle.DEFAULT;
						break ;
					default :
						this.ac=NormalCircle.DEFAULT;
						break ;
					}
				this.ac.pos(preX,preY);
				this.ac.scale(preSX,preSY);
				this.ac.appendTo(obj);
			}
		}

		__proto.changeState=function(type){
			this.ac && this.ac.changeState(type);
		}

		/**
		*缩放
		*@param x
		*@param y
		*/
		__proto.scaleChg=function(x,y){
			this.ac && this.ac.scale(x,y);
		}

		/**
		*位置
		*@param x
		*@param y
		*/
		__proto.setPos=function(x,y){
			this.ac && this.ac.pos(x,y,true);
		}

		__proto.setWidth=function(i){
			this.ac && (this.ac.width=i);
		}

		__proto.getRotation=function(){
			return this.ac?this.ac.rotation:-1;
		}

		__proto.setRotation=function(value){
			this.ac && (this.ac.rotation=value);
		}

		__proto.getVisible=function(){
			return this.ac?this.ac.visible:false;
		}

		__proto.update=function(){
			this.ac && this.ac.update();
		}

		__proto.getRadius=function(){
			return this.ac?this.ac.getRadius():0;
		}

		__proto.destory=function(){
			if (this.ac){
				this.ac.clear();
				this.ac=null;
			}
			this.attackType=-1;
		}

		__proto.setScale=function(value){
			this.ac && this.ac.setPanScale(value);
		}

		__proto.setDisScale=function(value){
			this.ac && this.ac.setDisScale(value);
		}

		AttackCircle.Normal=0;
		AttackCircle.Xuli=1;
		AttackCircle.Choose=2;
		AttackCircle.JUJI=3;
		AttackCircle.ATTACK=1;
		AttackCircle.AUTOATTACK=2;
		return AttackCircle;
	})()


	/**
	*...
	*@author
	*/
	//class laya8.client.player.buffer.BaseBuffer
	var BaseBuffer=(function(){
		function BaseBuffer(){
			this.type=0;
		}

		__class(BaseBuffer,'laya8.client.player.buffer.BaseBuffer');
		var __proto=BaseBuffer.prototype;
		Laya.imps(__proto,{"laya8.client.player.buffer.IBuffer":true})
		/*INTERFACE laya8.client.player.buffer.IBuffer */
		__proto.add=function(actor,floors){
			actor._bufferType |=this.type;
		}

		__proto.remove=function(actor){
			actor._bufferType &=~this.type;
		}

		__proto.clear=function(actor){
			actor._bufferType &=~this.type;
		}

		return BaseBuffer;
	})()


	/**
	*...
	*@author
	*/
	//class laya8.client.player.buffer.BufferManager
	var BufferManager=(function(){
		function BufferManager(){}
		__class(BufferManager,'laya8.client.player.buffer.BufferManager');
		BufferManager.__init__=function(){
			BufferManager._Buffers[0x1]=new XYBuffer();
			BufferManager._Buffers[0x80]=new FYBuffer();
			BufferManager._Buffers[0x2]=new CMBuffer();
			BufferManager._Buffers[0x8]=new JSBuffer();
			BufferManager._Buffers[0x200]=new WZBuffer();
			BufferManager._Buffers[0x100]=new QYBuffer();
			BufferManager._Buffers[0x20]=new BXBuffer();
			BufferManager._Buffers[0x10]=new FakeDieBuffer();
			BufferManager._Buffers[0x400]=new HBDBuffer();
			BufferManager._Buffers[0x40]=new BDBuffer();
			BufferManager._Buffers[0x800]=new WZTWOBuffer();
		}

		BufferManager.runBuffer=function(actor,type,floors){
			if (floors==0){
				BufferManager.removeBuffer(actor,type);
			}
			else{
				BufferManager.addBuffer(actor,type,floors);
			}
		}

		BufferManager.addBuffer=function(actor,type,floors){
			if (actor.isDie)return;
			if ((actor._bufferType & type)==type)return;
			var buffer=BufferManager._Buffers [type];
			if (buffer){
				buffer.add(actor,floors);
			}
		}

		BufferManager.removeBuffer=function(actor,type){
			if ((actor._bufferType & type)!=type)return;
			var buffer=BufferManager._Buffers [type];
			if (buffer){
				buffer.remove(actor);
			}
		}

		BufferManager.clear=function(actor){
			var type=actor._bufferType;
			var tType=0x800;
			while (tType >=1){
				if (tType & type){
					var buffer=(BufferManager._Buffers [tType]);
					buffer&&buffer.clear(actor);
				}
				tType=tType >> 1;
			}
		}

		BufferManager._Buffers=[];
		return BufferManager;
	})()


	/**
	*...
	*@author
	*/
	//class laya8.client.player.CheckAttackButton
	var CheckAttackButton=(function(){
		function CheckAttackButton(){};
		__class(CheckAttackButton,'laya8.client.player.CheckAttackButton');
		CheckAttackButton.onDown=function(button,index,eve){
			if (CheckAttackButton._downTime>0){
				CheckAttackButton._button&&CheckAttackButton.onUp(CheckAttackButton._button);
			}
			CheckAttackButton._button=button;
			CheckAttackButton.skillIndex=index;
			CheckAttackButton._downTime=Laya.timer.currTimer;
			CheckAttackButton._upTime=0;
			CheckAttackButton._isXuli=false;
			CheckAttackButton._startTime=0;
			CheckAttackButton.e=eve;
			CheckAttackButton.onUpdate();
		}

		CheckAttackButton.setXuliFild=function(){
			CheckAttackButton._isXuli=false;
		}

		CheckAttackButton.canBegin=function(button){
			if (CheckAttackButton._button!==button)
				return;
		}

		CheckAttackButton.onUp=function(button){
			if (CheckAttackButton._downTime==0 || CheckAttackButton._button!==button)return;
			CheckAttackButton._upTime=Laya.timer.currTimer;
			CheckAttackButton._isXuli=false;
			CheckAttackButton.onUpdate();
			CheckAttackButton.e=null;
		}

		CheckAttackButton.onUpdate=function(){
			if (!CheckAttackButton._button || CheckAttackButton._downTime==0)return;
			var tm=Laya.timer.currTimer;
			var g=GamingView._i;
			if (!g||!g.getCanDown(CheckAttackButton._button))return;
			if (CheckAttackButton._startTime==0){
				if (CheckAttackButton._upTime >0){
					CheckAttackButton._downTime=0;{
						return;
					}
					return;
				}
				else{
					g.realButtonDown(CheckAttackButton._button,CheckAttackButton.skillIndex,CheckAttackButton.e);
				}
				CheckAttackButton._startTime=tm;
			}
			if (CheckAttackButton._startTime > 0 && CheckAttackButton._upTime > 0){
				CheckAttackButton._downTime=0;
				g.realButtonUp(CheckAttackButton._button,CheckAttackButton.skillIndex);
			}
			if (CheckAttackButton.enableXULI&&(!CheckAttackButton._isXuli && CheckAttackButton._upTime==0 && tm >=(CheckAttackButton._downTime+(CheckAttackButton._button).canXuliTime))){
				CheckAttackButton._isXuli=true;
				g.beginXuli(CheckAttackButton.skillIndex,CheckAttackButton.e);
			}
		}

		CheckAttackButton._button=null
		CheckAttackButton.enableXULI=true;
		CheckAttackButton.onlyXuli=false;
		CheckAttackButton.skillIndex=0;
		CheckAttackButton._downTime=0;
		CheckAttackButton._startTime=0;
		CheckAttackButton._upTime=0;
		CheckAttackButton._isXuli=false;
		CheckAttackButton.e=null
		return CheckAttackButton;
	})()


	/**
	*...
	*@author lisa
	*/
	//class laya8.client.player.ClassLib
	var ClassLib=(function(){
		function ClassLib(){}
		__class(ClassLib,'laya8.client.player.ClassLib');
		ClassLib.getClassByID=function(id){
			return ClassLib._class[id];
		}

		ClassLib.regClass=function(id,_class){
			laya8.client.player.ClassLib._class[id]=_class;
		}

		__static(ClassLib,
		['_class',function(){return this._class=new Array;}
		]);
		return ClassLib;
	})()


	/**表数据合集
	*...
	*@author luohuantao
	*/
	//class laya8.client.player.config.ConfigData
	var ConfigData=(function(){
		function ConfigData(){}
		__class(ConfigData,'laya8.client.player.config.ConfigData');
		ConfigData.initConfig=function(){
			var config=Laya.loader.getRes("json/gameconfig.json");
			if(config){
				ConfigData.duanweiCfgByID=config["rank.json"];
				ConfigData.seasonAward=config["seasonAward.json"];
				ConfigData.achieveData=config["task_achieve.json"];
				ConfigData.taskDailyData=config["task_daily.json"];
				ConfigData.taskMajorData=config["task_major.json"];
				ConfigData.shopData=config["shopData.json"]
				ConfigData.itemData=config["itemData.json"];
				ConfigData.duanweiTaskCfg=config["task_star.json"];
				ConfigData.menuBtnCfgByID=config["mainuibtn.json"];
				ConfigData.signInData=config["signin.json"];
				ConfigData.cfgData=config["cfg.json"];
				ConfigData.sourcesView=config["sourceView.json"];
				ConfigData.effectSource=config["effect.json"];
				ConfigData.LvData=config["battleLevel.json"];
				ConfigData.XlData=config["battleXuli.json"];
				ConfigData.battleTask=config["battleTask.json"];
				ConfigData.itemUpgrade=config["itemUpgrade.json"];
				ConfigData.prestigeLevel=config["prestigeLevel.json"];
				ConfigData.speakWorld=config["speakWorld.json"];
				ConfigData.achieveDataNew=config["achieveData.json"];
				ConfigData.achieveReward=config["achieveReward.json"];
				ConfigData.iceHomeDesc=config["iceHomeDesc.json"];
				ConfigData.heroProficiency=config["heroProficiency.json"];
				ConfigData.snowHouse=config["snowHouse.json"].snowHouse;
				ConfigData.incidents=config["snowHouse.json"].incidents;
				ConfigData.council=config["snowHouse.json"].council;
				ConfigData.overAll=config["snowHouse.json"];
				ConfigData.fightExp=config["fightExpression.json"];
				ConfigData.newbieSignActConfig=config["newbieSignActConfig.json"];
				ConfigData.pushInfo=config["pushInfo.json"];
				ConfigData.duoBao=config["treasureHuntDate.json"];
				ConfigData.duoBaoEw=config["treasureHuntCumulativeReward.json"];
				ConfigData.duoBaoItemData=config["treasureHuntReward.json"];
				ConfigData.guideList=config["guidelink.json"];
				ConfigData.snowHousePassive=config["snowHousePassive.json"];
				ConfigData.shareShots=config["shareShots.json"];
				ConfigData.reCharge=config["reCharge.json"];
				ConfigData.giftRecharge=config["giftRecharge.json"];
				ConfigData.qqZoneItem=config["qqzoneitem.json"];
				ConfigData.qqGift=config["qqGift.json"];
				ConfigData.trainingMode=config["trainingModeConfig.json"];
				ConfigData.stoneBullet=config["sbullet.json"];
				ConfigData.buff=config["buff.json"];
				ConfigData.i18n=config["i18n.json"].i18n;
				ConfigData.skillName=config["i18n.json"].skill;
				ConfigData.skillDes=config["i18n.json"].skilldes;
				ConfigData.talentName=config["i18n.json"].talent;
				ConfigData.talentDes=config["i18n.json"].talentdes;
				ConfigData.thingName=config["i18n.json"].things;
				ConfigData.thingDes=config["i18n.json"].thingdes;
				ConfigData.segName=config["i18n.json"].segment;
				var bullet=config["battleBullet.json"];
				var food=config["battleFood.json"];
				var battleBarrier=config["battleBarrier.json"];
				var elementData=laya8.client.player.config.ConfigData.elementData;
				for (var key in bullet){
					elementData[key]=bullet[key];
				}
				for (var key1 in food){
					elementData[key1]=food[key1];
				}
				for (var key2 in battleBarrier){
					elementData[key2]=battleBarrier[key2];
				}
				ConfigData.teamDataCfg=config["teamData.json"];
				ConfigData.battleInfoByID=config["battleInfo.json"];
				ConfigData.battleSnow=config["battleSnow.json"];
				ConfigData.activityData=config['activities.json'];
				ConfigData.taskActivityData=config['task_activity.json'];
				ConfigData.scaleXData=config["groundEffectScale.json"];
				ConfigData.scaleXData=config["groundSnowScale.json"];
				ConfigData.normalConfig=config["normalConfig.json"];
				if (Render.isConchApp)
					ConfigData.soundCfg={};
				else{
					ConfigData.soundCfg=config["soundcfg.json"];
				}
				ConfigData.skillCfg=config["skilllevelAtt.json"];
				ConfigData.loliPopConfig=config[1];
				ConfigData.randomSkill=config["skills.json"]
				ConfigData.loliPopConfig=config["lolipopConfig.json"];
				ConfigData.roleData=config["heroProperty.json"];
				ConfigData.gameCfg=config["zaqizaba.json"];
				ConfigData.oneTwo=config["oneTwo.json"];
				ConfigData.lunpanEventBiao=config['lunpanEventBiao.json'];
				ConfigData.lunpanIDBiao=config['lunpanIDBiao.json'];
				ConfigData.shareData=config['share.json'];
			}
			ConfigData.init();
			if(Browser.onMiniGame){
				try{
					MsgMgr.postMessage({type:MsgMgr.CONFIGDATA,segName:ConfigData.segName,duanweiCfgByStar:ConfigData.duanweiCfgByStar});
				}
				catch(error){
				}
			}
		}

		ConfigData.getSnowNum=function(i){
			for (var key in ConfigData.battleSnow){
				var d=ConfigData.battleSnow[key];
				if (i > d.minScore&&i<=d.maxScore){
					return d.snowNum;
				}
			}
			return 10;
		}

		ConfigData.init=function(){
			var classData=ConfigData.cfgData.class1;
			if(!classData)return;
			var length=0;
			while (classData[length] !=null){
				ClassUtils.regClass(classData[length],classData[length]);
				var o=ClassUtils.getClass(classData[length]);
				ClassLib.regClass(length,o);
				length++;
			}
			laya8.client.player.config.ConfigData.sourcesScene=ConfigData.cfgData.sceneLib;
			laya8.client.player.config.ConfigData.skillBuffer=ConfigData.cfgData.skillBuffer;
			laya8.client.player.config.ConfigData.sourcesPath=ConfigData.cfgData.sourcePath;
			var t=0;
			var i=0;
			for (var id in laya8.client.player.config.ConfigData.LvData){
				var temp=ConfigData.LvData[id];
				temp.beforeExp=t;
				t=temp.exp;
			};
			var ls=ActorObject.levelList=[];
			ls.push({before:0,fm:200,bradio:0});
			var first={before:0,fm:(ConfigData.LvData[3].beforeExp-0),bradio:0};
			ls.push(first);
			ls.push(first);
			for (i=3;i <=13;i+=2){
				ls.push({before:ConfigData.LvData[i].beforeExp,fm:(ConfigData.LvData[i+2].beforeExp-ConfigData.LvData[i].beforeExp),bradio:((i-1)/2)/7});
				ls.push({before:ConfigData.LvData[i].beforeExp,fm:(ConfigData.LvData[i+2].beforeExp-ConfigData.LvData[i].beforeExp),bradio:((i-1)/2)/7});
			}
			ls.push({before:0,fm:1000,bradio:1});
			ConfigData.skillProbabilityArr.length=0;
			var b=ConfigData.randomSkill;
			if (b){
				for (var k in b){
					if (b[k] && b[k].probability){
						ConfigData.skillProbabilityArr.push(k);
					}
				}
			};
			var sb={};
			if (ConfigData.battleInfoByID){
				for (var a in ConfigData.battleInfoByID){
					var info=ConfigData.battleInfoByID[a];
					if (info.self==0){
					}
					else{
						sb[ConfigData.battleInfoByID[a].type+"_"+ConfigData.battleInfoByID[a].count]=ConfigData.battleInfoByID[a];
					}
				}
			}
			laya8.client.player.config.ConfigData.battleInfo=sb;
			UserBuffer.initCfg(ConfigData.buff);
			ConfigData.initDuanWeiCfg();
			ConfigData.initMenuBtnCfg();
			ConfigData.initItemUpgrade();
			ConfigData.initHeroProficiencyByTL();
			ConfigData.initHeroKeySkin();
		}

		ConfigData.initHeroKeySkin=function(){
			var itemDt;
			for(var key in laya8.client.player.config.ConfigData.itemData){
				itemDt=laya8.client.player.config.ConfigData.itemData[key];
				if(itemDt.type==100){
					if (!ConfigData.heroKeyBySkin[itemDt.originalId])ConfigData.heroKeyBySkin[itemDt.originalId]=[];
					ConfigData.heroKeyBySkin[itemDt.originalId].push(itemDt.defId);
				}
			}
		}

		ConfigData.getMapUrl=function(sourceId){
			var argsArr=laya8.client.player.config.ConfigData.sourcesScene[sourceId]["args"];
			var arr=[
			{url:argsArr[0],type:"json"},
			{url:argsArr[1],type:"image"}];
			argsArr[2] && (arr.push({url:argsArr[2],type:"atlas"}))
			arr.push({url:argsArr[3],type:"image"});
			arr.push({url:argsArr[4],type:"image"});
			return arr;
		}

		ConfigData.getMapSnowUrl=function(sourceId){
			return laya8.client.player.config.ConfigData.sourcesScene[sourceId]["args"][3];
		}

		ConfigData.getMapSnowGroupUrl=function(sourceId){
			return laya8.client.player.config.ConfigData.sourcesScene[sourceId]["args"][4];
		}

		ConfigData.setMapData=function(data){
			ConfigData.mapData=data;
			var arr=data.prop;
			for (var i=0,j=arr.length;i < j;i++){
				ConfigData.mapPosidData[arr[i].posId]=arr[i];
			}
		}

		ConfigData.initDuanWeiCfg=function(){
			for (var key in laya8.client.player.config.ConfigData.duanweiCfgByID){
				var voD=ConfigData.duanweiCfgByID [key];
				ConfigData.duanweiCfgByStar[voD.starReq]=voD;
			}
		}

		ConfigData.initMenuBtnCfg=function(){
			for (var key in laya8.client.player.config.ConfigData.menuBtnCfgByID){
				var voD=ConfigData.menuBtnCfgByID [key];
				ConfigData.menuBtnCfgByBtnName[voD.btnName]=voD;
			}
		}

		ConfigData.initItemUpgrade=function(){
			var itemID=0;
			var descArr=[];
			for(var key in ConfigData.itemUpgrade){
				if (itemID==ConfigData.itemUpgrade[key].itemId)
					descArr.push(ConfigData.itemUpgrade[key].dec);
				else{
					if (itemID){
						ConfigData.itemUpDescByItemID[itemID]=descArr;
					}
					itemID=ConfigData.itemUpgrade[key].itemId;
					descArr=[];
					descArr.push(ConfigData.itemUpgrade[key].dec)
				}
				ConfigData.itemUpByItemIDLv[itemID+"_"+ConfigData.itemUpgrade[key].itemLevel]=ConfigData.itemUpgrade[key];
			}
			ConfigData.itemUpDescByItemID[itemID]=descArr;
		}

		ConfigData.initHeroProficiencyByTL=function(){
			var obj;
			for (var key in ConfigData.heroProficiency){
				obj=ConfigData.heroProficiency[key];ConfigData.heroProByTL[obj.heroType]=ConfigData.heroProByTL[obj.heroType]|| [];
				ConfigData.heroProByTL[obj.heroType].push(obj);
			}
		}

		ConfigData.itemData=null
		ConfigData.taskDailyData={};
		ConfigData.taskMajorData={};
		ConfigData.achieveData={};
		ConfigData.seasonAward={};
		ConfigData.duanweiCfgByID={};
		ConfigData.duanweiCfgByStar={};
		ConfigData.duanweiTaskCfg={};
		ConfigData.shopData={};
		ConfigData.treasureData={};
		ConfigData.treasureLevelData={};
		ConfigData.menuBtnCfgByID={};
		ConfigData.menuBtnCfgByBtnName={};
		ConfigData.activityData={};
		ConfigData.taskActivityData={};
		ConfigData.signInData={};
		ConfigData.sourcesScene={};
		ConfigData.sourcesView={};
		ConfigData.sourcesPath={};
		ConfigData.effectSource={};
		ConfigData.soundCfg={};
		ConfigData.mapData={};
		ConfigData.mapPosidData={};
		ConfigData.skillBuffer={};
		ConfigData.gameCfg={};
		ConfigData.scaleXData={};
		ConfigData.XlData={};
		ConfigData.LvData={};
		ConfigData.teamDataCfg={};
		ConfigData.elementData={};
		ConfigData.skillCfg={};
		ConfigData.skillProbabilityArr=[];
		ConfigData.battleInfo={};
		ConfigData.battleInfoByID={};
		ConfigData.loliPopConfig={};
		ConfigData.randomSkill={};
		ConfigData.battleSnow=null
		ConfigData.cfgData={};
		ConfigData.roleData=null
		ConfigData.normalConfig=null
		ConfigData.oneTwo=null
		ConfigData.battleTask=null
		ConfigData.lunpanIDBiao=null
		ConfigData.lunpanEventBiao=null
		ConfigData.itemUpgrade=null
		ConfigData.itemUpDescByItemID={};
		ConfigData.itemUpByItemIDLv={};
		ConfigData.prestigeLevel={};
		ConfigData.speakWorld={};
		ConfigData.shareData={};
		ConfigData.achieveDataNew={};
		ConfigData.achieveReward={};
		ConfigData.iceHomeDesc={};
		ConfigData.heroProficiency={};
		ConfigData.heroProByTL={};
		ConfigData.snowHouse={};
		ConfigData.incidents={};
		ConfigData.council={};
		ConfigData.overAll={};
		ConfigData.fightExp={};
		ConfigData.newbieSignActConfig={};
		ConfigData.pushInfo={};
		ConfigData.duoBao={};
		ConfigData.duoBaoEw={};
		ConfigData.duoBaoItemData={};
		ConfigData.snowHousePassive={};
		ConfigData.heroKeyBySkin={};
		ConfigData.shareShots={};
		ConfigData.reCharge={};
		ConfigData.giftRecharge={};
		ConfigData.qqZoneItem={};
		ConfigData.qqGift={};
		ConfigData.trainingMode={};
		ConfigData.guideList={};
		ConfigData.stoneBullet={};
		ConfigData.buff={};
		ConfigData.i18n={};
		ConfigData.skillName={};
		ConfigData.skillDes={};
		ConfigData.talentName={};
		ConfigData.talentDes={};
		ConfigData.thingName={};
		ConfigData.thingDes={};
		ConfigData.segName={};
		return ConfigData;
	})()


	/**
	*大厅界面 配置表 gameCfg 对应的结构
	*...
	*@author luohuantao
	*/
	//class laya8.client.player.config.GameCfg
	var GameCfg=(function(){
		function GameCfg(){
			this.isIn=false;
			this.url=null;
			this.url_in=null;
			this.noticeUrl=null;
			this.noticeUrl_in=null;
			this.activityUrl=null;
			this.activityUrl_in=null;
		}

		__class(GameCfg,'laya8.client.player.config.GameCfg');
		var __proto=GameCfg.prototype;
		__proto.getNoticeUrl=function(id){
			return this.isIn ? this.url_in+this.noticeUrl_in.replace("{id}",id):this.url+this.noticeUrl.replace("{id}",id);
		}

		__proto.getActivityUrl=function(id){
			return this.isIn ? this.url_in+this.activityUrl_in.replace("{id}",id):this.url+this.activityUrl.replace("{id}",id);
		}

		__getset(0,__proto,'Url',function(){
			return this.isIn ? this.url_in :this.url;
		});

		__getset(1,GameCfg,'I',function(){
			return GameCfg._i;
		});

		GameCfg.setI=function(obj){
			if (!obj)Log_Test.error("gameCfg is null");
			GameCfg._i=new GameCfg();
			GameCfg._i.isIn=obj.isIn;
			GameCfg._i.url=obj.url;
			GameCfg._i.url_in=obj.url_in;
			GameCfg._i.noticeUrl=obj.noticeUrl;
			GameCfg._i.noticeUrl_in=obj.noticeUrl_in;
			GameCfg._i.activityUrl=obj.activityUrl;
			GameCfg._i.activityUrl_in=obj.activityUrl_in;
		}

		GameCfg._i=null
		return GameCfg;
	})()


	/**
	*配置文件管理
	*...
	*@author anling
	*/
	//class laya8.client.player.consts.AssetsConsts
	var AssetsConsts=(function(){
		/*
		*图片资源
		*/
		function AssetsConsts(){}
		__class(AssetsConsts,'laya8.client.player.consts.AssetsConsts');
		AssetsConsts.GOODS_RESOUSE="res/goods/";
		AssetsConsts.HERO_RESOUSE="res/hero/";
		AssetsConsts.SKIN_RESOUSE="res/skin/";
		AssetsConsts.GOODS_BUILDIMG="res/buildImg/";
		AssetsConsts.URL_ACHIEVE="res/achieve/";
		AssetsConsts.URL_SKILL_ICON="res/skillIcon/{id}.png";
		AssetsConsts.URL_DEBUFF_ICON="res/skillIcon/{id}.png";
		AssetsConsts.UI_CONFIG="ui.json";
		AssetsConsts.ATLAS_NEWHALL="res/atlas/newhall.atlas";
		AssetsConsts.GAME_CONFIG="json/gameconfig.json";
		AssetsConsts.ATLAS_RESLOADING="res/atlas/resloading.atlas";
		AssetsConsts.ATLAS_CHOOSE_LOGIN="res/atlas/choosesign.atlas";
		AssetsConsts.ATLAS_COMMON="res/atlas/common.atlas";
		AssetsConsts.ATLAS_SHARE="res/atlas/shareInfo.atlas";
		AssetsConsts.ATLAS_GAMETIPS="res/atlas/gametips.atlas";
		AssetsConsts.ATLAS_SETTLEMENTPAGE="res/atlas/settlement.atlas";
		AssetsConsts.ATLAS_GAMERESULT="res/atlas/gameResult.atlas";
		AssetsConsts.ATLAS_PASSIVESKILLS="res/atlas/passiveSkills.atlas";
		AssetsConsts.ATLAS_MOOD="res/atlas/mood.atlas";
		AssetsConsts.ATLAS_GROUPLIST="res/atlas/groupMode.atlas";
		AssetsConsts.ATLAS_FREE_CHOOSE="res/atlas/freechoose.atlas";
		AssetsConsts.ATLAS_FREEMATCH="res/atlas/freematch.atlas";
		AssetsConsts.ATLAS_SHARETIPS="sharetips/tips1.jpg";
		AssetsConsts.ATLAS_MENULIST="res/atlas/menulist.atlas";
		AssetsConsts.ATLAS_INVITE="res/atlas/invite.atlas";
		AssetsConsts.ATLAS_SHOWCHONG="res/atlas/shouchong.atlas";
		AssetsConsts.ATLAS_SNOW="res/atlas/ani/snow.atlas";
		AssetsConsts.ATLAS_RANKING="res/atlas/rankList.atlas";
		AssetsConsts.ATLAS_SIGNIN="res/atlas/signin.atlas";
		AssetsConsts.ATLAS_TASK="res/atlas/task.atlas";
		AssetsConsts.ATLAS_SHOP="res/atlas/shop.atlas";
		AssetsConsts.ATLAS_SHOP_DUOSHOW="res/atlas/duoShow.atlas";
		AssetsConsts.ATLAS_SHOP_SHOW="res/atlas/shopItemShow.atlas";
		AssetsConsts.ATLAS_BACKPACK="res/atlas/backpack.atlas";
		AssetsConsts.ATLAS_CHOOSENUM="res/atlas/chooseNum.atlas";
		AssetsConsts.ATLAS_BALANCE="res/atlas/balance.atlas";
		AssetsConsts.ATLAS_DUANWEI="res/atlas/duanwei.atlas";
		AssetsConsts.ATLAS_ONEMIEND="res/atlas/oneMi.atlas";
		AssetsConsts.UI_MESSAGEBOX="laya8/MessageBox.ui";
		AssetsConsts.ATLAS_LOGIN="res/atlas/login2.atlas";
		AssetsConsts.ATLAS_LAYACOMMON="res/atlas/layacommon.atlas";
		AssetsConsts.ATLAS_MENU="res/atlas/menu.atlas";
		AssetsConsts.ATLAS_GAMING="res/atlas/gaming.atlas";
		AssetsConsts.ATLAS_GAMINGTOP="res/atlas/gamingtop.atlas";
		AssetsConsts.ATLAS_FIGHTSET="res/atlas/fightSet.atlas";
		AssetsConsts.ATLAS_TEAMVIEW="res/atlas/team.atlas";
		AssetsConsts.ATLAS_HELP="res/atlas/help.atlas";
		AssetsConsts.ATLAS_GUIDENEW="res/atlas/newguide.atlas";
		AssetsConsts.ATLAS_GUIDE_CHUSHENG="ani/donghua/HeroAni.ani";
		AssetsConsts.ATLAS_GUIDE_CHUANYUE="ani/donghua/mofazhen.ani";
		AssetsConsts.ATLAS_GUIDE_CHUSHENG2="HeroAni2.ani";
		AssetsConsts.ATLAS_GUIDE_CHUANYUE2="mofazhen2.ani";
		AssetsConsts.ATLAS_GUIDENEW2="res/atlas/power.atlas";
		AssetsConsts.ATLAS_GUIDE_WEIZHI="res/atlas/guide/weizhi.atlas";
		AssetsConsts.ATLAS_GUANZHU_TEXIAO="res/atlas/ani/guanzhu.atlas";
		AssetsConsts.ATLAS_GAMERESULTN="res/atlas/gameResultN.atlas";
		AssetsConsts.ATLAS_EFFECT="res/effect/effect.atlas";
		AssetsConsts.ATLAS_EFFECT1="res/effect/effect1.atlas";
		AssetsConsts.IMG_ROLEDEFAULE="res/role/default.png";
		AssetsConsts.IMG_SNOW=null
		AssetsConsts.IMG_SNOWGROUP=null
		AssetsConsts.UI_MESSAGEBOXJSON="laya8/MessageBox.json";
		AssetsConsts.ATLAS_LOADINGRES="res/atlas/loading.atlas";
		AssetsConsts.ANI_BIG_SNOWBALL_ROLL="res/bullet/399.atlas";
		AssetsConsts.ANI_GAM="res/obj/baoshi.atlas";
		AssetsConsts.ANI_BEAR="res/role/116.atlas";
		AssetsConsts.ATLAS_HARE="res/role/hare.atlas";
		AssetsConsts.ATLAS_POWER="res/obj/power.atlas";
		AssetsConsts.ATLAS_NEWEFFECT="res/atlas/neweffect.atlas";
		AssetsConsts.ATLAS_SKILLCD="res/atlas/skillCd.atlas";
		AssetsConsts.ATLAS_NEWBULLET="res/newbullet/newbullet.atlas";
		AssetsConsts.ATLAS_ICEHOMERES="res/atlas/iceHome.atlas";
		AssetsConsts.ATLAS_YIHUI="res/atlas/yihui.atlas";
		AssetsConsts.ATLAS_SACHIEVE="res/atlas/shareAchieve.atlas";
		AssetsConsts.ATLAS_SHERO="res/atlas/shareHero.atlas";
		AssetsConsts.ATLAS_SKIN="res/atlas/shareSkin.atlas";
		AssetsConsts.ATLAS_STITLE="res/atlas/shareTitle.atlas";
		AssetsConsts.JSON_ROLE_SNOWBALL="json/roleQiu/{id}.json";
		return AssetsConsts;
	})()


	/**特效动画名字
	*...
	*@author luohuantao
	*/
	//class laya8.client.player.enum.enumEffectType
	var enumEffectType=(function(){
		function enumEffectType(){}
		__class(enumEffectType,'laya8.client.player.enum.enumEffectType');
		enumEffectType.ANI_SNOW_BALL_BOMB="snowBallBomb";
		enumEffectType.ANI_CHANGE_BODY="changeBody";
		enumEffectType.ANT_EAT_HP="eatHP";
		enumEffectType.ANI_FOOD_BORN="foodBorn";
		enumEffectType.ANI_INVINCIBLE="invincible";
		enumEffectType.ANI_UP_LEVEL="upLevel";
		enumEffectType.ANI_UP_LEVEL_BJ="upLevelBj";
		enumEffectType.ANI_DOWN_LEVEL="downLevel";
		enumEffectType.ANI_DOWN_LEVEL_BJ="downLevelBj";
		enumEffectType.ANI_KUANGBAO="kuangbao";
		enumEffectType.ANI_DIPAN="dipan";
		enumEffectType.ANI_BULLET="bulletAni";
		enumEffectType.ANI_ROLEBEHIT="behit";
		enumEffectType.ANI_ROLEBEHITXULIA="behitXuliA";
		enumEffectType.ANI_ROLEBEHITXULIB="behitXuliB";
		enumEffectType.ANI_ROLEBEHITDOWN="behitDown";
		enumEffectType.ANI_BULLET_LUODI="bullet_luodi";
		enumEffectType.ANI_BIG_SNOWBALL_BOMB="bigSnowballBomb";
		enumEffectType.ANI_BIG_SNOWBALL_ROLL="bigSnowballRoll";
		enumEffectType.ANI_XULI_EFF="xuliEff";
		enumEffectType.ANI_DEBUFF_EFF="debuffEff";
		enumEffectType.ANI_SNOWBALLBOMBRANGE="snowballBombRange";
		enumEffectType.ANI_NORMAL_ATTACK="normalAttack";
		enumEffectType.ANI_JIFEI="jifeEff";
		enumEffectType.ANI_HARE_BEHIT="harebehit";
		enumEffectType.ANI_ZHILIAO="zlEff";
		enumEffectType.ANI_FWDD="fwddEff";
		enumEffectType.ANI_FWS="fwsEff";
		enumEffectType.ANI_JFBD="jfbdEff";
		enumEffectType.ANI_ZLBD="zlbEff";
		enumEffectType.ANI_ZLDD="zlddEff";
		enumEffectType.ANI_JFDD="jfddEff";
		enumEffectType.ANI_ROLEHANDBALL="roleHandBall";
		enumEffectType.ANI_ATTACKEFF="attackEff";
		enumEffectType.ANI_ATKBTNEFF="atkBtnEff";
		enumEffectType.ANI_BTNXULIEFFECT="btnXuLiEffect";
		enumEffectType.ANI_XULISTART="xuliStart";
		enumEffectType.ANI_XULIMAN="xuliMan";
		enumEffectType.ANI_XULIENDATTACK="xuliEndAttack";
		enumEffectType.UI_MAXBULLET="ui_maxBullet";
		enumEffectType.UI_LESSBULLET="ui_lessBullet";
		enumEffectType.ANI_FLAGBOTTOMEff="flagBottomEff";
		enumEffectType.ANI_ADDOLIIEff="addoliiEff";
		enumEffectType.BAOEFF="baoEff";
		enumEffectType.HITEFF="hitEff";
		enumEffectType.BFWEFF="bfwEff";
		enumEffectType.BFWQEFF="bfwqEff";
		enumEffectType.ANI_YUNXINGXING="yunXingxing";
		enumEffectType.ANI_FANGXIANG="fangXiang";
		enumEffectType.ANI_SHUIJINGBIG="shuijingBig";
		enumEffectType.ANI_SCOREEXCHANGE="scoreExchange";
		enumEffectType.ANI_EATSNOW="eatSnow";
		enumEffectType.ANI_SCOREEXCHANGEANI="ScoreExchangeAni";
		enumEffectType.ANI_YUNSHIANI="yunshiAni";
		enumEffectType.ANI_SNOWDIE="dieAni";
		enumEffectType.ANI_BAOFENG="baofeng";
		enumEffectType.ANI_AILUDZ="ailubig";
		enumEffectType.ANI_CHIBOX="debuffEff23";
		enumEffectType.ANI_SHIELD="shieldEff";
		enumEffectType.ANI_SF="sf";
		enumEffectType.ANI_CKXL="ckxl";
		enumEffectType.ANI_XFBJ="xfbj";
		enumEffectType.ANI_SUNXULI="sunxuli";
		enumEffectType.ANI_SUNDG="sundg";
		enumEffectType.ANI_SUNBJ="sunbj";
		enumEffectType.ANI_SUNDZ="sundz";
		enumEffectType.ANI_ANDZBJ="anbj";
		enumEffectType.ANI_ANDD="andd";
		enumEffectType.ANI_SXGJDD="ansxgjdd";
		enumEffectType.ANI_ANXULI="anxuli";
		enumEffectType.ANI_ANSXGJ="ansxgj";
		enumEffectType.ANI_XUANFENG="xuanfeng";
		enumEffectType.ANI_AILUXULI="ailuxuli";
		enumEffectType.ANI_AILUBJ="ailubj";
		enumEffectType.ANI_XLTXULI="xltxuli";
		enumEffectType.ANI_XLTXLATTACK="xltxlAttack";
		enumEffectType.ANI_XLTXLATTACK1="xltxlAttack1";
		enumEffectType.ANI_FAKE="fakedie";
		enumEffectType.ANI_HUZHAO="huzhao";
		enumEffectType.ANI_LILISBIG="lilisBig";
		enumEffectType.ANI_LILIDZ="llzdz";
		enumEffectType.ANI_LILISBD="llzfrozen";
		enumEffectType.ANI_CHONGFENG="chongfeng";
		enumEffectType.ANI_CZXL="czxl";
		enumEffectType.ANI_CZBJ="czbj";
		enumEffectType.ANI_CZXLATTACK="czxlAttack";
		enumEffectType.ANI_FH="fh";
		enumEffectType.ANI_ROBOTXULI="robotXuli";
		enumEffectType.ANI_ZLDEFF="zldEff";
		enumEffectType.ANI_STARLIGHTEFF="starLightEff";
		enumEffectType.ANI_ROBOTBG="robotbg";
		return enumEffectType;
	})()


	/**
	*...
	*@author luohuantao
	*/
	//class laya8.client.player.enum.enumFriendCodeType
	var enumFriendCodeType=(function(){
		//-------------------------------------------------------------
		function enumFriendCodeType(){}
		__class(enumFriendCodeType,'laya8.client.player.enum.enumFriendCodeType');
		enumFriendCodeType.GROUP_FRIEND=101;
		enumFriendCodeType.GROUP_ME_ATTENTION=102;
		enumFriendCodeType.GROUP_ATTENTION_ME=103;
		enumFriendCodeType.DEFAULT=0;
		enumFriendCodeType.FRIEND=1;
		enumFriendCodeType.GUANZHU=2;
		enumFriendCodeType.FANS=3;
		enumFriendCodeType.RECRNTFIGHT=4;
		enumFriendCodeType.GUANXILIAN=5;
		enumFriendCodeType.SUCCESS=0;
		enumFriendCodeType.FAILURE=1;
		enumFriendCodeType.ALREADY_FRIENDS_ISFULL=100;
		enumFriendCodeType.ALREADY_FRIENDS=101;
		enumFriendCodeType.WAIT_FOR_ACCEPT=102;
		enumFriendCodeType.CANT_LOAD_DATA=404;
		enumFriendCodeType.NOT_FRIEND_YET=405;
		enumFriendCodeType.NOT_INVITE_YET=406;
		enumFriendCodeType.CANT_FIND_DEFAULT_GROUP=500;
		enumFriendCodeType.FAIL_ON_REQUEST=501;
		enumFriendCodeType.SERVER_NOT_AVAILABLE=700;
		enumFriendCodeType.UPDATE_NOT_MATCH=50;
		enumFriendCodeType.FAILURE_ON_REMOTE=3;
		enumFriendCodeType.USERINFO_NOT_EXISTS=10;
		enumFriendCodeType.ALREADY_IN_THE_GROUP=600;
		enumFriendCodeType.GROUP_NOT_EXISTS=604;
		enumFriendCodeType.SOCIAL_GAMEID_INVALID=-1100001;
		enumFriendCodeType.SOCIAL_USERID_INVALID=-1100002;
		enumFriendCodeType.SOCIAL_PARAMETER_NOT_ENOUGH=-1100005;
		enumFriendCodeType.SOCIAL_FAILURE=-11000007;
		enumFriendCodeType.SOCIAL_CANT_INVITE_SELF=-1100011;
		enumFriendCodeType.SOCIAL_CANT_ACCEPT_SELF=-1100012;
		enumFriendCodeType.SOCIAL_CANT_REJECT_SELF=-1100013;
		enumFriendCodeType.SOCIAL_CANT_BLOCK_SELF=-1100014;
		enumFriendCodeType.SOCIAL_CANT_UNBLOCK_SELF=-1100015;
		enumFriendCodeType.SOCIAL_CANT_DELETE_SELF=-1100016;
		enumFriendCodeType.SOCIAL_CANT_MOVE_SELF=-1100017;
		enumFriendCodeType.SOCIAL_CANT_ATTENTION_SELF=-1100018;
		enumFriendCodeType.SOCIAL_CANT_INATTENTION_SELF=-1100019;
		return enumFriendCodeType;
	})()


	/**
	*对应 杂七杂八.xls 数据表 的 name 字段
	*@author luohuantao
	*/
	//class laya8.client.player.enum.enumGameCfgType
	var enumGameCfgType=(function(){
		//public static const :String="";
		function enumGameCfgType(){}
		__class(enumGameCfgType,'laya8.client.player.enum.enumGameCfgType');
		enumGameCfgType.readMe="readMe";
		enumGameCfgType.trembleTime="trembleTime";
		enumGameCfgType.trembleNumMax="trembleNumMax";
		enumGameCfgType.trembleNumMin="trembleNumMin";
		enumGameCfgType.roleRedTime="roleRedTime";
		enumGameCfgType.ColorFilter="ColorFilter";
		enumGameCfgType.roleHurtBackNum="roleHurtBackNum";
		enumGameCfgType.roleHurtBackTime="roleHurtBackTime";
		enumGameCfgType.roleYunByBear="roleYunByBear";
		enumGameCfgType.roleDieBackNum="roleDieBackNum";
		enumGameCfgType.roleDieBackTime="roleDieBackTime";
		enumGameCfgType.treeShakeTime="treeShakeTime";
		enumGameCfgType.treeShakeNumMax="treeShakeNumMax";
		enumGameCfgType.treeShakeNumMin="treeShakeNumMin";
		enumGameCfgType.hareTalk="hareTalk";
		enumGameCfgType.hareTalkTime="hareTalkTime";
		enumGameCfgType.hareTalkTime1="hareTalkTime1";
		enumGameCfgType.hareTalkTime2="hareTalkTime2";
		enumGameCfgType.roleMoveMaxSynchronous="roleMoveMaxSynchronous";
		enumGameCfgType.controlBullet="controlBullet";
		enumGameCfgType.petAttackFrequency="petAttackFrequency";
		return enumGameCfgType;
	})()


	/**
	*男女性别的定义
	*...
	*@author luohuantao
	*/
	//class laya8.client.player.enum.enumGenderType
	var enumGenderType=(function(){
		function enumGenderType(){}
		__class(enumGenderType,'laya8.client.player.enum.enumGenderType');
		enumGenderType.now=-1;
		enumGenderType.none=-1;
		enumGenderType.man=1;
		enumGenderType.woman=2;
		enumGenderType.allGender=3;
		return enumGenderType;
	})()


	/**
	*国际化枚举
	*...
	*@author hongjunwei
	*/
	//class laya8.client.player.enum.enumi18nIDs
	var enumi18nIDs=(function(){
		function enumi18nIDs(){}
		__class(enumi18nIDs,'laya8.client.player.enum.enumi18nIDs');
		enumi18nIDs.HELPTIPS=1;
		return enumi18nIDs;
	})()


	/**
	*...
	*@author luohuantao
	*/
	//class laya8.client.player.enum.EnumLifeCycle
	var EnumLifeCycle=(function(){
		function EnumLifeCycle(){}
		__class(EnumLifeCycle,'laya8.client.player.enum.EnumLifeCycle');
		EnumLifeCycle.allLife=0;
		EnumLifeCycle.moveDie=1;
		return EnumLifeCycle;
	})()


	/**
	*...
	*@author lifei
	*/
	//class laya8.client.player.enum.enumMenuBtnType
	var enumMenuBtnType=(function(){
		function enumMenuBtnType(){}
		__class(enumMenuBtnType,'laya8.client.player.enum.enumMenuBtnType');
		enumMenuBtnType.MENU_BTN_ROLE_ROOM="roleRoom";
		enumMenuBtnType.MENU_BTN_RANK_BOX="rankbox";
		enumMenuBtnType.MENU_BTN_GAME_SET="btnSet";
		enumMenuBtnType.MENU_BTN_GAME_HELP="btnHelp";
		enumMenuBtnType.MENU_BTN_GAME_NOTICE="btnNotice";
		enumMenuBtnType.MENU_BTN_MODEL_TEAM="btnteam";
		enumMenuBtnType.MENU_BTN_MODEL_FREE="btnfree";
		enumMenuBtnType.MENU_BTN_MODEL_MORE="btnMore";
		enumMenuBtnType.MENU_BTN_MATCH_FREE="btnFreeFriend";
		enumMenuBtnType.MENU_BTN_FRIEND="btnFriend";
		enumMenuBtnType.MENU_BTN_ACHIEVE="btnAchieve";
		enumMenuBtnType.MENU_BTN_SKILL="btnskill";
		enumMenuBtnType.MENU_BTN_TASK="btnTask";
		enumMenuBtnType.MENU_BTN_SHOP="btnShop";
		enumMenuBtnType.MENU_BTN_EMAIL="btnEmail";
		return enumMenuBtnType;
	})()


	/**
	*...
	*@author luohuantao
	*/
	//class laya8.client.player.enum.enumQuanType
	var enumQuanType=(function(){
		function enumQuanType(){}
		__class(enumQuanType,'laya8.client.player.enum.enumQuanType');
		enumQuanType.ZHIXIANG_RED=1;
		enumQuanType.RED=2;
		enumQuanType.GREEN=3;
		enumQuanType.ZHIXIANG_Y=4;
		enumQuanType.DIPAN=5;
		return enumQuanType;
	})()


	/**
	*...
	*@author luohuantao
	*/
	//class laya8.client.player.enum.enumShareType
	var enumShareType=(function(){
		function enumShareType(){}
		__class(enumShareType,'laya8.client.player.enum.enumShareType');
		__getset(1,enumShareType,'share_icon_url',function(){
			return URL.formatURL("shareIcon/icon.png?"+CrazySnowball.version);
		});

		__getset(1,enumShareType,'desctopIcon',function(){
			return URL.formatURL("res/desktop/icon.png?"+CrazySnowball.version);
		});

		//return prePath+temp+"res/desktop/icon.png?"+CrazySnowball.version;
		__getset(1,enumShareType,'share_game_url',function(){
			if(Browser.onMiniGame){
				return "";
			};
			var loc=Browser.window.location;
			var baseURL=Browser.document.baseURI;
			var indexw=baseURL.indexOf("?");
			var str=baseURL.substring(0,indexw);
			var prePath=str.substring(0,str.lastIndexOf("/"))+"/";
			var _wv="_wv=2147666864";
			if(SnowUtils.isWxApp()){
				prePath+="snowIndex.html?_wv="+_wv+"&appid=wx9e8f5c13236cb27d";
				}else{
				var ly;
				if(SnowUtils.chkIsQQ()){
					ly="&ly=qq";
					}else if(SnowUtils.chkIsQQKJ()){
					ly="&ly=kj";
					if (Browser.window.OPEN_DATA){
						_wv="_wv=2147666864&_wwv=2048";
					}
					}else{
					ly="";
				}
				prePath+="snowIndex.html?"+_wv+ly;
			}
			return prePath;
		});

		enumShareType.share_title="全民打雪球";
		enumShareType.share_desc="H5首款轻竞技网游。";
		enumShareType.share_DuanWeititle="风骚走位，秒杀全场";
		enumShareType.share_DuanWeidesc="轻松获胜，就问你6不6";
		enumShareType.share_Team_SingleinviteTitle="{X}邀请您与TA好友开黑啦！";
		enumShareType.share_Team_SingleinviteDesc="{X}马上开始，我们已经准备好，就差你了，速度进来开战啦！";
		enumShareType.share_Rank_Init_Title="雪球互甩，纵横四海";
		enumShareType.share_Rank_Init_Desc="无敌是多么寂寞！轻松获胜！";
		enumShareType.share_Rank_Init_Title_WX="雪球互甩，纵横四海";
		enumShareType.share_Rank_Init_Desc_WX="无敌是多么寂寞！轻轻松松就获胜了！不服？雪球甩你一脸";
		return enumShareType;
	})()


	/**
	*分享位置 对应截屏分享表point字段
	*@author ...
	*/
	//class laya8.client.player.enum.enumShotType
	var enumShotType=(function(){
		function enumShotType(){}
		__class(enumShotType,'laya8.client.player.enum.enumShotType');
		enumShotType.SHARE_DUANWEI="Segment";
		enumShotType.SHARE_UPFRIEND="Surmount";
		enumShotType.SHARE_ACHIVE="Achievement";
		enumShotType.SHARE_TITLE="Title";
		enumShotType.SHARE_HERO="Hero";
		enumShotType.SHARE_SKIN="Skin";
		return enumShotType;
	})()


	/**
	*...
	*@author luohuantao
	*/
	//class laya8.client.player.enum.enumSocketCloseType
	var enumSocketCloseType=(function(){
		function enumSocketCloseType(){}
		__class(enumSocketCloseType,'laya8.client.player.enum.enumSocketCloseType');
		enumSocketCloseType.none=0;
		enumSocketCloseType.hall=1;
		enumSocketCloseType.room=2;
		return enumSocketCloseType;
	})()


	/**
	*...
	*@author anling
	*/
	//class laya8.client.player.enum.enumSoundType
	var enumSoundType=(function(){
		function enumSoundType(){}
		__class(enumSoundType,'laya8.client.player.enum.enumSoundType');
		enumSoundType.MENU_BG_0=1;
		enumSoundType.FIGHT_BG_0=2;
		enumSoundType.BALL_HITE=4;
		enumSoundType.OTHER_DEAD=6;
		enumSoundType.FIGHT_END=8;
		enumSoundType.EAT_STRAWBERRY=9;
		enumSoundType.fight_end_win=35;
		enumSoundType.fight_end_win1=50;
		enumSoundType.fight_end_lose=36;
		enumSoundType.eatHare=37;
		enumSoundType.ROLE_MAN_HURT=38;
		enumSoundType.ROLE_WOMAN_HURT=39;
		enumSoundType.OTHER_MAN_HURT=40;
		enumSoundType.OTHER_WOMAN_HURT=41;
		enumSoundType.ROLE_LEVEL_UP=56;
		enumSoundType.ROLE_LEVEL_DOWN=42;
		enumSoundType.COLLECT_SKILL=43;
		enumSoundType.COLLECT_ITEM=44;
		enumSoundType.COLLECT_SKILL_SUCCESS=45;
		enumSoundType.COLLECT_SKILL_SUCCESS1=117;
		enumSoundType.OTHER_MAN_DIE=52;
		enumSoundType.OTHER_WOMAN_DIE=53;
		enumSoundType.ROLE_MAN_DIE=54;
		enumSoundType.ROLE_WOMAN_DIE=55;
		enumSoundType.ROLE_XULI=57;
		enumSoundType.ROLE_XULI_END=116;
		enumSoundType.DAOJISHI_3_2=58;
		enumSoundType.DAOJISHI_1=59;
		enumSoundType.MENULIST_BTN=101;
		enumSoundType.COMMON_SURE=102;
		enumSoundType.COMMON_BACK=103;
		enumSoundType.COMMON_CANCEL=104;
		enumSoundType.SHOP_USE_ROLE=105;
		enumSoundType.SHOP_USE_ITEM=106;
		enumSoundType.GET_PROP=108;
		enumSoundType.GAMEEND_RANK=110;
		enumSoundType.DAOJISHI_1_M=112;
		enumSoundType.GE_DW_XING1=113;
		enumSoundType.GE_DW_XING2=114;
		enumSoundType.GE_DW_UPSTAR=115;
		enumSoundType.SKILL_SX=118;
		enumSoundType.SKILL_CZ_BEGIN=119;
		enumSoundType.SKILL_CZ_HIT=120;
		enumSoundType.SKILL_MZTZ_BEGIN=121;
		enumSoundType.SKILL_MZTZ_HIT=122;
		enumSoundType.SKILL_BY_BEGIN=123;
		enumSoundType.SKILL_BY_FLY=124;
		enumSoundType.SKILL_BY_HIT=125;
		enumSoundType.SKILL_SL_BOMB=126;
		enumSoundType.GET_GAM=127;
		enumSoundType.SKILL_SL_BOMB_THROW=128;
		enumSoundType.SKILL_FIREROCK=129;
		enumSoundType.BG_BEFORECOUNTDOWN=130;
		enumSoundType.LUNPAN_SETTLED=141;
		enumSoundType.LUNPAN_ROLLING=142;
		enumSoundType.LUNPAN_ROLE_JUMP=143;
		enumSoundType.LUNPAN_ROLE_SETTLED=144;
		enumSoundType.LUNPAN_REWARD_CHEST=145;
		enumSoundType.LUNPAN_REWARD_DIAMOND=146;
		enumSoundType.LUNPAN_REWARD_GOLD=147;
		enumSoundType.LINGJIANGTAI_BGM=178;
		enumSoundType.TIPS_MOVE=148;
		enumSoundType.TIPS_ATTACK=149;
		enumSoundType.TIPS_XULI=150;
		enumSoundType.TIPS_SCORE=151;
		enumSoundType.TIPS_DUOBI=152;
		enumSoundType.TIPS_GONGJI=153;
		enumSoundType.TIPS_YILIAO=154;
		return enumSoundType;
	})()


	/**
	*物品根据 classid 判断种类，不再使用 SourceID
	*@author luohuantao
	*/
	//class laya8.client.player.enum.enumSourceIDType
	var enumSourceIDType=(function(){
		function enumSourceIDType(){}
		__class(enumSourceIDType,'laya8.client.player.enum.enumSourceIDType');
		enumSourceIDType.now={};
		enumSourceIDType.food_snow=2;
		return enumSourceIDType;
	})()


	/**
	*在从 sourceView.json 中获取相应资源的 第一个 key
	*<br> 标识皮肤资源的类型
	*@author luohuantao
	*/
	//class laya8.client.player.enum.enumSourceViewType
	var enumSourceViewType=(function(){
		function enumSourceViewType(){}
		__class(enumSourceViewType,'laya8.client.player.enum.enumSourceViewType');
		enumSourceViewType.getSourceID=function(SourceID){
			if (SourceID < 1000){
				return SourceID;
			}
			else{
				var cfg=ConfigData.itemData [SourceID];
				if (!cfg){
					return 99;
				}
				if(cfg.type==7){
					return ConfigData.itemData[cfg.communalId[0]].souceID;
				}
				return cfg.souceID;
			}
		}

		enumSourceViewType.getRoleUrl=function(SourceID){
			SourceID=enumSourceViewType.getSourceID(SourceID);
			return ConfigData.sourcesView["role"][SourceID]["args"][0];
		}

		enumSourceViewType.getBulletUrl=function(SourceID){
			SourceID=enumSourceViewType.getSourceID(SourceID);
			return ConfigData.sourcesView["bullet"][SourceID]["args"][0];
		}

		enumSourceViewType.getQuanUrl=function(SourceID){
			SourceID=enumSourceViewType.getSourceID(SourceID);
			var url=ConfigData.sourcesView["quan"][5]
			return url.replace("(id)",SourceID);
		}

		enumSourceViewType.TYPE_ROLE="role";
		enumSourceViewType.TYPE_BULLET="bullet";
		enumSourceViewType.TYPE_FOOD="food";
		enumSourceViewType.TYPE_BRRIER="barrier";
		enumSourceViewType.TYPE_QUAN="quan";
		return enumSourceViewType;
	})()


	/**
	*公用的枚举类
	*...
	*@author luohuantao
	*/
	//class laya8.client.player.enum.EnumType
	var EnumType=(function(){
		function EnumType(){}
		__class(EnumType,'laya8.client.player.enum.EnumType');
		EnumType.SELF=0;
		EnumType.OTHER=1;
		EnumType.XULIBEGIN=1;
		EnumType.XULIEND=0;
		EnumType.JIA_ROLE=1;
		EnumType.JIA_DIPAN=2;
		EnumType.JIA_BULLET=3;
		EnumType.JIA_GUN=4;
		EnumType.TALKAUTHORITY_0=0;
		EnumType.TALKAUTHORITY_1=1;
		EnumType.FORCEIN_0=0;
		EnumType.FORCEIN_1=1;
		EnumType.TASKID_QIANDAO=1;
		EnumType.TASKID_SHARE=2;
		EnumType.FIGHT_RANK_CLOSE=0;
		EnumType.FIGHT_RANK_OPEN=1;
		EnumType.DEFAULT_SKIN_ID=1000;
		EnumType.DEFAULT_RING_ID=2000;
		EnumType.DEFAULT_BALL_ID=3000;
		EnumType.DEFAULT_GUN_ID=4000;
		EnumType.ONLY_AUTOATTACK=0x1;
		EnumType.ONLY_ACTIVEATTACK=0x2;
		EnumType.MIX_ATTACK=0x3;
		EnumType.SNOW_BOX=1;
		EnumType.HARE_BOX=2;
		EnumType.REVERSE_BOX=4;
		EnumType.HARE_SKIN=16;
		EnumType.SNOW_SKIN=100011;
		EnumType.ICE_PAUSE_TIME_ID=16002;
		return EnumType;
	})()


	/**
	*主角的行为
	*@author
	*/
	//class laya8.client.player.game.ActionPlayer
	var ActionPlayer=(function(){
		function ActionPlayer(){}
		__class(ActionPlayer,'laya8.client.player.game.ActionPlayer');
		ActionPlayer.move=function(actor){
			actor.afterMove();
		}

		ActionPlayer.hurt=function(actor){
			actor.afterHurt();
		}

		ActionPlayer.attack=function(actor){
			actor.afterAttack();
		}

		ActionPlayer.xuli=function(actor){
			actor.afterXuli();
		}

		ActionPlayer.die=function(actor){}
		return ActionPlayer;
	})()


	/**
	*...
	*@author
	*/
	//class laya8.client.player.game.Battle
	var Battle=(function(){
		function Battle(){
			this.focus=0;
			this.isEnter=false;
			this.isRePlay=false;
		}

		__class(Battle,'laya8.client.player.game.Battle');
		var __proto=Battle.prototype;
		/**
		*战斗开始
		*/
		__proto.begin=function(){
			this.isEnter=false;
			Player.I.helpTips.start();
		}

		/**
		*战斗结束
		*/
		__proto.end=function(){
			this.isEnter=false;
			Player.I.helpTips.stop();
			this.addStat(enumRoomType.nowType,".2");
		}

		__proto.addStat=function(type,str){
			console.log(">>>>>>>>>>>>>>>>>>>>>>>>type:"+type+"str:"+str);
			switch(type){
				case enumRoomType.ROOMTYPE_CUSTOM_TEAM:
				case enumRoomType.ROOMTYPE_LADDER:
				case enumRoomType.ROOMTYPE_SOLO_NPC:
					StatManager.I.addTeach(StatManager.I.getStatData("5."+type+str),true)
					break ;
				}
		}

		/**
		*初始化地图等信息
		*@param sourceId 地图的ID
		*@param force 房间的等级
		*/
		__proto.startGame=function(sourceId,force){
			Log_Test.info("登录房间成功 - loginGame，MapSourceId: "+sourceId);
			Loading.I.isLogin=true;
			GameSocket.isAgainConnect && Player.I._end();
			Player._curForce=force;
			Player._curMapSourceId=sourceId;
		}

		__proto.addRole=function(){}
		/**
		*进入房间
		*@param data
		*/
		__proto.enterRoom=function(data){
			Log_Test.info("进入房间成功 - enterRoom  _selfID=",data.selfID);
			enumRoomType.nowType=data.roomType;
			if (MenuList.inRoomByWhere !=-2){
				this.addStat(data.roomType,".1");
			}
			if (!this.isEnter){
				this.isEnter=true;
				ActorObject.hasBlood=!!data.useBlood;
				enumRoomType.isAgain=false;
				var gv=GamingView.I;
				gv.init();
				this.clearMainUIResources();
				Player.I.start();
				GameSocket.I.event("initGameTime",[data.maxLifeTime]);
				if (this.isRePlay){
				}
				else{
					if (GameSocket.roomInfo.roomType !=data.roomType){
						Log_Test.error("---------------------------   进入房间类型跟大厅回复的房间类型不一致 ："
						+GameSocket.roomInfo.roomType+" :: "+data.roomType);
					}
					MouseManager.multiTouchEnabled=true;
				}
			}
		}

		/**
		*进入战斗时 清理大厅的资源
		*/
		__proto.clearMainUIResources=function(){
			ResCacheManager.I.enterBattle();
			ResCacheManager.I.leaveMainUI();
		}

		Battle.getNetObjectByBigId=function(){
			return null;
		}

		Battle.getNetObjectBySmallId=function(){
			return null;
		}

		return Battle;
	})()


	/**
	*...
	*@author dongketao
	*/
	//class CreateObjData
	var CreateObjData=(function(){
		function CreateObjData(){
			this.itemId=0;
			this.selfID=0;
			this.uid=0;
			this.x=NaN;
			this.y=NaN;
			this.bloodVal=NaN;
			this.maxBloodVal=0;
			this.userlevel=0;
			this.score=0;
			this.regain=0;
			this.scale=NaN;
			this.teamName=0;
			this.teamId=0;
			this.sourceID=0;
			this.quanID=0;
			this.SmaxSpeed=NaN;
			this.collisionGetBulletPercent=NaN;
			this.invincibleLeftTime=0;
			this.talkAuthority=0;
			this.talkOnBeAttack=null;
			this.talkOnDead=null;
			this.speedScale=NaN;
		}

		__class(CreateObjData,'CreateObjData');
		var __proto=CreateObjData.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			this.itemId=msg.getUint16();
			this.selfID=msg.getInt32();
			this.uid=msg.getUint16();
			this.x=msg.getInt16();
			this.y=msg.getInt16();
			this.userlevel=msg.readByte();
			this.score=msg.getUint16();
			this.regain=msg.readByte();
			this.scale=msg.getFloat32();
			this.speedScale=msg.getFloat32();
			this.teamName=msg.getUint8();
			this.teamId=msg.getUint16();
			this.sourceID=msg.getInt16();
			this.quanID=msg.getInt16();
			this.SmaxSpeed=msg.getInt16()/ 10000;
			this.collisionGetBulletPercent=msg.getInt16()/ 100;
			this.invincibleLeftTime=msg.getUint32();
			this.bloodVal=msg.getUint32();
			this.maxBloodVal=msg.getUint32();
			return true;
		}

		__proto.serverWriteBody=function(msg){
			msg.writeInt16(this.itemId);
			msg.writeInt32(this.selfID);
			msg.writeUint16(this.uid);
			msg.writeInt16(this.x);
			msg.writeInt16(this.y);
			msg.writeByte(this.userlevel);
			msg.writeUint16(this.score);
			msg.writeByte(this.regain);
			msg.writeFloat32(this.scale);
			msg.writeFloat32(this.speedScale);
			msg.writeUint8(this.teamName);
			msg.writeUint16(this.teamId);
			msg.writeInt16(this.sourceID);
			msg.writeInt16(this.quanID);
			msg.writeInt16(this.SmaxSpeed *10000);
			msg.writeInt16(0 | this.collisionGetBulletPercent *100);
			msg.writeUint32(this.invincibleLeftTime);
			msg.writeUint32(this.bloodVal);
			msg.writeUint32(this.maxBloodVal);
		}

		//}
		__proto.clear=function(){
			this.itemId=0;
			this.selfID=0;
			this.uid=0;
			this.x=0;
			this.y=0;
			this.userlevel=0;
			this.score=0;
			this.regain=0;
			this.scale=0;
			this.speedScale=0;
			this.teamName=0;
			this.teamId=0;
			this.sourceID=0;
			this.quanID=0;
			this.SmaxSpeed=0;
			this.collisionGetBulletPercent=0;
			this.invincibleLeftTime=0;
			this.bloodVal=0;
			this.maxBloodVal=0;
			return "";
		}

		return CreateObjData;
	})()


	/**
	*...
	*@author dongketao
	*/
	//class ItemData
	var ItemData=(function(){
		function ItemData(){
			this.itemId=0;
			this.gid=0;
			this.posId=0;
			this.uid=0;
			this.bloodVal=NaN;
			this.x=NaN;
			this.y=NaN;
			this.invincibleLeftTime=0;
		}

		__class(ItemData,'ItemData');
		var __proto=ItemData.prototype;
		/**
		*把数据copy到当前的数据结构内.
		*@param itemd
		*/
		__proto.copyData=function(itemdata){
			this.itemId=itemdata.itemId;
			this.gid=itemdata.gid;
			this.posId=itemdata.posId;
			this.uid=itemdata.uid;
			this.bloodVal=itemdata.bloodVal;
			this.x=itemdata.x;
			this.y=itemdata.y;
			this.invincibleLeftTime=itemdata.invincibleLeftTime;
		}

		__proto.clientReadBody=function(msg,msgLen){
			this.itemId=msg.getUint16();
			this.gid=msg.getUint16();
			this.posId=msg.getUint16();
			this.uid=msg.getUint16();
			this.bloodVal=msg.getUint16();
			this.x=msg.getInt16();
			this.y=msg.getInt16();
			this.invincibleLeftTime=msg.getUint32();
			return true;
		}

		__proto.serverWriteBody=function(msg){
			msg.writeUint16(this.itemId);
			msg.writeUint16(this.gid);
			msg.writeUint16(this.posId);
			msg.writeUint16(this.uid);
			msg.writeUint16(this.bloodVal);
			msg.writeInt16(0 | this.x);
			msg.writeInt16(0 | this.y);
			msg.writeUint32(this.invincibleLeftTime);
			return true;
		}

		__proto.clear=function(){
			this.itemId=0;
			this.gid=0;
			this.posId=0;
			this.uid=0;
			this.bloodVal=0;
			this.x=0;
			this.y=0;
			return this.constructor.name;
		}

		ItemData.initDataPool=function(){
			for (var ti=0;ti < ItemData._maxNum;ti++){
				ItemData._dataPool[ti]=new ItemData();
			}
		}

		ItemData.getData=function(){
			return ItemData._dataPool.length>0? ItemData._dataPool.pop():new ItemData();
		}

		ItemData.release=function(_data){
			if (!_data)return;
			if (ItemData._dataPool.indexOf(_data)!=-1)return;
			_data.clear();
			ItemData._dataPool.push(_data);
		}

		ItemData._maxNum=1024 *5;
		ItemData._dataPool=[];
		return ItemData;
	})()


	/**
	*...
	*@author
	*/
	//class laya8.client.player.game.fakeSV.FaceServer
	var FaceServer=(function(){
		function FaceServer(){
			this.wzStatus=0;
			this.curUser=null;
			this.npcList={};
			this.bullets=[];
			this.infoList={};
			this.selfId=0;
			this.userName=null;
			this.beginTime=0;
			this.roomTime=3*60*1000;
			this.canPassive=0;
			this.listRank=[];
			this.roomType=0;
			this.npcNum=0;
			this.rebirthObj=null;
			this.mustNew=0;
			this.npcArray=null;
			this.sourceID=0;
			this.curGun=0;
			this.myRank=null;
			this.lastRankTime=0;
			this.canupdate=false;
			this.curObj=FaceServer.randomList[0];
		}

		__class(FaceServer,'laya8.client.player.game.fakeSV.FaceServer');
		var __proto=FaceServer.prototype;
		Laya.imps(__proto,{"laya8.client.player.game.IBattleMsg":true})
		//];
		__proto.initCurUserInfo=function(itemid,userName,sourceId,sid){
			this.selfId=sid;
			var userInfo=this.createUserInfo(sid,userName);this.curUser=this.curUser|| new CCreateObjData();
			this.npcList[this.selfId]=this.curUser;
			this.userName=userName;
			FaceServer.curTeamId=1;
			this.initObjData(this.curUser,itemid,sourceId,this.selfId,userInfo.roleInfo.uid,2000,2000,0,FaceServer.curTeamId);
		}

		//public static function getObj()
		__proto.getBirthOne=function(){
			this.npcNum++;
			if (this.roomType==100){
				var cuScene=Player.I.curScene;
				var mapPro=cuScene.tiledMap._jsonData.properties;
				if (this.npcNum==1){
					return {x:mapPro.newbieBornX1,y:mapPro.newbieBornY1};
				}
				else{
					return this.rebirthObj[this.npcNum-2];
				}
			}
			if (this.rebirthObj){
				var j=0|(Math.random()*this.rebirthObj.length);
				return this.rebirthObj[j] || this.rebirthObj[0];
			}
			return null;
		}

		__proto.startGame=function(){
			FaceServer.qTree=new QuadTree(0,0,Player.I.mapWidth,Player.I.mapHeight);
			var tmp=Player.I.curScene.getRebirthObj(this.roomType==100);
			this.rebirthObj=tmp[1001]||tmp[1002];
		}

		__proto.endGame=function(){
			if(CrazySnowball.isDanji){
				CrazySnowball.reportOneMin("gameend","end");
			}
			else{
				SnowUtils.setBattleType(true);
			}
			if (!this.npcNum)return;
			if (this.roomType==100){
				StatManager.I.addTeach(StatManager.I.getStatData("4.1.5"));
				HallApp.notify(new RequestNewBieEnd());
			};
			var sge=MsgTemplate.createWithClass(SMsgGameEndFree);
			sge.userid=this.curUser.selfID;
			sge.fragmentID=[];
			sge.fragmentNum=[];
			sge.gainDouble=1;
			sge.levelBeforeAndAfter=[];
			var levelDataBefore=new levelDataset();
			levelDataBefore.heroExp=-1;
			levelDataBefore.level=0;
			levelDataBefore.exp=0;
			levelDataBefore.expRequired=40;
			sge.levelBeforeAndAfter.push(levelDataBefore);
			var levelDataAfter=new levelDataset();
			levelDataAfter.heroExp=-1;
			levelDataAfter.level=1;
			levelDataAfter.exp=40;
			levelDataAfter.expRequired=0;
			sge.levelBeforeAndAfter.push(levelDataAfter);
			sge.money=0;
			sge.usersResultList=[];
			var me;
			var meRank=0;
			if (this.roomType !=100){
				for (var key in this.npcList){
					var user=this.npcList [key];
					var tem=new rankItemData();
					tem.name=this.infoList[key].username;
					tem.avatar=user.sourceID;
					tem.gender=1;
					tem.id=user.selfID;
					if (this.curUser.selfID==user.selfID){
						me=tem;
					}
					tem.level=user.userlevel;
					tem.score=user.score;
					tem.hidePoints=2000;
					tem.maxScore=user.score;
					tem.coin=0;
					tem.kills=0;
					tem.deaths=1;
					tem.medals=[];
					tem.headPortrait="";
					sge.usersResultList.push(tem);
				}
				sge.usersResultList=sge.usersResultList.sort(function(a,b){
					return b.score-a.score;
				});
				meRank=sge.usersResultList.indexOf(me);
				if (meRank){
				}
			}
			if (this.roomType==enumRoomType.ROOMTYPE_SOLO_NPC){
				var a=new RequestSaveHistory();
				var now=Date.now();
				a.matchHistory=new MatchHistory(this.roomType,now+ErrorLog.deltaTime,meRank+1,this.curUser.maxScore,this.curUser.killnum,this.curUser.score,meRank==0?1:0,this.curUser.bekillnum,0,0,0,0,GamingView.I.passiveSkills._skills ,this.curUser.itemId);
				HallApp.notify(a);
			}
			MsgManager.I.addStdMsg(sge);
			this.leaveGame();
		}

		__proto.createUserInfo=function(selfid,name){
			var item=new GameUserInfo();
			item.gender=0;
			item.hasOctopus=0;
			item.hasShield=0;
			item.turnRabit=0;
			item.turnSnowMan=0;
			item.username=name;
			item.wzStatus=0;
			item.title=0;
			item.heroExp=52;
			item.headPortrait="";
			item.roleInfo=new GameRoleInfo();
			item.roleInfo.activeSkill=[];
			item.roleInfo.scale=0;
			item.roleInfo.inReadyBullet=0;
			item.roleInfo.SmaxSpeed=0;
			item.roleInfo.inGrass=0;
			item.roleInfo.uid=FaceServer.ID++;
			item.gameUID=selfid;
			this.infoList[selfid]=item;
			return item;
		}

		/**
		*初始化 人物基础数据
		*@param user
		*@param itemid
		*@param sourId
		*/
		__proto.initObjData=function(user,itemid,sourId,selfId,uid,x,y,hp,tid){
			user.initObj(itemid,sourId,selfId,uid,x,y,hp,tid);
			if (this.roomType==enumRoomType.ROOMTYPE_SOLO_NPC){
				var gv=GamingView.I;
				if (tid==1){
					gv.uAvtor1m.push({uid:user.selfID,av:user.sourceID});
				}
				else{
					gv.uAvtor2m.push({uid:user.selfID,av:user.sourceID});
				}
			}
		}

		/**
		*创建NPC
		*@param num
		*/
		__proto.createNpc=function(num,hp){
			if (num <=2){
				this._createNpc(num,hp);
			}
			else{
				this._createNpc(2,hp);
				Laya.timer.once(2000,this,this.createNpc,[num-2,hp]);
			}
		}

		__proto.getNpcSKin=function(){
			var curid=this.curUser.itemId;
			var j=0;
			for (var i=0,n=FaceServer.all.length;i < n;i+=2){
				if (curid==FaceServer.all[i].itemid){
					j=i;
					break ;
				}
			}
			this.npcArray=[];
			this.npcArray[0]=FaceServer.all[j];
			j+=2 *FaceServer.beginNum;
			for (i=0;i < 2;i++){
				j=(j+2)% 16;
				if (FaceServer.all[j].itemid==curid){
					j=(j+2)% 16;
				}
				this.npcArray.push(FaceServer.all[j]);
				this.npcArray.push(FaceServer.all[j]);
			}
			return this.npcArray;
		}

		__proto._createNpc=function(num,hp){
			for (var i=0;i < num;i++){
				var selfId=-(FaceServer.ID);
				var userInfo=this.createUserInfo(selfId,FaceServer.nameList[this.npcNum]);
				var temp=new CCreateObjData();
				this.npcList[selfId]=temp;
				var d=FaceServer.randomList[(this.npcNum-1+FaceServer.beginNum)% FaceServer.maxDNum];
				if (this.npcArray){
					d=this.npcArray[this.npcNum-1];
				}
				if (this.roomType==enumRoomType.ROOMTYPE_SOLO_NPC){
					FaceServer.curTeamId=(FaceServer.curTeamId==1)?2:1;
				}
				else{
					FaceServer.curTeamId++;
				}
				this.initObjData(temp,d.itemid,d.sourceID,userInfo.gameUID,userInfo.roleInfo.uid,2000,2000,hp,FaceServer.curTeamId);
				this.joinGroup([this.infoList[selfId]]);
				temp.rebirth();
			}
		}

		/**
		*发送userAddview
		*@param creatObj
		*/
		__proto.sendUserAddView=function(creatObj){
			var user=MsgTemplate.createWithClass(SMsgUserAddView);
			user.userData=creatObj;
			MsgManager.I.addStdMsg(user);
		}

		/*INTERFACE laya8.client.player.game.IBattleMsg */
		__proto.match=function(roomType,mustNewRoom){
			SkillProxy.skilllevelAtt=ConfigData.skillCfg;
			SkillProxy.za7za8=ConfigData.gameCfg;
			var facemsg={"params":{"gameid":"xxx","roomname":"AUTO","ip":"10.30.46.56:9001","sslip":"10.30.46.56:9002","id":"3866","type":"1","key":"40355"},"url":"user.togame"};
			facemsg.params.type=roomType;
			this.roomType=roomType;
			if (roomType==100){
				FaceServer.maxDNum=3;
				FaceServer.beginNum=0;
				CCreateObjData.canMove=false;
				this.roomTime=60 *60 *1000;
				this.canPassive=0;
			}
			else if (roomType==enumRoomType.ROOMTYPE_SOLO_NPC){
				FaceServer.maxDNum=7;
				FaceServer.beginNum=(0 | (Math.random()*7));
				CCreateObjData.canMove=true;
				this.roomTime=3 *60 *1000;
				this.canPassive=1;
			}
			if (CrazySnowball.isDanji){
				this.canPassive=0;
				CrazySnowball.reportOneMin("match","enter");
			}
			else{
				Laya.timer.once(30,this,function(){
					MyGameEventHandler.I.startGame(facemsg.params);
				});
			}
		}

		__proto.CStartGame=function(i,roomType){
			if (i==0){
				this.curObj={itemid:35,sourceID:36};
			}
			else{
				this.curObj={itemid:36,sourceID:40};
			};
			var facemsg={"params":{"gameid":"xxx","roomname":"AUTO","ip":"10.30.46.56:9001","sslip":"10.30.46.56:9002","id":"3866","type":"1","key":"40355"},"url":"user.togame"};
			facemsg.params.type=roomType;
			this.roomType=roomType;
			CCreateObjData.canMove=true;
			this.roomTime=1 *60 *1000+3000;
			Laya.timer.once(30,this,function(){
				MyGameEventHandler.I.startGame(facemsg.params);
			});
		}

		__proto.realUserSkill=function(skillid,msg,index){
			var bullet=this.curUser.useSkill(msg,skillid,index);
			if (bullet){
				this.bullets.push(bullet);
			}
		}

		/**
		*获得距离开房间有多长时间
		*@return
		*/
		__proto.getSerNow=function(){
			return Browser.now()-this.beginTime;
		}

		__proto.useSKill=function(msg){
			if (!this.curUser)return;
			var skilldata=this.curUser.skillobjs [msg.skillIndex];
			if (skilldata){
				var left=skilldata.leftCount;
				if (left !=0){
					if (left !=-1){
						skilldata.leftCount=--left;
					};
					var result=MsgTemplate.createWithClass(SMsgUseSkillResult);
					result.useResult=1;
					result.skillIndex=msg.skillIndex;
					result.leftCount=skilldata.leftCount;
					MsgManager.I.addStdMsg(result);
					skilldata.lastUseTime=Laya.timer.currTimer;
					this.realUserSkill(skilldata.skillId,msg,msg.skillIndex);
				}
				else{
				}
			}
		}

		__proto.sendMove=function(msg){
			if (msg.aiUID !=0){
				var user=this.npcList [msg.aiUID];
				if (user){
					user.moveTo(msg);
				}
			}
		}

		__proto.leaveGame=function(){
			if(!CrazySnowball.isDanji){
				SnowUtils.setBattleType(true);
			}
			Laya.timer.clearAll(this);
			this.npcNum=0;
			FaceServer.qTree.clear();
			this.curUser=null;
			this.npcList={};
			this.infoList={};
			this.bullets.length=0;
			FaceServer.delSnows.length=0;
			FaceServer.disApplear.length=0;
			this.listRank.length=0;
			FaceServer.posDisapplear.length=0;
			FaceServer.disApplear.length=0;
			FaceServer.ID=1;
			this.canupdate=false;
			this.beginTime=0;
		}

		__proto.rebirth=function(msg){
			this.curUser.rebirth(true);
		}

		__proto.xuli=function(index){
			if (index==0)index=3;
			if (!this.curUser)return;
			var skillobj=this.curUser.skillobjs[index];
			if (this.curUser&&skillobj){
				this.curUser.xuli(skillobj.skillId);
			}
		}

		__proto.hearBeat=function(msg){
			var _tm=MsgTemplate.createWithClass(CMsgHeartBeatRes);
			_tm.timeServer=msg.timeClinet+16;
			_tm.timeClinet=msg.timeClinet-16;
			MsgManager.I.addStdMsg(_tm);
		}

		__proto.loginGS=function(msg){
			Laya.timer.clear(this,this.run);
			Laya.timer.frameLoop(1,this,this.run);
			var sml=MsgTemplate.createWithClass(SMsgLoginRes);
			sml.loginStatus=1;
			var rs=FaceServer.sourceMap[this.roomType];
			this.sourceID=rs[0|(Math.random()*rs.length)]||rs[0]
			sml.sourceID=this.sourceID;
			sml.force=1;
			var _tm=MsgTemplate.createWithClass(CMsgHeartBeatRes);
			_tm.timeServer=Laya.timer.currTimer;
			_tm.timeClinet=Laya.timer.currTimer;
			Laya.timer.once(30,this,function(){
				MsgManager.I.addStdMsg(sml);
				MsgManager.I.addStdMsg(_tm);
			});
		}

		__proto.createSceneItem=function(_itemData,isDynamicCreated){
			if (_itemData.notInServer)return null;
			var gid=_itemData.gid;
			var id=_itemData.id;
			var x=_itemData.x;
			var y=_itemData.y;
			var posId=_itemData.posId;
			var refreshTime=_itemData.refreshTime;
			var rebirthTime=_itemData.rebirthTime;
			if (refreshTime==0){
				refreshTime=20000;
			}
			if (rebirthTime==0){
				rebirthTime=20000;
			};
			var _prop=CItemData.getData();
			if (!_prop){
				return null;
			}
			_prop.gid=gid;
			_prop.x=0 | x;
			_prop.y=0 | y;
			_prop.posId=posId;
			_prop.bloodVal=0;
			_prop.itemId=id;
			_prop.uid=FaceServer.ID++;
			var itemObj=ConfigData.elementData[id];
			if (!itemObj){
				_prop.run=null;
			}
			else{
				if (itemObj.isBaoxiang){
					_prop.run=_prop.beEat;
				}
				else if (itemObj.chgSkill){
					_prop.run=_prop.getSkill;
				}
				else if(itemObj.collLogicID=="Food"){
					_prop.run=_prop.delSnows;
				}
			};
			var gridObj=Player.getObjByGid(gid);
			_prop.refreshTime=gridObj.refreshTime;
			_prop.rebirthTime=gridObj.rebirthTime;
			var itemObj=ConfigData.elementData[id];
			_prop.setSize(itemObj.sw,itemObj.sh);
			FaceServer.itemObjs[_prop.uid]=_prop;
			return _prop;
		}

		__proto.showALL=function(){
			var msg=MsgTemplate.createWithClass(SMsgItemAppear);
			var arr=ConfigData.mapData.prop;
			msg.itemList.length=0;
			var list=msg.itemList;
			for (var i=0,t=arr.length;i < t;i++){
				var item=this.createSceneItem(arr[i],false);
				if (item){
					list.push(item);
					item.addView();
				}
			}
			msg.itemNum=list.length;
			msg.ref=2;
			MsgManager.I.addStdMsg(msg);
		}

		__proto.readyStartLater=function(){RoleCenter.I.nickName=RoleCenter.I.nickName|| FaceServer.nameList[0];
			this.curGun=0;
			if (this.roomType==enumRoomType.ROOMTYPE_SOLO_NPC){
				var i=RoleCenter.I.fashions[0];
				var obj=ConfigData.itemData[i];
				this.curGun=RoleCenter.I.fashions[3];
				if (!obj){
					this.curObj=FaceServer.randomList[0];
				}
				else{
					this.curObj={};
					this.curObj.itemid=obj.communalId[0];
					this.curObj.sourceID=i%1000;
				}
			}
			else{
				RoleCenter.I.myBasicData=RoleCenter.I.myBasicData|| {NkName:RoleCenter.I.nickName};RoleCenter.I.userId=RoleCenter.I.userId|| 10086;
			}
			this.initCurUserInfo(this.curObj.itemid,decodeURIComponent(RoleCenter.I.nickName),this.curObj.sourceID,RoleCenter.I.userId);
			FreeMatch.myTeamId=this.curUser.teamId;
			var msg=MsgTemplate.createWithClass(SMsgEnterRoom);
			msg.erData=new EnterRoomData();
			this.beginTime=msg.roomStartTime=Laya.timer.currTimer;
			msg.erData.roomType=this.roomType;
			msg.erData.useBlood=1;
			msg.erData.selfID=RoleCenter.I.userId;
			msg.erData.sourceID=this.sourceID;
			msg.erData.maxLifeTime=this.roomTime;
			msg.erData.teamName=1;
			msg.erData.teamId=1;
			msg.erData.firstTime=1;
			MsgManager.I.addStdMsg(msg);
			this.joinGroup([this.infoList[this.curUser.selfID]]);
			this.curUser.rebirth();
			if (this.roomType !=100){
				var gv=GamingView.I;
				gv.btn_fightSet.visible=false;
				gv.viewInfo.backHomeBtn.visible=false;
				this.getNpcSKin();
				this.createNpc(5,0);
			}
			if (this.roomType==enumRoomType.ROOMTYPE_SOLO_NPC){
				var gv=GamingView.I;
				gv.btn_fightSet.visible=true;
				gv.viewInfo.backHomeBtn.visible=true;
			}
			this.showALL();
			this.showPassive();
		}

		__proto.showPassive=function(){
			if (this.canPassive){
				var playtimes=MsgTemplate.createWithClass(SMsgModePlayTimes);
				playtimes.unlockSkill=this.canPassive;
				MsgManager.I.addStdMsg(playtimes);
			}
		}

		__proto.readyStart=function(msg1){
			this.startGame();
			Laya.timer.once(1,this,this.readyStartLater);
		}

		__proto.initServer=function(ip,port,callback){
			callback.run();
		}

		__proto.joinGroup=function(userList){
			var romeUserList=MsgTemplate.createWithClass(SMsgRoomUserList);
			romeUserList.userInfos=userList;
			MsgManager.I.addStdMsg(romeUserList);
		}

		__proto.sendRankTeam=function(){
			var rank=MsgTemplate.createWithClass(SRankListRes);
			var i=0;
			var teamA=this.listRank[0] || new gameRkData();
			var teamB=this.listRank[1] || new gameRkData();
			teamA.teammatesNum=2;
			teamB.teammatesNum=2;
			teamA.id=1;
			teamB.id=2;
			teamA.kills=0;
			teamB.kills=0;
			teamA.score=0;
			teamB.score=0;
			this.listRank[0]=teamA;
			this.listRank[1]=teamB;
			for (var uid in this.npcList){
				var user=this.npcList [uid];
				if (user.teamId==1){
					teamA.score+=user.score;
					teamA.kills+=user.killnum;
				}
				else{
					teamB.score+=user.score;
					teamB.kills+=user.killnum;
				}
				if (this.curUser.uid==user.uid){
					rank.myRank=this.myRank?this.myRank:new gameRkData();
					this.myRank=rank.myRank;
					this.myRank.score=user.score;
					this.myRank.rank=1;
					this.myRank.id=user.uid;
				}
			}
			rank.rankList=this.listRank;
			MsgManager.I.addStdMsg(rank);
		}

		__proto.sendRank=function(){
			if (this.roomType==enumRoomType.ROOMTYPE_SOLO_NPC){
				this.sendRankTeam();
				return;
			};
			var rank=MsgTemplate.createWithClass(SRankListRes);
			var i=0;
			for (var uid in this.npcList){
				var user=this.npcList [uid];
				var rankitem=this.listRank[i];
				if (!rankitem){
					rankitem=this.listRank[i]=new gameRkData();
				}
				rankitem.id=user.uid;
				rankitem.kills=user.killnum;
				rankitem.score=user.score;
				if(this.curUser.uid==user.uid)rank.myRank=rankitem;
				i++;
			}
			this.listRank.length=i;
			this.listRank=this.listRank.sort(function(itema,itemb){return itemb.score-itema.score});
			var num=this.listRank.indexOf(rank.myRank);
			rank.myRank.rank=num+1;
			rank.rankList=this.listRank;
			MsgManager.I.addStdMsg(rank);
		}

		__proto.run=function(){
			if (!this.canupdate||!this.beginTime)return;
			var i=0;
			var len=0;
			var t=Laya.timer.currTimer;
			if (t > this.lastRankTime+2000){
				this.lastRankTime=t;
				this.sendRank();
			}
			for (var n in this.npcList){
				var d=this.npcList [n];
				d.update(t,FaceServer.qTree);
			}
			for (i=0,len=this.bullets.length;i < len;i++){
				var b=(this.bullets [i]).update(t,FaceServer.qTree);
				if (!b){
					this.bullets.splice(i,1);
					len--;
					i--;
				}
			}
			if (FaceServer.delSnows.length > 0){
				var msg=MsgTemplate.createWithClass(SMsgDelSnorw);
				msg.itemList=FaceServer.delSnows;
				msg.itemNum=FaceServer.delSnows.length;
				MsgManager.I.addStdMsg(msg);
			}
			if (FaceServer.disApplear.length > 0){
				var disAMsg=MsgTemplate.createWithClass(SMsgItemDisappear);
				disAMsg.itemList=FaceServer.disApplear;
				disAMsg.itemNum=FaceServer.disApplear.length;
				MsgManager.I.addStdMsg(disAMsg);
			}
			if (FaceServer.posDisapplear.length > 0){
				var temp;
				for (i=0,len=FaceServer.posDisapplear.length;i < len;i++){
					var item=FaceServer.posDisapplear [i];
					if (t>=(item).reshowTime)
					{temp=temp|| [];
						temp.push(item);
						var data=FaceServer.itemObjs [item.uid];
						data.addView();
						FaceServer.posDisapplear.splice(i,1);
						i--;
						len--;
					}
					else{
						break ;
					}
				}
				if (temp){
					var spA=MsgTemplate.createWithClass(SMsgItemPosAppear);
					spA.itemList=temp;
					spA.itemNum=temp.length;
					MsgManager.I.addStdMsg(spA);
				}
			}
			if (FaceServer.cookedList.length){
				for (i=0,len=FaceServer.cookedList.length;i < len;i++){
					var obj=FaceServer.cookedList [i];
					if (obj.reshowTime <=t){
						var cooke=MsgTemplate.createWithClass(SMsgFoodCooked);
						cooke.uid=obj.uid;
						MsgManager.I.addStdMsg(cooke);
						obj.addView();
						laya8.client.player.game.fakeSV.FaceServer.cookedList.splice(i,1);
						i--;
						len--;
					}
				}
			}
			if (t-this.beginTime >=this.roomTime){
				this.endGame();
			}
		}

		//fm.run(t);
		__proto.userSkillResult=function(){}
		/**
		*通过selfid获取角色信息
		*@param sid
		*@return
		*/
		__proto.getUser=function(sid){
			return this.npcList[sid];
		}

		__proto.removeBullet=function(b){
			var index=this.bullets.indexOf(b);
			if (index !=-1){
				this.bullets.splice(index,1);
			}
		}

		__proto.enableContol=function(arry){
			var msg=MsgTemplate.createWithClass(SMsgHostedRobot);
			msg.currAiGameUIDs=arry;
			MsgManager.I.addStdMsg(msg);
		}

		__proto.guideStep=function(msg){
			switch(msg.step){
				case 1:
					break ;
				case 2:
					this.createNpc(1,15);
					this.enableContol([-(FaceServer.ID-1)]);
					break ;
				case 4:
					this.createNpc(2,15);
					this.enableContol([-(FaceServer.ID-2),-(FaceServer.ID-1)]);
					break ;
				case 8:
					this.createNpc(3,15);
					this.roomTime=this.getSerNow()+30000;
					var sret=MsgTemplate.createWithClass(SMsgRoomResidualTime);
					sret.maxLifeTime=30000;
					MsgManager.I.addStdMsg(sret);
					break ;
				case 16:
					CCreateObjData.canMove=true;
					break ;
				case 32:
					this.endGame();
					break ;
				}
		}

		/*INTERFACE laya8.client.player.game.IBattleMsg */
		__proto.beginUpdate=function(){
			this.canupdate=true;
		}

		/*INTERFACE laya8.client.player.game.IBattleMsg */
		__proto.chooseSkill=function(select){
			this.curUser && this.curUser.onChoose(select);
		}

		/*INTERFACE laya8.client.player.game.IBattleMsg */
		__proto.pauseTime=function(msg){}
		__proto.continueTime=function(msg){}
		/*INTERFACE laya8.client.player.game.IBattleMsg */
		__proto.petAttack=function(msg){
			var sb=this.curUser.sendPetBullet(msg.angle,0,7);
			if (sb){
				sb.colldata.isXuli=false;
				this.bullets.push(sb);
			}
		}

		/*INTERFACE laya8.client.player.game.IBattleMsg */
		__proto.goAway=function(msg){
			if (this.curUser && !this.curUser.dieTime){
				var obj=this.getBirthOne();
				this.curUser.x=obj.x-this.curUser.originWidth / 2;
				this.curUser.y=obj.y-this.curUser.originHeight;
				var s=MsgTemplate.createWithClass(SMsgStuckMove);
				s.x=this.curUser.x;
				s.y=this.curUser.y;
				s.deltax=s.deltay=0;
				s.uid=this.curUser.uid;
				MsgManager.I.addStdMsg(s);
			}
		}

		FaceServer.showRect=function(qRect,r,uid,index,showOrDel){
			return;
			var _testMsg=MsgTemplate.createWithClass(SMsgTest);
			_testMsg._x=qRect.x;
			_testMsg._y=qRect.y;
			_testMsg._w=qRect.w;
			_testMsg._h=qRect.h;
			_testMsg._r=r;
			_testMsg._uid=uid+index *1000;
			_testMsg._uindex=showOrDel;
			MsgManager.I.addStdMsg(_testMsg);
		}

		FaceServer.MAXAINUM=5;
		FaceServer.MAXFIRSTNUM=2;
		FaceServer.baseScale=1.2;
		FaceServer.hurtValue=40;
		FaceServer.maxDNum=3;
		FaceServer.beginNum=0;
		FaceServer.delSnows=[];
		FaceServer.itemObjs=[];
		FaceServer.posDisapplear=[];
		FaceServer.curTeamId=1;
		FaceServer.cookedList=[];
		FaceServer.disApplear=[];
		FaceServer.qTree=null
		FaceServer.ID=1;
		FaceServer.objs={};
		__static(FaceServer,
		['INSTANCE',function(){return this.INSTANCE=new FaceServer();},'sourceMap',function(){return this.sourceMap={
				100:[0],
				1:[12],
				14:[17,20,23]
			};},'nameList',function(){return this.nameList=[
			"Snow Baby",
			"Silvester",
			"Vito",
			"Yehudi",
			"Thomas",
			"Quincy",
			"Norton",
			"Leopold",
			"Yu Yu",
			"Dream"];},'randomList',function(){return this.randomList=[
			{itemid:35,sourceID:36},
			{itemid:34,sourceID:35},
			{itemid:38,sourceID:37},
			{itemid:36,sourceID:40},
			{itemid:40,sourceID:41},
			{itemid:37,sourceID:38},
			{itemid:33,sourceID:34},
			{itemid:39,sourceID:39}];},'all',function(){return this.all=[
			{itemid:33,sourceID:34},
			{itemid:33,sourceID:42},
			{itemid:34,sourceID:35},
			{itemid:34,sourceID:43},
			{itemid:35,sourceID:36},
			{itemid:35,sourceID:44},
			{itemid:36,sourceID:40},
			{itemid:36,sourceID:48},
			{itemid:37,sourceID:38},
			{itemid:37,sourceID:46},
			{itemid:38,sourceID:37},
			{itemid:38,sourceID:45},
			{itemid:39,sourceID:39},
			{itemid:39,sourceID:47},
			{itemid:40,sourceID:41},
			{itemid:40,sourceID:49}];}
		]);
		return FaceServer;
	})()


	/**
	*...
	*@author
	*/
	//class laya8.client.player.game.fakeSV.Sbullet
	var Sbullet=(function(){
		function Sbullet(){
			this.uid=0;
			this.skillid=0;
			this.time=0;
			this.owerid=0;
			this.angle=0;
			this.owersid=0;
			this.qRect=null;
			this.inTree=false;
			this.beginTime=0;
			this.colldata=null;
			this.bx=NaN;
			this.by=NaN;
			this.dis=NaN;
			this.isBoom=false;
			this.isDie=false;
			this.delayTime=0;
			this.interval=0;
			this.boomTimes=1;
			this.qRect=new QuadRect();
			this.qRect.obj=this;
			this.colldata=new CollData();
			this.isDie=false;
		}

		__class(Sbullet,'laya8.client.player.game.fakeSV.Sbullet');
		var __proto=Sbullet.prototype;
		Laya.imps(__proto,{"laya8.client.player.game.fakeSV.ICollision":true})
		__proto.hit=function(hitter){
			if (!this.beginTime)return;
			if ((hitter instanceof laya8.client.player.game.fakeSV.CCreateObjData )){
				if (this.beginTime+this.delayTime>Laya.timer.currTimer)return;
				var user=hitter;
				if (this.owersid!=user.selfID){
					var fs=FaceServer.INSTANCE;
					var hit=fs.getUser(this.owersid);
					if (hit.bloodVal <=0){
						fs.removeBullet(this);
						this.desory(FaceServer.qTree);
						return;
					}
					this.colldata.uID=this.uid;
					this.colldata.skillId=this.skillid;
					Sbullet.attUserHitUser(hit,user,this.colldata,this.angle,this.dis,this);
					if (this.isBoom){
						this.isDie=true;
					}
					else{
						this.desory(FaceServer.qTree);
						fs.removeBullet(this);
					}
				}
			}
		}

		__proto.begin=function(){
			this.beginTime=Laya.timer.currTimer;
		}

		__proto.desory=function(qtree){
			this.beginTime=0;
			this.isDie=true;
			FaceServer.showRect(this.qRect,0,this.uid,0,0);
			FaceServer.disApplear.push(this.uid);
			if (this.inTree){
				qtree.remove(this.qRect);
				this.inTree=false;
			}
			Sbullet.release(this);
		}

		__proto.checkAttack=function(){
			var bullet=Player.I.netObjects [this.uid];
			var x=bullet?bullet.x:this.bx;
			var y=bullet?bullet.y:this.by;
			this.qRect.x=x-this.qRect.w/2;
			this.qRect.y=y-this.qRect.h/2;
			this.qRect.id=this.uid;
			var behitList=[];
			var behitPropList=[];
			var sceneGraph=FaceServer.qTree;
			var tlist=sceneGraph.getAreaObjList(this.qRect);
			var collobj;
			var hit=FaceServer.INSTANCE.getUser(this.owersid);
			if (tlist && tlist.length >=1){
				for (var i=0;i < tlist.length;i++){
					collobj=tlist[i];
					if ((collobj.obj instanceof laya8.client.player.game.fakeSV.CCreateObjData )){
						if (collobj.obj.uid==hit.uid||hit.bloodVal<=0)continue ;
						laya8.client.player.game.fakeSV.Sbullet.attUserHitUser(hit,collobj.obj,this.colldata,this.angle,0,null);
					}
				}
			}
		}

		//}
		__proto.update=function(t,qtree){
			if (!this.beginTime)return false;
			if (this.isDie){
				this.desory(qtree);
				return false;
			}
			if (t-this.beginTime >=this.time){
				if (this.interval < this.time&&t-this.beginTime >=this.delayTime){
					this.checkAttack();
				}
				this.desory(qtree);
				return false;
			}
			if (this.interval<this.time){
				if (t-this.beginTime >=this.delayTime){
					this.delayTime+=this.interval;
					this.checkAttack();
				}
				return true;
			};
			var bullet=Player.I.netObjects [this.uid];
			if (bullet){
				this.qRect.x=bullet.x-1/2*this.qRect.w;
				this.qRect.y=bullet.y-1/2*this.qRect.h;
				this.qRect.id=this.uid;
				if (!this.inTree){
					this.inTree=true;
					qtree.put(this.qRect);
				}
				FaceServer.showRect(this.qRect,0,this.uid,0,1);
				var tlist=qtree.getAreaObjList(this.qRect);
				var collobj;
				var hit=Player.I.netObjects [this.owerid];
				if (!hit)return true;
				if (tlist && tlist.length >=1){
					for (var i=0;i < tlist.length;i++){
						collobj=tlist[i];
						if (collobj.obj){
							var aa=Player.I.netObjects [collobj.obj.uid];
							if ((aa instanceof laya8.client.player.game.TreeObject )){
								var collMsg=MsgTemplate.createWithClass(SMsgAreaCollision);
								collMsg.uidHit=this.uid;
								collMsg.hitSkillId=this.skillid;
								collMsg.uidHitOwner=this.owerid;
								collMsg.hitBloodVal=hit.hp;
								collMsg.hitScore=hit.jifen;
								var belist=collMsg.behitList=[];
								var item=BehitListItem.getData();
								item.angle=this.angle;
								item.beHitBloodVal=1;
								item.beHitScore=1;
								item.isCrit=0;
								item.uidBeHit=collobj.obj.uid;
								belist.push(item);
								MsgManager.I.addStdMsg(collMsg);
								this.desory(FaceServer.qTree);
								return false;
							}
						}
					}
				}
			}
			return true;
		}

		Sbullet.getAngleByVector2D=function(_x,_y){
			var _angle=Utils$2.toAngle(Math.atan2(_y,_x));
			return Math.round((_angle+360)% 360);
		}

		Sbullet.getVector2DByAngle=function(_angle){
			if (_angle==-1){
				return new Vector2D(0,0);
			}
			_angle=Utils$2.toRadian(_angle);
			var _tmpVec=new Vector2D();
			_tmpVec.x=Math.cos(_angle);
			_tmpVec.y=Math.sin(_angle);
			return _tmpVec;
		}

		Sbullet.getBeatAngle=function(beHitObj,bullet){
			var behitX=beHitObj.x;
			var behitY=beHitObj.y;
			var _x_=bullet.bx-behitX;
			var _y_=bullet.by-behitY;
			var bulletAngle=Sbullet.getAngleByVector2D(_x_,_y_)+180;
			var vec=Sbullet.getVector2DByAngle(bulletAngle);
			return bulletAngle % 360;
		}

		Sbullet.attUserHitUser=function(hit,user,colldata,angle,dis,bullet,hitProp,teamResist,_forceSendCollMsg){
			(teamResist===void 0)&& (teamResist=false);
			(_forceSendCollMsg===void 0)&& (_forceSendCollMsg=false);
			if (hit.teamId==user.teamId)return;
			var skillid=colldata.skillId;
			var collMsg=MsgTemplate.createWithClass(SMsgAreaCollision);
			collMsg.uidHit=colldata.uID;
			collMsg.hitSkillId=skillid;
			collMsg.uidHitOwner=hit.uid;
			collMsg.hitBloodVal=hit.bloodVal;
			collMsg.hitScore=hit.score;
			var belist=collMsg.behitList=[];
			var item=BehitListItem.getData();
			item.angle=angle;
			var hurtValue=colldata.attackVal+user.bloodVal *colldata.attackValScale;
			hurtValue=SkillProxy.calDamage(hurtValue,hit.skillBaseData,user.skillBaseData,colldata);
			hurtValue *=hit.inatt_damageScale;
			var preScore=user.score;
			user.addScore(-hurtValue);
			var bloodDmage=hurtValue *ConfigData.gameCfg.scoreDamageToHp;
			user.addBlood(-bloodDmage);
			var scoreAdd=SkillProxy.stealScore(preScore-user.score);
			hit.addScore(scoreAdd);
			var bloodAdd=SkillProxy.stealBlood(scoreAdd,hit.skillBaseData);
			if (bloodAdd){
				console.log(">>>>>>>>>>>>>>>>>>>>>>>>addBloodVale"+bloodAdd);
				hit.addBlood(bloodAdd);
				hit.skillChgBlood();
			}
			item.beHitBloodVal=user.bloodVal;
			item.beHitScore=user.score;
			item.isCrit=colldata.isCrit?1:0;
			item.uidBeHit=user.uid;
			belist.push(item);
			MsgManager.I.addStdMsg(collMsg);
			var userSkillData=user.getUserData();
			userSkillData.angle=angle;
			userSkillData.dis=dis;
			userSkillData.releaseIme=false;
			userSkillData.skillId=skillid;
			userSkillData.bloodDamage=bloodDmage;
			userSkillData.beatAngle=bullet?Sbullet.getBeatAngle(user,bullet):angle;
			userSkillData.attCollData=colldata;
			if (bullet){
				colldata.x=bullet.bx;
				colldata.y=bullet.by;
			}
			if (user.bloodVal <=0){
				if (SkillProxy.triggerPassiveSkill(32,user.skillBaseData,user.skillBaseData,userSkillData)){
					user.bloodVal=1;
				}
				else{}
			}
			if(user.bloodVal>0){
				SkillProxy.triggerPassiveSkill(22,hit.skillBaseData,user.skillBaseData,userSkillData);
				SkillProxy.triggerPassiveSkill(23,hit.skillBaseData,user.skillBaseData,userSkillData);
			}
			else{
				hit.killnum++;
				user.bekillnum++;
				user.die();
			}
		}

		Sbullet.getData=function(){
			return Sbullet._dataPool.length>0? Sbullet._dataPool.pop():new Sbullet();
		}

		Sbullet.release=function(_data){
			if (!_data)return;
			_data.isDie=false;
			if (Sbullet._dataPool.indexOf(_data)!=-1)return;
			Sbullet._dataPool.push(_data);
		}

		Sbullet._dataPool=[];
		return Sbullet;
	})()


	/**
	*...
	*@author
	*/
	//class laya8.client.player.game.fakeSV.skil.FakePassiveSkill
	var FakePassiveSkill=(function(){
		function FakePassiveSkill(){}
		__class(FakePassiveSkill,'laya8.client.player.game.fakeSV.skil.FakePassiveSkill');
		FakePassiveSkill.randomSkill=function(curRandomSkills,itemId,userlevel,hasSkills){
			var randSkill=MsgTemplate.createWithClass(SMsgRandomSkill);
			var roleCfg=ConfigData.roleData[itemId];
			var skill=SkillMgr.instance.getRandomSkills(userlevel,hasSkills,3,roleCfg.heroType,roleCfg.subHeroType,ConfigData.randomSkill);
			randSkill.skills=skill;
			for (var i=0,n=skill.length;i < n;i++){
				curRandomSkills.push(skill[i]);
			}
			MsgManager.I.addStdMsg(randSkill);
		}

		FakePassiveSkill.lostSkill=function(useSkill,userlevel){
			var _skills=ConfigData.gameCfg.randomSkillLevel;
			var _skillLen=0;
			for (var j=0;j < _skills.length;j++){
				if (userlevel < _skills[j]){
					_skillLen=j;
					break ;
				}
				else {
					_skillLen=j+1;
				}
			}
			if (_skillLen < useSkill.length){
				useSkill.length=_skillLen;
			};
			var len=useSkill.length;
			var ss=MsgTemplate.createWithClass(SMsgOwnPassiveSkill);
			for (var i=0;i < len;i++){
				ss.skills.push(useSkill[i]);
			}
			MsgManager.I.addStdMsg(ss);
		}

		return FakePassiveSkill;
	})()


	/**
	*吃雪花飞的类
	*@author luohuantao
	*/
	//class laya8.client.player.game.FlySnowImg
	var FlySnowImg=(function(){
		function FlySnowImg(){
			this.startTimer=NaN;
			this.x=NaN;
			this.y=NaN;
			this.parent=null;
			this.isCanMove=false;
			this.txt=null;
			this.scale=NaN;
			;
		}

		__class(FlySnowImg,'laya8.client.player.game.FlySnowImg');
		var __proto=FlySnowImg.prototype;
		__proto.setData=function(_x,_y){
			this.x=_x;
			this.y=_y;
		}

		__proto.recover=function(){
			this.startTimer=this.x=this.y=0;
			this.parent=null;
			this.isCanMove=false;
			this.txt=null;
			this.scale=1;
			Pool.recover("FlySnowImg",this);
		}

		FlySnowImg.getOne=function(){
			return Pool.getItemByClass("FlySnowImg",FlySnowImg);
		}

		return FlySnowImg;
	})()


	/**
	*...
	*@author ...
	*/
	//class laya8.client.player.game.Grass
	var Grass=(function(){
		function Grass(id){
			this.netList={};
			this.teamNum=0;
			this.id=0;
			this.id=id;
		}

		__class(Grass,'laya8.client.player.game.Grass');
		var __proto=Grass.prototype;
		/**
		*物品进入草丛
		*@param a
		*/
		__proto.addNetObject=function(a){}
		/**
		*物品离开草丛
		*@param a
		*/
		__proto.removeObject=function(a){}
		//}
		__proto.destory=function(){
			this.netList={};
			this.teamNum=0;
		}

		Grass.getGrass=function(index){
			return Grass.grassList[0];
		}

		Grass.remove=function(){
			Grass.grassList.length=0;
			Grass.grassXYtoIndex={};
		}

		Grass.clearAll=function(){
			for (var i=0,n=Grass.grassList.length;i < n;i++){
				Grass.grassList[i].destory();
			}
		}

		Grass.createGrass=function(id,x,y,w,h,girdW){
			id=0;Grass.grassList[id]=Grass.grassList[id]|| new Grass(id);
		}

		Grass.grassList=[];
		Grass.grassXYtoIndex={};
		return Grass;
	})()


	/**
	*宠物精灵的数据对象
	*@author luohuantao
	*/
	//class laya8.client.player.game.PetData
	var PetData=(function(){
		function PetData(){
			this.isBorn=true;
			this.isAtk=false;
			this.dir=0;
			this.sendAtkTime=NaN;
			this.x=NaN;
			this.y=NaN;
		}

		__class(PetData,'laya8.client.player.game.PetData');
		var __proto=PetData.prototype;
		__proto.reset=function(){
			this.isBorn=true;
			this.isAtk=false;
			this.dir=-1;
			this.x=0;
			this.y=0;
		}

		return PetData;
	})()


	/**
	*...
	*@author
	*/
	//class laya8.client.player.game.RealServer
	var RealServer=(function(){
		function RealServer(){}
		__class(RealServer,'laya8.client.player.game.RealServer');
		var __proto=RealServer.prototype;
		Laya.imps(__proto,{"laya8.client.player.game.IBattleMsg":true})
		/**
		*匹配游戏
		*@param roomType
		*@param mustNewRoom
		*/
		__proto.match=function(roomType,mustNewRoom){
			if (mustNewRoom==1){
				Laya8Core.game.match(roomType,mustNewRoom);
			}
			else{
				HallApp.matchFun(roomType);
			}
		}

		/**
		*登录战斗服
		*@param msg
		*/
		__proto.loginGS=function(msg){
			GameSocket.sendClientMsg(msg);
		}

		/**
		*客户端准备好了
		*@param msg
		*/
		__proto.readyStart=function(msg){
			GameSocket.sendClientMsg(msg);
		}

		/**
		*使用技能消息
		*@param msg
		*/
		__proto.useSKill=function(msg){
			GameSocket.sendClientMsg(msg);
		}

		/**
		*移动消息
		*@param msg
		*/
		__proto.sendMove=function(msg){
			GameSocket.sendClientMsg(msg);
		}

		/**
		*离开游戏
		*/
		__proto.leaveGame=function(){
			var cmd=MsgTemplate.createWithClass(CMsgLeaveGame);
			GameSocket.sendClientMsg(cmd);
			cmd.release();
		}

		/**
		*复活
		*@param msg
		*/
		__proto.rebirth=function(msg){
			GameSocket.sendClientMsg(msg);
		}

		/**
		*蓄力
		*@param index
		*/
		__proto.xuli=function(index){
			if (index==0){
				index=3;
			};
			var cmd=MsgTemplate.createWithClass(CMsgReadyBullet);
			cmd.readyState=1;
			cmd.skillIndex=index;
			GameSocket.sendClientMsg(cmd);
		}

		__proto.hearBeat=function(msg){
			GameSocket.sendClientMsg(msg);
		}

		__proto.initServer=function(ip,port,callback){
			GameSocket.I.connect(ip,port,Method.isSSL());
			GameSocket.I.once("serverSucess",this,this.open,[callback]);
			GameSocket.I.autoFlush=true;
		}

		__proto.guideStep=function(msg){
			GameSocket.sendClientMsg(msg);
		}

		/*INTERFACE laya8.client.player.game.IBattleMsg */
		__proto.beginUpdate=function(){}
		/*INTERFACE laya8.client.player.game.IBattleMsg */
		__proto.chooseSkill=function(select){
			GameSocket.sendClientMsg(select);
		}

		/*INTERFACE laya8.client.player.game.IBattleMsg */
		__proto.pauseTime=function(msg){
			GameSocket.sendClientMsg(msg);
		}

		__proto.continueTime=function(msg){
			GameSocket.sendClientMsg(msg);
		}

		/*INTERFACE laya8.client.player.game.IBattleMsg */
		__proto.petAttack=function(msg){
			GameSocket.sendClientMsg(msg);
		}

		/*INTERFACE laya8.client.player.game.IBattleMsg */
		__proto.goAway=function(msg){
			GameSocket.sendClientMsg(msg);
		}

		__proto.open=function(callback){
			callback.run();
		}

		__static(RealServer,
		['INSTANCE',function(){return this.INSTANCE=new RealServer();}
		]);
		return RealServer;
	})()


	//class tiledui.scene.Scene1UI
	var Scene1UI=(function(){
		function Scene1UI(){
			this.bGLayer=null;
			this.objLayer=null;
			this.mapLayer=null;
			this.topLayer=null;
			this.tiledMap=null;
			this.width=NaN;
			this.height=NaN;
			this.destroyed=false;
			this._mapUrl=null;
			this.dynamicObjByGid={};
			this.mainTex=null;
			this._callBack=null;
			this.mapArr=null;
			this.allItems=null;
			this.airebirthObj=null;
			this.rebirthObj=null;
		}

		__class(Scene1UI,'tiledui.scene.Scene1UI');
		var __proto=Scene1UI.prototype;
		__proto.init=function(arr,callback){
			this.mapLayer=this.mapLayer||new Sprite();
			this.objLayer=this.objLayer||new Sprite();
			this.topLayer=this.topLayer||new Sprite();
			this._callBack=callback;
			this.tiledMap=this.tiledMap||new TiledMap();
			if (this._mapUrl !=arr[0].url){
				this._mapUrl=arr[0].url;
				var texture=Laya.loader.getRes(arr[1].url);
				this.mainTex=texture;
				this.tiledMap.autoCache=true;
				this.tiledMap.autoCacheType="normal";
				this.tiledMap.enableMergeLayer=true;
				if (Render.isWebGL){
					this.tiledMap.cacheAllAfterInit=true;
				}
				this.tiledMap.removeCoveredTile=true;
				var rect=Player.I._viewportRect;
				this.tiledMap.createMap(this._mapUrl,new Rectangle(0,0,rect.width,rect.height),Handler.create(this,this.onComplete,[true]),null,new Point(288,288));
			}
			else{
				this.onComplete(false);
			}
		}

		__proto.onComplete=function(bool){{
				this.bGLayer=this.tiledMap._mapSprite;
			}
			this.width=this.tiledMap.width;
			this.height=this.tiledMap.height;{
				this.bGLayer.addChildAt(this.mapLayer,1);
			}
			this.bGLayer.addChild(this.topLayer);
			this.bGLayer.mouseEnabled=false;
			var mapdata=this.getLayerDataByName("baseLayer");
			var i=0;
			var len=0;
			if (bool){
				this.mapArr=mapdata.data.slice();
				var mapStr=mapdata.properties.map;
				var ex=new RegExp("\\d+","g");
				var temp=mapStr.match(ex);
				var map=[];
				if (temp){
					for (i=0;i < temp.length;i+=2){
						map[temp[i]]=temp[i+1];
					}
				}
				for (i=0,len=this.mapArr.length;i < len;i++){
					this.mapArr[i]=map[this.mapArr[i]];
				}
			}
			Collision.I.init(this.tiledMap.tileWidth,this.tiledMap.tileHeight,this.tiledMap.numColumnsTile,this.tiledMap.numRowsTile,this.mapArr);
			this._callBack !=null && this._callBack.run();
		}

		__proto.getLayerDataByName=function(layerName){
			var _jsonData=this.tiledMap._jsonData;
			var tLayerArray=_jsonData.layers;
			for (var tLayerLoop=0;tLayerLoop < tLayerArray.length;tLayerLoop++){
				var tLayerData=tLayerArray[tLayerLoop];
				if (tLayerData.name==layerName){
					return tLayerData;
				}
			}
			return null;
		}

		__proto.getObjArray=function(force){
			if (!this.allItems){
				var _jsonData=this.tiledMap._jsonData;
				this.allItems=[];
				var obj;
				var tilesets=_jsonData.tilesets;
				var gw=this.tiledMap.tileWidth;
				var gh=this.tiledMap.tileHeight;
				for (var i=0;i < tilesets.length;i++){
					obj=tilesets[i];
					if (!obj.properties)continue ;
					this.dynamicObjByGid[obj.firstgid]=obj.properties;
					var gidObj=obj.properties.spriteInMapGid;
					if (gidObj){
						var arr=gidObj.split(",");
						var a=0 | this.mainTex.width / gw;
						var y=0 | arr[0] / a;
						var x=arr[0] % a;
						obj.properties.tex=Texture.createFromTexture(this.mainTex,x*gw+1,y*gh+1,arr[1]*gw-2,arr[2]*gh-2);
					}
				}
				this.allItems[-1]=this.initDynaimicObjLayer("");
				for (i=0;i <=20;i++){
					var result=this.initDynaimicObjLayer(i+"");
					if (result)this.allItems[i]=result;
				}
			}
			return this.allItems[force]||this.allItems[-1];
		}

		__proto.initDynaimicObjLayer=function(force){
			var dynamicObjLayer=this.getLayerDataByName("dynamicObjLayer"+force);
			if (!dynamicObjLayer)return null;
			var allItems=[];
			var itemsData;
			var items;
			var itemsList=dynamicObjLayer.objects;
			for (var j=0;j < itemsList.length;j++){
				itemsData={};
				items=itemsList[j];
				itemsData.id=this.dynamicObjByGid[items.gid].id;
				itemsData.gid=items.gid;
				itemsData.x=items.x;
				itemsData.y=items.y;
				if (this.dynamicObjByGid[items.gid].needChgY==true){
					itemsData.y-=items.height;
				}
				itemsData.posId=j+1;
				if (this.dynamicObjByGid[items.gid].sameRecreateTime){}
					else{
					allItems.push(itemsData);
				}
			}
			return allItems;
		}

		__proto.clean=function(){
			if (!GameSocket.isAgainConnect){
				this.tiledMap.destroy();
				if (this.mainTex){
					this.mainTex=null;
				}
				this.tiledMap=null;
				this._mapUrl=null;
				this.mapLayer=null;
				this.topLayer=null;
				this.objLayer=null;
			}
			else{
				this.bGLayer.removeSelf();
			}
		}

		/**
		*初始化地图数据
		*/
		__proto.initMapdata=function(data){
			data.width=this.tiledMap.width;
			data.height=this.tiledMap.height;
			var mapPro=this.tiledMap._jsonData.properties;
			var rect=Player.I._viewportRect;
			var sc=Player.I._curMapScale;
			var user=Player.curUser;
			var l=user?user.x:(mapPro.newbieBornX1-26+13.8);
			var r=user?user.y:(mapPro.newbieBornY1-78+27);
			if (this.tiledMap.viewPortX !=0){
				this.tiledMap.changeViewPort(-this.tiledMap.viewPortX ,-this.tiledMap.viewPortY ,rect.width,rect.height);
			}
			else{
				this.bGLayer.scale(sc,sc);
				this.tiledMap.changeViewPort((0 | (l-rect.width / 2 / sc)),(0 | (r-rect.height / 2 / sc)),rect.width / sc,rect.height / sc);
			}
			data.right=data.width-mapPro.right*this.tiledMap.tileWidth;
			data.bottom=data.height-mapPro.bottom*this.tiledMap.tileHeight;
			data.left=mapPro.left*this.tiledMap.tileWidth;
			data.top=mapPro.top *this.tiledMap.tileHeight;
			var c=Collision.I;
			if (mapPro.innerLeft){
				c.left=0|mapPro.innerLeft;
				c.top=0|mapPro.innerTop;
				c.bottom=0|mapPro.innerBottom;
				c.right=0 | mapPro.innerRight;
			}
			else{
				c.left=0|mapPro.left;
				c.top=0|mapPro.top;
				c.bottom=0|mapPro.bottom;
				c.right=0 | mapPro.right;
			};
			var poS=mapPro.jitan;
			if (!poS || !poS.length){
				Player.nvshenPoArr.length=0;
				}else{
				var arr=poS.split(";");
				var s="[";
				for (var i=0,j=arr.length;i < j;i++){
					s+=arr[i]+(i==j-1 ? "" :",");
				}
				s+="]";
				Player.nvshenPoArr=JSON.parse(s);
			}
		}

		__proto.getRebirthObj=function(isTeach){
			if (!this.rebirthObj)
				this.fakeBornInit();
			return isTeach?this.airebirthObj:this.rebirthObj;
		}

		__proto.fakeBornInit=function(){
			this.rebirthObj={};
			this.airebirthObj={};
			var randomPosLayer=this.getLayerDataByName("bornLayer");
			var itemsData;
			var items;
			var dynamicData;
			var itemsList=randomPosLayer.objects;
			for (var k=0;k < itemsList.length;k++){
				items=itemsList[k];
				dynamicData=this.dynamicObjByGid[items.gid];
				itemsData={};
				itemsData.id=dynamicData.id;
				itemsData.type=dynamicData.type;
				if (items.properties){
					itemsData.aiData=items.properties.aiData;
				}
				itemsData.x=items.x;
				itemsData.y=items.y;
				if (!this.rebirthObj[itemsData.id]){
					this.rebirthObj[itemsData.id]=[];
				}
				this.rebirthObj[itemsData.id].push(itemsData);
				if (itemsData.type){
					if (!this.rebirthObj[itemsData.type]){
						this.rebirthObj[itemsData.type]=[];
					}
					this.rebirthObj[itemsData.type].push(itemsData);
				}
			};
			var aibornLayer=this.getLayerDataByName("aibornLayer");
			itemsList=aibornLayer.objects;
			for (var l=0;l < itemsList.length;l++){
				items=itemsList[l];
				dynamicData=this.dynamicObjByGid[items.gid];
				itemsData={}
				itemsData.id=dynamicData.id;
				if (items.properties){
					itemsData.aiData=items.properties.aiData;
					itemsData.sequence=items.properties.sequence;
				}
				itemsData.x=items.x;
				itemsData.y=items.y;
				if (!this.airebirthObj[itemsData.id]){
					this.airebirthObj[itemsData.id]=[];
				}
				this.airebirthObj[itemsData.id].push(itemsData);
			}
			var _arr;
			for(var $each__arr in this.airebirthObj){
				_arr=this.airebirthObj[$each__arr];
				_arr.sort(compare=function(a,b){
					return (a.sequence-b.sequence);
				});
			}
		}

		return Scene1UI;
	})()


	/**
	*场景中雪花的处理
	*@author dongketao
	*/
	//class laya8.client.player.ItemMathed
	var ItemMathed=(function(){
		var ViewItemRect;
		function ItemMathed(){};
		__class(ItemMathed,'laya8.client.player.ItemMathed');
		ItemMathed.clear=function(){
			ItemMathed._rects={};
			ItemMathed.beforehand_uid=0;
		}

		ItemMathed.create=function(itemData,type){
			(type===void 0)&& (type=0);
			if (!itemData){
				Log_Test.error("create 创建物品时，值为null");
				return;
			}
			if (itemData.itemId==4004){
				laya8.client.player.ItemMathed.createCake(itemData);
				return;
			};
			var cfg;
			if (itemData.itemId){
				cfg=ConfigData.elementData[itemData.itemId];
				if (!cfg){Log_Test.error("没有找到物品配置，id:"+itemData.itemId);return;}
					switch(cfg.classID){
					case 12:
					case 14:
					case 15:
					laya8.client.player.ItemMathed.createCake(itemData);
					return;
					default :
					break ;
				}
			};
			var vo=ConfigData.mapPosidData[itemData.posId];
			if (!vo){
				Log_Test.error("没有找到物品配置，id:"+JSON.stringify(itemData));
				return;
			}
			cfg=cfg||ConfigData.elementData[vo.id];
			if (!cfg){Log_Test.error("没有找到物品配置，id:"+vo.id);return;};
			var netObjInPool=Player.I.posidObj[itemData.posId];
			if (!netObjInPool){Log_Test.error("没有预创建物品，posid:"+itemData.posId);return;};
			var netObj=Player.I.newNetObject(null,cfg.classID,itemData.uid,netObjInPool);
			if (!netObj){Log_Test.error("netObj=null");return;}
				netObj.tiledGid=itemData.gid;
			if (cfg.classID==25){
				var tt=(itemData instanceof ItemData )? itemData.invincibleLeftTime :(cfg).invincibleTime;
				var pobj=netObj;
				if(tt>0){
					pobj.changStat && pobj.changStat();
					pobj.ysScale=0;
					pobj.xsScale=0;
				}
			}
			if(cfg.classID !=4 && cfg.classID !=6)
				netObj.zOrder=netObj.y+(cfg.zOrder ? cfg.zOrder :netObj.height);
			netObjInPool || netObj.createView(cfg.sourceID,cfg.type);
			netObj.refreshTex();
			netObj.hp=itemData.bloodVal;
			netObj.visible=true;
			ItemMathed.releaseItemData(itemData);
		}

		ItemMathed.releaseItemData=function(obj){
			delete ItemMathed._ItemDataDic[obj.uid];
		}

		ItemMathed.beforehand=function(vo){
			var cfg=ConfigData.elementData[vo.id];
			if (vo.posId===undefined)return;
			if (!cfg)return;
			if (cfg.classID==27)return;
			var key="ITEM:"+cfg.sourceID+"/"+cfg.type+"/"+cfg.classID;
			var netObjInPool=Pool.getItem(key);
			var netObj=netObjInPool || (new (ClassLib.getClassByID(cfg.classID))(ItemMathed.beforehand_uid--));
			netObj.destroyed=false;
			netObj.visible=false;
			netObj.parent=null;
			netObj.pos(vo.x,vo.y,true);
			netObj._size(cfg.w,cfg.h);
			netObj.itemid=cfg.id;
			netObj.type_=cfg.type;
			netObj.tiledGid=vo.gid;
			netObj._classid=cfg.classID;
			netObj.setCfg(cfg);
			netObj.poolID=key;
			netObjInPool || netObj.createView(cfg.sourceID,cfg.type);
			netObj.refreshTex();
			Player.I.posidObj[vo.posId]=netObj;
		}

		ItemMathed.createCake=function(itemData){
			var cfg=ConfigData.elementData[itemData.itemId];
			var key="ITEM:"+cfg.sourceID+"/"+cfg.type+"/"+cfg.classID;
			var netObjInPool=Pool.getItem(key);
			var netObj=netObjInPool || (new (ClassLib.getClassByID(cfg.classID))(itemData.uid));
			netObj.tiledGid=itemData.gid;
			netObj.destroyed=false;
			netObj.visible=false;
			netObj.parent=null;
			netObj.pos(itemData.x,itemData.y);
			netObj._size(cfg.w,cfg.h);
			netObj.itemid=cfg.id;
			netObj.type_=cfg.type;
			netObj._classid=cfg.classID;
			netObj.setCfg(cfg);
			netObj.poolID=key;
			netObj.zOrder=netObj.x+netObj.height;
			netObjInPool || netObj.createView(cfg.sourceID,cfg.type);
			netObj.refreshTex();
			netObj.visible=true;
			Player.I.newNetObject(key,cfg.classID,itemData.uid,netObj);
		}

		ItemMathed._rects={};
		ItemMathed._ItemDataDic={};
		ItemMathed.beforehand_uid=0;
		__static(ItemMathed,
		['_I',function(){return this._I=new ItemMathed();}
		]);
		ItemMathed.__init$=function(){
			//class ViewItemRect
			ViewItemRect=(function(){
				function ViewItemRect(){
					this.items=[];
				}
				__class(ViewItemRect,'');
				var __proto=ViewItemRect.prototype;
				__proto.createWithView=function(){
					if (this.items.length < 1)return true;
					var isbreak=false;
					var i=this.items.length;
					var tm=0,loopStartTm=Laya.timer.currTimer;
					for (;i>0;i--){
						var itemID=this.items[i-1];
						var item=ItemMathed._ItemDataDic[itemID];
						if (!item)continue ;
						if (!Player.I.netObjects[item.uid]){
							ItemMathed.releaseItemData(item);
							continue ;
						}
						ItemMathed.create(item,1);
						if (((ViewItemRect._createCount++)% 3)===0){
							if (ViewItemRect._createCount>6 && (((tm=Laya.timer.currTimer)-ViewItemRect.startTime))> 4 && (tm-loopStartTm)>8){
								isbreak=true;
								break ;
							}
						}
					}
					this.items.length=i;
					return !isbreak;
				}
				ViewItemRect.startTime=NaN
				ViewItemRect._createCount=0;
				return ViewItemRect;
			})()
		}

		return ItemMathed;
	})()


	/**
	*...
	*@author lifei
	*/
	//class laya8.client.player.menubtn.menuBtn
	var menuBtn=(function(){
		function menuBtn(){
			this.id=0;
			this.name=null;
			this.btnName=null;
			this.need=0;
		}

		__class(menuBtn,'laya8.client.player.menubtn.menuBtn');
		return menuBtn;
	})()


	//class laya8.client.player.net.MsgManager
	var MsgManager=(function(){
		function MsgManager(){
			this._startTime=0;
			this._selfID=0;
			this._selfTeamId=0;
			this._nameList={};
			this._behitList={};
			this._bulletList={};
			this._teamList={};
			this._killList={};
			this.dlzd=null;
			this._msgArray=[];
			this._isBlock=false;
			this._preDoTime=0;
			this.worldStr="<span style='font-size:20px;bold:true;color:{0};align:center'>{1}</span><span style='font-size:20px;color:#ffffff;align:center'>:{2}</span>";
			this._xianzhiTime=5;
			this.no50Count=0;
			this.countFPS=0;
			this.skillCache=[];
			this.preCount=0;
			this._msgNum=0;
			this._curVec=null;
			this.delObjs={};
			this.updateScoreCount=0;
			this.tempDelSnowUIDObj={};
			this._isFirstBlood=false;
			this.battle=new Battle();
			this._imgs=[];
		}

		__class(MsgManager,'laya8.client.player.net.MsgManager');
		var __proto=MsgManager.prototype;
		Laya.imps(__proto,{"laya8.client.player.IActive":true})
		__proto.start=function(){
			Player.I.onMe(this);
			this.battle.begin();
			this._isFirstBlood=false;
			this._nameList={};
			this._behitList={};
			this._teamList={};
			this._killList={};
			this._bulletList={};
			MsgManager.myTeam.lists.length=0;
			MsgManager.foe.player=null;
			MsgManager.nOne.player=null;
		}

		__proto.onEnd=function(){
			MsgManager.isInRoom=false;
			this._msgArray.length=0;
			this._isFirstBlood=false;
			this._nameList={};
			this._behitList={};
			this._teamList={};
			this._killList={};
			this._bulletList={};
			MsgManager.myTeam.lists.length=0;
			MsgManager.foe.player=null;
			MsgManager.nOne.player=null;
			this.delObjs={};
			this.no50Count=0;
			this.countFPS=0;
			this._imgs.length=0;
		}

		__proto.addStdMsg=function(data){
			this.onMessager(data);
		}

		__proto._onMsgUpdate=function(){
			if (this._msgArray.length < 1){
				this._isBlock=false;
				return;
			}
			if (MsgManager.isInRoom && !Player.isMapInit && !GameSocket.isAgainConnect){
				this._isBlock=true;
				Laya.timer.frameOnce(1,this,this._onMsgUpdate);
				return;
			}
			this._preDoTime=Laya.timer.currTimer;
			var data;
			this._isBlock=false;
			var dealIndex=0;
			while (true){
				data=this._msgArray[dealIndex];
				switch(data.msgID){
					case SMsgLoginRes.MSGID:this.loginGame(data);break ;
					case SMsgEnterRoom.MSGID:this.enterRoom(data);break ;
					case SMsgUserAddView.MSGID:this.userAddView(data.userData);data.release();break ;
					case SMsgTalkAuthority.MSGID:this.onRoleTalk(data);break ;
					case SMsgItemAppear.MSGID:this.itemAppear(data);break ;
					case SMsgItemPosAppear.MSGID:this.itemPosAppear(data);break ;
					case SMsgCBullet.MSGID:this.createBullet(data);break ;
					case SMsgGameEndFree.MSGID:
					case SMsgGameEndTeam.MSGID:
						this.gameEnd(data);break ;
					case SMsgTest.MSGID:this.testrace(data);break ;
					case SMsgUserMove.MSGID:this.userMove(data);break ;
					case SMsgControlBullet.MSGID:this.bulletMove(data);break ;
					case SMsgUserDeltaMove.MSGID:this.userMoveDeta(data);break ;
					case SMsgItemDisappear.MSGID:this.itemDisappear(data);break ;
					case SMsgUlimitedRound.MSGID:this.updateEndless(data);break ;
					case SRankListRes.MSGID:this.updateScore(data);break ;
					case SMyRankListRes.MSGID:this.updateMyScore(data);break ;
					case SMsgLevelUp.MSGID:this.updateLevel(data);break ;
					case SMsgUserOffline.MSGID:this.userOffline(data);break ;
					case CMsgHeartBeatRes.MSGID:this.getHeartBeat(data);break ;
					case SMsgReadyBullet.MSGID:this.roleXuli(data);break ;
					case SMsgChat.MSGID:this.testRoleChat(data);break ;
					case SMsgDelSnorw.MSGID:this.otherDelSnow(data);break ;
					case SMsgAreaCollision.MSGID:this.areaCollision(data);break ;
					case SMsgBombAttackResult.MSGID:this.selfAttackResult(data);break ;
					case SMsgUserSkillEffect.MSGID:this.onDebuff(data);break ;
					case SMsgChgProperty.MSGID:this.onSelfPropertyChg(data);break ;
					case SMsgDying.MSGID:this.onDying(data);break ;
					case SMsgSelfChgProperty.MSGID:this.onPropertyChg(data);break ;
					case SMsgRandomSkill.MSGID:this.onSelfRandomSkill(data);break ;
					case SMsgSelectActiveSkills.MSGID:this.onSelectActiveSkills(data);break ;
					case SMsgBattleInfo.MSGID:this.onMsgBattleInfo(data);break ;
					case SMsgUseSkillResult.MSGID:this.onUserSKillResult(data);break ;
					case SMsgAddDynamicItem.MSGID:this.onDynamicShow(data);break ;
					case SMsgAchieveChg.MSGID:this.onAchieveChg(data);break ;
					case SMsgSimpleBattleInfo.MSGID:this.onSimpleBattleInfo(data);break ;
					case SMsgRoomUserList.MSGID:this.onRoomUserList(data);break ;
					case SMsgCollisionResult.MSGID:this.onCollsionResult(data);break ;
					case SMsgCloud.MSGID:this.onMsgCloud(data);break ;
					case SMsgTimeRatio.MSGID:this.onHareChg(data);break ;
					case SMsgCombinedMsg.MSGID:this.onCombineMsg(data.msgCombine);data.release();break ;
					case SMsgShowCustomGamePanel.MSGID:this.onShowCustomGamePanel(data);break ;
					case SMsgAskUserToChangePosition.MSGID:this.onAskUserToChangePosition(data);break ;
					case SMsgUserEnterCustomRoom.MSGID:this.onUserEnterCustomRoom(data);break ;
					case SMsgUserLeftCustomRoom.MSGID:this.onUserLeftCustomRoom(data);break ;
					case SMsgTeamAvatar.MSGID:this.onTeamAvatarChg(data);break ;
					case SMsgBeKicked.MSGID:this.onSMsgBeKicked(data);break ;
					case SMsgUserChangePosition.MSGID:this.onUserChangePosition(data);break ;
					case SMsgSwitchPositionResult.MSGID:this.onSwitchPositionResult(data);break ;
					case SMsgChgUserState.MSGID:this.onChgUserState(data);break ;
					case SMsgLoadCustomResource.MSGID:this.onLoadCustomResource(data);break ;
					case SMsgQueenChg.MSGID:this.onQueenChg(data);break ;
					case SMsgRankListQueen.MSGID:this.onRankListQueen(data);break ;
					case SMsgGameEndQueen.MSGID:this.onGameEndQueen(data);break ;
					case SMsgRankListGem.MSGID:this.onRankListGem(data);break ;
					case SMsgGameEndGem.MSGID:this.onGameEndGem(data);break ;
					case SMsgUserHitMove.MSGID:this.onUserHitMove(data);break ;
					case SMsgUserStartHitMove.MSGID:this.onUserStartHitMove(data);break ;
					case SMsgSelfExplode.MSGID:this.onBaoZha(data);break ;
					case SMsgUserFlashMove.MSGID:this.onUserFlashMove(data);break ;
					case SMsgOpenBattleBox.MSGID:this.onPropBox(data);break ;
					case SMsgAddJumpItem.MSGID:this.onAddJumpItem(data);break ;
					case SMsgBearAttack.MSGID:this.onBearAttact(data);break ;
					case SMsgShowTan.MSGID:this.onShowTan(data);break ;
					case SMsgStartGemDown.MSGID:this.onStartGemDown(data);break ;
					case SMsgModePlayTimes.MSGID:this.onGetPlayTimes(data);break ;
					case SMsgStuckMove.MSGID:this.onStuckMove(data);break ;
					case SMsgEndRabitChange.MSGID:this.onEndRabitChange(data);break ;
					case SMsgGhostChange.MSGID:this.onGhostChange(data);break ;
					case SMsgBroadcastSkillStatus.MSGID:this.onBroadcastSkill(data);break ;
					case SMsgSkillSlot.MSGID:this.onSMsgSkillSlot(data);break ;
					case SMsgFoodCooked.MSGID:this.onPropShow(data);break ;
					case SMsgRoomResidualTime.MSGID:this.onRoomResidualTime(data);break ;
					case SMsgInitBattleTask.MSGID:this.onInitBattleTask(data);break ;
					case SMsgSelectSkillResult.MSGID:this.onMsgSelectSkillResult(data);break ;
					case SMsgOwnPassiveSkill.MSGID:this.onMsgOwnPassiveSkill(data);break ;
					case SMsgFightSpeak.MSGID:this.onFightSpeak(data);break ;
					case SMsgBroadcastBuffStatus.MSGID:this.onMsgBroadcastBuffStatus(data);break ;
					case SMsgFriendJoin.MSGID:this.onFriendEnter(data);break ;
					case SMsgChgBulletTarget.MSGID:this.onChangeTarget(data);break ;
					case SMsgAttackSnowHouseModeEnd.MSGID:this.onAttactHouseEnd(data);break ;
					case SMsgTrainingModeEnd.MSGID:this.onTrainingEnd(data);break ;
					case SMsgUpdateTrainProgress.MSGID:this.onUpdateTrainPro(data);break ;
					case SMsgContinueTime.MSGID:this.onContinueTime(data);break ;
					case SMsgHostedRobot.MSGID:this.onHostedRobot(data);break ;
					case SMsgSkillEffect.MSGID:this.onSkillEffect(data);break ;
					case SMsgTrainingModeEnd.MSGID:this.onTrainingEnd(data);break ;
					}
				dealIndex++;
				if (this.preCount==Laya.stage._renderCount){
					this._msgNum++;
				}
				else{
					this.preCount=Laya.stage._renderCount;
					this._msgNum=1;
				}
				if (dealIndex >=this._msgArray.length){
					break ;
				}
			}
			this._msgArray.length=0;
		}

		__proto.onTeamAvatarChg=function(dat){
			NotifyCenter.I.event("onTeamAvtor",[dat])
		}

		__proto.onChgUserState=function(data){
			NotifyCenter.I.event("onChgUserState",[data]);
		}

		//return true;
		__proto.onSkillEffect=function(data){
			var role=Player.I.netObjects [data.uid];
			if (role){
				var arr=ConfigData.skillCfg[data.skillId].attEffect;
				var id=0;
				if (arr && arr.length > 0){
					id=arr[0];
				}
				if (data.angle==-1){
					SkillManger.end(id,role,arr);
				}
				else if(id>0){
					SkillManger.start(id,role,data.x,data.y,data,arr);
				}
			}
		}

		__proto.onHostedRobot=function(data){
			NpcManger.beginControl(data.currAiGameUIDs);
		}

		__proto.onFriendEnter=function(data){
			var role=Player.I.roleObjectsBySelfId [data.gameUID];
			if(role){
				GamingView.I.hideTips();
				if (enumRoomType.isTeam())
					GamingView.I.showTips("你的好友"+role.shortName+"加入了"+ConfigData.teamDataCfg[role.teamId].name[0]+"队！");
				else
				GamingView.I.showTips("你的好友"+role.shortName+"加入了游戏！");
			}
		}

		__proto.onMsgBroadcastBuffStatus=function(data){
			var user=Player.I.netObjects [data.userUid];
			if (user){
				user.changeBuffer&&user.changeBuffer(data.buffType,data.state);
			}
			data.release();
		}

		/**
		*战斗短语
		*@param object
		*/
		__proto.onFightSpeak=function(data){
			var curUser=Player.I.getNetObjByID(data.uid);
			if (!curUser || !ConfigData.teamDataCfg[curUser.teamId])
				return;
			if (curUser.bindJt){
				var jtt=curUser.bindJt.getChildByName("jtt");
				var guang=curUser.bindJt.getChildByName("guang");
				if (jtt.visible || guang.visible)
					return;
				jtt.visible=true;
				guang.visible=true;
				curUser.bindJtDh.play();
				Laya.timer.once(5000,this,function(){
					jtt.visible=false;
					guang.visible=false;
					curUser.bindJtDh.stop();
				})
			}
			GamingView.I.speakList.visible=true;
			Laya.timer.clear(this,this.hideSpeakList);
			var key=data.worldKey;
			var obj=ConfigData.speakWorld[key];
			var arr=GamingView.I.speakList.array;
			var uName;
			Laya.timer.once(obj.keep,this,this.hideSpeakList);
			if(data.type==2){
				uName=curUser.shortName+"(全部)";
				}else{
				uName=curUser.shortName;
			}
			if (!GamingView.soundCtr[key] && obj.worldSound){
				GamingView.soundCtr[key]=true;
				SoundManager.playSound(obj.worldSound,1,Handler.create(this,this.soundEnd,[key]));
			}
			if(ConfigData.teamDataCfg[curUser.teamId]){
				var str=this.worldStr.replace("{0}",ConfigData.teamDataCfg[curUser.teamId].color).replace("{1}",uName).replace("{2}",obj.worldVal);
				arr.push(str);
			}
			if (arr.length > 10)
				arr.shift();
			GamingView.I.speakList.array=arr;
			if (arr.length > 5){
				if(!GamingView.I.speakList.scrollBar)
					GamingView.I.speakList.vScrollBarSkin="";
				GamingView.I.speakList.scrollBar.value=GamingView.I.speakList.scrollBar.max;
			}
		}

		__proto.getJianTouByName=function(){}
		/**
		*隐藏战斗短语列表
		*/
		__proto.hideSpeakList=function(){
			GamingView.I.speakList.visible=false;
		}

		/**
		*声音播放
		*/
		__proto.soundEnd=function(key){
			GamingView.soundCtr[key]=false;
		}

		__proto.onMsgOwnPassiveSkill=function(data){
			GamingView.I.passiveSkills.rebuild(data);
			data.release();
		}

		__proto.onMsgSelectSkillResult=function(data){
			GamingView.I.passiveSkills.onSeletResult(data);
			data.release();
		}

		/**
		*战斗内任务
		*@param data
		*
		*/
		__proto.onInitBattleTask=function(dat){
			RoleCenter.I.battTask=dat;
			RoleCenter.I.event("battleUpdateTask");
		}

		__proto.onPropShow=function(dat){
			var obj=Player.I.getNetObjByID(dat.uid);
			obj&&(obj.removeFlag=false);
		}

		//dat.
		__proto.onRoomResidualTime=function(data){
			GameSocket.I.event("initGameTime",[data.maxLifeTime,true]);
			data.release();
		}

		__proto.onSMsgSkillSlot=function(data){
			GamingView.I.updateStack(data);
		}

		/**
		*幽灵变化
		*@param data
		*/
		__proto.onGhostChange=function(data){
			var user=Player.I.roleObjectsBySelfId [data.gameUID];
			user && user.setGhost(! !data.state);
		}

		/**
		*服务器发送过来的表情
		*@param data
		*/
		__proto.onMoodUpdate=function(data){
			var user=Player.I.roleObjectsBySelfId [data.gameUID];
			if (user){
				user.userTopView.moodUpdate(data.expressionId);
				user.userTopView.moodId=data.expressionId;
			}
			data.release();
		}

		/**
		*
		*@param data
		*/
		__proto.onAttactHouseEnd=function(data){
			var _$this=this;
			if (!data){
				TipsView.showMe("common/error.png","结算数据为空！");
			}
			this.battle.end();
			MsgManager.isInRoom=false;
			Loading.I.isLogin=false;
			SnowUtils.updateBattle();
			GameSocket.closeByWhere=2;
			GameSocket.isForcein=0;
			AttackEndPage.showMe(true,enumRoomType.nowType,data,Handler.create(this,function(){
				_$this.endGame(enumRoomType.nowType);
			}));
		}

		// skillRefresh();
		__proto.onTrainingEnd=function(data){
			var _$this=this;
			if (!data){
				TipsView.showMe("common/error.png","结算数据为空！");
			}
			this.battle.end();
			MsgManager.isInRoom=false;
			Loading.I.isLogin=false;
			SnowUtils.updateBattle();
			GameSocket.closeByWhere=2;
			GameSocket.isForcein=0;
			TrainingEndPage.showMe(true,enumRoomType.nowType,data,Handler.create(this,function(){
				_$this.endGame(enumRoomType.nowType);
			}));
		}

		__proto.onUpdateTrainPro=function(data){
			if (!data)return;
		}

		//GuideTrain.onUpdatePro(data.progress);
		__proto.onContinueTime=function(data){}
		/**广播的技能使用成功消息*/
		__proto.onBroadcastSkill=function(data){
			var user=Player.I.getNetObjByID(data.userUid);
			if ((user instanceof laya8.client.player.game.ActorObject )){
				user && user.onUseSkill(data.skillId,data.state);
			}
			else{
				user&&CrazySnowball.reportError("idError",'onUseSkill:'+user.__className+'classid:'+user._classid);
			}
		}

		__proto.onEndRabitChange=function(data){
			var owner;
			owner=Player.I.getNetObjByID(data.uid);
			if (!owner || owner._classid !=1)return;
			owner.changeSkin(owner.itemid,true,true);
		}

		/**进入战斗获取相关的数据**/
		__proto.onGetPlayTimes=function(data){
			var gv=GamingView.I;
			gv.battleData=data;
			gv.haveSkill.visible=data.unlockSkill;
		}

		//狙击感叹号
		__proto.onShowTan=function(data){
			var role=Player.I.netObjects [data.uid];
			if (role&&role.self!=0){
				if((role instanceof laya8.client.player.game.ActorObject ))role.onjuji();
			}
		}

		__proto.onStartGemDown=function(dat){
			GamingView.I.viewInfo.showShuiJingBaoShi();
		}

		/**死亡重连和重连后死亡*/
		__proto.onDying=function(data){
			GamingView.I.visible=false;
			Player.I.grayScene(true);
			if (!GameAgainView.I||!GameAgainView.I.parent){
				var foe=Player.I.roleObjectsBySelfId[data.deadUserGameUID];
				laya8.client.player.net.MsgManager.foe.player=foe;
				GameAgainView.killerName=foe?foe.userName:"未知角色";
				GameAgainView.lastScore=data.deadLostScore;
				GameSocket.I.event("playerRestart");
			}
			data.release();
			return true;
		}

		__proto.onAddJumpItem=function(data){
			var list=data.itemList;
			var sz=list.length;
			var ele;
			if (list && sz > 0){
				var user;
				for (var i=0;i < sz;i++){
					var t=list[i];
					ele=ConfigData.elementData[t.itemID];
					if (this.delObjs[t.uid]){
						delete this.delObjs[t.uid];
						return false;
					};
					var key="ITEM:"+ele.sourceID+"/"+ele.type+"/"+ele.classID;
					var netObjInPool=Pool.getItem(key);
					var b=Player.I.newNetObject(key,ele.classID,t.uid,netObjInPool);
					if (!b)continue ;
					b.poolID=key;
					b._setXY(t.x,t.y);
					b.itemid=t.itemID;
					b.type_=ele.type;
					b.setCfg(ele);
					b.createView(ele.sourceID,ele.type);
					switch(b._classid){
						case 19:;
							var px=ele.w/2+ele.offX;
							var py=ele.h/2+ele.offY;
							b._setXY(t.x-px,t.y-py);
							b.scale(t.scale,t.scale);
							if (enumRoomType.nowType==100&&ele.id==4128){
								GuideMgrI.fuckComplete(4,t);
							}
							break ;
						case 23:
							(b).setScale=0.25;
							(b).setAlpha=0.5;
						default :
							break ;
						}
					b._setXY(t.x,t.y);
					if (!Player.I.netObjects[b.uid]){
						b.destroy();
					}
				}
			}
			data.release();
			return true;
		}

		/**熊攻击人的消息*/
		__proto.onBearAttact=function(data){
			var bear=Player.I.getNetObjByID(data.bearUid);
			var role=Player.I.getNetObjByID(data.playerUid);
			if (role && bear){
				if (bear._classid==26){
					var v2d=new Vector2D();
					v2d.x=role.x-bear.x;
					v2d.y=role.y-bear.y;
					var angle_=Math.atan2(v2d.y,v2d.x);
					angle_+=22.5;
					angle_ %=360;
					bear.animeAttck(0|(angle_ / 45));
				}
				if(role._classid==1)
					role.addYunEff(ConfigData.gameCfg["roleYunByBear"]);
			}
		}

		__proto.onPropBox=function(data){
			if (!Player.DAOJU){
				data.release();
				return;
			};
			var obj=Player.I.getNetObjByID(data.uid);
			var owner=Player.I.getNetObjByID(data.OwnerUid);
			if (!owner || owner._classid !=1){
				data.release();
				return;
			}
			owner.eatProp(data.boxType);
			GuideMgrI.fuckComplete(1,null);
			switch(data.boxType){
				case 2:
					owner.changeSkin(16,false,true);
					break ;
				case 250001:
					if (owner._xuliLevel){
						owner.propZd=true;
						return;
					}
					break ;
				case 260001:
					if (owner._xuliLevel){
						owner.propZd=true;
						return;
					}
					break ;
				default :
					break ;
				}
			data.release();
		}

		/**
		*人物移动
		*@param data
		*@return
		*/
		__proto.onUserFlashMove=function(data){
			var obj=Player.I.getNetObjByID(data.uid);
			if (!obj)return true;
			if (obj._classid !=1){
				return false;
			}
			obj.onShuiYi(data.x,data.y);
			return true;
		}

		/**
		*冲撞消息
		*/
		__proto.onUserHitMove=function(data){
			var hitUser=Player.I.netObjects [data.hitUid];
			var behitUser=Player.I.netObjects [data.behitUid];
			var path;
			if (hitUser){
				if (!((hitUser instanceof laya8.client.player.game.RoleObject ))){
					CrazySnowball.reportError("idError",'onUserHitMove_hitUser:'+hitUser.__className+'classid:'+hitUser._classid);
					return true;
				}
				path=hitUser.getPath();
				if (path){
					path.setTo(data.hitx,data.hity);
					path._setNetObjPos(-1);
					path.stop();
				}
				hitUser.stopMove();
				hitUser.onCollision(true);
			}
			if(behitUser){
				if (!((behitUser instanceof laya8.client.player.game.RoleObject ))){
					CrazySnowball.reportError("idError",'onUserHitMove_behitUser:'+behitUser.__className+'classid:'+behitUser._classid);
					return true;
				}
				path=behitUser.getPath();
				if (path){
					path.setTo(data.behitx,data.behity);
					path._setNetObjPos(-1);
					path.stop();
				}
				behitUser.stopMove();
			}
			return true;
		}

		/**
		*
		*@param object
		*/
		__proto.onBaoZha=function(data){
			if (data.success==1){
				var ziBaoUser=Player.I.getNetObjByID(data.uid);
				if (!ziBaoUser)
					Log_Test.error("zi bao de wan jia bucunzai uid"+data.uid);
				else{
					ziBaoUser.ziBaoStart=Laya.timer.currTimer;
					ziBaoUser.ziBaoDjs=data.time*1000;
				}
			}
		}

		/**
		*子弹射墙
		*@param sx 碰撞的x
		*@param sy 碰撞的y
		*@param dx 反弹后的x
		*@param dy 反弹后的y
		*@param t1 爆炸的时间
		*@param t2 反弹移动的时间
		*/
		__proto.rockWall=function(sx,sy,dx,dy,t1,t2){}
		/**
		*更换女王
		*@param data
		*@return
		*/
		__proto.onQueenChg=function(data){
			this.addQueen(data.teamQueen);
			return true;
		}

		__proto.addQueen=function(team){
			for (var i=0,len=team.length;i < len;i++){
				var qdata=team[i];
				ActorObject.QuestList[qdata.teamId]=qdata.queenUID;
			}
		}

		/**
		*女王
		*@param data
		*@return
		*/
		__proto.onGameEndQueen=function(data){
			if (!data){
				TipsView.showMe("common/error.png","结算数据为空！");
			}
			this.battle.end();
			MsgManager.isInRoom=false;
			Loading.I.isLogin=false;
			GameSocket.closeByWhere=2;
			GameSocket.isForcein=0;
			GameResultPage.showMe(true,enumRoomType.nowType,data,Handler.create(this,this._queenGameEnd));
			return true;
		}

		__proto._queenGameEnd=function(data){
			NotifyCenter.I.curGameEndCmd=data;
			this.changeData(data);
			this.endGame(enumRoomType.nowType);
			return;
		}

		__proto.changeData=function(data){
			(data.teamOwnResultList).jsNum="";
			(data.teamOwnResultList).gongxian="贡献冰雪积分"
			for (var i=0;i < data.teamOwnResultList.length;i++){
				var item=data.teamOwnResultList[i];
				item.score=item.queenScore;
				var actor=Player.I.roleObjectsBySelfId [item.id];
				if (actor){
					item.name=actor.userName;
				}
				item.kills="";
			}
		}

		/**
		*通知全部人可以加载资源
		*@param data
		*@return
		*
		*/
		__proto.onLoadCustomResource=function(data){
			NotifyCenter.I.event("onLoadCustomResource",data);
			return true;
		}

		/**
		*交换位置成功回调
		*@param data
		*@return
		*
		*/
		__proto.onSwitchPositionResult=function(data){
			NotifyCenter.I.event("switchPositionResult",data);
			return true;
		}

		/**
		*切换位置回调
		*@param data
		*@return
		*
		*/
		__proto.onUserChangePosition=function(data){
			NotifyCenter.I.event("userChangePosition",data);
			return true;
		}

		/**
		*通知玩家被T掉
		*@param data
		*@return
		*
		*/
		__proto.onSMsgBeKicked=function(data){
			NotifyCenter.I.event("smsgBeKicked",data);
			return true;
		}

		/**
		*通知有玩家离开
		*@param data
		*@return
		*
		*/
		__proto.onUserLeftCustomRoom=function(data){
			NotifyCenter.I.event("userLeftCustomRoom",data);
			return true;
		}

		/**
		*通知其他玩家进入房间
		*@param data
		*@return
		*
		*/
		__proto.onUserEnterCustomRoom=function(data){
			NotifyCenter.I.event("userEnterCustomRoom",data);
			return true;
		}

		/**
		*询问玩家换位置
		*@param data
		*@return
		*
		*/
		__proto.onAskUserToChangePosition=function(data){
			NotifyCenter.I.event("askUserToChangePosition",data);
			return true;
		}

		/**
		*创建房间成功
		*@param data
		*@return
		*
		*/
		__proto.onShowCustomGamePanel=function(dat){
			var fM=UIMgr.getUI(FreeChoose);
			fM.onMatchBack(new Handler(this,mbk=function(f,dt){
				f.netWorkControl && f.netWorkControl.detroy();
				UIMgr.closeUI(FreeChoose);
				FreeMatch.onShowMe(dt);
			},[fM,dat]));
			return true;
		}

		__proto.onCombineMsg=function(dataArray){
			var data;
			for (var i=0,sz=dataArray.length;i < sz;i++){
				data=dataArray[i];
				switch(data.msgID){
					case SMsgUserAddView.MSGID:this.userAddView(data.userData);data.release();break ;
					case SMsgCBullet.MSGID:this.createBullet(data);break ;
					case SMsgAreaCollision.MSGID:this.areaCollision(data);break ;
					case SMsgDelSnorw.MSGID:this.otherDelSnow(data);break ;
					case SMsgItemDisappear.MSGID:this.itemDisappear(data);break ;
					case SMsgUserDeltaMove.MSGID:this.userMoveDeta(data);break ;
					case SMsgChgProperty.MSGID:this.onSelfPropertyChg(data);break ;
					}
			}
			return true;
		}

		/****/
		__proto.onHareChg=function(data){}
		__proto.onMsgCloud=function(data){
			var ele=ConfigData.elementData[data.itemId];
			var key="ITEM:"+ele.sourceID+"/"+ele.type+"/"+ele.classID;
			var netObjInPool=Pool.getItem(key);
			var b=Player.I.newNetObject(key,ele.classID,data.uid,netObjInPool);
			if (!b)return true;
			b.poolID=key;
			b.pos(data.x,data.y);
			b.itemid=data.itemId;
			b.type_=ele.type;
			b.setCfg(ele);
			b.createView(ele.sourceID,ele.type);
			var serverTT=CMsgHeartBeatRes.getServerTime(Browser.now())-(laya8.client.player.net.MsgManager.enterRoomTime+data.msgSendTm);
			(data).pathID=1;
			(data)._curTime=serverTT;
			(data).time=99999999;
			b.path(data);
			(b).speed=data.speed;
			return true;
		}

		__proto.showCollsionResult=function(hitOwner,beHitOwner,angle,add,minus,isCrit){
			if (beHitOwner==null)return;
			var i=0;
			if ((angle >=45 && angle < 135)|| (angle >=225 && angle < 315)){
				i=0;
			}
			else if (angle >=135 && angle < 225){
				i=-1;
			}
			else{
				i=1;
			}
			if (Player.curUser==hitOwner && hitOwner){
				add&&this.flyBullet(add,2,Player.curUser,0);
				this.flyBullet(-minus,2,beHitOwner,i,isCrit);
			}
			else if (Player.curUser==beHitOwner&&hitOwner){
				this.flyBullet(-minus,2,Player.curUser,i,isCrit);
			}
		}

		__proto.onCollsionResult=function(data){
			return;
		}

		__proto.onSimpleBattleInfo=function(data){
			data.ref++;
			GamingView.I.event("onBattleInfoType",data);
			data.release();
		}

		__proto.onAchieveChg=function(data){}
		//}
		__proto._GameEnd=function(data){
			NotifyCenter.I.curGameEndCmd=data;
			MsgManager.isInRoom=false;
			Loading.I.isLogin=false;
			Laya.timer.loop(100,this,this.endGame,[2]);
			this.skillRefresh();
		}

		/**
		*未收到结算消息 直接回到大厅
		*/
		__proto.backHome=function(){
			MsgManager.isInRoom=false;
			GameSocket.closeByWhere=2;
			GameSocket.isForcein=0;
			Loading.I.isLogin=false;
			Laya.timer.once(1000,this,this.endGame,[0]);
			Loading.I.backHome();
		}

		/**
		*女王模式的排行榜
		*/
		__proto.onRankListQueen=function(data){
			GamingView.I.event("onRankQueen",data);
			data.release();
		}

		/**
		*钻石模式的排行榜
		*@param data
		*/
		__proto.onRankListGem=function(data){
			GamingView.I.event("onRankGen",data);
			GameSocket.I.event("updateMinMap",[data.rankList,false]);
			data.release();
		}

		/**
		*钻石
		*@param data
		*@return
		*/
		__proto.onGameEndGem=function(data){
			if (!data){
				TipsView.showMe("common/error.png","结算数据为空！");
			}
			this.battle.end();
			MsgManager.isInRoom=false;
			Loading.I.isLogin=false;
			GameSocket.closeByWhere=2;
			GameSocket.isForcein=0;
			GameResultPage.showMe(true,enumRoomType.nowType,data,Handler.create(this,this._gemGameEnd));
			this.skillRefresh();
			return true;
		}

		__proto._gemGameEnd=function(data){
			NotifyCenter.I.curGameEndCmd=data;
			this.changeData1(data);
			this.endGame(enumRoomType.nowType);
			return;
		}

		__proto.changeData1=function(data){
			(data.teamOwnResultList).jsNum="";
			(data.teamOwnResultList).gongxian="贡献冰晶个数";
			for (var i=0;i < data.teamOwnResultList.length;i++){
				var item=data.teamOwnResultList[i];
				item.score=item.gem;
				var actor=Player.I.roleObjectsBySelfId [item.id];
				if (actor){
					item.name=actor.userName;
				}
				item.kills="";
			}
		}

		/**
		*显示随机出来的物品
		*@param data
		*/
		__proto.onDynamicShow=function(data){
			var list=data.itemList;
			var sz=list.length;
			var ele;
			if (list && sz > 0){
				for (var i=0;i < sz;i++){
					var t=list[i];
					ele=ConfigData.elementData[t.itemID];
					var key="ITEM:"+ele.sourceID+"/"+ele.type+"/"+ele.classID;
					var netObjInPool=Pool.getItem(key);
					var b=Player.I.newNetObject(key,ele.classID,t.uid,netObjInPool);
					if (!b)continue ;
					b.tiledGid=t.gid;
					b.poolID=key;
					b.pos(t.x,t.y);
					b._size(ele.w,ele.h);
					b.itemid=t.itemID;
					b.type_=ele.type;
					b.setCfg(ele);
					b.createView(ele.sourceID,ele.type);
					b.hp=t.bloodVal;
					if (t.scale!=1){
						b.scale(t.scale,t.scale);
					}
					if (t.itemID==4128){
						if (enumRoomType.nowType==100){
							GuideMgrI.fuckComplete(4,t);
						}
					}
					else if (ele.classID==19){
						b.scale(t.scale/1.5,t.scale/1.5);
						b.pos(b.x+ele.offX,b.y+ele.offY,true);
						b._viewSprite.texture=Laya.loader.getRes(b._viewSprite._url);
					}
				}
			}
			data.release();
		}

		/***
		*使用技能结果
		*/
		__proto.onUserSKillResult=function(data){
			GamingView.I.event("onUseSKill",data);
			data.release();
		}

		__proto.onRoomUserList=function(data){
			var userlists=data.userInfos;
			if (!userlists || userlists.length < 1)return;
			for (var i=0,n=userlists.length;i < n;i++){
				var userInfo=userlists [i];
				Player.I.setUserBaseInfo(userInfo);
			}
		}

		/**
		*服务器发送过来的主动技能
		*@param data
		*/
		__proto.onSelectActiveSkills=function(data){
			var user=Player.I.roleObjectsBySelfId [data.userGameUID];
			if (!user)return;
			var skills=data.activeSkill;
			if (skills && skills.length !=0){
				var skillId=NaN;
				skillId=skills[0].skillId;
				var dt=ConfigData.skillCfg[skillId];
				var skName=ConfigData.skillName[skillId];
				if (user==Player.curUser){
					if (data.isEat==1){
						if (user){
							if (enumRoomType.nowType==100){
								if (GuideMgrI.skillTimes[0] < 3 && skillId==170001){
									GuideMgrI.skillTimes[0]+=1;
									user.showQiPao("得到手雷，可越障碍物攻击敌人");
								}
								else if (GuideMgrI.skillTimes[1] < 3 && skillId==120001){
									GuideMgrI.skillTimes[1]+=1;
									user.showQiPao("得到狙击枪，蓄力瞄准可远距离穿墙攻击");
								}
								else if(SnowUtils.chkIsFB()){
									user.showQiPao("Acquire skills "+skName.us);
									}else{
									user.showQiPao("获得技能"+skName.cn);
								}
							}
							else if(SnowUtils.chkIsFB()){
								user.showQiPao("Acquire skills "+skName.us);
								}else{
								user.showQiPao("获得技能"+skName.cn);
							};
							var obj=new TreasureboxObject(-1);
							GamingView.I.addChild(obj);
							obj.createView(skills[0].skillId);
							obj.hidAni(data);
						}
					}
					GamingView.I.event("onSelectSkill",data);
				}
				else{
					for (var i=0;i <skills.length;i++){
						var data1=skills [i];
						user.setSkill(data1.skillIndex,data1.skillId,data1.leftCount);
					}
				}
				if (data.isEat==1){
					if (skillId==280001){
						user.userTopView.setXuliEff(2);
					}
					user.eatProp(skillId%1000000);
				}
			}
		}

		/**
		*热区
		*@param data
		*/
		__proto.onMsgBattleInfo=function(data){
			GamingView.I.event("onBattleInfoType",data);
		}

		__proto.onMessager=function(msg){
			var data=msg;
			if (msg.msgID==SMsgLoginRes.MSGID){
				this._msgArray.length=0;
			}
			this._msgArray.push(msg);
			if (!this._isBlock)this._onMsgUpdate();
		}

		// 登录游戏
		__proto.loginGame=function(data){
			var _$this=this;
			if (data.loginStatus==0){
				alert("登录房间失败！！");
				return true;
			}
			else if (data.loginStatus==2
			||data.loginStatus==3
			||data.loginStatus==4
			||data.loginStatus==5){
				Log_Test.error("登录战斗服务器异常（枚举enumLoginStatus） loginStatus："+data.loginStatus);
				Laya.timer.once(1000,this,function(){
					Loading.I.onEnd();
					this._isBlock=false;
					MsgManager.isInRoom=false;
					_$this.endGame(3);
					Loading.I.isLogin=false;
					TipsView.myCallback=Handler.create(this,function(){
						MenuList.onShowMe();
					});
					TipsView.showMe("",SnowUtils.chkIsFB()?"The current network is abnormal, please click to return.":"当前网络异常，点击返回",1,true,false);
				});
				GameSocket.I.close();
				return true;
			}
			this.battle.startGame(data.sourceID,data.force);
			return true;
		}

		// 进入房间
		__proto.enterRoom=function(data){
			GameSocket.isAgainConnect=false;
			var enterRoomData=data.erData;
			this.battle.enterRoom(enterRoomData);
			MsgManager.SNOWSCALE=1;
			MsgManager.clientEnterTime=Laya.timer.currTimer;
			laya8.client.player.net.MsgManager.enterRoomTime=data.roomStartTime;
			this.tempDelSnowUIDObj={};this.dlzd=this.dlzd|| Laya.loader.getRes("gaming/dlzd.png");
			this._selfID=data.erData.selfID;
			this._selfTeamId=data.erData.teamName;
			if (enumRoomType.isTeam()){
				MsgManager.myTeam.id=data.erData.teamId;
			}
			else{
				MsgManager.myTeam.id=-1;
			}
			MsgManager.isInRoom=true;
			return true;
		}

		//添加
		__proto.addToTeamList=function(o){
			var teamid=o.teamId;
			this._teamList[teamid] || (this._teamList[teamid]=[]);
			this._teamList[teamid].push(o);
		}

		__proto.userAddView=function(data){
			var player=Player.I;
			var tempNo=player.roleObjectsBySelfId[data.selfID];
			if (tempNo){
				Log_Test.error("已经创建过 刪掉他");
				player.roleObjectsBySelfId[data.selfID]=null;
				tempNo.clearDieTimer();
				tempNo.destroy();
				var index=player._autoFind.indexOf(tempNo);
				if (index !=-1)player._autoFind.splice(index,1);
			};
			var cfg=ConfigData.roleData[data.itemId];
			if (!cfg){
				Log_Test.error("找不到配置表信息：",data.itemId);
				return true;
			};
			var group;
			var classID=0;
			var skin=ConfigData.itemData[1000+data.sourceID];
			var rSid=skin?skin.souceID:cfg.sourceID;
			group=cfg.type;
			classID=cfg.classID;
			var key="userAddView:"+cfg.classID;
			var netObjInPool=Pool.getItem(key);
			var role=player.newNetObject(key,classID,data.uid,netObjInPool);
			if (!role){
				return true;
			}
			role.avatorID=data.sourceID;
			role.poolID=key;
			role.itemid=cfg.id;
			role._roleCfg=cfg;
			role.regian=data.regain;
			role.smaxSpeed=data.SmaxSpeed;
			role.Sresistance=cfg.Sresistance;
			role.acceS=cfg.acceS;
			role.pos(data.x,data.y);
			role._size(cfg.w,cfg.h);
			role.size(cfg.w,cfg.h);
			role.scale(data.scale,data.scale);
			role._zOrder=data.y+cfg.h*role.scaleY;
			role.selfID=data.selfID;
			role.self=(data.selfID==this._selfID)? 0 :1;
			role.teamId=data.teamId;
			role.selfTeam=(data.teamName && data.teamName==this._selfTeamId)? 0 :1;
			role.type_=cfg.type;
			role.maxHp=data.maxBloodVal;
			role.hp=data.bloodVal;
			role.level=data.userlevel;
			role.dipanId=!data.quanID?data.quanID:enumSourceViewType.getSourceID(data.quanID+2000);
			if(enumRoomType.isTeam()){
				role.teamNameCfg=(ConfigData.teamDataCfg [data.teamId]);
				}else{
				role.teamNameCfg=null;
			}
			role.path({"pathID":cfg.pathID});
			(role.getPath()).setTo(data.x,data.y);
			role.invincibleTime=data.invincibleLeftTime;
			role.createView(rSid,group);
			if (classID==1){
				this.setActorData(role,data,cfg);
			}
			player.roleObjectsBySelfId[data.selfID]=role;
			return true;
		}

		__proto.setActorData=function(role,data,cfg){
			var userBase=Player.I.getUserBaseInfo(role.selfID);
			if (userBase){
				var gender=(userBase.gender==0)?2:1;
				role.name=userBase.username;
				this._nameList[role.uid]=role.name;
				role.createNameText(userBase.username);
				role.gender=gender;
				var info=userBase.roleInfo;
				if (info){
					if (info.inReadyBullet){
						role.changeXuliState(1);
						role.curS=role.scaleX;
						role.scale(info.scale,info.scale,true);
						role.smaxSpeed=info.SmaxSpeed;
						info.inReadyBullet=0;
					}
					for (var i=0;i < info.activeSkill.length;i++){
						var item=info.activeSkill[i];
						role.setSkill(item.skillIndex,item.skillId,item.leftCount);
					}
					if (userBase.turnRabit !=0){
						role.changeSkin && role.changeSkin(16,false,true);
					}
					else if (userBase.turnSnowMan !=0){
						role.changeSkin && role.changeSkin(100011,true,true);
					}
					else if (userBase.hasOctopus !=0){
						if (role==Player.curUser)GamingView.I.showSnowOctopusEff();
					}
					else if (userBase.hasShield !=0){
						role.addShieldEff();
					}
					if (userBase.wzStatus==1){
						BufferManager.addBuffer(role,0x200,1);
					}
					else if (userBase.wzStatus==2){
						BufferManager.addBuffer(role,0x800,1);
					}
					userBase.roleInfo=null;
				};
				var r=ConfigData.achieveData[userBase.title];
				if(r)role.changeTitle(r.title);
			}
			if (enumRoomType.isTeam()){
				this.addToTeamList(role);
			}
			role.bIsInGlass=role.isInGlass();
			(role)._chgAlphaByGlass();
			role.jifen=data.score;
			if (MsgManager.myTeam && MsgManager.myTeam.id==role.teamId&&data.selfID!=this._selfID){
				MsgManager.myTeam.lists.push(role.selfID);
			}
			if (data.selfID==this._selfID){
				ActorObject.CANXULISCORE=cfg.cannXuliScore;
				Player.curUID=role.uid;
				Player.teamID=role.teamId;
				Player.curUser=role;
				RoleCenter.I.curHeroID=role._roleCfg.id;
				Player.I.grayScene(false);
				this.setNumByLevel(role.level);
				GamingView.I.gameCtrl.stopCtrl();
				GamingView.I.gameCtrl.launch();
				if(enumRoomType.isTeam()){
					GamingView.I.worldList.array=this.getWorldArr();
					if (GamingView.I.worldList.array.length > 5)
						GamingView.I.worldList.vScrollBarSkin="";
				};
				var levelData=ConfigData.LvData[role.level];
				if (levelData){
					Player.I.setNewScale(levelData.visionArea,0);
					ActorObject.BACKDISTANCE=levelData.flashDistance || 0;
				}
				Log_Test.info("对比日志-进入游戏中的性别："+role.gender+"\n对比日志-进入游戏中使用的皮肤"+role._sourceID);
				UIMgr.openUIFight(GamingView,"layer_fight");
				GameSocket.I.event("updateLevel",[data.userlevel,false]);
			}
		}

		//}
		__proto.getWorldArr=function(){
			var obj;
			var result=[];
			for (var key in ConfigData.speakWorld){
				obj={};
				obj.worldVal=ConfigData.speakWorld[key].worldVal;
				obj.worldSound=ConfigData.speakWorld[key].worldSound;
				obj.key=key;
				if (key > 2 && (key-2)!=Player.teamID){
					if(enumRoomType.nowType==enumRoomType.ROOMTYPE_TEAM2V2){
						result.push(obj);
						}else{
						if (key !=6 && key !=7){
							result.push(obj);
						}
					}
				}
			}
			return result;
		}

		__proto.setNumByLevel=function(level){}
		/**角色被打、被杀时说的语句*/
		__proto.onRoleTalk=function(data){
			data.release();
			return true;
		}

		// 创建物品列表
		__proto.itemAppear=function(data){
			this.createItem(data.itemList);
			data.release();
			return true;
		}

		/**显示物品*/
		__proto.itemPosAppear=function(data){
			this.createItem(data.itemList);
			data.release();
			return true;
		}

		__proto.createItem=function(arr){
			for (var i=0;i < arr.length;i++){
				if (this.tempDelSnowUIDObj[arr[i].uid])continue ;
				ItemMathed.create(arr[i]);
			}
		}

		//arr.length=0;
		__proto.onChangeTarget=function(data){
			var bullet=Player.I.netObjects [data.uid];
			if (bullet){
				var path=bullet.getPath();
				path && path.changeTarget && path.changeTarget(data.targetId);
			}
		}

		/**创建子弹**/
		__proto.createBullet=function(data){
			if (this.delObjs[data.uid]){
				data.ref++;
				data.release();
				delete this.delObjs[data.uid];
				return false;
			};
			var cfg;
			var itemid=data.itemId;
			if (itemid==90){
				cfg=ConfigData.elementData[309];
			}
			else if (itemid==100){
				cfg=ConfigData.elementData[310];
			}
			else{
				cfg=ConfigData.elementData[data.itemId];
			}
			if (!cfg)return true;
			var skid=data.skillId % 1000000;
			if (skid !=280001){
				var prefixId=0;
				var key="Bullet:"+cfg.id+"_"+prefixId;
				var netObjInPool=Pool.getItem(key);
				var netObj=Player.I.newNetObject(key,cfg.classID,data.uid,netObjInPool);
				if (!netObj)return true;
				netObj.poolID=key;
				netObj.itemid=cfg.id;
				netObj.pos(data.x,data.y,true);
				netObj._size(cfg.w,cfg.h);
				netObj.type_=cfg.type;
				netObj.coefficient=data.coefficient;
				netObj.hitNum=data.hitNum;
				netObj.skillId=data.skillId;
				netObj.areaLen=data.bombArea;
				netObj.expime=data.downTime;
				data.msgSendTm+=data.delayMoveTime;
				var serverTT=CMsgHeartBeatRes.getServerTime(Browser.now())-(laya8.client.player.net.MsgManager.enterRoomTime+data.msgSendTm);
				(data).pathID=cfg.pathID;
				(data)._curTime=serverTT;
				netObj.time=data.time;
				netObj.path(data);
				netObj.lifeCycle=1;
				netObj.ownerID=data.ownerID;
				netObj.pivot(cfg.offX+cfg.w / 2,cfg.offY+cfg.h / 2);
				netObj.itemKey=prefixId?prefixId*1000+data.itemId:data.itemId;
				netObj.prefixId=prefixId;
				netObj._sourceID=cfg.sourceID;
				netObjInPool || netObj.createView(cfg.sourceID,"bullet");
				netObj.init(serverTT,data.angle,data.scale);
			}
			if (itemid==314)return true;
			var role=Player.I.getNetObjByID(data.ownerID);
			if (!role || role._classid !=1)return true;
			if (skid==250001 || skid==260001){
				role.removeUTV_eff();
				}else if (skid==280001){
				role.addYunShiYuEff(data.x,data.y);
			}
			role.jifen=data.bulletNum;
			var arr=ConfigData.skillCfg[data.skillId].attEffect;
			var id=0;
			if (arr && arr.length > 0){
				id=arr[0];
			}
			if (Player.curUID !=data.ownerID){
				SkillManger.start(id,role,data.x,data.y,data,arr);
				}else{
				if (id !=0)SkillManger.start(id,role,data.x,data.y,data,arr);
				if (cfg.classID==24){
					(netObj).initAngle=data.angle;
					var cbArr=ConfigData.gameCfg ["controlBullet"];
					MissileObject.MaxTrendAngle=cbArr[0];
					MissileObject.TrendSpeed=cbArr[1];
					Player.curMissile=netObj;
					Player.I.changeViewCenter(netObj);
				}
			}
			return true;
		}

		//
		__proto.flyBullet=function(i,type,user,dir,isBaoji){
			(isBaoji===void 0)&& (isBaoji=false);
			ShowJiFen.create(i,type,user,dir,isBaoji);
		}

		// 单局游戏结束
		__proto.gameEnd=function(data){
			var _$this=this;
			if (!data){
				TipsView.showMe("common/error.png","结算数据为空！");
			}
			this.battle.end();
			NotifyCenter.I.curGameEndCmd=data
			MsgManager.isInRoom=false;
			Loading.I.isLogin=false;
			if (enumRoomType.nowType !=100){
				SnowUtils.updateBattle();
			}
			GameSocket.closeByWhere=2;
			GameSocket.isForcein=0;
			SoundManager.stopMusic();
			if (SnowUtils.getQueryString("try")){
				return true;
			}
			if (enumRoomType.nowType==100){
				var info=SnowUtils.getQueryString("ic");
				if(info){
					var cmd1=new RequestShare();
					cmd1.shareType=2;
					cmd1.shareUserId=parseInt(info);
					HallApp.notify(cmd1);
				}
				GameResultN.onShow(data);
			}
			else if (enumRoomType.nowType==enumRoomType.ROOMTYPE_CUSTOM_FREE){}
			else if (enumRoomType.nowType==enumRoomType.ROOMTYPE_CUSTOM_TEAM){
				GameResultPage.showMe(true,enumRoomType.nowType,data,Handler.create(this,this._normalGameEnd));
			}
			else if(enumRoomType.nowType==enumRoomType.ROOMTYPE_SOLO_NPC){
				TrainingEndPage.showMe(true,enumRoomType.nowType,data,Handler.create(this,function(){
					_$this.endGame(enumRoomType.nowType);
				}));
			}else
			GameResultPage.showMe(true,enumRoomType.nowType,data,Handler.create(this,this._normalGameEnd));
			return true;
		}

		__proto._normalGameEnd=function(data){
			NotifyCenter.I.curGameEndCmd=data;
			if (enumRoomType.nowType==enumRoomType.ROOMTYPE_CUSTOM_FREE || enumRoomType.nowType==enumRoomType.ROOMTYPE_CUSTOM_TEAM || enumRoomType.nowType==enumRoomType.ROOMTYPE_LADDER){
				switch(enumRoomType.nowType){
					case enumRoomType.ROOMTYPE_CUSTOM_FREE:
						break ;
					case enumRoomType.ROOMTYPE_CUSTOM_TEAM:
						Team3V3Balance.onShow();
						break ;
					case enumRoomType.ROOMTYPE_LADDER:
						Team3V3Balance.onShow();
						break ;
					}
				this.endGame(enumRoomType.nowType);
				return;
			}else {}
			Laya.timer.loop(100,this,this.endGame,[1]);
		}

		/**
		*@param type
		*<br>0-直接回收战斗相关，不等待任何东西
		*<br>1-常规模式下结算
		*<br>2-棒棒糖相关模式下结算
		*/
		__proto.endGame=function(type){
			if (type==1)return;
			if (type==2)return;
			Laya.timer.clear(this,this.removeTempDelSnowUidObj);
			this.tempDelSnowUIDObj={};
			Laya.timer.clear(this,this.endGame);
			GameSocket.isAgainConnect=false;
			GameSocket.I.close();
			Player.I.end();
			GameSocket.I.event("removeGaming");
		}

		__proto.skillRefresh=function(){
			var requst=new RequestNormal()
			requst.method=3033;
			HallApp.notify(requst);
		}

		/**物品消失函数
		*<br> 子弹撞墙也是这个消息
		**/
		__proto.itemDisappear=function(data){
			data.ref++;
			for (var i=0,n=data.itemList.length;i < n;i++){
				var uid=data.itemList[i];
				var delObj=Player.I.netObjects[uid];
				if (!delObj){
					this.delObjs[uid]=true;
					}else{
					if (delObj.type_=="bullet"){
						(delObj).state=1;
						data.release();
						return true;
					}
				}
				Player.I.removeNetObj(uid,delObj);
			}
			data.release();
			return true;
		}

		/**
		*移动
		*/
		__proto.startMove=function(obj,data,b){
			if (data.deltax==0 && data.deltay==0){
				data.angle=-1;
			}
			else{
				data.angle=PathBase.getAngleByVector2D(data.deltax,data.deltay);
			}
			if (data.uid !=Player.curUID){
				if (data.angle==-1){
					obj.stopMove();
					}else {
					var dir=MsgManager.calcDirByDelta(data.deltax,data.deltay);
					ActionPlayer.move(obj);
					obj.animeMove(dir);
				}
				obj.path(data);
			}
			else {
				if (b){
					data.ref++;
					data.release();
				}
				else{
					if (data.angle==-1){
						obj.stopMove();
						}else {
						MsgManager.startMoveMyself(obj,data.angle);
					}
					obj.path(data);
					obj.getPath().setServerPos([data.x,data.y]);
				}
			}
		}

		/**
		*角色开始碰撞
		*@param data
		*@return
		*/
		__proto.onUserStartHitMove=function(data){
			var obj=Player.I.getNetObjByID(data.uid);
			if (!obj)return true;
			if (obj._classid !=1){
				return false;
			};
			var second=Math.sqrt(data.deltax *data.deltax+data.deltay *data.deltay)/ data.moveSpeed;
			obj.onBeginCollision(second);
			obj.smaxSpeed=data.moveSpeed;
			obj.canGoNext=true;
			this.startMove(obj,data,false)
			return true;
		}

		/**
		*角色移动
		*@param data
		*@return
		*/
		__proto.userMoveDeta=function(data){
			var obj=Player.I.getNetObjByID(data.uid);
			if (!obj||obj.type_ !="role"){
				data.ref++;
				data.release();
				return false;
			}
			this.startMove(obj,data,true)
			return true;
		}

		/**
		*卡住了
		*@param data
		*@return
		*/
		__proto.onStuckMove=function(data){
			var obj=Player.I.getNetObjByID(data.uid);
			if (!obj||obj.type_ !="role"){
				data.ref++;
				data.release();
				return false;
			}
			if (data.deltax==0 && data.deltay==0){
				data.angle=-1;
			}
			else{
				data.angle=PathBase.getAngleByVector2D(data.deltax,data.deltay);
			}
			if (data.uid !=Player.curUID){
				if (data.angle==-1){
					obj.stopMove();
					}else {
					var dir=MsgManager.calcDirByDelta(data.deltax,data.deltay);
					obj.animeMove(dir);
				}
				obj.path(data);
			}
			else {
				data.ref++;
				obj.path(data);
				obj.getPath()&& obj.getPath().setServerPos([data.x,data.y]);
			}
			return true;
		}

		// 人物移动
		__proto.userMove=function(data){
			var obj=Player.I.getNetObjByID(data.uid);
			if (!obj)return true;
			if (obj._classid==21){
				(data).speed=(obj).speed;
				var serverTT=CMsgHeartBeatRes.getServerTime(Browser.now())-(laya8.client.player.net.MsgManager.enterRoomTime+data.baseTime);
				(data).pathID=1;
				(data)._curTime=serverTT;
				(data).time=99999999;
				obj.path(data);
				return true;
			}
			if (data.uid !=Player.curUID){
				obj.path(data);
				if (data.angle==-1){
					obj.stopMove();
					}else {
					this._curVec=PathBase.getVector2DByAngle(data.angle);
					var dir=MsgManager.calcDirByDelta(this._curVec.x,this._curVec.y);
					obj.animeMove(dir);
				}
			}
			else {}
			return true;
		}

		/**子弹移动*/
		__proto.bulletMove=function(data){
			var obj=Player.I.getNetObjByID(data.uid);
			if (!obj)return true;
			var path=obj.getPath();
			obj.rotation=data.angle;
			Log_Test.error("bulletMove = "+obj.rotation);
			path.upData(data);
			return true;
		}

		// 更新分数 无尽模式
		__proto.updateEndless=function(data){
			GameSocket.I.event("updateEndlessRank",data);
			return true;
		}

		__proto.updateScore=function(data){
			if (!Player.curUser){
				data.release();
				return true;
			}
			this.updateScoreCount++;
			if(this.updateScoreCount%2)GameSocket.I.event("updateRank",data);
			data.release();
			return true;
		}

		// 更新自己分数 普通模式
		__proto.updateMyScore=function(data){
			GameSocket.I.event("updateMyRank",data);
			return true;
		}

		/**
		*人物升级
		*@param data
		*@return
		*/
		__proto.updateLevel=function(data){
			var obj=Player.I.getNetObjByID(data.uid);
			var levelData=ConfigData.LvData[data.level];
			levelData && (ActorObject.BACKDISTANCE=levelData.flashDistance || 0);
			if (data.uid==Player.curUID){
				levelData&&(Player.I.setNewScale(levelData.visionArea,0));
			}
			if (!obj||obj.destroyed){
				data.release();
				return true;
			};
			var upOrDown=data.level > obj.level ? true :false;
			obj.maxHp=data.maxBloodVal;
			obj.hp=data.bloodVal;
			obj.level=data.level;
			obj.jifen=data.score;
			if(obj.self==0){
				obj.scale1(data.scale,data.scale);
				this.setNumByLevel(obj.level);
			}
			else
			obj.scale(data.scale,data.scale);
			obj.smaxSpeed=data.smaxSpeed;
			var path=obj.getPath();
			if (!path){
				data.release();
				return true;
			}
			path.setSpeed();
			if (obj._xuliLevel !=0){
				obj.curS=data.scale;
			}
			obj._zOrder=obj.y+obj.height *obj.scaleY;
			if (obj.uid==Player.curUID){
				if(upOrDown && data.behitChgLevel==2)obj.addUpLevelAni(upOrDown);
				else if(!upOrDown && data.behitChgLevel==1)obj.addUpLevelAni(upOrDown);
				GameSocket.I.event("updateLevel",[data.level,true]);
			}
			data.release();
			return true;
		}

		// 账号下线 一般为账号在别处登录
		__proto.userOffline=function(data){
			return true;
		}

		/**心跳消息返回*/
		__proto.getHeartBeat=function(data){
			var ttime=Browser.now();
			data._calServerTime(ttime);
			GameSocket.delayNetwork=(ttime-data.timeClinet);
			Laya.timer.once(2000,GameSocket.I,GameSocket.I.sendHeartBeat);
			data.release();
			return true;
		}

		/**蓄力消息-播放蓄力动画*/
		__proto.roleXuli=function(data){
			var role=Player.I.getNetObjByID(data.uid);
			if (!role || !((role instanceof laya8.client.player.game.ActorObject )))return true;
			if (data.readyState==1){
				if (role.uid==Player.curUID && role.self==0){
					if(Player.btnIndex==0)role.addBtnXuliEffect();
					SoundManager.playSound(ConfigData.soundCfg[57],0);
				}
				role.userTopView.setXuliEff(1);
				role.onBeginXuli(data.skillId);
				ActionPlayer.xuli(role);
			}
			else if (data.readyState==0){
				if (role.uid==Player.curUID && role.self==0){
					SoundManager.stopSound(ConfigData.soundCfg[57]);
					SoundManager.playSound(ConfigData.soundCfg[116]);
				}
				role.addXuliEnd();
				role.onEndXuli(data.xuliStiffTime,data.skillId);
				if (role.propZd){
					role.propZd=false;
				}
				else
				role.userTopView.setXuliEff();
			}
			else if (data.readyState==2){
				role.addXuliMan(role.uid==Player.curUID && role.self==0);
			}
			else if (data.readyState==3){
				CheckAttackButton.setXuliFild();
			}
			return true;
		}

		/**万江说是测试接口用与测试AI状态*/
		__proto.testRoleChat=function(data){
			var role=Player.I.getNetObjByID(data.uid);
			if (!role)return true;
			if (!data.chatMsgData || !data.chatMsgData.length)return true;
			role._showQiPao(data.chatMsgData,4000);
			return true;
		}

		/**
		*食物类消失处理函数
		*@param hitObj 主动碰撞对象（一般为角色）
		*@param beHitObj 被动碰撞对象（一般为食物）
		*@param isShowAni 是否播放吃食物的动画 true-播放，false-不播放
		*/
		__proto.eatThings=function(hitObj,beHitObj,isShowAni){
			Player.I.removeNetObj(beHitObj.uid ,beHitObj);
		}

		/*if (isShowAni){
		var obj3:ActorObject=hitObj as ActorObject;
		obj3.addEatFoodAni();
	}*/


	__proto.eatHp=function(hitObj,beHitObj,isShowAni){
		if (isShowAni){
			var obj3=hitObj;
			obj3.addEatHPAni();
		}

	}


	/**处理人碰撞食物类的处理*/
	__proto.otherDelSnow=function(data){
		data.ref++;
		var ve=data.itemList;
		var _data;
		for (var i=0,j=ve.length;i < j;i++){
			_data=ve [i];
			var beHitObj=Player.I.getNetObjByID(_data.uidBeHit);
			var hitObj=Player.I.getNetObjByID(_data.uidHit);
			if (beHitObj && !beHitObj.destroyed){
				if (beHitObj.type_=="food"){
					if (hitObj && !hitObj.destroyed){
						if (beHitObj._classid==4 || beHitObj._classid==6 || beHitObj._classid==19){
							if (hitObj.uid==Player.curUID){
								(beHitObj).onMoveToRole && (beHitObj).onMoveToRole(Player.curUser,Handler.create(this,this.eatThings,[Player.curUser,beHitObj,false]));
								if(beHitObj._classid==4||beHitObj._classid==6){
									var cfg=ConfigData.elementData [beHitObj.itemid];
									if(cfg.score){
										this.flyBullet(cfg.score*MsgManager.SNOWSCALE,0,Player.curUser,0);
									}
								}
							}
							else{
								this.eatThings(hitObj,beHitObj,false);
							}
						}
						else if (beHitObj._classid==23){
							(beHitObj).changStat && (beHitObj).changStat();
							if(hitObj.uid==Player.curUID){
								SoundManager.playSound(ConfigData.soundCfg[43]);
							}
						}
						else if (beHitObj._classid==25){
							(beHitObj).changStat && (beHitObj).changStat();
							var cfgvo=ConfigData.elementData [beHitObj.itemid];
							if (cfgvo&&(cfgvo.addLife>0)){
								if ((hitObj instanceof laya8.client.player.game.RoleObject )){
									(hitObj).addbloodEffect();
								}
								else{
									CrazySnowball.reportError("idError",'addbloodEffect:'+hitObj.__className+'classid:'+hitObj._classid);
									return true;
								}
							}
							if(hitObj.uid==Player.curUID)
								SoundManager.playSound(ConfigData.soundCfg[44]);
						}
						else if (beHitObj._classid==27){
							this.eatThings(hitObj,beHitObj,true);
							(hitObj).addEatGemEff();
						}
						else{
							this.eatThings(hitObj,beHitObj,true);
							if (hitObj.uid==Player.curUID && beHitObj.itemid==4004)
								SoundManager.playSound(ConfigData.soundCfg[9]);
						}
						}else{
						Player.I.removeNetObj(beHitObj.uid ,beHitObj);
					}
				}
				}else if (!beHitObj){
				this.tempDelSnowUIDObj[_data.uidBeHit]=1;
				Laya.timer.once(4000,this,this.removeTempDelSnowUidObj,[_data.uidBeHit]);
			}
			if (hitObj && !hitObj.destroyed){
				if (hitObj.uid==Player.curUID){
					var deltaHp=_data.bloodVal-hitObj.hp;
					deltaHp && hitObj.showFloatText("+"+deltaHp,"#00ff00");
				}
				hitObj.hp=_data.bloodVal;
			}
		}

		data.release();
		return true;
	}


	/**清除未找到的uid标识*/
	__proto.removeTempDelSnowUidObj=function(uid){
		this.tempDelSnowUIDObj[uid]=0;
	}


	__proto.areaCollision=function(data){
		var objs=Player.I.netObjects;
		var hitObj=objs [data.uidHit];
		var uidHitOwner=data.uidHitOwner;
		var haveRole=false;
		var tempData;
		var behitList=data.behitList;
		if (behitList && behitList.length){
			for (var i=0,j=behitList.length;i < j;i++){
				if (!haveRole){
					tempData=behitList[i];
					var beHitObj=objs [tempData.uidBeHit];
					if (beHitObj && !beHitObj.destroyed){
						if (beHitObj.type_=="role"){
							haveRole=true;
							if(uidHitOwner==Player.curUID){
								if (hitObj){
									var skillid=(hitObj).skillId;
									if (skillid%1000000==65001){
										GamingView.I.showJiZhong(hitObj);
									}
								}
							}
						}
					}
				}
				this.areaOne(behitList[i],uidHitOwner,hitObj,data.hitSkillId);
			}
		};

		var killer=objs [uidHitOwner];
		if (killer){
			killer.jifen=data.hitScore;
			killer.hp=data.hitBloodVal;
		}

		if (hitObj && !hitObj.destroyed){
			if (hitObj.type_=="bullet"){
				(hitObj).hitNum--;
				if ((hitObj).hitNum <=0){
					var skillid=(hitObj).skillId;
					if (haveRole){
						(hitObj).state=2;
						}else {
						(hitObj).state=1;
					}
					if((hitObj).ownerID==Player.curUID)
						GamingView.I.playSkillSound(skillid,3);
				}
				else{
					(hitObj).state=3
				}
			}
		}

		data.release();
		return true;
	}


	/**
	*爆炸群伤单体计算
	*@param data 被击者消息结构
	*@param uidHitOwner 攻击者的拥有者uid
	*@param hitObj 攻击者的实例
	*/
	__proto.areaOne=function(data,uidHitOwner,hitObj,skillid){
		if (!MsgManager.isInRoom)return;
		if (!data){
			Log_Test.error("areaOne Err: data is null");
			return;
		};

		var beHitObj=Player.I.getNetObjByID(data.uidBeHit);
		var enemy=Player.I.getNetObjByID(uidHitOwner);
		if (beHitObj && !beHitObj.destroyed){
			if (
				(ActorObject.hasBlood && data.beHitBloodVal <=0)
			||(!ActorObject.hasBlood && data.beHitScore <=0)){
				if (!this._isFirstBlood){
					this._isFirstBlood=true;
				}
				this.showCollsionResult(enemy,beHitObj,data.angle,0,beHitObj.hp,data.isCrit);
				beHitObj.jifen=data.beHitScore;
				beHitObj.hp=0;
				if (Player.curUID==data.uidBeHit){
					if (Player.curUser && (Player.curUser.gender==1))
						SoundManager.playSound(ConfigData.soundCfg[54]);
					else
					SoundManager.playSound(ConfigData.soundCfg[55]);
					if (enemy){
						GameAgainView.killerName=enemy.name;
						}else {
						var sN=Player.I.delNetObjs[uidHitOwner];
						if (sN && sN.length)GameAgainView.killerName=sN;
						else GameAgainView.killerName="未知角色";
					}
					GameAgainView.lastScore=data.beHitScore;
					Player.curBeKillUid=uidHitOwner;
					laya8.client.player.net.MsgManager.foe.player=Player.I.getNetObjByID(uidHitOwner);
					}else{
					if (uidHitOwner==Player.curUID){
						if (beHitObj._classid==1){
							if (beHitObj && ((beHitObj).gender==1))
								SoundManager.playSound(ConfigData.soundCfg[52]);
							else
							SoundManager.playSound(ConfigData.soundCfg[53]);
							Laya.timer.once(1,this,function(){
								GuideMgrI.fuckComplete(2,null);
							});
						}
						else if (beHitObj._classid==26){
						}
					}
				}
				if (beHitObj.type_=="role"){
					this._killList[(beHitObj).selfID]=uidHitOwner;
					(beHitObj).bulletAngleInHurt=data.angle;
					if (skillid>0){
						var arr=ConfigData.skillCfg[skillid].beHitEffect;
						var id=0;
						if (arr && arr.length > 0){
							id=arr[0];
							SkillManger.start(id,beHitObj,beHitObj.x,beHitObj.y,null,arr);
						}
					}
				}
				else if (beHitObj._classid==17 && hitObj && Player.curUID==hitObj.uid){
					SoundManager.playSound(ConfigData.soundCfg[37]);
				}
				Player.I.removeNetObj(data.uidBeHit,beHitObj);
			}
			else{
				this.showCollsionResult(enemy,beHitObj,data.angle,0,beHitObj.hp-data.beHitBloodVal,data.isCrit);
				beHitObj.jifen=data.beHitScore;
				beHitObj.hp=data.beHitBloodVal;
				if (beHitObj.type_=="barrier"){
					if (Player.I.posInView((beHitObj)._x,(beHitObj)._y,200)){
						if (beHitObj._classid==9 || beHitObj._classid==10){
							(beHitObj).onShake();
							(beHitObj).enableUpdate();
							}else if (beHitObj._classid==7){
							(beHitObj).onShake();
							}else if (beHitObj._classid==29){
							(beHitObj).onShake();
						}
					}
					}else if (beHitObj.type_=="role"){
					var hitOwnerSkillID=0;
					if (hitObj && !hitObj.destroyed && hitObj.type_=="bullet"){
						hitOwnerSkillID=(hitObj).skillId;
					}
					if (skillid>0){
						var bhArr=ConfigData.skillCfg[skillid].beHitEffect;
						var hid=0;
						if (bhArr && bhArr.length > 0){
							hid=bhArr[0];
							SkillManger.start(hid,beHitObj,beHitObj.x,beHitObj.y,null,bhArr);
						}
					}
					(beHitObj).bulletAngleInHurt=data.angle;
					ActionPlayer.hurt(beHitObj);
					(beHitObj).animeHurt(uidHitOwner?uidHitOwner:-1,hitOwnerSkillID);
					(beHitObj).addEnemy(uidHitOwner);
				}
			}
		}

	}


	/**自己击杀敌人后，自己数据变化*/
	__proto.selfAttackResult=function(data){
		if (!Player.curUser){
			Log_Test.error("角色死亡后，击杀敌人。忽略奖励提示");
			data.release();
			return true;
		}

		if (data.kills){
			Player.curUser.killNum+=data.kills;
			var killNum=Player.curUser.killNum;
		}

		data.bloodVal && this.flyBullet(data.bloodVal,3,Player.curUser,0);
		data.curScore && this.flyBullet(data.curScore,0,Player.curUser,0);
		data.release();
		return true;
	}


	/**角色身上debuff改变*/
	__proto.onDebuff=function(data){
		for (var i=0,j=data.userDebuffArr.length;i < j;i++){
			var buff=data.userDebuffArr [i];
			var role=Player.I.getNetObjByID(buff.uid);
			if (!role){
				Log_Test.error("修改角色 debuff 失败，未找到角色 uid:"+buff.uid);
				continue ;
			}
		}

		return true;
	}


	/**自己因获得技能导致属性改变*/
	__proto.onSelfPropertyChg=function(data){
		var role=Player.I.getNetObjByID(data.uid);
		if (!role){
			data.release();
			Log_Test.error("SMsgChgProperty is error. Do Not find the role.  UID:"+data.uid);
			return true;
		}

		if (role.type_ !="role"){
			data.release();
			Log_Test.error("SMsgChgProperty is error. 这不是角色或兔子.  UID:"+data.uid);
			return true;
		}

		role.chgProperty(data);
		data.release();
		return true;
	}


	__proto.onPropertyChg=function(data){
		var proD;
		for (var i=0,j=data.itemList.length;i < j;i++){
			proD=data.itemList [i];
			switch(proD.propertyType){
				case 18:
					laya8.client.player.net.MsgManager.SNOWSCALE=proD.propertyValue;
					break ;
				}
		}

		data.release();
		return true;
	}


	/**下发需要选择的技能*/
	__proto.onSelfRandomSkill=function(data){
		GamingView.I.passiveSkills.randomSkill(data);
	}


	__proto.testrace=function(_data){
		var scene=Player.I.curScene;
		if (!scene || scene.destroyed){
			_data.release();
			return true;
		};

		var _img=this._imgs[_data._uid];
		if (_data._uindex==0){
			if (_img){
				_img.removeSelf();
				this._imgs[_data._uid]=null;
			}
			_data.release();
			return false;
		}

		if (_img==null){
			_img=this._imgs[_data._uid]=new Sprite();
			scene.objLayer.addChild(_img);
		}

		_img.graphics.clear();
		_img.graphics.drawRect(0,0,_data._w,_data._h,"#ffffff");
		_img.pos(_data._x,_data._y);
		_img.size(_data._w,_data._h);
		_img.alpha=0.5;
		_img.alpha=0.5;
		_data.release();
		return true;
	}


	__getset(1,MsgManager,'I',function(){
		return MsgManager._I=MsgManager._I|| new MsgManager;
	});


	MsgManager.startMoveMyself=function(obj,num){
		obj.animeMoveMe(num);
		ActionPlayer.move(obj);
	}


	MsgManager.calcDirByDelta=function(deltaX,deltaY){
		var radians=Math.atan2(deltaY,deltaX);
		var angle=radians *180 / Math.PI;
		if (angle < 0)angle+=360;
		angle+=22.5;
		angle %=360;
		return 0|(angle / 45);
	}


	MsgManager.SNOWSCALE=1;
	MsgManager._I=null
	MsgManager.isInRoom=false;
	MsgManager.enterRoomTime=NaN
	MsgManager.clientEnterTime=NaN
	__static(MsgManager,
	['myTeam',function(){return this.myTeam={id:-1,lists:[]};},'foe',function(){return this.foe={player:null};},'nOne',function(){return this.nOne={player:null};}
	]);
	return MsgManager;
	})()


	/**
	*...
	*@author rivetr
	*/
	//class laya8.client.player.path.accmove.Vector2D
	var Vector2D=(function(){
		function Vector2D(x,y){
			this._x=NaN;
			this._y=NaN;
			(x===void 0)&& (x=0);
			(y===void 0)&& (y=0);
			this._x=x;
			this._y=y;
		}

		__class(Vector2D,'laya8.client.player.path.accmove.Vector2D');
		var __proto=Vector2D.prototype;
		__proto.copy=function(_src){
			this._x=_src._x;
			this._y=_src._y;
		}

		__proto.setTo=function(xp,yp){
			this._x=xp;
			this._y=yp;
		}

		//拷贝向量
		__proto.clone=function(){
			return new Vector2D(this._x,this._y);
		}

		//将当前向量变成0向量
		__proto.zero=function(){
			this._x=0;
			this._y=0;
			return this;
		}

		//判断是否是0向量
		__proto.isZero=function(){
			return this._x==0 && this._y==0;
		}

		/**
		*设置x,y值，并Normalize.
		*@param x
		*@param y
		*@return
		*/
		__proto.normalizeSet=function(sx,sy){
			this._x=sx;
			this._y=sy;
			if(this.length==0){
				this._x=1;
				return this;
			};
			var len=this.length;
			this._x/=len;
			this._y/=len;
			return this;
		}

		//将当前向量转化成单位向量
		__proto.normalize=function(){
			if(this.length==0){
				this._x=1;
				return this;
			};
			var len=this.length;
			this._x/=len;
			this._y/=len;
			return this;
		}

		//截取当前向量
		__proto.truncate=function(max){
			this.length=Math.min(max,this.length);
			return this;
		}

		//反转向量
		__proto.reverse=function(){
			this._x=-this._x;
			this._y=-this._y;
			return this;
		}

		//判断当前向量是否是单位向量
		__proto.isNormalized=function(){
			return this.length==1.0;
		}

		//向量积
		__proto.dotProd=function(v2){
			return this._x*v2.x+this._y*v2.y;
		}

		//判断两向量是否垂直
		__proto.crossProd=function(v2){
			return this._x*v2.y-this._y*v2.x==0;
		}

		//返回向量的符号值
		__proto.sign=function(v2){
			return this.perp.dotProd(v2)<0?-1:1;
		}

		//返回当前向量与V2的距离
		__proto.dist=function(v2){
			return Math.sqrt(this.distSQ(v2));
		}

		//返回当前向量与V2的距离的平方
		__proto.distSQ=function(v2){
			var dx=v2.x-this.x;
			var dy=v2.y-this.y;
			return dx*dx+dy*dy;
		}

		//两向量相加
		__proto.add=function(v2){
			return new Vector2D(this._x+v2.x,this._y+v2.y);
		}

		//两向量相减
		__proto.subtract=function(v2){
			return new Vector2D(this._x-v2.x,this.y-v2.y);
		}

		//数与向量的乘积
		__proto.multiply=function(value){
			return new Vector2D(this._x*value,this._y*value);
		}

		//数与向量的商
		__proto.divide=function(value){
			return new Vector2D(this._x/value,this._y/value);
		}

		//判断两向量是否相等
		__proto.equals=function(v2){
			return this._x==v2.x && this._y==v2.y;
		}

		__proto.float_equal=function(v2){
			if ((Math.abs(this._x-v2.x)< 0.00001)&& (Math.abs(this._y-v2.y)< 0.00001))
				return true;
			else
			return false;
		}

		//设置角度
		//获取角度
		__getset(0,__proto,'angle',function(){
			return Math.atan2(this._y,this._x);
			},function(value){
			var len=this.length;
			this._x=Math.cos(value)*len;
			this._y=Math.sin(value)*len;
		});

		//设置向量的大小
		//获取当前向量大小
		__getset(0,__proto,'length',function(){
			return Math.sqrt(this.lengthSQ);
			},function(value){
			var a=this.angle;
			this._x=Math.cos(a)*value;
			this._y=Math.sin(a)*value;
		});

		//获取当前向量大小的平方
		__getset(0,__proto,'lengthSQ',function(){
			return this._x*this._x+this._y*this._y;
		});

		__getset(0,__proto,'y',function(){
			return this._y;
			},function(value){
			this._y=value;
		});

		//返回坐标向量
		__getset(0,__proto,'perp',function(){
			return new Vector2D(-this.y,this.x);
		});

		__getset(0,__proto,'x',function(){
			return this._x;
			},function(value){
			this._x=value;
		});

		Vector2D.sqLength=function(x1,y1){
			return x1 *x1+y1 *y1;
		}

		Vector2D.angleBetween=function(v1,v2){
			if(!v1.isNormalized())v1=v1.clone().normalize();
			if(!v2.isNormalized())v2=v2.clone().normalize();
			return Math.acos(v1.dotProd(v2));
		}

		Vector2D.angleBaseXAxis=function(vec){
			var fAgl=Vector2D.angleBetween(vec,Vector2D.X_AXIS);
			if (vec.y > 0)fAgl=Vector2D.DOUBLE_PI-fAgl;
			return fAgl;
		}

		Vector2D.vec2FromAngle=function(_agl,_vecOut){
			_vecOut._x=1.0;
			_vecOut._y=0.0;
			_vecOut.angle=_agl;
			_vecOut.normalize();
		}

		Vector2D.middleVec=function(_vec1,_vec2,_outVec){
			var tangle=Vector2D.angleBaseXAxis(_vec1);
			var lastAngle=Vector2D.angleBaseXAxis(_vec2);
			if (Math.abs(tangle-lastAngle)>=Math.PI){
				if (tangle >=Math.PI){
					tangle-=Vector2D.DOUBLE_PI;
					}else {
					if (lastAngle > 0){
						lastAngle-=Vector2D.DOUBLE_PI;
						}else {
						lastAngle+=Vector2D.DOUBLE_PI;
					}
				}
			}
			tangle=(tangle-lastAngle)/ 2+lastAngle;
			laya8.client.player.path.accmove.Vector2D.vec2FromAngle(tangle,_outVec);
		}

		__static(Vector2D,
		['X_AXIS',function(){return this.X_AXIS=new Vector2D(1,0);},'Y_AXIS',function(){return this.Y_AXIS=new Vector2D(0,1);},'RAD2DEG',function(){return this.RAD2DEG=180 / Math.PI;},'DOUBLE_PI',function(){return this.DOUBLE_PI=Math.PI *2.0;},'HALF_PI',function(){return this.HALF_PI=Math.PI / 2.0;}
		]);
		return Vector2D;
	})()


	/**
	*...
	*@author anling
	*/
	//class laya8.client.player.path.PathBase
	var PathBase=(function(){
		function PathBase(){
			this._isStop=false;
			this._serverData=null;
			this._netObj=null;
			this._serverPos=[];
			this._borderLeft=0;
			this._borderRight=0;
			this._borderTop=0;
			this._borderBottom=0;
			this.poolId=null;
		}

		__class(PathBase,'laya8.client.player.path.PathBase');
		var __proto=PathBase.prototype;
		// 初始化json配置表中的参数
		__proto.init=function(jsonData){}
		__proto.launching=function(data,netObj){
			this._netObj=netObj;
			this.setMoveArea();
			this.resetData(data);
		}

		/**
		*设置移动范围
		*@param top 默认值使用场景数值
		*@param left 默认值使用场景数值
		*@param bottom 默认值使用场景数值
		*@param right 默认值使用场景数值
		*/
		__proto.setMoveArea=function(top,left,bottom,right){
			(top===void 0)&& (top=-1);
			(left===void 0)&& (left=-1);
			(bottom===void 0)&& (bottom=-1);
			(right===void 0)&& (right=-1);
			var mapData=ConfigData.mapData;
			this._borderTop=top==-1 ? (mapData.top-this._netObj.height):top;
			this._borderLeft=left==-1 ? mapData.left :left;
			this._borderBottom=bottom==-1 ? (mapData.height-this._netObj.height-mapData.bottom):bottom;
			this._borderRight=right==-1 ? (mapData.width-this._netObj.width-mapData.right):right;
		}

		__proto.resetData=function(data){}
		// 设置服务器同步数据
		__proto.setServerPos=function(posArr){
			this._serverPos[0]=posArr[0];
			this._serverPos[1]=posArr[1];
		}

		// 移动一步 每帧
		__proto.moveStep=function(frameStep){
			return false;
		}

		__proto.setSpeed=function(){}
		__proto.stop=function(){
			this._isStop=true;
		}

		__getset(0,__proto,'serverData',function(){
			return this._serverData;
			},function(data){
			this._serverData=data;
		});

		PathBase.getAngleByVector2D=function(_x,_y){
			var _angle=Utils$2.toAngle(Math.atan2(_y,_x));
			return Math.round((_angle+360)% 360);
		}

		PathBase.getVector2DByAngle=function(_angle){
			if (_angle==-1){
				return new Vector2D(0,0);
			}
			_angle=Utils$2.toRadian(_angle);
			PathBase._tmpVec=new Vector2D();
			PathBase._tmpVec.x=Math.cos(_angle);
			PathBase._tmpVec.y=Math.sin(_angle);
			return PathBase._tmpVec;
		}

		PathBase.getVecByRotateAngle=function(_moveVec,_angle){
			_angle=Utils$2.toRadian(_angle);
			PathBase._tmpVec=new Vector2D();
			PathBase._tmpVec.x=_moveVec.x *Math.cos(_angle)-_moveVec.y *Math.sin(_angle);
			PathBase._tmpVec.y=_moveVec.x *Math.sin(_angle)+_moveVec.y *Math.cos(_angle);
			return PathBase._tmpVec;
		}

		PathBase._tmpVec=null
		return PathBase;
	})()


	/**
	*...
	*@author laoxie
	*/
	//class laya8.client.player.path.PathAngle
	var PathAngle=(function(){
		function PathAngle(){
			this._speed=NaN;
			this._speedX=NaN;
			this._speedY=NaN;
			this._bx=NaN;
			this._by=NaN;
			this._startTm=NaN;
			this._x1=NaN;
			this._y1=NaN;
		}

		__class(PathAngle,'laya8.client.player.path.PathAngle');
		var __proto=PathAngle.prototype;
		__proto.getSpeed=function(){
			return this._speed
		}

		__proto.init=function(bx,by,angle,speed,startTm,dx,dy,b){
			this._bx=bx;
			this._by=by;
			angle=(angle % 360)*0.017453292519943295;
			this._startTm=startTm;
			this._speed=speed;
			this._speedX=speed *Math.cos(angle);
			if (Math.abs(this._speedX)< 0.000001){
				this._speedX=0;
			}
			this._speedY=speed *Math.sin(angle);
			if (Math.abs(this._speedY)< 0.000001){
				this._speedY=0;
			}
			if (b){
				this._x1=this._bx+dx;
				this._y1=this._by+dy;
			}
		}

		__proto.moveUpdate=function(point,curTm){
			var dtm=curTm-this._startTm;
			point.x=this._bx+this._speedX *dtm;
			point.y=this._by+this._speedY *dtm;
			var xb=false;
			var yb=false;
			var xb1=false;
			var yb1=false;
			if ((point.x-this._x1)*this._speedX >=0){
				point.x=this._x1;
				xb=true;
			}
			if ((point.y-this._y1)*this._speedY >=0){
				point.y=this._y1;
				yb=true;
			}
			if (!(xb && yb)){
				if ((point.x-this._x1+this._speedX*60)*this._speedX >=0){
					xb1=true;
				}
				if ((point.y-this._y1+this._speedY*60)*this._speedY >=0){
					yb1=true;
				}
			}
			else{
				return-1;
			}
			return (xb1 && yb1)?1:0;
		}

		return PathAngle;
	})()


	/**
	*...
	*@author asanwu
	*/
	//class laya8.client.player.rocker.System
	var System=(function(){
		function System(){
			this.systemStr=null;
			this.systemArr=["Android","iPhone","SymbianOS","Windows Phone","iPad","iPod"];
			var str;
			str=navigator.appVersion;
			this.systemStr=str;
			System.ISMOBILE=this.isMobile();
		}

		__class(System,'laya8.client.player.rocker.System');
		var __proto=System.prototype;
		__proto.isMobile=function(){
			for (var i=0;i < this.systemArr.length;i++){
				if (this.systemStr.indexOf(this.systemArr[i])!=-1)
					return true;
			}
			return false;
		}

		__getset(1,System,'I',function(){
			return System._I=System._I|| new System();
		});

		System._I=null
		System.ISMOBILE=false;
		return System;
	})()


	/**
	*...
	*@author
	*/
	//class laya8.client.player.skill.CircleUpEffect
	var CircleUpEffect=(function(){
		function CircleUpEffect(){
			this.listSp=[];
		}

		__class(CircleUpEffect,'laya8.client.player.skill.CircleUpEffect');
		var __proto=CircleUpEffect.prototype;
		Laya.imps(__proto,{"laya8.client.player.skill.ISKillEffect":true})
		/*INTERFACE laya8.client.player.skill.ISKillEffect */
		__proto.start=function(actor,x,y,other,arr){
			if (!Player.I.inView(x,y,300,300))return null;
			var eff=EffectPool.I.createEffectAni(SkillManger.effectDic[arr[1]],x,y,Player.I.roleBackLayer);
			eff.scale(other.bombArea / 90,other.bombArea / 90);
			SkillManger.playSound(actor,arr);
			return eff;
		}

		//item.graphics.fillText("快到圈里来 我能帮你吸收伤害",0,100,"700 35px Aril","#ff0000","center");
		__proto.end=function(actor,arr){}
		/*INTERFACE laya8.client.player.skill.ISKillEffect */
		__proto.endex=function(sp){}
		CircleUpEffect.createSP=function(){
			var result=Pool.getItem("jiba");
			return result||new Sprite;
		}

		CircleUpEffect.recover=function(sp){
			sp.removeSelf();
			sp.graphics.clear();
			Pool.recover("jiba",sp);
		}

		return CircleUpEffect;
	})()


	/**
	*...
	*@author
	*/
	//class laya8.client.player.skill.DirectEffect
	var DirectEffect=(function(){
		function DirectEffect(){}
		__class(DirectEffect,'laya8.client.player.skill.DirectEffect');
		var __proto=DirectEffect.prototype;
		Laya.imps(__proto,{"laya8.client.player.skill.ISKillEffect":true})
		/*INTERFACE laya8.client.player.skill.ISKillEffect */
		__proto.start=function(actor,x,y,other,arr){
			if (!Player.I.inView(x,y,400,400))return null;
			var eff=EffectPool.I.createEffectAni(SkillManger.effectDic[arr[1]],x,y,Player.I.roleForeLayer,actor);
			eff.pivot(arr[2],0);
			eff.rotation=other.angle;
			SkillManger.playSound(actor,arr);
			return eff;
		}

		__proto.end=function(actor,arr){}
		/*INTERFACE laya8.client.player.skill.ISKillEffect */
		__proto.endex=function(sp){}
		return DirectEffect;
	})()


	/**
	*...
	*@author
	*/
	//class laya8.client.player.skill.IdeEffect
	var IdeEffect=(function(){
		function IdeEffect(b){
			this.isfront=false;
			this.isfront=b;
		}

		__class(IdeEffect,'laya8.client.player.skill.IdeEffect');
		var __proto=IdeEffect.prototype;
		Laya.imps(__proto,{"laya8.client.player.skill.ISKillEffect":true})
		/*INTERFACE laya8.client.player.skill.ISKillEffect */
		__proto.start=function(actor,x,y,other,arr){
			if (!Player.I.inView(x,y,500,500))return null;
			var eff=EffectPool.I.createEffectAniByIDE(SkillManger.effectDic[arr[1]],x,y,this.isfront?Player.I.roleForeLayer:Player.I.roleBackLayer,null);
			if (other && other.bombArea){
				var t=Math.max(eff.vo._width,eff.vo._height)/ (1.1 *eff.vo._scale);
				eff.scale(other.bombArea / t,other.bombArea / t);
			}
			SkillManger.playSound(actor,arr);
			return null;
		}

		__proto.end=function(actor,arr){}
		/*INTERFACE laya8.client.player.skill.ISKillEffect */
		__proto.endex=function(sp){}
		return IdeEffect;
	})()


	/**
	*...
	*@author
	*/
	//class laya8.client.player.skill.IdeEffectDirect
	var IdeEffectDirect=(function(){
		function IdeEffectDirect(b){
			this.isfront=false;
			this.isfront=b;
		}

		__class(IdeEffectDirect,'laya8.client.player.skill.IdeEffectDirect');
		var __proto=IdeEffectDirect.prototype;
		Laya.imps(__proto,{"laya8.client.player.skill.ISKillEffect":true})
		/*INTERFACE laya8.client.player.skill.ISKillEffect */
		__proto.start=function(actor,x,y,other,arr){
			if (!Player.I.inView(x,y,500,500))return null;
			var eff=EffectPool.I.createEffectAniByIDE(SkillManger.effectDic[arr[1]],x,y,this.isfront?Player.I.roleForeLayer:Player.I.roleBackLayer,null);
			if (arr[2]){
				var n=other.prefixId || 0;
				for (var i=0;i < n;i++){
					var eff1=EffectPool.I.createEffectAniByIDE(SkillManger.effectDic[arr[2]],x,y,this.isfront?Player.I.roleForeLayer:Player.I.roleBackLayer,null);
					eff1.pivotX=-50-(75 *i);
					eff1.rotation=other.angle;
				}
			}
			SkillManger.playSound(actor,arr);
			eff.pivot(20,0);
			eff.rotation=other.angle;
			return eff;
		}

		__proto.end=function(actor,arr){}
		/*INTERFACE laya8.client.player.skill.ISKillEffect */
		__proto.endex=function(sp){}
		return IdeEffectDirect;
	})()


	/**
	*...
	*@author
	*/
	//class laya8.client.player.skill.NeedEndEffect
	var NeedEndEffect=(function(){
		function NeedEndEffect(b){
			this.listSp=[];
			this.isfront=false;
			this.isfront=b;
		}

		__class(NeedEndEffect,'laya8.client.player.skill.NeedEndEffect');
		var __proto=NeedEndEffect.prototype;
		Laya.imps(__proto,{"laya8.client.player.skill.ISKillEffect":true})
		/*INTERFACE laya8.client.player.skill.ISKillEffect */
		__proto.start=function(actor,x,y,other,arr){
			var eff=EffectPool.I.createSingleEffectAni(SkillManger.effectDic[arr[1]]);
			actor.addFollow && actor.addFollow(eff,0,0);
			var key=actor.selfID+"_"+(arr[2] || 0);
			this.listSp[key]=eff;
			(eff)._key=key;
			if (!this.isfront){
				Player.I.roleBackLayer.addChild(eff);
			}
			else{
				Player.I.roleForeLayer.addChild(eff);
			}
			SkillManger.playSoundLoop(actor,arr);
			eff.visible=actor.visible;
			eff.alpha=actor.alpha;
			eff.pos(x,y);
			var val=eff.vo._scale *actor.scaleX;
			eff.scale(val,val);
			return eff;
		}

		__proto.end=function(actor,arr){
			var key=actor.selfID+"_"+(arr[2] || 0);
			var eff=this.listSp [key];
			if (eff){
				SkillManger.stopSound(actor,arr);
				eff.reset();
				actor.removeFollow(eff);
				this.listSp[key]=null;
			}
		}

		/*INTERFACE laya8.client.player.skill.ISKillEffect */
		__proto.endex=function(sp){
			var obj=this.listSp[(sp)._key];
			if (obj==sp){
				this.listSp[(sp)._key]=null;
			}
		}

		return NeedEndEffect;
	})()


	/**
	*...
	*@author
	*/
	//class laya8.client.player.skill.NormalPlay
	var NormalPlay=(function(){
		function NormalPlay(b){
			this.isFore=false;
			this.isFore=b;
		}

		__class(NormalPlay,'laya8.client.player.skill.NormalPlay');
		var __proto=NormalPlay.prototype;
		Laya.imps(__proto,{"laya8.client.player.skill.ISKillEffect":true})
		/*INTERFACE laya8.client.player.skill.ISKillEffect */
		__proto.start=function(actor,x,y,other,arr){
			if (!Player.I.inView(x,y,200,200))return null;
			var eff=EffectPool.I.createEffectAni(SkillManger.effectDic[arr[1]],x,y,this.isFore?Player.I.roleForeLayer:Player.I.roleBackLayer,arr[2]?null:actor);
			SkillManger.playSound(actor,arr);
			return eff;
		}

		__proto.end=function(actor,arr){}
		/*INTERFACE laya8.client.player.skill.ISKillEffect */
		__proto.endex=function(sp){}
		return NormalPlay;
	})()


	/**
	*...
	*@author
	*/
	//class laya8.client.player.skill.NormalSkilEffect
	var NormalSkilEffect=(function(){
		function NormalSkilEffect(){}
		__class(NormalSkilEffect,'laya8.client.player.skill.NormalSkilEffect');
		var __proto=NormalSkilEffect.prototype;
		Laya.imps(__proto,{"laya8.client.player.skill.ISKillEffect":true})
		/*INTERFACE laya8.client.player.skill.ISKillEffect */
		__proto.start=function(actor,x,y,other,arr){
			if (!Player.I.inView(x,y,200,200))return null;
			var data=ConfigData.skillCfg[other.skillId];
			if (data&&(data.preparation==1)){
				var angle=other.angle;
				if (angle < 0)angle+=360;
				angle+=22.5;
				angle %=360;
				var dir=0|(angle / 45);
				actor.animeAttck(dir);
			}
			return null;
		}

		__proto.end=function(actor,arr){}
		/*INTERFACE laya8.client.player.skill.ISKillEffect */
		__proto.endex=function(sp){}
		return NormalSkilEffect;
	})()


	/**
	*...
	*@author
	*/
	//class laya8.client.player.skill.PanEffect
	var PanEffect=(function(){
		function PanEffect(){}
		__class(PanEffect,'laya8.client.player.skill.PanEffect');
		var __proto=PanEffect.prototype;
		Laya.imps(__proto,{"laya8.client.player.skill.ISKillEffect":true})
		/*INTERFACE laya8.client.player.skill.ISKillEffect */
		__proto.start=function(actor,x,y,other,arr){
			var eff=EffectPool.I.createEffectAni(SkillManger.effectDic[arr[1]],x,y,Player.I.roleBackLayer,actor);
			eff.pivot(-80,0);
			eff.rotation=other.angle;
			SkillManger.playSound(actor,arr);
			return eff;
		}

		__proto.end=function(actor,arr){}
		/*INTERFACE laya8.client.player.skill.ISKillEffect */
		__proto.endex=function(sp){}
		return PanEffect;
	})()


	/**
	*...
	*@author ...
	*/
	//class laya8.client.player.skill.SkillBase
	var SkillBase=(function(){
		function SkillBase(){
			this.sb=null;
		}

		__class(SkillBase,'laya8.client.player.skill.SkillBase');
		var __proto=SkillBase.prototype;
		__proto.skillEffect=function(skillid,angle,dis,actor,cobj){
			if (!actor)return;
			var eff=MsgTemplate.createWithClass(SMsgSkillEffect);
			eff.angle=angle;
			eff.skillId=skillid;
			eff.uid=actor.uid;
			eff.x=actor.x+actor.width/2;
			eff.y=actor.y+actor.height;
			MsgManager.I.addStdMsg(eff);
		}

		__proto.run=function(skillid,angle,dis,actor,cobj){
			this.skillEffect(skillid,angle,dis,actor,cobj);
			this.recoverSelf();
			return this.sb;
		}

		__proto.recoverSelf=function(){
			var name=this.constructor.name;
			console.log(name);
			Pool.recover(name,this);
		}

		SkillBase.sendBullet=function(angle,dis,skillid,actor,cobj){
			if (!actor)return null;
			var bcfg=ConfigData.stoneBullet[skillid];
			if (!bcfg){
				console.log(">>>>>>>>>>>>>>has no this bullet"+skillid);
				return null;
			};
			var speed=bcfg.speed;
			var bid=bcfg.bid;
			var bomArea=bcfg.bomArea;
			var time=bcfg.time;
			var r=bcfg.shootOffset;
			var fx=0 | (actor.x+actor.width / 2)+Math.cos(angle *0.017453292519943295)*r;
			var fy=0 | (actor.y+actor.height / 2)+Math.sin(angle *0.017453292519943295)*r;
			switch(skillid){
				case 62001:
				case 53001:
				case 51001:
				case 49001:
				case 64001:
					fx=dis *Math.cos(angle *0.017453292519943295)+fx;
					fy=dis *Math.sin(angle *0.017453292519943295)+fy;
					break ;
				}
			cobj.colldata.skillId=skillid;
			var _bullet=MsgTemplate.createWithClass(SMsgCBullet);
			_bullet.ownerID=actor.uid;
			_bullet.uid=FaceServer.ID++;
			_bullet.targetId=0;
			_bullet.x=fx;
			_bullet.y=fy;
			_bullet.angle=angle;
			_bullet.speed=speed;
			_bullet.time=time;
			_bullet.scale=1.06;
			_bullet.hitNum=1;
			_bullet.skillId=skillid;
			_bullet.prefixId=1;
			_bullet.delayMoveTime=0;
			_bullet.msgSendTm=FaceServer.INSTANCE.getSerNow();
			_bullet.useScore=0;
			_bullet.bulletNum=actor.jifen;
			_bullet.itemId=bid;
			_bullet.bombArea=bomArea;
			var bullet=Sbullet.getData();
			bullet.uid=_bullet.uid;
			bullet.owerid=_bullet.ownerID;
			bullet.owersid=actor.selfID;
			bullet.time=_bullet.time;
			bullet.skillid=_bullet.skillId;
			bullet.angle=_bullet.angle;
			bullet.dis=dis;
			bullet.isBoom=false;
			bullet.begin();
			var cfg=ConfigData.elementData[bid];
			bullet.delayTime=bcfg.delay;
			bullet.interval=bcfg.interval;
			if (cfg){
				bullet.isBoom=!!cfg.explodeW;
				if (cfg.sourceID==0){
					bullet.qRect.w=cfg.explodeW;
					bullet.qRect.h=cfg.explodeH;
				}
				else{
					bullet.qRect.w=cfg.sw;
					bullet.qRect.h=cfg.sh;
				}
			}
			bullet.bx=fx;
			bullet.by=fy;
			if (speed){
				var temp=Collision.rectClipPointNew(5,5,32,[]);
				var result=CCreateObjData.gaoto(fx,fy,time *speed,angle *0.017453292519943295,Point.TEMP,0,temp);
				if (!result){
					var longB=Math.sqrt(Math.pow((Point.TEMP.x-fx),2)+Math.pow((Point.TEMP.y-fy),2));
					bullet.time=_bullet.time=longB / speed;
				}
			};
			var val=ConfigData.LvData[cobj.userlevel];
			bullet.colldata.attackVal=0| (val.bulletAckScore*bcfg.singleAckScale[0]);
			bullet.colldata.attackValScale=val.bulletAckScore2;
			MsgManager.I.addStdMsg(_bullet);
			bullet.update(Laya.timer.currTimer,FaceServer.qTree);
			return bullet;
		}

		return SkillBase;
	})()


	/**
	*...
	*@author
	*/
	//class laya8.client.player.skill.SkillManger
	var SkillManger=(function(){
		function SkillManger(){}
		__class(SkillManger,'laya8.client.player.skill.SkillManger');
		SkillManger.__init__=function(){
			SkillManger.SkillEffects[0]=new NormalSkilEffect();
			SkillManger.SkillEffects[2]=new NormalPlay(true);
			SkillManger.SkillEffects[1]=new NeedEndEffect(false);
			SkillManger.SkillEffects[3]=new DirectEffect();
			SkillManger.SkillEffects[4]=new PanEffect();
			SkillManger.SkillEffects[5]=new NeedEndEffect(true);
			SkillManger.SkillEffects[6]=new IdeEffect(true);
			SkillManger.SkillEffects[7]=new CircleUpEffect();
			SkillManger.SkillEffects[8]=new IdeEffectDirect(true);
			SkillManger.SkillEffects[9]=new NormalPlay(false);
			SkillManger.effectDic[1]="ckxl";
			SkillManger.effectDic[2]="xfbj";
			SkillManger.effectDic[3]="sf";
			SkillManger.effectDic[4]="sunxuli";
			SkillManger.effectDic[5]="sunbj";
			SkillManger.effectDic[6]="sundz";
			SkillManger.effectDic[7]="sundg";
			SkillManger.effectDic[8]="anxuli";
			SkillManger.effectDic[9]="anbj";
			SkillManger.effectDic[10]="ansxgj";
			SkillManger.effectDic[11]="andd";
			SkillManger.effectDic[12]="ansxgj";
			SkillManger.effectDic[13]="xuanfeng";
			SkillManger.effectDic[14]="baofeng";
			SkillManger.effectDic[15]="ailubig";
			SkillManger.effectDic[16]="ailuxuli";
			SkillManger.effectDic[17]="ailubj";
			SkillManger.effectDic[18]="xltxuli";
			SkillManger.effectDic[19]="xltxlAttack";
			SkillManger.effectDic[20]="xltxlAttack1";
			SkillManger.effectDic[21]="dieAni";
			SkillManger.effectDic[22]="lilisBig";
			SkillManger.effectDic[23]="llzdz";
			SkillManger.effectDic[24]="chongfeng";
			SkillManger.effectDic[25]="czxl";
			SkillManger.effectDic[26]="czbj";
			SkillManger.effectDic[27]="czxlAttack";
			SkillManger.effectDic[28]="baoEff";
			SkillManger.effectDic[29]="robotXuli";
			SkillManger.effectDic[30]="zldEff";
			SkillManger.effectDic[31]="starLightEff";
			SkillManger.effectDic[32]="robotbg";
		}

		SkillManger.playSound=function(actor,arr){
			if (!actor||actor.self !=0)return;
			var sid=arr[3];
			if (sid){
				var url=ConfigData.soundCfg[sid];
				url&&SoundManager.playSound(url,1);
			}
		}

		SkillManger.playSoundLoop=function(actor,arr){
			if (!actor||actor.self !=0)return;
			var sid=arr[3];
			if (sid){
				var url=ConfigData.soundCfg[sid];
				url&&SoundManager.playSound(url,0);
			}
		}

		SkillManger.stopSound=function(actor,arr){
			if (!actor||actor.self !=0)return;
			var sid=arr[3];
			if (sid){
				var url=ConfigData.soundCfg[sid];
				url&&SoundManager.stopSound(url);
			}
		}

		SkillManger.start=function(type,actor,x,y,other,arr){
			var skill=SkillManger.SkillEffects [type];
			return skill?skill.start(actor,x,y,other,arr):null;
		}

		SkillManger.end=function(type,actor,arr){
			var skill=SkillManger.SkillEffects [type];
			if (skill){
				skill.end(actor,arr);
			}
		}

		SkillManger.endex=function(type,actor,sp){
			var skill=SkillManger.SkillEffects [type];
			if (skill){
				skill.endex(sp);
			}
		}

		SkillManger.effectDic=[];
		SkillManger.SkillEffects=[];
		SkillManger.Normal=0;
		SkillManger.JB1=1;
		SkillManger.NPlay=2;
		return SkillManger;
	})()


	/**
	*... 解析josn文件
	*@author lisa
	*/
	//class laya8.client.player.source.Source
	var Source=(function(){
		function Source(sourId){
			this.id=0;
			this.className=null;
			this.data=null;
			this.id=sourId;
		}

		__class(Source,'laya8.client.player.source.Source');
		var __proto=Source.prototype;
		__proto.sourArgs=function(args){
			this.className=args["clss"];
			this.data=args["args"];
		}

		return Source;
	})()


	//class laya8.client.player.source.SourceLib
	var SourceLib=(function(){
		function SourceLib(){
			console.log("SourceLib.class");
		}

		__class(SourceLib,'laya8.client.player.source.SourceLib');
		SourceLib.newWithLib=function(source,sourceID,type,group){source=source|| SourceLib.getSource(sourceID,type,group);
			var o=ClassUtils.getInstance(source.className);
			o.init.apply(o,source.data);
			return o;
		}

		SourceLib.getSource=function(sourceID,type,group){
			var key=sourceID+'/'+type+'/'+group;
			var source=SourceLib.__sources[key];
			if (!source){
				source=SourceLib.__sources[key]=new Source(sourceID);
				SourceLib.setSource(source,sourceID,type,group);
			}
			return source;
		}

		SourceLib.newWithSceneLib=function(sourceID,type){
			var source=new Source(sourceID);
			source.sourArgs(ConfigData.sourcesScene[sourceID]);
			var o=ClassUtils.getInstance(source.className);
			return o;
		}

		SourceLib.setSource=function(source,id,type,group){
			var _source=source;
			switch(type){
				case 1:
				case 2:
					if (group && ConfigData.sourcesView.hasOwnProperty(group)){
						if (!ConfigData.sourcesView[group][id]){
							alert(">>>>SourceLib setSource>>>>>group:"+group+">>>>>>>>>>>>>>>>id:"+id);
						}
						_source.sourArgs(ConfigData.sourcesView[group][id]);
						}else {
						console.log("source view error");
					}
					break ;
				case 3:
					_source.sourArgs(ConfigData.sourcesPath[id]);
					break ;
				}
		}

		SourceLib.__sources={};
		return SourceLib;
	})()


	/**
	*...
	*@author
	*/
	//class laya8.client.player.source.SourceManger
	var SourceManger=(function(){
		function SourceManger(){}
		__class(SourceManger,'laya8.client.player.source.SourceManger');
		var __proto=SourceManger.prototype;
		__proto.beginLoad=function(roleId){
			if (!roleId)return;
			var vo=ConfigData.itemData[roleId];
			if (vo){
				var roleRes={url:enumSourceViewType.getRoleUrl(vo.souceID),type:"atlas"};
				var res=SourceManger.resLoader[roleId];
				if (res){
					if (!res.isAll){
						res.list.push(roleRes);
						res.isAll=true;
					}
					SnowLoad.I.load(res.list);
				}
				else{
					SnowLoad.I.load([roleRes]);
				}
			}
		}

		__static(SourceManger,
		['I',function(){return this.I=new SourceManger();},'resLoader',function(){return this.resLoader={
				"1040":{
					list:[
					{url:"res/atlas/ailu_skill.atlas",type:"atlas"},
					{url:"res/atlas/skilleffect/1040.atlas",type:"atlas"},
					{url:"Ailu/ailu_skill.ani",type:"json"}],
					isAll:false
				},
				"1038":{
					list:[
					{url:"res/atlas/baofeng.atlas",type:"atlas"},
					{url:"res/atlas/skilleffect/1038.atlas",type:"atlas"},
					{url:"charlotte/scene_2.ani",type:"json"},
					{url:"charlotte/IceStinger.ani",type:"json"},
					{url:"charlotte/IceStingerSpell.ani",type:"json"},
					{url:"res/atlas/IceStingerSpell.atlas",type:"atlas"},
					{url:"res/atlas/IceStinger.atlas",type:"atlas"}],
					isAll:false
				},
				"1041":{
					list:[
					{url:"CaptainD/ChargeAttack.ani",type:"json"},
					{url:"res/atlas/skilleffect/1041.atlas",type:"atlas"}],
					isAll:false
				},
				"1037":{
					list:[
					{url:"res/atlas/skilleffect/1037.atlas",type:"atlas"}],
					isAll:false
				},
				"1039":{
					list:[
					{url:"idol/StarLight.ani",type:"json"},
					{url:"idol/GravityBomb_Begin.ani",type:"json"},
					{url:"res/atlas/skilleffect/1039.atlas",type:"atlas"}],
					isAll:false
				}
		};}

		]);
		return SourceManger;
	})()


	/**
	*...
	*@author lisa
	*/
	//class laya8.client.player.source.SourceType
	var SourceType=(function(){
		function SourceType(){};
		__class(SourceType,'laya8.client.player.source.SourceType');
		SourceType.SOURCE_MAP=1;
		SourceType.SOURCE_VIEW=2;
		SourceType.SOURCE_PATH=3;
		SourceType.SOURCE_SCENE=4;
		return SourceType;
	})()


	/**
	*...
	*@author
	*/
	//class laya8.client.player.special.Snowstorm
	var Snowstorm=(function(){
		function Snowstorm(){
			this.ssSprite=null;
			this.tsp=null;
			this.isInited=false;
			this.beginTime=0;
			this.duration=0;
			this.father=null;
			this.state=-1;
			this.tsp=new TwinsSprite();
		}

		__class(Snowstorm,'laya8.client.player.special.Snowstorm');
		var __proto=Snowstorm.prototype;
		__proto.init=function(w,h){
			if (!this.isInited){
				this.isInited=true;
				this.ssSprite=this.ssSprite || new Sprite();
				this.ssSprite.loadImage("res/obj/left.png",0,0,w/2,h);
			}
		}

		__proto.changeLevel=function(){}
		__proto.addZero=function(value){
			return (value < 0 ?"00":value < 10?"0"+value :""+value);
		}

		__proto.checkState=function(n){
			if (n > this.beginTime){
				var t=(n-this.beginTime)/1000;
				var m=this.addZero(0 | (t/ 60));
				var s=this.addZero((0 |t)% 60);
				this.tsp.showTime(n,m,s);
				if (this.state !=0){
					this.father.addChildAt(this.tsp,0);
					this.state=0;
				}
			}
			else if (n <=this.beginTime && n-this.beginTime < this.duration){
				if (this.state !=1){
					this.tsp.showSnow(this.ssSprite);
					this.father.addChildAt(this.tsp,0);
					this.state=1;
				}
			}
			else{
				if (this.state !=2){
					this.end();
				}
			}
		}

		__proto.begin=function(sp,lastTime,w,h){
			var a=ConfigData.gameCfg[1];
			this.beginTime=a[0];
			this.duration=a[1];
			this.father=sp;
			this.init(w,h);
			this.checkState(lastTime);
		}

		__proto.end=function(){
			this.tsp.clear();
			this.state=2;
		}

		Snowstorm.DAOJISHI=0;
		Snowstorm.SHOW=1;
		Snowstorm.HIDE=2;
		return Snowstorm;
	})()


	/**
	*...
	*@author luohuantao
	*/
	//class laya8.client.player.ViewRect
	var ViewRect=(function(){
		function ViewRect(){
			this.x=NaN;
			this.y=NaN;
			this.right=NaN;
			this.bottom=NaN;
		}

		__class(ViewRect,'laya8.client.player.ViewRect');
		var __proto=ViewRect.prototype;
		__proto.copy=function(src){
			this.x=src.x;
			this.y=src.y;
			this.right=src.right;
			this.bottom=src.bottom;
		}

		return ViewRect;
	})()


	/**
	*elementData 中对应 子弹属性 配置表
	*@author luohuantao
	*/
	//class laya8.client.player.vo.voBulletCfgData
	var voBulletCfgData=(function(){
		function voBulletCfgData(){
			this.id=0;
			this.type="bullet";
			this.sourceID=1;
			this.name="Bullet";
			this.offX=0;
			this.offY=0;
			this.w=20;
			this.h=20;
			this.bloodVal=1;
			this.classID=2;
			this.pathID=1;
			this.insClassName="Bullet";
			this.dclass="";
			this.collLogicID="Bullet";
			this.isCollStart=true;
			this.useNet=true;
			this.ammoTypeID=0;
			this.speedAdd=0;
			this.vanishTime=2000;
			this.collInScene=true;
			this.teamId=0;
		}

		__class(voBulletCfgData,'laya8.client.player.vo.voBulletCfgData');
		return voBulletCfgData;
	})()


	/**
	*特效动画 配置表的结构体， 若需要添加/删除字段，需要跟配置表一起修改
	*effect.json
	*...
	*@author luohuantao
	*/
	//class laya8.client.player.vo.voEffectData
	var voEffectData=(function(){
		function voEffectData(){
			this.url="";
			this.name="";
			this._interval=0;
			this._index=0;
			this._sFrame=0;
			this._eFrame=0;
			this._width=0;
			this._height=0;
			this._scale=0;
			this._alpha=0;
			this.effect=0;
			this.atals=null;
		}

		__class(voEffectData,'laya8.client.player.vo.voEffectData');
		return voEffectData;
	})()


	/**
	*被邀请玩家进入首次进入房间，透传数据
	*@author anling
	*/
	//class laya8.client.player.vo.voExtData
	var voExtData=(function(){
		function voExtData(){
			this.roomId=null;
			this.time=0;
			this.teamId=0;
		}

		__class(voExtData,'laya8.client.player.vo.voExtData');
		return voExtData;
	})()


	/**
	*elementData 中 对应 食物类 的属性描述
	*@author luohuantao
	*/
	//class laya8.client.player.vo.voFoodCfgData
	var voFoodCfgData=(function(){
		function voFoodCfgData(){
			this.id=0;
			this.type="food";
			this.sourceID=1;
			this.name="strawberry";
			this.w=45;
			this.h=45;
			this.offX=15;
			this.offY=4;
			this.children=null;
			this.bloodVal=1;
			this.score=10;
			this.addLife=60;
			this.addbulletNum=0;
			this.classID=5;
			this.pathID=0;
			this.insClassName="Food";
			this.dclass="";
			this.collLogicID="Food";
			this.isCollStart=false;
			this.useNet=true;
			this.collInScene=true;
			this.teamId=0;
			this.invincibleTime=15000;
			this.rebirth=true;
			this.isUpdate=true;
		}

		__class(voFoodCfgData,'laya8.client.player.vo.voFoodCfgData');
		return voFoodCfgData;
	})()


	/**
	*...
	*@author luohuantao
	*/
	//class laya8.client.player.vo.voMapItemData
	var voMapItemData=(function(){
		function voMapItemData(){
			this.id=0;
			this.posId=0;
			this.x=0;
			this.y=0;
			this.gid=0;
		}

		__class(voMapItemData,'laya8.client.player.vo.voMapItemData');
		return voMapItemData;
	})()


	/**英雄表 中role对应的数据结构
	*...
	*@author luohuantao
	*/
	//class laya8.client.player.vo.voRoleCfgData
	var voRoleCfgData=(function(){
		function voRoleCfgData(){
			this.id=0;
			this.type="role";
			this.sourceID=1;
			this.name="SnowRole";
			this.offX=0;
			this.offY=0;
			this.w=72;
			this.h=93;
			this.weight=50;
			this.classID=1;
			this.pathID=2;
			this.insClassName="SnowRole";
			this.dclass="";
			this.collLogicID="SnowRole";
			this.isCollStart=true;
			this.useNet=true;
			this.ammoTypeID=0;
			this.acceS=2;
			this.Sresistance=1;
			this.SmaxSpeed=0.264;
			this.vanishTime=0;
			this.collInScene=true;
			this.teamId=0;
			this.invincibleTime=3000;
			this.dieLost=[];
			this.dyingCountDown=15000;
			this.dyinglastTime=30000;
			this.addbulletNum=10;
			this.scaleFactor=0.075;
			this.beHitEmitter="Emitter10";
			this.heroType=0;
			this.subHeroType=0;
			this.cannXuliScore=0;
			this.baseFrameRate=null;
			this.frameCount=null;
			this.dieLoop=0;
			this.defaultSkill=null;
			this.survival=0;
			this.attack=0;
			this.precise=0;
			this.flexible=0;
			this.vspeed=0;
			this.erupt=0;
			this.propertySkill=null;
		}

		__class(voRoleCfgData,'laya8.client.player.vo.voRoleCfgData');
		return voRoleCfgData;
	})()


	/**
	*...
	*@author rivetr
	*/
	//class laya8.client.QuadTree.QuadRect
	var QuadRect=(function(){
		function QuadRect(){
			this.obj=null;
			this.x=NaN;
			this.y=NaN;
			this.w=NaN;
			this.h=NaN;
			this.id=NaN;
			this.type=null;
			this.teamId=0;
			this.clear();
		}

		__class(QuadRect,'laya8.client.QuadTree.QuadRect');
		var __proto=QuadRect.prototype;
		__proto.clear=function(){
			this.x=0;
			this.y=0;
			this.w=0;
			this.h=0;
			this.id=0;
			this.type="";
			return "";
		}

		__proto.fillData=function(_x,_y,_w,_h,_uid,_type,teamId){
			this.x=_x;
			this.y=_y;
			this.w=_w;
			this.h=_h
			this.id=_uid;
			this.type=_type;
			this.teamId=teamId;
		}

		__proto.cloneTo=function(qRect){
			qRect.x=this.x;
			qRect.y=this.y;
			qRect.w=this.w;
			qRect.h=this.h;
			qRect.id=this.id;
			qRect.type=this.type;
			qRect.teamId=this.teamId;
		}

		__static(QuadRect,
		['TEMP',function(){return this.TEMP=new QuadRect();}
		]);
		return QuadRect;
	})()


	/**
	*...
	*@author luohuantao
	*/
	//class laya8.client.QuadTree.QuadTree
	var QuadTree=(function(){
		function QuadTree(x,y,w,h,maxChildren){
			this._qt=null;
			(x===void 0)&& (x=0);
			(y===void 0)&& (y=0);
			(w===void 0)&& (w=0);
			(h===void 0)&& (h=0);
			(maxChildren===void 0)&& (maxChildren=25);
			function QuadTreeLib (x,y,w,h,options){
				if(typeof x !='number' || isNaN(x))
					x=0;
				if(typeof y !='number' || isNaN(y))
					y=0;
				if(typeof w !='number' || isNaN(w))
					w=10;
				if(typeof h !='number' || isNaN(h))
					h=10;
				var maxc=25;
				var leafratio=0.5;
				if(options){
					if(typeof options.maxchildren=='number')
						if(options.maxchildren > 0)
					maxc=options.maxchildren;
					if(typeof options.leafratio=='number')
						if(options.leafratio >=0)
					leafratio=options.leafratio;
				}
				function validate (obj){
					if(!obj)
						return false;
					if(typeof obj.x !='number' ||
						typeof obj.y !='number' ||
					typeof obj.w !='number' ||
					typeof obj.h !='number')
					return false;
					if(isNaN(obj.x)|| isNaN(obj.y)||
						isNaN(obj.w)|| isNaN(obj.h))
					return false;
					if(obj.w < 0 || obj.h < 0)
						return false;
					return true;
				}
				function isequal (o1,o2){
					if(o1.x==o2.x &&
						o1.y==o2.y &&
					o1.w==o2.w &&
					o1.h==o2.h)
					return true;
					return false;
				}
				function createnode (x,y,w,h){
					return {
						x:x,
						y:y,
						w:w,
						h:h,
						c:[],
						l:[],
						n:[]
					}
				};
				var root=createnode(x,y,w,h);
				function distance (x1,y1,x2,y2){
					return Math.sqrt((x2-x1)*(x2-x1)+(y2-y1)*(y2-y1));
				}
				function distancePL (x,y,x1,y1,dx1,dy1,len1){
					if(!len1)
						len1=-1;
					var t=dx1 *dx1+dy1 *dy1;
					if(t==0)
						return null;
					else {
						t=(x *dy1-y *dx1-x1 *dy1+y1 *dx1)/ t;
						if(Math.abs(dx1)> Math.abs(dy1))
							var s=(x-x1-t *dy1)/ dx1;
						else;
						var s=(y-y1+t *dx1)/ dy1;
						if((s >=0 && s <=len1)|| len1 < 0)
							return {
							s:s,
							t:t,
							x:x1+s *dx1,
							y:y1+s *dy1,
							dist:Math.abs(t)
						};
						else if(s < 0){
							var dist=distance(x,y,x1,y1);
							return {
								s:s,
								dist:dist
							};
							}else {
							var dist=distance(x,y,
							x1+len1*dx1,
							y1+len1*dy1);
							return {
								s:s,
								dist:dist
							};
						}
					}
				}
				function overlap_line (o1,o2,buf){
					if(!o1 || !o2)
						return true;
					var dist=distancePL(o2.x+0.5 *o2.w,
					o2.y+0.5 *o2.h,
					o1.x,o1.y,o1.dx,o1.dy,o1.dist);
					if(dist){
						dist.dist-=buf;
						if(dist.dist < 0)
							return true;
						if(dist.dist *dist.dist <=o2.w *o2.w+o2.h *o2.h)
							return true;
					}
					return false;
				}
				function overlap_rect (o1,o2,buf){
					if(!o1 || !o2)
						return true;
					if(o1.x+o1.w < o2.x-buf ||
						o1.y+o1.h < o2.y-buf ||
					o1.x-buf > o2.x+o2.w ||
					o1.y-buf > o2.y+o2.h)
					return false;
					return true;
				}
				function isleaf (node,obj){
					var leaf=false;
					if(obj.w *obj.h > node.w *node.h *leafratio)
						leaf=true;
					if(obj.x < node.x ||
						obj.y < node.y ||
					obj.x+obj.w > node.x+node.w ||
					obj.y+obj.h > node.y+node.h)
					leaf=true;
					var childnode=null;
					for(var ni=0;ni < node.n.length;ni++)
					if(overlap_rect(obj,node.n[ni],0)){
						if(childnode){
							leaf=true;
							break ;
						}else
						childnode=node.n[ni];
					}
					return {leaf:leaf,
						childnode:childnode };
				}
				function put_to_nodes (node,obj){
					var leaf=isleaf(node,obj);
					if(leaf.leaf)
						node.l.push(obj);
					else if(leaf.childnode)
					put(leaf.childnode,obj);
					else
					return;
				}
				function update_coords (obj,updatedcoords){
					obj.x=((typeof updatedcoords.x=='number')? updatedcoords.x :obj.x);
					obj.y=((typeof updatedcoords.y=='number')? updatedcoords.y :obj.y);
					obj.w=((typeof updatedcoords.w=='number')? updatedcoords.w :obj.w);
					obj.h=((typeof updatedcoords.h=='number')? updatedcoords.h :obj.h);
				}
				function update (node,obj,attr,updatedcoords){
					if(typeof attr=='object' && typeof updatedcoords=='undefined'){
						updatedcoords=attr;
						attr=false;
					}
					if(!validate(obj)|| typeof updatedcoords=='undefined')
						return false;
					if(!attr)
						attr=false;
					else if(typeof attr !='string')
					attr='id';
					var count=0;
					for(var ci=0;ci < node.c.length;ci++)
					if((attr && node.c[ci][attr]==obj[attr])||
						(!attr && isequal(node.c[ci],obj))){
						var orig=node.c[ci];
						update_coords(orig,updatedcoords);
						node.c.splice(ci,1);
						put(root,orig);
						return true;
					}
					for(var ci=0;ci < node.l.length;ci++)
					if((attr && node.l[ci][attr]==obj[attr])||
						(!attr && isequal(node.l[ci],obj))){
						var orig=node.l[ci];
						update_coords(orig,updatedcoords);
						node.l.splice(ci,1);
						put(root,orig);
						return true;
					};
					var leaf=isleaf(node,obj);
					if(!leaf.leaf && leaf.childnode)
						if(update(leaf.childnode,obj,attr,updatedcoords))
					return true;
					return false;
				}
				function remove (node,obj,attr){
					if(!validate(obj))
						return 0;
					if(!attr)
						attr=false;
					else if(typeof attr !='string')
					attr='id';
					var count=0;
					for(var ci=0;ci < node.c.length;ci++)
					if((attr && node.c[ci][attr]==obj[attr])||
						(!attr && isequal(node.c[ci],obj))){
						count++;
						node.c.splice(ci,1);
						ci--;
					}
					for(var ci=0;ci < node.l.length;ci++)
					if((attr && node.l[ci][attr]==obj[attr])||
						(!attr && isequal(node.l[ci],obj))){
						count++;
						node.l.splice(ci,1);
						ci--;
					};
					var leaf=isleaf(node,obj);
					if(!leaf.leaf && leaf.childnode)
						return count+remove(leaf.childnode,obj,attr);
					return count;
				}
				function put (node,obj){
					if(!validate(obj))
						return;
					if(node.n.length==0){
						node.c.push(obj);
						if(node.c.length > maxc){
							var w2=node.w / 2;
							var h2=node.h / 2;
							node.n.push(createnode(node.x,node.y,w2,h2),
							createnode(node.x+w2,node.y,w2,h2),
							createnode(node.x,node.y+h2,w2,h2),
							createnode(node.x+w2,node.y+h2,w2,h2));
							for(var ci=0;ci < node.c.length;ci++)
							put_to_nodes(node,node.c[ci]);
							node.c=[];
						}
					}else
					put_to_nodes(node,obj);
				}
				function getter (overlapfun,node,obj,buf,strict,callbackOrArray){
					for(var li=0;li < node.l.length;li++)
					if(!strict || overlapfun(obj,node.l[li],buf))
						if(typeof callbackOrArray=='object')
					callbackOrArray.push(node.l[li]);
					else if(!callbackOrArray(node.l[li]))
					return false;
					for(var li=0;li < node.c.length;li++)
					if(!strict || overlapfun(obj,node.c[li],buf))
						if(typeof callbackOrArray=='object')
					callbackOrArray.push(node.c[li]);
					else if(!callbackOrArray(node.c[li]))
					return false;
					for(var ni=0;ni < node.n.length;ni++){
						if(overlapfun(obj,node.n[ni],buf)){
							if(typeof callbackOrArray=='object')
								callbackOrArray.concat(getter(overlapfun,node.n[ni],obj,buf,strict,callbackOrArray));
							else if(!getter(overlapfun,node.n[ni],obj,buf,strict,callbackOrArray))
							return false;
						}
					}
					return true;
				}
				function get_rect (node,obj,buf,callbackOrArray){
					return getter(overlap_rect,node,obj,buf,true,callbackOrArray);
				}
				function get_line (node,obj,buf,callbackOrArray){
					return getter(overlap_line,node,obj,buf,false,callbackOrArray);
				}
				function getEx (node,obj,buf,callbackOrArray){
					if((typeof buf=='function' || typeof buf=='object')&& typeof callbackOrArray=='undefined'){
						callbackOrArray=buf;
						buf=0;
					}
					if(typeof callbackOrArray=='undefined'){
						callbackOrArray=[];
						buf=0;
					}
					if(obj==null)
						get_rect(node,obj,buf,callbackOrArray);
					else if(typeof obj.x=='number' &&
					typeof obj.y=='number' &&
					!isNaN(obj.x)&& !isNaN(obj.y)){
						if(typeof obj.dx=='number' &&
							typeof obj.dy=='number' &&
						!isNaN(obj.dx)&& !isNaN(obj.dy))
						get_line(node,obj,buf,callbackOrArray);
						else if(typeof obj.w=='number' &&
						typeof obj.h=='number' &&
						!isNaN(obj.w)&& !isNaN(obj.h))
						get_rect(node,obj,buf,callbackOrArray);
					}
					if(typeof callbackOrArray=='object')
						return callbackOrArray;
				}
				return {
					getEx:function (obj,buf,callbackOrArray){
						return getEx(root,obj,buf,callbackOrArray);
					},
					put:function (obj){
						put(root,obj);
					},
					update:function (obj,attr,updatedcoords){
						return update(root,obj,attr,updatedcoords);
					},
					remove:function (obj,attr){
						return remove(root,obj,attr);
					},
					clear:function (){
						root=createnode(x,y,w,h);
					},
					stringify:function (){
						var strobj={
							x:x,y:y,w:w,h:h,
							maxc:maxc,
							leafratio:leafratio,
							root:root
						};
						try {
							return JSON.stringify(strobj);
							}catch(err){
							return null;
						}
					},
					parse:function (str){
						if(typeof str=='string')
							str=JSON.parse(str);
						x=str.x;
						y=str.y;
						w=str.w;
						h=str.h;
						maxc=str.maxc;
						leafratio=str.leafratio;
						root=str.root;
					}
				};
			}
			this._qt=QuadTreeLib(x,y,w,h,{maxChildren:maxChildren });
			this._qt.clear();
		}

		__class(QuadTree,'laya8.client.QuadTree.QuadTree');
		var __proto=QuadTree.prototype;
		/**
		*
		*@param obj
		*/
		__proto.put=function(obj){
			this._qt.put(obj);
		}

		/**
		*删除4叉树内的某个结点.
		*@param obj
		*@param idstr
		*/
		__proto.remove=function(obj){
			this._qt.remove(obj,"id");
		}

		/**
		*
		*@param obj
		*@param idstr
		*@param update
		*/
		__proto.update=function(obj,idstr,update){
			return this._qt.update(obj,idstr,update);
		}

		/**
		*
		*@param obj
		*@param iterFunc
		*/
		__proto.getAreaObjList=function(areaObj){
			return this._qt.getEx(areaObj);
		}

		/**
		*
		*/
		__proto.clear=function(){
			this._qt.clear();
		}

		QuadTree.ddd={};
		return QuadTree;
	})()


	/**
	*...
	*@author anling
	*/
	//class laya8.client.utils.FilterUtil
	var FilterUtil=(function(){
		function FilterUtil(){
			this.curFilter=null;
			this._deltaArr=[0,0,0,0,0,0,0,0,0,0,0];
			this._time=500;
			this._timeStep=100;
			this._countTime=0;
			this.curColor=-1;
			this._redMat=null;
		}

		__class(FilterUtil,'laya8.client.utils.FilterUtil');
		var __proto=FilterUtil.prototype;
		__proto.initTurnGray=function(){
			this.curColor=1;
			this._time=1000;
			this.curFilter=new ColorFilter
			([
			1,0,0,0,0,
			0,1,0,0,0,
			0,0,1,0,0,
			0,0,0,1,0]);
			this._deltaArr[0]=this.getDelta(1,0.3086,this._time);
			this._deltaArr[5]=this.getDelta(1,0.6094,this._time);
			this._deltaArr[10]=this.getDelta(1,0.0820,this._time);
			this._deltaArr[1]=this._deltaArr[9]=this.getDelta(0,0.6094,this._time);
			this._deltaArr[2]=this._deltaArr[6]=this.getDelta(0,0.0820,this._time);
			this._deltaArr[4]=this._deltaArr[8]=this.getDelta(0,0.3086,this._time);
			this._deltaArr[3]=this._deltaArr[7]=0;
		}

		__proto.initTurnRed=function(){
			this.curColor=2;
			this._time=ConfigData.gameCfg["roleRedTime"];
			this._redMat=ConfigData.gameCfg ["ColorFilter"];
			this.curFilter=new ColorFilter(this._redMat.concat());
			this._deltaArr[0]=this._deltaArr[5]=this._deltaArr[7]=0;
			this._deltaArr[1]=this.getDelta(this._redMat[1],0,this._time);
			this._deltaArr[2]=this.getDelta(this._redMat[2],0,this._time);
			this._deltaArr[3]=this.getDelta(this._redMat[3],0,this._time);
			this._deltaArr[6]=this.getDelta(0,1,this._time);
		}

		// 变为指定颜色
		__proto.turnToColor=function(target){
			Laya.stage.timerLoop(this._timeStep,this,this.addColorDelta,[false,1,target]);
		}

		// 变为初始颜色
		__proto.turnToOrg=function(target,handler){
			Laya.stage.timerLoop(this._timeStep,this,this.addColorDelta,[true,-1,target,handler]);
		}

		__proto.addColorDelta=function(reset,scale,target,handler){
			for (var i=0;i <=10;i++){
				this.curFilter._mat[i]+=this._deltaArr[i] *this._timeStep *scale*0.5;
			}
			if(Render.isConchNode)target.conchModel.setFilterMatrix(this.curFilter._mat,this.curFilter._alpha);
			this._countTime+=this._timeStep;
			if (this._countTime >=this._time){
				Laya.stage.timer.clear(this,this.addColorDelta);
				this._countTime=0;
				if (reset)this.recover(target,handler);
			}
		}

		// 获得渐变差值
		__proto.getDelta=function(from,to,time){
			return (to-from)/ time;
		}

		__proto.recover=function(target,handler){
			if (target)target.filters=null;
			Laya.stage.clearTimer(this,this.addColorDelta);
			handler && handler.run();
			switch(this.curColor){
				case 1:this.curFilter._mat.set(FilterUtil._orgMat.concat(),0);break ;
				case 2:this.curFilter._mat.set([1,0.7,0.7,0.7,0,0,0,0,0,0,0,0,0,0,0,0.7],0);break ;
				}
		}

		FilterUtil._Gray=1;
		FilterUtil._Red=2;
		FilterUtil._grayr=0.3086;
		FilterUtil._grayg=0.6094;
		FilterUtil._grayb=0.0820;
		__static(FilterUtil,
		['_orgMat',function(){return this._orgMat=
			[
			1,0,0,0,
			0,1,0,0,
			0,0,1,0,
			0,0,0,1];}
		]);
		return FilterUtil;
	})()


	/**
	*...
	*@author Chen Gong
	*/
	//class laya8.client.utils.LoadingWait
	var LoadingWait=(function(){
		function LoadingWait(caller,maxTime,onPrecent,endCall,wait){
			this._startTime=NaN;
			this._totalTime=0;
			this._onPrecent=null;
			this._endCall=null;
			this._del=false;
			this._caller=null;
			this._wait=0;
			this._db=1;
			(wait===void 0)&& (wait=0);
			this._caller=caller;
			this._totalTime=maxTime;
			this._startTime=Laya.timer.currTimer;
			this._onPrecent=onPrecent;
			this._endCall=endCall;
			this._wait=wait;
			this._db=1;
			Laya.timer.loop(1000/60,this,this._changePrecent);
			this.__changePrecent(0);
		}

		__class(LoadingWait,'laya8.client.utils.LoadingWait');
		var __proto=LoadingWait.prototype;
		__proto.__changePrecent=function(p){
			if (!this._onPrecent)
				return true;
			if (this._caller){
				return this._caller._onPrecent(p);
			}
			return this._onPrecent(p);
		}

		__proto._changePrecent=function(){
			var delay=Laya.timer.currTimer-this._startTime;
			if (delay < this._wait)return;
			delay-=this._wait;
			var p=delay / this._totalTime;
			if ((Player.curUser && Player.isMapInit)|| GameSocket.isAgainConnect){
				this._db *=1.2;
			}
			p=p *this._db;
			this._caller.prog && (this._caller.prog.value=p);
			if (this._onPrecent){
				if (!this.__changePrecent(p))this.del();
				return;
			}
			if (p>1.1){
				this.del();
			}
		}

		__proto.del=function(){
			if (!this._del){
				this._del=true;
				if (this._endCall){
					this._endCall();
					}else{
					if (this._caller)
						this._caller._endCall();
				}
				Laya.timer.clear(this,this._changePrecent);
			}
		}

		return LoadingWait;
	})()


	/**
	*...
	*@author
	*/
	//class laya8.client.utils.ShowJiFen
	var ShowJiFen=(function(){
		function ShowJiFen(){
			this.destroyed=false;
			this.dir=0;
			this.score=0;
			this.type=0;
			this.user=null;
			this.isBaoJi=false;
			this.next=null;
			this.frame=0;
		}

		__class(ShowJiFen,'laya8.client.utils.ShowJiFen');
		var __proto=ShowJiFen.prototype;
		__proto.end=function(){
			if (this.next){
				ShowJiFen.current=this.next;
				ShowJiFen.current.run();
			}
			else{
				ShowJiFen.current=null;
				ShowJiFen.lastOne=null;
			}
			this.destroy();
		}

		__proto.destroy=function(){
			this.next=null;
			this.destroyed=true;
			this.user=null;
			ShowJiFen.Pool.push(this);
		}

		__proto.show=function(){
			if (this.score > 0){
				FlyThings.PlayFontClipText((this.type==3)?0:2,this.score,this.user,0,this.isBaoJi);
			}
			else if (this.score < 0){
				FlyThings.PlayFontClipText(1,this.score,this.user,this.dir,this.isBaoJi);
			}
		}

		//
		__proto.run=function(){
			ShowJiFen.current=this;
			switch(this.type){
				case 1:
				case 2:
				case 0:
				case 3:
					this.show();
					Laya.timer.once(200,this,this.end);
					break ;
				}
		}

		ShowJiFen.clearAll=function(){
			ShowJiFen.snowScore=0;
			if (ShowJiFen.current){
				ShowJiFen.current.next=null;
				ShowJiFen.current=null;
			}
			ShowJiFen.lastOne=null;
		}

		ShowJiFen.create=function(num,type,user,dir,isBaoji){
			if (!user){
				return null;
			}
			if (user._classid !=1)return null;
			var rs;
			rs=ShowJiFen.Pool.length > 0?ShowJiFen.Pool.pop():new ShowJiFen();
			rs.destroyed=false;
			rs.score=num;
			rs.type=type;
			rs.user=user;
			rs.dir=dir;
			rs.isBaoJi=isBaoji;
			if (ShowJiFen.lastOne){
				ShowJiFen.lastOne.next=rs;
			}
			ShowJiFen.lastOne=rs;
			if (!ShowJiFen.current){
				ShowJiFen.current=rs;
				rs.run();
			}
			return rs;
		}

		ShowJiFen.Pool=[];
		ShowJiFen.current=null
		ShowJiFen.lastOne=null
		ShowJiFen.SNOW=0;
		ShowJiFen.BULLET=1;
		ShowJiFen.KILL=2;
		ShowJiFen.BLOOD=3;
		ShowJiFen.snowScore=0;
		return ShowJiFen;
	})()


	/**
	*...
	*@author ...
	*/
	//class LoadingSplash
	var LoadingSplash=(function(){
		function LoadingSplash(){
			this.box=null;
			this.guizeBg=null;
			this.bgImg=null;
			this.whiteImgBg=null;
			this._logoani=null;
			this.snowImgBg=null;
			this.snowImg=null;
			this.tishiTxt=null;
			this.times=0;
			this._testImage=null;
			this._callBack=null;
			this._tempNum=0;
			this._timeout=25;
			this.isMenuListComplete=false;
			this.isComplete=false;
		}

		__class(LoadingSplash,'LoadingSplash');
		var __proto=LoadingSplash.prototype;
		__proto.addSplash=function(callBack){
			this._callBack=callBack;
			this.box=new Box();
			this.box.top=this.box.bottom=0;
			Laya.stage.addChild(this.box);
			Laya.loader.load([{"url":"MessageBox/loginBG1.jpg",type:"image"}],Handler.create(this,this.init));
		}

		__proto.init=function(){
			if(Browser.onMiniGame && MiniAdpter.systemInfo.model.indexOf("iPhone X")!=-1){
				LoadingSplash.chazhi=123;
				this.box.left=this.box.right=LoadingSplash.chazhi;
				LoadingSplash.leftImg=new Image();
				LoadingSplash.leftImg.skin="layaNativeDir/img_iphonex.png";
				LoadingSplash.leftImg.width=LoadingSplash.chazhi;
				LoadingSplash.leftImg.top=LoadingSplash.leftImg.bottom=0;
				Laya.stage.addChild(LoadingSplash.leftImg);
				LoadingSplash.rightImg=new Image();
				LoadingSplash.rightImg.skin="layaNativeDir/img_iphonex.png";
				LoadingSplash.rightImg.right=LoadingSplash.chazhi;
				LoadingSplash.rightImg.pivot(LoadingSplash.rightImg.width/2,Laya.stage.height/2);
				LoadingSplash.rightImg.scaleX=-1;
				LoadingSplash.rightImg.bottom=LoadingSplash.rightImg.top=0;
				Laya.stage.addChild(LoadingSplash.rightImg);
				}else{
				this.box.left=this.box.right=0;
			};
			var w=Laya.stage.width;
			var h=Laya.stage.height;
			this.whiteImgBg=new Image();
			this.whiteImgBg.skin="MessageBox/loginBG1.jpg";
			this.box.addChild(this.whiteImgBg);
			this.whiteImgBg.left=this.whiteImgBg.right=this.whiteImgBg.bottom=this.whiteImgBg.top=0;
			this.snowImgBg=new Image();
			this.snowImgBg.skin="layaNativeDir/img_info1.png";
			this.snowImgBg.sizeGrid="0,23,0,31";
			this.snowImgBg.size(285,50);
			this.snowImgBg.centerX=0.5;
			this.snowImgBg.bottom=60;
			this.box.addChild(this.snowImgBg);
			this.tishiTxt=new Text();
			this.tishiTxt.color="#ffffff";
			this.tishiTxt.fontSize=32;
			this.tishiTxt.text="5秒后立即开始";
			this.tishiTxt.width=this.tishiTxt.textWidth;
			this.tishiTxt.align="center";
			this.tishiTxt.pos(20,8);
			this.snowImgBg.addChild(this.tishiTxt);
			this.snowImg=new Image();
			this.snowImg.skin="layaNativeDir/img_info2.png";
			this.snowImg.anchorX=this.snowImg.anchorY=0.5;
			this.snowImg.pos(this.tishiTxt.x+this.tishiTxt.textWidth+25,24);
			this.lodAnim(this.snowImg,this.tishiTxt);
			this.snowImgBg.addChild(this.snowImg);
			this._testImage=new Image();
			Laya.stage.addChild(this._testImage);
			this._testImage.pos(-2000,-2000);
			this._testImage.skin="res/atlas/newhall.png";
			this.guizeBg=new Image();
			this.guizeBg.skin="layaNativeDir/img_guize.png";
			this.box.addChild(this.guizeBg);
			this.guizeBg.alpha=1;
			this.guizeBg.bottom=15;
			this.guizeBg.centerX=0.5;
			this._callBack !=null && this._callBack.run();
		}

		__proto.lodAnim=function(sp,txt){
			Laya.timer.frameLoop(1,this,this.onRotation,[sp]);
			this.times=5;
			Laya.timer.loop(1000,this,this.setTxt,[txt]);
		}

		__proto.onRotation=function(sp){
			sp.rotation+=6;
		}

		__proto.setTxt=function(txt){
			this.times--;
			this._tempNum++;
			var s="";
			try{
			}catch (e){}
			if (this.times < 1){
				txt.text="数据准备中"+(s==""?"":"("+s+")");
				if(this.isMenuListComplete || (this._tempNum > this._timeout))
					this.onMcPlayComplete();
				}else{
				txt.text=this.times+"秒后立即开始"+(s==""?"":"("+s+")");
				if(this.isMenuListComplete)
					this.onMcPlayComplete();
			}
		}

		__proto.onMcPlayComplete=function(){
			this._testImage.skin="common/bg.jpg";
			this._testImage.pos(0,0);
			this._testImage.visible=false;
			this.isComplete=true;
			if(this._tempNum < this._timeout){
				if(this.isComplete)
					this.removeSplash();
			};
			var obj=Laya.loader.getRes("json/gameconfig.json");
			if(obj==null){
				CrazySnowball.onShowDialog();
				Laya.timer.clear(this,this.onRotation);
				Laya.timer.clear(this,this.setTxt);
			}
		}

		__proto.removeSplash=function(){
			this.isMenuListComplete=true;
			if(!this.isComplete)
				return;
			this.dispose();
		}

		__proto.dispose=function(){
			this.isComplete=true;
			Laya.timer.clear(this,this.onRotation);
			Laya.timer.clear(this,this.setTxt);
			if(this._logoani){
				this._logoani.visible=false;
				this._logoani.destroy();
				this._logoani=null;
			}
			if(this.guizeBg){
				this.guizeBg.removeSelf();
				this.guizeBg=null;
			}
			if(this.whiteImgBg){
				this.whiteImgBg.removeSelf();
				this.whiteImgBg=null;
			}
			if(this._testImage){
				this._testImage.removeSelf();
				this._testImage=null;
			}
			if(LoadingSplash.leftImg){
				LoadingSplash.leftImg.removeSelf();
				LoadingSplash.leftImg=null;
			}
			if(LoadingSplash.rightImg){
				LoadingSplash.rightImg.removeSelf();
				LoadingSplash.rightImg=null;
			}
			if(this.bgImg){
				this.bgImg.removeSelf();
				this.bgImg=null;
			}
			if(this.box){
				this.box.removeChildren();
				this.box.removeSelf();
				this.box=null;
			}
			MenuList.I && MenuList.I.onPlayAni();
		}

		__getset(1,LoadingSplash,'I',function(){
			return LoadingSplash._ins || (LoadingSplash._ins=new LoadingSplash());
		});

		LoadingSplash.leftImg=null
		LoadingSplash.rightImg=null
		LoadingSplash._ins=null
		LoadingSplash.chazhi=0;
		return LoadingSplash;
	})()


	/**
	*...日志信息。
	*@author laivioo
	*/
	//class log.Log_Test
	var Log_Test=(function(){
		function Log_Test(){
			Log_Test.content="Logs: \n\r";
		}

		__class(Log_Test,'log.Log_Test');
		//+":"+d.milliseconds;
		__getset(1,Log_Test,'content',function(){
			return Log_Test._content;
			},function(value){
			Log_Test._content=value;
			Log_Test.changeContentHd && Log_Test.changeContentHd.runWith(Log_Test.content);
		});

		Log_Test.debug=function(__msg){
			var msg=arguments;
			if(CrazySnowball.isRelease)
				return;
			if (msg[0]==1){
				Log_Test.log(Log_Test.argumentToString(msg),0,"Debug");
			}
		}

		Log_Test.argumentToString=function(__arg){
			var arg=arguments;
			var arr=arg;
			arr=arg[0];;
			var msg="";
			for (var i=0;i < arr.length;i++){
				msg+=arr[i]+","
			}
			return msg;
		}

		Log_Test.info=function(__msg){
			var msg=arguments;
			if(CrazySnowball.isRelease)
				return;
			Log_Test.log(Log_Test.argumentToString(msg),1,"Info");
		}

		Log_Test.error=function(__msg){
			var msg=arguments;
			if(CrazySnowball.isRelease)
				return;
			Log_Test.log(Log_Test.argumentToString(msg),2,"Error");
		}

		Log_Test.log=function(msg,level,type){
			var date=Log_Test.getDayString(new Date());
			var all="[clientTrace_"+log.Log_Test.levelNames[level]+"]"+"["+date+"]"+msg;
			if (type=="Debug" && (Browser.window.location.href+"").indexOf("&debug=true")==-1)return;
			var color=Log_Test.levelColors[level];
			console.log("%c"+all,"color:"+color);
		}

		Log_Test.getDayString=function(d){
			return d.getFullYear()+"-"+(d.getMonth()+1)+"-"+d.getDate()+" "+d.getHours()+":"+d.getMinutes()+":"+d.getSeconds()+"::"+d.getMilliseconds();
		}

		Log_Test.logView=function(){}
		Log_Test.DEBUG_NO=1;
		Log_Test.level=0;
		Log_Test._content="";
		Log_Test.changeContentHd=null
		Log_Test.MSG_MAX=200;
		Log_Test._i=null
		__static(Log_Test,
		['levelNames',function(){return this.levelNames=["Debug","Info","Error"];},'levelColors',function(){return this.levelColors=["#5180CE","#6B8E24","#FF0000"];},'MSG_TYPE',function(){return this.MSG_TYPE=["send","receive"];}
		]);
		return Log_Test;
	})()


	/**
	*...
	*@author lifei
	*/
	//class Lparticle.Affector.Affector
	var Affector=(function(){
		function Affector(){}
		__class(Affector,'Lparticle.Affector.Affector');
		__static(Affector,
		['move',function(){return this.move=Move;},'size',function(){return this.size=Size;},'color',function(){return this.color=Color;},'alpha',function(){return this.alpha=Alpha;},'rotation',function(){return this.rotation=Rotation;}
		]);
		return Affector;
	})()


	/**
	*...
	*@author lifei
	*/
	//class Lparticle.Affector.Alpha
	var Alpha=(function(){
		function Alpha(system,params){
			this.fromAlphaVal=null;
			this.toAlphaVal=null;
			this.fromAlphaVal=RangValue.rangeValue(params.from);
			this.toAlphaVal=RangValue.rangeValue(params.to);
		}

		__class(Alpha,'Lparticle.Affector.Alpha');
		var __proto=Alpha.prototype;
		Laya.imps(__proto,{"Lparticle.Affector.AffectorInterface":true})
		/*INTERFACE Lparticle.Affector.AffectorInterface */
		__proto.initParticle=function(p){
			p.alphaFrom=this.fromAlphaVal();
			p.alphaTo=this.toAlphaVal();
			return p.alpha=p.alphaFrom;
		}

		__proto.updateParticle=function(dt,p){
			var alpha=NaN,t=NaN;
			t=p.life / p.maxLife;
			alpha=p.alphaFrom *t+p.alphaTo *(1-t);
			if (p.color){
				p.color[3]=alpha;
			}
			return p.alpha=alpha;
		}

		return Alpha;
	})()


	/**
	*...
	*@author lifei
	*/
	//class Lparticle.Affector.Color
	var Color=(function(){
		function Color(system,params){
			this.fromColorVal=null;
			this.toColorVal=null;
			this.fromColorVal=RangValue.colorRangeValue(params.from);
			this.toColorVal=RangValue.colorRangeValue(params.to);
		}

		__class(Color,'Lparticle.Affector.Color');
		var __proto=Color.prototype;
		Laya.imps(__proto,{"Lparticle.Affector.AffectorInterface":true})
		/*INTERFACE Lparticle.Affector.AffectorInterface */
		__proto.initParticle=function(p){
			p.colorFrom=this.fromColorVal();
			p.colorTo=this.toColorVal();
			return p.color=p.colorFrom.slice();
		}

		__proto.updateParticle=function(dt,p){
			var t=NaN;
			t=p.life / p.maxLife;
			p.color[0]=p.colorFrom[0] *t+p.colorTo[0] *(1-t);
			p.color[1]=p.colorFrom[1] *t+p.colorTo[1] *(1-t);
			p.color[2]=p.colorFrom[2] *t+p.colorTo[2] *(1-t);
			return p.color[3]=p.colorFrom[3] *t+p.colorTo[3] *(1-t);
		}

		return Color;
	})()


	/**
	*...
	*@author lifei
	*/
	//class Lparticle.Affector.Move
	var Move=(function(){
		function Move(){}
		__class(Move,'Lparticle.Affector.Move');
		var __proto=Move.prototype;
		Laya.imps(__proto,{"Lparticle.Affector.AffectorInterface":true})
		__proto.initParticle=function(p){
			p.x=p.x || 0;
			p.y=p.y || 0;
			if (p.accx){
				p.dx=p.dx || 0;
			}
			if (p.accy){
				p.dy=p.dy || 0;
			}
		}

		__proto.updateParticle=function(dt,p){
			if (p.dx){
				p.x+=p.dx *dt;
			}
			if (p.dy){
				p.y+=p.dy *dt;
			}
			if (p.accx){
				p.dx+=p.accx *dt;
			}
			if (p.accy){
				p.dy+=p.accy *dt;
			}
		}

		return Move;
	})()


	/**
	*...
	*@author lifei
	*/
	//class Lparticle.Affector.Rotation
	var Rotation=(function(){
		function Rotation(system,params){
			this.fromAngleVal=null;
			this.toAngleVal=null;
			this.fromAngleVal=RangValue.rangeValue(params.from);
			this.toAngleVal=RangValue.rangeValue(params.to);
		}

		__class(Rotation,'Lparticle.Affector.Rotation');
		var __proto=Rotation.prototype;
		Laya.imps(__proto,{"Lparticle.Affector.AffectorInterface":true})
		/*INTERFACE Lparticle.Affector.AffectorInterface */
		__proto.initParticle=function(p){
			p.angleFrom=this.fromAngleVal();
			p.angleTo=this.toAngleVal();
			return p.angle=p.angleFrom;
		}

		__proto.updateParticle=function(dt,p){
			var t=NaN;
			t=p.life / p.maxLife;
			return p.rotation=p.angleFrom *t+p.angleTo *(1-t);
		}

		return Rotation;
	})()


	/**
	*...
	*@author lifei
	*/
	//class Lparticle.Affector.Size
	var Size=(function(){
		function Size(system,params){
			this.fromSizeVal=null;
			this.toSizeVal=null;
			this.fromSizeVal=RangValue.rangeValue(params.from);
			this.toSizeVal=RangValue.rangeValue(params.to);
		}

		__class(Size,'Lparticle.Affector.Size');
		var __proto=Size.prototype;
		Laya.imps(__proto,{"Lparticle.Affector.AffectorInterface":true})
		/*INTERFACE Lparticle.Affector.AffectorInterface */
		__proto.initParticle=function(p){
			p.sizeFrom=this.fromSizeVal();
			p.sizeTo=this.toSizeVal();
			return p.size=p.sizeFrom;
		}

		__proto.updateParticle=function(dt,p){
			var t=NaN;
			t=p.life / p.maxLife;
			return p.size=p.sizeFrom *t+p.sizeTo *(1-t);
		}

		return Size;
	})()


	/**
	*...
	*@author lifei
	*/
	//class Lparticle.Emitter.Emitter
	var Emitter=(function(){
		function Emitter(){}
		__class(Emitter,'Lparticle.Emitter.Emitter');
		__static(Emitter,
		['once',function(){return this.once=Once;},'infinite',function(){return this.infinite=Infinite;}
		]);
		return Emitter;
	})()


	/**
	*...
	*@author lifei
	*/
	//class Lparticle.Emitter.Infinite
	var Infinite=(function(){
		function Infinite(system,params){
			this.system=null;
			this.rateVal=null;
			this.lifeVal=null;
			this.emitted=false;
			this.timer=NaN;
			this.duration=NaN;
			this.system=system;
			this.rateVal=RangValue.rangeValue(params.rate);
			this.lifeVal=RangValue.rangeValue(params.life);
			this.emitted=false;
			this.timer=0;
			this._updateDuration();
		}

		__class(Infinite,'Lparticle.Emitter.Infinite');
		var __proto=Infinite.prototype;
		__proto._updateDuration=function(){
			var rate=NaN;
			rate=this.rateVal();
			if (rate > 0.001){
				return this.duration=1 / rate;
				}else {
				return this.duration=10e10;
			}
		}

		__proto.update=function(dt){
			this.timer+=dt;
			while (this.timer > this.duration){
				this.timer-=this.duration;
				this.system.spawnParticle({
					life:this.lifeVal()
				});
				this._updateDuration();
			}
			return true;
		}

		__proto.isAlive=function(){
			return true;
		}

		return Infinite;
	})()


	/**
	*...
	*@author lifei
	*/
	//class Lparticle.Emitter.Once
	var Once=(function(){
		function Once(system,params){
			this.system=null;
			this.count=NaN;
			this.lifeVal=null;
			this.emitted=false;
			this.system=system;
			this.count=RangValue.rangeValue(params.count)();
			this.lifeVal=RangValue.rangeValue(params.life);
			this.emitted=false;
		}

		__class(Once,'Lparticle.Emitter.Once');
		var __proto=Once.prototype;
		__proto.update=function(){
			var i=0,j=0,ref=0;
			if (!this.emitted){
				for (i=j=1,ref=this.count;1 <=ref ? j <=ref :j >=ref;i=1 <=ref ?++j :--j){
					this.system.spawnParticle({
						life:this.lifeVal()
					});
				}
				this.emitted=true;
			}
			return true;
		}

		__proto.isAlive=function(){
			return !this.emitted;
		}

		return Once;
	})()


	/**
	*...
	*@author lifei
	*/
	//class Lparticle.Initializer.AttachNodePos
	var AttachNodePos=(function(){
		function AttachNodePos(system,params){
			this.system=null;
			this.attachToNode=null;
			this.system=system;
			this.attachToNode=params.node;
		}

		__class(AttachNodePos,'Lparticle.Initializer.AttachNodePos');
		var __proto=AttachNodePos.prototype;
		Laya.imps(__proto,{"Lparticle.Initializer.InitializerInterface":true})
		/*INTERFACE Lparticle.Initializer.InitializerInterface */
		__proto.initParticle=function(p){
			var globalPos,localPos;
			globalPos=this.attachToNode.localToGlobal(new Point(this.system.x,this.system.y));
			localPos=this.system.globalToLocal(globalPos);
			p.x=localPos.x;
			return p.y=localPos.y;
		}

		return AttachNodePos;
	})()


	/**
	*...
	*@author lifei
	*/
	//class Lparticle.Initializer.Color
	var Color$1=(function(){
		function Color(system,params){
			this.colorVal=null;
			this.colorVal=RangValue.colorRangeValue(params.color);
		}

		__class(Color,'Lparticle.Initializer.Color',null,'Color$1');
		var __proto=Color.prototype;
		Laya.imps(__proto,{"Lparticle.Initializer.InitializerInterface":true})
		/*INTERFACE Lparticle.Initializer.InitializerInterface */
		__proto.initParticle=function(p){
			return p.color=this.colorVal();
		}

		return Color;
	})()


	/**
	*...
	*@author lifei
	*/
	//class Lparticle.Initializer.DeltaSpeed
	var DeltaSpeed=(function(){
		function DeltaSpeed(system,params){
			this.speedXVal=null;
			this.speedYVal=null;
			this.mulVal=null;
			var ref;
			this.speedXVal=RangValue.rangeValue(params.x);
			this.speedYVal=RangValue.rangeValue(params.y);
			this.mulVal=RangValue.rangeValue((ref=params.mul)!=null ? ref :1);
		}

		__class(DeltaSpeed,'Lparticle.Initializer.DeltaSpeed');
		var __proto=DeltaSpeed.prototype;
		Laya.imps(__proto,{"Lparticle.Initializer.InitializerInterface":true})
		/*INTERFACE Lparticle.Initializer.InitializerInterface */
		__proto.initParticle=function(p){
			var dx=NaN,dy=NaN,mul=NaN;
			dx=p.dx || 0;
			dy=p.dy || 0;
			mul=this.mulVal();
			p.dx=(dx+this.speedXVal())*mul;
			return p.dy=(dy+this.speedYVal())*mul;
		}

		return DeltaSpeed;
	})()


	/**
	*...
	*@author lifei
	*/
	//class Lparticle.Initializer.Force
	var Force=(function(){
		function Force(system,params){
			this.forceXVal=null;
			this.forceYVal=null;
			this.forceXVal=RangValue.rangeValue(params.x);
			this.forceYVal=RangValue.rangeValue(params.y);
		}

		__class(Force,'Lparticle.Initializer.Force');
		var __proto=Force.prototype;
		Laya.imps(__proto,{"Lparticle.Initializer.InitializerInterface":true})
		/*INTERFACE Lparticle.Initializer.InitializerInterface */
		__proto.initParticle=function(p){
			p.accx=this.forceXVal();
			return p.accy=this.forceYVal();
		}

		return Force;
	})()


	/**
	*...
	*@author ...
	*/
	//class Lparticle.Initializer.HalfRadius
	var HalfRadius=(function(){
		function HalfRadius(system,params){
			this.radiusVal=null;
			this.speedVal=null;
			this.radiusVal=RangValue.rangeValue(params.radius);
			this.speedVal=RangValue.rangeValue(params.speed);
		}

		__class(HalfRadius,'Lparticle.Initializer.HalfRadius');
		var __proto=HalfRadius.prototype;
		Laya.imps(__proto,{"Lparticle.Initializer.InitializerInterface":true})
		/*INTERFACE Lparticle.Initializer.InitializerInterface */
		__proto.initParticle=function(p){
			var cosTheta=NaN,orgX=NaN,orgY=NaN,radius=NaN,sinTheta=NaN,speed=NaN,theta=NaN;
			orgX=p.x || 0;
			orgY=p.y || 0;
			theta=Math.random()*-Math.PI;
			sinTheta=Math.sin(theta);
			cosTheta=Math.cos(theta);
			radius=this.radiusVal();
			speed=this.speedVal();
			p.x=cosTheta *radius+orgX;
			p.y=sinTheta *radius+orgY/2.5;
			p.dx=-cosTheta *speed/2;
			return p.dy=sinTheta *speed;
		}

		return HalfRadius;
	})()


	/**
	*...
	*@author lifei
	*/
	//class Lparticle.Initializer.Initializer
	var Initializer=(function(){
		function Initializer(){}
		__class(Initializer,'Lparticle.Initializer.Initializer');
		__static(Initializer,
		['radius',function(){return this.radius=Radius;},'halfRadius',function(){return this.halfRadius=HalfRadius;},'position',function(){return this.position=Position;},'delta_speed',function(){return this.delta_speed=DeltaSpeed;},'force',function(){return this.force=Force;},'rotation',function(){return this.rotation=Rotation$1;},'size',function(){return this.size=Size$1;},'color',function(){return this.color=Color$1;},'attach_node_pos',function(){return this.attach_node_pos=AttachNodePos;}
		]);
		return Initializer;
	})()


	/**
	*...
	*@author lifei
	*/
	//class Lparticle.Initializer.Position
	var Position=(function(){
		function Position(system,params){
			this.xVal=null;
			this.yVal=null;
			this.xVal=RangValue.rangeValue(params.x);
			this.yVal=RangValue.rangeValue(params.y);
		}

		__class(Position,'Lparticle.Initializer.Position');
		var __proto=Position.prototype;
		Laya.imps(__proto,{"Lparticle.Initializer.InitializerInterface":true})
		/*INTERFACE Lparticle.Initializer.InitializerInterface */
		__proto.initParticle=function(p){
			var orgX=NaN,orgY=NaN,x=NaN,y=NaN;
			orgX=p.x || 0;
			orgY=p.y || 0;
			x=this.xVal();
			y=this.yVal();
			p.x=x+orgX;
			return p.y=y+orgY;
		}

		return Position;
	})()


	/**
	*...
	*@author lifei
	*/
	//class Lparticle.Initializer.Radius
	var Radius=(function(){
		function Radius(system,params){
			this.radiusVal=null;
			this.speedVal=null;
			this.radiusVal=RangValue.rangeValue(params.radius);
			this.speedVal=RangValue.rangeValue(params.speed);
		}

		__class(Radius,'Lparticle.Initializer.Radius');
		var __proto=Radius.prototype;
		Laya.imps(__proto,{"Lparticle.Initializer.InitializerInterface":true})
		/*INTERFACE Lparticle.Initializer.InitializerInterface */
		__proto.initParticle=function(p){
			var cosTheta=NaN,orgX=NaN,orgY=NaN,radius=NaN,sinTheta=NaN,speed=NaN,theta=NaN;
			orgX=p.x || 0;
			orgY=p.y || 0;
			theta=Math.random()*Math.PI *2;
			sinTheta=Math.sin(theta);
			cosTheta=Math.cos(theta);
			radius=this.radiusVal();
			speed=this.speedVal();
			p.x=cosTheta *radius+orgX;
			p.y=sinTheta *radius+orgY;
			p.dx=cosTheta *speed;
			return p.dy=sinTheta *speed;
		}

		return Radius;
	})()


	/**
	*...
	*@author lifei
	*/
	//class Lparticle.Initializer.Rotation
	var Rotation$1=(function(){
		function Rotation(system,params){
			this.angleVal=null;
			this.angleVal=RangValue.rangeValue(params.angle);
		}

		__class(Rotation,'Lparticle.Initializer.Rotation',null,'Rotation$1');
		var __proto=Rotation.prototype;
		Laya.imps(__proto,{"Lparticle.Initializer.InitializerInterface":true})
		/*INTERFACE Lparticle.Initializer.InitializerInterface */
		__proto.initParticle=function(p){
			return p.rotation=this.angleVal();
		}

		return Rotation;
	})()


	/**
	*...
	*@author lifei
	*/
	//class Lparticle.Initializer.Size
	var Size$1=(function(){
		function Size(system,params){
			this.sizeVal=null;
			this.sizeVal=RangValue.rangeValue(params.size);
		}

		__class(Size,'Lparticle.Initializer.Size',null,'Size$1');
		var __proto=Size.prototype;
		Laya.imps(__proto,{"Lparticle.Initializer.InitializerInterface":true})
		/*INTERFACE Lparticle.Initializer.InitializerInterface */
		__proto.initParticle=function(p){
			return p.size=this.sizeVal();
		}

		return Size;
	})()


	/**
	*...
	*@author lifei
	*/
	//class Lparticle.Renderer.Box
	var Box$1=(function(){
		function Box(){}
		__class(Box,'Lparticle.Renderer.Box',null,'Box$1');
		var __proto=Box.prototype;
		Laya.imps(__proto,{"Lparticle.Renderer.RendererInterface":true})
		/*INTERFACE Lparticle.Renderer.RendererInterface */
		__proto.initParticle=function(p){
			if (p.x==null){
				p.x=0;
			}
			if (p.y==null){
				p.y=0;
			}
			if (p.size==null){
				p.size=1;
			}
			return p.color !=null ? p.color :p.color=[255,0,0];
		}

		__proto.drawParticle=function(ctx,p){
			var rot=NaN,size=NaN;
			ctx.beginPath();
			rot=p.rotation;
			size=p.size;
			ctx.fillStyle=RangValue.colorToStyle(p.color);
			if (rot){
				ctx.save();
				ctx.translate(p.x,p.y);
				ctx.rotate(rot);
				ctx.fillRect(-size,-size,size *2,size *2);
				return ctx.restore();
				}else {
				return ctx.fillRect(-size+p.x,-size+p.y,size *2,size *2);
			}
		}

		return Box;
	})()


	/**
	*...
	*@author lifei
	*/
	//class Lparticle.Renderer.Dot
	var Dot=(function(){
		function Dot(){}
		__class(Dot,'Lparticle.Renderer.Dot');
		var __proto=Dot.prototype;
		Laya.imps(__proto,{"Lparticle.Renderer.RendererInterface":true})
		/*INTERFACE Lparticle.Renderer.RendererInterface */
		__proto.initParticle=function(p){
			if (p.x==null){
				p.x=0;
			}
			if (p.y==null){
				p.y=0;
			}
			if (p.size==null){
				p.size=1;
			}
			return p.color !=null ? p.color :p.color=[255,0,0];
		}

		__proto.drawParticle=function(ctx,p){
			ctx.beginPath();
			ctx.arc(p.x,p.y,p.size,0,2 *Math.PI);
			ctx.fillStyle=RangValue.colorToStyle(p.color);
			return ctx.fill();
		}

		return Dot;
	})()


	/**
	*...
	*@author lifei
	*/
	//class Lparticle.Renderer.DotFade
	var DotFade=(function(){
		function DotFade(){}
		__class(DotFade,'Lparticle.Renderer.DotFade');
		var __proto=DotFade.prototype;
		Laya.imps(__proto,{"Lparticle.Renderer.RendererInterface":true})
		/*INTERFACE Lparticle.Renderer.RendererInterface */
		__proto.initParticle=function(p){
			if (p.x==null){
				p.x=0;
			}
			if (p.y==null){
				p.y=0;
			}
			if (p.size==null){
				p.size=1;
			}
			return p.color !=null ? p.color :p.color=[100,100,100];
		}

		__proto.drawParticle=function(ctx,p){
			if(!ctx.createRadialGradient){
				ctx.beginPath();
				ctx.arc(p.x,p.y,p.size,0,2 *Math.PI);
				ctx.fillStyle=RangValue.colorToStyle(p.color);
				return ctx.fill();
			};
			var a=NaN,rad,rot=NaN,size=NaN;
			ctx.beginPath();
			rot=p.rotation;
			size=p.size;
			ctx.save();
			rad=ctx.createRadialGradient(0,0,0,0,0,size);
			a=p.color[3];
			rad.addColorStop(0,RangValue.colorToStyle(p.color,!!ctx.createRadialGradient));
			p.color[3]=0;
			rad.addColorStop(1,RangValue.colorToStyle(p.color,!!ctx.createRadialGradient));
			p.color[3]=a;
			ctx.fillStyle=rad;
			ctx.translate(p.x,p.y);
			if (rot){
				ctx.rotate(rot);
			}
			ctx.fillRect(-size,-size,size *2,size *2);
			return ctx.restore();
		}

		return DotFade;
	})()


	/**
	*...
	*@author lifei
	*/
	//class Lparticle.Renderer.Image
	var Image$1=(function(){
		function Image(system,params){
			this.image=null;
			this.system=null;
			this.system=system;
			this.image=params.image;
		}

		__class(Image,'Lparticle.Renderer.Image',null,'Image$1');
		var __proto=Image.prototype;
		Laya.imps(__proto,{"Lparticle.Renderer.RendererInterface":true})
		/*INTERFACE Lparticle.Renderer.RendererInterface */
		__proto.initParticle=function(p){
			if (p.x==null){
				p.x=0;
			}
			if (p.y==null){
				p.y=0;
			}
			if (p.size==null){
				p.size=1;
			}
			return p.alpha !=null ? p.alpha :p.alpha=1;
		}

		__proto.drawParticle=function(ctx,p){
			var rot=NaN,size=NaN;
			rot=p.rotation;
			size=p.size;
			ctx.globalAlpha=p.alpha;
			if (rot){
				ctx.save();
				ctx.translate(p.x,p.y);
				ctx.rotate(rot);
				ctx.drawTexture(this.image,0,0,size*2,size*2,-size,-size,size*2 ,size*2);
				return ctx.restore();
				}else {
				ctx.drawTexture(this.image,0,0,size*2,size*2,p.x-size,p.y-size,size*2 ,size*2);
			}
		}

		return Image;
	})()


	/**
	*...
	*@author ...
	*/
	//class Lparticle.Renderer.Images
	var Images=(function(){
		function Images(system,params){
			this.images=null;
			this.system=null;
			this.image=null;
			this.system=system;
			this.images=params.images;
		}

		__class(Images,'Lparticle.Renderer.Images');
		var __proto=Images.prototype;
		Laya.imps(__proto,{"Lparticle.Renderer.RendererInterface":true})
		/*INTERFACE Lparticle.Renderer.RendererInterface */
		__proto.initParticle=function(p){
			if (p.x==null){
				p.x=0;
			}
			if (p.y==null){
				p.y=0;
			}
			if (p.size==null){
				p.size=1;
			}
			if(p.image==null){
				p.image=this.images[0|(this.images.length*Math.random())]
			}
			return p.alpha !=null ? p.alpha :p.alpha=1;
		}

		__proto.drawParticle=function(ctx,p){
			var rot=NaN,size=NaN;
			rot=p.rotation;
			size=p.size;
			ctx.globalAlpha=p.alpha;
			this.image=p.image;
			if (rot){
				ctx.save();
				ctx.translate(p.x,p.y);
				ctx.rotate(rot);
				ctx.drawTexture(this.image,0,0,size*2,size*2,-size,-size,size*2 ,size*2);
				return ctx.restore();
				}else {
				ctx.drawTexture(this.image,0,0,size*2,size*2,p.x-size,p.y-size,size*2 ,size*2);
			}
		}

		return Images;
	})()


	/**
	*...
	*@author lifei
	*/
	//class Lparticle.Renderer.Renderer
	var Renderer=(function(){
		function Renderer(){}
		__class(Renderer,'Lparticle.Renderer.Renderer');
		__static(Renderer,
		['dot',function(){return this.dot=Dot;},'box',function(){return this.box=Box$1;},'dot_fade',function(){return this.dot_fade=DotFade;},'image',function(){return this.image=Image$1;},'images',function(){return this.images=Images;}
		]);
		return Renderer;
	})()


	/**
	*...
	*@author lifei
	*/
	//class Lparticle.Utils.RangValue
	var RangValue=(function(){
		function RangValue(){}
		__class(RangValue,'Lparticle.Utils.RangValue');
		RangValue.rangeValue=function(val){
			if (val.length>1){
				return function (){
					return (val[1]-val[0])*Math.random()+val[0];
				};
			}
			else{
				return function (){
					return val;
				};
			}
		}

		RangValue.colorRangeValue=function(color){
			var a,b,g ,r;
			r=RangValue.rangeValue(color[0]);
			g=RangValue.rangeValue(color[1]);
			b=RangValue.rangeValue(color[2]);
			a=RangValue.rangeValue(color[3]);
			return function (){
				return [r(),g(),b(),a()];
			};
		}

		RangValue.colorToStyle=function(color,flag){
			(flag===void 0)&& (flag=false);
			var a=NaN,b=NaN,g=NaN,r=NaN;
			r=~~color[0];
			g=~~color[1];
			b=~~color[2];
			a=color[3];
			if(!flag){
				return "#"+Lparticle.Utils.RangValue.getVal(r)+Lparticle.Utils.RangValue.getVal(g)+Lparticle.Utils.RangValue.getVal(b);
			}
			if (!!a || a==0){
				return "rgba("+r+","+g+","+b+","+a+")";
				}else {
				return "rgb("+r+","+g+","+b+")";
			}
		}

		RangValue.getVal=function(num){
			if(num==0)
				return "00";
			else
			return Math.floor(num/16).toString(16)+(num%16).toString(16);
		}

		return RangValue;
	})()


	/**
	*...
	*@author xiaosong
	*/
	//class net.UserData
	var UserData=(function(){
		function UserData(id){
			this.lastApplyTime=0;
			this.uid=0;
			this.duanwei=null;
			this.level=0;
			this.callBacks=[];
			this.isOk=false;
			this.data=null;
			this.uid=id;
		}

		__class(UserData,'net.UserData');
		var __proto=UserData.prototype;
		__proto.clearData=function(){
			this.isOk=false;
		}

		/**
		*检查数据是否过期
		*@return true-表示过期，false-表示没过期
		*/
		__proto.chkOverdue=function(){
			return (Laya.timer.currTimer-this.lastApplyTime >=60000)
		}

		/*
		*@param ...args 动态参数-由游戏服和游戏客户端制定参数
		*<br> eg:ask(UserDataCallBack,[1,2]);
		*<br> 说明请求UserDataCallBack玩家当前赛季 1号和2号数据，而具体1号和2号数据存储的是什么 则有游戏服和客户端自行定义
		**/
		__proto.ask=function(back,args){
			if (this.isOk || !this.chkOverdue()){
				back.callBack.runWith([this.data]);
			}
			else{
				this.callBacks.push(back);
				HallApp.getCurrentSeasonData(this.uid,args);
			}
		}

		__proto.onData=function(data){
			this.lastApplyTime=Laya.timer.currTimer;
			this.data=data;
			for (var i=0,sz=this.callBacks.length;i < sz;i++){
				var o=this.callBacks[i];
				if (o.active){
					o.active=false;
					o.callBack.runWith([this.data]);
				}
			}
			this.callBacks.length=0;
		}

		UserData.overdueTime=60000;
		return UserData;
	})()


	/**
	*...
	*@author xiaosong
	*/
	//class net.UserDataCallBack
	var UserDataCallBack=(function(){
		function UserDataCallBack(){
			this.uid=0;
			this.callBack=null;
			this.active=true;
		}

		__class(UserDataCallBack,'net.UserDataCallBack');
		return UserDataCallBack;
	})()


	/**
	*...
	*@author xiaosong
	*/
	//class net.UserInfoMgr
	var UserInfoMgr=(function(){
		function UserInfoMgr(){
			this.rankId=0;
			this.users={};
			this.mySeaArray=[];
		}

		__class(UserInfoMgr,'net.UserInfoMgr');
		var __proto=UserInfoMgr.prototype;
		__proto.init=function(){
			NotifyCenter.I.on('onGotCurrentSeasonDataResult',this,this._onData);
			NotifyCenter.I.on('seasonQueryCurrentDataResult',this,this._onDatas);
		}

		__proto._onData=function(data){
			var user=this.users[data.userId];
			if (!user){
				console.log("ON_GOTCURRENTSEASONDATARESULT no this uid:"+data.userId);
			}
			else user.onData(data);
		}

		__proto._onDatas=function(data){
			if (!UserInfoMgr._rankFriendArr || !UserInfoMgr.callBackHd || !UserInfoMgr.friendRankObj)return;
			if(data.code !=0){
				Log_Test.error("获取赛季数据错误,错误代码"+data.code);
				}else{
				if(data.results){
					var rid=this.getRankId(data.results[0]);
					if(rid !=-1){
						this.rankId=rid;
						this.dealRankData(data.results);
					}
				}
			}
		}

		__proto.dealRankData=function(dat){
			var rankId1=this.rankId;
			var rankFriendArr=SnowUtils.deepCopy(UserInfoMgr._rankFriendArr);
			for (var i=0;i < dat.length;i++){
				var data=dat[i];
				if (!data)return;
				var voFr2=UserInfoMgr.friendRankObj[data["userId"]];
				if (!voFr2)continue ;
				var tempValue=NotifyCenter.I.getSType(rankId1);
				if (tempValue==-1)return;
				var rkInfo=new RankInfo;
				rkInfo.RankValue=data["s"+tempValue];
				rkInfo.userId=voFr2.userInfo.userId;
				rkInfo.UserData=voFr2.userInfo;
				rankFriendArr.push(rkInfo);
			};
			var len=rankFriendArr.length;
			for (var q=0;q < len;q++){
				for (var w=q;w < len;w++){
					if ((rankFriendArr [q]).RankValue < (rankFriendArr [w]).RankValue){
						var tempVoFr=(rankFriendArr [q]);
						rankFriendArr[q]=rankFriendArr[w];
						rankFriendArr[w]=tempVoFr;
					}
					else if ((rankFriendArr [q]).RankValue==(rankFriendArr [w]).RankValue){
						if ((rankFriendArr [q]).userId > (rankFriendArr [w]).userId){
							var tempVoFr1=(rankFriendArr [q]);
							rankFriendArr[q]=rankFriendArr[w];
							rankFriendArr[w]=tempVoFr1;
						}
					}
				}
			}
			for (var m=0,n=rankFriendArr.length;m < n;m++){
				var rkInfo1=rankFriendArr[m];
				rkInfo1.Rank=m+1;
			}
			UserInfoMgr.callBackHd && UserInfoMgr.callBackHd.runWith([rankFriendArr,rankId1]);
			UserInfoMgr.callBackHd=null;
		}

		/**
		*
		*@param uids 角色userID组成的数组 uids:[UserDataCallBack]
		*/
		__proto.askDuanwei=function(uids){
			this.mySeaArray=this.mySeaArray.concat(uids);
			this.mySeaArray.length>0&&Laya.timer.loop(15,this,this.askSeasonData);
		}

		__proto.askSeasonData=function(){
			var o=this.mySeaArray.shift();
			var user=this.users[o.uid];
			if (!user)user=this.users[o.uid]=new UserData(o.uid);
			user.ask(o,[1,2,3,4,5,6]);
			this.mySeaArray.length<=0&&Laya.timer.clear(this,this.askSeasonData);
		}

		__proto.getRankId=function(sItem){
			if (!sItem)return-1;
			var keys=Object.keys(sItem);
			if (keys.length !=2)
				return-1;
			for (var i=0;i < 2;i++){
				if(keys[i][0]=="s"){
					return this.getRType(parseInt(keys[i].replace("s","")));
				}
			}
			return-1;
		}

		/**根据排行榜id返回数据库取数据的key*/
		__proto.getRType=function(rankId){
			switch(rankId){
				case 1:return 10001;
				case 2:return 10011;
				case 3:return 10021;
				case 4:return 10031;
				case 5:return 10041;
				case 6:return 10051;
				}
			Log_Test.error("获取赛季数据错误，rankId不存在；"+rankId);
			return-1;
		}

		__getset(1,UserInfoMgr,'I',function(){
			return UserInfoMgr._instance=UserInfoMgr._instance|| new UserInfoMgr();
		});

		UserInfoMgr._instance=null
		UserInfoMgr.callBackHd=null
		UserInfoMgr._rankFriendArr=null
		UserInfoMgr.friendRankObj=null
		return UserInfoMgr;
	})()


	/**
	*...
	*@author zhliu
	*/
	//class Utils.MathUtils2
	var MathUtils2=(function(){
		function MathUtils2(){}
		__class(MathUtils2,'Utils.MathUtils2');
		MathUtils2.getRadianByAngle=function(_angle){
			if (MathUtils2._keyAngle[_angle]==null){
				MathUtils2._keyAngle[_angle]=_angle *0.017453292519943295;
			}
			return MathUtils2._keyAngle[_angle];
		}

		MathUtils2.getCosByAngle=function(_angle){
			if (MathUtils2._keyCos[_angle]==null){
				var _radian=MathUtils2.getRadianByAngle(_angle);
				MathUtils2._keyCos[_angle]=Math.cos(_radian);
			}
			return MathUtils2._keyCos[_angle];
		}

		MathUtils2.getSinByAngle=function(_angle){
			if (MathUtils2._keySin[_angle]==null){
				var _radian=MathUtils2.getRadianByAngle(_angle);
				MathUtils2._keySin[_angle]=Math.sin(_radian);
			}
			return MathUtils2._keySin[_angle];
		}

		MathUtils2.RadianToAngle=57.29577951308232;
		MathUtils2.AngleToRadian=0.017453292519943295;
		MathUtils2._keyCos={};
		MathUtils2._keySin={};
		MathUtils2._keyAngle={};
		return MathUtils2;
	})()


	/**
	*2017-3-16
	*
	*@ zcc
	*/
	//class Utils.SnowLang
	var SnowLang=(function(){
		function SnowLang(){}
		__class(SnowLang,'Utils.SnowLang');
		SnowLang.proKeyById=function(id){
			switch(id){
				case 1:
					return "moveSpeed";
				case 2:
					return "acttackSpeed";
				case 3:
					return "integralSpeed";
				case 4:
					return "integralInit";
				case 5:
					return "ballSpeed";
				case 6:
					return "ballAdd";
				}
			return "noPro";
		}

		SnowLang.playNameByType=function(type){
			switch(parseInt(type)){
				case enumRoomType.ROOMTYPE_FREE:
					return "自由战";
				case enumRoomType.ROOMTYPE_TEAM5V5:
					return "5V5组队";
				case enumRoomType.ROOMTYPE_TEAM2V2:
					return "2V2组队";
				case enumRoomType.ROOMTYPE_FLAG:
					return "夺旗战";
				case enumRoomType.ROOMTYPE_LOLIPOP:
					return "糖糖大战";
				case enumRoomType.ROOMTYPE_CUSTOM_FREE:
					return "友谊赛乱斗";
				case enumRoomType.ROOMTYPE_CUSTOM_TEAM:
					return "友谊赛团战";
				case enumRoomType.ROOMTYPE_GEM:
					return "冰晶抢夺";
				}
			return "";
		}

		SnowLang.getProByName=function(key){
			switch(key){
				case "survival":
					return "生存";
				case "attack":
					return "攻击";
				case "precise":
					return "精准";
				case "flexible":
					return "灵活";
				case "vspeed":
					return "速度";
				case "erupt":
					return "爆发";
				}
			return "";
		}

		__static(SnowLang,
		['yl',function(){return this.yl=SnowUtils.chkIsFB()?"In a non-combat zone and will be sent to a random location.":"处于非战斗区域，即将传送至随机地点";},'msgArr',function(){return this.msgArr=[
			"金币、钻石可以在商城中购买炫酷的英雄、枪械",
			"枪械为消耗品，可以在商城补充",
			"长按攻击按钮可蓄力，伤害更高 长按技能也可以蓄力",
			"团队模式下，组队界面可更换英雄与枪械"];},'resloadArr',function(){return this.resloadArr=[
			{url:"res/atlas/gaming.atlas",type:"atlas"},
			{url:"res/atlas/gamingtop.atlas",type:"atlas"},
			{url:"res/newbullet/newbullet.atlas",type:"atlas"},
			{url:"res/atlas/neweffect.atlas",type:"atlas"},
			{url:"res/atlas/skillCd.atlas",type:"atlas"},
			{url:"res/atlas/common.atlas",type:"atlas"},
			{url:"res/role/134.atlas",type:"atlas"},
			{url:"res/role/134x.atlas",type:"atlas"},
			{url:"res/role/141.atlas",type:"atlas"},
			{url:"res/role/136.atlas",type:"atlas"},
			{url:"res/atlas/ani/die.atlas",type:"atlas"},
			{url:"res/skillIcon/s1.png",type:"image"},
			{url:"res/skillIcon/bottom.png",type:"image"},
			{url:"res/skillIcon/s210001.png",type:"image"},
			{url:"res/skillIcon/210001.png",type:"image"},
			{url:"res/atlas/newguide.atlas",type:"atlas"},
			{url:"res/rocker/control_base.png",type:"image"},
			{url:"res/rocker/control_knob.png",type:"image"},
			{url:"map/map03min.png",type:"image"},
			{url:"map/mapdata00.json",type:"json"},
			{url:"res/atlas/balance.atlas",type:"atlas"},
			{url:"res/atlas/ani/guanzhu.atlas",type:"atlas" }];}
		]);
		return SnowLang;
	})()


	/**
	*2017-4-1
	*替换引擎加载，只是多嵌套一级，所有加载的相关处理都在这里面添加
	*@ zcc
	*/
	//class Utils.SnowLoad
	var SnowLoad=(function(){
		function SnowLoad(){}
		__class(SnowLoad,'Utils.SnowLoad');
		var __proto=SnowLoad.prototype;
		/**
		*加载资源。
		*@param url 地址，或者资源对象数组(简单数组：["a.png","b.png"]，复杂数组[{url:"a.png",type:Loader.IMAGE,size:100,priority:1},{url:"b.json",type:Loader.JSON,size:50,priority:1}])。
		*@param complete 结束回调，如果加载失败，则返回 null 。
		*@param progress 进度回调，回调参数为当前文件加载的进度信息(0-1)。
		*@param type 资源类型。
		*@param priority 优先级，0-4，五个优先级，0优先级最高，默认为1。
		*@param cache 是否缓存加载结果。
		*@param group 分组。
		*@param ignoreCache 是否忽略缓存，强制重新加载
		*@return 此 LoaderManager 对象。
		*/
		__proto.load=function(url,complete,progress,type,priority,cache,group,ignoreCache){
			(priority===void 0)&& (priority=1);
			(cache===void 0)&& (cache=true);
			(ignoreCache===void 0)&& (ignoreCache=false);
			if(!CrazySnowball.isConnected){
				CrazySnowball.onShowDialog();
				return;
			}
			Laya.loader.retryDelay=SnowLoad.loadSouceTime;
			Laya.loader.retryNum=SnowLoad.loadSouceSize;
			ResCacheManager.I.addLoad(url);
			Laya.loader.load(url,complete,progress,type,priority,cache,group,ignoreCache);
		}

		__getset(1,SnowLoad,'I',function(){
			return SnowLoad._i || (SnowLoad._i=new SnowLoad());
		});

		SnowLoad._i=null
		SnowLoad.loadSouceTime=3000;
		SnowLoad.loadSouceSize=3;
		return SnowLoad;
	})()


	/**
	*...
	*@author luohuantao
	*/
	//class Utils.SnowTime
	var SnowTime=(function(){
		function SnowTime(){
			this._againHandle=null;
			this._callBack=null;
		}

		__class(SnowTime,'Utils.SnowTime');
		var __proto=SnowTime.prototype;
		__proto.init=function(t,num,callBack,againHandle){
			this._againHandle=againHandle;
			this._callBack=callBack;
			Laya.timer.once(t,this,this.asaa,[t,num,new Date().getTime()]);
		}

		__proto.removeTime=function(){
			Laya.timer.clear(this,this.asaa);
			this._callBack && this._callBack.recover();
			this._againHandle && this._againHandle.recover();
			Pool.recover("SnowTime_Pool",this);
		}

		__proto.asaa=function(t,num,lastT){
			if (new Date().getTime()-lastT >=t){
				num--;
				if (num <=0){
					this._callBack && this._callBack.run();
					this.removeTime();
					}else{
					this._againHandle && this._againHandle.run();
					Laya.timer.once(t,this,this.asaa,[t,num,new Date().getTime()]);
				}
			}
		}

		SnowTime.setTime=function(t,num,callBack,againHandle){
			var st=Pool.getItemByClass("SnowTime_Pool",SnowTime);
			st.init(t,num,callBack,againHandle);
			return st;
		}

		SnowTime.nuST=null
		return SnowTime;
	})()


	/**
	*2017-3-16
	*
	*@ zcc
	*/
	//class Utils.SnowUtils
	var SnowUtils=(function(){
		function SnowUtils(){}
		__class(SnowUtils,'Utils.SnowUtils');
		var __proto=SnowUtils.prototype;
		/**
		*注释掉这里解锁方式
		*
		*/
		__proto.visionLoad=function(){
			if(!Browser.onMiniGame){
			}
			SnowUtils.fileData={};
			CrazySnowball.isRelease&&(URL.customFormat=Utils.SnowUtils.customUrl);
		}

		/**
		*获取分享图片的base64信息
		*@param shareUrl
		*@return
		*
		*/
		__proto.getImageBase64Data=function(shareUrl){
			var base64Data;
			if(MenuList.shareImage){
				var htmlCanvas=MenuList.shareImage.drawToCanvas(MenuList.shareImage.width,MenuList.shareImage.height,0,0);
				var canvas=htmlCanvas.getCanvas();
				base64Data=canvas.toDataURL("image/png");
			}
			return base64Data;
		}

		__getset(1,SnowUtils,'I',function(){
			return SnowUtils._i || (SnowUtils._i=new SnowUtils());
		});

		SnowUtils.setBattleType=function(b){
			SnowUtils.battleMsg=b?RealServer.INSTANCE:FaceServer.INSTANCE;
		}

		SnowUtils.customUrl=function(url){
			var pathNew;
			if (CrazySnowball.sourcePath){
				pathNew=CrazySnowball.sourcePath+CrazySnowball.version+"/";
			}
			else{
				pathNew=CrazySnowball.version+"/";
			}
			return pathNew+url;
			if(url.indexOf(URL.basePath+pathNew)==0)return url;
			var myFile=url.substr(URL.basePath.length);
			if(!pathNew){
				alert("no this url");
				return url;
			}
			url=URL.basePath+pathNew+myFile;
			return url;
		}

		SnowUtils.getSkillIconUrl=function(skillid){
			var data=ConfigData.skillCfg[skillid];
			if (!data){
				console.error("找不到技能"+skillid);
				return null;
			}
			else if(!data.btnIcon){
				console.error("技能表btnIcon没有设置"+skillid);
				return null;
			}
			return AssetsConsts.URL_SKILL_ICON.replace("{id}",data.btnIcon);
		}

		SnowUtils.itemIconUrl=function(id){
			var voItemCfg=ConfigData.itemData [id];
			if (voItemCfg&&voItemCfg.type==7){
				return "res/goods/"+"icon/"+voItemCfg.communalId[0]+".png";
			}
			return "res/goods/"+"icon/"+id+".png";
		}

		SnowUtils.itemHalfUrl=function(id){
			return "res/goods/"+"half/"+id+".png";
		}

		SnowUtils.itemHalfUrlNew=function(id){
			return "res/goods/"+"halfNew/"+id+".png";
		}

		SnowUtils.itemHalfUrlNew2=function(id){
			return "res/goods/"+"newHalf122/"+id+".png";
		}

		SnowUtils.roleIconUrl=function(Avtor){
			var arr=Utils.SnowUtils.deComposeAvatar(Avtor||1);
			if(!arr || arr.length <=0)return SnowUtils.roleHeadUrl("1036");
			return SnowUtils.roleHeadUrl(arr[0]);
		}

		SnowUtils.heroHalfUrl=function(heroId){
			if(ConfigData.roleData[heroId]){
				var srcId=ConfigData.roleData[heroId].sourceID;
				return "res/goods/"+"half/"+ConfigData.sourcesView.role[srcId].itemId+".png";
				}else{
				return "";
			}
		}

		SnowUtils.heroHalfUrlName=function(heroId){
			if(ConfigData.roleData[heroId]){
				var srcId=ConfigData.roleData[heroId].sourceID;
				return "res/goods/"+"half/"+ConfigData.sourcesView.role[srcId].itemId+"_n.png";
				}else{
				return "";
			}
		}

		SnowUtils.heroIconUrl=function(heroId){
			var srcId=ConfigData.roleData[heroId].sourceID;
			return "res/goods/"+"head/"+ConfigData.sourcesView.role[srcId].itemId+".png";
		}

		SnowUtils.getIconUrl=function(url,avtor){
			if (url && url.indexOf("http")!=-1){
				return decodeURIComponent(url);
			}
			return Utils.SnowUtils.roleIconUrl(avtor);
		}

		SnowUtils.roleHeadUrl=function(id){
			var itDt=ConfigData.itemData[id];
			if (itDt.type==100)id=itDt.originalId+"";
			return "res/goods/"+"head/"+id+".png";
		}

		SnowUtils.roleHalfUrl=function(Avtor){
			var arr=Utils.SnowUtils.deComposeAvatar(Avtor||1);
			if(!arr || arr.length <=0)return SnowUtils.itemHalfUrl("1036");
			return SnowUtils.itemHalfUrl(arr[0]);
		}

		SnowUtils.roleHalfUrlNew=function(Avtor){
			var arr=Utils.SnowUtils.deComposeAvatar(Avtor||1);
			if(!arr || arr.length <=0)return SnowUtils.itemHalfUrlNew("1036");
			return SnowUtils.itemHalfUrlNew(arr[0]);
		}

		SnowUtils.roleHalfUrlNew2=function(Avtor){
			var arr=Utils.SnowUtils.deComposeAvatar(Avtor||1);
			if(!arr || arr.length <=0)return SnowUtils.itemHalfUrlNew("1036");
			return SnowUtils.itemHalfUrlNew2(arr[0]);
		}

		SnowUtils.getGoodAtIcon=function(goodatType){
			if (goodatType==0 || goodatType==8)return "";
			return "res/goods/"+"goodat/"+goodatType+".png";
		}

		SnowUtils.itemData=function(id){
			if (ConfigData.itemData){
				return ConfigData.itemData[id];
			}
			else
			return null;
		}

		SnowUtils.browserType=function(){
			var ua=Browser.window.navigator.userAgent.toLowerCase();
			if(ua.indexOf("micromessenger")!=-1){
				return "WeChat";
			}
			if(ua.indexOf("qq/")!=-1){
				return "QQ";
			}
			if(ua.indexOf("qqbrowser")!=-1){
				return "QQBrowser";
			}
			return "other";
		}

		SnowUtils.getNowDay=function(){
			return 0|((Date.now()+28800000)/86400000);
		}

		SnowUtils.updateBattle=function(){
			var userId=RoleCenter.I.userId;
			var bc=LocalStorage.getItem("_battlecount"+userId);
			var nowDay=SnowUtils.getNowDay();
			var newCount=0;
			if(bc){
				var arr=bc.split("_");
				if (nowDay==arr[0]){
					newCount=(arr[1] || 0);
				}
			}
			newCount++;
			LocalStorage.setItem("_battlecount"+userId,nowDay+"_"+newCount);
		}

		SnowUtils.updateDayInfo=function(){
			var userId=RoleCenter.I.userId;
			var day=LocalStorage.getItem("_firstLoginDay"+userId);
			var preDay=LocalStorage.getItem("_preDay"+userId);
			var nowDay=SnowUtils.getNowDay()+"";
			if (!day){
				LocalStorage.setItem("_firstLoginDay"+userId,nowDay);
			}
			if (!preDay || preDay !=nowDay){
				RoleCenter.bIsNewDay=true;
				LocalStorage.setItem("_preDay"+userId,nowDay);
			}
		}

		SnowUtils.checkCanShowQuesen=function(){
			var userId=RoleCenter.I.userId;
			var bc=LocalStorage.getItem("_battlecount"+userId);
			var fL=LocalStorage.getItem("_firstLoginDay"+userId);
			var nowDay=SnowUtils.getNowDay()+"";
			if (bc&&fL){
				var today=bc.split("_")[0];
				if (fL !=nowDay && today==nowDay){
					var d=LocalStorage.getItem("_checkSuccess"+userId);
					if (d !=nowDay){
						LocalStorage.setItem("_checkSuccess"+userId,nowDay);
						return true;
					}
				}
			}
			return false;
		}

		SnowUtils.checkHuoDongCanShowQuesen=function(){
			var userId=RoleCenter.I.userId;
			var fL=LocalStorage.getItem("_firstLoginDay"+userId);
			var nowDay=SnowUtils.getNowDay()+"";
			if(fL && fL !=nowDay){
				return true;
			}
			return false;
		}

		SnowUtils.rolePro=function(name,value){
			if(!name || !value)return "无法获取到属性";
			var nameArr=name.split(",");
			var vauleArr=value.split(",");
			var data={};
			for (var i=0;i < nameArr.length;i++){
				var key=SnowLang.proKeyById(nameArr[i]);
				data[key]=vauleArr[i];
			}
			return data;
		}

		SnowUtils.onCenter=function(sp_prent,itemArr){
			var sunW=0;
			for (var i=0;i < itemArr.length;i++){
				if (!(itemArr [i]))continue ;
				sunW+=(itemArr [i]).width *(itemArr [i]).scaleX;
			}
			for (i=0;i < itemArr.length;i++){
				if (!(itemArr [i]))continue ;
				if (i==0)
					(itemArr [i]).x=sp_prent.x+(sp_prent.width-sunW)*0.5;
				else
				(itemArr [i]).x=(itemArr [i-1]).x+(itemArr [i-1]).width *(itemArr [i]).scaleX;
			}
		}

		SnowUtils.quiver=function(ui,sx,sy,time){
			ui.scaleX=sx;
			ui.scaleY=sy;
			Tween.to(ui,{scaleX:sx?1.1:-1.1,scaleY:sy?1.1:-1.1},time,null,Handler.create(ui,callback=function(){
				Tween.to(ui,{scaleX:sx?1:-1,scaleY:sy?1:-1 },100);
			}));
			function completeQuiver (){
				Tween.clearAll(ui);
			}
		}

		SnowUtils.reloadRankRes=function(){
			var arr=[
			{url:ConfigData.soundCfg[59],type:"sound" },
			{url:ConfigData.soundCfg[112],type:"sound" },
			{url:ConfigData.soundCfg[35],type:"sound" },
			{url:"res/atlas/common.atlas",type:"atlas"}];
			if(enumRoomType.nowType !=100){
				arr.push({url:"res/atlas/balance.atlas",type:"atlas"})
				arr.push({url:"res/atlas/gameResult.atlas",type:"atlas" })
			}
			arr.push({url:ConfigData.soundCfg[113],type:"sound" });
			arr.push({url:ConfigData.soundCfg[114],type:"sound" });
			arr.push({url:ConfigData.soundCfg[115],type:"sound" });
			arr.push({url:ConfigData.soundCfg[110],type:"sound" });
			arr.push({url:"res/atlas/ani/guanzhu.atlas",type:"atlas" });
			var dt;
			if(MenuList._duanWeiStar >=dwIcon.MAX_STAR){
				dt=ConfigData.duanweiCfgByStar[dwIcon.MAX_STAR];
			}
			else{
				dt=ConfigData.duanweiCfgByStar[MenuList._duanWeiStar];
			}
			SnowLoad.I.load(arr,null,null,null,5);
		}

		SnowUtils.reloadFightRes=function(){
			var arr=[];
			if(RoleCenter.I.fashions&&RoleCenter.I.fashions[0]){
				var roleId=RoleCenter.I.fashions[0];
				SourceManger.I.beginLoad(roleId);
			}
			SnowLoad.I.load(arr);
		}

		SnowUtils.reloadMeunlist=function(){
			var arr=[];
			if(RoleCenter.I.fashions&&RoleCenter.I.fashions[0]){
				var roleId=RoleCenter.I.fashions[0];
				SourceManger.I.beginLoad(roleId);
			}
		}

		SnowUtils.isWxApp=function(){
			if(!SnowUtils.info)SnowUtils.info=NotifyCenter.I.Query("on_GotLoginData");
			if(SnowUtils.info){
				return SnowUtils.info.UnionId=="-8" || SnowUtils.info.UnionId=="-10";
			}
			return /MicroMessenger/gi.test(navigator.userAgent);;
			return false;
		}

		SnowUtils.isIos=function(){
			if(!SnowUtils.info)SnowUtils.info=NotifyCenter.I.Query("on_GotLoginData");
			if(SnowUtils.info){
				return SnowUtils.info.UnionId=="-9" || SnowUtils.info.UnionId=="-10";
			}
			return /(iPhone|iPad|iPod|iOS)/i.test(navigator.userAgent);;
			return false;
		}

		SnowUtils.deComposeAvatar=function(avatar){
			if (avatar==1)avatar=36;
			var t1a=avatar % 1000;
			var t2a=Math.floor((avatar / 1000));
			t2a=t2a % 1000;
			var t3a=Math.floor((avatar / (1000 *1000)));
			t3a=t3a % 1000;
			var t4a=Math.floor((avatar / (1000 *1000 *1000)));
			t4a=t4a % 1000;
			return [
			t1a+1000,
			t2a+4000,
			t3a+3000,
			t4a+2000];
		}

		SnowUtils.inputIsNum=function(str){
			var charCode=-1;
			for (var i=0;i < str.length;i++){
				charCode=str.charCodeAt(i);
				if (charCode < 48 || charCode > 57)
					return false;
			}
			return true;
		}

		SnowUtils.getTotalLength=function(str){
			var charCode=-1;
			var realLen=0;
			var len=str.length;
			for (var i=0;i < len;i++){
				charCode=str.charCodeAt(i);
				if (charCode >=0 && charCode <=128)
					realLen+=1;
				else realLen+=2;
			}
			return realLen;
		}

		SnowUtils.cutString=function(str,length,type){
			(type===void 0)&& (type=1);
			if(!str)return "";
			var count=0;
			var len=str.length;
			for (var i=0;i < len;i++){
				var code=str.charCodeAt(i);
				count+=(code >=0x4E00 && code <=0x9FA5)?2:1;
				if (count > length)break ;
			}
			if (count <=length)
				return str;
			else {
				if(type==1)return str.substring(0,i-1)+"..";
				else if(type==2)return str.substring(0,i-1);
			}
			return str;
		}

		SnowUtils.setIntToThousandth=function(value){
			var str=value+"";
			var re;
			re=/(?=(?!(\b))(\d{3})+$)/g;
			return str.replace(re,",");
		}

		SnowUtils.setDataInLocalStorage=function(key,value){
			LocalStorage.setJSON(key,value);
		}

		SnowUtils.getDataInLocalStorage=function(key){
			return LocalStorage.getJSON(key);
		}

		SnowUtils.friendNickName=function(openId,userInfo){
			var rui=NotifyCenter.I.relationData[openId];
			if(rui&&rui.nickName){
				return HallUtil.getNkName(userInfo)+"("+Utils.SnowUtils.cutString(decodeURIComponent(userInfo.NkNameIP),8)+")";
			}
			return HallUtil.getNkName(userInfo);
		}

		SnowUtils.rankShare=function(rank,fromType){
			if(Utils.SnowUtils.isWxApp()){
				ShareTips.onShowMe("sharetips/tips3.jpg");
				}else{
				var info=new ShareInfo();
				if(rank>3){
					info.title="风骚走位，秒杀全场";
					info.desc="轻松获胜，就问你6不6";
					}else{
					info.title="全场碾压，轻松三甲";
					info.desc="不服？来和我比一场";
				}
				info.image_url=enumShareType.share_icon_url;
				info.share_url=enumShareType.share_game_url+"&ft="+fromType+"&ic="+RoleCenter.I.userId;
				info.sourceName="全民打雪球";
				HallApp.shareMessage(info);
			}
		}

		SnowUtils.initRankShare=function(){
			Utils.SnowUtils.shareBall("Settlement",null);
		}

		SnowUtils.taskIconByName=function(name){
			return "res/goods/task/"+name;
		}

		SnowUtils.friendSigleShare=function(name,team,fopenid){
			var info=new SendMessageToFriendInfo();
			info.title=enumShareType.share_Team_SingleinviteTitle.replace("{X}",name);
			info.description=enumShareType.share_Team_SingleinviteDesc.replace("{X}",team);
			info.thumb_url=enumShareType.share_icon_url;
			info.url=enumShareType.share_game_url;
			info.fopenid=fopenid;
			HallApp.sendMessageToFriend(info);
		}

		SnowUtils.checkFromDesk=function(){
			var sd=SnowUtils.getQueryString("sd");
			return sd=="true";
		}

		SnowUtils.checkOutinvite=function(){
			var ic=SnowUtils.getQueryString("ic");
			var fromType=Utils.SnowUtils.getQueryString("ft");
			if(ic && fromType.indexOf("menuShare")!=-1){
				var cmd=new RequestShare();
				cmd.shareType=2;
				cmd.shareUserId=parseInt(ic);
				HallApp.notify(cmd);
			}
		}

		SnowUtils.shareInitiative=function(point,param){
			if(SnowUtils.isWxApp()){
				SnowUtils.shareBall(point,param);
				ShareTips.onShowMe("sharetips/tips3.jpg");
				}else{
				var share=ConfigData.shareData[point] || ConfigData.shareData["other"];
				if(share){
					var info=new ShareInfo();
					var i=SnowUtils.setContent(share["QQ"],share["QQDesc"],info);
					var spId=Utils.SnowUtils.getQueryString("spId");
					if(spId==-110){
						info.image_url=Utils.SnowUtils.I.getImageBase64Data(SnowUtils.shareUrl()+share["QQImage"]);
						}else{
						info.image_url=SnowUtils.shareUrl()+share["QQImage"];
					}
					info.share_url=enumShareType.share_game_url;
					if(point=="team")
						info.share_url="td="+param.teamId+"_"+RoleCenter.I.userId+"&ft="+param.fromType+"_"+i;
					else if(point=="Sharingactivities"){
						info.share_url="ic="+RoleCenter.I.userId+"&ft="+param.fromType+"_"+i;
						}else if(point=="Invitingfriends" || point=="teammodel"|| point=="friendmodel" || point=="team3vepk"){
						if(param.teamId){
							info.share_url="td="+param.teamId+"_"+RoleCenter.I.userId+"&ft="+param.fromType+"_"+i;
						}
						else if(param.roomId){
							info.share_url="rd="+param.roomId+"_"+RoleCenter.I.userId+"&ft="+param.fromType+"_"+i;
							}else if (param.yq){
							info.share_url="yq="+RoleCenter.I.userId+"&ft="+param.fromType+"_"+i;
						}
						}else if(point=="Singleboard"){
						info.share_url="ft="+param.fromType+"_"+i+"&ic="+RoleCenter.I.userId;
						}else if(point=="playerpk" || point=="rankPK"){
						info.share_url="sh="+param.shareType+"&wxuid="+RoleCenter.I.userId+"&ft="+param.fromType+"_"+i+"&ic="+RoleCenter.I.userId;
					}
					info.title=info.desc;
					HallApp.shareMessage(info);
					if(Utils.SnowUtils.chkIsFB()){
						LoadingPage.getInstance().show(null);
						MouseManager.enabled=false;
					}
				}
			}
		}

		SnowUtils.chkIsQQ=function(){
			var unid=Method.getUnionId();
			return unid==-5 || unid==-9;
		}

		SnowUtils.chkIsQQKJ=function(){
			var unid=Method.getUnionId();
			return unid==-108 || unid==-107;
		}

		SnowUtils.chkIsFB=function(){
			var unid=Method.getUnionId();
			return unid==UnionEnum.FB_INSTANT;
		}

		SnowUtils.geti18nStr=function(decStr){
			if (!decStr)return "";
			return SnowUtils.chkIsFB()?decStr.us:decStr.cn;
		}

		SnowUtils.shareShots=function(type,fromType){
			var dat=new ShareScreenshotInfo();
			dat.briefMsg=ConfigData.shareShots[type].briefMsg;
			dat.appName=ConfigData.shareShots[type].appName;
			dat.iconUrl=SnowUtils.shareUrl()+"tail.png";
			if(fromType){
				dat.actionUrl=enumShareType.share_game_url+"&ic="+RoleCenter.I.userId+"&ft="+fromType;
				}else{
				dat.actionUrl=enumShareType.share_game_url+"&ic="+RoleCenter.I.userId+"&ft="+"menuShare";
			}
			HallApp.shareScreenshot(dat);
		}

		SnowUtils.shareBall=function(point,param){
			if (SnowUtils.prePoint==point){
				return null;
			}
			SnowUtils.prePoint=point;
			var share=ConfigData.shareData[point] || ConfigData.shareData["other"];
			if(share){
				var info=new ShareConfigInfo();
				var other=ConfigData.shareData["other"];
				var i=0;
				if (Utils.SnowUtils.isWxApp()){
					i=SnowUtils.setContent(share["WXBall"] || other["WXBall"],share["WXBallDesc"] || other["WXBallDesc"],info);
					info.image_url=SnowUtils.shareUrl()+(share["WXBallImage"] || other["WXBallImage"]);
					}else{
					i=SnowUtils.setContent(share["QQ"] || other["QQ"],share["QQDesc"] || other["QQDesc"],info);
					info.image_url=SnowUtils.shareUrl()+(share["QQImage"] || other["QQImage"]);
				}
				info.sourceName="全民打雪球";
				var url=enumShareType.share_game_url;
				if(point=="Invitingfriends" || point=="teammodel"|| point=="friendmodel"){
					if(param.roomId){
						url="rd="+param.roomId+"_"+RoleCenter.I.userId+"&ft="+param.fromType+"_"+i;
						}else if(param.teamId){
						url="td="+param.teamId+"_"+RoleCenter.I.userId+"&ft="+param.fromType+"_"+i;
					}
					}else if(point=="zillionaire"){
					url=enumShareType.share_game_url+"&ic="+RoleCenter.I.userId;
				}
				if (CrazySnowball.isDanji)url+="&try=true";
				info.share_url=url;
				info.params={};
				if(point=="menushare"){
					info.params={"ic":RoleCenter.I.userId,"ft":param.fromType+"_"+i};
					}else if(point=="Invitingfriends" || point=="teammodel"|| point=="friendmodel"){
					if(param.roomId){
						info.params={"rd":param.roomId+"_"+RoleCenter.I.userId,"ft":param.fromType+"_"+i};
						}else if(param.teamId){
						info.params={"td":param.teamId+"_"+RoleCenter.I.userId,"ft":param.fromType+"_"+i};
					}
					}else if(point=="Sharingactivities"){
					info.params={"ic":RoleCenter.I.userId,"ft":param.fromType+"_"+i};
					}else if(point=="zillionaire"){
					info.params={"ic":RoleCenter.I.userId};
					}else if(point=="playerpk"){
					info.share_url="sh="+param.shareType+"&wxuid="+RoleCenter.I.userId+"&ic="+RoleCenter.I.userId;
				}
				HallApp.initShareConfig(info);
				return info;
			}
			return null;
		}

		SnowUtils.setContent=function(title,content,info){
			var tiltArr=title.split(",");
			var i=0 | (Math.random()*tiltArr.length);
			info.title=tiltArr[i];
			var contentArr=content.split(",");
			info.desc=contentArr[i] || contentArr[0];
			return i;
		}

		SnowUtils.shareUrl=function(){
			return URL.formatURL("share/");
		}

		SnowUtils.getQueryString=function(name){
			console.log(Browser.window.hostStr);
			var reg2=new RegExp("(^|&)"+name+"=([^&]*)(&|$)","i");
			var searchStr=Browser.window.hostStr|| Browser.window.location.search;
			var a=searchStr.substr(1).match(reg2);
			if (a !=null)return decodeURIComponent(a[2]);return '';
		}

		SnowUtils.setQueryString=function(name,value){}
		SnowUtils.getValueByKey=function(name,url){
			var reg2=new RegExp("(^|&)"+name+"=([^&]*)(&|$)","i");
			var searchStr=url;
			var a=searchStr.substr(1).match(reg2);
			if (a !=null)return decodeURIComponent(a[2]);return '';
		}

		SnowUtils.getJieAndStar=function(duanweiId){
			var obj={};
			obj.jie=Math.floor((duanweiId % 100)/ 10);
			obj.star=(duanweiId % 100)% 10;
			return obj;
		}

		SnowUtils.randRange=function(_max,_min){
			(_min===void 0)&& (_min=0);
			return Math.random()*(_max-_min)+_min;
		}

		SnowUtils.calcDirByDelta=function(deltaY,deltaX){
			var radians=Math.atan2(deltaY,deltaX);
			var angle=radians *180 / Math.PI;
			if (angle < 0)angle+=360;
			return angle;
		}

		SnowUtils.getDuoBianXing=function(sp,r,center,arr,fillColor,lineColor,lineWidth,from){
			(lineWidth===void 0)&& (lineWidth=1);
			(from===void 0)&& (from=270);
			var pArr=[];
			sp.graphics.clear();
			var px=NaN,py=NaN,vr=NaN,va=NaN,jd=360 / arr.length;
			for (var i=0,len=arr.length;i < len;i++){
				vr=arr[i] *r;
				va=((i *jd+from)% 360)*0.017453292519943295;
				px=vr *Math.cos(va);
				py=vr *Math.sin(va);
				pArr.push(px,py);
			}
			sp.graphics.drawPoly(center.x,center.y,pArr,fillColor,lineColor,lineWidth);
		}

		SnowUtils.isEmptyObject=function(obj){
			if (typeof obj !="object" || !obj || JSON.stringify(obj)=="{}")
				return true;
			return false;
		}

		SnowUtils.getHeroPlv=function(type,exp){
			var curArr=ConfigData.heroProByTL[type];
			if (exp < curArr[0].exp)return 1;
			if (exp >=curArr[curArr.length-1].exp)return curArr.length;
			for (var i=0,len=curArr.length;i < len;i++){
				if (exp >=curArr[i].exp && exp < curArr[i+1].exp)return i+2;
			}
			return 1;
		}

		SnowUtils.parseTime=function(timeNum){
			if(!timeNum || timeNum <0)return "00:00:00";
			var hour=0,min=0,sec=0;
			timeNum=(timeNum / 1000)| 0;
			var timeStr="";
			hour=(timeNum / 3600)| 0;
			var tian=(hour / 24)| 0;
			hour=hour % 24;
			if (tian)
				timeStr+=tian+"天";
			if(hour<10){
				timeStr+="0"+hour;
				}else{
				timeStr+=hour;
			}
			timeStr+=":";
			min=((timeNum % 3600)/ 60)| 0;
			if(min <10){
				timeStr+="0"+min;
				}else{
				timeStr+=min;
			}
			timeStr+=":";
			sec=((timeNum % 360)% 60);
			if(sec <10){
				timeStr+="0"+sec;
				}else{
				timeStr+=sec;
			}
			return timeStr;
		}

		SnowUtils.bdIconByKeyLv=function(key,lv){
			var arr=[2,8,7,10,9,13,15];
			if(arr.indexOf((key|0))!=-1){
				if(lv<3){
					lv=1;
					}else if(lv<5){
					lv=3;
					}else{
					lv=5;
				}
				}else{
				if(lv<5){
					lv=1;
					}else if(lv<10){
					lv=5;
					}else{
					lv=10;
				}
			}
			return "res/buildImg/"+key+"/"+(lv<=0?1:lv)+".png";
		}

		SnowUtils.bdByKeyLv=function(key,lv){
			var arr=[2,8,7,10,9,13,15];
			if(arr.indexOf((key|0))!=-1){
				if(lv<3){
					lv=1;
					}else if(lv<5){
					lv=3;
					}else{
					lv=5;
				}
				}else{
				if(lv<5){
					lv=1;
					}else if(lv<10){
					lv=5;
					}else{
					lv=10;
				}
			}
			return lv;
		}

		SnowUtils.bdRlvByKeyLv=function(key,lv){
			var arr=[2,8,7,10,9,13,15];
			if(arr.indexOf((key|0))!=-1){
				if(lv<3){
					lv=0;
					}else if(lv<5){
					lv=1;
					}else{
					lv=2;
				}
				}else{
				if(lv<5){
					lv=0;
					}else if(lv<10){
					lv=1;
					}else{
					lv=2;
				}
			}
			return lv;
		}

		SnowUtils.initDuoBaoMap=function(startPoint,jiange,mapBox,dt){
			return null;
		}

		SnowUtils.getCurMap=function(data,flag){
			(flag===void 0)&& (flag=false);
			var dtNow=new Date().getTime();
			var timeStr;
			var resultObj;
			for (var i=0;i < 8;i++){
				if (flag)
					timeStr=SnowUtils.getDateToString1(dtNow+i *24 *60 *60 *1000);
				else
				timeStr=SnowUtils.getDateToString1(dtNow-i *24 *60 *60 *1000);
				if (data[timeStr]){
					if (flag && SnowUtils.getDateToString1(dtNow)==timeStr)continue ;
					resultObj=data[timeStr];
					break ;
				}
			}
			if (!resultObj){
				var keys=Object.keys(data);
				resultObj=data[keys[keys.length-1]];
			}
			return resultObj;
		}

		SnowUtils.getDateToString=function(timeSpan,str){
			(str===void 0)&& (str="-");
			if (isNaN(timeSpan))return "";
			var dt=new Date(timeSpan);
			var yyyy=dt.getFullYear();
			var mm="0"+(dt.getMonth()+1);
			var dd="0"+dt.getDate();
			return yyyy+str+mm.substring(mm.length-2,mm.length)+str+dd.substring(dd.length-2,dd.length);
		}

		SnowUtils.getDateToString1=function(timeSpan,str){
			(str===void 0)&& (str="/");
			if (isNaN(timeSpan))return "";
			var dt=new Date(timeSpan);
			var yyyy=dt.getFullYear();
			var mm=""+(dt.getMonth()+1);
			var dd=""+dt.getDate();
			return yyyy+str+mm.substring(mm.length-2,mm.length)+str+dd.substring(dd.length-2,dd.length);
		}

		SnowUtils.reportTlogReason=function(level1,level2){
			var cmd2=Pool.getItemByClass("RequestSnsFlow",RequestSnsFlow);
			cmd2.SNSType=level1;
			cmd2.SNSSubType=level2;
			HallApp.notify(cmd2);
			Pool.recover("RequestSnsFlow",cmd2);
		}

		SnowUtils.deepCopy=function(obj){
			return JSON.parse(JSON.stringify(obj));
		}

		SnowUtils.getTimeSpanAt0=function(){
			var d=new Date(new Date().toDateString());
			return d.getTime();
		}

		SnowUtils.DateDiffNoAbs=function(sDate1,sDate2){
			var aDate,oDate1,oDate2,iDays=NaN;
			aDate=sDate1.split("-");
			oDate1=new Date(aDate[1]+'-'+aDate[2]+'-'+aDate[0]);
			aDate=sDate2.split("-");
			oDate2=new Date(aDate[1]+'-'+aDate[2]+'-'+aDate[0]);
			iDays=Math.floor(oDate1-oDate2)/ 1000 / 60 / 60 / 24;
			return iDays;
		}

		SnowUtils.shareImg=function(fromType,imgSkin,params){}
		SnowUtils.iceSkillIconUrl=function(id){
			return "res/iceSkillIcon/"+id+".png";
		}

		SnowUtils.getHeroIdBySkinId=function(hId){
			var itDt=ConfigData.itemData[hId];
			if (!itDt)return hId;
			if(itDt.type==100){
				return itDt.originalId;
				}else{
				return hId;
			}
		}

		SnowUtils.chkPfIsUse=function(itemId){
			var tempArr=NotifyCenter.I.Query("activeItems");
			if(tempArr && tempArr["activeSkin"]){
				var itemDt=ConfigData.itemData[itemId];
				return itemId==tempArr["activeSkin"][itemDt.originalId] && (itemDt.originalId==tempArr["1"] || itemId==tempArr["1"]);
			}
			return false;
		}

		SnowUtils.getFjson=function(){
			var data=NotifyCenter.I.Query("on_GotGameDataResult");
			if(!data || !data.results || !data.results.fjson){
				return null;
			}
			return data.results.fjson;
		}

		SnowUtils.getArrByIdsNums=function(ids,nums){
			var resultArr=[];
			var item;
			for (var i=0;i < ids.length;i++){
				item={};
				item.itemId=ids[i];
				item.itemNum=nums[i];
				resultArr.push(item);
			}
			return resultArr;
		}

		SnowUtils.checkCz=function(preLeiji,curLeiji){
			var taskObj=ConfigData.activityData[1008];
			if(taskObj){
				var tasks=ConfigData.taskActivityData;
				var count=0,obj;
				for (var i=0;i < taskObj.tasks.length;i++){
					obj=tasks[taskObj.tasks[i]];
					if(obj){
						count=obj.count[0];
						if(count>=preLeiji && count < curLeiji){
							var arr=SnowUtils.getArrByIdsNums(obj.rewardID,obj.rewardNum);
						}
					}
				}
			}
		}

		SnowUtils.checkSc=function(preLeiji,curLeiji){
			console.log("---------------------临时写死，后面再太修改-----------------------");
			var arr=SnowUtils.getArrByIdsNums([3,90001],[100,5]);
			ItemShow.onShow(arr,"首充奖励");
			return;
		}

		SnowUtils.releaseImgSourse=function(sImg){
			var tex=sImg._bitmap.source;
			tex && tex.bitmap.releaseResource();
		}

		SnowUtils.chkGiftCanGet=function(giftId){
			var giftObj=ConfigData.qqGift[giftId];
			if (!giftObj)return false;
			var myFjson=SnowUtils.getFjson();
			if (!myFjson)return false;
			var bo=false;
			switch (giftObj.type){
				case 0:
					if(!myFjson.libaoData || !myFjson.libaoData[giftId]){
						bo=true;
					}
					break ;
				case 1:
					if(!myFjson.libaoData || !myFjson.libaoData[giftId]){
						bo=true;
						}else{
						var today=SnowUtils.getDateStr();
						var day=(new Date()).getDay();
						if(myFjson.libaoData[giftId]==today || giftObj.days.indexOf(day)==-1){
							bo=false;
							}else{
							bo=true;
						}
					}
					break ;
				case 2:;
					var today=SnowUtils.getDateStr();
					if(!giftObj.days || giftObj.days.length !=2)bo=false;
					if(today < giftObj.days[0] || today > giftObj.days[1]){
						bo=false;
						}else{
						if(!myFjson.libaoData || !myFjson.libaoData[giftId])
							bo=true;
						else
						bo=false;
					}
					break ;
				default :
					break ;
				}
			return bo;
		}

		SnowUtils.getDateStr=function(){
			var td=new Date();
			var tdstr="";
			tdstr+=td.getFullYear();
			tdstr+='-';
			tdstr+=(td.getMonth()+1);
			tdstr+='-';
			tdstr+=td.getDate();
			return tdstr;
		}

		SnowUtils._i=null
		SnowUtils.bIsShowHelpBtn=false;
		SnowUtils.fileData=null
		SnowUtils.info=null
		SnowUtils.prePoint=null
		__static(SnowUtils,
		['isSSL',function(){return this.isSSL=Browser.window.location.protocol=="https:";},'battleMsg',function(){return this.battleMsg=RealServer.INSTANCE;}
		]);
		return SnowUtils;
	})()


	/**
	*...
	*@author Chen Gong
	*/
	//class notifyMsgs.systemMsgs.SeasonAward
	var SeasonAward=(function(){
		function SeasonAward(){
			this.id=0;
			this.seasonId=null;
			this.rankID=0;
			this.status=0;
			this.time=NaN;
			this.rank=0;
			this.killNumber=0;
			this.rewardID=[];
			this.rewardNum=[];
		}

		__class(SeasonAward,'notifyMsgs.systemMsgs.SeasonAward');
		var __proto=SeasonAward.prototype;
		__proto.clear=function(){
			this.seasonId="";
			this.rankID=0;
			this.id=0;
			this.status=0;
			this.time=0;
			this.rank=0;
			this.killNumber=0;
			this.rewardID.length=0;
			this.rewardNum.length=0;
			return this.constructor.name;
		}

		SeasonAward.initDataPool=function(){
			for (var ti=0;ti < SeasonAward._maxNum;ti++){
				SeasonAward._dataPool[ti]=new SeasonAward();
			}
		}

		SeasonAward.getData=function(){
			return SeasonAward._dataPool.length>0? SeasonAward._dataPool.pop():new SeasonAward();
		}

		SeasonAward.release=function(_data){
			if (SeasonAward._dataPool.indexOf(_data)!=-1)return;
			_data.clear();
			SeasonAward._dataPool.push(_data);
		}

		SeasonAward._maxNum=1024 *5;
		SeasonAward._dataPool=[];
		return SeasonAward;
	})()


	/**
	*...
	*@author anling
	*/
	//class view.data.ClientData
	var ClientData=(function(){
		function ClientData(){
			this.talkAuthority=0;
			this.talkOnBeAttack=null;
			this.talkOnDead=null;
			this.soundSet=true;
			this.music_set=true;
			this.phoneNum=null;
			this.quanData=null;
			this.qqData=null;
			this.qunData=null;
			this.fightSetType=0;
			this.isShouChong=false;
		}

		__class(ClientData,'view.data.ClientData');
		return ClientData;
	})()


	/**
	*大厅排行榜功能
	*@author xiaosong
	*/
	//class view.data.NewRankInfo
	var NewRankInfo=(function(){
		function NewRankInfo(){
			this.openId=null;
			this.nickName=null;
			this.avatarUrl=null;
			this.rankValue=0;
		}

		__class(NewRankInfo,'view.data.NewRankInfo');
		return NewRankInfo;
	})()


	/**
	*...
	*@author luohuantao
	*/
	//class view.FlyThings
	var FlyThings=(function(){
		function FlyThings(){}
		__class(FlyThings,'view.FlyThings');
		FlyThings.FlyImagText=function(content,url,obj,colors){
			(colors===void 0)&& (colors="#ffffff");
			if (!obj)return;
			var pool=Pool.getItem("FlyImagText:"+url);
			var img;
			var txt;
			if (!pool){
				pool=new Sprite();
				img=new Image();
				img.skin=url;
				img.size(30,30);
				pool.addChild(img);
				txt=new Text();
				pool.addChild(txt);
				txt.x=img.width+3;
			}
			else{
				img=pool._childs [0];
				txt=pool._childs [1];
			}
			txt.text=content;
			txt.fontSize=30;
			txt.color=colors;
			pool.size(txt.textWidth+30+3 ,Math.max(txt.textHeight,30));
			pool.x=(obj.x-Player.I.getViewportX())+(((obj.width *obj.scaleX)-pool.width)/ 2);
			pool.y=(obj.y-Player.I.getViewportY())+(((obj.width *obj.scaleY)-pool.height)/ 2);
			UIMgr.AllLayer.addChild(pool);
			var n=pool.y-(obj.width *obj.scaleY)-pool.height-5;
			Tween.to(pool,{y:n },800,Ease.circOut);
			Tween.to(pool,{alpha:0.1 },300,Ease.circOut,Handler.create(FlyThings,_des=function(url){
				pool.removeSelf();
				pool.alpha=1;
				Pool.recover("FlyImagText:"+url,pool);
				pool=null;
			},[url]),1000);
		}

		FlyThings.FlyTextInObj=function(content,obj,colors){
			(colors===void 0)&& (colors="#ffffff");
			if (!obj)return;
			var txt=Pool.getItem("FlyText")|| new Text();
			txt.text=content;
			txt.fontSize=27;
			txt.color=colors;
			txt.x=(obj.x-Player.I.getViewportX())+(((obj.width *obj.scaleX)-txt.textWidth)/ 2);
			txt.y=(obj.y-Player.I.getViewportY())+(((obj.width *obj.scaleY)-txt.textHeight)/ 2);
			GamingView.I.addChild(txt);
			var n=txt.y-(obj.width *obj.scaleY)-txt.textHeight-5;
			Tween.to(txt,{y:n },800,Ease.circOut);
			Tween.to(txt,{alpha:0.1 },300,Ease.circOut,Handler.create(FlyThings,_des=function(){
				txt.removeSelf();
				txt.alpha=1;
				Pool.recover("FlyText",txt);
				txt=null;
			}),1000);
		}

		FlyThings.FlyText=function(content,x,y,colors){
			(colors===void 0)&& (colors="#ffffff");
			var txt=Pool.getItem("FlyText1")|| new Text();
			txt.text=content;
			txt.fontSize=52;
			txt.bold=true;
			txt.color=colors;
			txt.x=x;
			txt.y=y;
			GamingView.I.addChild(txt);
			var n=txt.y-50
			Tween.to(txt,{y:n },800,Ease.circOut);
			Tween.to(txt,{alpha:0.1 },300,Ease.circOut,Handler.create(FlyThings,_des=function(){
				txt.removeSelf();
				txt.alpha=1;
				Pool.recover("FlyText1",txt);
				txt=null;
			}),1000);
		}

		FlyThings.FlyImage=function(url,x,y,a){
			var img=Pool.getItem("FlyImage")|| new Animation();
			img.source="ani/donghua/jizhong.ani";
			img.pivot(img.width / 2,img.height / 2);
			img.x=x;
			img.y=y;
			img.rotation=a;
			img.interval=1000 / 60;
			img.play();
			GamingView.I.addChild(img);
			var n=img.x-50
			Tween.to(img,{alpha:0.1 },300,Ease.circOut,Handler.create(FlyThings,_des=function(img1){
				img1.removeSelf();
				img1.alpha=1;
				Pool.recover("FlyImage",img1);
				img1=null;
			},[img]),1000);
		}

		FlyThings.PlayFontClipText=function(type,value,obj,j,isBaoJi){
			(isBaoJi===void 0)&& (isBaoJi=false);
			if(obj==null || !obj.userTopView || !obj.userTopView.getPo){
				return;
			};
			var playFont=Pool.getItem("PlayFontClip")|| new PlayFontClip();
			playFont.init(type,value,obj.self);
			var po=Point.TEMP;
			po=obj.userTopView.getPo(po);
			po=Player.I.getPoint(po.x+obj.x,po.y+obj.y);
			playFont.x=po.x+55;
			playFont.y=po.y;
			GamingView.I.addChild(playFont);
			if (type==2||type==0){
				playFont.x+=100*obj.scaleX;
				playFont.pivot(playFont.width / 2,playFont.height / 2);
				if (isBaoJi){
					Tween.to(playFont,{y:playFont.y-80,scaleX:1.8,scaleY:1.8},460,null);
					Tween.to(playFont,{y:playFont.y-140,alpha:0.25,scaleX:1.8,scaleY:1.8},200,null,null,350);
					}else{
					Tween.to(playFont,{y:playFont.y-80,scaleX:1.2,scaleY:1.2},300,null);
					Tween.to(playFont,{y:playFont.y-140,alpha:0.25,scaleX:1,scaleY:1},200,null,null,350);
				}
				FlyThings._callBack=new Handler(null,FlyThings.onCallBackHandler,[playFont]);
				Tween.to(playFont,{y:playFont.y-180,alpha:0},100,null,FlyThings._callBack,500);
			}
			else{
				var i=Math.round(Math.random()*2);
				playFont.pivot(playFont.width / 2,playFont.height / 2);
				var tempX=50+i *20;
				FlyThings._callBack=new Handler(null,FlyThings.onCallBackHandler,[playFont]);
				if (isBaoJi){
					Tween.to(playFont,{y:playFont.y-100,x:playFont.x+j *tempX,scaleX:2.2,scaleY:2.2},500,Ease.circOut);
					Tween.to(playFont,{y:playFont.y-100,alpha:0},1000,null,FlyThings._callBack,100);
				}
				else{
					Tween.to(playFont,{y:playFont.y-100,x:playFont.x+j *tempX,scaleX:1.4,scaleY:1.4},400,Ease.circOut);
					Tween.to(playFont,{y:playFont.y-100,alpha:0},500,null,FlyThings._callBack,100);
				}
			}
		}

		FlyThings.onCallBackHandler=function(playFont){
			playFont.removeSelf();
			playFont.alpha=1;
			playFont.scale(1,1);
			Pool.recover("PlayFontClip",playFont);
			playFont=null;
			FlyThings._callBack=null;
		}

		FlyThings.FlyTextInCenter=function(content,colors){
			(colors===void 0)&& (colors="#ffffff");
			var txt=Pool.getItemByClass("FlyTextInCenter",Text);;
			txt.text=content;
			txt.fontSize=30;
			txt.font="SimHei";
			txt.color=colors;
			txt.alpha=1;
			txt.x=(Laya.stage.width-txt.textWidth)/ 2;
			txt.y=(Laya.stage.height / 2);
			if(FlyThings.flyTextArr.length >5){
				FlyThings.flyTextArr.shift();
			}
			FlyThings.flyTextArr.push(txt);
			Laya.timer.loop(500,FlyThings,view.FlyThings._flyTextFun,null,true);
			FlyThings._flyTextFun();
		}

		FlyThings.FlyHtmlTextInCenter=function(content){
			var txt=Pool.getItemByClass("FlyHtmlTextInCenter",HTMLDivElement);
			txt.innerHTML=content;
			txt.style.fontSize=30;
			txt.style.font="SimHei";
			txt.alpha=1;
			txt.width=Laya.stage.width;
			txt.mouseEnabled=false;
			txt.x=(Laya.stage.width-txt.contextWidth)/ 2;
			txt.y=(Laya.stage.height / 2);
			if(FlyThings.flyTextArr.length >5){
				FlyThings.flyTextArr.shift();
			}
			FlyThings.flyTextArr.push(txt);
			Laya.timer.loop(1000,FlyThings,view.FlyThings._flyTextFun,null,true);
			FlyThings._flyTextFun();
		}

		FlyThings._flyTextFun=function(){
			if (FlyThings.sssaaa || !FlyThings.flyTextArr || !FlyThings.flyTextArr.length)return;
			FlyThings.sssaaa=true;
			var txt=FlyThings.flyTextArr.shift();
			UIMgr.AllLayer.addChild(txt);
			var n=txt.y-155;
			Tween.to(txt,{y:n },500,Ease.circOut,Handler.create(FlyThings,ssaa=function(){
				FlyThings.sssaaa=false;
			}),200);
			Tween.to(txt,{alpha:0.1 },800,Ease.circOut,Handler.create(FlyThings,view.FlyThings._des,[txt]),1000);
		}

		FlyThings._des=function(txt){
			txt.removeSelf();
			Pool.recover("FlyTextInCenter",txt);
			txt=null;
		}

		FlyThings.FlyRewordCenter=function(gold,exp,goods){
			var name="";
			if(gold>0){
				name+=gold+"金币";
			}
			if(exp>0){
				name+=exp+"经验";
			}
			if(goods&&goods.length>0){
				for (var i=0;i < goods.length;i++){
					var id=goods[i];
				}
			}
			if(name){
				return "您获得了"+name;
			}
			return name;
		}

		FlyThings._callBack=null
		FlyThings.flyTextArr=[];
		FlyThings.sssaaa=false;
		return FlyThings;
	})()


	/**
	*...
	*@author
	*/
	//class view.gaming.HelpTips
	var HelpTips=(function(){
		function HelpTips(){
			this._autoAddTm=0;
			this._autoPlayIndex=0;
			this._isbegin=false;
			this._helpTips=new Array;
			this._tips=new OneTips();
			var _$this=this;
			this._tips.type=-1;
			function add (str,soundId,type,duration,onlyQingTong,count,checkTips){
				var one=new OneTips();
				one.str=str;
				one.tm=Laya.timer.currTimer;
				one.duration=duration;
				one.type=type;
				one.canPlayCount=count;
				one.soundId=soundId;
				one.checkTips=checkTips?checkTips:function (){
					return true;
				};
				_$this._helpTips.push(one);
				return one;
			};
			var tipsArr=[];
			var tipsCfg=ConfigData.i18n[1].data;
			if (!tipsCfg)return;
			for (var i=0;i <=4;i++){
				tipsArr.push(SnowUtils.geti18nStr(tipsCfg[i]));
			}
			add(tipsArr[0],154,1,4000,true,3,function(){
				var curUser=Player.curUser;
				if (curUser&&curUser.hp<curUser.maxHp/2){
					return true;
				}
				return false;
			});
			add(tipsArr[1],150,1,4000,true,3,function(){
				var curUser=Player.curUser;
				if (curUser&&curUser.level>=9){
					return true;
				}
				return false;
			});
			add(tipsArr[2],151,1,4000,true,5);
			add(tipsArr[3],152,2,4000,true,5);
			add(tipsArr[4],153,3,4000,true,5);
		}

		__class(HelpTips,'view.gaming.HelpTips');
		var __proto=HelpTips.prototype;
		//隐藏当前TIPS，清除所有数组
		__proto.clearAll=function(){
			this._tips.type=-1;
		}

		/**
		*暂停
		*/
		__proto.stop=function(){
			this._isbegin=false;
		}

		/**
		*开始
		*/
		__proto.start=function(){
			this._isbegin=true;
		}

		__proto.setTips=function(str,soundId,duration,onlyQingTong){
			if (onlyQingTong && !this._isQingTone()){
				return;
			}
			this._tips.str=str;
			this._tips.tm=Laya.timer.currTimer;
			this._tips.duration=duration;
			this._tips.type=1;
			this._tips.soundId=soundId;
			if (Player.curUser){
				this._tips.removeTm=this._tips.tm+2000;
				ConfigData.soundCfg[this._tips.soundId]&&SoundManager.playSound(ConfigData.soundCfg[this._tips.soundId],1);
				GamingView.I.showTips(str,duration);
			}
		}

		//显示
		__proto._setByOneTips=function(one){
			this.setTips(one.str,one.soundId,one.duration,true);
		}

		__proto._isQingTone=function(){
			return GamingView.I.isPreThree&&(enumRoomType.nowType !=100);
		}

		__proto.ignoreTeach=function(){
			this._isQingTone=function(){return GamingView.I.isPreThree};
		}

		__proto.update=function(){
			if (!this._isbegin)return;
			var curTm=Laya.timer.currTimer;
			if (this._tips.type==-1){
				if (!this._isQingTone())return;
				if (this._autoAddTm > curTm)
					return;
				this._autoAddTm=curTm+12000;
				if (this._helpTips[0].canPlayCount==3 && this._helpTips[0].checkTips()){
					this._helpTips[0].canPlayCount--;
					this._setByOneTips(this._helpTips[0]);
					this._autoPlayIndex=0;
					return;
				}
				if (this._helpTips[1].canPlayCount==3 && this._helpTips[1].checkTips()){
					this._helpTips[1].canPlayCount--;
					this._setByOneTips(this._helpTips[1]);
					this._autoPlayIndex=1;
					return;
				}
				for (var i=0;i < this._helpTips.length;i++){
					this._autoPlayIndex++;
					var id=this._autoPlayIndex % this._helpTips.length;
					if (this._helpTips[id].canPlayCount > 0 && this._helpTips[id].checkTips()){
						this._helpTips[id].canPlayCount--;
						this._setByOneTips(this._helpTips[id]);
						break ;
					}
				}
				return;
			}
			if (!this._isQingTone()){
				if (!this._helpTips[0].checkTips()){
					this._helpTips[0].canPlayCount=3;
				}
				if (!this._helpTips[1].checkTips()){
					this._helpTips[1].canPlayCount=3;
				}
			}
			if (this._tips.removeTm < curTm){
				this._tips.type=-1;
				this._autoAddTm=curTm+12000;
			}
		}

		return HelpTips;
	})()


	/**
	*...
	*@author ...
	*/
	//class view.gaming.HotPanelItem
	var HotPanelItem=(function(){
		function HotPanelItem(){
			this.destroyed=false;
			this.type=0;
			this.id=0;
			this.data=null;
			this.killerName=null;
			this.bekillerName=null;
			this.killerIcon=null;
			this.bekillerIcon=null;
			this.teamid=0;
			this.skinUrl=null;
			this.next=null;
			this.beginTime=0;
			this.state=0;
			this.isBear=false;
			this.handle=null;
		}

		__class(HotPanelItem,'view.gaming.HotPanelItem');
		var __proto=HotPanelItem.prototype;
		/**
		*销毁
		*/
		__proto.destroy=function(){
			this.next=null;
			this.destroyed=true;
			if (this.type==0){
				SoundManager.stopAllSound();
			}
			HotPanelItem.Pool.push(this);
		}

		__proto.afterTween=function(t){
			Laya.timer.once(t,HotPanelItem.gv,this.end,[this],false);
		}

		__proto.end=function(hot){
			if (hot.type==3){
				HotPanelItem.gv.kill.visible=false;
				HotPanelItem.gv.kill.scale(1,1);
			}
			else if (hot.type==5){
				if (HotPanelItem.currentUi){
					HotPanelItem.currentUi.removeSelf();
				}
			}
			if (hot.next){
				hot.next.run();
			}
			else{
				HotPanelItem.current=null;
				HotPanelItem.lastOne=null;
			}
			hot.destroy();
		}

		__proto.killOne=function(t){
			var _$this=this;
			if(this.data&&this.data.musicUrl)SoundManager.playSound(ConfigData.soundCfg[this.data.musicUrl],1);
			t=3000;
			HotPanelItem.gv.kill.visible=true;
			HotPanelItem.gv.kill.scale(1,1);
			HotPanelItem.gv.kill.alpha=1;
			HotPanelItem.gv.killer.skin=this.killerIcon;
			HotPanelItem.gv.killType.skin=this.skinUrl;
			if (this.isBear){
				HotPanelItem.gv.bear.skin=this.bekillerIcon;
				HotPanelItem.gv.bear.visible=true;
				HotPanelItem.gv.bekiller.visible=false;
			}
			else{
				HotPanelItem.gv.bekiller.skin=this.bekillerIcon;
				HotPanelItem.gv.bekiller.visible=true;
				HotPanelItem.gv.bear.visible=false;
			}
			HotPanelItem.gv.txtbekiller.text=SnowUtils.cutString(this.bekillerName,12);
			HotPanelItem.gv.txtkiller.text=SnowUtils.cutString(this.killerName,12);
			HotPanelItem.gv.img_beKiller.visible=false;
			this.handle=Handler.create(this,function(){
				_$this.state=1;
				Laya.timer.once(t-800,this,_$this.afterKill);
				HotPanelItem.gv.img_beKiller.visible=true;
				HotPanelItem.gv.img_beKiller.scaleY=0.1;
				Tween.to(HotPanelItem.gv.img_beKiller,{scaleY:1},25);
			});
			this.state=0;
			Tween.from(HotPanelItem.gv.kill,{scaleX:1.5,scaleY:1.5},300,Ease.bounceOut,this.handle);
		}

		__proto.showTips=function(t){
			var _$this=this;
			t=4000;
			if (!HotPanelItem.currentUi)return;
			HotPanelItem.gv.addChild(HotPanelItem.currentUi);
			HotPanelItem.currentUi.alpha=1;
			HotPanelItem.currentUi.scale(1,1);
			HotPanelItem.currentUi.y=114;
			this.handle=Handler.create(this,function(){
				_$this.state=1;
				Laya.timer.once(t-800,this,_$this.afterTips);
			});
			Tween.from(HotPanelItem.currentUi,{scaleX:1.5,scaleY:1.5},300,Ease.bounceOut,this.handle);
		}

		__proto.afterTips=function(){
			this.state=2;
			this.handle=Handler.create(this,this.end,[this]);
			if (HotPanelItem.currentUi==null)return;
			Tween.to(HotPanelItem.currentUi,{alpha:0},500,Ease.linearOut,this.handle);
		}

		__proto.afterKill=function(){
			this.state=2;
			this.handle=Handler.create(this,this.end,[this]);
			Tween.to(HotPanelItem.gv.kill,{alpha:0},500,Ease.linearOut,this.handle);
		}

		__proto.clearKill=function(){
			switch(this.state){
				case 1:
					Laya.timer.clear(this,this.afterKill);
					break ;
				case 2:
					this.handle.clear();
					break ;
				}
		}

		/**
		*清除当前信息
		*/
		__proto.stop=function(){
			switch(HotPanelItem.current.type){
				case 3:
					this.clearKill();
					this.end(this);
					break ;
				case 5:
					break ;
				default :
					this.end(this);
					break ;
				}
		}

		__proto.run=function(){
			this.beginTime=Laya.timer.currTimer;
			HotPanelItem.current=this;
			var t=4000;
			if (this.next)
				t=2000;
			switch(this.type){
				case 0:
					SoundManager.playSound(ConfigData.soundCfg[this.data.musicUrl],1);
					break ;
				case 3:
					this.killOne(t);
					break ;
				case 5:
					this.showTips(t);
					break ;
				case 2:
					break ;
				}
		}

		HotPanelItem.init=function(iv){
			HotPanelItem.gv=iv;HotPanelItem.ui1=HotPanelItem.ui1|| new gam1UI();HotPanelItem.ui2=HotPanelItem.ui2|| new gam2UI();
		}

		HotPanelItem.clearAll=function(){
			if (HotPanelItem.current){
				HotPanelItem.current.destroy();
				HotPanelItem.current=null;
			}
			HotPanelItem.ui1 && HotPanelItem.ui1.removeSelf();
			HotPanelItem.ui2 && HotPanelItem.ui2.removeSelf();
			HotPanelItem.ui1=null;
			HotPanelItem.ui2=null;
			HotPanelItem.currentUi=null;
			HotPanelItem.lastOne=null;
		}

		HotPanelItem.create=function(id,uid,beUid,obj,type){
			var rs;
			rs=HotPanelItem.Pool.length > 0?HotPanelItem.Pool.pop():new HotPanelItem();
			rs.destroyed=false;
			if (HotPanelItem.lastOne){
				HotPanelItem.lastOne.next=rs;
			}
			HotPanelItem.lastOne=rs;
			rs.id=id;
			rs.killerName=Player.I.getRoleNameByUid(uid);
			rs.bekillerName=!beUid?"":Player.I.getRoleNameByUid(beUid);
			rs.type=type;
			rs.data=obj;
			if (!HotPanelItem.current){
				rs.run();
			}
			return rs;
		}

		HotPanelItem.getUrl=function(actor){
			var userInfo=Player.I.getUserBaseInfo(actor.selfID);
			if (userInfo){
				return SnowUtils.getIconUrl(userInfo.headPortrait,actor.avatorID);
			}
			return SnowUtils.roleIconUrl(actor.avatorID);
		}

		HotPanelItem.createKill=function(killer,bekiller,url,data){
			if (!killer || !bekiller)return null;
			if (killer==bekiller)return null;
			var rs;
			rs=HotPanelItem.Pool.length > 0?HotPanelItem.Pool.pop():new HotPanelItem();
			rs.destroyed=false;
			rs.skinUrl=url;
			rs.data=data;
			if (HotPanelItem.lastOne){
				HotPanelItem.lastOne.next=rs;
			}
			HotPanelItem.lastOne=rs;
			if (enumRoomType.nowType==enumRoomType.ROOMTYPE_FREE || enumRoomType.nowType==100){
				rs.teamid=0;
			}
			else{
				rs.teamid=killer.teamId;
			}
			rs.killerIcon=HotPanelItem.getUrl(killer);
			if (bekiller._classid==26){
				rs.isBear=true;
				rs.bekillerIcon=SnowUtils.roleIconUrl(9);
			}
			else{
				rs.isBear=false;
				rs.bekillerIcon=HotPanelItem.getUrl(bekiller);
			}
			rs.killerName=killer.name;
			rs.bekillerName=bekiller.name;
			rs.type=3;
			if (!HotPanelItem.current){
				rs.run();
			}
			return rs;
		}

		HotPanelItem.createStrongTips=function(i){
			var rs;
			rs=HotPanelItem.Pool.length > 0?HotPanelItem.Pool.pop():new HotPanelItem();
			rs.destroyed=false;
			rs.type=5;
			if (HotPanelItem.current){
				rs.next=HotPanelItem.current.next;
				HotPanelItem.current.next=null;
				HotPanelItem.current.stop();
			}
			if (HotPanelItem.currentUi){
				if (HotPanelItem.current){
					switch(HotPanelItem.current.state){
						case 1:
							Laya.timer.clear(HotPanelItem.current,HotPanelItem.current.afterTips);
							break ;
						case 2:
							HotPanelItem.current.handle.clear();
							break ;
						}
				}
				HotPanelItem.currentUi.removeSelf();
			}
			if (i==1){
				HotPanelItem.currentUi=HotPanelItem.ui2;
			}
			else{
				HotPanelItem.currentUi=HotPanelItem.ui1;
			}
			if (!HotPanelItem.lastOne)HotPanelItem.lastOne=rs;
			rs.run();
			return rs;
		}

		HotPanelItem.update=function(){
			var now=Laya.timer.currTimer;
			if (HotPanelItem.current){
				if (HotPanelItem.current.next && now >=HotPanelItem.current.beginTime+2000){
					HotPanelItem.current.stop();
				}
			}
		}

		HotPanelItem.Pool=[];
		HotPanelItem.ui1=null
		HotPanelItem.ui2=null
		HotPanelItem.currentUi=null
		HotPanelItem.current=null
		HotPanelItem.lastOne=null
		HotPanelItem.SOUNDONLY=0;
		HotPanelItem.TEXTONLY=1;
		HotPanelItem.BOTH=2;
		HotPanelItem.KILL=3;
		HotPanelItem.STRONG=5;
		HotPanelItem.BOX=6;
		HotPanelItem.gv=null
		return HotPanelItem;
	})()


	/**
	*...
	*@author
	*/
	//class view.gaming.OneTips
	var OneTips=(function(){
		function OneTips(){
			this.str=null;
			this.type=0;
			this.tm=NaN;
			this.removeTm=NaN;
			this.duration=NaN;
			this.id=0;
			this.canPlayCount=0;
			this.checkTips=null;
			this.soundId=0;
		}

		__class(OneTips,'view.gaming.OneTips');
		return OneTips;
	})()


	/**
	*...
	*@author
	*/
	//class view.gaming.PassiveSkills
	var PassiveSkills=(function(){
		function PassiveSkills(){
			this._skills=[];
			this.haveSkill=null;
			this.chooseList=[];
			this.titleList=[];
			this.imageDesc=null;
			this.imageDescText=null;
			this.curIndex=0;
			this.inited=false;
			this.lastTime=0;
		}

		__class(PassiveSkills,'view.gaming.PassiveSkills');
		var __proto=PassiveSkills.prototype;
		/**
		*清除状态
		*/
		__proto.clear=function(){
			this._skills.length=0;
			this.curIndex=0;
		}

		/**
		*点击选择被动技能
		*@param e
		*/
		__proto.chooseSkill=function(e){
			var target=e.target;
			if (target&&target.id){
				var cmd=MsgTemplate.createWithClass(CMsgSelectSkill);
				cmd.skillID=target.id;
				SnowUtils.battleMsg.chooseSkill(cmd);
				cmd.release();
			}
		}

		/**
		*死亡或者是中途进入
		*@param data
		*/
		__proto.rebuild=function(data){
			Laya.timer.clear(this,this.randomSkill);
			this._skills.length=0;
			var skills=data.skills;
			for (var i=0,len=skills.length;i < len;i++){
				this._skills[i]=skills[i];
			}
			this.initSkill();
		}

		__proto.onSeletResult=function(data){
			switch(data.useResult){
				case 1:;
					var skillImages=this.haveSkill._childs;
					var hasSkill=skillImages [this.curIndex];
					var cfg=ConfigData.skillCfg[data.skillId];
					hasSkill && (hasSkill.skin="passiveSkills/"+cfg.btnIcon+".png");
					this._skills[this.curIndex]=data.skillId;
					this.updateSkill();
					this.showDetail(SnowUtils.geti18nStr(ConfigData.talentDes[data.skillId]));
					this.chooseSuccess(this.imageDesc);
					this.chooseSuccess(hasSkill);
					this.curIndex++;
					GuideMgrI.fuckComplete(3,1);
					break ;
				default :
					this.updateSkill();
					break ;
				}
			this.lastTime=Laya.timer.currTimer;
		}

		__proto.showDetail=function(s){
			this.imageDesc.visible=true;
			this.imageDescText.text=s;
			this.imageDesc.width=this.imageDescText.textField.textWidth+183;
			if (this.imageDesc.width >=1090){
				this.imageDesc.width=1090;
				this.imageDesc.height=70;
				this.imageDescText.centerY=-14;
				}else{
				this.imageDesc.height=40;
				this.imageDescText.centerY=-0.5;
			}
			Laya.timer.once(8000,this,this.hideDetail);
		}

		__proto.hideDetail=function(){
			this.imageDesc.visible=false;
		}

		/**
		*初始化一些東西
		*@param haveSkill
		*@param choose0
		*@param choose1
		*@param choose2
		*@param imageDesc
		*@param imageDescText
		*/
		__proto.initOne=function(haveSkill,choose0,choose1,choose2,imageDesc,imageDescText){
			if (!this.inited){
				this.haveSkill=haveSkill;
				haveSkill.alpha=0.8;
				choose0.on("click",this,this.chooseSkill);
				choose1.on("click",this,this.chooseSkill);
				choose2.on("click",this,this.chooseSkill);
				this.chooseList.push(choose0);
				this.chooseList.push(choose1);
				this.chooseList.push(choose2);
				this.titleList.push(choose0._childs[0]);
				this.titleList.push(choose1._childs[0]);
				this.titleList.push(choose2._childs[0]);
				this.imageDesc=imageDesc;
				this.imageDescText=imageDescText;
				this.initHasSKill();
				this.inited=true;
			}
			this.clear();
			this.initSkill();
		}

		__proto.onItemClick=function(i,e){
			var index=this._skills[i] || 0;
			var dsc0=SnowUtils.chkIsFB()?"Aquire hero masteries by levelling up!":"升级可以获得职业天赋哦！";
			if (index==0){
				this.showDetail(dsc0);
			}
			else{
				var cfg=ConfigData.talentDes[index];
				if (cfg){
					this.showDetail(SnowUtils.geti18nStr(cfg));
				}
			}
		}

		__proto.initHasSKill=function(){
			var skillImages=this.haveSkill._childs;
			for (var i=0,n=skillImages.length;i < n;i++){
				var item=skillImages [i];
				item.on("click",this,this.onItemClick,[i]);
			}
		}

		/**
		*初始化
		*/
		__proto.initSkill=function(){
			this.updateSkill();
			var skillImages=this.haveSkill._childs;
			this.curIndex=0;
			for (var i=0;i < 5;i++){
				var hasSkill=skillImages [i];
				var cfg=ConfigData.skillCfg[this._skills[i]];
				if (cfg){
					this.curIndex++;
				}
				hasSkill.skin=cfg?"passiveSkills/"+cfg.btnIcon+".png":null;
			}
		}

		/**
		*隐藏选择的UI
		*/
		__proto.updateSkill=function(){
			var i=0,len=this.chooseList.length;
			for (i=0;i < len;i++){
				(this.chooseList [i]).visible=false;
			}
			this.imageDesc.visible=false;
			(this.imageDesc._parent).mouseEnabled=false;
		}

		/**
		*接受隨機消息
		*@param data
		*/
		__proto.randomSkill=function(data){
			var t=Laya.timer.currTimer-this.lastTime;
			if (t<1000){
				Laya.timer.clear(this,this.randomSkill);
				Laya.timer.once(1000-t,this,this.randomSkill,[data]);
				return;
			}
			if (!this.imageDesc)return;
			(this.imageDesc._parent).mouseEnabled=true;
			Laya.timer.clear(this,this.hideDetail);
			var skills=data.skills;
			var i=0,len=this.chooseList.length;
			for (i;i < len;i++){
				var chooseImage=(this.chooseList [i]);
				var cfg=ConfigData.skillCfg[skills[i]];
				chooseImage.scaleX=1;
				if (!cfg){
					chooseImage.visible=false;
				}
				else{
					chooseImage.skin="passiveSkills/"+cfg.btnIcon+".png";
					chooseImage.visible=true;
					(chooseImage).id=cfg.id;
					(chooseImage._childs [0]).skin="passiveSkills/title_"+cfg.btnIcon+".png";
					(chooseImage._childs [1]).skin="passiveSkills/dj"+(cfg.id % 10)+".png";
				}
			}
			this.beiginFlip();
			data.release();
		}

		__proto.clearTween=function(){
			Tween.clearAll(this.chooseList[0]);
			Tween.clearAll(this.chooseList[1]);
			Tween.clearAll(this.chooseList[2]);
			Tween.clearAll(this.imageDesc);
		}

		__proto.beiginFlip=function(){
			GuideMgrI.fuckComplete(3,0);
			this.imageDesc.visible=false;
			this.clearTween();
			Tween.from(this.chooseList[0],{scaleX:-1},300,Ease.linearIn);
			Tween.from(this.chooseList[1],{scaleX:-1},300,Ease.linearIn,null,400);
			Tween.from(this.chooseList[2],{scaleX:-1},300,Ease.linearIn,null,800);
		}

		__proto.chooseSuccess=function(obj){
			obj.alpha=1;
			Tween.from(obj,{alpha:0.2},500,Ease.linearIn);
		}

		PassiveSkills.CM=21001;
		PassiveSkills.JS=12001;
		PassiveSkills.SKILLNUM=5;
		return PassiveSkills;
	})()


	/**
	*...
	*@author
	*/
	//class view.gaming.SkillInfo
	var SkillInfo=(function(){
		function SkillInfo(id,index,curFloor,maxFloors,changeCallBack){
			this.skillId=0;
			this.skillIndex=0;
			this.maxFloors=0;
			this.curFloor=0;
			this.cd=0;
			this.changeCallBack=null;
			this.curEnerger=0;
			this.initSKillInfo(id,index,curFloor,maxFloors,changeCallBack);
		}

		__class(SkillInfo,'view.gaming.SkillInfo');
		var __proto=SkillInfo.prototype;
		__proto.initSKillInfo=function(id,index,curFloor,maxFloors,changeCallBack){
			this.curEnerger=0;
			this.skillId=id;
			this.skillIndex=index;
			this.curFloor=curFloor;
			var skillVo=ConfigData.skillCfg [id];
			this.cd=skillVo?skillVo.cd:0;
			this.maxFloors=maxFloors;
			this.changeCallBack=changeCallBack;
		}

		__proto.update=function(t){
			if (this.maxFloors <=1)return;
			var now=Laya.timer.currTimer;
			if (this.curFloor < this.maxFloors){
				this.curEnerger+=t;
				if (this.curEnerger / this.cd >=1){
					this.curFloor++;
					this.changeCallBack && this.changeCallBack(this.curFloor);
					this.curEnerger=0;
				}
			}
		}

		__proto.clear=function(){
			this.skillId=-1;
			this.curFloor=1;
			this.maxFloors=1;
		}

		return SkillInfo;
	})()


	/**
	*...
	*@author lifei
	*/
	//class view.NetWorkControl
	var NetWorkControl=(function(){
		function NetWorkControl(s){
			this._waitTime=NaN;
			this.parentClassName=null;
			this.callback=null;
			this.parentClassName=s;
		}

		__class(NetWorkControl,'view.NetWorkControl');
		var __proto=NetWorkControl.prototype;
		/**界面打开时自动调用，不会屏蔽全局的鼠标事件。只有在显示网络异常时才回通过界面遮挡住鼠标事件
		*<br> 与_detroy函数是一对，请同步修改
		**/
		__proto._reSet=function(waitTime){
			this._waitTime=waitTime;
			Laya.timer.once(this._waitTime,this,this._onTimerout,null,false);
		}

		__proto._onTimerout=function(){
			LoadingPage.getInstance().hide();
			LoadUI.instance.onShow();
		}

		/**与 _reSet 函数是一对，请同步修改 */
		__proto._detroy=function(){
			Laya.timer.clear(this,this._onTimerout);
			LoadingPage.getInstance().hide();
			LoadUI.instance.dispose();
			this._waitTime=0;
		}

		/**界面操作时，显示数据加载中
		*<br> 自动屏蔽了全局鼠标事件
		*<br> 与 detroy 函数是一对
		**/
		__proto.reSet=function(waitTime,cb){
			this.callback=cb;
			(LoadingPage.getInstance2().parent).mouseEnabled=true;
			(LoadingPage.getInstance2().parent).mouseThrough=false;
			LoadingPage.getInstance2().show(this.parentClassName);
			this._waitTime=waitTime;
			Laya.timer.once(this._waitTime,this,this._onTimerout1,null,false);
		}

		__proto._onTimerout1=function(){
			LoadingPage.getInstance2().hide();
			LoadUI.instance.onShow();
			this.callback && this.callback.run();
		}

		/**
		*与 reSet 函数是一对，请同步修改
		*<br> 自动解除了全局鼠标事件
		**/
		__proto.detroy=function(){
			(LoadingPage.getInstance2().parent).mouseEnabled=false;
			Laya.timer.clear(this,this._onTimerout1);
			LoadingPage.getInstance2().hide();
			LoadUI.instance.dispose();
			this._waitTime=0;
		}

		return NetWorkControl;
	})()


	/**
	*记录，存储最近战斗过的好友
	*<br> 存到LocalStorage上了
	*@author luohuantao
	*/
	//class view.page.chat.FriendRecentFight
	var FriendRecentFight=(function(){
		function FriendRecentFight(){}
		__class(FriendRecentFight,'view.page.chat.FriendRecentFight');
		FriendRecentFight.setData=function(arr){
			var arr_LS=SnowUtils.getDataInLocalStorage("FriendRecentFight");arr_LS=arr_LS|| [];
			var attentionArr=[];
			for (var i=0;i < arr.length;i++){
				var friendId=(arr [i]).friendId;
				FriendRecentFight.findOne(arr_LS,friendId);
				arr_LS.push(arr[i]);
				attentionArr.push(friendId);
			}
			attentionArr.length && HallApp.user_attention(attentionArr);
			if (arr_LS.length > 20){
				arr_LS.splice(20-1);
			}
			SnowUtils.setDataInLocalStorage("FriendRecentFight",arr_LS);
		}

		FriendRecentFight.updataData=function(arr){
			SnowUtils.setDataInLocalStorage("FriendRecentFight",arr);
		}

		FriendRecentFight.getData=function(){
			return (SnowUtils.getDataInLocalStorage("FriendRecentFight"))|| [];
		}

		FriendRecentFight.clear=function(){
			SnowUtils.setDataInLocalStorage("FriendRecentFight",[]);
		}

		FriendRecentFight.findOne=function(arr,friendId){
			for (var i=0,j=arr.length;i < j;i++){
				if ((arr [i]).friendId==friendId){
					arr.splice(i,1);
					return null;
				}
			}
			return null;
		}

		FriendRecentFight.KEY_LS="FriendRecentFight";
		FriendRecentFight.num=2;
		FriendRecentFight.maxNum=20;
		return FriendRecentFight;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class laya8.core.social.FriendInfo
	var FriendInfo=(function(){
		function FriendInfo(){
			this.friendId=0;
			this.status=0;
			this.json=null;
			this.creation=0;
			this.online=false;
			this.userInfo=null;
		}

		__class(FriendInfo,'laya8.core.social.FriendInfo');
		return FriendInfo;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class laya8.core.social.GroupInfo
	var GroupInfo=(function(){
		function GroupInfo(){
			this.id=0;
			this.title=null;
			this.json=null;
			this.friends=null;
		}

		__class(GroupInfo,'laya8.core.social.GroupInfo');
		return GroupInfo;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class laya8.core.user.SearchByUIdResultInfo
	var SearchByUIdResultInfo=(function(){
		function SearchByUIdResultInfo(){
			this.userId=0;
			this.targetId=0;
			this.userBasicData=null;
			this.online=false;
		}

		__class(SearchByUIdResultInfo,'laya8.core.user.SearchByUIdResultInfo');
		return SearchByUIdResultInfo;
	})()


	/**
	*...
	*@author
	*/
	//class view.page.gaming.SkillButtonUtils
	var SkillButtonUtils=(function(){
		function SkillButtonUtils(){}
		__class(SkillButtonUtils,'view.page.gaming.SkillButtonUtils');
		SkillButtonUtils.loopCD=function(){}
		SkillButtonUtils.initSKillButton=function(skillbox,btn,isDoubleContrl){
			(btn).isDobuleContrl=isDoubleContrl;
			btn.off("mousedown",skillbox,skillbox._doubleContrl);
			btn.off("mousedown",skillbox,skillbox._checkxuli);
			btn.on("mousedown",skillbox,isDoubleContrl?skillbox._doubleContrl:skillbox._checkxuli,[true]);
		}

		SkillButtonUtils._checkxuli=function(skillbox,btnskill,index,checkMove,e){
			Laya.stage.on("mouseup",skillbox,skillbox.overMouseUp,[e.touchId]);
			if (checkMove)skillbox.onDown();
			if (checkMove&&(btnskill).isEmpty){
				skillbox.emptyClck();
				return;
			}
			if (!Player.curUser)return;
			(btnskill)._touchId=e.touchId;
			if(checkMove)btnskill.on("mouseout",skillbox,skillbox.onButtonUp);
			CheckAttackButton.onDown(btnskill,index,e);
			e.target.on("keyup",skillbox,skillbox.onButtonUp);
		}

		SkillButtonUtils.onButtonUp=function(skillbox,btnskill,e){
			skillbox.onUp();
			if (e.type=="mouseout"&&(e.target)._touchId!=e.touchId){
				return;
			}
			if ((btnskill).isEmpty){
				return;
			}
			e.target.off("keyup",SkillButtonUtils,SkillButtonUtils.onButtonUp);
			CheckAttackButton.onUp(btnskill);
		}

		return SkillButtonUtils;
	})()


	/**
	*...
	*@author
	*/
	//class view.page.guide.GuideNode
	var GuideNode=(function(){
		function GuideNode(){
			this.watingTime=100000000;
			this.duration=0;
			this.tipsDuration=0;
			this.endduration=0;
			this.tipsStr=null;
			this.tipsStrend=null;
			this.sstep=0;
			this.soundType=-1;
			this.soundTypeend=-1;
			this.actionReqs=null;
			this.beginTime=0;
			this.isplay=false;
			this.tipsType=0;
			this.canClick=false;
			this.stepIndex=0;
			this.stepName=null;
			this.tipsx=NaN;
			this.tipsy=NaN;
			this.startime=0;
			this.isended=false;
			this.uiReqs=GuideLink.ALLNOTHAVE;
			this.taskType=0;
			this.stepIndex=GuideNode.StepIndexCount++;
			this.endduration=0;
		}

		__class(GuideNode,'view.page.guide.GuideNode');
		var __proto=GuideNode.prototype;
		/**
		*是否完成
		*@return
		*/
		__proto.isFinish=function(dt,allt){
			return this.isended || dt > allt;
		}

		__proto.setRect=function(arr){}
		__proto.run=function(t){
			if (!this.beginTime){
				this.beginTime=t;
				this.begin();
			};
			var dt=t-this.beginTime;
			var allt=this.watingTime+this.duration;
			if (dt > this.watingTime && dt < allt){
				this.start();
			}
			if (this.isFinish(dt,allt)){
				this.stepName && StatManager.I.addTeach(StatManager.I.getStatData(this.stepName));
				this.end();
				return true;
			}
			return false;
		}

		__proto.start=function(){
			if (!this.isplay){
				this._startFun();
				var user=Player.curUser;
				if (this.tipsType==0){
					if(this.soundType!=-1)SoundManager.stopAllSound();
					this.tipsStr && user&& user.showQiPao(this.tipsStr,this.tipsDuration,this.soundType);
				}
				else{
					var gv=GamingView.I;
					var user=Player.curUser;
					this.tipsStr && GuideMask.getInstance().maskNone(gv,gv.getChildIndex(gv.tipsObj),this.tipsStr,this.tipsy,this.tipsx,this.soundType);
				}
			}
		}

		__proto._startFun=function(){
			this.startime=Laya.timer.currTimer;
			this.isended=false;
			this.isplay=true;
		}

		/**
		*
		*/
		__proto.begin=function(){
			this.uiReqs && GuideLink.uiRestrain(this.uiReqs);
			this.actionReqs && GuideLink.actionrestrain(this.actionReqs);
			this.canClick && Laya.stage.on("click",this,this.cFun);
			this.sstep && GuideLink.step(this.sstep);
		}

		__proto.cFun=function(){
			if (Laya.timer.currTimer-this.startime > 650&&this.isplay){
				this.completeFun(null);
			}
		}

		__proto.end=function(){
			this.canClick&&Laya.stage.off("click",this,this.cFun);
			if (this.endduration){
				Player.curUser.showQiPao(this.tipsStrend,this.endduration,this.soundTypeend);
			}
			if (this.tipsType==1){
				GuideMask.getInstance().clear();
			}
			this.uiReqs && GuideLink.uiRestrain(GuideLink.RESTUI);
			this.actionReqs && GuideLink.actionrestrain(GuideLink.RESTACTION);
			this.clear();
		}

		__proto.clear=function(){
			this.isplay=false;
			this.beginTime=0;
		}

		__proto.completeFun=function(data){
			this.isended=true;
		}

		__proto.reconnect=function(){
			this.uiReqs && GuideLink.uiRestrain(this.uiReqs);
			this.actionReqs && GuideLink.actionrestrain(this.actionReqs);
		}

		GuideNode.NONE=0;
		GuideNode.GETDAOJU=1;
		GuideNode.KILLONE=2;
		GuideNode.PASSTIVE=3;
		GuideNode.FALLBIGBALL=4;
		GuideNode.GUIDEMOVE=5;
		GuideNode.AIGETIN=6;
		GuideNode.StepIndexCount=0;
		return GuideNode;
	})()


	/**
	*...
	*@author
	*/
	//class view.page.guide.GuideArrow
	var GuideArrow=(function(){
		function GuideArrow(){
			this.jiantou=null;
			this.jiantou1=null;
			this.jiantou2=null;
			this.jiantou3=null;
			this.target=null;
			this._tmpVec2=new Point();
		}

		__class(GuideArrow,'view.page.guide.GuideArrow');
		var __proto=GuideArrow.prototype;
		__proto.init=function(){
			if (!this.jiantou){
				this.jiantou=new Animation();
				this.jiantou.loadAnimation("ani/donghua/direction.ani",null);
				this.target=new Animation();
				this.target.loadAnimation("ani/donghua/target.ani",null);
				this.jiantou1=new Animation();
				this.jiantou1.loadAnimation("ani/donghua/direction.ani",null);
				this.jiantou2=new Animation();
				this.jiantou2.loadAnimation("ani/donghua/direction.ani",null);
				this.jiantou3=new Animation();
				this.jiantou3.loadAnimation("ani/donghua/direction.ani",null);
			}
		}

		/**
		*创建指引尖头
		*@param point 尖头指引的位置坐标
		*/
		__proto.onCreateJianTou=function(px,py,completeHandle,w,h){
			Laya.timer.clear(this,this.getDeltaVector);
			this.jiantou.removeSelf();
			Player.I.roleBackLayer.addChild(this.jiantou);
			this.jiantou.pivot(-60,0);
			this.jiantou.play();
			this.getDeltaVector(px,py,completeHandle,w,h);
			Laya.timer.frameLoop(1,this,this.getDeltaVector,[px,py,completeHandle,w,h]);
		}

		__proto.onCreateStaticJianTou=function(px,py,completeHandle,w,h,n){
			this.target.removeSelf();
			this.target.play();
			var x=px+1 / 2 *w;
			var y=py+1 / 2 *h;
			this.target.pos(x,y);
			Player.I.roleBackLayer.addChild(this.target);
			this.jiantou.removeSelf();
			this.jiantou.pos(x-250,y);
			this.jiantou.play();
			Player.I.roleBackLayer.addChild(this.jiantou);
			if (n > 1){
				this.jiantou1.removeSelf();
				this.jiantou1.pos(x-420,y);
				this.jiantou1.play();
				Player.I.roleBackLayer.addChild(this.jiantou1);
			}
			if (n > 2){
				this.jiantou2.removeSelf();
				this.jiantou2.pos(x-590,y);
				this.jiantou2.play();
				Player.I.roleBackLayer.addChild(this.jiantou2);
			}
			if (n > 3){
				this.jiantou3.removeSelf();
				this.jiantou3.pos(x-760,y);
				this.jiantou3.play();
				Player.I.roleBackLayer.addChild(this.jiantou3);
			}
			this.getDeltaVectorNew(px,py,completeHandle,w,h);
			Laya.timer.frameLoop(2,this,this.getDeltaVectorNew,[px,py,completeHandle,w,h]);
		}

		__proto.clear=function(){
			Laya.timer.clear(this,this.getDeltaVector);
			if (this.jiantou){
				this.jiantou.stop();
				this.jiantou.removeSelf();
			}
			if (this.jiantou1){
				this.jiantou1.stop();
				this.jiantou1.removeSelf();
			}
			if (this.jiantou2){
				this.jiantou2.stop();
				this.jiantou2.removeSelf();
			}
			if (this.jiantou3){
				this.jiantou3.stop();
				this.jiantou3.removeSelf();
			}
			this.target && this.target.removeSelf();
		}

		__proto.getDeltaVectorNew=function(xt,yt,completeHandle,w,h){
			var user=Player.curUser;
			if (!user)return;
			var roleX=user.x;
			var roleY=user.y+2 / 3 *user.displayHeight;
			var roleW=user.displayWidth;
			var roleH=user.displayHeight / 3;
			var dx=xt;
			var dy=yt;
			var dw=w;
			var dh=h;
			if (!(roleX > (dx+dw)|| (roleX+roleW)< dx || roleY > (dy+dh)|| (roleY+roleH)< dy)){
				this.clear();
				Laya.timer.clear(this,this.getDeltaVectorNew);
				completeHandle&&completeHandle.run();
				return;
			}
		}

		__proto.getDeltaVector=function(xt,yt,completeHandle,w,h){
			var user=Player.curUser;
			if (!user)return this._tmpVec2;
			var pox=user.x+(user.displayWidth / 2);
			var poy=user.y+(user.displayHeight-22);
			this._tmpVec2.x=xt+w/2-pox;
			this._tmpVec2.y=yt+h/2-poy;
			var roleX=user.x;
			var roleY=user.y+2 / 3 *user.displayHeight;
			var roleW=user.displayWidth;
			var roleH=user.displayHeight / 3;
			var dx=xt;
			var dy=yt;
			var dw=w;
			var dh=h;
			if (!(roleX > (dx+dw)|| (roleX+roleW)< dx || roleY > (dy+dh)|| (roleY+roleH)< dy)){
				this.clear();
				Laya.timer.clear(this,this.getDeltaVector);
				completeHandle&&completeHandle.run();
				return this._tmpVec2;
			};
			var zidanjuli=Math.sqrt(Math.pow(this._tmpVec2.x,2)+Math.pow(this._tmpVec2.y,2));
			this._tmpVec2.normalize();
			this.jiantou.pos(pox,poy);
			this.jiantou.rotation=PathBase.getAngleByVector2D(this._tmpVec2.x,this._tmpVec2.y);
			return this._tmpVec2;
		}

		GuideArrow.getInstance=function(){GuideArrow._instance=GuideArrow._instance|| new GuideArrow();
			GuideArrow._instance.init();
			return GuideArrow._instance;
		}

		GuideArrow.clearAll=function(){
			if (GuideArrow._instance){
				GuideArrow._instance.clear();
			}
		}

		GuideArrow._instance=null
		return GuideArrow;
	})()


	/**
	*...
	*@author
	*/
	//class view.page.guide.GuideLink
	var GuideLink=(function(){
		function GuideLink(){
			this.nodeList=[];
			this.curIndex=0;
			this.isStarted=false;
			var list=ConfigData.guideList;
			for (var d in list){
				var item=list[d];
				var node=this.getObjectByClassId(item.classId);
				node.watingTime=item.watingTime;
				node.sstep=item.sstep;
				node.tipsDuration=item.tipsDuration;
				node.duration=item.duration;
				node.tipsType=item.tipsType;
				node.tipsx=item.tipsx;
				node.tipsy=item.tipsy;
				node.stepName=item.maidian;
				node.tipsStr=item.tipsStr;
				node.uiReqs=item.uirestrain;
				node.actionReqs=item.actionReqs;
				node.soundType=item.soudId;
				node.taskType=item.taskType;
				node.canClick=item.canClick;
				(node).n=item.n;
				(node).count=item.count;
				node.setRect(item.targetRect);
				this.nodeList.push(node);
			}
		}

		__class(GuideLink,'view.page.guide.GuideLink');
		var __proto=GuideLink.prototype;
		//]
		__proto.getObjectByClassId=function(classid){
			var cls=GuideLink.classLists [classid];cls=cls|| GuideNode;
			return new cls();
		}

		__proto.start=function(){
			var gv=GamingView.I;
			gv.viewRank.visible=false;
			gv.btn_fightSet.visible=false;
			gv.tabmoshi.visible=false;
			var door=DoorObject.Door;
			if (door&&!door.parent){
				var cfg=ConfigData.elementData[door.itemid];
				var key="ITEM:"+cfg.sourceID+"/"+cfg.type+"/"+cfg.classID;
				Player.I.newNetObject(key,door._classid,door.uid,door);
				DoorObject.Door.visible=true;
			}
			if (this.isStarted){
				var curTask=this.nodeList [this.curIndex];
				if (curTask)
					curTask.reconnect();
			}
			this.isStarted=true;
		}

		__proto.end=function(){
			this.isStarted=false;
		}

		/**
		*完成目标
		*@param i
		*/
		__proto.complete=function(i,data){
			var curTask=this.nodeList [this.curIndex];
			if (curTask&&curTask.taskType==i){
				curTask.completeFun(data);
			}
		}

		__proto.run=function(t){
			if (!this.isStarted)return;
			var curTask=this.nodeList [this.curIndex];
			if (curTask){
				if (curTask.run(t)){
					this.curIndex++;
					this.run(t);
				}
			}
			NpcManger.run(t);
		}

		__proto.clearAll=function(){
			GuideMask.clearAll();
			GuideArrow.clearAll();
			this.curIndex=-1;
			var gv=GamingView.I;
			gv.chooseSkill.mouseEnabled=true;
			gv.btn_fightSet.visible=true;
			gv.tabmoshi.visible=true;
			CheckAttackButton.enableXULI=true;
			gv.gameCtrl.attackCtrl.setStoped(false);
			gv.viewRank.visible=true;
		}

		GuideLink.uiRestrain=function(arr){
			var gv=GamingView.I;
			gv.btnAttack.visible=arr[0];
			gv.skillbox1.visible=arr[1];
			gv.skillbox2.visible=arr[2];
		}

		GuideLink.actionrestrain=function(arr){
			var contrl=GamingView.I.gameCtrl;
			if (arr[0]){
				var user=Player.curUser;
				contrl.getMoveRocker().setStoped(true);
				contrl._lastMoveAngle=-1;
				contrl.__mouseEnabled=false;
				if (user){
					contrl._sendMove();
					Player.curUser.realStop();
				}
			}
			else{
				contrl.getMoveRocker().setStoped(false);
				contrl.__mouseEnabled=true;
			}
			if (arr[1]){
				CheckAttackButton.enableXULI=((arr[1]==1)?false:true);
			}
		}

		GuideLink.enableAttack=function(){
			GamingView.I.gameCtrl.__mouseEnabled=true;
		}

		GuideLink.step=function(id){
			NpcManger.sstep=id;
			var cmd=MsgTemplate.createWithClass(CMsgNewbieStep);
			cmd.step=id;
			GameSocket.sendClientMsg(cmd);
			SnowUtils.battleMsg.guideStep(cmd);
			cmd.release();
		}

		GuideLink.CREATESNOW=1;
		GuideLink.CREATEROLEONE=2;
		GuideLink.CREATEROLETWO=4;
		GuideLink.CREATEROLETHREE=8;
		GuideLink.MOVEAI=16;
		GuideLink.FINISH=32;
		__static(GuideLink,
		['classLists',function(){return this.classLists={
				1:GuideNode,
				2:GuideMove,
				3:GuideMoveTarget,
				4:GuideAIWalk,
				5:GuideAttack,
				6:GuideSkill,
				7:GuideXuliAttack,
				8:GuideKillPeople
			};},'RESTUI',function(){return this.RESTUI=[true,true,true,false];},'ALLNOTHAVE',function(){return this.ALLNOTHAVE=[false,false,false,false];},'ONLYSKILLATTACK',function(){return this.ONLYSKILLATTACK=[false,true,false,false];},'ONLYMAINATTACK',function(){return this.ONLYMAINATTACK=[true,false,false,false];},'ONLYATTACK',function(){return this.ONLYATTACK=[true,true,false,false];},'CANOTMOVE',function(){return this.CANOTMOVE=[1];},'CANOTMOVEAXULI',function(){return this.CANOTMOVEAXULI=[1,1];},'RESTXULI',function(){return this.RESTXULI=[0,2];},'RESTACTION',function(){return this.RESTACTION=[0];},'IDS',function(){return this.IDS=[
			GuideLink.RESTUI,
			GuideLink.ALLNOTHAVE];}
		]);
		return GuideLink;
	})()


	/**
	*...
	*@author
	*/
	//class view.page.guide.GuideMask
	var GuideMask=(function(){
		function GuideMask(){
			this.guideContainer=null;
			this.hitArea=null;
			this.interactionArea=null;
			this.jiantou=null;
			this.maskArea=null;
		}

		__class(GuideMask,'view.page.guide.GuideMask');
		var __proto=GuideMask.prototype;
		/**
		*初始化
		*/
		__proto.init=function(){
			var w=Laya.stage.width;
			var h=Laya.stage.height;
			if (!this.guideContainer){
				GuideMask.tips=GuideMask.tips || new GuideTipsUI();
				this.guideContainer=new Box();
				this.guideContainer.cacheAs="bitmap";
				this.maskArea=new Sprite();
				this.maskArea.alpha=0.01;
				this.guideContainer.addChild(this.maskArea);
				this.hitArea=new HitArea();
				this.jiantou=new GuideJTUI();
				this.guideContainer.addChild(this.jiantou);
				this.jiantou.pos(-100,-100);
				this.guideContainer.addChild(GuideMask.tips);
				this.guideContainer.hitArea=this.hitArea;
				this.guideContainer.mouseEnabled=true;
				this.interactionArea=new Sprite();
				this.interactionArea.blendMode="destination-out";
				this.guideContainer.addChild(this.interactionArea);
				GuideMask.changAn=new GuideXuliUI();
				this.guideContainer.addChild(GuideMask.changAn);
				GuideMask.changAn.visible=false;
			}
			GamingView.I.tipsObj.alpha=0;
			this.guideContainer.size(w,h);
			this.maskArea.graphics.clear();
			this.maskArea.graphics.drawRect(0,0,w,h,"#000000");
			this.hitArea.hit.clear();
			this.hitArea.hit.drawRect(0,0,w,h,"#000000");
		}

		__proto.stopCtrl=function(){
			var user=Player.curUser;
			var gv=GamingView.I;
			gv.hideTips();
			var contrl=gv.gameCtrl;
			contrl.getMoveRocker().setStoped(true);
			contrl._lastMoveAngle=-1;
			contrl.__mouseEnabled=false;
			if (user){
				contrl._sendMove();
				user.realStop();
			}
		}

		__proto.maskRect=function(sp,childIndex,x,y,w,h,tipStr,soundId){
			this.playSound(soundId);
			this.stopCtrl();
			this.init();
			GuideMask.tips.pos(1 / 2 *GamingView.I.width,200);
			GuideMask.tips.tipText.text=tipStr;
			this.jiantou.pos(x+1 / 2 *w,y-33);
			this.jiantou.jt.play();
			this.jiantou.jt.rotation=0;
			this.hitArea.unHit.clear();
			this.hitArea.unHit.drawRect(x,y,w,h,"#000000");
			this.interactionArea.graphics.clear();
			this.interactionArea.graphics.drawRect(x,y,w,h,"#ff0000");
			sp.addChildAt(this.guideContainer,childIndex);
		}

		__proto.playSound=function(soundId){
			SoundManager.stopAllSound();
			ConfigData.soundCfg[soundId]&&SoundManager.playSound(ConfigData.soundCfg[soundId],1);
		}

		__proto.maskNone=function(sp,childIndex,tipStr,bottom,left,soundId){
			this.playSound(soundId);
			this.stopCtrl();
			this.init();
			GuideMask.tips.bottom=bottom;
			GuideMask.tips.left=left;
			GuideMask.tips.tipText.text=tipStr;
			this.hitArea.unHit.clear();
			this.interactionArea.graphics.clear();
			sp.addChildAt(this.guideContainer,childIndex);
		}

		__proto.maskCircle=function(sp,childIndex,x,y,r,tipStr,bottom,left,soundId){
			this.playSound(soundId);
			this.stopCtrl();
			this.init();
			GuideMask.tips.bottom=bottom;
			GuideMask.tips.left=left;
			GuideMask.tips.tipText.text=tipStr;
			this.hitArea.unHit.clear();
			this.hitArea.unHit.drawCircle(x,y,r,"#ff0000");
			this.interactionArea.graphics.clear();
			this.interactionArea.graphics.drawCircle(x,y,r,"#ff0000");
			this.interactionArea.alpha=0.01;
			sp.addChildAt(this.guideContainer,childIndex);
			if (bottom==245){
				GuideMask.changAn.visible=true;
				GuideMask.changAn.xuli.play();
				GuideMask.changAn.pos(x,y);
			}
			else if(bottom!=459){
				this.jiantou.pos(x-r-10,y-r-10);
				this.jiantou.jt.play();
				this.jiantou.jt.rotation=-45;
			}
		}

		__proto.clear=function(){
			GamingView.I.gameCtrl.getMoveRocker().setStoped(false);
			GamingView.I.gameCtrl.__mouseEnabled=true;
			if (this.guideContainer){
				this.guideContainer.removeSelf();
				this.jiantou.jt.stop();
				this.jiantou.pos(-100,-100);
				GuideMask.changAn.visible=false;
			}
		}

		GuideMask.getInstance=function(){GuideMask._instance=GuideMask._instance|| new GuideMask();
			return GuideMask._instance;
		}

		GuideMask.clearAll=function(){
			if (GuideMask._instance){
				GuideMask._instance.clear();
			}
		}

		GuideMask._instance=null
		GuideMask.tips=null
		GuideMask.changAn=null
		return GuideMask;
	})()


	/**
	*...
	*@author
	*/
	//class view.page.guide.NpcManger
	var NpcManger=(function(){
		function NpcManger(){
			this.ids=[];
		}

		__class(NpcManger,'view.page.guide.NpcManger');
		var __proto=NpcManger.prototype;
		__proto.init=function(uids){
			this.ids.length=0;
			for (var i=0;i < uids.length;i++){
				var uid=uids[i];
				this.ids[i]=uid;
				var npc=Player.I.roleObjectsBySelfId [uid];
				npc.preMoveTime=0;
				npc.fx=npc.x;
				npc.fy=npc.y;
			}
		}

		__proto.moveToAngle=function(uid,t){
			var npc=Player.I.roleObjectsBySelfId [uid];
			if (npc){
				var obj=npc;
				if (Math.abs(obj.fx-npc.x)>=Math.abs(NpcManger.bg[NpcManger.sstep].x+5)){
					GuideMgrI.fuckComplete(6,null);
				}
				else if(!obj.preMoveTime){
					obj.preMoveTime=t;
					Laya.timer.once(1500,npc,this.goSomePlace,[npc,uid]);
				}
			}
		}

		//goSomePlace(npc,uid);
		__proto.goSomePlace=function(npc,uid){
			var moveData1=MsgTemplate.createWithClass(CMsgUserDeltaMove);
			moveData1.x=0 | npc.x;
			moveData1.y=0 | npc.y;
			var roledy=Math.round(2 / 3 *npc.__HH *npc.scaleY);
			var time=Collision.I.checkinBox2(npc.x,npc.y,180,roledy,moveData1);
			moveData1.deltax=NpcManger.bg[NpcManger.sstep].x;
			moveData1.deltay=NpcManger.bg[NpcManger.sstep].y;
			moveData1.aiUID=uid;
			moveData1.baseTime=CMsgHeartBeatRes.getServerTime(Laya.timer.currTimer);
			SnowUtils.battleMsg.sendMove(moveData1);
			moveData1.release();
		}

		__proto.stop=function(){}
		__proto.attack=function(uid){}
		__proto.update=function(t){
			var n=this.ids.length;
			if (!NpcManger.bg[NpcManger.sstep])return;
			if (n){
				for (var i=0;i < n;i++){
					this.moveToAngle(this.ids[i],t);
				}
			}
		}

		NpcManger.beginControl=function(uids){
			if (!NpcManger._instance){
				NpcManger._instance=new NpcManger();
			}
			NpcManger._instance.init(uids);
		}

		NpcManger.run=function(t){
			NpcManger._instance && NpcManger._instance.update(t);
		}

		NpcManger.sstep=-1;
		NpcManger._instance=null
		__static(NpcManger,
		['bg',function(){return this.bg={
				"2":{x:2450-2586,y:910-877},
				"4":{x:3050-3148,y:870-890 }
		};}

		]);
		return NpcManger;
	})()


	/**
	*弹Tips处理
	*@author xiaosong
	*@date-2017-08-15
	*/
	//class view.page.wheel.TipsManager
	var TipsManager=(function(){
		var DataClasInfo;
		function TipsManager(){
			this._dataClasInfo=null;
			this.isExistTips=false;
			this._tipsArr=null;
			this._currentTweenTips=null;
		}

		__class(TipsManager,'view.page.wheel.TipsManager');
		var __proto=TipsManager.prototype;
		/**
		*飘普通文字
		*@param msgTxt
		*@param callBack
		*@param delay 延迟时间 暂时没做效果
		*@param xNode 起始坐标点
		*@param 类类型 1WheelTipsViewUI_ONE
		*/
		__proto.showText=function(msgTxt,callBack,delay,xNodePos,clasType){
			(delay===void 0)&& (delay=0);
			(clasType===void 0)&& (clasType=1);
			if(this._tipsArr==null)
				this._tipsArr=[];
			if(!this.isExistTips){
				this._tipsArr.push(new DataClasInfo(msgTxt,callBack,delay,xNodePos,clasType));
				this.isExistTips=true;
				this.onGouJianInfo();
			}
		}

		/**构建Tips信息**/
		__proto.onGouJianInfo=function(){
			this._dataClasInfo=this._tipsArr.shift();
			var tipsView;
			switch(this._dataClasInfo.clasType){
				case TipsManager.WheelTipsViewUI_ONE:{
						tipsView=Pool.getItem("WheelTipsView")|| new WheelTipsView();
						tipsView.initData(this._dataClasInfo.msgTxt);
						break ;
					}
				case TipsManager.WheelTipsViewUI_TWO:{
						tipsView=Pool.getItem("WheelFontClipView")|| new WheelFontClipView();
						tipsView.initFontClip(2,parseInt(this._dataClasInfo.msgTxt));
						break ;
					}
				case TipsManager.WheelTipsViewUI_THREE:{
						tipsView=Pool.getItem("DianZan")|| new DianZan();
						tipsView.initData(this._dataClasInfo.msgTxt);
						break ;
					}
				}
			this._currentTweenTips=tipsView;
			Laya.stage.addChild(tipsView);
			if(this._dataClasInfo.xNodePos==null){
				tipsView.x=Laya.stage.width-tipsView.width >> 1;
				tipsView.y=(Laya.stage.height-tipsView.height >>1)-100;
				}else{
				tipsView.x=this._dataClasInfo.xNodePos.x;
				tipsView.y=this._dataClasInfo.xNodePos.y;
			}
			this.onStartPlay(tipsView);
		}

		/**
		*开始播放Tips缓动动画
		*@param tipsView
		*/
		__proto.onStartPlay=function(tipsView){
			TipsManager._callBack=new Handler(this,this.onCallBackHandler,[tipsView]);
			if(this._dataClasInfo.clasType==TipsManager.WheelTipsViewUI_ONE || this._dataClasInfo.clasType==TipsManager.WheelTipsViewUI_THREE){
				tipsView.alpha=0;
				Tween.to(tipsView,{alpha:1},300,null,null);
				Tween.to(tipsView,{y:tipsView.y-80},500,null,null,700);
				Tween.to(tipsView,{y:tipsView.y-180,alpha:0},500,null,TipsManager._callBack,1600);
				}else if(this._dataClasInfo.clasType==TipsManager.WheelTipsViewUI_TWO){
				(tipsView).pivot(tipsView.width/2,tipsView.height/2);
				Tween.to(tipsView,{y:tipsView.y-80,scaleX:1.2,scaleY:1.2},300,null);
				Tween.to(tipsView,{y:tipsView.y-140,alpha:0.25,scaleX:1,scaleY:1},200,null,null,550);
				Tween.to(tipsView,{y:tipsView.y-180,alpha:0},100,null,TipsManager._callBack,800);
			}
		}

		/**
		*动画缓动处理
		*@param tipsView
		*/
		__proto.onCallBackHandler=function(tipsView){
			this.dispose();
			if(this._dataClasInfo.callBack !=null){
				this._dataClasInfo.callBack.run();
			}
			this._dataClasInfo.callBack=null;
			this._currentTweenTips=null;
			this._dataClasInfo=null;
			TipsManager._callBack=null;
			if(this._tipsArr && this._tipsArr.length){
				this.onGouJianInfo();
				}else{
				this.isExistTips=false;
			}
		}

		__proto.dispose=function(){
			if(this._currentTweenTips){
				this._currentTweenTips.alpha=1;
				this._currentTweenTips.scaleX=1;
				this._currentTweenTips.scaleY=1;
				if(this._dataClasInfo.clasType==TipsManager.WheelTipsViewUI_ONE)
					Pool.recover("WheelTipsView",this._currentTweenTips);
				else if(this._dataClasInfo.clasType==TipsManager.WheelTipsViewUI_TWO)
				Pool.recover("WheelFontClipView",this._currentTweenTips);
				else if(this._dataClasInfo.clasType==TipsManager.WheelTipsViewUI_THREE)
				Pool.recover("DianZan",this._currentTweenTips);
				(this._currentTweenTips).removeSelf();
				this._currentTweenTips=null;
			}
		}

		/**销毁缓动**/
		__proto.onDispose=function(){
			if(this._currentTweenTips){
				Tween.clearAll(this._currentTweenTips);
			}
			this.dispose();
			this.isExistTips=false;
		}

		__getset(1,TipsManager,'instance',function(){
			return TipsManager._instance=TipsManager._instance|| new TipsManager();
		});

		TipsManager.WheelTipsViewUI_ONE=1;
		TipsManager.WheelTipsViewUI_TWO=2;
		TipsManager.WheelTipsViewUI_THREE=3;
		TipsManager._instance=null
		TipsManager._callBack=null
		TipsManager.__init$=function(){
			//class DataClasInfo
			DataClasInfo=(function(){
				function DataClasInfo(msgTxt,callBack,delay,xNodePos,clasType){
					this.msgTxt=null;
					this.callBack=null;
					this.delay=0;
					this.xNodePos=null;
					this.clasType=0;
					this.msgTxt=msgTxt;
					this.callBack=callBack;
					this.delay=delay;
					this.xNodePos=xNodePos;
					this.clasType=clasType;
				}
				__class(DataClasInfo,'');
				return DataClasInfo;
			})()
		}

		return TipsManager;
	})()


	/**
	*...
	*@author ...
	*/
	//class view.page.wptips.WpData
	var WpData=(function(){
		function WpData(){
			this.imgUrl=null;
			this.iName=null;
			this.iCount=null;
			this.iContent=null;
		}

		__class(WpData,'view.page.wptips.WpData');
		return WpData;
	})()


	/**
	*...
	*@author 李飞
	*/
	//class view.shop.vo.voBackpackCfg
	var voBackpackCfg=(function(){
		function voBackpackCfg(){
			this.itemId=0;
			this.itemNum=0;
		}

		__class(voBackpackCfg,'view.shop.vo.voBackpackCfg');
		return voBackpackCfg;
	})()


	/**
	*...
	*@author ...
	*/
	//class view.shop.vo.voDuoBaoItemCfg
	var voDuoBaoItemCfg=(function(){
		function voDuoBaoItemCfg(){
			this.id=0;
			this.count=0;
			this.isRare=0;
			this.isUnique=0;
			this.itemId=0;
			this.itemName=null;
			this.weight=0;
		}

		__class(voDuoBaoItemCfg,'view.shop.vo.voDuoBaoItemCfg');
		return voDuoBaoItemCfg;
	})()


	/**
	*游戏界面管理
	*@author 不是贾艳昭
	*/
	//class view.UIMgr
	var UIMgr=(function(){
		function UIMgr(){}
		__class(UIMgr,'view.UIMgr');
		UIMgr.init=function(){
			UIMgr.AllLayer=new Box();
			UIMgr.fightBox=new Box();
			UIMgr.fightBox.name="fightBox";
			UIMgr.AllLayer.addChild(UIMgr.fightBox);
			UIMgr.AllLayer.mouseEnabled=true;
			Laya.stage.addChild(UIMgr.AllLayer);
			if((Browser.onMiniGame && MiniAdpter.systemInfo.model.indexOf("iPhone X")!=-1)|| Browser.onIPhoneX){
				UIMgr.leftBox=new Box();
				Laya.stage.addChild(UIMgr.leftBox);
				UIMgr.leftBox.left=0;
				UIMgr.rightBox=new Box();
				Laya.stage.addChild(UIMgr.rightBox);
				UIMgr.rightBox.right=0;
				UIMgr.leftBox.bottom=UIMgr.leftBox.top=UIMgr.rightBox.bottom=UIMgr.rightBox.top=0;
				UIMgr.chazhi=123;
				UIMgr.AllLayer.left=UIMgr.AllLayer.right=UIMgr.chazhi;
				UIMgr.leftImg=new Image();
				UIMgr.leftImg.skin="layaNativeDir/img_iphonex.png";
				UIMgr.leftBox.width=UIMgr.leftImg.width=UIMgr.chazhi;
				UIMgr.leftImg.height=750;
				UIMgr.leftImg.top=UIMgr.leftImg.bottom=0;
				UIMgr.leftBox.addChild(UIMgr.leftImg);
				UIMgr.rightImg=new Image();
				UIMgr.rightImg.skin="layaNativeDir/img_iphonex.png";
				UIMgr.rightImg.width=UIMgr.chazhi;
				UIMgr.rightBox.height=750;
				UIMgr.rightBox.width=UIMgr.chazhi/2;
				UIMgr.rightImg.pivot(UIMgr.rightImg.width/2,Laya.stage.height/2);
				UIMgr.rightImg.scaleX=-1;
				UIMgr.rightImg.bottom=UIMgr.rightImg.top=0;
				UIMgr.rightBox.addChild(UIMgr.rightImg);
				}else{
				UIMgr.AllLayer.left=UIMgr.AllLayer.right=0;
			}
			UIMgr.AllLayer.top=UIMgr.AllLayer.bottom=0;
			UIMgr._layerNames=["layer_fight","layer_bg","layer_pop1","layer_pop2","layer_pop3","layer_pop4","layer_pop5","layer_tips","layer_icestep","layer_nonet","layer_loading"];
			UIMgr._layers=new Object();
			UIMgr.uiMap=new Object();
			UIMgr.openingUIArray=new Object();
			var __layer;
			for (var i=0;i < UIMgr._layerNames.length;i++){
				__layer=new Box();
				__layer.name=UIMgr._layerNames[i];
				__layer.mouseThrough=true;
				__layer.mouseEnabled=true;
				__layer.left=__layer.top=__layer.right=__layer.bottom=0;
				UIMgr.AllLayer.addChild(__layer);
				UIMgr._layers[UIMgr._layerNames[i]]=__layer;
				UIMgr.openingUIArray[UIMgr._layerNames[i]]=[];
			}
			Laya.stage.on("resize",null,UIMgr.onStageResize);
			UIMgr.onStageResize();
		}

		UIMgr.ddd=function(){}
		UIMgr.onStageResize=function(){
			UIMgr.scale=Math.min(Laya.stage.width / Laya.stage.designWidth,Laya.stage.height / Laya.stage.designHeight);
			for (var key in UIMgr._layers){
				if (key=="layer_fight")continue ;
				var _layer=(UIMgr._layers[key]);
				_layer.scale(UIMgr.scale,UIMgr.scale);
			}
			if(Laya.stage.width>Laya.stage.height){
				EffectUtils.CURRENTWIDTH=Laya.stage.width;
				EffectUtils.CURRENTHEIGHT=Laya.stage.height;
			}
			else{
				EffectUtils.CURRENTWIDTH=Laya.stage.height;
				EffectUtils.CURRENTHEIGHT=Laya.stage.width;
			}
		}

		UIMgr.openUIFight=function(uiname,layerName){
			(layerName===void 0)&& (layerName="layer_pop2");
			return UIMgr.openUI(uiname,layerName);
		}

		UIMgr.openUI=function(uiname,layerName,isShowLoad){
			(layerName===void 0)&& (layerName="layer_pop2");
			(isShowLoad===void 0)&& (isShowLoad=true);
			uiname=UIMgr.getUIStringName(uiname);
			if (uiname !="BjView"){
				if (!MouseManager.enabled && layerName !="layer_tips" && layerName !="layer_nonet")return "";
				MouseManager.enabled=false;
			}
			UIMgr.onStageResize();
			UIMgr.uiNum++;
			Log_Test.debug(1,"openUI "+uiname+"    uiNum:"+UIMgr.uiNum);
			var layer=UIMgr.getLayer(layerName);
			var _ui;
			var isOpen=!isShowLoad;
			if (UIMgr.isOpening(uiname,layerName)){
				_ui=UIMgr.uiMap[uiname];
				_ui.isOpen=isOpen=false;
			};
			var closeUIName=UIMgr.autoCloseUI(layerName,false);
			UIMgr._createUI(uiname,layerName,isOpen);
			return closeUIName;
		}

		UIMgr._createUI=function(uiname,layerName,isOpen){
			(isOpen===void 0)&& (isOpen=false);
			var layer=UIMgr.getLayer(layerName);
			var _ui=UIMgr.uiMap[uiname];
			var hasResToLoad=false;
			if (_ui==null||!_ui.isloaded){
				_ui=UIMgr.__cr(uiname);
				_ui.uiNum=UIMgr.uiNum;
				_ui.isCrOpen=true;
				_ui.layerName=layerName;
				_ui.layerParent=layer;
				hasResToLoad=_ui.loadRes(isOpen);
				_ui.isloaded=true;
				}else{
				for (var i=0,sz=_ui.resList.length;i < sz;i++){
					if (!Laya.loader.getRes(_ui.resList[i].url)){
						hasResToLoad=_ui.loadRes();
						break ;
					}
				}
			}
			_ui.uiNum=UIMgr.uiNum;
			_ui.layerName=layerName;
			_ui.layerParent=layer;
			layer['maxcount']=layer.numChildren;
			if (!isOpen && !UIMgr.isOpening(uiname,layerName)){
				UIMgr.openingUIArray[layerName].push(_ui);
			}
			if (!hasResToLoad){
				_ui.isOpen=isOpen;
				_ui.onOpen();
			}
		}

		UIMgr.__cr=function(uiname){
			var _ui;
			_ui=UIMgr.uiMap[uiname]=ClassUtils.getInstance("view.page."+uiname);
			_ui.name=uiname;
			return _ui;
		}

		UIMgr.onUIResLoaded=function(_ui,layerName){
			var layer=UIMgr.getLayer(layerName);
			layer.addChild(_ui);
			UIMgr.openingUIArray[layerName].push(_ui);
			_ui.onOpen();
		}

		UIMgr.getLayer=function(layerName){
			return UIMgr._layers[layerName];
		}

		UIMgr.isOpening=function(uiname,layerName){
			var arr=UIMgr.openingUIArray[layerName];
			if (arr==null)
				return false;
			for (var i=0;i < arr.length;i++){
				if (arr[i].name==uiname)
					return true;
			}
			return false;
		}

		UIMgr.autoCloseUI=function(layerName,isRealClose){
			var layer=UIMgr.getLayer(layerName);
			var maxCount=parseInt(layer['maxcount']);
			if (isNaN(maxCount)|| maxCount < 1)maxCount=1;
			if (UIMgr.openingUIArray[layerName].length >=maxCount){
				var _ui=UIMgr.openingUIArray[layerName][maxCount-1];
				var uiName=_ui.name;
				isRealClose && UIMgr.closeUI(uiName);
				return uiName;
			}
			return '';
		}

		UIMgr.closeUI=function(uiName){
			uiName=UIMgr.getUIStringName(uiName);
			var _ui=UIMgr.uiMap[uiName];
			if (_ui==null)return null;
			if (_ui.parent==null)return _ui;
			var layer=_ui.parent;
			var layerName=layer.name;
			var array=UIMgr.openingUIArray[layerName];
			var uiIndex=array.indexOf(_ui);
			if (uiIndex >-1){
				array.splice(uiIndex,1);
				_ui.onClose();
			}
			layer["maxcount"]=layer.numChildren;
			return _ui;
		}

		UIMgr.closeSound=function(){
			SoundManager.playSound(ConfigData.soundCfg[104]);
		}

		UIMgr.getUIStringName=function(uiclass){
			if (!((typeof uiclass=='string'))){
				var arr=uiclass.prototype.__className.split('.');
				return arr[arr.length-1];
				}else{
				return uiclass;
			}
		}

		UIMgr.getUI=function(uiName){
			uiName=UIMgr.getUIStringName(uiName);
			var _ui=UIMgr.uiMap[uiName];
			if (_ui==null){
				_ui=UIMgr.__cr(uiName);
				_ui.isCrOpen=false;
			}
			if (!_ui.isloaded){
				_ui.loadRes();
				_ui.isloaded=true;
			}
			return _ui;
		}

		UIMgr.getUIOnly=function(uiName){
			uiName=UIMgr.getUIStringName(uiName);
			var _ui=UIMgr.uiMap[uiName];
			if (_ui==null){
				_ui=UIMgr.__cr(uiName);
				_ui.isCrOpen=false;
			}
			return _ui;
		}

		UIMgr.closeAllByLayer=function(layerName){
			var arr=UIMgr.openingUIArray[layerName];
			if (!arr || !arr.length)return;
			for (var i=0,j=arr.length;i < j;i++){
				arr[i] && UIMgr.closeUI(arr[i].name);
			}
		}

		UIMgr.closeAll2_tips=function(){
			view.UIMgr.closeAllByLayer("layer_pop3");
			view.UIMgr.closeAllByLayer("layer_pop4");
			view.UIMgr.closeAllByLayer("layer_pop5");
			view.UIMgr.closeAllByLayer("layer_tips");
		}

		UIMgr.destroyUI=function(uiName){
			var _ui=UIMgr.closeUI(uiName);
			if (!_ui)return;
			delete UIMgr.uiMap[_ui.name];
			_ui.destroy();
			_ui=null;
		}

		UIMgr.leftImgBox=null
		UIMgr.rightImgBox=null
		UIMgr.leftImg=null
		UIMgr.rightImg=null
		UIMgr.AllLayer=null
		UIMgr.fightBox=null
		UIMgr.LAYER_FIGHT="layer_fight";
		UIMgr.LAYER_BG="layer_bg";
		UIMgr.LAYER_POP1="layer_pop1";
		UIMgr.LAYER_POP2="layer_pop2";
		UIMgr.LAYER_POP3="layer_pop3";
		UIMgr.LAYER_POP4="layer_pop4";
		UIMgr.LAYER_POP5="layer_pop5";
		UIMgr.LAYER_TIPS="layer_tips";
		UIMgr.LAYER_ICESTEP="layer_icestep";
		UIMgr.LAYER_NONET="layer_nonet";
		UIMgr.LAYER_LOADING="layer_loading";
		UIMgr._layerNames=null
		UIMgr._layers=null
		UIMgr.openingUIArray=null
		UIMgr.uiMap=null
		UIMgr.chazhi=0;
		UIMgr.leftBox=null
		UIMgr.rightBox=null
		UIMgr.scale=NaN
		UIMgr.uiNum=0;
		return UIMgr;
	})()


	/**对应段位标结构
	*...
	*@author luohuantao
	*/
	//class vo.voDuanWei
	var voDuanWei=(function(){
		function voDuanWei(){
			this.id=0;
			this.name=null;
			this.matchLevel=0;
			this.maxStar=0;
			this.getSkill=0;
			this.taskId1=null;
			this.taskId2=null;
			this.taskId3=null;
			this.starReq=0;
			this.rankLv=0;
			this.rewardId=null;
			this.rewardNum=null;
		}

		__class(voDuanWei,'vo.voDuanWei');
		return voDuanWei;
	})()


	/**
	*...
	*@author luohuantao
	*/
	//class vo.voDuanWeiTaskCfg
	var voDuanWeiTaskCfg=(function(){
		function voDuanWeiTaskCfg(){
			this.id=0;
			this.title=null;
			this.msg=null;
			this.model=0;
			this.type=0;
			this.minCount=0;
			this.maxCount=0;
			this.accumulate=0;
			this.getStar=0;
			this.wmsg=null;
		}

		__class(voDuanWeiTaskCfg,'vo.voDuanWeiTaskCfg');
		return voDuanWeiTaskCfg;
	})()


	/**
	*物品表枚举
	*@author luohuantao
	*/
	//class vo.voItemData
	var voItemData=(function(){
		function voItemData(){
			this.defId=0;
			this.name=null;
			this.type=0;
			this.goodatType=0;
			this.sex=0;
			this.quailty=0;
			this.communalId=null;
			this.deadline=0;
			this.propertyId=null;
			this.propertyValue=null;
			this.souceID=0;
			this.desc=null;
			this.goodatMsg=null;
			this.goodatDesc=null;
			this.originalId=0;
			this.convertRatio=NaN;
		}

		__class(voItemData,'vo.voItemData');
		return voItemData;
	})()


	/**
	*商城表数据结构，数据对应 商城表.xls
	*@author xiaosong
	*@date 2017-03-02
	*/
	//class vo.voShopData
	var voShopData=(function(){
		function voShopData(){
			this.defId=0;
			this.type=0;
			this.buyType=0;
			this.currencyId=null;
			this.currencyNum=null;
			this.sellNum=0;
			this.origin=null;
			this.buyLimit=0;
			this.isNew=0;
			this.order=0;
		}

		__class(voShopData,'vo.voShopData');
		return voShopData;
	})()


	/**
	*对应技能 excel 字段
	*@author luohuantao
	*/
	//class vo.voSkillCfgData
	var voSkillCfgData=(function(){
		function voSkillCfgData(){
			this.id=0;
			this.name=null;
			this.describe=null;
			this.cselfTrigger=null;
			this.cendselfTrigger=null;
			this.ackBeat=0;
			this.btnIcon=null;
			this.preparation=0;
			this.duration=0;
			this.cd=0;
			this.isTwo=false;
			this.canXuliTime=NaN;
		}

		__class(voSkillCfgData,'vo.voSkillCfgData');
		return voSkillCfgData;
	})()


	/**
	*...
	*@author luohuantao
	*/
	//class vo.voTeamNameData
	var voTeamNameData=(function(){
		function voTeamNameData(){
			this.id=-1;
			this.name="";
			this.icon="";
			this.color="";
		}

		__class(voTeamNameData,'vo.voTeamNameData');
		return voTeamNameData;
	})()


	/**
	*...
	*@author Chen Gong
	*/
	//class BehitListItem
	var BehitListItem=(function(){
		function BehitListItem(){
			this.uidBeHit=0;
			this.beHitScore=0;
			this.beHitBloodVal=0;
			this.angle=NaN;
			this.isCrit=NaN;
			this.clear();
		}

		__class(BehitListItem,'BehitListItem');
		var __proto=BehitListItem.prototype;
		__proto.clear=function(){
			this.uidBeHit=0;
			this.beHitScore=0;
			this.beHitBloodVal=0;
			this.angle=0;
			this.isCrit=0;
			return this.constructor.name;
		}

		BehitListItem.initDataPool=function(){
			for (var ti=0;ti < BehitListItem._maxNum;ti++){
				BehitListItem._dataPool[ti]=new BehitListItem();
			}
		}

		BehitListItem.getData=function(){
			return BehitListItem._dataPool.length>0? BehitListItem._dataPool.pop():new BehitListItem();
		}

		BehitListItem.release=function(_data){
			if (!_data)return;
			if (BehitListItem._dataPool.indexOf(_data)!=-1)return;
			_data.clear();
			BehitListItem._dataPool.push(_data);
		}

		BehitListItem._maxNum=1024 *5;
		BehitListItem._dataPool=[];
		return BehitListItem;
	})()


	/**
	*...
	*@author
	*/
	//class configData.prestigeLevelConfig
	var prestigeLevelConfig=(function(){
		function prestigeLevelConfig(){
			this.lv=NaN;
			this.exp=NaN;
			this.getAp=NaN;
			this.maxAp=NaN;
			this.lvRange=NaN;
		}

		__class(prestigeLevelConfig,'configData.prestigeLevelConfig');
		return prestigeLevelConfig;
	})()


	/**
	*...
	*@author dkt
	*/
	//class DataPool
	var DataPool=(function(){
		function DataPool(){}
		__class(DataPool,'DataPool');
		DataPool.getPoolBySign=function(sign){
			return DataPool._poolDic[sign] || (DataPool._poolDic[sign]=[]);
		}

		DataPool.getItemByClass=function(cls){
			var sign=cls.__className;
			var pool=DataPool.getPoolBySign(sign);
			var rst=pool.length ? pool.pop():new cls();
			rst["__InPool"]=false;
			return rst;
		}

		DataPool.recover=function(item){
			if (!item)return;
			var sign=item.__className;
			if (sign=="Object")return;
			var pool=DataPool.getPoolBySign(sign);
			if (item["__InPool"])return;
			item["__InPool"]=true;
			item["clear"] && item.clear();
			pool.push(item);
		}

		DataPool._poolDic={};
		DataPool.InPoolSign="__InPool";
		return DataPool;
	})()


	/**
	*属性点相关
	*@author ...
	*/
	//class DBStructure.AttributePoint
	var AttributePoint=(function(){
		function AttributePoint(){
			this.remainResetCount=NaN;
			this.maxPoint=NaN;
			this.remainPoint=NaN;
			this.usingPoint=null;
			this.clear();
		}

		__class(AttributePoint,'DBStructure.AttributePoint');
		var __proto=AttributePoint.prototype;
		__proto.clear=function(){
			this.remainResetCount=0;
			this.maxPoint=0;
			this.remainPoint=0;
			this.usingPoint={};
			return this.constructor.name;
		}

		AttributePoint.initUsingPoint=function(_data){
			_data.usingPoint={};
			for (var i=0;i < enumAttributePoint.attributePointList.length;i++){
				_data.usingPoint[enumAttributePoint.attributePointList[i]]=0;
			}
		}

		return AttributePoint;
	})()


	/**
	*...
	*@author Chen Gong
	*/
	//class DBStructure.Fjson
	var Fjson=(function(){
		function Fjson(){
			this.itemTimeline=null;
			this.itemExpireTime=null;
			this.activeItems=null;
			this.generalData=null;
			this.prevHistory=null;
			this.achieveMents=null;
			this.activeSkill=null;
			this.titleOnshow=NaN;
			this.requests=null;
			this.activeActivities=null;
			this.mainRequests=null;
			this.savedDate=null;
			this.playCount=null;
			this.enterCount=null;
			this.boxDatas=null;
			this.seasonAward=null;
			this.signData=null;
			this.surveyData=null;
			this.shareAward=null;
			this.weekRequests=null;
			this.boost=null;
			this.shareTimes=NaN;
			this.saveToDesktopTimes=NaN;
			this.likeData=null;
			this.attributePoint=null;
			this.lunpan=null;
			this.achieveData=null;
			this.playerUIData=null;
			this.needSynMaidian=false;
			this.heroProficiency=null;
			this.summonerWallUsers=null;
			this.wallInviteInfo=null;
			this.snowHouseIncident=null;
			this.snowBuilding=null;
			this.whoFixesMyBuildings=null;
			this.loginTimeInfo=null;
			this.newbieSignInfo=null;
			this.jackpotData=null;
			this.weekLimits=null;
			this.newInviteInfo=null;
			this.summonerTowerAward=null;
			this.rechargedata=null;
			this.libaoData=null;
			this.streakData=null;
		}

		__class(Fjson,'DBStructure.Fjson');
		return Fjson;
	})()


	/**
	*...
	*@author Chen Gong
	*/
	//class DBStructure.GeneralDBData
	var GeneralDBData=(function(){
		function GeneralDBData(){
			this.mvpTimes_free=NaN;
			this.mvpTimes_team=NaN;
			this.legend_free=NaN;
			this.legend_team=NaN;
			this.slayinking_free=NaN;
			this.slayinking_team=NaN;
			this.terminateking_free=NaN;
			this.terminateking_team=NaN;
			this.ksking_free=NaN;
			this.ksking_team=NaN;
			this.penta_free=NaN;
			this.penta_team=NaN;
			this.dominate_free=NaN;
			this.dominate_team=NaN;
			this.unstop_free=NaN;
			this.unstop_team=NaN;
			this.playTimes=NaN;
			this.hasStarCount=NaN;
			this.allKills=NaN;
			this.maxKill=0;
			this.maxKillStreak=0;
			this.maxScore=NaN;
			this.averageScore=NaN;
			this.maxScore=0;
			this.maxKill=0;
			this.allKills=0;
			this.playTimes=0;
			this.hasStarCount=0;
			this.mvpTimes_free=0;
			this.mvpTimes_team=0;
			this.legend_free=0;
			this.legend_team=0;
			this.slayinking_free=0;
			this.slayinking_team=0;
			this.terminateking_free=0;
			this.terminateking_team=0;
			this.ksking_free=0;
			this.ksking_team=0;
			this.unstop_free=0;
			this.unstop_team=0;
			this.dominate_free=0;
			this.dominate_team=0;
			this.penta_free=0;
			this.penta_team=0;
			this.averageScore=0;
			this.maxKillStreak=0;
		}

		__class(GeneralDBData,'DBStructure.GeneralDBData');
		return GeneralDBData;
	})()


	/**
	*...
	*@author Chen Gong
	*/
	//class DBStructure.LoginTimeInfo
	var LoginTimeInfo=(function(){
		function LoginTimeInfo(){
			this.lastLoginTime=0;
			this.totalLoginTimes=0;
			this.lastLoginDate=null;
			this.clear();
		}

		__class(LoginTimeInfo,'DBStructure.LoginTimeInfo');
		var __proto=LoginTimeInfo.prototype;
		__proto.clear=function(){
			this.lastLoginTime=0;
			this.totalLoginTimes=0;
			this.lastLoginDate="";
			return this.constructor.name;
		}

		return LoginTimeInfo;
	})()


	/**
	*...
	*@author Chen Gong
	*/
	//class DBStructure.MatchHistory
	var MatchHistory=(function(){
		function MatchHistory(_roomType,_time,_rank,_maxScore,_kills,_finalScore,_isMVP,_deaths,_normalHitTimes,_normalFireTimes,_totalDamge,_totalDamgeXuli,_skillOwnedWithLevel,_heroId){
			this.roomType=NaN;
			this.time=NaN;
			this.rank=NaN;
			this.maxScore=NaN;
			this.kills=NaN;
			this.deaths=NaN;
			this.finalScore=NaN;
			this.isMVP=NaN;
			this.normalHitTimes=0;
			this.normalFireTimes=0;
			this.totalDamge=0;
			this.totalDamgeXuli=0;
			this.skillOwnedWithLevel=null;
			this.heroId=0;
			this.inGameMedals=[];
			this.roomType=_roomType;
			this.time=_time;
			this.rank=_rank;
			this.maxScore=_maxScore;
			this.kills=_kills;
			this.finalScore=_finalScore;
			this.isMVP=_isMVP;
			this.deaths=_deaths;
			this.normalFireTimes=_normalFireTimes;
			this.normalHitTimes=_normalHitTimes;
			this.totalDamge=_totalDamge;
			this.totalDamgeXuli=_totalDamgeXuli;
			this.skillOwnedWithLevel=_skillOwnedWithLevel;
			this.heroId=_heroId;
		}

		__class(MatchHistory,'DBStructure.MatchHistory');
		return MatchHistory;
	})()


	/**
	*...
	*@author Chen Gong
	*/
	//class DBStructure.NewbieSignData
	var NewbieSignData=(function(){
		function NewbieSignData(){
			this.day=1;
			this.lastLockTime=0;
			this.awardAvailableId=[];
			this.awardAvailableNum=[];
			this.lastAwardedTime=0;
			this.setIndex=1;
			this.lastRefreshTime=0;
			this.clear();
		}

		__class(NewbieSignData,'DBStructure.NewbieSignData');
		var __proto=NewbieSignData.prototype;
		__proto.clear=function(){
			this.day=1;
			this.lastLockTime=0;
			this.awardAvailableId=[];
			this.awardAvailableNum=[];
			this.lastAwardedTime=0;
			this.setIndex=1;
			this.lastRefreshTime=0;
			return this.constructor.name;
		}

		return NewbieSignData;
	})()


	/**
	*
	*...
	*@author ...
	*/
	//class DBStructure.RechargeData
	var RechargeData=(function(){
		function RechargeData(){
			this.cValue=NaN;
			this.clear();
		}

		__class(RechargeData,'DBStructure.RechargeData');
		var __proto=RechargeData.prototype;
		__proto.clear=function(){
			this.cValue=0;
			return this.constructor.name;
		}

		return RechargeData;
	})()


	/**
	*某个签到id的数据
	*...
	*@author ...
	*/
	//class DBStructure.ShareAward
	var ShareAward=(function(){
		function ShareAward(){
			this.todayGet=0;
			this.everGet=NaN;
			this.shareDatas=null;
			this.lastShareTime=null;
			this.nowCanGet=NaN;
			this.whoClickedMyLink=null;
			this.awardGotCount=0;
			this.clear();
		}

		__class(ShareAward,'DBStructure.ShareAward');
		var __proto=ShareAward.prototype;
		__proto.clear=function(){
			this.todayGet=0;
			this.everGet=0;
			this.shareDatas=null;
			this.lastShareTime="";
			this.nowCanGet=0;
			this.whoClickedMyLink=[];
			this.awardGotCount=0;
			return this.constructor.name;
		}

		return ShareAward;
	})()


	/**
	*
	*...
	*@author ...
	*/
	//class DBStructure.SurveyDBData
	var SurveyDBData=(function(){
		function SurveyDBData(){
			this.hasLoginCount=NaN;
			this.lastLoginDate=NaN;
			this.loginPopupsCount=NaN;
			this.redDotCount=NaN;
			this.hasGetAwardCount=NaN;
			this.clear();
		}

		__class(SurveyDBData,'DBStructure.SurveyDBData');
		var __proto=SurveyDBData.prototype;
		__proto.clear=function(){
			this.hasLoginCount=0;
			this.lastLoginDate=0;
			this.loginPopupsCount=0;
			this.redDotCount=0;
			this.hasGetAwardCount=0;
			return this.constructor.name;
		}

		return SurveyDBData;
	})()


	/**
	*数据库存储的宝箱所有数据
	*@author dongketao
	*/
	//class DBStructure.TreasureChestData
	var TreasureChestData=(function(){
		function TreasureChestData(){
			this.boxExp=0;
			this.boxLevel=0;
			this.hasGetCount=0;
			this.savedDate=null;
			this.curGetScore=0;
			this.allBoxDatas=[];
			this.clear();
		}

		__class(TreasureChestData,'DBStructure.TreasureChestData');
		var __proto=TreasureChestData.prototype;
		__proto.clear=function(){
			this.boxExp=0;
			this.boxLevel=1;
			this.hasGetCount=0;
			this.savedDate="";
			this.curGetScore=0;
			for (var i=0;i < this.allBoxDatas.length;i++){
				(((this.allBoxDatas[i])instanceof DBStructure.TreasureChestModel ))&& TreasureChestModel.release(this.allBoxDatas[i]);
			}
			this.allBoxDatas.length=0;
			return this.constructor.name;
		}

		TreasureChestData.initDataPool=function(){
			for (var ti=0;ti < TreasureChestData._maxNum;ti++){
				TreasureChestData._dataPool[ti]=new TreasureChestData();
			}
		}

		TreasureChestData.getData=function(){
			return TreasureChestData._dataPool.length>0? TreasureChestData._dataPool.pop():new TreasureChestData();
		}

		TreasureChestData.release=function(_data){
			if (!_data)return;
			if (TreasureChestData._dataPool.indexOf(_data)!=-1)return;
			_data.clear();
			TreasureChestData._dataPool.push(_data);
		}

		TreasureChestData._maxNum=1024 *5;
		TreasureChestData._dataPool=[];
		return TreasureChestData;
	})()


	/**
	*数据库存储的单个宝箱数据
	*@author ...
	*/
	//class DBStructure.TreasureChestModel
	var TreasureChestModel=(function(){
		function TreasureChestModel(){
			this.id=0;
			this.index=0;
			this.startTime=0;
			this.status=0;
			this.clear();
		}

		__class(TreasureChestModel,'DBStructure.TreasureChestModel');
		var __proto=TreasureChestModel.prototype;
		__proto.clear=function(){
			this.id=0;
			this.index=0;
			this.startTime=0;
			this.status=0;
			return this.constructor.name;
		}

		TreasureChestModel.initDataPool=function(){
			for (var ti=0;ti < TreasureChestModel._maxNum;ti++){
				TreasureChestModel._dataPool[ti]=new TreasureChestModel();
			}
		}

		TreasureChestModel.getData=function(){
			return TreasureChestModel._dataPool.length>0? TreasureChestModel._dataPool.pop():new TreasureChestModel();
		}

		TreasureChestModel.release=function(_data){
			if (!_data)return;
			if (TreasureChestModel._dataPool.indexOf(_data)!=-1)return;
			_data.clear();
			TreasureChestModel._dataPool.push(_data);
		}

		TreasureChestModel._maxNum=1024 *5;
		TreasureChestModel._dataPool=[];
		return TreasureChestModel;
	})()


	/**
	*...
	*@author ...
	*/
	//class DBStructure.UserData
	var UserData$1=(function(){
		function UserData(){
			this.f1=NaN;
			this.f2=NaN;
			this.f3=NaN;
			this.f4=NaN;
			this.f5=NaN;
			this.f6=NaN;
			this.f7=NaN;
			this.fjson=null;
			this.s1=NaN;
		}

		__class(UserData,'DBStructure.UserData',null,'UserData$1');
		return UserData;
	})()


	/**
	*
	*...
	*@author ...
	*/
	//class DBStructure.WeekLimitDBData
	var WeekLimitDBData=(function(){
		function WeekLimitDBData(){
			this.hasGetItem={};
			this.lastGetItemTime={};
			this.clear();
		}

		__class(WeekLimitDBData,'DBStructure.WeekLimitDBData');
		var __proto=WeekLimitDBData.prototype;
		__proto.clear=function(){
			this.hasGetItem={};
			this.lastGetItemTime={};
			return this.constructor.name;
		}

		return WeekLimitDBData;
	})()


	/**
	*...
	*@author ...
	*/
	//class DelFoodData
	var DelFoodData=(function(){
		function DelFoodData(){
			this.uidHit=0;
			this.uidBeHit=0;
			this.bloodVal=0;
			this.x=NaN;
			this.y=NaN;
		}

		__class(DelFoodData,'DelFoodData');
		var __proto=DelFoodData.prototype;
		/**
		*把数据考到当前的数据结构内.
		*@param sd
		*/
		__proto.copyData=function(sd){
			this.uidHit=sd.uidHit;
			this.uidBeHit=sd.uidBeHit;
			this.bloodVal=sd.bloodVal;
			this.x=sd.x;
			this.y=sd.y;
		}

		__proto.clientReadBody=function(msg,msgLen){
			this.uidHit=msg.getUint16();
			this.uidBeHit=msg.getUint16();
			this.bloodVal=msg.getInt16();
			return true;
		}

		__proto.serverWriteBody=function(msg){
			msg.writeUint16(this.uidHit);
			msg.writeUint16(this.uidBeHit);
			msg.writeInt16(this.bloodVal);
			return true;
		}

		__proto.clear=function(){
			this.uidHit=0;
			this.uidBeHit=0;
			this.bloodVal=0;
			return this.constructor.name;
		}

		DelFoodData.initDataPool=function(){
			for (var ti=0;ti < DelFoodData._maxNum;ti++){
				DelFoodData._dataPool[ti]=new DelFoodData();
			}
		}

		DelFoodData.getData=function(){
			return DelFoodData._dataPool.length>0? DelFoodData._dataPool.pop():new DelFoodData();
		}

		DelFoodData.release=function(_data){
			if (!_data)return;
			if (DelFoodData._dataPool.indexOf(_data)!=-1)return;
			_data.clear();
			DelFoodData._dataPool.push(_data);
		}

		DelFoodData._maxNum=1024;
		DelFoodData._dataPool=[];
		return DelFoodData;
	})()


	/**
	*...
	*@author Chen Gong
	*/
	//class DynamicItemData
	var DynamicItemData=(function(){
		function DynamicItemData(){
			this.itemID=0;
			this.gid=0;
			this.uid=0;
			this.x=NaN;
			this.y=NaN;
			this.scale=NaN;
			this.bloodVal=NaN;
		}

		__class(DynamicItemData,'DynamicItemData');
		var __proto=DynamicItemData.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			this.itemID=msg.getUint16();
			this.gid=msg.getUint16();
			this.uid=msg.getUint16();
			this.x=msg.getInt16();
			this.y=msg.getInt16();
			this.scale=msg.getUint16()/100;
			this.bloodVal=msg.getUint16();
			return true;
		}

		__proto.serverWriteBody=function(msg){
			try{
				msg.writeUint16(this.itemID);
				msg.writeUint16(this.gid);
				msg.writeUint16(this.uid);
				msg.writeInt16(this.x);
				msg.writeInt16(this.y);
				msg.writeUint16(this.scale*100);
				msg.writeUint16(this.bloodVal);
				}catch(err){
				console.log(err);
				console.log("itemID "+this.itemID);
				console.log("uid "+this.uid);
			}
			return true;
		}

		__proto.clear=function(){
			this.itemID=0;
			this.gid=0;
			this.uid=0;
			this.x=0;
			this.y=0;
			this.bloodVal=0;
			return this.constructor.name;
		}

		DynamicItemData.initDataPool=function(){
			for (var ti=0;ti < DynamicItemData._maxNum;ti++){
				DynamicItemData._dataPool[ti]=new DynamicItemData();
			}
		}

		DynamicItemData.getData=function(){
			return DynamicItemData._dataPool.length>0 ? DynamicItemData._dataPool.pop():new DynamicItemData();
		}

		DynamicItemData.release=function(_data){
			if (!_data)return;
			if (DynamicItemData._dataPool.indexOf(_data)!=-1)return;
			_data.clear();
			DynamicItemData._dataPool.push(_data);
		}

		DynamicItemData._maxNum=1024 *5;
		DynamicItemData._dataPool=[];
		return DynamicItemData;
	})()


	/**
	*...
	*@author rivetr
	*/
	//class EnterRoomData
	var EnterRoomData=(function(){
		function EnterRoomData(){
			this.selfID=0;
			this.sourceID=0;
			this.maxLifeTime=0;
			this.teamName=0;
			this.teamId=0;
			this.roomType=0;
			this.useBlood=0;
			this.firstTime=false;
			this.clear();
		}

		__class(EnterRoomData,'EnterRoomData');
		var __proto=EnterRoomData.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			this.selfID=msg.getInt32();
			this.sourceID=msg.getUint8();
			this.maxLifeTime=msg.getUint32();
			this.teamName=msg.getUint8();
			this.teamId=msg.getUint16();
			this.roomType=msg.getUint8();
			this.useBlood=msg.getUint8();
			this.firstTime=msg.getUint8()==1 ? true :false;
			return true;
		}

		__proto.serverWriteBody=function(msg){
			msg.writeInt32(this.selfID);
			msg.writeUint8(this.sourceID);
			msg.writeUint32(this.maxLifeTime);
			msg.writeUint8(this.teamName);
			msg.writeUint16(this.teamId);
			msg.writeUint8(this.roomType);
			msg.writeUint8(this.useBlood);
			msg.writeUint8(this.firstTime ? 1 :0);
			return true;
		}

		__proto.clear=function(){
			this.selfID=0;
			this.sourceID=0;
			this.maxLifeTime=0;
			this.teamName=0;
			this.teamId=0;
			this.roomType=0;
			this.useBlood=0;
			this.firstTime=false;
			return this.constructor.name;
		}

		return EnterRoomData;
	})()


	/**
	*...
	*@author Chen Gong
	*/
	//class enumex.BehitEffect
	var BehitEffect=(function(){
		function BehitEffect(){}
		__class(BehitEffect,'enumex.BehitEffect');
		BehitEffect.CRIT=1;
		BehitEffect.POISONING=16;
		BehitEffect.Burning=17;
		BehitEffect.FROZEN=18;
		BehitEffect.STUN=19;
		BehitEffect.SLEEP=20;
		BehitEffect.TRAPPED=21;
		BehitEffect.KNOCKDOWN=22;
		BehitEffect.ANGER=23;
		BehitEffect.FURY=24;
		BehitEffect.INVINCIBLE=25;
		BehitEffect.SHIELDS=26;
		return BehitEffect;
	})()


	/**
	*...
	*@author ...
	*/
	//class enumex.enumAttributePoint
	var enumAttributePoint=(function(){
		function enumAttributePoint(){}
		__class(enumAttributePoint,'enumex.enumAttributePoint');
		enumAttributePoint.survival="survival";
		enumAttributePoint.attack="attack";
		enumAttributePoint.precise="precise";
		enumAttributePoint.flexible="flexible";
		enumAttributePoint.vspeed="vspeed";
		enumAttributePoint.erupt="erupt";
		enumAttributePoint.RESULT_USESUCCESS=1;
		enumAttributePoint.RESULT_RESETSUCCESS=2;
		enumAttributePoint.RESULT_USEFAILED=3;
		enumAttributePoint.RESULT_RESETFAILED=4;
		__static(enumAttributePoint,
		['attributePointList',function(){return this.attributePointList=["survival","attack","precise","flexible","vspeed","erupt"];}
		]);
		return enumAttributePoint;
	})()


	/**
	*...
	*@author Chen Gong
	*/
	//class enumex.enumBattleBoxItemType
	var enumBattleBoxItemType=(function(){
		function enumBattleBoxItemType(){}
		__class(enumBattleBoxItemType,'enumex.enumBattleBoxItemType');
		enumBattleBoxItemType.SKILL_SNOW=250001;
		enumBattleBoxItemType.SKILL_CHGSCORE=260001;
		enumBattleBoxItemType.SKILL_SHANXIAN=210001;
		enumBattleBoxItemType.SKILL_METEOR=280001;
		enumBattleBoxItemType.SKILL_GHOST=1;
		enumBattleBoxItemType.RABIT=2;
		enumBattleBoxItemType.SHIELD=3;
		enumBattleBoxItemType.SNOWMAN=4;
		enumBattleBoxItemType.SNOWGROUP=5;
		enumBattleBoxItemType.ADDATT=6;
		enumBattleBoxItemType.PET=7;
		return enumBattleBoxItemType;
	})()


	/**
	*...
	*@author Chen Gong
	*/
	//class enumex.enumBattleInfoType
	var enumBattleInfoType=(function(){
		function enumBattleInfoType(){}
		__class(enumBattleInfoType,'enumex.enumBattleInfoType');
		enumBattleInfoType.TERMINATE=1;
		enumBattleInfoType.FIRST=2;
		enumBattleInfoType.NORMAL_KILL=3;
		enumBattleInfoType.MULTIKILL=4;
		enumBattleInfoType.KILLSTREAK=5;
		enumBattleInfoType.HIT_X_SCORE=6;
		enumBattleInfoType.WINNING=7;
		enumBattleInfoType.READY_TO_WIN=8;
		enumBattleInfoType.UNLIMITED_KILLSTREAK=13;
		enumBattleInfoType.UNLIMITED_ENDSB=14;
		return enumBattleInfoType;
	})()


	/**
	*...
	*@author ...
	*/
	//class enumex.enumBloodValType
	var enumBloodValType=(function(){
		function enumBloodValType(){}
		__class(enumBloodValType,'enumex.enumBloodValType');
		enumBloodValType.DYINGSTATE=-1;
		enumBloodValType.DEADSTATE=0;
		return enumBloodValType;
	})()


	/**
	*buff类型
	*@author luohuantao
	*/
	//class enumex.enumBuffType
	var enumBuffType=(function(){
		function enumBuffType(){}
		__class(enumBuffType,'enumex.enumBuffType');
		enumBuffType.XY=0x1;
		enumBuffType.CM=0x2;
		enumBuffType.Invincible=0x4;
		enumBuffType.JS=0x8;
		enumBuffType.JIASI=0x10;
		enumBuffType.BX=0x20;
		enumBuffType.BD=0x40;
		enumBuffType.FY=0x80;
		enumBuffType.QY=0x100;
		enumBuffType.WZ=0x200;
		enumBuffType.HBD=0x400;
		enumBuffType.WZ_YLX=0x800;
		return enumBuffType;
	})()


	/**
	*...
	*@author Chen Gong
	*/
	//class enumex.enumBuyType
	var enumBuyType=(function(){
		function enumBuyType(){}
		__class(enumBuyType,'enumex.enumBuyType');
		enumBuyType.DIAMOND=1;
		enumBuyType.GOLD_FRAG=2;
		enumBuyType.GOLD=3;
		enumBuyType.DIMOND_FRAG=4;
		enumBuyType.CURRENCYORFRAG=5;
		return enumBuyType;
	})()


	/**
	*...
	*@author luohuantao
	*/
	//class enumex.enumClassIDType
	var enumClassIDType=(function(){
		function enumClassIDType(){}
		__class(enumClassIDType,'enumex.enumClassIDType');
		enumClassIDType.Net=0;
		enumClassIDType.Actor=1;
		enumClassIDType.Bullet=2;
		enumClassIDType.effect=3;
		enumClassIDType.Snow=4;
		enumClassIDType.Strawberry=5;
		enumClassIDType.SnowGroup=6;
		enumClassIDType.tree=7;
		enumClassIDType.thorn=8;
		enumClassIDType.SnowMan=9;
		enumClassIDType.SnowBall=10;
		enumClassIDType.SBBulletObject=11;
		enumClassIDType.RORIPOP=12;
		enumClassIDType.Home=13;
		enumClassIDType.FLAG=14;
		enumClassIDType.FLAGBASE=15;
		enumClassIDType.BLOCK=16;
		enumClassIDType.Hare=17;
		enumClassIDType.bearDie=18;
		enumClassIDType.bigBall=19;
		enumClassIDType.snowGround=20;
		enumClassIDType.cloud=21;
		enumClassIDType.grass=22;
		enumClassIDType.BOX=23;
		enumClassIDType.missile=24;
		enumClassIDType.propbox=25;
		enumClassIDType.bear=26;
		enumClassIDType.gem=27;
		enumClassIDType.nvshen=28;
		enumClassIDType.building=29;
		return enumClassIDType;
	})()


	/**
	*...
	*@author Chen Gong
	*/
	//class enumex.enumCurrencyType
	var enumCurrencyType=(function(){
		function enumCurrencyType(){}
		__class(enumCurrencyType,'enumex.enumCurrencyType');
		enumCurrencyType.DIAMOND=10;
		enumCurrencyType.EXP=11;
		enumCurrencyType.GOLD=12;
		enumCurrencyType.TRESSURE_EXP=13;
		enumCurrencyType.TRESSURE=5;
		return enumCurrencyType;
	})()


	/**
	*...
	*@author Chen Gong
	*/
	//class enumex.enumIngameMedalType
	var enumIngameMedalType=(function(){
		function enumIngameMedalType(){}
		__class(enumIngameMedalType,'enumex.enumIngameMedalType');
		enumIngameMedalType.NUM=8;
		enumIngameMedalType.LEGENDARY=21;
		enumIngameMedalType.DOMINATING=22;
		enumIngameMedalType.UNSTOPPABLE=23;
		enumIngameMedalType.PENTAKILL=24;
		enumIngameMedalType.MVP=25;
		enumIngameMedalType.SLAYINKING=27;
		enumIngameMedalType.MULTIKING=26;
		enumIngameMedalType.TERMINATEKING=28;
		__static(enumIngameMedalType,
		['medalsIDs',function(){return this.medalsIDs=[21,22,23,24,25,27,26,28];}
		]);
		return enumIngameMedalType;
	})()


	/**
	*...
	*@author Chen Gong
	*/
	//class enumex.enumItemBonusProperty
	var enumItemBonusProperty=(function(){
		function enumItemBonusProperty(){}
		__class(enumItemBonusProperty,'enumex.enumItemBonusProperty');
		enumItemBonusProperty.MOVE_SPEED=1;
		enumItemBonusProperty.ACTTACK_SPEED=2;
		enumItemBonusProperty.INTEGRAL_SPEED=3;
		enumItemBonusProperty.INTEGRAL_INIT=4;
		enumItemBonusProperty.BALL_SPEED=5;
		enumItemBonusProperty.BALL_TIME=6;
		enumItemBonusProperty.BALL_ADD=6;
		enumItemBonusProperty.STUN_DURATION=7;
		enumItemBonusProperty.POWER_BALL_SPEED=8;
		enumItemBonusProperty.POWER_BALL_RATIO=9;
		return enumItemBonusProperty;
	})()


	/**
	*道具擅长类型 对应 物品表 goodatType 字段的枚举
	*@author luohuantao
	*/
	//class enumex.enumItemGoodatType
	var enumItemGoodatType=(function(){
		function enumItemGoodatType(){}
		__class(enumItemGoodatType,'enumex.enumItemGoodatType');
		enumItemGoodatType.def=0;
		enumItemGoodatType.type_1=1;
		enumItemGoodatType.type_2=2;
		enumItemGoodatType.type_3=3;
		enumItemGoodatType.type_4=4;
		enumItemGoodatType.type_5=5;
		enumItemGoodatType.type_6=6;
		enumItemGoodatType.type_7=7;
		enumItemGoodatType.type_8=8;
		return enumItemGoodatType;
	})()


	/**
	*对应道具表中物品类型的枚举
	*@author Chen Gong
	*/
	//class enumex.enumItemType
	var enumItemType=(function(){
		function enumItemType(){}
		__class(enumItemType,'enumex.enumItemType');
		enumItemType.DEFAULT=0;
		enumItemType.OUTFIT=1;
		enumItemType.OUTFITSKIN=100;
		enumItemType.RING=2;
		enumItemType.BULLET=3;
		enumItemType.GUN=4;
		enumItemType.TRESUREBOX=5;
		enumItemType.WING=6;
		enumItemType.OUTFIT_EXPERIENCE=7;
		enumItemType.OUTFIT_EXPERIENCESKIN=700;
		enumItemType.FRAGMENT=9;
		enumItemType.DIAMOND=10;
		enumItemType.EXP=11;
		enumItemType.GOLD=12;
		enumItemType.TRESUREBOX_EXP=13;
		enumItemType.ICRYSTAL=94001;
		enumItemType.SNOW_HOUSE_ACTION=16;
		enumItemType.DICE=17;
		enumItemType.ACTIVITY_ITEM=18;
		enumItemType.SNOW_HOUSE=14;
		enumItemType.QDHDHD=99999998;
		enumItemType.DBHDHD=99999999;
		return enumItemType;
	})()


	/**
	*...
	*@author ...
	*/
	//class enumex.enumLoginStatus
	var enumLoginStatus=(function(){
		function enumLoginStatus(){}
		__class(enumLoginStatus,'enumex.enumLoginStatus');
		enumLoginStatus.LOGIN_FAILD=0;
		enumLoginStatus.LOGIN_SUCCESS=1;
		enumLoginStatus.LOGIN_SUCCESSEND=2;
		enumLoginStatus.LOGIN_FAILDUSERDATA=3;
		enumLoginStatus.LOGIN_FAILDWRONGKEY=4;
		enumLoginStatus.LOGIN_FAILDOVERKEY=5;
		return enumLoginStatus;
	})()


	/**
	*地图场景元素类型
	*...
	*@author ...
	*/
	//class enumex.enumMapElement
	var enumMapElement=(function(){
		function enumMapElement(){}
		__class(enumMapElement,'enumex.enumMapElement');
		enumMapElement.ELE_CANTHROUGH=1;
		enumMapElement.ELE_NOTTHROUGH=2;
		enumMapElement.ELE_GRASS=3;
		enumMapElement.ELE_SNOW=4;
		enumMapElement.ELE_ICE=5;
		enumMapElement.ELE_RIVER=6;
		enumMapElement.ELE_ALPHAHALF=7;
		enumMapElement.ELE_CLOUD=8;
		return enumMapElement;
	})()


	/**
	*...
	*@author ...
	*/
	//class enumex.enumMapLayer
	var enumMapLayer=(function(){
		function enumMapLayer(){}
		__class(enumMapLayer,'enumex.enumMapLayer');
		enumMapLayer.TYPE_BASELAYER="baseLayer";
		enumMapLayer.TYPE_DYNAMICOBJLAYER="dynamicObjLayer";
		enumMapLayer.TYPE_DYNAMICOBJLAYER0="dynamicObjLayer0";
		enumMapLayer.TYPE_BORNLAYER="bornLayer";
		enumMapLayer.TYPE_RANDOMITEMSLAYER="randomItemsLayer";
		enumMapLayer.TYPE_AIBORNLAYER="aibornLayer";
		return enumMapLayer;
	})()


	/**
	*...
	*@author dongketao
	*/
	//class enumex.enumPickUpResult
	var enumPickUpResult=(function(){
		function enumPickUpResult(){}
		__class(enumPickUpResult,'enumex.enumPickUpResult');
		enumPickUpResult.CANPICKUP=0;
		enumPickUpResult.STARTPICKUPSUCCESS=1;
		enumPickUpResult.STARTPICKUPFAILED=2;
		enumPickUpResult.ENDPICKUPSUCCESS=3;
		enumPickUpResult.ENDPICKUPFAILEDMOVE=4;
		enumPickUpResult.ENDPICKUPFAILEDBEATT=5;
		enumPickUpResult.ENDPICKUPFAILEDATT=6;
		return enumPickUpResult;
	})()


	/**
	*...
	*@author ...
	*/
	//class enumex.enumProperty
	var enumProperty=(function(){
		function enumProperty(){}
		__class(enumProperty,'enumex.enumProperty');
		enumProperty.PROPERTY_CURBLOOD=1;
		enumProperty.PROPERTY_MAXBLOOD=2;
		enumProperty.PROPERTY_MAXBULLET=3;
		enumProperty.PROPERTY_MOVESPEED=4;
		enumProperty.PROPERTY_COLLISIONGETBULLET=5;
		enumProperty.PROPERTY_XULISTART=6;
		enumProperty.PROPERTY_XULIEND=7;
		enumProperty.PROPERTY_BEHITSTART=8;
		enumProperty.PROPERTY_BEHITEND=9;
		enumProperty.PROPERTY_STEALTHSTART=10;
		enumProperty.PROPERTY_STEALTHEND=11;
		enumProperty.PROPERTY_SKILLIDBEGIN=12;
		enumProperty.PROPERTY_SKILLIDEND=13;
		enumProperty.PROPERTY_BEHITDISTANCE=14;
		enumProperty.PROPERTY_USEBULLET=15;
		enumProperty.PROPERTY_CURRSCORE=16;
		enumProperty.PROPERTY_XULISIZESCALE=17;
		enumProperty.PROPERTY_ROOMCOLLGETSCORE=18;
		enumProperty.PROPERTY_ROLEHIDE=19;
		enumProperty.PROPERTY_NORMALDISTANCE=20;
		enumProperty.PROPERTY_XULIDISTANCE=21;
		enumProperty.PROPERTY_GRASSUID=22;
		enumProperty.PROPERTY_XULIQIUSCALE=23;
		enumProperty.PROPERTY_MOVESPEEDSTATIC=24;
		enumProperty.PROPERTY_XULIQIUID=25;
		enumProperty.PROPERTY_BOMBAREASCALE=26;
		enumProperty.PROPERTY_SCALE=27;
		enumProperty.PROPERTY_AUTOADDBLOOD=28;
		enumProperty.PROPERTY_PLAYDEAD=29;
		enumProperty.PROPERTY_CDVALUE=30;
		enumProperty.PROPERTY_MAXCHARGEDCOUNT=31;
		enumProperty.PROPERTY_PICKUPSNOWSTATUS=32;
		enumProperty.PROPERTY_MAXDISTANCESCALE=33;
		enumProperty.PROPERTY_CURBLOODNOTFLY=34;
		enumProperty.PROPERTY_VAMPIRE=35;
		return enumProperty;
	})()


	/**
	*...
	*@author ...
	*/
	//class enumex.enumRankID
	var enumRankID=(function(){
		function enumRankID(){}
		__class(enumRankID,'enumex.enumRankID');
		enumRankID.RANK_LEVEL=10001;
		enumRankID.RANK_KILL=10011;
		enumRankID.RANK_CHAMPION=10021;
		enumRankID.RANK_SCORE=10031;
		enumRankID.RANK_LIKE=10041;
		enumRankID.RANK_ACHIEVE=10051;
		enumRankID.RANK_NO=-1;
		return enumRankID;
	})()


	/**
	*...
	*@author ...
	*/
	//class enumex.enumReadyBulletStatus
	var enumReadyBulletStatus=(function(){
		function enumReadyBulletStatus(){}
		__class(enumReadyBulletStatus,'enumex.enumReadyBulletStatus');
		enumReadyBulletStatus.END=0;
		enumReadyBulletStatus.START=1;
		enumReadyBulletStatus.MAX=2;
		enumReadyBulletStatus.FAILED=3;
		return enumReadyBulletStatus;
	})()


	/**
	*...
	*@author ...
	*/
	//class enumex.enumRoomType
	var enumRoomType=(function(){
		function enumRoomType(){}
		__class(enumRoomType,'enumex.enumRoomType');
		enumRoomType.isTeam=function(){
			return enumRoomType.nowType % 10==enumRoomType.ROOMTYPE_TEAM || enumRoomType.nowType==enumRoomType.ROOMTYPE_CUSTOM_TEAM;
		}

		enumRoomType.isAgain=false;
		enumRoomType.nowType=-1;
		enumRoomType.ROOMTYPE_TEACH=100;
		enumRoomType.ROOMTYPE_NONE=-1;
		enumRoomType.ROOMTYPE_FREE=1;
		enumRoomType.ROOMTYPE_TEAM=2;
		enumRoomType.ROOMTYPE_WECHAT3V3=52;
		enumRoomType.ROOMTYPE_TEAM2V2=12;
		enumRoomType.ROOMTYPE_TEAM3V3=52;
		enumRoomType.ROOMTYPE_TEAM5V5=22;
		enumRoomType.ROOMTYPE_QUEEN=32;
		enumRoomType.ROOMTYPE_GEM=42;
		enumRoomType.ROOMTYPE_NEWBIE=3;
		enumRoomType.ROOMTYPE_UNLIMITED=4;
		enumRoomType.ROOMTYPE_RANKED=5;
		enumRoomType.ROOMTYPE_SOS=6;
		enumRoomType.ROOMTYPE_LOLIPOP=7;
		enumRoomType.ROOMTYPE_FLAG=8;
		enumRoomType.ROOMTYPE_CUSTOM_FREE=9;
		enumRoomType.ROOMTYPE_CUSTOM_TEAM=10;
		enumRoomType.ROOMTYPE_CUSTOM_TEAM_3V3=10;
		enumRoomType.ROOMTYPE_SNOW_HOUSE_ATTACK=11;
		enumRoomType.ROOMTYPE_TRAINING=13;
		enumRoomType.ROOMTYPE_SOLO_NPC=14;
		enumRoomType.ROOMTYPE_LADDER=62;
		enumRoomType.ROOMTYPE_TESTMAP01=100;
		enumRoomType.ROOMTYPE_TESTMAP02=101;
		enumRoomType.ROOMTYPE_TESTMAP03=102;
		enumRoomType.ROOMTYPE_TESTMAP04=103;
		enumRoomType.ROOMTYPE_TESTMAP05=104;
		enumRoomType.ROOMTYPE_TESTMAP06=105;
		return enumRoomType;
	})()


	/**
	*...
	*@author ...
	*/
	//class enumex.enumSceneEventId
	var enumSceneEventId=(function(){
		function enumSceneEventId(){}
		__class(enumSceneEventId,'enumex.enumSceneEventId');
		enumSceneEventId.EVENT_SNOWSTORM=1;
		return enumSceneEventId;
	})()


	/**
	*...
	*@author Chen Gong
	*/
	//class enumex.enumShareType
	var enumShareType$1=(function(){
		function enumShareType(){}
		__class(enumShareType,'enumex.enumShareType',null,'enumShareType$1');
		enumShareType.SHARE_GENERAL=22;
		enumShareType.SHARE_UI=23;
		enumShareType.SHARE_LINK_TO_INVITE=24;
		enumShareType.SHARE_GAME=25;
		enumShareType.SHARE_RANK=26;
		enumShareType.SHARE_ACHIEVE=27;
		enumShareType.INVITE_FRIEND_TO_GAME=28;
		enumShareType.SHARE_LINK_TO_INVITE_CUSTOM=29;
		enumShareType.INVITE_FRIEND_TO_TEAM_GAME_IN=30;
		enumShareType.INVITE_FRIEND_TO_CUSTOM_GAME_IN=31;
		enumShareType.SHARE_SHOTS_HERO=32;
		enumShareType.SHARE_SHOTS_ACHIEVE=33;
		enumShareType.SHARE_SHOTS_DUANWEI=34;
		enumShareType.SHARE_SHOTS_TITLE=35;
		enumShareType.SHARE_SHOTS_UPFRIEND=36;
		enumShareType.SHARE_SHOTS_SKIN=37;
		enumShareType.SHARE_ALL=38;
		return enumShareType;
	})()


	/**
	*特殊使用的技能id
	*@author luohuantao
	*/
	//class enumex.enumSkillIdType
	var enumSkillIdType=(function(){
		function enumSkillIdType(){}
		__class(enumSkillIdType,'enumex.enumSkillIdType');
		enumSkillIdType.skillid_120001=120001;
		enumSkillIdType.skillid_170001=170001;
		enumSkillIdType.skillid_180001=180001;
		enumSkillIdType.skillid_210001=210001;
		enumSkillIdType.skillid_230001=230001;
		enumSkillIdType.skillid_240001=240001;
		enumSkillIdType.skillid_250001=250001;
		enumSkillIdType.skillid_260001=260001;
		enumSkillIdType.skillid_270001=270001;
		enumSkillIdType.skillid_280001=280001;
		enumSkillIdType.skill_juji=65001;
		enumSkillIdType.ITEM_SKILL_SNOWMAN=4;
		enumSkillIdType.ITEM_SKILL_GHOST=1;
		enumSkillIdType.ITEM_SKILL_SHIELD=3;
		enumSkillIdType.PET=7;
		return enumSkillIdType;
	})()


	/**任务状态枚举类
	*...
	*@author luohuantao
	*/
	//class enumex.enumTaskStateType
	var enumTaskStateType=(function(){
		function enumTaskStateType(){}
		__class(enumTaskStateType,'enumex.enumTaskStateType');
		enumTaskStateType.TASKSTATE_NOTSTARTED=0;
		enumTaskStateType.TASKSTATE_PROCESS=1;
		enumTaskStateType.TASKSTATE_FINISHED=2;
		enumTaskStateType.TASKSTATE_CLOSED=3;
		enumTaskStateType.TASKTITLESTATE_SHOW=4;
		return enumTaskStateType;
	})()


	/**
	*...
	*@author luohuantao
	*/
	//class enumex.enumTlogReason
	var enumTlogReason=(function(){
		function enumTlogReason(){}
		__class(enumTlogReason,'enumex.enumTlogReason');
		enumTlogReason.REASON=0;
		enumTlogReason.SUBREASON=1;
		enumTlogReason.LEVEL=2;
		enumTlogReason.IMONEY=3;
		enumTlogReason.IMONEYTYPE=4;
		enumTlogReason.ADD=0;
		enumTlogReason.REDUCE=1;
		enumTlogReason.MT_MONEY=0;
		enumTlogReason.MT_DIAMOND=1;
		enumTlogReason.SUBREASON_F3V3=10;
		enumTlogReason.SUBREASON_L3V3=62;
		enumTlogReason.SUBREASON_SNS_SHARE_1=400;
		enumTlogReason.SUBREASON_SNS_SHARE_2=401;
		enumTlogReason.SUBREASON_SNS_SHARE_6=402;
		enumTlogReason.SUBREASON_SNS_SHARE_7=403;
		enumTlogReason.SUBREASON_SNS_SHARE_8=404;
		enumTlogReason.SUBREASON_SNS_SHARE_9=405;
		enumTlogReason.SUBREASON_SNS_SHARE_10=415;
		enumTlogReason.SUBREASON_SNS_INVITE_5=416;
		enumTlogReason.SUBREASON_SNS_SHARE_3=417;
		enumTlogReason.SUBREASON_SNS_SHARE_4=418;
		enumTlogReason.SUBREASON_SNS_SHARE_5=419;
		enumTlogReason.SUBREASON_SNS_SHARE_11=420;
		enumTlogReason.SUBREASON_SNS_SHARE_12=421;
		enumTlogReason.SUBREASON_SNS_SHARE_13=422;
		enumTlogReason.SUBREASON_SNS_INVITE_1=12;
		enumTlogReason.SUBREASON_SNS_INVITE_2=22;
		enumTlogReason.SUBREASON_SNS_INVITE_3=9;
		enumTlogReason.SUBREASON_SNS_INVITE_4=10;
		enumTlogReason.SUBREASON_SNS_LIKE_1=1;
		enumTlogReason.SUBREASON_SNS_LIKE_2=9;
		enumTlogReason.SUBREASON_SNS_LIKE_3=10;
		enumTlogReason.SUBREASON_SNS_LIKE_4=12;
		enumTlogReason.SUBREASON_SNS_LIKE_5=22;
		__static(enumTlogReason,
		['REASON_FIGHT_GET',function(){return this.REASON_FIGHT_GET=1;},'REASON_DAILYTASK_GET',function(){return this.REASON_DAILYTASK_GET=2;},'REASON_ACTIVITY_GET',function(){return this.REASON_ACTIVITY_GET=3;},'REASON_EMAIL_GET',function(){return this.REASON_EMAIL_GET=4;},'REASON_GIFT_GET',function(){return this.REASON_GIFT_GET=5;},'REASON_PLAY_GET',function(){return this.REASON_PLAY_GET=6;},'REASON_PLAY_USE',function(){return this.REASON_PLAY_USE=7;},'REASON_INBATTLE_GET',function(){return this.REASON_INBATTLE_GET=8;},'REASON_INBATTLE_USE',function(){return this.REASON_INBATTLE_USE=9;},'REASON_SNS_SHARE',function(){return this.REASON_SNS_SHARE=100;},'REASON_SNS_INVITE',function(){return this.REASON_SNS_INVITE=101;},'REASON_SNS_LIKE',function(){return this.REASON_SNS_LIKE=102;},'REASON_FOLLOW_GET',function(){return this.REASON_FOLLOW_GET=103;},'REASON_CANCELFOLLOW_GET',function(){return this.REASON_CANCELFOLLOW_GET=104;},'REASON_SNOWHOUSE_105',function(){return this.REASON_SNOWHOUSE_105=105;},'REASON_SNOWHOUSE_106',function(){return this.REASON_SNOWHOUSE_106=106;},'REASON_SNOWHOUSE_107',function(){return this.REASON_SNOWHOUSE_107=107;},'REASON_SNOWHOUSE_109',function(){return this.REASON_SNOWHOUSE_109=109;},'SUBREASON_FREE',function(){return this.SUBREASON_FREE=1;},'SUBREASON_2V2',function(){return this.SUBREASON_2V2=12;},'SUBREASON_5V5',function(){return this.SUBREASON_5V5=22;},'SUBREASON_CFREE',function(){return this.SUBREASON_CFREE=9;},'SUBREASON_CTEAM',function(){return this.SUBREASON_CTEAM=10;},'SUBREASON_DAILYTASK',function(){return this.SUBREASON_DAILYTASK=100;},'SUBREASON_RIDAILY',function(){return this.SUBREASON_RIDAILY=101;},'SUBREASON_CDAILY',function(){return this.SUBREASON_CDAILY=102;},'SUBREASON_RANKLVUP',function(){return this.SUBREASON_RANKLVUP=103;},'SUBREASON_ACHIEVELVUP',function(){return this.SUBREASON_ACHIEVELVUP=104;},'SUBREASON_SHARE',function(){return this.SUBREASON_SHARE=150;},'SUBREASON_SIGN',function(){return this.SUBREASON_SIGN=151;},'SUBREASON_FOLLOW',function(){return this.SUBREASON_FOLLOW=152;},'SUBREASON_SAVE',function(){return this.SUBREASON_SAVE=153;},'SUBREASON_SURVEY',function(){return this.SUBREASON_SURVEY=154;},'SUBREASON_NEWBIEEMAIL',function(){return this.SUBREASON_NEWBIEEMAIL=200;},'SUBREASON_EMAIL',function(){return this.SUBREASON_EMAIL=201;},'SUBREASON_QQ',function(){return this.SUBREASON_QQ=250;},'SUBREASON_WX',function(){return this.SUBREASON_WX=251;},'SUBREASON_GH',function(){return this.SUBREASON_GH=252;},'SUBREASON_QQBROWER',function(){return this.SUBREASON_QQBROWER=253;},'SUBREASON_TREASURE_GET',function(){return this.SUBREASON_TREASURE_GET=300;},'SUBREASON_TREASUREBOX_GET',function(){return this.SUBREASON_TREASUREBOX_GET=301;},'SUBREASON_SKILL_GET',function(){return this.SUBREASON_SKILL_GET=302;},'SUBREASON_SKILLTO_GET',function(){return this.SUBREASON_SKILLTO_GET=303;},'SUBREASON_HEROCARD_GET',function(){return this.SUBREASON_HEROCARD_GET=304;},'SUBREASON_HALLBUY_GET',function(){return this.SUBREASON_HALLBUY_GET=305;},'SUBREASON_NEWBIEGIFT_GET',function(){return this.SUBREASON_NEWBIEGIFT_GET=306;},'SUBREASON_HEROTO_GET',function(){return this.SUBREASON_HEROTO_GET=307;},'SUBREASON_SKILLLVUP_USE',function(){return this.SUBREASON_SKILLLVUP_USE=350;},'SUBREASON_SHOP_USE',function(){return this.SUBREASON_SHOP_USE=351;},'SUBREASON_TREASURE_USE',function(){return this.SUBREASON_TREASURE_USE=352;},'SUBREASON_FIGHT_USE',function(){return this.SUBREASON_FIGHT_USE=353;},'SUBREASON_UPSKILL_USE',function(){return this.SUBREASON_UPSKILL_USE=354;},'SUBREASON_HEROCARD_USE',function(){return this.SUBREASON_HEROCARD_USE=355;},'SUBREASON_SHAREACHIEVE',function(){return this.SUBREASON_SHAREACHIEVE=406;},'SUBREASON_SHAREHERO',function(){return this.SUBREASON_SHAREHERO=407;},'SUBREASON_SHAREDATA',function(){return this.SUBREASON_SHAREDATA=408;},'SUBREASON_SHAREDATA1',function(){return this.SUBREASON_SHAREDATA1=409;},'SUBREASON_SHAREDATA2',function(){return this.SUBREASON_SHAREDATA2=410;},'SUBREASON_SHAREDATA3',function(){return this.SUBREASON_SHAREDATA3=411;},'SUBREASON_SHAREDATA4',function(){return this.SUBREASON_SHAREDATA4=412;},'SUBREASON_SHAREDATA5',function(){return this.SUBREASON_SHAREDATA5=413;},'SUBREASON_SHAREDATA6',function(){return this.SUBREASON_SHAREDATA6=414;},'SUBREASON_RANK',function(){return this.SUBREASON_RANK=500;},'SUBREASON_PLAY',function(){return this.SUBREASON_PLAY=501;},'SUBREASON_SEARCH',function(){return this.SUBREASON_SEARCH=502;},'SUBREASON_FOLLOWER',function(){return this.SUBREASON_FOLLOWER=503;},'SUBREASON_FRIEND',function(){return this.SUBREASON_FRIEND=504;},'SUBREASON_SNOWHOUSE_612',function(){return this.SUBREASON_SNOWHOUSE_612=612;},'SUBREASON_SNOWHOUSE_613',function(){return this.SUBREASON_SNOWHOUSE_613=613;},'SUBREASON_SNOWHOUSE_614',function(){return this.SUBREASON_SNOWHOUSE_614=614;},'SUBREASON_SNOWHOUSE_615',function(){return this.SUBREASON_SNOWHOUSE_615=615;},'SUBREASON_SNOWHOUSE_616',function(){return this.SUBREASON_SNOWHOUSE_616=616;},'SUBREASON_SNOWHOUSE_617',function(){return this.SUBREASON_SNOWHOUSE_617=617;},'SUBREASON_SNOWHOUSE_618',function(){return this.SUBREASON_SNOWHOUSE_618=618;},'SUBREASON_SNOWHOUSE_619',function(){return this.SUBREASON_SNOWHOUSE_619=619;},'SUBREASON_SNOWHOUSE_715',function(){return this.SUBREASON_SNOWHOUSE_715=715;},'SUBREASON_SNOWHOUSE_716',function(){return this.SUBREASON_SNOWHOUSE_716=716;},'SUBREASON_SNOWHOUSE_800',function(){return this.SUBREASON_SNOWHOUSE_800=800;},'SUBREASON_SNOWHOUSE_801',function(){return this.SUBREASON_SNOWHOUSE_801=801;},'SUBREASON_SNOWHOUSE_802',function(){return this.SUBREASON_SNOWHOUSE_802=802;},'SUBREASON_SNOWHOUSE_803',function(){return this.SUBREASON_SNOWHOUSE_803=803;},'SUBREASON_SNOWHOUSE_804',function(){return this.SUBREASON_SNOWHOUSE_804=804;},'SUBREASON_SNOWHOUSE_805',function(){return this.SUBREASON_SNOWHOUSE_805=805;},'SUBREASON_SNOWHOUSE_950',function(){return this.SUBREASON_SNOWHOUSE_950=950;},'SUBREASON_SNOWHOUSE_951',function(){return this.SUBREASON_SNOWHOUSE_951=951;}
		]);
		return enumTlogReason;
	})()


	/**
	*...
	*@author Chen Gong
	*/
	//class enumex.enumUserEnterGameType
	var enumUserEnterGameType=(function(){
		function enumUserEnterGameType(){}
		__class(enumUserEnterGameType,'enumex.enumUserEnterGameType');
		enumUserEnterGameType.default1=-1;
		enumUserEnterGameType.hasClickShop=128;
		enumUserEnterGameType.newUser=1;
		enumUserEnterGameType.freeModel=2;
		enumUserEnterGameType.teamModel=4;
		enumUserEnterGameType.skillButton=8;
		enumUserEnterGameType.achieveButton=16;
		enumUserEnterGameType.achieveRedDot=32;
		enumUserEnterGameType.hasInGame=64;
		return enumUserEnterGameType;
	})()


	/**
	*...
	*@author ...
	*/
	//class enumex.enumUseSkillResult
	var enumUseSkillResult=(function(){
		function enumUseSkillResult(){}
		__class(enumUseSkillResult,'enumex.enumUseSkillResult');
		enumUseSkillResult.RESULT_CD=0;
		enumUseSkillResult.RESULT_SUCCESS=1;
		enumUseSkillResult.RESULT_SCORENOTENOUGTH=2;
		enumUseSkillResult.RESULT_USING=3;
		enumUseSkillResult.RESULT_COUNTNOTENOUGTH=4;
		enumUseSkillResult.RESULT_NOTHISSKILL=5;
		enumUseSkillResult.RESULT_HASDEAD=6;
		return enumUseSkillResult;
	})()


	/**
	*...
	*@author Chen Gong
	*/
	//class enumex.snowHouse.enumBuildingIDs
	var enumBuildingIDs=(function(){
		function enumBuildingIDs(){}
		__class(enumBuildingIDs,'enumex.snowHouse.enumBuildingIDs');
		enumBuildingIDs.LOBBY=1;
		enumBuildingIDs.ICE_HOUSE=2;
		enumBuildingIDs.WARRIOR_TEMPLE=3;
		enumBuildingIDs.MAGE_TEMPLE=4;
		enumBuildingIDs.ASSASIN_TEMPLE=5;
		enumBuildingIDs.RANGER_TEMPLE=6;
		enumBuildingIDs.FIRE_MINE=7;
		enumBuildingIDs.MANA_MINE=8;
		enumBuildingIDs.SHADOW_MINE=9;
		enumBuildingIDs.STAR_MINE=10;
		enumBuildingIDs.FINANCIAL_LOBBY=11;
		enumBuildingIDs.MILLITARY_LOBBY=12;
		enumBuildingIDs.SUMMONER_WALL=13;
		enumBuildingIDs.STORAGE=14;
		enumBuildingIDs.SUMMONER_TOWER=15;
		return enumBuildingIDs;
	})()


	//class enumex.UnionEnum
	var UnionEnum=(function(){
		function UnionEnum(){}
		__class(UnionEnum,'enumex.UnionEnum');
		UnionEnum.QQ_ANDROID=-5;
		UnionEnum.QQ_IOS=-9;
		UnionEnum.WECHAT_ANDROID=-8;
		UnionEnum.WECHAT_IOS=-10;
		UnionEnum.QZONE_ANDROID=-107;
		UnionEnum.QZONE_IOS=-108;
		UnionEnum.MINIGAME_ANDROID=-106;
		UnionEnum.MINIGAME_IOS=-109;
		UnionEnum.FB_INSTANT=-110;
		return UnionEnum;
	})()


	/**
	*...
	*@author Chen Gong
	*/
	//class enumex.UserFragmentResultType
	var UserFragmentResultType=(function(){
		function UserFragmentResultType(){}
		__class(UserFragmentResultType,'enumex.UserFragmentResultType');
		UserFragmentResultType.CAN_USE=1;
		UserFragmentResultType.CANT_USE_NOT_ENOUGH_FRAG=2;
		UserFragmentResultType.CANT_USE_NOT_ENOUGH_GOLD=3;
		UserFragmentResultType.CANT_USE_NOT_ENOUGH_DIAMOND=4;
		UserFragmentResultType.CANT_USE_UNKNOWN_REASON=5;
		UserFragmentResultType.CANT_USE_TOOMANYITEM=6;
		return UserFragmentResultType;
	})()


	/**
	*...
	*@author Chen Gong
	*/
	//class gameRkData
	var gameRkData=(function(){
		function gameRkData(){
			this.name=null;
			this.id=0;
			this.score=NaN;
			this.userScore=NaN;
			this.rank=NaN;
			this.teammatesNum=NaN;
			this.firstUserUID=0;
			this.kills=NaN;
		}

		__class(gameRkData,'gameRkData');
		return gameRkData;
	})()


	/**
	*...
	*@author dongketao
	*/
	//class GameRoleInfo
	var GameRoleInfo=(function(){
		function GameRoleInfo(){
			this.uid=0;
			this.inReadyBullet=0;
			this.scale=NaN;
			this.SmaxSpeed=NaN;
			this.inGrass=NaN;
			this.activeSkill=[];
			this.clear();
		}

		__class(GameRoleInfo,'GameRoleInfo');
		var __proto=GameRoleInfo.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			this.uid=msg.getUint16();
			this.inReadyBullet=msg.readByte();
			if (this.inReadyBullet > 0){
				this.scale=msg.getInt16()/ 10000;
				this.SmaxSpeed=msg.getInt16()/ 10000;
			}
			this.inGrass=msg.getInt16();
			var skillsLen=msg.readByte();
			this.activeSkill=[];
			var tem;
			for (var i=0,len=skillsLen;i < len;i++){
				tem=new SkillSlotData();
				tem.clientReadBody(msg,msgLen);
				this.activeSkill.push(tem);
			}
			return true;
		}

		__proto.serverWriteBody=function(msg){
			msg.writeUint16(this.uid);
			msg.writeByte(this.inReadyBullet);
			if (this.inReadyBullet > 0){
				msg.writeInt16(0 | this.scale *10000);
				msg.writeInt16(0 | this.SmaxSpeed *10000);
			}
			msg.writeInt16(this.inGrass);
			if (this.activeSkill==null){
				msg.writeByte(0);
			}
			else{
				msg.writeByte(this.activeSkill.length);
				for (var i=0,len=this.activeSkill.length;i < len;i++){
					this.activeSkill[i] && (this.activeSkill [i]).serverWriteBody(msg);
				}
			}
			return true;
		}

		__proto.clear=function(){
			this.uid=0;
			this.inReadyBullet=0;
			this.scale=0;
			this.SmaxSpeed=0;
			this.inGrass=0;
			this.activeSkill=null;
			return this.constructor.name;
		}

		return GameRoleInfo;
	})()


	/**
	*...
	*@author dongketao
	*/
	//class GameUserInfo
	var GameUserInfo=(function(){
		function GameUserInfo(){
			this.gameUID=0;
			this.heroExp=0;
			this.username=null;
			this.gender=NaN;
			this.title=0;
			this.headPortrait=null;
			this.roleInfo=null;
			this.turnRabit=0;
			this.turnSnowMan=0;
			this.hasOctopus=0;
			this.hasShield=0;
			this.wzStatus=0;
			this.clear();
		}

		__class(GameUserInfo,'GameUserInfo');
		var __proto=GameUserInfo.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			this.gameUID=msg.getInt32();
			this.heroExp=msg.getInt32();
			var nameLen=msg.getInt16();
			this.username=msg.readUTFBytes(nameLen);
			this.gender=msg.readByte();
			this.turnRabit=msg.readByte();
			this.turnSnowMan=msg.readByte();
			this.hasOctopus=msg.readByte();
			this.hasShield=msg.readByte();
			this.wzStatus=msg.readByte();
			this.title=msg.getUint16();
			var userheadLen=msg.getInt16();
			this.headPortrait=msg.readUTFBytes(userheadLen);this.roleInfo=this.roleInfo|| new GameRoleInfo();
			this.roleInfo.clientReadBody(msg,msgLen);
			return true;
		}

		__proto.serverWriteBody=function(msg){
			msg.writeInt32(this.gameUID);
			msg.writeInt32(this.heroExp);
			msg.writeUTFBytes(this.username);
			msg.writeByte(this.gender);
			msg.writeByte(this.turnRabit);
			msg.writeByte(this.turnSnowMan);
			msg.writeByte(this.hasOctopus);
			msg.writeByte(this.hasShield);
			msg.writeByte(this.wzStatus);
			msg.writeUint16(this.title);
			msg.writeUTFBytes(this.headPortrait);
			this.roleInfo.serverWriteBody(msg);
			return true;
		}

		__proto.clear=function(){
			this.gameUID=0;
			this.heroExp=0;
			this.username="";
			this.gender=0;
			this.title=0;
			this.headPortrait="";
			this.turnRabit=0;
			this.turnSnowMan=0;
			this.hasOctopus=0;
			this.hasShield=0;
			this.wzStatus=0;
			DataPool.recover(this.roleInfo);
			return this.constructor.name;
		}

		return GameUserInfo;
	})()


	/**
	*...
	*@author dongketao
	*/
	//class ItemPosData
	var ItemPosData=(function(){
		function ItemPosData(){
			this.uid=0;
			this.posId=0;
			this.gid=0;
		}

		__class(ItemPosData,'ItemPosData');
		var __proto=ItemPosData.prototype;
		/**
		*把数据copy到当前的数据结构内.
		*@param itemd
		*/
		__proto.copyData=function(itemdata){
			this.uid=itemdata.uid;
			this.posId=itemdata.posId;
			this.gid=itemdata.gid;
		}

		__proto.clientReadBody=function(msg,msgLen){
			this.uid=msg.getUint16();
			this.posId=msg.getUint16();
			this.gid=msg.getUint16();
			return true;
		}

		__proto.serverWriteBody=function(msg){
			msg.writeUint16(this.uid);
			msg.writeUint16(this.posId);
			msg.writeUint16(this.gid);
			return true;
		}

		__proto.clear=function(){
			this.uid=0;
			this.posId=0;
			this.gid=0;
			return this.constructor.name;
		}

		ItemPosData.initDataPool=function(){
			for (var ti=0;ti < ItemPosData._maxNum;ti++){
				ItemPosData._dataPool[ti]=new ItemPosData();
			}
		}

		ItemPosData.getData=function(){
			return ItemPosData._dataPool.length>0? ItemPosData._dataPool.pop():new ItemPosData();
		}

		ItemPosData.release=function(_data){
			if (!_data)return;
			if (ItemPosData._dataPool.indexOf(_data)!=-1)return;
			_data.clear();
			ItemPosData._dataPool.push(_data);
		}

		ItemPosData._maxNum=1024 *5;
		ItemPosData._dataPool=[];
		return ItemPosData;
	})()


	/**
	*...
	*@author Chen Gong
	*/
	//class levelDataset
	var levelDataset=(function(){
		function levelDataset(){
			this.level=0;
			this.exp=0;
			this.expRequired=0;
			this.heroExp=0;
		}

		__class(levelDataset,'levelDataset');
		return levelDataset;
	})()


	/**
	*...
	*@author Chen Gong
	*/
	//class LolipopBattleData
	var LolipopBattleData=(function(){
		function LolipopBattleData(){
			this.scoreNow=0;
			this.scoreGiven=NaN;
		}

		__class(LolipopBattleData,'LolipopBattleData');
		return LolipopBattleData;
	})()


	/**
	*所有的长度基于Byte Length.
	*...
	*@author rivetr
	*/
	//class MsgTemplate
	var MsgTemplate=(function(){
		function MsgTemplate(){
			this.ref=0;
			this._msgLen=0;
			this.msgID=0;
			this.msgSendTm=0;
			this.msgViewCal=false;
			this.sn=0;
			this.msgID=this.__class.MSGID;;
		}

		__class(MsgTemplate,'MsgTemplate');
		var __proto=MsgTemplate.prototype;
		/*override*/
		__proto.clientReadBody=function(msg,msgLen){
			return false;
		}

		/*override*/
		__proto.clientWriteBody=function(msg){
			return false;
		}

		/*override*/
		__proto.getMsgSize=function(){
			return 32;
		}

		/*override*/
		__proto.getMsgBodySize=function(){
			return 250;
		}

		/*override*/
		__proto.isBigMsg=function(){
			return false;
		}

		/**
		*返回写入的数据长度
		*@param msg
		*/
		__proto.clientWrite=function(msg){
			this._write(msg,this.clientWriteBody);
			return this._msgLen;
		}

		/**
		*返回写入的数据长度
		*@param msg
		*@return
		*/
		__proto.serverWrite=function(msg){
			if (this.isBigMsg())msg.useBigBuffer();
			this._write(msg,this.serverWriteBody);
			return this._msgLen;
		}

		/*override*/
		__proto.serverReadBody=function(msg,msgLen){
			return false;
		}

		/*override*/
		__proto.serverWriteBody=function(msg){
			return false;
		}

		__proto.release=function(){
			this.ref--;
			if (this.ref <=0){
				this.ref=0;
				this.clear();
				Pool.recover("NET:"+this.msgID,this);
			}
		}

		/**
		*写入消息数据
		*@param msg
		*@param fun
		*/
		__proto._write=function(msg,fun){
			var startPos=msg.pos;
			msg.writeUint8(this.msgID);
			var tbmin=true;
			if (this.getMsgBodySize()> MsgTemplate.LBODY_MAXLEN){
				msg.pos+=3;
				tbmin=false;
			}else
			msg.pos+=1;
			fun.call(this,msg);
			var endPos=msg.pos;
			var len=endPos-startPos;
			msg.pos=startPos+1;
			if (tbmin){
				if (len > 0xff){
					throw new Error("Use MinBufLen,Buf DataLength is more than 255");
				}
				msg.writeUint8(len);
				}else {
				msg.writeUint8(0xff);
				msg.writeInt16(len);
			}
			this._msgLen=len;
			msg.pos=endPos;
		}

		/*override*/
		__proto.clear=function(){
			this.sn=0;
			return this.constructor.name;
		}

		/*override*/
		__proto.fillMsgID=function(){
			this.msgID=MsgTemplate.stringHash(this.constructor.name);
		}

		__proto.handleMsgInfo=function(msg){
			try{
				msg.fillMsgID();
				}catch (e){
				console.log("Error msg:"+JSON.stringify(msg).toString());
			}
			msg.sn=MsgTemplate._msgSerial++;
		}

		__proto.getSize=function(){
			return this.getMsgSize();
		}

		__proto.getMsgName=function(){
			return this.constructor.name;
		}

		__getset(1,MsgTemplate,'msgSerial',function(){
			return MsgTemplate._msgSerial;
		});

		MsgTemplate.reg=function(cls){
			cls.MSGID=MsgTemplate._IDS;
			MsgTemplate._msgTemplateReg[MsgTemplate._IDS++]=cls;
		}

		MsgTemplate.getIdByClassName=function(name){
			var _loadListKey=Object.keys(this._msgTemplateReg);
			var _key;
			var $each__key;
			for($each__key in _loadListKey){
				_key=_loadListKey[$each__key];
				if (MsgTemplate._msgTemplateReg[_key]==name){
					return parseInt(_key);
				}
			}
			return-1
		}

		MsgTemplate.getMsgTemplate=function(){
			return MsgTemplate._msgTemplateReg;
		}

		MsgTemplate.createWithClass=function(cls){
			return MsgTemplate.create(cls.MSGID);
		}

		MsgTemplate.release=function(msg){
			msg && msg.release();
		}

		MsgTemplate.create=function(id){
			var cls=MsgTemplate._msgTemplateReg[id];
			if (cls===null){
				throw "MsgTemplate no:"+id;
			};
			var t=Pool.getItemByClass("NET:"+id,cls);
			t.msgID=id;
			return t;
		}

		MsgTemplate.getMsgClassName=function(msg){
			return msg.constructor.name;
		}

		MsgTemplate.unionMsg=function(msg1,msg2){
			var ti=0;
			if (msg1.msgID==SMsgItemAppear.MSGID){
				for (ti=0;ti < (msg2).itemNum;ti++){
					var tnd=ItemData.getData();
					tnd.copyData((msg2).itemList[ti]);
					(msg1).itemList.push(tnd);
				}
				(msg1).itemNum=(msg1).itemList.length;
				return true;
			}
			if (msg1.msgID==SMsgDelSnorw.MSGID){
				for (ti=0;ti < (msg2).itemNum;ti++){
					var tdfd=DelFoodData.getData();
					tdfd.copyData((msg2).itemList[ti]);
					(msg1).itemList.push(tdfd);
				}
				(msg1).itemNum=(msg1).itemList.length;
				return true;
			}
			return false;
		}

		MsgTemplate.clientRead=function(msg){
			return MsgTemplate._onRead(msg,1);
		}

		MsgTemplate.serverRead=function(msg){
			return MsgTemplate._onRead(msg,2);
		}

		MsgTemplate._onRead=function(msg,type){
			var pos=msg.pos;
			var msgID=msg.getUint8();
			var msgLen=msg.getUint8();
			var epos=0;
			if (msgLen==0xFF)
				msgLen=msg.getInt16();
			epos=pos+msgLen;
			if (msg.length < msgLen){
				msg.pos=pos;
				return null;
			};
			var cls=MsgTemplate._msgTemplateReg[msgID];
			if (!cls){
				msg.pos=epos;
				return null;
			};
			var t=Pool.getItemByClass("NET:"+msgID,cls);
			t.clear();
			t.msgID=msgID;
			type===1?t.clientReadBody(msg,msgLen):t.serverReadBody(msg,msgLen);
			if (msg.pos !=epos && type==1 && MsgTemplate._alertCount++< 3){
				msg.pos=epos;
				return null;
			}
			msg.pos=epos;
			return t;
		}

		MsgTemplate.getStrByteSize=function(str,charset){
			(charset===void 0)&& (charset='');
			var total=0,charCode;
			charset=charset ? charset.toLocaleLowerCase():'';
			if(charset=='utf-16' || charset=='utf16'){
				for(var i=0,len=str.length;i < len;i++){
					charCode=str.charCodeAt(i);
					if(charCode <=0xffff){
						total+=2;
						}else{
						total+=4;
					}
				}
				}else{
				for(var j=0,len1=str.length;j < len1;j++){
					charCode=str.charCodeAt(j);
					if(charCode <=0x007f){
						total+=1;
						}else if(charCode <=0x07ff){
						total+=2;
						}else if(charCode <=0xffff){
						total+=3;
						}else{
						total+=4;
					}
				}
			}
			return total;
		}

		MsgTemplate.stringHash=function(str){
			var t_dw=0;
			for (var ti=0,len=str.length;ti < len;ti++){
				t_dw=((t_dw<<5)-t_dw)+str.charCodeAt(ti);
			};
			var r=MsgTemplate.to32Uint(t_dw >>> 0);
			MsgTemplate._hashString[r]=str;
			return r;
		}

		MsgTemplate.hashString=function(id){
			return MsgTemplate._hashString[id];
		}

		MsgTemplate.to32Uint=function(val){
			return val;
		}

		MsgTemplate.utf8Encode=function(msg){
			msg.sn=MsgTemplate._msgSerial++;
			return JSON.stringify(msg).toString();
		}

		MsgTemplate.msgDecode=function(msgstr){
			var tobj=JSON.parse(msgstr);
			MsgTemplate._clientMsgSer=tobj.sn;
			return tobj;
		}

		MsgTemplate._msgSerial=0;
		MsgTemplate._clientMsgSer=0;
		MsgTemplate._msgIDSize=1;
		MsgTemplate.LBODY_MAXLEN=0xff-3;
		MsgTemplate.OFFSET_MIN=2;
		MsgTemplate.OFFSET_MAX=4;
		MsgTemplate._msgTemplateReg={};
		MsgTemplate._IDS=1;
		MsgTemplate._alertCount=0;
		MsgTemplate._hashString={};
		return MsgTemplate;
	})()


	/**
	*...
	*@author laoxie
	*/
	//class MSGInit
	var MSGInit=(function(){
		function MSGInit(){};
		__class(MSGInit,'MSGInit');
		MSGInit.init=function(){
			MsgTemplate.reg(CGMCommand);
			MsgTemplate.reg(CMsgCBullet);
			MsgTemplate.reg(CMsgChat);
			MsgTemplate.reg(CMsgHeartBeatRes);
			MsgTemplate.reg(CMsgLoginGS);
			MsgTemplate.reg(CMsgReadyStart);
			MsgTemplate.reg(CMsgRebirth);
			MsgTemplate.reg(CMsgRegister);
			MsgTemplate.reg(CMsgUserMove);
			MsgTemplate.reg(CMsgUseSkill);
			MsgTemplate.reg(CMsgChgRank);
			MsgTemplate.reg(CMsgReadyBullet);
			MsgTemplate.reg(CMsgLeaveGame);
			MsgTemplate.reg(CMsgExClose);
			MsgTemplate.reg(CMsgNextRound);
			MsgTemplate.reg(CMsgSelectSkill);
			MsgTemplate.reg(CGMSelectSkill);
			MsgTemplate.reg(CMsgEatLolipop);
			MsgTemplate.reg(CMsgUserDeltaMove);
			MsgTemplate.reg(CMsgChangeCustomRoomPosition);
			MsgTemplate.reg(CMsgEnterCustomRoom);
			MsgTemplate.reg(CMsgLeaveCustomRoom);
			MsgTemplate.reg(CMsgAcceptSwitchRequest);
			MsgTemplate.reg(CMsgKickPlayerByOwner);
			MsgTemplate.reg(CMsgSwitchCustomRoomPosition);
			MsgTemplate.reg(CMsgAddRobot);
			MsgTemplate.reg(CMsgStartCustomGame);
			MsgTemplate.reg(CMsgLoadCustomResource);
			MsgTemplate.reg(CMsgNewbieInfo);
			MsgTemplate.reg(CMsgControlBullet);
			MsgTemplate.reg(CMsgMeeleAttack);
			MsgTemplate.reg(CMsgStuck);
			MsgTemplate.reg(CMsgShowTan);
			MsgTemplate.reg(CMsgCancelRabitChange);
			MsgTemplate.reg(CMsgPetAttack);
			MsgTemplate.reg(CMsgSkillSlot);
			MsgTemplate.reg(CMsgRoomResidualTime);
			MsgTemplate.reg(CMsgNewBieEnd);
			MsgTemplate.reg(CMsgSpeak);
			MsgTemplate.reg(SMsgFriendJoin);
			MsgTemplate.reg(CMsgPickUpSnow);
			MsgTemplate.reg(CMsgFightExpression);
			MsgTemplate.reg(CMsgNewbieStep);
			MsgTemplate.reg(CMsgTeamAvatar);
			MsgTemplate.reg(CMsgChgUserState);
			MsgTemplate.reg(CMsgAddTrainingAi);
			MsgTemplate.reg(CMsgPauseTime);
			MsgTemplate.reg(CMsgContinueTime);
			MsgTemplate.reg(SMsgCBullet);
			MsgTemplate.reg(SMsgAreaCollision);
			MsgTemplate.reg(SMsgChat);
			MsgTemplate.reg(SMsgCollision);
			MsgTemplate.reg(SMsgDelSnorw);
			MsgTemplate.reg(SMsgEnterRoom);
			MsgTemplate.reg(SMsgGameEndFree);
			MsgTemplate.reg(SMsgGameEndTeam);
			MsgTemplate.reg(SMsgItemAppear);
			MsgTemplate.reg(SMsgItemDisappear);
			MsgTemplate.reg(SMsgLevelUp);
			MsgTemplate.reg(SMsgLoginRes);
			MsgTemplate.reg(SMsgMyDie);
			MsgTemplate.reg(SMsgRegisterRes);
			MsgTemplate.reg(SMsgRoomUserList);
			MsgTemplate.reg(SMsgSelfCollision);
			MsgTemplate.reg(SMsgSelfDelSnorw);
			MsgTemplate.reg(SMsgServerTime);
			MsgTemplate.reg(SMsgTest);
			MsgTemplate.reg(SMsgUserAdd);
			MsgTemplate.reg(SMsgUserAddView);
			MsgTemplate.reg(SMsgUserMove);
			MsgTemplate.reg(SMsgUserOffline);
			MsgTemplate.reg(SMsgViolent);
			MsgTemplate.reg(SRankListRes);
			MsgTemplate.reg(SMyRankListRes);
			MsgTemplate.reg(SMsgReadyBullet);
			MsgTemplate.reg(SMsgTalkAuthority);
			MsgTemplate.reg(SMsgSynBullet);
			MsgTemplate.reg(SMsgUlimitedRound);
			MsgTemplate.reg(SMsgItemPosAppear);
			MsgTemplate.reg(SMsgRoundEnd);
			MsgTemplate.reg(SMsgBombAttackResult);
			MsgTemplate.reg(SMsgDying);
			MsgTemplate.reg(SMsgSave);
			MsgTemplate.reg(SMsgUserSkillEffect);
			MsgTemplate.reg(SMsgChgProperty);
			MsgTemplate.reg(SMsgSelfChgProperty);
			MsgTemplate.reg(SMsgAllProperty);
			MsgTemplate.reg(SMsgRandomSkill);
			MsgTemplate.reg(SMsgTitle);
			MsgTemplate.reg(SMsgCrit);
			MsgTemplate.reg(SMsgSelectActiveSkills);
			MsgTemplate.reg(SMsgBattleInfo);
			MsgTemplate.reg(SMsgUseSkillResult);
			MsgTemplate.reg(SMsgAddDynamicItem);
			MsgTemplate.reg(SMsgRankListLolipop);
			MsgTemplate.reg(SMsgLolipopScoreMax);
			MsgTemplate.reg(SMsgRankListFlag);
			MsgTemplate.reg(SMsgRemoveProp);
			MsgTemplate.reg(SMsgGameEndLolipop);
			MsgTemplate.reg(SMsgBattleAchieveChg);
			MsgTemplate.reg(SMsgShowLolipopScore);
			MsgTemplate.reg(SMsgAchieveChg);
			MsgTemplate.reg(SMsgSimpleBattleInfo);
			MsgTemplate.reg(SMsgFlagsPlaced);
			MsgTemplate.reg(SMsgModePlayTimes);
			MsgTemplate.reg(SMsgFoodCooked);
			MsgTemplate.reg(SMsgUserPutLolipop);
			MsgTemplate.reg(SMsgCarryFlag);
			MsgTemplate.reg(SMsgCrazyStart);
			MsgTemplate.reg(SMsgKillChg);
			MsgTemplate.reg(SMsgRoomUserList);
			MsgTemplate.reg(SMsgCollisionResult);
			MsgTemplate.reg(SMsgTimerDown);
			MsgTemplate.reg(SMsgCloud);
			MsgTemplate.reg(SMsgTimeRatio);
			MsgTemplate.reg(SMsgCombinedMsg);
			MsgTemplate.reg(SMsgUserDeltaMove);
			MsgTemplate.reg(SMsgUserLeftCustomRoom);
			MsgTemplate.reg(SMsgUserEnterCustomRoom);
			MsgTemplate.reg(SMsgShowCustomGamePanel);
			MsgTemplate.reg(SMsgUserChangePosition);
			MsgTemplate.reg(SMsgHostedRobot);
			MsgTemplate.reg(SMsgMoveRight);
			MsgTemplate.reg(SMsgAskUserToChangePosition);
			MsgTemplate.reg(SMsgSwitchPositionResult);
			MsgTemplate.reg(SMsgBeKicked);
			MsgTemplate.reg(SMsgLoadCustomResource);
			MsgTemplate.reg(SMsgQueenChg);
			MsgTemplate.reg(SMsgRankListQueen);
			MsgTemplate.reg(SMsgRankListGem);
			MsgTemplate.reg(SMsgGameEndQueen);
			MsgTemplate.reg(SMsgGameEndGem);
			MsgTemplate.reg(SMsgNewbieRoomInfo);
			MsgTemplate.reg(SMsgSelfExplode);
			MsgTemplate.reg(SMsgUserHitMove);
			MsgTemplate.reg(SMsgControlBullet);
			MsgTemplate.reg(SMsgUserStartHitMove);
			MsgTemplate.reg(SMsgUserFlashMove);
			MsgTemplate.reg(SMsgOpenBattleBox);
			MsgTemplate.reg(SMsgAddJumpItem);
			MsgTemplate.reg(SMsgBearAttack);
			MsgTemplate.reg(SMsgShowTan);
			MsgTemplate.reg(SMsgStartGemDown);
			MsgTemplate.reg(SMsgStuckMove);
			MsgTemplate.reg(SMsgEndRabitChange);
			MsgTemplate.reg(SMsgGhostChange);
			MsgTemplate.reg(SMsgBroadcastSkillStatus);
			MsgTemplate.reg(SMsgSkillSlot);
			MsgTemplate.reg(SMsgRoomResidualTime);
			MsgTemplate.reg(SMsgBattleTaskUpdate);
			MsgTemplate.reg(SMsgInitBattleTask);
			MsgTemplate.reg(SMsgSelectSkillResult);
			MsgTemplate.reg(SMsgOwnPassiveSkill);
			MsgTemplate.reg(SMsgFightSpeak);
			MsgTemplate.reg(SMsgBroadcastBuffStatus);
			MsgTemplate.reg(SMsgFightExpression);
			MsgTemplate.reg(SMsgChgBulletTarget);
			MsgTemplate.reg(SMsgAttackSnowHouseModeEnd);
			MsgTemplate.reg(SMsgSkillEffect);
			MsgTemplate.reg(SMsgTeamAvatar);
			MsgTemplate.reg(SMsgChgUserState);
			MsgTemplate.reg(SMsgTrainingModeEnd);
			MsgTemplate.reg(SMsgUpdateTrainProgress);
			MsgTemplate.reg(SMsgContinueTime);
		}

		return MSGInit;
	})()


	/**
	*...
	*@author Chen Gong
	*/
	//class msgSvr.gemGame.GemTeamRankData
	var GemTeamRankData=(function(){
		function GemTeamRankData(){
			this.id=0;
			this.teammatesNum=NaN;
			this.gem=NaN;
		}

		__class(GemTeamRankData,'msgSvr.gemGame.GemTeamRankData');
		var __proto=GemTeamRankData.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			this.id=msg.getInt32();
			this.teammatesNum=msg.readByte();
			this.gem=msg.getInt16();
			return true;
		}

		__proto.serverWriteBody=function(msg){
			msg.writeInt32(this.id);
			msg.writeByte(this.teammatesNum);
			msg.writeInt16(this.gem);
			return true;
		}

		__proto.clear=function(){
			this.id=0;
			this.teammatesNum=0;
			this.gem=0;
			return this.constructor.name;
		}

		return GemTeamRankData;
	})()


	/**
	*...
	*@author Chen Gong
	*/
	//class msgSvr.gemGame.GemUserEndData
	var GemUserEndData=(function(){
		function GemUserEndData(){
			this.id=0;
			this.avatar=0;
			this.gender=0;
			this.rank=0;
			this.gem=NaN;
			this.medals=null;
			this.headPortrait=null;
			this.teamScore=0;
			this.teamId=0;
		}

		__class(GemUserEndData,'msgSvr.gemGame.GemUserEndData');
		var __proto=GemUserEndData.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			this.id=msg.getInt32();
			this.gem=msg.getInt16();
			this.avatar=msg.getInt16();
			this.gender=msg.getInt16();
			this.rank=msg.getInt16();
			this.gem=msg.getInt16();
			this.medals=[];
			var medalLength=msg.readByte();
			for (var j=0;j < medalLength;j++){
				this.medals.push(msg.readByte());
			};
			var userheadLen=msg.getInt16();
			this.headPortrait=msg.readUTFBytes(userheadLen);
			return true;
		}

		__proto.serverWriteBody=function(msg){
			msg.writeInt32(this.id);
			msg.writeInt16(this.gem);
			msg.writeInt16(this.avatar);
			msg.writeInt16(this.gender);
			msg.writeInt16(this.rank);
			msg.writeInt16(this.gem);
			msg.writeByte(this.medals.length);
			for (var j=0;j < this.medals.length;j++){
				msg.writeByte(this.medals[j]);
			}
			msg.writeUTFBytes(this.headPortrait);
			return true;
		}

		__proto.clear=function(){
			this.id=0;
			this.gem=0;
			this.teamId=0;
			this.teamScore=0;
			return this.constructor.name;
		}

		return GemUserEndData;
	})()


	/**
	*...
	*@author Chen Gong
	*/
	//class msgSvr.gemGame.GemUserRankData
	var GemUserRankData=(function(){
		function GemUserRankData(){
			this.id=0;
			this.score=NaN;
			this.gem=NaN;
		}

		__class(GemUserRankData,'msgSvr.gemGame.GemUserRankData');
		var __proto=GemUserRankData.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			this.id=msg.getInt32();
			this.score=msg.getInt16();
			this.gem=msg.getInt16();
			return true;
		}

		__proto.serverWriteBody=function(msg){
			msg.writeInt32(this.id);
			msg.writeInt16(this.score);
			msg.writeInt16(this.gem);
			return true;
		}

		__proto.clear=function(){
			this.id=0;
			this.score=0;
			this.gem=0;
			return this.constructor.name;
		}

		return GemUserRankData;
	})()


	/**
	*...
	*@author dkt
	*/
	//class msgSvr.queenGame.QueenChgData
	var QueenChgData=(function(){
		function QueenChgData(){
			this.teamId=0;
			this.queenUID=0;
			this.clear();
		}

		__class(QueenChgData,'msgSvr.queenGame.QueenChgData');
		var __proto=QueenChgData.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			this.teamId=msg.readByte();
			this.queenUID=msg.getInt32();
			return true;
		}

		__proto.serverWriteBody=function(msg){
			msg.writeByte(this.teamId);
			msg.writeInt32(this.queenUID);
			return true;
		}

		__proto.fillData=function(_data){
			this.teamId=_data.teamId;
			this.queenUID=_data.queenUID;
		}

		__proto.clear=function(){
			this.teamId=0;
			this.queenUID=0;
			return this.constructor.name;
		}

		return QueenChgData;
	})()


	/**
	*...
	*@author Chen Gong
	*/
	//class msgSvr.queenGame.QueenTeamRankData
	var QueenTeamRankData=(function(){
		function QueenTeamRankData(){
			this.id=0;
			this.teammatesNum=NaN;
			this.queenScore=NaN;
		}

		__class(QueenTeamRankData,'msgSvr.queenGame.QueenTeamRankData');
		var __proto=QueenTeamRankData.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			this.id=msg.getInt32();
			this.teammatesNum=msg.readByte();
			this.queenScore=msg.getInt16();
			return true;
		}

		__proto.serverWriteBody=function(msg){
			msg.writeInt32(this.id);
			msg.writeByte(this.teammatesNum);
			msg.writeInt16(this.queenScore);
			return true;
		}

		__proto.clear=function(){
			this.id=0;
			this.teammatesNum=0;
			this.queenScore=0;
			return this.constructor.name;
		}

		return QueenTeamRankData;
	})()


	/**
	*...
	*@author Chen Gong
	*/
	//class msgSvr.queenGame.QueenUserEndData
	var QueenUserEndData=(function(){
		function QueenUserEndData(){
			this.id=0;
			this.avatar=0;
			this.gender=0;
			this.rank=0;
			this.queenScore=NaN;
			this.medals=null;
			this.headPortrait=null;
		}

		__class(QueenUserEndData,'msgSvr.queenGame.QueenUserEndData');
		var __proto=QueenUserEndData.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			this.id=msg.getInt32();
			this.queenScore=msg.getInt16();
			this.avatar=msg.getInt16();
			this.gender=msg.getInt16();
			this.rank=msg.getInt16();
			this.queenScore=msg.getInt16();
			this.medals=[];
			var medalLength=msg.readByte();
			for (var j=0;j < medalLength;j++){
				this.medals.push(msg.readByte());
			};
			var userheadLen=msg.getInt16();
			this.headPortrait=msg.readUTFBytes(userheadLen);
			return true;
		}

		__proto.serverWriteBody=function(msg){
			msg.writeInt32(this.id);
			msg.writeInt16(this.queenScore);
			msg.writeInt16(this.avatar);
			msg.writeInt16(this.gender);
			msg.writeInt16(this.rank);
			msg.writeInt16(this.queenScore);
			msg.writeByte(this.medals.length);
			for (var j=0;j < this.medals.length;j++){
				msg.writeByte(this.medals[j]);
			}
			msg.writeUTFBytes(this.headPortrait);
			return true;
		}

		__proto.clear=function(){
			this.id=0;
			this.queenScore=0;
			return this.constructor.name;
		}

		return QueenUserEndData;
	})()


	/**
	*...
	*@author Chen Gong
	*/
	//class msgSvr.queenGame.QueenUserRankData
	var QueenUserRankData=(function(){
		function QueenUserRankData(){
			this.id=0;
			this.score=NaN;
		}

		__class(QueenUserRankData,'msgSvr.queenGame.QueenUserRankData');
		var __proto=QueenUserRankData.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			this.id=msg.getInt32();
			this.score=msg.getInt16();
			return true;
		}

		__proto.serverWriteBody=function(msg){
			msg.writeInt32(this.id);
			msg.writeInt16(this.score);
			return true;
		}

		__proto.clear=function(){
			this.id=0;
			this.score=0;
			return this.constructor.name;
		}

		return QueenUserRankData;
	})()


	/**
	*...
	*@author ...
	*/
	//class notifyMsgs.achieveMsgs.AchieveData
	var AchieveData=(function(){
		function AchieveData(){
			this.id=0;
			this.status=0;
			this.curCount=0;
		}

		__class(AchieveData,'notifyMsgs.achieveMsgs.AchieveData');
		var __proto=AchieveData.prototype;
		__proto.clear=function(){
			this.id=0;
			this.status=0;
			this.curCount=0;
			return this.constructor.name;
		}

		AchieveData.initDataPool=function(){
			for (var ti=0;ti < AchieveData._maxNum;ti++){
				AchieveData._dataPool[ti]=new AchieveData();
			}
		}

		AchieveData.getData=function(){
			return AchieveData._dataPool.length>0? AchieveData._dataPool.pop():new AchieveData();
		}

		AchieveData.release=function(_data){
			if (AchieveData._dataPool.indexOf(_data)!=-1)return;
			_data.clear();
			AchieveData._dataPool.push(_data);
		}

		AchieveData._maxNum=1024 *5;
		AchieveData._dataPool=[];
		return AchieveData;
	})()


	/**
	*...
	*@author Chen Gong
	*/
	//class notifyMsgs.NotifyObject
	var NotifyObject=(function(){
		function NotifyObject(){
			this.method=0;
			this.userId=0;
			this.linkId=NaN;
			this.spId=NaN;
			this.uip=null;
		}

		__class(NotifyObject,'notifyMsgs.NotifyObject');
		var __proto=NotifyObject.prototype;
		__proto.clear=function(){
			return this.constructor.name;
		}

		NotifyObject.CLIENT_REQUEST_BROADCAST=3001;
		NotifyObject.CLIENT_REQUEST_NEWBIEBONUS=3002;
		NotifyObject.CLIENT_REQUEST_LOGINUPDATE=3003;
		NotifyObject.CLIENT_REQUEST_TASKCLICKED=3004;
		NotifyObject.CLIENT_REQUEST_EXITCLICK=3005;
		NotifyObject.CLIENT_REQUEST_TASKFINISH=3008;
		NotifyObject.CLIENT_REQUEST_UNLIMITED=3006;
		NotifyObject.CLIENT_REQUEST_ENTERUNLIMITED=3009;
		NotifyObject.CLIENT_REQUEST_POST=3010;
		NotifyObject.CLIENT_REQUEST_ACTIVITY=3011;
		NotifyObject.CLIENT_REQUEST_ACTIVITYAWARD=3012;
		NotifyObject.CLIENT_REQUEST_ACTIVITYRECIEVEAWARD=3013;
		NotifyObject.CLIENT_REQUEST_ITEMEXPIRED=3014;
		NotifyObject.CLIENT_REQUEST_MAIN_REQUEST=3015;
		NotifyObject.CLIENT_REQUEST_MAIN_REQUEST_AWARDED=3016;
		NotifyObject.CLIENT_REQUEST_ACHIEVEMENTS=3017;
		NotifyObject.CLIENT_REQUEST_USETITLE=3018;
		NotifyObject.CLIENT_REQUEST_GETACHIEVEAWARD=3019;
		NotifyObject.CLIENT_REQUEST_SEASON_AWARD=3020;
		NotifyObject.CLIENT_ACCEPT_SEASON_AWARD=3021;
		NotifyObject.CLIENT_REQUEST_BOXDATA=3022;
		NotifyObject.CLIENT_REQUEST_UNLOCKBOX=3023;
		NotifyObject.CLIENT_REQUEST_OPENBOX=3024;
		NotifyObject.CLIENT_REQUEST_FRAGMENT_EXCHANGE=3025;
		NotifyObject.CLIENT_REQUEST_UNARM=3026;
		NotifyObject.CLIENT_REQUEST_BUYBOX=3027;
		NotifyObject.CLIENT_REQUEST_MAINBOXTIME=3028;
		NotifyObject.CLIENT_REQUEST_NEWUSER_ENTER=3029;
		NotifyObject.CLIENT_REQUEST_SELECTSKILL=3030;
		NotifyObject.CLIENT_REQUEST_SKILLDATA=3031;
		NotifyObject.CLIENT_REQUEST_UNLOCKSKILL=3032;
		NotifyObject.CLIENT_REQUEST_SKILLSP=3033;
		NotifyObject.CLIENT_REQUEST_NEWBIEEND=3034;
		NotifyObject.CLIENT_REQUEST_REDDOT=3035;
		NotifyObject.CLIENT_REQUEST_SIGN=3036;
		NotifyObject.CLIENT_REQUEST_SHARE=3037;
		NotifyObject.CLIENT_REQUEST_SHAREDATA=3038;
		NotifyObject.CLIENT_REQUEST_RECEIVESHARE=3039;
		NotifyObject.CLIENT_REQUEST_SIGNDATA=3040;
		NotifyObject.CLIENT_REQUEST_SURVEYAWARD=3041;
		NotifyObject.CLIENT_REQUEST_SURVEY=3042;
		NotifyObject.CLIENT_REQUEST_LEISURE=3043;
		NotifyObject.CLIENT_REQUEST_CHECK_ACTIVITY_MSG=3044;
		NotifyObject.CLIENT_REQUEST_GET_EMAILS=3045;
		NotifyObject.CLIENT_REQUEST_CHECK_NEW_EMAIL=3046;
		NotifyObject.CLIENT_REQUEST_READ_EMAILS=3047;
		NotifyObject.CLIENT_REQUEST_DEL_EMAILS=3048;
		NotifyObject.CLIENT_REQUEST_GET_EMAILITEMS=3049;
		NotifyObject.CLIENT_REQUEST_UPDATE_CLIENT_SIDE_TASK=3050;
		NotifyObject.CLIENT_REQUEST_SHARE_BATTLE_INFO=3051;
		NotifyObject.CLIENT_REQUEST_CLICK_SHARE_AWARD=3052;
		NotifyObject.CLIENT_REQUEST_CLICK_NEWUSER_CLICKSHOP=3053;
		NotifyObject.CLIENT_REQUEST_ADD_GAME_TO_DESKTOP=3054;
		NotifyObject.CLIENT_REQUEST_ACTIVATIONCODE=3055;
		NotifyObject.REQUEST_TASK_DATA_WHEN_OPEN=3056;
		NotifyObject.REQUEST_LIKEUSER=3057;
		NotifyObject.CLIENT_REQUEST_LUNPANID=3058;
		NotifyObject.CLIENT_REQUEST_YAOSHAIZI=3059;
		NotifyObject.CLIENT_REQUEST_LUNPANNUMBYGOLD=3060;
		NotifyObject.CLIENT_REQUEST_USEATTPOINT=3061;
		NotifyObject.CLIENT_REQUEST_USERESET=3062;
		NotifyObject.REQUEST_CHGNKNAME=3063;
		NotifyObject.REQUEST_UPGRADEHERO=3064;
		NotifyObject.REQUEST_TLOG_SNS=3065;
		NotifyObject.REQUEST_TLOG_GUIDE=3066;
		NotifyObject.CLIENT_REQUEST_LUNPAN_SHARE_EVENT_REWARD=3067;
		NotifyObject.CLIENT_REQUEST_SET_USING_ACHIEVE=3068;
		NotifyObject.CLIENT_REQUEST_LEVEL_UP_ACHIEVE=3069;
		NotifyObject.CLIENT_REQUEST_SET_SIGNATURE=3070;
		NotifyObject.CLIENT_REQUEST_LUNPAN_ZERONUMSHARE=3071;
		NotifyObject.CLICK_GET_SHARE_AWARD=3072;
		NotifyObject.CLIENT_REQUEST_USER_DATA=3073;
		NotifyObject.CLIENT_REQUEST_REPAIR_USER_DATA=3074;
		NotifyObject.CLIENT_REQUEST_CUSER_DATA=3075;
		NotifyObject.CLIENT_REQUEST_BUILD_HOUSE=3076;
		NotifyObject.CLIENT_REQUEST_CHANGE_WORKER=3077;
		NotifyObject.CLIENT_REQUEST_OPEN_ST_BOX=3078;
		NotifyObject.CLIENT_REQUEST_SNOW_COUNCIL_EVENT_ID=3079;
		NotifyObject.CLIENT_REQUEST_USE_RULERS_RAGE=3080;
		NotifyObject.CLIENT_REQUEST_INCIDENTS=3081;
		NotifyObject.CLIENT_REQUEST_FIX_BUILDING=3082;
		NotifyObject.CLIENT_REQUEST_PICK_TARGET_ID=3083;
		NotifyObject.CLIENT_REQUEST_FIX_OTHER_BUILDING=3084;
		NotifyObject.CLIENT_REQUEST_INVITE_USER_TO_WALL=3085;
		NotifyObject.CLIENT_REQUEST_HANDLE_RECEIVED_INVITE=3086;
		NotifyObject.CLIENT_REQUEST_WALL_AWARD_CHECK=3087;
		NotifyObject.CLIENT_REQUEST_UPDATE_WALL_SPOTS=3088;
		NotifyObject.CLIENT_REQUEST_CHECK_EVENT=3089;
		NotifyObject.CLIENT_REQUEST_CLEAR_WHO_FIXES_MY_BUILDINGS=3090;
		NotifyObject.CLIENT_REQUEST_HANDLE_RETURNED_PLAYER=3091;
		NotifyObject.CLIENT_REQUEST_HANDLE_GET_NEWBIE_SIGN_AWARD=3092;
		NotifyObject.CLIENT_REQUEST_CHOOSE_TOMORROW_AWARD=3093;
		NotifyObject.CLIENT_REQUEST_REFRESH_AWARD=3094;
		NotifyObject.CLIENT_REQUEST_JACKPOT=3095;
		NotifyObject.CLIENT_REQUEST_LUCKY_POINT_AWARD=3096;
		NotifyObject.CLIENT_REQUEST_CHECK_LUCKY_POINT=3097;
		NotifyObject.CLIENT_REQUEST_CHECK_ONLINE_TIME=3098;
		NotifyObject.REQUEST_MATCH=3099;
		NotifyObject.REQUEST_SHIT=3100;
		NotifyObject.CLIENT_REQUEST_ACT_EXCHANGE_ITEM=3101;
		NotifyObject.CLIENT_REQUEST_DAILY_SHARE_AWARD=3102;
		NotifyObject.CLIENT_REQUEST_MIDAS_MONEY=3103;
		NotifyObject.CLIENT_REQUEST_SHARE_UPDATE_BUILDING=3104;
		NotifyObject.CLIENT_REQUEST_INVITE_NEW_USER=3105;
		NotifyObject.CLIENT_REQUEST_SUC_INVITE_AWARD=3106;
		NotifyObject.CLIENT_REQUEST_SHOW_ST_BOX=3107;
		NotifyObject.CLIENT_REQUEST_PLUNDER=3108;
		NotifyObject.CLIENT_REQUEST_OPEN_LIBAO=3109;
		NotifyObject.CLIENT_REQUEST_GET_TRAINING_AWARD=3110;
		NotifyObject.CLIENT_REQUEST_CANCEL_LADDERMATCH=3111;
		NotifyObject.CLIENT_REQUEST_SAVE_HISTORY=3112;
		NotifyObject.CLIENT_REQUEST_FB_ADS=3113;
		NotifyObject.SERVER_RESPONSE_UNLIMITED=3007;
		NotifyObject.SERVER_RESPONSE_SINGLETASK=30001;
		NotifyObject.SERVER_RESPONSE_ALLTASK=30002;
		NotifyObject.SERVER_RESPONSE_POST=30003;
		NotifyObject.SERVER_RESPONSE_ACTIVITY=30004;
		NotifyObject.SERVER_RESPONSE_ACTIVITYAWARD=30005;
		NotifyObject.SERVER_RESPONSE_ACTIVITYRECIEVEAWARD=30006;
		NotifyObject.SERVER_RESPONSE_MAIN_REQUESTS=30007;
		NotifyObject.SERVER_RESPONSE_ACHIEVEMENTS=30008;
		NotifyObject.SERVER_SEND_SYSTEM_MSG_AWARD_LIST=30009;
		NotifyObject.SERVER_RESPONSE_USETITLERESULT=30010;
		NotifyObject.SERVER_RESPONSE_PARTACHIEVEMENTS=30011;
		NotifyObject.SERVER_RESPONSE_AWARD_RESULT=30012;
		NotifyObject.SERVER_RESPONSE_BOXDATA=30013;
		NotifyObject.SERVER_RESPONSE_UNLOCKBOX=30014;
		NotifyObject.SERVER_RESPONSE_OPENBOX=30015;
		NotifyObject.SERVER_RESPONSE_USE_FRAGMENT_RESULT=30016;
		NotifyObject.SERVER_RESPONSE_PARTBOXDATA=30017;
		NotifyObject.SERVER_NOTIFY_NEW_USER_ENTER=30018;
		NotifyObject.SERVER_RESPONSE_MAINBOXTIME=30019;
		NotifyObject.SERVER_RESPONSE_SELECTSKILL=30020;
		NotifyObject.SERVER_RESPONSE_SKILLDATA=30021;
		NotifyObject.SERVER_RESPONSE_UNLOCKSKILL=30022;
		NotifyObject.SERVER_RESPONSE_NEWBIEBOX=30023;
		NotifyObject.SERVER_RESPONSE_SKILLSP=30024;
		NotifyObject.SERVER_RESPONSE_GUIDESTEP=30025;
		NotifyObject.SERVER_RESPONSE_REDDOT=30026;
		NotifyObject.SERVER_RESPONSE_BASICDATA=30027;
		NotifyObject.SERVER_RESPONSE_UNARM_RESULT=30028;
		NotifyObject.SERVER_RESPONSE_SIGNDATA=30029;
		NotifyObject.SERVER_RESPONSE_SIGNRESULT=30030;
		NotifyObject.SERVER_RESPONSE_SHAREDATA=30031;
		NotifyObject.SERVER_RESPONSE_RECEIVESHARE=30032;
		NotifyObject.SERVER_RESPONSE_SURVEY=30033;
		NotifyObject.SERVER_RESPONSE_SURVEYAWARD=30034;
		NotifyObject.SERVER_RESPONSE_LEISURE=30035;
		NotifyObject.SERVER_RESPONSE_ACTIVITY_TASK_AWARD=30036;
		NotifyObject.SERVER_RESPONSE_ACTIVITY_IS_CHECKED=30037;
		NotifyObject.SERVER_RESPONSE_SEND_EMAIL=30038;
		NotifyObject.SERVER_RESPONSE_HAVE_UNREAD_EMAIL=30039;
		NotifyObject.SERVER_RESPONSE_MARKED_IS_READ=30040;
		NotifyObject.SERVER_RESPONSE_DELETE_EMAIL=30041;
		NotifyObject.SERVER_RESPONSE_SEND_EMAIL_AWARD=30042;
		NotifyObject.SERVER_RESPONSE_ACTIVITY_TASK_FINISH=30043;
		NotifyObject.SERVER_RESPONSE_BOOST_RESULT=30044;
		NotifyObject.SERVER_RESPONSE_SHARE_AWARD_ITEM=30045;
		NotifyObject.SERVER_RESPONSE_SHARE_AWARD_ITEM_RESULT=30046;
		NotifyObject.SERVER_RESPONSE_SAVE_TO_GAME_AWARD_ITEM_RESULT=30047;
		NotifyObject.SERVER_RESPONSE_ACTIVATIONCODE=30048;
		NotifyObject.SERVER_RESPONSE_LIKEUSER=30049;
		NotifyObject.SERVER_RESPONSE_LUNPANID=30050;
		NotifyObject.SERVER_RESPONSE_YAOSHAIZI=30051;
		NotifyObject.SERVER_RESPONSE_LUNPANNUMBYGOLD=30052;
		NotifyObject.SERVER_RESPONSE_ATTP=30053;
		NotifyObject.SERVER_RESPONSE_UPGRADEHERO=30054;
		NotifyObject.SERVER_RESPONSE_LUNPAN_SHARE_EVENT_REWARD=30055;
		NotifyObject.SERVER_RESPONSE_NEWACHIEVES=30056;
		NotifyObject.SERVER_RESPONSE_ACHIEVE_USING_RESULT=30057;
		NotifyObject.SERVER_RESPONSE_ACHIEVE_UP_RESULT=30058;
		NotifyObject.SERVER_RESPONSE_SIGNATURE_RESULT=30059;
		NotifyObject.SERVER_RESPONSE_LUNPAN_ZERONUMSHARE=30060;
		NotifyObject.SERVER_RESPONSE_PASSIVE_SHARE_AWARD=30061;
		NotifyObject.SERVER_RESPONSE_USER_DATA=30062;
		NotifyObject.SERVER_RESPONSE_CUSER_DATA=30063;
		NotifyObject.SERVER_RESPONSE_BUILD_HOUSE=30064;
		NotifyObject.SERVER_RESPONSE_CHANGE_WORKER=30065;
		NotifyObject.SERVER_RESPONSE_OPEN_ST_BOX=30066;
		NotifyObject.SERVER_RESPONSE_SNOW_COUNCIL_EVENT_ID=30067;
		NotifyObject.SERVER_RESPONSE_USE_RULERS_RAGE=30068;
		NotifyObject.SERVER_RESPONSE_INCIDENTS=30069;
		NotifyObject.SERVER_RESPONSE_FIX_BUILDING=30070;
		NotifyObject.SERVER_RESPONSE_ATTACK_BUILDING=30071;
		NotifyObject.SERVER_RESPONSE_PICK_TARGET_ID=30072;
		NotifyObject.SERVER_RESPONSE_FIX_OTHER_BUILDING=30073;
		NotifyObject.SERVER_RESPONSE_INVITE_USER_TO_WALL=30074;
		NotifyObject.SERVER_RESPONSE_HANDLE_RECEIVED_INVITE=30075;
		NotifyObject.SERVER_RESPONSE_WALL_INFO_TO_OTHERS=30076;
		NotifyObject.SERVER_RESPONSE_INVITE_MSG=30077;
		NotifyObject.SERVER_RESPONSE_WALL_AWARD_RESULT=30078;
		NotifyObject.SERVER_RESPONSE_RETURNED_PLAYER=30079;
		NotifyObject.SERVER_RESPONSE_REFRESH_AWARD=30080;
		NotifyObject.SERVER_RESPONSE_GET_NEWBIE_AWARD=30081;
		NotifyObject.SERVER_RESPONSE_CHOOSE_NEWBIE_AWARD=30082;
		NotifyObject.SERVER_RESPONSE_JACKPOT=30083;
		NotifyObject.SERVER_RESPONSE_JACKPOT_BOX_AWARD=30084;
		NotifyObject.SERVER_RESPONSE_ITEM_EXPIRE_CHECK=30085;
		NotifyObject.SERVER_RESPONSE_ITEM_EXCHANGE_ACT=30086;
		NotifyObject.SERVER_RESPONSE_DAILY_SHARE_AWARD=30087;
		NotifyObject.SERVER_RESPONSE_MIDAS_MONEY=30088;
		NotifyObject.SERVER_RESPONSE_SHARE_UPDATE_BUILDING=30089;
		NotifyObject.SERVER_RESPONSE_INVITE_NEW_USER=30090;
		NotifyObject.SERVER_RESPONSE_SUC_INVITE_AWARD=30091;
		NotifyObject.SERVER_RESPONSE_SHOW_ST_BOX=30092;
		NotifyObject.SERVER_RESPONSE_PLUNDER=30093;
		NotifyObject.SERVER_RESPONSE_OPEN_LIBAO=30094;
		NotifyObject.SERVER_RESPONSE_GET_TRAINING_AWARD=30095;
		NotifyObject.SERVER_RESPONSE_LADDER_PROCESS=30096;
		NotifyObject.SERVER_RESPONSE_LADDER_RETEAM=30097;
		NotifyObject.SERVER_RESPONSE_FB_ADS=30098;
		return NotifyObject;
	})()


	/**
	*lifei
	*@author ...
	*/
	//class notifyMsgs.achieveNewMsgs.AchieveItem
	var AchieveItem=(function(){
		function AchieveItem(){
			this.id=0;
			this.title=null;
			this.msg=null;
			this.model=0;
			this.count=null;
			this.expNum=null;
			this.icon=null;
			this.curCount=0;
			this.curLevel=0;
			this.getTimeArray=null;
		}

		__class(AchieveItem,'notifyMsgs.achieveNewMsgs.AchieveItem');
		return AchieveItem;
	})()


	/**
	*lifei
	*@author ...
	*/
	//class notifyMsgs.achieveNewMsgs.PlayerUIData
	var PlayerUIData=(function(){
		function PlayerUIData(){
			this.historyMaxStar=0;
			this.usingAchieve=[];
			this.selfMsg=null;
			this.lvData=null;
			this.newAchieve=0;
		}

		__class(PlayerUIData,'notifyMsgs.achieveNewMsgs.PlayerUIData');
		return PlayerUIData;
	})()


	/**
	*...
	*@author Chen Gong
	*/
	//class notifyMsgs.jackpot.data.JackpotData
	var JackpotData=(function(){
		function JackpotData(){
			this.luckyPoint=0;
			this.buyTimes=0;
			this.luckyPointAwardStatus=null;
			this.lastPlayTime=0;
			this.rareItemGot=null;
			this.uniqueItemGot=null;
			this.clear();
		}

		__class(JackpotData,'notifyMsgs.jackpot.data.JackpotData');
		var __proto=JackpotData.prototype;
		__proto.clear=function(){
			this.luckyPointAwardStatus=[-1,-1,-1,-1,-1];
			this.luckyPoint=0;
			this.lastPlayTime=0;
			this.buyTimes=0;
			this.rareItemGot=[];
			this.uniqueItemGot=[];
			return this.constructor.name;
		}

		return JackpotData;
	})()


	/**
	*...
	*@author luohuantao
	*/
	//class notifyMsgs.lunpan.voLunpanFjson
	var voLunpanFjson=(function(){
		function voLunpanFjson(){
			this.lastLoginDate="";
			this.lastTime=0;
			this.isEnd=false;
			this.curLunpanIDIndex=0;
			this.curLunpanID=0;
			this.curLunpanRiqi="";
			this.isFirstPlay=0;
			this.curBeiShu=1;
			this.curShareEventID=0;
			this.toC=null;
		}

		__class(voLunpanFjson,'notifyMsgs.lunpan.voLunpanFjson');
		voLunpanFjson.key="lunpan";
		return voLunpanFjson;
	})()


	/**
	*...
	*@author luohuantao
	*/
	//class notifyMsgs.lunpan.voToClientData
	var voToClientData=(function(){
		function voToClientData(){
			this.addOneTime=0;
			this.totalNum=0;
			this.totalNumByShare=0;
			this.lunpanNum=0;
			this.curIndex=0;
		}

		__class(voToClientData,'notifyMsgs.lunpan.voToClientData');
		voToClientData.getCurBuyPrice=function(initial_price,added_price,n,m,x1,x2){
			var newP=voToClientData.getTotalPrice(initial_price,added_price,n,m,(x1+x2));
			var oldP=voToClientData.getTotalPrice(initial_price,added_price,n,m,x1);
			return newP-oldP;
		}

		voToClientData.getTotalPrice=function(initial_price,added_price,n,m,x){
			var price=0;
			if (x <=n)price=initial_price *x;
			else if (x > n && x <=m)price=initial_price *x+(x-n)*(x-n+1)*added_price / 2;
			else if (x > m)price=initial_price *x+(m-n)*(m-n+1)*added_price / 2+(m-n)*added_price *(x-m);
			return price
		}

		return voToClientData;
	})()


	/**
	**
	*...
	*@author dkt
	*/
	//class notifyMsgs.midasMsgs.MidasData
	var MidasData=(function(){
		function MidasData(){
			this.save_amt=NaN;
			this.money=NaN;
			this.clear();
		}

		__class(MidasData,'notifyMsgs.midasMsgs.MidasData');
		var __proto=MidasData.prototype;
		__proto.clear=function(){
			this.save_amt=0;
			this.money=0;
			return this.constructor.name;
		}

		return MidasData;
	})()


	/**
	*下一个可以领取永久英雄的数据
	*...
	*@author ...
	*/
	//class notifyMsgs.SignMsgs.NextHero
	var NextHero=(function(){
		function NextHero(){
			this.nextItemId=0;
			this.needDay=0;
			this.todayGetItemId=0;
			this.clear();
		}

		__class(NextHero,'notifyMsgs.SignMsgs.NextHero');
		var __proto=NextHero.prototype;
		__proto.clear=function(){
			this.nextItemId=-1;
			this.needDay=0;
			this.todayGetItemId=-1;
			return this.constructor.name;
		}

		return NextHero;
	})()


	/**
	*玩家签到数据
	*...
	*@author ...
	*/
	//class notifyMsgs.SignMsgs.SignData
	var SignData=(function(){
		function SignData(){
			this.signId=0;
			this.curDay=0;
			this.noSignDays=[];
			this.nextHero=null;
		}

		__class(SignData,'notifyMsgs.SignMsgs.SignData');
		var __proto=SignData.prototype;
		__proto.clear=function(){
			this.signId=0;
			this.curDay=0;
			this.noSignDays.length=0;
			this.nextHero && DataPool.recover(this.nextHero);
			return this.constructor.name;
		}

		return SignData;
	})()


	/**
	*...
	*@author ...
	*/
	//class notifyMsgs.skillMsgs.skillDbData
	var skillDbData=(function(){
		function skillDbData(){
			this.unlockedSkills=[];
			this.activeSkills=[];
			this.hasSP=0;
		}

		__class(skillDbData,'notifyMsgs.skillMsgs.skillDbData');
		var __proto=skillDbData.prototype;
		__proto.clear=function(){
			this.unlockedSkills.length=0;
			this.activeSkills.length=0;
			this.hasSP=0;
			return this.constructor.name;
		}

		skillDbData.initDataPool=function(){
			for (var ti=0;ti < skillDbData._maxNum;ti++){
				skillDbData._dataPool[ti]=new skillDbData();
			}
		}

		skillDbData.getData=function(){
			return skillDbData._dataPool.length>0? skillDbData._dataPool.pop():new skillDbData();
		}

		skillDbData.release=function(_data){
			if (skillDbData._dataPool.indexOf(_data)!=-1)return;
			_data.clear();
			skillDbData._dataPool.push(_data);
		}

		skillDbData._maxNum=1024 *5;
		skillDbData._dataPool=[];
		return skillDbData;
	})()


	/**
	*...
	*@author Chen Gong
	*/
	//class notifyMsgs.snowHouseMsgs.Incident
	var Incident=(function(){
		function Incident(){
			this.id=0;
			this.startTime=0;
			this.hasChecked=0;
		}

		__class(Incident,'notifyMsgs.snowHouseMsgs.Incident');
		return Incident;
	})()


	/**
	*...
	*@author Chen Gong
	*/
	//class notifyMsgs.snowHouseMsgs.WallInviteData
	var WallInviteData=(function(){
		function WallInviteData(){
			this.toWallUserid=0;
			this.toWallStartTime=0;
			this.useridsWhoInviteMe=[];
		}

		__class(WallInviteData,'notifyMsgs.snowHouseMsgs.WallInviteData');
		return WallInviteData;
	})()


	/**
	*...
	*@author ...
	*/
	//class notifyMsgs.treasureChestMsgs.boxModel
	var boxModel=(function(){
		function boxModel(){
			this.id=0;
			this.index=0;
			this.timeLeft=0;
			this.status=0;
		}

		__class(boxModel,'notifyMsgs.treasureChestMsgs.boxModel');
		var __proto=boxModel.prototype;
		__proto.clear=function(){
			this.id=0;
			this.index=0;
			this.timeLeft=0;
			this.status=0;
			return this.constructor.name;
		}

		boxModel.initDataPool=function(){
			for (var ti=0;ti < boxModel._maxNum;ti++){
				boxModel._dataPool[ti]=new boxModel();
			}
		}

		boxModel.getData=function(){
			return boxModel._dataPool.length>0? boxModel._dataPool.pop():new boxModel();
		}

		boxModel.release=function(_data){
			if (boxModel._dataPool.indexOf(_data)!=-1)return;
			_data.clear();
			boxModel._dataPool.push(_data);
		}

		boxModel._maxNum=1024 *5;
		boxModel._dataPool=[];
		return boxModel;
	})()


	/**
	*获得奖励中物品的数据结构，内含对象池
	*@author ...
	*/
	//class notifyMsgs.treasureChestMsgs.itemModel
	var itemModel=(function(){
		function itemModel(){
			this.itemId=0;
			this.itemNum=0;
		}

		__class(itemModel,'notifyMsgs.treasureChestMsgs.itemModel');
		var __proto=itemModel.prototype;
		__proto.clear=function(){
			this.itemId=0;
			this.itemNum=0;
			return this.constructor.name;
		}

		itemModel.initDataPool=function(){
			for (var ti=0;ti < itemModel._maxNum;ti++){
				itemModel._dataPool[ti]=new itemModel();
			}
		}

		itemModel.getData=function(){
			return itemModel._dataPool.length>0? itemModel._dataPool.pop():new itemModel();
		}

		itemModel.release=function(_data){
			if (itemModel._dataPool.indexOf(_data)!=-1)return;
			_data.clear();
			itemModel._dataPool.push(_data);
		}

		itemModel._maxNum=1024 *5;
		itemModel._dataPool=[];
		return itemModel;
	})()


	/**
	*...
	*@author dongketao
	*/
	//class PropertyData
	var PropertyData=(function(){
		function PropertyData(){
			this.propertyType=0;
			this.propertyValue=NaN;
		}

		__class(PropertyData,'PropertyData');
		var __proto=PropertyData.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			this.propertyType=msg.getUint16();
			this.propertyValue=msg.getFloat32();
			return true;
		}

		__proto.serverWriteBody=function(msg){
			msg.writeUint16(this.propertyType);
			msg.writeFloat32(this.propertyValue);
			return true;
		}

		__proto.clear=function(){
			this.propertyType=0;
			this.propertyValue=0;
			return this.constructor.name;
		}

		PropertyData.initDataPool=function(){
			for (var ti=0;ti < PropertyData._maxNum;ti++){
				PropertyData._dataPool[ti]=new PropertyData();
			}
		}

		PropertyData.getData=function(){
			return PropertyData._dataPool.length>0? PropertyData._dataPool.pop():new PropertyData();
		}

		PropertyData.release=function(_data){
			if (!_data)return;
			if (PropertyData._dataPool.indexOf(_data)!=-1)return;
			_data.clear();
			PropertyData._dataPool.push(_data);
		}

		PropertyData._maxNum=1024 *5;
		PropertyData._dataPool=[];
		return PropertyData;
	})()


	/**
	*...
	*@author Chen Gong
	*/
	//class rankFlagData
	var rankFlagData=(function(){
		function rankFlagData(){
			this.id=0;
			this.teammatesNum=NaN;
			this.score=NaN;
		}

		__class(rankFlagData,'rankFlagData');
		return rankFlagData;
	})()


	/**
	*...
	*@author Chen Gong
	*/
	//class rankItemData
	var rankItemData=(function(){
		function rankItemData(){
			this.name=null;
			this.id=0;
			this.level=0;
			this.avatar=0;
			this.gender=0;
			this.score=NaN;
			this.maxScore=NaN;
			this.coin=NaN;
			this.kills=NaN;
			this.deaths=NaN;
			this.rank=NaN;
			this.round=NaN;
			this.teammatesNum=NaN;
			this.firstUserUID=0;
			this.medals=null;
			this.headPortrait=null;
			this.teamScore=0;
			this.teamId=0;
			this.hidePoints=0;
			this.online=1;
			this.passiveSkills=[];
		}

		__class(rankItemData,'rankItemData');
		return rankItemData;
	})()


	/**
	*...
	*@author Chen Gong
	*/
	//class rankLolipopData
	var rankLolipopData=(function(){
		function rankLolipopData(){
			this.id=0;
			this.teammatesNum=NaN;
			this.score=NaN;
		}

		__class(rankLolipopData,'rankLolipopData');
		return rankLolipopData;
	})()


	/**
	*...
	*@author Chen Gong
	*/
	//class RequestData
	var RequestData=(function(){
		function RequestData(){
			this.currentRequestId=0;
			this.status=NaN;
			this.unitStatus=[];
			this.count=[];
		}

		__class(RequestData,'RequestData');
		var __proto=RequestData.prototype;
		__proto.clear=function(){
			this.currentRequestId=0;
			this.status=0;
			this.unitStatus=[];
			this.count=[];
			return this.constructor.name;
		}

		return RequestData;
	})()


	/**
	*<p> <code>Byte</code> 类提供用于优化读取、写入以及处理二进制数据的方法和属性。</p>
	*<p><b>注意：</b> <code>Byte</code> 类适用于需要在字节层访问数据的高级开发人员。</p>
	*/
	//class laya.utils.Byte
	var Byte=(function(){
		function Byte(data){
			this._xd_=true;
			this._allocated_=8;
			//this._d_=null;
			//this._u8d_=null;
			this._pos_=0;
			this._length=0;
			if (data){
				this._u8d_=new Uint8Array(data);
				this._d_=new DataView(this._u8d_.buffer);
				this._length=this._d_.byteLength;
				}else {
				this.___resizeBuffer(this._allocated_);
			}
		}

		__class(Byte,'laya.utils.Byte');
		var __proto=Byte.prototype;
		/**@private */
		__proto.___resizeBuffer=function(len){
			try {
				var newByteView=new Uint8Array(len);
				if (this._u8d_ !=null){
					if (this._u8d_.length <=len)newByteView.set(this._u8d_);
					else newByteView.set(this._u8d_.subarray(0,len));
				}
				this._u8d_=newByteView;
				this._d_=new DataView(newByteView.buffer);
				}catch (err){
				throw "___resizeBuffer err:"+len;
			}
		}

		/**
		*<p>常用于解析固定格式的字节流。</p>
		*<p>先从字节流的当前字节偏移位置处读取一个 <code>Uint16</code> 值，然后以此值为长度，读取此长度的字符串。</p>
		*@return 读取的字符串。
		*/
		__proto.getString=function(){
			return this.rUTF(this.getUint16());
		}

		/**
		*从字节流中 <code>start</code> 参数指定的位置开始，读取 <code>len</code> 参数指定的字节数的数据，用于创建一个 <code>Float32Array</code> 对象并返回此对象。
		*@param start 开始位置。
		*@param len 需要读取的字节长度。如果要读取的长度超过可读取范围，则只返回可读范围内的值。
		*@return 读取的 Float32Array 对象。
		*/
		__proto.getFloat32Array=function(start,len){
			var end=start+len;
			end=(end > this._length)? this._length :end;
			var v=new Float32Array(this._d_.buffer.slice(start,end));
			this._pos_=end;
			return v;
		}

		/**
		*从字节流中 <code>start</code> 参数指定的位置开始，读取 <code>len</code> 参数指定的字节数的数据，用于创建一个 <code>Uint8Array</code> 对象并返回此对象。
		*@param start 开始位置。
		*@param len 需要读取的字节长度。如果要读取的长度超过可读取范围，则只返回可读范围内的值。
		*@return 读取的 Uint8Array 对象。
		*/
		__proto.getUint8Array=function(start,len){
			var end=start+len;
			end=(end > this._length)? this._length :end;
			var v=new Uint8Array(this._d_.buffer.slice(start,end));
			this._pos_=end;
			return v;
		}

		/**
		*从字节流中 <code>start</code> 参数指定的位置开始，读取 <code>len</code> 参数指定的字节数的数据，用于创建一个 <code>Int16Array</code> 对象并返回此对象。
		*@param start 开始读取的字节偏移量位置。
		*@param len 需要读取的字节长度。如果要读取的长度超过可读取范围，则只返回可读范围内的值。
		*@return 读取的 Uint8Array 对象。
		*/
		__proto.getInt16Array=function(start,len){
			var end=start+len;
			end=(end > this._length)? this._length :end;
			var v=new Int16Array(this._d_.buffer.slice(start,end));
			this._pos_=end;
			return v;
		}

		/**
		*从字节流的当前字节偏移位置处读取一个 IEEE 754 单精度（32 位）浮点数。
		*@return 单精度（32 位）浮点数。
		*/
		__proto.getFloat32=function(){
			if (this._pos_+4 > this._length)throw "getFloat32 error - Out of bounds";
			var v=this._d_.getFloat32(this._pos_,this._xd_);
			this._pos_+=4;
			return v;
		}

		/**
		*从字节流的当前字节偏移量位置处读取一个 IEEE 754 双精度（64 位）浮点数。
		*@return 双精度（64 位）浮点数。
		*/
		__proto.getFloat64=function(){
			if (this._pos_+8 > this._length)throw "getFloat64 error - Out of bounds";
			var v=this._d_.getFloat64(this._pos_,this._xd_);
			this._pos_+=8;
			return v;
		}

		/**
		*在字节流的当前字节偏移量位置处写入一个 IEEE 754 单精度（32 位）浮点数。
		*@param value 单精度（32 位）浮点数。
		*/
		__proto.writeFloat32=function(value){
			this.ensureWrite(this._pos_+4);
			this._d_.setFloat32(this._pos_,value,this._xd_);
			this._pos_+=4;
		}

		/**
		*在字节流的当前字节偏移量位置处写入一个 IEEE 754 双精度（64 位）浮点数。
		*@param value 双精度（64 位）浮点数。
		*/
		__proto.writeFloat64=function(value){
			this.ensureWrite(this._pos_+8);
			this._d_.setFloat64(this._pos_,value,this._xd_);
			this._pos_+=8;
		}

		/**
		*从字节流的当前字节偏移量位置处读取一个 Int32 值。
		*@return Int32 值。
		*/
		__proto.getInt32=function(){
			if (this._pos_+4 > this._length)throw "getInt32 error - Out of bounds";
			var float=this._d_.getInt32(this._pos_,this._xd_);
			this._pos_+=4;
			return float;
		}

		/**
		*从字节流的当前字节偏移量位置处读取一个 Uint32 值。
		*@return Uint32 值。
		*/
		__proto.getUint32=function(){
			if (this._pos_+4 > this._length)throw "getUint32 error - Out of bounds";
			var v=this._d_.getUint32(this._pos_,this._xd_);
			this._pos_+=4;
			return v;
		}

		/**
		*在字节流的当前字节偏移量位置处写入指定的 Int32 值。
		*@param value 需要写入的 Int32 值。
		*/
		__proto.writeInt32=function(value){
			this.ensureWrite(this._pos_+4);
			this._d_.setInt32(this._pos_,value,this._xd_);
			this._pos_+=4;
		}

		/**
		*在字节流的当前字节偏移量位置处写入 Uint32 值。
		*@param value 需要写入的 Uint32 值。
		*/
		__proto.writeUint32=function(value){
			this.ensureWrite(this._pos_+4);
			this._d_.setUint32(this._pos_,value,this._xd_);
			this._pos_+=4;
		}

		/**
		*从字节流的当前字节偏移量位置处读取一个 Int16 值。
		*@return Int16 值。
		*/
		__proto.getInt16=function(){
			if (this._pos_+2 > this._length)throw "getInt16 error - Out of bounds";
			var us=this._d_.getInt16(this._pos_,this._xd_);
			this._pos_+=2;
			return us;
		}

		/**
		*从字节流的当前字节偏移量位置处读取一个 Uint16 值。
		*@return Uint16 值。
		*/
		__proto.getUint16=function(){
			if (this._pos_+2 > this._length)throw "getUint16 error - Out of bounds";
			var us=this._d_.getUint16(this._pos_,this._xd_);
			this._pos_+=2;
			return us;
		}

		/**
		*在字节流的当前字节偏移量位置处写入指定的 Uint16 值。
		*@param value 需要写入的Uint16 值。
		*/
		__proto.writeUint16=function(value){
			this.ensureWrite(this._pos_+2);
			this._d_.setUint16(this._pos_,value,this._xd_);
			this._pos_+=2;
		}

		/**
		*在字节流的当前字节偏移量位置处写入指定的 Int16 值。
		*@param value 需要写入的 Int16 值。
		*/
		__proto.writeInt16=function(value){
			this.ensureWrite(this._pos_+2);
			this._d_.setInt16(this._pos_,value,this._xd_);
			this._pos_+=2;
		}

		/**
		*从字节流的当前字节偏移量位置处读取一个 Uint8 值。
		*@return Uint8 值。
		*/
		__proto.getUint8=function(){
			if (this._pos_+1 > this._length)throw "getUint8 error - Out of bounds";
			return this._d_.getUint8(this._pos_++);
		}

		/**
		*在字节流的当前字节偏移量位置处写入指定的 Uint8 值。
		*@param value 需要写入的 Uint8 值。
		*/
		__proto.writeUint8=function(value){
			this.ensureWrite(this._pos_+1);
			this._d_.setUint8(this._pos_,value);
			this._pos_++;
		}

		/**
		*@private
		*从字节流的指定字节偏移量位置处读取一个 Uint8 值。
		*@param pos 字节读取位置。
		*@return Uint8 值。
		*/
		__proto._getUInt8=function(pos){
			return this._d_.getUint8(pos);
		}

		/**
		*@private
		*从字节流的指定字节偏移量位置处读取一个 Uint16 值。
		*@param pos 字节读取位置。
		*@return Uint16 值。
		*/
		__proto._getUint16=function(pos){
			return this._d_.getUint16(pos,this._xd_);
		}

		/**
		*@private
		*使用 getFloat32()读取6个值，用于创建并返回一个 Matrix 对象。
		*@return Matrix 对象。
		*/
		__proto._getMatrix=function(){
			var rst=new Matrix(this.getFloat32(),this.getFloat32(),this.getFloat32(),this.getFloat32(),this.getFloat32(),this.getFloat32());
			return rst;
		}

		/**
		*@private
		*读取指定长度的 UTF 型字符串。
		*@param len 需要读取的长度。
		*@return 读取的字符串。
		*/
		__proto.rUTF=function(len){
			var v="",max=this._pos_+len,c=0,c2=0,c3=0,f=String.fromCharCode;
			var u=this._u8d_,i=0;
			while (this._pos_ < max){
				c=u[this._pos_++];
				if (c < 0x80){
					if (c !=0){
						v+=f(c);
					}
					}else if (c < 0xE0){
					v+=f(((c & 0x3F)<< 6)| (u[this._pos_++] & 0x7F));
					}else if (c < 0xF0){
					c2=u[this._pos_++];
					v+=f(((c & 0x1F)<< 12)| ((c2 & 0x7F)<< 6)| (u[this._pos_++] & 0x7F));
					}else {
					c2=u[this._pos_++];
					c3=u[this._pos_++];
					v+=f(((c & 0x0F)<< 18)| ((c2 & 0x7F)<< 12)| ((c3 << 6)& 0x7F)| (u[this._pos_++] & 0x7F));
				}
				i++;
			}
			return v;
		}

		/**
		*@private
		*读取 <code>len</code> 参数指定的长度的字符串。
		*@param len 要读取的字符串的长度。
		*@return 指定长度的字符串。
		*/
		__proto.getCustomString=function(len){
			var v="",ulen=0,c=0,c2=0,f=String.fromCharCode;
			var u=this._u8d_,i=0;
			while (len > 0){
				c=u[this._pos_];
				if (c < 0x80){
					v+=f(c);
					this._pos_++;
					len--;
					}else {
					ulen=c-0x80;
					this._pos_++;
					len-=ulen;
					while (ulen > 0){
						c=u[this._pos_++];
						c2=u[this._pos_++];
						v+=f((c2 << 8)| c);
						ulen--;
					}
				}
			}
			return v;
		}

		/**
		*清除字节数组的内容，并将 length 和 pos 属性重置为 0。调用此方法将释放 Byte 实例占用的内存。
		*/
		__proto.clear=function(){
			this._pos_=0;
			this.length=0;
		}

		/**
		*@private
		*获取此对象的 ArrayBuffer 引用。
		*@return
		*/
		__proto.__getBuffer=function(){
			return this._d_.buffer;
		}

		/**
		*<p>将 UTF-8 字符串写入字节流。类似于 writeUTF()方法，但 writeUTFBytes()不使用 16 位长度的字为字符串添加前缀。</p>
		*<p>对应的读取方法为： getUTFBytes 。</p>
		*@param value 要写入的字符串。
		*/
		__proto.writeUTFBytes=function(value){
			value=value+"";
			for (var i=0,sz=value.length;i < sz;i++){
				var c=value.charCodeAt(i);
				if (c <=0x7F){
					this.writeByte(c);
					}else if (c <=0x7FF){
					this.ensureWrite(this._pos_+2);
					this._u8d_.set([0xC0 | (c >> 6),0x80 | (c & 0x3F)],this._pos_);
					this._pos_+=2;
					}else if (c <=0xFFFF){
					this.ensureWrite(this._pos_+3);
					this._u8d_.set([0xE0 | (c >> 12),0x80 | ((c >> 6)& 0x3F),0x80 | (c & 0x3F)],this._pos_);
					this._pos_+=3;
					}else {
					this.ensureWrite(this._pos_+4);
					this._u8d_.set([0xF0 | (c >> 18),0x80 | ((c >> 12)& 0x3F),0x80 | ((c >> 6)& 0x3F),0x80 | (c & 0x3F)],this._pos_);
					this._pos_+=4;
				}
			}
		}

		/**
		*<p>将 UTF-8 字符串写入字节流。先写入以字节表示的 UTF-8 字符串长度（作为 16 位整数），然后写入表示字符串字符的字节。</p>
		*<p>对应的读取方法为： getUTFString 。</p>
		*@param value 要写入的字符串值。
		*/
		__proto.writeUTFString=function(value){
			var tPos=this.pos;
			this.writeUint16(1);
			this.writeUTFBytes(value);
			var dPos=this.pos-tPos-2;
			this._d_.setUint16(tPos,dPos,this._xd_);
		}

		/**
		*@private
		*读取 UTF-8 字符串。
		*@return 读取的字符串。
		*/
		__proto.readUTFString=function(){
			return this.readUTFBytes(this.getUint16());
		}

		/**
		*<p>从字节流中读取一个 UTF-8 字符串。假定字符串的前缀是一个无符号的短整型（以此字节表示要读取的长度）。</p>
		*<p>对应的写入方法为： writeUTFString 。</p>
		*@return 读取的字符串。
		*/
		__proto.getUTFString=function(){
			return this.readUTFString();
		}

		/**
		*@private
		*读字符串，必须是 writeUTFBytes 方法写入的字符串。
		*@param len 要读的buffer长度，默认将读取缓冲区全部数据。
		*@return 读取的字符串。
		*/
		__proto.readUTFBytes=function(len){
			(len===void 0)&& (len=-1);
			if (len==0)return "";
			var lastBytes=this.bytesAvailable;
			if (len > lastBytes)throw "readUTFBytes error - Out of bounds";
			len=len > 0 ? len :lastBytes;
			return this.rUTF(len);
		}

		/**
		*<p>从字节流中读取一个由 length 参数指定的长度的 UTF-8 字节序列，并返回一个字符串。</p>
		*<p>一般读取的是由 writeUTFBytes 方法写入的字符串。</p>
		*@param len 要读的buffer长度，默认将读取缓冲区全部数据。
		*@return 读取的字符串。
		*/
		__proto.getUTFBytes=function(len){
			(len===void 0)&& (len=-1);
			return this.readUTFBytes(len);
		}

		/**
		*<p>在字节流中写入一个字节。</p>
		*<p>使用参数的低 8 位。忽略高 24 位。</p>
		*@param value
		*/
		__proto.writeByte=function(value){
			this.ensureWrite(this._pos_+1);
			this._d_.setInt8(this._pos_,value);
			this._pos_+=1;
		}

		/**
		*@private
		*从字节流中读取带符号的字节。
		*/
		__proto.readByte=function(){
			if (this._pos_+1 > this._length)throw "readByte error - Out of bounds";
			return this._d_.getInt8(this._pos_++);
		}

		/**
		*<p>从字节流中读取带符号的字节。</p>
		*<p>返回值的范围是从-128 到 127。</p>
		*@return 介于-128 和 127 之间的整数。
		*/
		__proto.getByte=function(){
			return this.readByte();
		}

		/**
		*<p>保证该字节流的可用长度不小于 <code>lengthToEnsure</code> 参数指定的值。</p>
		*@param lengthToEnsure 指定的长度。
		*/
		__proto.ensureWrite=function(lengthToEnsure){
			if (this._length < lengthToEnsure)this._length=lengthToEnsure;
			if (this._allocated_ < lengthToEnsure)this.length=lengthToEnsure;
		}

		/**
		*<p>将指定 arraybuffer 对象中的以 offset 为起始偏移量， length 为长度的字节序列写入字节流。</p>
		*<p>如果省略 length 参数，则使用默认长度 0，该方法将从 offset 开始写入整个缓冲区；如果还省略了 offset 参数，则写入整个缓冲区。</p>
		*<p>如果 offset 或 length 小于0，本函数将抛出异常。</p>
		*$NEXTBIG 由于没有判断length和arraybuffer的合法性，当开发者填写了错误的length值时，会导致写入多余的空白数据甚至内存溢出，为了避免影响开发者正在使用此方法的功能，下个重大版本会修复这些问题。
		*@param arraybuffer 需要写入的 Arraybuffer 对象。
		*@param offset Arraybuffer 对象的索引的偏移量（以字节为单位）
		*@param length 从 Arraybuffer 对象写入到 Byte 对象的长度（以字节为单位）
		*/
		__proto.writeArrayBuffer=function(arraybuffer,offset,length){
			(offset===void 0)&& (offset=0);
			(length===void 0)&& (length=0);
			if (offset < 0 || length < 0)throw "writeArrayBuffer error - Out of bounds";
			if (length==0)length=arraybuffer.byteLength-offset;
			this.ensureWrite(this._pos_+length);
			var uint8array=new Uint8Array(arraybuffer);
			this._u8d_.set(uint8array.subarray(offset,offset+length),this._pos_);
			this._pos_+=length;
		}

		/**
		*获取此对象的 ArrayBuffer 数据，数据只包含有效数据部分。
		*/
		__getset(0,__proto,'buffer',function(){
			var rstBuffer=this._d_.buffer;
			if (rstBuffer.byteLength==this.length)return rstBuffer;
			return rstBuffer.slice(0,this.length);
		});

		/**
		*<p> <code>Byte</code> 实例的字节序。取值为：<code>BIG_ENDIAN</code> 或 <code>BIG_ENDIAN</code> 。</p>
		*<p>主机字节序，是 CPU 存放数据的两种不同顺序，包括小端字节序和大端字节序。通过 <code>getSystemEndian</code> 可以获取当前系统的字节序。</p>
		*<p> <code>BIG_ENDIAN</code> ：大端字节序，地址低位存储值的高位，地址高位存储值的低位。有时也称之为网络字节序。<br/>
		*<code>LITTLE_ENDIAN</code> ：小端字节序，地址低位存储值的低位，地址高位存储值的高位。</p>
		*/
		__getset(0,__proto,'endian',function(){
			return this._xd_ ? "littleEndian" :"bigEndian";
			},function(endianStr){
			this._xd_=(endianStr=="littleEndian");
		});

		/**
		*<p> <code>Byte</code> 对象的长度（以字节为单位）。</p>
		*<p>如果将长度设置为大于当前长度的值，则用零填充字节数组的右侧；如果将长度设置为小于当前长度的值，将会截断该字节数组。</p>
		*<p>如果要设置的长度大于当前已分配的内存空间的字节长度，则重新分配内存空间，大小为以下两者较大者：要设置的长度、当前已分配的长度的2倍，并将原有数据拷贝到新的内存空间中；如果要设置的长度小于当前已分配的内存空间的字节长度，也会重新分配内存空间，大小为要设置的长度，并将原有数据从头截断为要设置的长度存入新的内存空间中。</p>
		*/
		__getset(0,__proto,'length',function(){
			return this._length;
			},function(value){
			if (this._allocated_ < value)
				this.___resizeBuffer(this._allocated_=Math.floor(Math.max(value,this._allocated_ *2)));
			else if (this._allocated_ > value)
			this.___resizeBuffer(this._allocated_=value);
			this._length=value;
		});

		/**
		*移动或返回 Byte 对象的读写指针的当前位置（以字节为单位）。下一次调用读取方法时将在此位置开始读取，或者下一次调用写入方法时将在此位置开始写入。
		*/
		__getset(0,__proto,'pos',function(){
			return this._pos_;
			},function(value){
			this._pos_=value;
		});

		/**
		*可从字节流的当前位置到末尾读取的数据的字节数。
		*/
		__getset(0,__proto,'bytesAvailable',function(){
			return this._length-this._pos_;
		});

		Byte.getSystemEndian=function(){
			if (!Byte._sysEndian){
				var buffer=new ArrayBuffer(2);
				new DataView(buffer).setInt16(0,256,true);
				Byte._sysEndian=(new Int16Array(buffer))[0]===256 ? "littleEndian" :"bigEndian";
			}
			return Byte._sysEndian;
		}

		Byte.BIG_ENDIAN="bigEndian";
		Byte.LITTLE_ENDIAN="littleEndian";
		Byte._sysEndian=null;
		return Byte;
	})()


	/**
	*...
	*@author Chen Gong
	*/
	//class RoundInfo
	var RoundInfo=(function(){
		function RoundInfo(){
			this.coin=NaN;
			this.exp=NaN;
			this.kills=NaN;
		}

		__class(RoundInfo,'RoundInfo');
		return RoundInfo;
	})()


	/**
	*...
	*@author ...
	*/
	//class skill.CollData
	var CollData=(function(){
		function CollData(){
			this.beatBackDis=NaN;
			this.collisionEnemyGetEffect=NaN;
			this.useScore=NaN;
			this.teamId=NaN;
			this.attackVal=NaN;
			this.attackValScale=NaN;
			this.damageAttenuation=NaN;
			this.isXuli=false;
			this.hitAddUserScore=false;
			this.dirX=NaN;
			this.dirY=NaN;
			this.x=NaN;
			this.y=NaN;
			this.lastHitRoleId=NaN;
			this.uID=NaN;
			this.skillId=NaN;
			this.isCrit=false;
			this.clear();
		}

		__class(CollData,'skill.CollData');
		var __proto=CollData.prototype;
		__proto.clear=function(){
			this.beatBackDis=0;
			this.collisionEnemyGetEffect=0;
			this.useScore=0;
			this.teamId=0;
			this.attackVal=0;
			this.attackValScale=0;
			this.damageAttenuation=0;
			this.isXuli=false;
			this.hitAddUserScore=true;
			this.dirX=0;
			this.dirY=0;
			this.lastHitRoleId=0;
			this.uID=0;
			this.skillId=0;
			this.isCrit=false;
			return this.constructor.name;
		}

		CollData.getCollDataByBullet=function(_item2D){
			var collData=DataPool.getItemByClass(CollData);
			collData.beatBackDis=_item2D.beatBackDis;
			collData.collisionEnemyGetEffect=_item2D.collisionEnemyGetEffect;
			collData.useScore=_item2D.useScore;
			collData.teamId=_item2D.teamId;
			collData.attackVal=_item2D.attackVal;
			collData.attackValScale=_item2D.attackValScale;
			collData.damageAttenuation=_item2D.damageAttenuation;
			collData.isXuli=_item2D.isXuli;
			collData.hitAddUserScore=_item2D.hitAddUserScore;
			collData.dirX=_item2D.dirX;
			collData.dirY=_item2D.dirY;
			collData.x=_item2D.x;
			collData.y=_item2D.y;
			collData.lastHitRoleId=_item2D.lastHitRoleId;
			collData.uID=_item2D.uID;
			collData.skillId=_item2D.skillId;
			collData.isCrit=_item2D.isCrit;
			return collData;
		}

		return CollData;
	})()


	/**
	*...
	*@author
	*/
	//class skill.SkillBaseData
	var SkillBaseData=(function(){
		var skillCount;
		function SkillBaseData(){
			this.user=null;
			this.baseDis={};
			this.speedSPercent=NaN;
			this.moveSpeedScale=NaN;
			this.skillOwned=[];
			this.skillOwnedWithLevel=[];
			this.skillLevelData={};
			this.activeSkill=[];
			this.activePassiveSkill=[];
			this.passiveSkillTriggerSkill={};
			this.n_deadLostScorePercent=NaN;
			this.n_collSnowGetScore=NaN;
			this.n_damageToBloodPercent=NaN;
			this.n_autoAddBlood=NaN;
			this.n_bulletSizeScale=NaN;
			this.n_collBoxGetSpeedAdd=NaN;
			this.bloodPercent=NaN;
			this.bloodValue=NaN;
			this.beHitDamageAdd=NaN;
			this.behitMovespeedDis=NaN;
			this.addFireTimes=NaN;
			this.cxDamage=0;
			this.hfScale=0;
			this.fyRange=0;
			this.fyTimaStap=0;
			this.reBoundScale=0;
			this.shieldValue=0;
			this.shieldPercent=0;
			this.shieldStaticValue=0;
			this.shieldBombRange=0;
			this.shieldBombBuffId=0;
			this.shieldRecreateTime=0;
			this.shieldRecreateTimeStamp=0;
			this.isXy=0;
			this.isCm=0;
			this.isBd=0;
			this.yanwuDamageScale=0;
			this.batterCount=0;
			this.oneTimeDamage=0;
			this.buffTypeExtendTime={};
			this.buffTypeEndBuff={};
			this.buffTypeStartBuff={};
			this.qxMoveScale=0;
			this.hitAddCritRatio=0;
			this.allHitAddCritRatio=0;
			this.critEffectScale=0;
			this.skillHitRoleNum={};
			this.decreaseDamage=1;
			this.XuliDamageAdd=1;
			this.areaAdd=1;
			this.lastTimeAdd=1;
			this.killDamageAdd=0;
			this.oldDriverKills=0;
			this.maxDriverKills=0;
			this.critRatioAdd=0;
			this.flashTimesAdd=1;
			this.flashAttackDamageAdd=1;
			this.trueDamageAdd=0;
			this.clear();
		}

		__class(SkillBaseData,'skill.SkillBaseData');
		var __proto=SkillBaseData.prototype;
		////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		__proto.getBloodVal=function(_basicVal){
			return _basicVal *this.bloodPercent+this.bloodValue;
		}

		/**
		*移动速度
		*@param _basicVal
		*@return
		*/
		__proto.getSpeedS=function(_basicVal){
			return ((_basicVal *this.speedSPercent))*this.moveSpeedScale;
		}

		/**
		*得到当前正在使用的被动技能
		*@return
		*/
		__proto.getCurOwnedSkill=function(){
			return this.skillOwnedWithLevel.slice();
		}

		__proto.getSkill=function(_skillId){
			var _skillCount=this.skillLevelData[_skillId];
			if (!_skillCount)return-1;
			return _skillId *1000+_skillCount.count;
		}

		__proto.getSkillCount=function(_skillId){
			return this.skillLevelData[_skillId];
		}

		__proto.addSkill=function(_skillId){
			this.skillOwned.push(_skillId);
			var _skillCount=this.skillLevelData[_skillId];
			if (!_skillCount){
				_skillCount=new skillCount();
				_skillCount.count=0;
				_skillCount.lastUseTime=0;
			}
			_skillCount.count++;
			this.skillLevelData[_skillId]=_skillCount;
			this.skillOwnedWithLevel.push(this.getSkill(_skillId));
		}

		__proto.delSkill=function(_skillId){
			this.skillOwned.pop();
			this.skillOwnedWithLevel.pop();
			var _skillCount=this.skillLevelData[_skillId];
			if (_skillCount){
				_skillCount.count--;
				if (_skillCount.count < 0){
					_skillCount.count=0;
				}
			}
		}

		__proto.resetPassiveSkill=function(){
			this.bloodPercent=1;
			this.bloodValue=0;
			this.speedSPercent=1;
			this.moveSpeedScale=1;
			this.skillOwned.length=0;
			this.skillOwnedWithLevel.length=0;
			this.skillLevelData={};
			this.n_deadLostScorePercent=0;
			this.n_collSnowGetScore=0;
			this.n_damageToBloodPercent=0;
			this.n_autoAddBlood=0;
			this.n_bulletSizeScale=0;
			this.n_collBoxGetSpeedAdd=0;
			this.beHitDamageAdd=0;
			this.behitMovespeedDis=0;
			this.addFireTimes=0;
			this.cxDamage=0;
			this.hfScale=0;
			this.fyRange=0;
			this.fyTimaStap=0;
			this.reBoundScale=0;
			this.shieldValue=0;
			this.shieldPercent=0;
			this.shieldStaticValue=0;
			this.shieldBombRange=0;
			this.shieldBombBuffId=0;
			this.shieldRecreateTime=0;
			this.shieldRecreateTimeStamp=0;
			this.isXy=0;
			this.isCm=0;
			this.isBd=0;
			this.yanwuDamageScale=0;
			this.batterCount=0;
			this.oneTimeDamage=0;
			this.qxMoveScale=0;
			this.hitAddCritRatio=0;
			this.allHitAddCritRatio=0;
			this.critEffectScale=0;
			this.buffTypeExtendTime={};
			this.buffTypeEndBuff={};
			this.buffTypeStartBuff={};
			this.skillHitRoleNum={};
			this.decreaseDamage=1;
			this.XuliDamageAdd=1;
			this.areaAdd=1;
			this.lastTimeAdd=1;
			this.killDamageAdd=0;
			this.maxDriverKills=0;
			this.critRatioAdd=0;
			this.flashTimesAdd=1;
			this.flashAttackDamageAdd=1;
			this.trueDamageAdd=0;
		}

		__proto.clear=function(){
			this.user=null;
			this.baseDis={};
			this.decreaseDamage=1;
			this.XuliDamageAdd=1;
			this.areaAdd=1;
			this.lastTimeAdd=1;
			this.killDamageAdd=0;
			this.oldDriverKills=0;
			this.maxDriverKills=0;
			this.critRatioAdd=0;
			this.flashTimesAdd=1;
			this.flashAttackDamageAdd=1;
			this.trueDamageAdd=0;
			this.bloodPercent=1;
			this.bloodValue=0;
			this.speedSPercent=1;
			this.moveSpeedScale=1;
			this.skillOwned.length=0;
			this.skillOwnedWithLevel.length=0;
			this.skillLevelData={};
			for (var i=0;i < this.activeSkill.length;i++){
				DataPool.recover(this.activeSkill[i]);
			}
			this.activeSkill.length=0;
			this.activePassiveSkill.length=0;
			this.passiveSkillTriggerSkill={};
			this.n_deadLostScorePercent=0;
			this.n_collSnowGetScore=0;
			this.n_damageToBloodPercent=0;
			this.n_autoAddBlood=0;
			this.n_bulletSizeScale=0;
			this.n_collBoxGetSpeedAdd=0;
			this.beHitDamageAdd=0;
			this.behitMovespeedDis=0;
			this.addFireTimes=0;
			this.cxDamage=0;
			this.hfScale=0;
			this.fyRange=0;
			this.fyTimaStap=0;
			this.reBoundScale=0;
			this.shieldValue=0;
			this.shieldPercent=0;
			this.shieldStaticValue=0;
			this.shieldBombRange=0;
			this.shieldBombBuffId=0;
			this.shieldRecreateTime=0;
			this.shieldRecreateTimeStamp=0;
			this.isXy=0;
			this.isCm=0;
			this.isBd=0;
			this.yanwuDamageScale=0;
			this.batterCount=0;
			this.oneTimeDamage=0;
			this.qxMoveScale=0;
			this.hitAddCritRatio=0;
			this.allHitAddCritRatio=0;
			this.critEffectScale=0;
			this.buffTypeExtendTime={};
			this.buffTypeEndBuff={};
			this.buffTypeStartBuff={};
			this.skillHitRoleNum={};
			return this.constructor.name;
		}

		__proto.fillData=function(_data){
			this.bloodPercent=_data.bloodPercent;
			this.bloodValue=_data.bloodValue;
			this.speedSPercent=_data.speedSPercent;
			this.skillOwned=_data.skillOwned.slice();
			this.skillOwnedWithLevel=_data.skillOwnedWithLevel.slice();
			var _ids=Object.keys(_data.skillLevelData);;
			var _id;
			for(var $each__id in _ids){
				_id=_ids[$each__id];
				this.skillLevelData[_id]=_data.skillLevelData[_id];
			}
			this.n_deadLostScorePercent=_data.n_deadLostScorePercent;
			this.n_collSnowGetScore=_data.n_collSnowGetScore;
			this.n_damageToBloodPercent=_data.n_damageToBloodPercent;
			this.n_autoAddBlood=_data.n_autoAddBlood;
			this.n_bulletSizeScale=_data.n_bulletSizeScale;
			this.n_collBoxGetSpeedAdd=_data.n_collBoxGetSpeedAdd;
			this.beHitDamageAdd=_data.beHitDamageAdd;
			this.behitMovespeedDis=_data.behitMovespeedDis;
			this.addFireTimes=_data.addFireTimes;
			this.cxDamage=_data.cxDamage;
			this.hfScale=_data.hfScale;
			this.fyRange=_data.fyRange;
			this.fyTimaStap=_data.fyTimaStap;
			this.reBoundScale=_data.reBoundScale;
			this.shieldValue=_data.shieldValue;
			this.shieldPercent=_data.shieldPercent;
			this.shieldStaticValue=_data.shieldStaticValue;
			this.shieldBombRange=_data.shieldBombRange;
			this.shieldBombBuffId=_data.shieldBombBuffId;
			this.shieldRecreateTime=_data.shieldRecreateTime;
			this.shieldRecreateTimeStamp=_data.shieldRecreateTimeStamp;
			this.isXy=_data.isXy;
			this.isCm=_data.isCm;
			this.isBd=_data.isBd;
			this.yanwuDamageScale=_data.yanwuDamageScale;
			this.batterCount=_data.batterCount;
			this.oneTimeDamage=_data.oneTimeDamage;
		}

		SkillBaseData.__init$=function(){
			//class skillCount
			skillCount=(function(){
				function skillCount(){
					this.count=0;
					this.lastUseTime=0;
				}
				__class(skillCount,'');
				return skillCount;
			})()
		}

		return SkillBaseData;
	})()


	/**
	*...
	*@author ...
	*/
	//class skill.SkillLevelAtt
	var SkillLevelAtt=(function(){
		function SkillLevelAtt(){
			this.id=0;
			this.triggerType=0;
			this.radio=0;
			this.exTrigger=null;
			this.selfTrigger=null;
			this.endselfTrigger=null;
			this.intervalselfTrigger=null;
			this.duration=0;
			this.intervalTime=0;
			this.buffType=0;
			this.buffPubCD=0;
			this.cd=0;
		}

		__class(SkillLevelAtt,'skill.SkillLevelAtt');
		SkillLevelAtt.addRunFunction=function(_skill){
			return _skill.triggerType==1 || _skill.triggerType==5;
		}

		SkillLevelAtt.TRIGGERTYPE_GET=1;
		SkillLevelAtt.TRIGGERTYPE_ATT=21;
		SkillLevelAtt.TRIGGERTYPE_HIT=22;
		SkillLevelAtt.TRIGGERTYPE_HITOTHER=23;
		SkillLevelAtt.TRIGGERTYPE_KILLOTHER=24;
		SkillLevelAtt.TRIGGERTYPE_BEHIT=31;
		SkillLevelAtt.TRIGGERTYPE_BEKILL=32;
		SkillLevelAtt.TRIGGERTYPE_ACTIVE=4;
		SkillLevelAtt.TRIGGERTYPE_CUSTOMIZE=5;
		return SkillLevelAtt;
	})()


	/**
	*...
	*@author
	*/
	//class skill.SkillProxy
	var SkillProxy=(function(){
		function SkillProxy(){}
		__class(SkillProxy,'skill.SkillProxy');
		SkillProxy.getSkillIndexBySkillId=function(_skillId){
			var _skillObj=skill.SkillProxy.skilllevelAtt[_skillId];
			if (!_skillObj)return-1;
			var _triggerObj=SkillScript.getScriptArgs(_skillObj.exTrigger);
			if (!_triggerObj)return-1;
			if (!_triggerObj[0])return-1;
			return _triggerObj[0][1];
		}

		SkillProxy.getEmitterIdBySkillId=function(_skillId){
			var _skillObj=skill.SkillProxy.skilllevelAtt[_skillId];
			if (!_skillObj)return-1;
			var _triggerObj=SkillScript.getScriptArgs(_skillObj.exTrigger);
			if (!_triggerObj)return-1;
			if (!_triggerObj[0])return-1;
			return _triggerObj[0][2];
		}

		SkillProxy.getSkillLevelDataByKey=function(_skillId,_skillLevel,_key){
			var baseSkillData=skill.SkillProxy.skilllevelAtt[_skillId];
			var upgradeSkillData=skill.SkillProxy.skillUpgradeKey[_skillId+"_"+_skillLevel];
			if (upgradeSkillData && upgradeSkillData[_key] !=null){
				return upgradeSkillData[_key];
			}
			if (baseSkillData && baseSkillData[_key] !=null){
				return baseSkillData[_key];
			};
			var emitterId=skill.SkillProxy.getEmitterIdBySkillId(_skillId);
			if (isNaN(emitterId)){
				return null;
			};
			var emitterData=skill.SkillProxy.emitters[emitterId];
			if (emitterData && emitterData[_key] !=null){
				return emitterData[_key];
			}
			return null;
		}

		SkillProxy.useActiveSkill=function(_skillId,skillLevel,_skillData,_useSkillData){
			var selfTrigger=skill.SkillProxy.getSkillLevelDataByKey(_skillId,skillLevel,"selfTrigger");
			SkillScript.runFunction(_skillData,selfTrigger,_skillId,_useSkillData);
		}

		SkillProxy.getActiveSkill=function(_skillId,skillLevel,_skillData,_sendAndRefresh){
			var exTrigger=skill.SkillProxy.getSkillLevelDataByKey(_skillId,skillLevel,"exTrigger");
			if (exTrigger && exTrigger !=""){
				SkillScript.runFunction(_skillData,exTrigger,_skillId,_sendAndRefresh);
			}
		}

		SkillProxy.userAddPassiveSkill=function(_skillId,_skillData){
			if (!_skillId)return false;
			_skillData.addSkill(_skillId);
			var _skillLevelId=_skillData.getSkill(_skillId);
			if (_skillLevelId==-1){
				_skillData.delSkill(_skillId);
				return false;
			};
			var _skillLevelData=skill.SkillProxy.skilllevelAtt[_skillLevelId];
			if (!_skillLevelData){
				_skillData.delSkill(_skillId);
				return false;
			}
			if (SkillLevelAtt.addRunFunction(_skillLevelData)&& _skillLevelData.selfTrigger !=""){
				SkillScript.runFunction(_skillData,_skillLevelData.selfTrigger,_skillLevelId);
			}
			return true;
		}

		SkillProxy.userResetPassiveSkill=function(_skillData,_skillLen){
			var _curSkill=_skillData.skillOwned.slice(0,_skillLen);
			_skillData.resetPassiveSkill();
			for (var i=0;i < _curSkill.length;i++){
				skill.SkillProxy.userAddPassiveSkill(_curSkill[i],_skillData);
			}
		}

		SkillProxy.triggerPassiveSkill=function(passiveType,_thisSkillData,_targetSkillData,extra){
			var bulletSkillId=0 | (extra.skillId / 1000);
			var result=false;
			var ownedSkill=_thisSkillData.getCurOwnedSkill();
			var skillLevelData;
			var skillWithLevel=NaN;
			var skillId=NaN;
			var checkResult=true;
			for (var i=0;i < ownedSkill.length;i++){
				skillWithLevel=ownedSkill[i];
				skillId=0 | (skillWithLevel / 1000);
				skillLevelData=skill.SkillProxy.skilllevelAtt[skillWithLevel];
				if (!skillLevelData){
					console.log(">>>>>>>>>>>>>>>>>>>>>>skillWithLevl1"+skillWithLevel);
				}
				if (skillLevelData.triggerType !=passiveType)continue ;
				if (skillLevelData.radio !=0 && Math.random()> skillLevelData.radio)continue ;
				checkResult=true;
				if (skillLevelData.exTrigger){
					checkResult=SkillScript.runFunction(_targetSkillData,skillLevelData.exTrigger,skillWithLevel);
				}
				if (checkResult){
					SkillScript.runFunction(_targetSkillData,skillLevelData.selfTrigger,skillWithLevel,extra);
					result=true;
				}
			};
			var activePassive=_thisSkillData.activePassiveSkill;
			var passiveSkillTriggerId=0;
			for (var j=0;j < activePassive.length;j++){
				skillId=activePassive[j];
				skillWithLevel=skillId *1000+1;
				skillLevelData=skill.SkillProxy.skilllevelAtt[skillWithLevel];
				if (!skillLevelData){
					console.log(">>>>>>>>>>>>>>>>>>>>>>skillWithLevl2"+skillWithLevel);
				}
				passiveSkillTriggerId=_thisSkillData.passiveSkillTriggerSkill[skillId];
				if (!isNaN(passiveSkillTriggerId)&& passiveSkillTriggerId !=bulletSkillId)continue ;
				if (skillLevelData.triggerType !=passiveType)continue ;
				checkResult=true;
				if (skillLevelData.exTrigger){
					checkResult=SkillScript.runFunction(_targetSkillData,skillLevelData.exTrigger,skillWithLevel);
				}
				if (checkResult){
					SkillScript.runFunction(_targetSkillData,skillLevelData.selfTrigger,skillWithLevel,extra);
					result=true;
				}
			}
			return result;
		}

		SkillProxy.calDamage=function(_bulletAttack,_attSkillData,_behitSkillData,_bullet){
			if(_behitSkillData.user.isInShield()){
				_bulletAttack=0;
			}
			else{
				_bulletAttack *=(_attSkillData.user.inGhost()? 0.5 :1);
				_bulletAttack *=(_behitSkillData.user.inGhost()? 0.5 :1);
				_bulletAttack *=_behitSkillData.decreaseDamage;
				_bulletAttack=SkillProxy.extraDamageDealt(_attSkillData,_bulletAttack,_bullet);
				_bulletAttack *=(1+_behitSkillData.beHitDamageAdd);
				_bulletAttack *=(1+_attSkillData.yanwuDamageScale);
				_bulletAttack *=(1+_attSkillData.oneTimeDamage);
			};
			var _shieldValue=_behitSkillData.shieldValue;
			if(_shieldValue !=0){
				if (_bulletAttack > _shieldValue){
					_bulletAttack-=_shieldValue;
					_behitSkillData.shieldValue=_shieldValue=0;
					if (_behitSkillData.shieldBombRange !=0){
						_behitSkillData.user.addAreaBuff(_behitSkillData.shieldBombRange,0,_behitSkillData.shieldBombBuffId);
					}
					if (_behitSkillData.shieldRecreateTime !=0){
						_behitSkillData.shieldRecreateTimeStamp=Date.now()+_behitSkillData.shieldRecreateTime;
					}
					_behitSkillData.user.toClientShields();
					_behitSkillData.user.fyChg(0,0,true);
				}
				else{
					_shieldValue-=_bulletAttack;
					_behitSkillData.shieldValue=_shieldValue;
					_bulletAttack=0;
				}
			}
			return 0|_bulletAttack;
		}

		SkillProxy.stealScore=function(behitScoreChg){
			return Math.ceil(behitScoreChg *SkillProxy.za7za8.scoreStealRatio);
		}

		SkillProxy.stealBlood=function(stealScore,_attSkillData){
			return Math.ceil(stealScore *_attSkillData.n_damageToBloodPercent);
		}

		SkillProxy.calReBoundDamage=function(bloodDamage,_behitSkillData){
			return bloodDamage *_behitSkillData.reBoundScale;
		}

		SkillProxy.behitDeadLostScore=function(_behitCurScore,_behitSkillData){
			return _behitCurScore *(1-_behitSkillData.n_deadLostScorePercent);
		}

		SkillProxy.behitDeadAttGetScore=function(_userLostScore){
			return _userLostScore *SkillProxy.za7za8.scoreStealRatio;
		}

		SkillProxy.extraDamageDealt=function(_attSkillData,damage,bullet){
			var damageRatio=_attSkillData.flashAttackDamageAdd;
			if(bullet.isXuli){
				damageRatio *=_attSkillData.XuliDamageAdd;
			}
			bullet.isCrit=false;
			if(SkillProxy.randBoolean(_attSkillData.critRatioAdd+_attSkillData.allHitAddCritRatio)){
				damageRatio *=(1.5 *(1+_attSkillData.critEffectScale));
				_attSkillData.allHitAddCritRatio=0;
				bullet.isCrit=true;
			}
			else{
				_attSkillData.allHitAddCritRatio+=_attSkillData.hitAddCritRatio;
			}
			if (_attSkillData.maxDriverKills !=0 && _attSkillData.oldDriverKills !=0){
				if (_attSkillData.oldDriverKills > _attSkillData.maxDriverKills){
					_attSkillData.oldDriverKills=_attSkillData.maxDriverKills;
				}
				damageRatio *=(1+_attSkillData.oldDriverKills *_attSkillData.killDamageAdd);
			};
			var bonusDamage=_attSkillData.trueDamageAdd *damage;
			var totalDamage=damage *damageRatio+bonusDamage;
			return totalDamage;
		}

		SkillProxy.randBoolean=function(rtp){
			(rtp===void 0)&& (rtp=0.5);
			return Math.random()< rtp;
		}

		SkillProxy.skilllevelAtt={};
		SkillProxy.skillUpgradeKey={};
		SkillProxy.emitters={};
		SkillProxy.za7za8={};
		return SkillProxy;
	})()


	/**
	*...
	*@author ...
	*/
	//class skill.SkillScript
	var SkillScript=(function(){
		function SkillScript(){}
		__class(SkillScript,'skill.SkillScript');
		SkillScript.getScriptArgs=function(_triggerStr){
			var _trigger=SkillScript.scriptArgs[_triggerStr];
			if (!_trigger){
				_trigger=[];
				var _trigger1=_triggerStr.split(";");
				for (var i=0;i < _trigger1.length;i++){
					var _trigger2=_trigger1[i].split(",");
					for (var j=1;j < _trigger2.length;j++){
						var _value=parseFloat(_trigger2[j]);
						if (isNaN(_value)){
							_value=_trigger2[j];
						}
						_trigger2[j]=_value;
					}
					_trigger.push(_trigger2);
				}
				SkillScript.scriptArgs[_triggerStr]=_trigger;
			}
			return SkillScript.scriptArgs[_triggerStr];
		}

		SkillScript.runFunction=function(_user,_triggerStr,_skillID,_extraData){
			(_skillID===void 0)&& (_skillID=-1);
			var _trigger=SkillScript.getScriptArgs(_triggerStr);
			var _useTrigger=[];
			var _return=true;
			for (var l=0;l < _trigger.length;l++){
				_useTrigger.push(_trigger[l].slice());
			}
			for (var k=0;k < _useTrigger.length;k++){
				var _functionName=_useTrigger[k].shift();
				_useTrigger[k].unshift(_user);
				_useTrigger[k].push(_skillID);
				if (_extraData !=null){
					_useTrigger[k].push(_extraData);
				}
				_return=SkillScript[_functionName] && SkillScript[_functionName].apply(null,_useTrigger[k])&& _return;
			}
			if ((_extraData instanceof skill.UseSkillData )&& (_extraData).releaseIme){
				DataPool.recover(_extraData);
			}
			return _return;
		}

		SkillScript.addBlood=function(_user,_percent,_value){
			_user.bloodPercent=_percent;
			_user.bloodValue=0 | _value;
			_user.user.skillChgBlood();
		}

		SkillScript.chgEmitter=function(_user,_emitterIndex,_emitterId,_skillID,_sendAndRefresh){
			(_skillID===void 0)&& (_skillID=-1);
			(_sendAndRefresh===void 0)&& (_sendAndRefresh=0);
			_user.user.chgEmitter(_emitterIndex,_emitterId,_skillID,_sendAndRefresh);
		}

		SkillScript.skillEmitter=function(_user,_emitterIndex,_skillID,_sData){
			_user.user.skillEmitter(_emitterIndex,_sData);
		}

		SkillScript.flashTo=function(_user,_emitterIndex,_long,eleId,eleNum,_skillID,_sData){
			_user.user.flashTo(_emitterIndex,_long,eleId,eleNum,_sData);
		}

		SkillScript.startBeatBack=function(_user,_emitterIndex,_beatDistance,_speedScale,_buffId,_collStop,_endBack,_damage,_skillID,_sData){
			if ((_endBack instanceof skill.UseSkillData )){
				_skillID=_collStop;
				_sData=_endBack;
				_collStop=1;
				_endBack=0;
				_damage=0;
			}
			_user.user.startBeatBack(_emitterIndex,_beatDistance,_speedScale,_buffId,_collStop,_endBack,_damage,_sData);
		}

		SkillScript.endBeatBack=function(_user){
			_user.user.endBeatBack();
		}

		SkillScript.findAndAtt=function(_user){
			_user.user.findAndAtt(500,1,true);
		}

		SkillScript.chgBaseDis=function(_user,_baseDis,_skillId){
			_user.baseDis[_skillId]=_baseDis;
		}

		SkillScript.startGhost=function(_user,_emitterIndex){
			return _user.user.startGhost(_emitterIndex);
		}

		SkillScript.endGhost=function(_user,_emitterIndex){
			return _user.user.endGhost();
		}

		SkillScript.startRabit=function(_user,_emitterIndex){
			return _user.user.startRabit(_emitterIndex);
		}

		SkillScript.endRabit=function(_user,_emitterIndex){
			return _user.user.endRabit();
		}

		SkillScript.startSnowMan=function(_user,_emitterIndex){
			return _user.user.startSnowMan(_emitterIndex);
		}

		SkillScript.endSnowMan=function(_user,_emitterIndex){
			return _user.user.endSnowMan();
		}

		SkillScript.startOctopus=function(_user,_emitterIndex){
			return _user.user.startOctopus(_emitterIndex);
		}

		SkillScript.endOctopus=function(_user,_emitterIndex){
			return _user.user.endOctopus();
		}

		SkillScript.startShield=function(_user,_emitterIndex){
			return _user.user.startShield(_emitterIndex);
		}

		SkillScript.endShield=function(_user,_emitterIndex){
			return _user.user.endShield();
		}

		SkillScript.startPet=function(_user,_emitterIndex){
			return _user.user.startPet(_emitterIndex);
		}

		SkillScript.endPet=function(_user,_emitterIndex){
			return _user.user.endPet();
		}

		SkillScript.startAddAtt=function(_user,_emitterIndex,_damageScale,_prefixId){
			return _user.user.startAddAtt(_emitterIndex,_damageScale,_prefixId);
		}

		SkillScript.endAddAtt=function(_user){
			return _user.user.endAddAtt();
		}

		SkillScript.randomSnow=function(_user,foodId,foodNum,staticScore,angle,distance,useSnowGroundScale){
			(angle===void 0)&& (angle=0);
			(distance===void 0)&& (distance=50);
			(useSnowGroundScale===void 0)&& (useSnowGroundScale=1);
			_user.user.createFood(foodId,foodNum,staticScore,angle,distance,useSnowGroundScale);
			return true;
		}

		SkillScript.chgdeadLostScorePercent=function(_user,_value){
			_user.n_deadLostScorePercent=_value;
		}

		SkillScript.chgcollSnowGetScore=function(_user,_value){
			_user.n_collSnowGetScore=_value;
		}

		SkillScript.chgdamageToBloodPercent=function(_user,_value){
			_user.n_damageToBloodPercent=_value;
		}

		SkillScript.chgautoAddBlood=function(_user,_value){
			_user.n_autoAddBlood=_value;
			_user.user.skillChgRegain();
		}

		SkillScript.chgbulletSizeScale=function(_user,_value){
			_user.n_bulletSizeScale=_value;
		}

		SkillScript.checkBuffCDAndAdd=function(_user,_buffid){
			_user.user.checkBuffCDAndAdd(_buffid);
		}

		SkillScript.addbuff=function(_user,_buffid,_skillId,_sData){
			_sData.buffid=_buffid;
			_user.user.addbuff(_buffid,0,_sData);
		}

		SkillScript.delAndAddBuff=function(_user,_buffid,_skillId,_sData){
			_user.user.delAndAddBuff(_buffid,_sData);
		}

		SkillScript.delbuff=function(_user,_buffid){
			_user.user.delbuff(_buffid);
		}

		SkillScript.checkBufferCD=function(_user,_value){
			return _user.user.checkBufferCD(_value);
		}

		SkillScript.checkBufferFloors=function(_user,_buffid,_floors){
			return _user.user.checkBufferFloors(_buffid,_floors);
		}

		SkillScript.addAreaBuff=function(_user,_range,_targetType,_buffId){
			_user.user.addAreaBuff(_range,_targetType,_buffId);
		}

		SkillScript.checkAddBuff=function(_user,_buffid,_skillId,_sData){
			_user.user.checkAddBuff(_buffid,_sData);
		}

		SkillScript.decreaseCD=function(_user,_value){
			_user.user.decreaseCD(_value);
		}

		SkillScript.addFireTimes=function(_user,_value){
			_user.addFireTimes=_value;
		}

		SkillScript.saveAtt=function(_user,_skillId,_sData){
			_user.cxDamage=_sData.bloodDamage;
			return true;
		}

		SkillScript.addReboundPercent=function(_user,_rebound){
			_user.reBoundScale=_rebound;
		}

		SkillScript.addShields=function(_user,_percent,_value,_bombRange,_bombBuffId,_reCreateShieldTime,_sendMsg){
			_user.shieldValue=_user.user.getMaxBloodVal()*_percent+_value;
			_user.shieldPercent=_percent;
			_user.shieldStaticValue=_value;
			_user.shieldBombRange=_bombRange;
			_user.shieldBombBuffId=_bombBuffId;
			_user.shieldRecreateTime=_reCreateShieldTime;
			_sendMsg==1 && _user.user.toClientShields();
		}

		SkillScript.skillCreateFood=function(_user,foodId,destroyTime){
			_user.user.skillCreateFood(foodId,destroyTime);
		}

		SkillScript.yanwuDamage=function(_user,value){
			_user.yanwuDamageScale=value;
		}

		SkillScript.addPassiveSkill=function(_user,_passiveSkillId,_triggerSkillId){
			if (_user.activePassiveSkill.indexOf(_passiveSkillId)==-1){
				_user.activePassiveSkill.push(_passiveSkillId);
			}
			if (_triggerSkillId !=-1){
				_user.passiveSkillTriggerSkill[_passiveSkillId]=_triggerSkillId;
			}
		}

		SkillScript.checkCount=function(_user,_maxBatter,_oneTimeDamage){
			if (_user.oneTimeDamage !=0){
				_user.oneTimeDamage=0;
				return;
			}
			_user.batterCount++;
			if (_user.batterCount >=_maxBatter){
				_user.batterCount=0;
				_user.oneTimeDamage=_oneTimeDamage;
			}
		}

		SkillScript.extendBuffTypeTime=function(_user,_buffType,_extendTime){
			_user.buffTypeExtendTime[_buffType]=_extendTime;
		}

		SkillScript.buffTypeEndBuff=function(_user,_buffType,_buffid){
			_user.buffTypeEndBuff[_buffType]=_buffid;
		}

		SkillScript.buffTypeStartBuff=function(_user,_buffType,_buffid){
			_user.buffTypeStartBuff[_buffType]=_buffid;
		}

		SkillScript.addSkillPunctureNum=function(_user,_addSkillId,_addNum){
			if (_user.skillHitRoleNum[_addSkillId]==null){
				_user.skillHitRoleNum[_addSkillId]=0;
			}
			_user.skillHitRoleNum[_addSkillId]+=_addNum;
		}

		SkillScript.inSnow=function(_user){
			_user.user.inSnow();
		}

		SkillScript.findAndDelayDamage=function(_user,_range,_count,_skillId,_uData){
			_user.user.findAndDelayDamage(_range,_count,_uData);
		}

		SkillScript.addHitAddCritRatio=function(_user,_value){
			_user.hitAddCritRatio=_value;
		}

		SkillScript.addCritEffectScale=function(_user,_value){
			_user.critEffectScale=_value;
		}

		SkillScript.pullUser=function(_user,_distance,_speedScale,_type,_skillId,_sData){
			var _angle=_type==1 ? _sData.angle :_sData.beatAngle;
			if (_distance < 0){
				_distance=Math.abs(_distance);
				_angle=(_angle+180)% 360;
				_distance=_user.user.getPullDistance(_distance,_sData);
			}
			_user.user.moveBeatBack(_distance,_speedScale,0,0,0,0,_angle);
		}

		SkillScript.toClientEffect=function(_user,_needCheckBuffId,_skillId,_sData){
			if (_needCheckBuffId !=0){
				if (_user.user.checkBufferIn(_needCheckBuffId)){
					return;
				}
			}
			_user.user.toClientSkillEffect(_skillId,_sData.angle);
		}

		SkillScript.decreaseDamage=function(_user,_value){
			_user.decreaseDamage=1-_value;
		}

		SkillScript.addXuliDamage=function(_user,_value){
			_user.XuliDamageAdd=1+_value;
		}

		SkillScript.addArea=function(_user,_value){
			_user.areaAdd=1+_value;
		}

		SkillScript.addLastTime=function(_user,_value){
			_user.lastTimeAdd=1+_value;
		}

		SkillScript.killAddDamage=function(_user,_value,_count){
			_user.killDamageAdd=_value;
			_user.maxDriverKills=_count;
		}

		SkillScript.addCritRatio=function(_user,_value){
			_user.critRatioAdd=_value;
		}

		SkillScript.chgFlash=function(_user,_skillIndex,_chargedCount){
			_user.user.chgChargedCount(_skillIndex,_chargedCount);
		}

		SkillScript.flashAttack=function(_user,_emitterIndex,_long,eleId,eleNum,attackDamageAdd,_skillID,_sData){
			_user.flashAttackDamageAdd=1+attackDamageAdd;
			_user.user.flashTo(_emitterIndex,_long,eleId,eleNum,_sData);
		}

		SkillScript.attAddDamage=function(_user,_value){
			_user.trueDamageAdd=_value;
		}

		SkillScript.scriptArgs={};
		return SkillScript;
	})()


	/**
	*...
	*@author ...
	*/
	//class skill.UseSkillData
	var UseSkillData=(function(){
		function UseSkillData(){
			this.releaseIme=true;
			this.angle=NaN;
			this.beatAngle=NaN;
			this.dis=NaN;
			this.bloodDamage=NaN;
			this.attCollData=null;
			this.skillId=NaN;
			this.targetId=NaN;
			this.targetNum=NaN;
			this.buffid=NaN;
			this.clear();
		}

		__class(UseSkillData,'skill.UseSkillData');
		var __proto=UseSkillData.prototype;
		__proto.clear=function(){
			this.releaseIme=true;
			this.angle=0;
			this.beatAngle=0;
			this.dis=0;
			this.bloodDamage=0;
			this.attCollData=null;
			this.skillId=0;
			this.targetId=0;
			this.targetNum=0;
			this.buffid=0;
			return this.__className;
		}

		__static(UseSkillData,
		['STATICDATA',function(){return this.STATICDATA=new UseSkillData();}
		]);
		return UseSkillData;
	})()


	/**
	*...
	*@author dkt
	*/
	//class SkillSlotData
	var SkillSlotData=(function(){
		function SkillSlotData(){
			this.skillIndex=0;
			this.skillId=0;
			this.skillLevel=0;
			this.cd=0;
			this.leftCount=NaN;
			this.lastUseTime=NaN;
			this.emitterId=NaN;
			this.getSkillTime=NaN;
			this.foodId=NaN;
			this.canLost=false;
			this.curChargedCount=NaN;
			this.maxChargedCount=NaN;
			this.clear();
		}

		__class(SkillSlotData,'SkillSlotData');
		var __proto=SkillSlotData.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			this.skillIndex=msg.readByte();
			this.skillId=msg.getInt32();
			this.skillLevel=msg.getInt16();
			this.cd=msg.getInt16();
			this.leftCount=msg.getInt16();
			return true;
		}

		__proto.serverWriteBody=function(msg){
			msg.writeByte(this.skillIndex);
			msg.writeInt32(this.skillId);
			msg.writeInt16(this.skillLevel);
			msg.writeInt16(this.cd);
			msg.writeInt16(this.leftCount);
			return true;
		}

		__proto.fillData=function(_data){
			this.skillIndex=_data.skillIndex;
			this.skillId=_data.skillId;
			this.skillLevel=_data.skillLevel;
			this.cd=_data.cd;
			this.leftCount=_data.leftCount;
			this.lastUseTime=_data.lastUseTime;
			this.emitterId=_data.emitterId;
		}

		__proto.clear=function(){
			this.skillIndex=0;
			this.skillId=0;
			this.skillLevel=0;
			this.cd=0;
			this.leftCount=0;
			this.lastUseTime=0;
			this.emitterId=0;
			this.getSkillTime=0;
			this.foodId=0;
			this.canLost=false;
			this.curChargedCount=1;
			this.maxChargedCount=1;
			return this.constructor.name;
		}

		return SkillSlotData;
	})()


	/**
	*...
	*@author rivetr
	*/
	//class UserDataToClient
	var UserDataToClient=(function(){
		function UserDataToClient(){
			this.gameUID=0;
			this.title=0;
		}

		__class(UserDataToClient,'UserDataToClient');
		var __proto=UserDataToClient.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			this.gameUID=msg.getUint32();
			this.title=msg.getUint16();
			return true;
		}

		__proto.serverWriteBody=function(msg){
			msg.writeUint32(this.gameUID);
			msg.writeUint16(this.title);
			return true;
		}

		__proto.clear=function(){
			this.gameUID=0;
			this.title=0;
			return this.constructor.name;
		}

		UserDataToClient.initDataPool=function(){
			for (var ti=0;ti < UserDataToClient._maxNum;ti++){
				UserDataToClient._dataPool[ti]=new UserDataToClient();
			}
		}

		UserDataToClient.getData=function(){
			return UserDataToClient._dataPool.length>0? UserDataToClient._dataPool.pop():new UserDataToClient();
		}

		UserDataToClient.release=function(_data){
			if (!_data)return;
			if (UserDataToClient._dataPool.indexOf(_data)!=-1)return;
			_data.clear();
			UserDataToClient._dataPool.push(_data);
		}

		UserDataToClient._maxNum=1024 *5;
		UserDataToClient._dataPool=[];
		return UserDataToClient;
	})()


	/**
	*...
	*@author Chen Gong
	*/
	//class UserDebuff
	var UserDebuff=(function(){
		function UserDebuff(){
			this.uid=0;
			this.debuffArr=null;
		}

		__class(UserDebuff,'UserDebuff');
		return UserDebuff;
	})()


	/**
	*...
	*@author
	*/
	//class utils.BufferItem
	var BufferItem=(function(){
		function BufferItem(){
			this.type=0;
			this.duration=NaN;
			this.bufferValue=NaN;
			this.endTime=NaN;
		}

		__class(BufferItem,'utils.BufferItem');
		var __proto=BufferItem.prototype;
		__proto.recover=function(){
			DataPool.recover(this);
		}

		BufferItem.createBufferItem=function(now,type,d,v){
			var rs=DataPool.getItemByClass(BufferItem);
			rs.type=type;
			rs.duration=d;
			rs.bufferValue=v;
			rs.endTime=now+d;
			return rs;
		}

		return BufferItem;
	})()


	/**
	*...
	*@author ...
	*/
	//class utils.Collision
	var Collision=(function(){
		var WalkGoToPoint;
		function Collision(){
			this.tileWidth=0;
			this.tileHeight=0;
			this.numColumnsTile=0;
			this.numRowsTile=0;
			this._mapData=null;
			this.width=NaN;
			this.height=NaN;
			this.left=0;
			this.top=0;
			this.bottom=0;
			this.right=0;
			this._mapName=null;
			this.canGoNew=null;
			this.tempArr=[];
			this._walkGoTo1=new WalkGoToPoint();
			this._walkGoTo2=new WalkGoToPoint();
			this._walkGoTo3=new WalkGoToPoint();
			this.canGoNew=this._canGoNewNormal;
		}

		__class(Collision,'utils.Collision');
		var __proto=Collision.prototype;
		/**
		*返回格子的宽度
		*@return
		*/
		__proto.getTileWidth=function(){
			return this.tileWidth;
		}

		__proto.init=function(tW,tH,numCol,numRow,mapData,mapName){
			(mapName===void 0)&& (mapName='');
			this.tileWidth=tW;
			this.tileHeight=tH;
			this.numColumnsTile=numCol;
			this.numRowsTile=numRow;
			this.width=this.tileWidth *this.numColumnsTile;
			this.height=this.tileHeight *this.numRowsTile;
			this._mapData=mapData;
			this._mapName=mapName;
			this.canGoNew=this._canGoNewNormal;
		}

		//initArray();
		__proto.getPath=function(xr,yr,dx,dy){
			return null;
		}

		/**
		*碰撞盒子X轴碰撞
		*@param x x轴坐标
		*@param y y轴坐标
		*@param w 碰撞块宽度
		*@param h 碰撞块高度
		*@param dx x轴位移
		*@return
		*/
		__proto.getTiltleX=function(x,y,w,h,dx,point){
			var tTileW=this.tileWidth;
			var tTileH=this.tileHeight;
			var tU0=NaN;
			var tU=NaN;
			var tV=Math.floor(y / tTileH);
			var tV1=Math.floor((y+h-0.001)/ tTileH);
			var i=0;
			var tIndex=0;
			if (dx < 0){
				tU0=Math.floor(x / tTileW);
				tU=Math.floor((x+dx-0.001)/ tTileW);
				if (tU==tU0){
					return false;
				}
				else if (tU0-tU==1){
					for (i=tV;i <=tV1;i++){
						tIndex=i *this.numRowsTile+tU;
						if (!this.canGo(tIndex,0)){
							point.x=(tU+1)*this.tileWidth-x;
							return true;
						}
					}
					return false;
				}
				else{
					return false;
				}
			}
			else{
				tU0=Math.floor((x+w-0.001)/ tTileW);
				tU=Math.floor((x+w+dx-0.001)/ tTileW);
				if (tU==tU0){
					return false;
				}
				else if (tU-tU0==1){
					for (i=tV;i <=tV1;i++){
						tIndex=i *this.numRowsTile+tU;
						if (!this.canGo(tIndex,0)){
							point.x=tU *this.tileWidth-x-w;
							return true;
						}
					}
					return false;
				}
				else{
					return false;
				}
			}
		}

		/**
		*目标格子是否是草地
		*@param dx
		*@param dy
		*@return
		*/
		__proto.isGrassTile=function(dx,dy){
			var idx=dy *this.numColumnsTile+dx;
			return this._mapData[idx]==3;
		}

		/**
		*目前像素是否在草丛
		*@param x 坐标 像素
		*@param y
		*@return
		*/
		__proto.isInGrass=function(x,y){
			var idx=Math.floor(y / this.tileHeight)*this.numColumnsTile+Math.floor(x / this.tileWidth);
			return this._mapData[idx]==3;
		}

		__proto.getGridType=function(x,y){
			var idx=Math.floor(y / this.tileHeight)*this.numColumnsTile+Math.floor(x / this.tileWidth);
			return this._mapData[idx];
		}

		/**
		*目标位置可走并且不是草丛.
		*@param dx
		*@param dy
		*@return
		*/
		__proto.isWalkAndNoGrass=function(dx,dy){
			var idx=dy *this.numColumnsTile+dx;
			idx=this._mapData[idx];
			switch(idx){
				case 1:
				case 4:
				case 5:
				case 7:
					return true;
				default :
					return false;
				}
			return false;
		}

		__proto.canGo=function(i,type){
			return Collision._CANGO[this._mapData[i]];
		}

		/*
		//return true;
		i=_mapData[i] //_map.blocks[i];
		switch(i){
			case enumMapElement.ELE_CANTHROUGH:
			case enumMapElement.ELE_GRASS:
			case enumMapElement.ELE_SNOW:
			case enumMapElement.ELE_ICE:
			case enumMapElement.ELE_ALPHAHALF:
				return true;
			case enumMapElement.ELE_NOTTHROUGH:
				return false;
			default:
				return false;
			}*/
		__proto._canGoNewNormal=function(x,y,type){
			return Collision._CANGO[this._mapData[y*this.numColumnsTile+x]];
		}

		__proto.checkinBox2=function(x,y,angle360,roledy,s,boundRect){
			if (angle360==-1){
				s.deltax=s.deltay=0;
				return 1;
			};
			var angle=(angle360 % 360)*0.017453292519943295;
			this.walkGoToC(x,y+roledy,8*Math.cos(angle),8*Math.sin(angle),60,boundRect,this._walkGoTo1);
			s.deltax=this._walkGoTo1.x-x;
			s.deltay=this._walkGoTo1.y-y-roledy;
			s.angle=NaN;
			if (s.deltax==0 && s.deltay==0){
				var xb=this.walkGoToC(x,y+roledy,(angle360<90 || angle360>270)?8:-8,0,10,boundRect,this._walkGoTo2);
				var yb=this.walkGoToC(x,y+roledy,0,(angle360 > 0 && angle360 < 180)?8:-8,10,boundRect,this._walkGoTo3);
				var dx=Math.abs(xb.x-x);
				var dy=Math.abs(yb.y-y-roledy);
				if (dx<8&&dy<8){
					s.angle=-1;
					s.deltax=s.deltay=0;
					return 0;
				}
				else if (dx<8&&dy>=8){
					s.deltay=yb.y-y-roledy;
					s.deltax=0;
				}
				else{
					s.deltax=xb.x-x;
					s.deltay=0;
				}
			}
			return 1;
		}

		__proto._canGoNewGhost=function(x,y,type){
			return !(x <=this.left || x >=this.right || y <=this.top || y >=this.bottom);
		}

		/**
		*
		*@param preY
		*@param y
		*@param x1
		*@param x2
		*@param height
		*@return
		*/
		__proto.getTiltleY=function(x,y,w,h,dy,point){
			var tTileW=this.tileWidth;
			var tTileH=this.tileHeight;
			var tU=Math.floor(x / tTileW);
			var tU1=Math.floor((x+w-0.001)/ tTileW);
			var tV0=NaN;
			var tV=NaN;
			var i=0;
			var tIndex=0;
			if (dy < 0){
				tV0=Math.floor(y / tTileH);
				tV=Math.floor((y+dy-0.001)/ tTileH);
				if (tV==tV0){
					return false;
				}
				else if (tV0-tV==1){
					for (i=tU;i <=tU1;i++){
						tIndex=tV*this.numColumnsTile+i;
						if (!this.canGo(tIndex,0)){
							point.y=(tV+1)*this.tileHeight-y;
							return true;
						}
					}
					return false;
				}
				else{
					return false;
				}
			}
			else{
				tV0=Math.floor((y+h-0.001)/ tTileH);
				tV=Math.floor((y+h+dy-0.001)/ tTileH);
				if (tV==tV0){
					return false;
				}
				else if (tV-tV0==1){
					for (i=tU;i <=tU1;i++){
						tIndex=tV*this.numRowsTile+i;
						if (!this.canGo(tIndex,0)){
							point.y=tV *this.tileHeight-y-h+0.001;
							return true;
						}
					}
					return false;
				}
				else{
					return false;
				}
			}
		}

		__proto.getTileTypeByPoint=function(x,y){
			var tU=Math.floor(x / this.tileWidth);
			var tV=Math.floor(y / this.tileHeight);
			return this._mapData[tV *this.numRowsTile+tU];
		}

		__proto.getTilePostionByRect=function(x,y,w,h){
			var tTileW=this.tileWidth;
			var tTileH=this.tileHeight;
			var tU=Math.floor(x / tTileW);
			var tV=Math.floor(y / tTileH);
			var tU1=Math.floor((x+w)/ tTileW);
			var tV1=Math.floor((y+h)/ tTileH);
			for (var j=tV;j <=tV1;j++){
				for (var i=tU;i <=tU1;i++){
					var tIndex=j *this.numColumnsTile+i;
					if (!this.canGo(tIndex,1))
						return false;
				}
			}
			return true
		}

		/**
		*判断当前的向量经过的区域是否有障碍物
		*@param vsx
		*@param vsy
		*@param vex
		*@param vey
		*@return
		*/
		__proto.checkInObstacle=function(vsx,vsy,vex,vey){
			return false;
		}

		/**
		*
		*@param x
		*@param y
		*@param w
		*@param h
		*@param prex
		*@param prey
		*@return
		*/
		__proto.getTilePostionByRect1=function(x,y,w,h,prex,prey,point){
			var tTileW=this.tileWidth;
			var tTileH=this.tileHeight;
			var tU=Math.floor(x / tTileW);
			var tV=Math.floor(y / tTileH);
			var tU1=Math.floor((x+w)/ tTileW);
			var tV1=Math.floor((y+h)/ tTileH);
			this.tempArr.length=0;
			for (var j=tV;j <=tV1;j++){
				for (var i=tU;i <=tU1;i++){
					var tIndex=j *this.numRowsTile+i;
					if (!this.canGo(tIndex,1)){
						this.tempArr.push(i);
						this.tempArr.push(j);
					}
				}
			};
			var len=this.tempArr.length;
			if (len !=0){
				var dx=x-prex;
				var dy=y-prey;
				point.x=0;
				point.y=0;
				if (dx > 0){
					if (len<=4){
						if (this.tempArr[0]==this.tempArr[1]){
							point.x=this.tempArr[0] *this.tileWidth-w-prex;
							point.y=point.x *dy / dx;
						}
					}
					else{}
				}
				else if (dx==0){
				}
				else{
				}
				return false;
			}
			return true
		}

		__proto.__putPoint=function(dlineX,dlineY,dx,dy,xr,yr,point){
			if (xr > 1 && yr > 1){
				dlineY+=this.tileHeight;
				dlineX+=this.tileWidth;
			}
			else if (xr > 1){
				if (dy < 0){
					point.y=dlineY+this.tileHeight;
				}
				else{
					point.y=dlineY;
				}
				point.x=Math.floor(point.y *dx / dy);
				if (point.x *dx < 0){
					point.x=point.y=0;
				}
				return;
			}
			else if (yr > 1){
				if (dx > 0){
					point.x=dlineX;
				}
				else{
					point.x=dlineX+this.tileWidth;
				}
				point.y=Math.floor(point.x *dy / dx);
				if (point.y *dy < 0){
					point.x=point.y=0;
				}
				return;
			}
			else{
				if (dy < 0){
					dlineY+=this.tileHeight;
				}
				if (dx < 0){
					dlineX+=this.tileWidth;
				}
			}
			if (dlineX *dx > 0 && Math.abs(dlineX)< Math.abs(dx)){
				point.x=dlineX;
				point.y=Math.floor(point.x *dy / dx);
			}
			else if (dlineY *dy > 0 && Math.abs(dlineY)< Math.abs(dy)){
				point.y=dlineY;
				point.x=Math.floor(point.y *dx / dy);
			}
			else{
				point.x=point.y=0;
			}
		}

		/**
		*x y轴小于一个碰撞格子的位移 能移多少
		*@param x
		*@param y
		*@param w
		*@param h
		*@param prex
		*@param prey
		*@return
		*/
		__proto.getTileLessGrid=function(x,y,w,h,dx,dy,point){
			var tU=Math.floor((x+dx)/ this.tileWidth);
			var tV=Math.floor((y+dy)/ this.tileHeight);
			var tU1=Math.floor((x+dx+w)/ this.tileWidth);
			var tV1=Math.floor((y+dy+h)/ this.tileHeight);
			var b=0;
			var xr=0;
			var yr=0;
			var xi=9999;
			var yi=9999;
			for (var j=tV;j <=tV1;j++){
				for (var i=tU;i <=tU1;i++){
					var tIndex=j *this.numRowsTile+i;
					if (!this.canGo(tIndex,1)){
						if (xi !=i){
							if (i < xi){
								xi=i;
							}
							xr++;
						}
						if (b !=j+1){
							if (j < yi){
								yi=j;
							}
							b=j+1;
							yr++;
						}
					}
				}
			};
			var xp=0;
			var yp=0;
			if (b==0)return true;
			var dx1=NaN,dy1=NaN,dx2=NaN,dy2=NaN;
			var dlineY=0;
			var dlineX=0;
			if (dx > 0){
				if (dy < 0){
					dlineY=yi *this.tileHeight-y+Collision.DEFA;
					dlineX=xi *this.tileWidth-Collision.DEFA-x-w;
					this.__putPoint(dlineX,dlineY,dx,dy,xr,yr,point);
				}
				else if (dy > 0){
					dlineY=yi *this.tileHeight-Collision.DEFA-y-h;
					dlineX=xi *this.tileWidth-Collision.DEFA-x-w;
					this.__putPoint(dlineX,dlineY,dx,dy,xr,yr,point);
				}
				else{
					point.x=(xi *this.tileWidth-Collision.DEFA)-x-w;
					point.y=0;
				}
				return false;
			}
			else if (dx==0){
				if (dy < 0){
					point.y=((yi+1)*this.tileHeight+Collision.DEFA)-y;
					point.x=point.y *dx / dy;
				}
				else if (dy > 0){
					point.y=(yi *this.tileHeight-Collision.DEFA)-y-h;
					point.x=point.y *dx / dy;
				}
				return false;
			}
			else{
				if (dy < 0){
					dlineY=yi *this.tileHeight-y+Collision.DEFA;
					dlineX=xi *this.tileWidth+Collision.DEFA-x;
					this.__putPoint(dlineX,dlineY,dx,dy,xr,yr,point);
				}
				else if (dy > 0){
					dlineY=yi *this.tileHeight-Collision.DEFA-y-h;
					dlineX=xi *this.tileWidth+Collision.DEFA-x;
					this.__putPoint(dlineX,dlineY,dx,dy,xr,yr,point);
				}
				else{
					point.x=((xi+1)*this.tileWidth+Collision.DEFA)-x;
					point.y=0;
				}
				return false;
			}
			return true;
		}

		/**
		*x y轴小于一个碰撞格子的位移 能移多少
		*@param x
		*@param y
		*@param w
		*@param h
		*@param prex
		*@param prey
		*@return
		*/
		__proto.getTileLessGrid11=function(x,y,w,h,dx,dy,point){
			var tU=Math.floor((x+dx)/ this.tileWidth);
			var tV=Math.floor((y+dy)/ this.tileHeight);
			var tU1=Math.floor((x+dx+w)/ this.tileWidth);
			var tV1=Math.floor((y+dy+h)/ this.tileHeight);
			x=Math.round(x);
			y=Math.round(y);
			var b=0;
			var xr=0;
			var yr=0;
			var xi=0;
			var yi=0;
			var dy1=NaN;
			var dx1=NaN;
			var dx2=NaN;
			var dy2=NaN;
			for (var j=tV;j <=tV1;j++){
				for (var i=tU;i <=tU1;i++){
					var tIndex=j *this.numRowsTile+i;
					if (!this.canGo(tIndex,1)){
						if (xi !=i){
							xi=i;
							xr++;
						}
						if (b !=j+1){
							yi=j;
							b=j+1;
							yr++;
						}
					}
				}
			}
			if (b==0)return true;
			point.x=point.y=0;
			if (dx > 0){
				if (dy < 0){
					dy1=((yi+1)*this.tileHeight+0.01)-y;
					dx1=dy1 *dx / dy;
					dx2=(xi*this.tileWidth-0.01)-x-w;
					dy2=dx2 *dy / dx;
					this.__getPoint(dx1,dy1,dx2,dy2,dx,xr,yr,point);
					return false;
				}
				else if (dy > 0){
					dy1=(yi *this.tileHeight-0.01)-y-h;
					dx1=dy1 *dx / dy;
					dx2=(xi*this.tileWidth-0.01)-x-w;
					dy2=dx2 *dy / dx;
					this.__getPoint(dx1,dy1,dx2,dy2,dx,xr,yr,point);
					return false;
				}
				else{
					point.x=(xi *this.tileWidth-0.01)-x-w;
					point.y=0;
					return false;
				}
			}
			else if (dx==0){
				if (dy < 0){
					point.y=((yi+1)*this.tileHeight+0.01)-y;
					point.x=point.y *dx / dy;
				}
				else if (dy > 0){
					point.y=(yi *this.tileHeight-0.01)-y-h;
					point.x=point.y *dx / dy;
				}
				return false;
			}
			else{
				if (dy < 0){
					dy1=((yi+1)*this.tileHeight+0.01)-y;
					dx1=dy1 *dx / dy;
					dx2=((xi+1)*this.tileWidth+0.01)-x;
					dy2=dx2 *dy / dx;
					this.__getPoint(dx1,dy1,dx2,dy2,dx,xr,yr,point);
					return false;
				}
				else if (dy > 0){
					dy1=(yi *this.tileHeight-0.01)-y-h;
					dx1=dy1 *dx / dy;
					dx2=((xi+1)*this.tileWidth+0.01)-x;
					dy2=dx2 *dy / dx;
					this.__getPoint(dx1,dy1,dx2,dy2,dx,xr,yr,point);
					return false;
				}
				else{
					point.x=((xi+1)*this.tileWidth+0.01)-x;
					point.y=0;
				}
				return false;
			}
			return true;
		}

		__proto.getIndex=function(x,y){
			return Math.floor(y / this.tileHeight)*this.numColumnsTile+Math.floor(x / this.tileWidth);
		}

		__proto.chgRect=function(src,dec){
			var movePt=new Point(0,0);
			var dx=NaN;
			var dy=NaN;
			for (var i=0,sz=dec.length;i < sz;i++){
				if (!this.canGoNew(0|(dec[i][0]/this.tileWidth),0|(dec[i][1]/this.tileHeight),0)){
					dx=dec[i][0]-src[i][0];
					dy=dec[i][1]-src[i][1];
					movePt.x=Math.abs(dx)> Math.abs(movePt.x)?dx:movePt.x;
					movePt.y=Math.abs(dy)> Math.abs(movePt.y)?dy:movePt.y;
				}
			}
			return movePt;
		}

		__proto.walkGoTo=function(x,y,dx,dy,count,boundRect){
			(count===void 0)&& (count=60);
			if (boundRect==null)boundRect=Collision.BoundRect;
			var points=boundRect;
			var i=0,j=0,s=points.length;
			var rs=[];
			for (i=0;i < count;i++){
				x+=dx;
				y+=dy;
				for (j=0;j <s;j+=2){
					if (!this.canGoNew(0 | ((x+points[j])/ this.tileWidth),0 | ((y+points[j+1])/ this.tileHeight),0)){
						rs.isBoom=true;
						rs.push(x-dx);
						rs.push(y-dy);
						return rs;
					}
				}
			}
			rs.isBoom=false;
			rs.push(x);
			rs.push(y);
			return [x,y];
		}

		__proto.walkGoToC=function(x,y,dx,dy,count,boundRect,rs){
			if (boundRect==null)boundRect=Collision.BoundRect;
			var points=boundRect;
			var i=0,j=0,s=points.length;
			for (i=0;i < count;i++){
				x+=dx;
				y+=dy;
				for (j=0;j <s;j+=2){
					if (!this.canGoNew(0 | ((x+points[j])/ this.tileWidth),0 | ((y+points[j+1])/ this.tileHeight),0)){
						rs.isBoom=true;
						rs.x=x-dx;
						rs.y=y-dy;
						return rs;
					}
				}
			}
			rs.isBoom=false;
			rs.x=x;
			rs.y=y;
			return rs;
		}

		__proto.walkGoBack=function(x,y,dx,dy,count,boundRect){
			(count===void 0)&& (count=60);
			if (boundRect==null)boundRect=Collision.BoundRect;
			var points=boundRect;
			var i=0,j=0,s=points.length;
			for (i=0;i < count;i++){
				x+=dx;
				y+=dy;
				var b=true;
				for (j=0;j <s;j+=2){
					if (!this.canGoNew(0 | ((x+points[j])/ this.tileWidth),0 | ((y+points[j+1])/ this.tileHeight),0)){
						b=false;
					}
				}
				if (b)
					return [x,y];
			}
			return [x,y];
		}

		__proto.flashGoTo=function(x,y,dx,dy,boundRect){
			if (boundRect==null)boundRect=Collision.BoundRect;
			var j=0,s=boundRect.length;
			x+=dx;
			y+=dy;
			for (j=0;j < s;j++){
				if (!this.canGoNew(0 | ((x+boundRect[j])/ this.tileWidth),0 | ((y+boundRect[j+1])/ this.tileHeight),0)){
					var count=0;
					var adx=Math.abs(dx);
					var ady=Math.abs(dy);
					count=Math.floor(Math.max(adx,ady)/ 8);
					return this.walkGoBack(x,y,-dx / count,-dy / count,count,boundRect);
				}
			}
			return [x,y];
		}

		/**
		*
		*@param dx1 y轴相撞
		*@param dy1 y轴相撞
		*@param dx2 x轴相撞
		*@param dy2 x轴相撞
		*@param dx
		*@param xr
		*@param yr
		*@param point
		*/
		__proto.__getPoint=function(dx1,dy1,dx2,dy2,dx,xr,yr,point){
			if (yr > 1&&xr > 1){
				if(dx2 *dx > 0){
					point.x=dx2;
					point.y=dy2;
				}
				else{
					point.x=dx1;
					point.y=dy1;
				}
			}
			else if (xr > 1){
				point.x=dx1;
				point.y=dy1;
			}
			else if (yr > 1){
				point.x=dx2;
				point.y=dy2;
			}
			else{
				if (dx > 0){
					if (dx1>dx2){
						if (dx > dx1){
							point.x=dx1;
							point.y=dy1;
						}
						else{
							point.x=dx2;
							point.y=dy2;
						}
					}
					else{
						if (dx > dx2){
							point.x=dx2;
							point.y=dy2;
						}
						else{
							point.x=dx1;
							point.y=dy1;
						}
					}
				}
				else{
					if (dx1<dx2){
						if (dx < dx1){
							point.x=dx1;
							point.y=dy1;
						}
						else{
							point.x=dx2;
							point.y=dy2;
						}
					}
					else{
						if (dx < dx2){
							point.x=dx2;
							point.y=dy2;
						}
						else{
							point.x=dx1;
							point.y=dy1;
						}
					}
				}
			}
		}

		__getset(1,Collision,'I',function(){Collision._I=Collision._I|| new Collision();
			return Collision._I;
		});

		Collision.initDoor=function(b){
			Collision._CANGO[7]=b;
		}

		Collision.rectClipPoint=function(width,height,step,array){
			if (array==null)array=[];
			function lineClip (bx,by,ex,ey,maxs,r){
				for (var i=0;i < maxs;i++){
					r.push(bx+(ex-bx)/ maxs *i);
					r.push(by+(ey-by)/ maxs *i);
				}
			}
			Collision.BoundRect=array;
			var sx=Math.ceil(width / step);
			var sy=Math.ceil(height / step);
			lineClip(0,0,width,0,sx,Collision.BoundRect);
			lineClip(width,0,width,height,sy,Collision.BoundRect);
			lineClip(width,height,0,height,sx,Collision.BoundRect);
			lineClip(0,height,0,0,sy,Collision.BoundRect);
			return Collision.BoundRect;
		}

		Collision.rectClipPointNew=function(width,height,step,array){
			if (array==null)array=[];
			function lineClip (bx,by,ex,ey,maxs,r){
				for (var i=0;i < maxs;i++){
					r.push(bx+(ex-bx)/ maxs *i);
					r.push(by+(ey-by)/ maxs *i);
				}
			};
			var sx=Math.ceil(width / step);
			var sy=Math.ceil(height / step);
			lineClip(0,0,width,0,sx,array);
			lineClip(width,0,width,height,sy,array);
			lineClip(width,height,0,height,sx,array);
			lineClip(0,height,0,0,sy,array);
			return array;
		}

		Collision._I=null
		Collision.DEFA=1;
		Collision.BoundRect=null
		__static(Collision,
		['_CANGO',function(){return this._CANGO=[false,true,false,true,true,true,false,false];}
		]);
		Collision.__init$=function(){
			//class WalkGoToPoint
			WalkGoToPoint=(function(){
				function WalkGoToPoint(){
					this.isBoom=false;
					this.x=NaN;
					this.y=NaN;
				}
				__class(WalkGoToPoint,'');
				return WalkGoToPoint;
			})()
		}

		return Collision;
	})()


	/**
	*...
	*@author ...
	*/
	//class utils.Parabola
	var Parabola=(function(){
		function Parabola(){
			this.m_fA=NaN;
			this.m_fB=NaN;
			this.m_fC=NaN;
			this.m_bInit=false;
			this.m_fA=0;
			this.m_fB=0;
			this.m_fC=0;
			this.m_bInit=false;
		}

		__class(Parabola,'utils.Parabola');
		var __proto=Parabola.prototype;
		//-------------------------------------------------------------------
		__proto.CalcParabolaParam=function(x1,y1,x2,y2,x3,y3){
			this.m_fA=(y3-y1-(x3-x1)*(y2-y1)/ (x2-x1))/ ((x3 *x3-x1 *x1)+(x3-x1)*(x1 *x1-x2 *x2)/ (x2-x1));
			this.m_fB=(y2-y1)/ (x2-x1)+(x1 *x1-x2 *x2)/ (x2-x1)*this.m_fA;
			this.m_fC=y1-this.m_fA *x1 *x1-this.m_fB *x1;
			this.m_bInit=true;
		}

		//-------------------------------------------------------------------
		__proto.GetParabolaY=function(x){
			if(this.m_bInit){
				return (this.m_fA *x *x+this.m_fB *x+this.m_fC);
			}
			return 0;
		}

		/**
		*
		*@param time 当前运行的时间
		*@param speed 子弹速度
		*@param sin 角度sin
		*@param cos 角度cos
		*@return deltaX deltaY
		*/
		__proto.getPosByTime=function(time,speed,sin,cos){
			var x1=speed*time;
			var y1=this.GetParabolaY(x1);
			Parabola.TEMPPoint.y=x1 *sin+y1 *cos;
			Parabola.TEMPPoint.x=x1 *cos-y1 *sin;
			return Parabola.TEMPPoint;
		}

		__getset(1,Parabola,'I',function(){
			Parabola._I=Parabola._I || new Parabola();
			return Parabola._I;
		});

		Parabola.getParabola=function(len,top){
			len=0|len;
			top=0|top;
			if (!Parabola.Lists[len+"_"+top]){
				var parabola=Parabola.Lists[len+"_"+top]=new Parabola();
				parabola.CalcParabolaParam(0,0,len,0,1 / 2 *len,top);
			}
			return Parabola.Lists[len+"_"+top];
		}

		Parabola.Lists={};
		Parabola._I=null
		__static(Parabola,
		['TEMPPoint',function(){return this.TEMPPoint=new Point();}
		]);
		return Parabola;
	})()


	/**
	*...
	*@author Chen Gong
	*/
	//class utils.SkillMgr
	var SkillMgr=(function(){
		function SkillMgr(){
			this.randomCount=0;
		}

		__class(SkillMgr,'utils.SkillMgr');
		var __proto=SkillMgr.prototype;
		__proto.testRandomSkill=function(userLevel,userSkillsOwned,count,skillNum,heroType,subHeroType){
			var _arr=[];
			for (var i=0;i < count;i++){
				_arr=_arr.concat(this.getRandomSkills(userLevel,userSkillsOwned,skillNum,heroType,subHeroType));
			};
			var skillObj={};
			for (var j=0;j < _arr.length;j++){
				var _skillId=0 | _arr[j] / 1000;
				if (!skillObj[_skillId]){
					skillObj[_skillId]=0;
				}
				++skillObj[_skillId];
			}
			return skillObj;
		}

		/**
		*随机获取每次升级后所获得的3种技能
		*@param
		*@return Array ex. [1,1,3]
		*/
		__proto.getRandomSkills=function(userLevel,userSkillsOwned,skillNum,heroType,subHeroType,_skills){
			(skillNum===void 0)&& (skillNum=2);
			(heroType===void 0)&& (heroType=0);
			(subHeroType===void 0)&& (subHeroType=0);
			utils.SkillMgr.skills=_skills;
			subHeroType=0 | subHeroType;
			var skills=[];
			var skill=0;
			for (var i=0;i < skillNum;i++){
				this.randomCount=0;
				skill=this.getSkillByType(userLevel,userSkillsOwned,skills,heroType,subHeroType);
				skills.push(skill);
			}
			return skills;
		}

		/**
		*随机获取每次升级后所获得的3种技能类型
		*@param
		*@return Array ex. [1,1,3]
		*/
		__proto.getRandomSkillTypes=function(){
			var skillsTypes=[];
			var skillType=0;
			for (var i=0;i < 3;i++){
				skillType=this.getUnitSkillType();
				skillsTypes.push(skillType);
			}
			return skillsTypes;
		}

		/**
		*随机获取一种技能类型
		*@param
		*@return int
		*/
		__proto.getUnitSkillType=function(){
			var skillTypeObj=utils.SkillMgr.skillTypeJsonData;
			var _skillTypeObjKeys=Object.keys(skillTypeObj);
			var _key;
			var skillType;
			var totalNum=0;
			var num=Math.random();
			var $each__key;
			for($each__key in _skillTypeObjKeys){
				_key=_skillTypeObjKeys[$each__key];
				skillType=utils.SkillMgr.skillTypeJsonData[_key];
				totalNum+=skillType.probability;
			};
			var currentProb=0;
			var $each__key;
			for($each__key in _skillTypeObjKeys){
				_key=_skillTypeObjKeys[$each__key];
				skillType=utils.SkillMgr.skillTypeJsonData[_key];
				currentProb+=skillType.probability;
				if(num <=(currentProb / totalNum)){
					return skillType.ID;
				}
			}
			return 0;
		}

		__proto.getSkillByHeroSubType=function(heroType,subHeroType){
			(heroType===void 0)&& (heroType=0);
			(subHeroType===void 0)&& (subHeroType=0);
			return SMethod.getSkillByHeroSubType(heroType,subHeroType,utils.SkillMgr.skills);
		}

		/**
		*根据技能类型随机获取一种技能
		*@param skillType
		*@return skillID
		*/
		__proto.getSkillByType=function(userLevel,userSkillsOwned,randomSkillIDs,heroType,subHeroType){
			(heroType===void 0)&& (heroType=0);
			(subHeroType===void 0)&& (subHeroType=0);
			var skillsObj=this.getSkillByHeroSubType(heroType,subHeroType);
			if (!skillsObj){
				skillsObj=utils.SkillMgr.skills;
			};
			var _skillsObjKeys=Object.keys(skillsObj);
			var _key;
			var skill;
			var skillWithLevel=0;
			var totalNum=0;
			var $each__key;
			for($each__key in _skillsObjKeys){
				_key=_skillsObjKeys[$each__key];
				skill=skillsObj[_key];
				if(userSkillsOwned[skill.skillID] && userSkillsOwned[skill.skillID].count >=skill.accumulate){
					continue ;
				}
				if (skill.frontSkill !=0 && !userSkillsOwned[skill.frontSkill]){
					continue ;
				}
				if (userLevel < skill.minimumLevel){
					continue ;
				}
				if(randomSkillIDs.indexOf((skill.skillID *1000)+1)!=-1){
					continue ;
				}
				if(this.checkConflict(skill.ID,userSkillsOwned,skillsObj)){
					continue ;
				}
				totalNum+=skill.probability;
			};
			var num=Math.random();
			var currentProb=0;
			var $each__key;
			for($each__key in _skillsObjKeys){
				_key=_skillsObjKeys[$each__key];
				skill=skillsObj[_key];
				skillWithLevel=this.getSkillLevel(skill.skillID,userSkillsOwned);
				if(userSkillsOwned[skill.skillID] && userSkillsOwned[skill.skillID].count >=skill.accumulate){
					continue ;
				}
				if (skill.frontSkill !=0 && !userSkillsOwned[skill.frontSkill]){
					continue ;
				}
				if(userLevel < skill.minimumLevel){
					continue ;
				}
				if(randomSkillIDs.indexOf(skillWithLevel)!=-1){
					continue ;
				}
				if(this.checkConflict(skill.ID,userSkillsOwned,skillsObj)){
					continue ;
				}
				currentProb+=skill.probability;
				if(num <=(currentProb / totalNum)){
					return skillWithLevel;
				}
			}
			this.randomCount++;
			if (this.randomCount >=10){
				return 0;
			}
			return this.getSkillByType(userLevel,userSkillsOwned,randomSkillIDs,heroType,subHeroType);
		}

		__proto.getSkillLevel=function(skillID,userSkillsOwned){
			if (!userSkillsOwned[skillID])
				return skillID *1000+1;
			return skillID *1000+userSkillsOwned[skillID].count+1;
		}

		/*-------------------------------------------------新版技能-------------------------------------------------*/
		__proto.checkConflict=function(skillID,userSkillsOwned,skillsObj){
			var conflictStr=skillsObj[skillID].conflictSkills;
			var conflicts=conflictStr.split(',');
			var userSkillsOwnedKeys=Object.keys(userSkillsOwned);
			var _key;
			var $each__key;
			for($each__key in userSkillsOwnedKeys){
				_key=userSkillsOwnedKeys[$each__key];
				if (conflicts.indexOf(_key)!=-1){
					return true;
				}
			}
			return false;
		}

		__getset(1,SkillMgr,'instance',function(){
			if (!SkillMgr._instance){
				SkillMgr._instance=new SkillMgr();
			}
			return SkillMgr._instance;
		});

		SkillMgr.skills=null;
		SkillMgr._instance=null;
		__static(SkillMgr,
		['skillTypeJsonData',function(){return this.skillTypeJsonData={1:{"ID":1,"probability":20}};}
		]);
		return SkillMgr;
	})()


	/**
	*...
	*@author ...
	*/
	//class utils.SMethod
	var SMethod=(function(){
		function SMethod(){}
		__class(SMethod,'utils.SMethod');
		SMethod.getPriorityGuide=function(_curStep){
			var _priorityStep=-1;
			if ((_curStep & enumUserEnterGameType.newUser)!=enumUserEnterGameType.newUser){
				_priorityStep=enumUserEnterGameType.newUser;
			}
			else if ((_curStep & enumUserEnterGameType.freeModel)!=enumUserEnterGameType.freeModel){
				_priorityStep=enumUserEnterGameType.freeModel;
			}
			else if ((_curStep & enumUserEnterGameType.teamModel)!=enumUserEnterGameType.teamModel){
				_priorityStep=enumUserEnterGameType.teamModel;
			}
			else if ((_curStep & enumUserEnterGameType.skillButton)!=enumUserEnterGameType.skillButton){
				_priorityStep=enumUserEnterGameType.skillButton;
			}
			else if ((_curStep & enumUserEnterGameType.achieveButton)!=enumUserEnterGameType.achieveButton){
				_priorityStep=enumUserEnterGameType.achieveButton;
			}
			return _priorityStep;
		}

		SMethod.getSkillByHeroSubType=function(heroType,subHeroType,_skills,_skillsJsonData){
			if (_skillsJsonData !=null){
				utils.SMethod.skillsJsonData=_skillsJsonData;
			}
			if (utils.SMethod.skillsJsonData==null){
				var aaa=[];
				var bbb=[];
				var abobj;
				var cfg={};
				var obj;
				var _loadListKey=Object.keys(_skills);
				var _key;
				var _saveKey;
				var _saveKey1;
				var $each__key;
				for($each__key in _loadListKey){
					_key=_loadListKey[$each__key];
					obj=_skills[_key];
					_saveKey=obj.heroType+"_"+obj.type;
					if (obj.heroType==0){
						_saveKey="0_0";
					}
					if (!cfg[_saveKey])cfg[_saveKey]={};
					cfg[_saveKey][obj.ID]=_skills[_key];
					_saveKey1=obj.heroType+"_-1";
					if (!cfg[_saveKey1])cfg[_saveKey1]={};
					cfg[_saveKey1][obj.ID]=_skills[_key];
				}
				utils.SMethod.skillsJsonData=cfg;
			};
			var key=heroType+"_"+subHeroType;
			var obj0=utils.SMethod.skillsSubHeroType[key];
			if (obj0){
				return obj0;
			};
			var obj1=utils.SMethod.skillsJsonData["0_0"];
			var obj2=utils.SMethod.skillsJsonData[heroType+"_0"];
			var obj3=utils.SMethod.skillsJsonData[heroType+"_"+subHeroType];
			if (!obj3){
				obj3={};
			};
			var o1;
			var o2;
			var $each_o1;
			for($each_o1 in obj2){
				o1=obj2[$each_o1];
				obj3[o1.ID]=o1;
			}
			var $each_o2;
			for($each_o2 in obj1){
				o2=obj1[$each_o2];
				obj3[o2.ID]=o2;
			}
			utils.SMethod.skillsSubHeroType[key]=obj3;
			return obj3;
		}

		SMethod.getSameWeek=function(preTime,afterTime){
			var a=new Date(preTime).getTime();
			var b=new Date(afterTime).getTime();
			var old_count=0 | (a+28800000)/ 86400000;
			var now_other=0 | (b+28800000)/ 86400000;
			return (0 | ((old_count-4)/ 7))==(0 | ((now_other-4)/ 7));
		}

		SMethod.randomStr=function(randomFlag,min,max){
			(max===void 0)&& (max=0);
			var str="";
			var range=min;
			var pos=NaN;
			if(randomFlag){
				range=Math.round(Math.random()*(max-min))+min;
			}
			for (var i=0;i < range;i++){
				pos=Math.round(Math.random()*(SMethod.arr.length-1));
				str+=SMethod.arr[pos];
			}
			return str;
		}

		SMethod.skillsJsonData=null;
		SMethod.skillsSubHeroType={};
		__static(SMethod,
		['arr',function(){return this.arr=['0','1','2','3','4','5','6','7','8','9','a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'];}
		]);
		return SMethod;
	})()


	/**
	*...
	*@author
	*/
	//class utils.UserBuffer
	var UserBuffer=(function(){
		function UserBuffer(){
			this._buffersInterval=[];
			this._buffersValue=[];
			this._buffersValueByKey=[];
			this._lastAddTime={};
			this._chgCallBacks={};
			this._endCallBacks={};
			this.changeNotifiyFun=null;
		}

		__class(UserBuffer,'utils.UserBuffer');
		var __proto=UserBuffer.prototype;
		__proto._clearAll=function(array,isForce){
			for (var i=0,n=array.length;i < n;i++){
				var item=array [i];
				delete this._lastAddTime[item.type];
				if (!UserBuffer.KillNotRemove[item.type]||isForce){
					item.recover();
					array.splice(i,1);
					i--;
					n--;
				}
			}
		}

		/**
		*清除buffer
		*@param type buffer type值
		*@return 是否删除buffer
		*/
		__proto.clearByType=function(type){
			var values=this._buffersValueByKey[type];
			var i=0,len=0;
			var item;
			if (!values){
				len=this._buffersInterval.length;
				for (i=0,len=this._buffersInterval.length;i < len;i++){
					item=this._buffersInterval [i];
					if (item.type==type){
						item.recover();
						this._buffersInterval.splice(i,1);
						this._endCallBacks[type] && this._endCallBacks[type](0,type);
						return true;
					}
				}
				return false;
			}
			else{
				len=values.length;
				if (len==0){
					return false;
				}
				else{
					for (i=0;i < len;i++){
						item=values[i];
						item.recover();
						var index=this._buffersValue.indexOf(item);
						if (index !=-1)this._buffersValue.splice(index,1);
					}
					this._chgCallBacks[type] && this._chgCallBacks[type](0,0,true,type);
					this._endCallBacks[type] && this._endCallBacks[type](0,type);
					values.length=0;
					values.preValue=0;
					return true;
				}
			}
			delete this._lastAddTime[type];
		}

		/**
		*清理所有Buffer
		*/
		__proto.clearAllBuffer=function(isForce){
			for (var key in this._buffersValueByKey){
				if (!UserBuffer.KillNotRemove[key]||isForce){
					this._buffersValueByKey[key].preValue=0;
					this._buffersValueByKey[key].length=0;
				}
			}
			this._clearAll(this._buffersValue,isForce);
			this._clearAll(this._buffersInterval,isForce);
		}

		/**
		*从小到大
		*@param a
		*@param b
		*@return
		*/
		__proto.sortFun=function(a,b){
			return a.endTime-b.endTime;
		}

		/**
		*
		*@param type
		*@param duration
		*@param value
		*/
		__proto.addBuffer=function(now,type,duration,value,interval,callback,endCallback){
			var lastTime=this._lastAddTime[type] || 0;
			this._lastAddTime[type]=now;
			var cd=UserBuffer.Cds[type] || 0;
			if (now-lastTime<cd){
				return UserBuffer.CD;
			}
			if (callback !=null){
				this._chgCallBacks[type]=callback;
			}
			if (endCallback !=null){
				this._endCallBacks[type]=endCallback;
			}
			if (!interval){
				var bufs=this._buffersValueByKey[type];
				if (!bufs){
					bufs=this._buffersValueByKey[type]=[];
				};
				var rs=BufferItem.createBufferItem(now,type,duration,value);
				bufs.push(rs);
				this._buffersValue.push(rs);
				this._buffersValue.sort(this.sortFun);
				var num=this.getValue(type);
				callback && callback(this.getValue(type),this.getBufferFloors(type),(bufs).preValue !=num,type);
				(bufs).preValue=num;
				return bufs.length;
			}
			else{
				var rs1=BufferIntervalItem.createBufferItem(now,type,duration,value,interval);
				this._buffersInterval.push(rs1);
				return 1;
			}
		}

		/**
		*检查是否在CD中
		*@param type
		*@param now
		*@param t
		*/
		__proto.checkBuffer=function(type,now,t){
			var lastTime=this._lastAddTime[type] || 0;
			return now+t-lastTime > (UserBuffer.Cds[type] || 0);
		}

		__proto.checkBufferIn=function(type,now){
			var lastTime=this._lastAddTime[type] || 0;
			return now-lastTime <=(UserBuffer.Durations[type] || 0);
		}

		/**
		*获取buffer的层数
		*@param type
		*@return
		*/
		__proto.getBufferFloors=function(type){
			var bufs=this._buffersValueByKey[type];
			if (bufs){
				return bufs.length;
			}
			return 0;
		}

		/**
		*返回当前Buffer值
		*@param id bufferID
		*@return
		*/
		__proto.getValue=function(id){
			var values=this._buffersValueByKey[id];
			var total=0;
			if (values&&values.length>0){
				for (var i=0,n=values.length;i < n;i++){
					total+=(values [i]).bufferValue;
				};
				var maxValue=UserBuffer.MaxNum[id] || 0;
				if (maxValue !=0&&Math.abs(maxValue)<Math.abs(total)){
					total=maxValue;
				}
			}
			return total;
		}

		__proto.hasAddBuff=function(id){
			return this._lastAddTime[id] > 0;
		}

		__proto.willUpdate=function(){
			return this._buffersValue.length || this._buffersInterval.length;
		}

		__proto.update=function(now){
			if(!this.willUpdate())return;
			var keys;
			for (var i=0,len=this._buffersValue.length;i < len;i++){
				var buffer=this._buffersValue [i];
				if (now >=buffer.endTime)
				{keys=keys|| [];
					this._buffersValue.splice(i,1);
					var buffers=this._buffersValueByKey[buffer.type];
					var index=buffers.indexOf(buffer);
					if (keys.indexOf(buffer.type)==-1){
						keys.push(buffer.type);
					}
					if (index !=-1)buffers.splice(index,1);
					else{
						console.log(">>>>>>>>>>error");
					}
					i--;
					len--;
					buffer.recover();
				}
				else{
					break ;
				}
			}
			if (keys){
				for (i=0,len=keys.length;i < len;i++){
					var k=keys[i];
					var value=this.getValue(k);
					var bufs=this._buffersValueByKey[k];
					this._chgCallBacks[k] && this._chgCallBacks[k](value,this.getBufferFloors(k),(bufs).preValue !=value,k);
					(bufs).preValue=value;
					if (value==0){
						this._endCallBacks[k] && this._endCallBacks[k](value,k);
					}
				}
			}
			for (i=0,len=this._buffersInterval.length;i < len;i++){
				var itemInterVal=this._buffersInterval [i];
				if (itemInterVal.update(now,this._chgCallBacks)){
					itemInterVal.recover();
					this._buffersInterval.splice(i,1);
					i--;
					len--;
				}
			}
		}

		UserBuffer.initCfg=function(data){
			for (var key in data){
				var item=data[key];
				UserBuffer.Cds[key]=item.cd;
				UserBuffer.Durations[key]=item.duration;
				UserBuffer.KillNotRemove[key]=item.killNotRemove;
				UserBuffer.MaxNum[key]=item.maxNum;
			}
		}

		UserBuffer.CD=-2;
		UserBuffer.KillNotRemove=[];
		UserBuffer.MaxNum=[];
		UserBuffer.Cds=[];
		UserBuffer.Durations=[];
		return UserBuffer;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class laya8.core.backpack.Backpack
	var Backpack=(function(){
		function Backpack(game,eventHandler){
			this.sender=null;
			this.game=null;
			this.eventHandler=null;
			this.game=game;
			this.eventHandler=eventHandler;
			this.sender=new BackpackMessageSender(game);
		}

		__class(Backpack,'laya8.core.backpack.Backpack');
		var __proto=Backpack.prototype;
		__proto.listBackpacks=function(){
			this.sender.listBackpacks();
		}

		__proto.unlockCells=function(backpackId,unlockTo){
			this.sender.unlockCells(backpackId,unlockTo);
		}

		__proto.moveItem=function(fromBackpackId,toBackpackId,itemStaticId,amount){
			this.sender.moveItem(fromBackpackId,toBackpackId,itemStaticId,amount);
		}

		__proto.useItem=function(backpackId,itemStaticId,amount){
			this.sender.useItem(backpackId,itemStaticId,amount);
		}

		__proto.onListBackpacksResult=function(dat){
			this.eventHandler.onListBackpacksResult(dat);
		}

		__proto.onUnlockCellsResult=function(dat){
			this.eventHandler.onUnlockCellsResult(dat);
		}

		__proto.onMoveItemResult=function(dat){
			this.eventHandler.onMoveItemResult(dat);
		}

		__proto.onUseItemResult=function(dat){
			this.eventHandler.onUseItemResult(dat);
		}

		return Backpack;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class laya8.core.MessageHandlerBase
	var MessageHandlerBase=(function(){
		function MessageHandlerBase(game){
			this.game=null;
			this.game=game;
		}

		__class(MessageHandlerBase,'laya8.core.MessageHandlerBase');
		return MessageHandlerBase;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class laya8.core.MessageSenderBase
	var MessageSenderBase=(function(){
		function MessageSenderBase(game){
			this.game=null;
			this.socket=null;
			this.game=game;
			this.socket=game.socket;
		}

		__class(MessageSenderBase,'laya8.core.MessageSenderBase');
		return MessageSenderBase;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class laya8.core.backpack.ItemInfo
	var ItemInfo=(function(){
		function ItemInfo(){
			this.staticId=0;
			this.amount=0;
		}

		__class(ItemInfo,'laya8.core.backpack.ItemInfo');
		return ItemInfo;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class laya8.core.backpack.ListBackpacksResultInfo
	var ListBackpacksResultInfo=(function(){
		function ListBackpacksResultInfo(){
			this.gameId=0;
			this.userId=0;
			this.backpacks
		}

		__class(ListBackpacksResultInfo,'laya8.core.backpack.ListBackpacksResultInfo');
		return ListBackpacksResultInfo;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class laya8.core.backpack.MoveItemResultInfo
	var MoveItemResultInfo=(function(){
		function MoveItemResultInfo(){
			this.amount=0;
			this.fromBackpackId=0;
			this.gameId=0;
			this.isSuccess=false;
			this.itemStaticId=0;
			this.toBackpackId=0;
			this.userId=0;
		}

		__class(MoveItemResultInfo,'laya8.core.backpack.MoveItemResultInfo');
		return MoveItemResultInfo;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class laya8.core.backpack.UnlockCellsResultInfo
	var UnlockCellsResultInfo=(function(){
		function UnlockCellsResultInfo(){
			this.backpackId=0;
			this.gameId=0;
			this.isSuccess=false;
			this.unlockTo=0;
			this.userId=0;
		}

		__class(UnlockCellsResultInfo,'laya8.core.backpack.UnlockCellsResultInfo');
		return UnlockCellsResultInfo;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class laya8.core.backpack.UseItemResultInfo
	var UseItemResultInfo=(function(){
		function UseItemResultInfo(){
			this.params=null;
			this.isSuccess=false;
			this.itemStaticId=0;
			this.amount=0;
		}

		__class(UseItemResultInfo,'laya8.core.backpack.UseItemResultInfo');
		return UseItemResultInfo;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class laya8.core.chat.Chat
	var Chat=(function(){
		function Chat(game,eventHandler){
			this.game=null;
			this.eventHandler=null;
			this.sender=null;
			this.game=game;
			this.eventHandler=eventHandler;
			this.sender=new ChatMessageSender(game);
		}

		__class(Chat,'laya8.core.chat.Chat');
		var __proto=Chat.prototype;
		__proto.say=function(msg,channelId){
			(channelId===void 0)&& (channelId=0);
			this.sender.say(msg,channelId);
		}

		__proto.getHistory=function(){
			this.sender.getHistory();
		}

		__proto.onGotHistoryResult=function(dat){
			this.eventHandler.onGotHistoryResult(dat);
		}

		__proto.onSaid=function(dat){
			this.eventHandler.onSaid(dat);
		}

		__proto.tell=function(targetId,message){
			this.sender.tell(targetId,message);
		}

		__proto.onTold=function(dat){
			this.eventHandler.onTold(dat);
		}

		__proto.onToldToMe=function(dat){
			this.eventHandler.onToldToMe(dat);
		}

		return Chat;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class laya8.core.chat.ChatInfo
	var ChatInfo=(function(){
		function ChatInfo(){
			this.userInfo=null;
			this.channelId=0;
			this.message=null;
			this.time=0;
		}

		__class(ChatInfo,'laya8.core.chat.ChatInfo');
		return ChatInfo;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class laya8.core.chat.ChatResultInfo
	var ChatResultInfo=(function(){
		function ChatResultInfo(){
			this.targetId=0;
		}

		__class(ChatResultInfo,'laya8.core.chat.ChatResultInfo');
		return ChatResultInfo;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class laya8.core.game.AddQQFriendInfo
	var AddQQFriendInfo=(function(){
		function AddQQFriendInfo(){
			this.openId=null;
			this.nickName=null;
			this.msg=null;
			this.sourceId=null;
		}

		__class(AddQQFriendInfo,'laya8.core.game.AddQQFriendInfo');
		return AddQQFriendInfo;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class laya8.core.game.AvailableLoginTypeAccountInfo
	var AvailableLoginTypeAccountInfo=(function(){
		function AvailableLoginTypeAccountInfo(){
			this.nickName=null;
			this.avatarUrl=null;
		}

		__class(AvailableLoginTypeAccountInfo,'laya8.core.game.AvailableLoginTypeAccountInfo');
		return AvailableLoginTypeAccountInfo;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class laya8.core.game.AvailableLoginTypeInfo
	var AvailableLoginTypeInfo=(function(){
		function AvailableLoginTypeInfo(){
			this.loginType=null;
			this.accInfo=null;
		}

		__class(AvailableLoginTypeInfo,'laya8.core.game.AvailableLoginTypeInfo');
		return AvailableLoginTypeInfo;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class laya8.core.game.CloseWindowConfirmDialogInfo
	var CloseWindowConfirmDialogInfo=(function(){
		function CloseWindowConfirmDialogInfo(){
			this.Switch=false;
			this.title_cn=null;
			this.title_eng=null;
			this.ok_cn=null;
			this.ok_eng=null;
			this.cancel_cn=null;
			this.cancel_eng=null;
		}

		__class(CloseWindowConfirmDialogInfo,'laya8.core.game.CloseWindowConfirmDialogInfo');
		return CloseWindowConfirmDialogInfo;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class laya8.core.game.Game
	var Game=(function(){
		function Game(gameId,eventHandler,clientVersion){
			this.gameId=0;
			this._socket=null;
			this.sender=null;
			this._handlers=null;
			this._eventHandler=null;
			this._user=null;
			this._mall=null;
			this._chat=null;
			this._backpack=null;
			this._pay=null;
			this._friend=null;
			this._mail=null;
			this._wechat=null;
			this.gameId=gameId;
			this._eventHandler=eventHandler;
			this._user=new User(this,this._eventHandler);
			this._mall=new Mall(this,this._eventHandler);
			this._backpack=new Backpack(this,this._eventHandler);
			this._chat=new Chat(this,this._eventHandler);
			this._pay=new Pay(this,this._eventHandler);
			this._friend=new Friend(this,this._eventHandler);
			this._mail=new Mail(this,this._eventHandler);
			this._wechat=new Wechat(this,this._eventHandler);
			this._handlers=new Object();
			this._handlers["game"]=new GameMessageHandler(this);
			this._handlers["user"]=new UserMessageHandler(this);
			this._handlers["mall"]=new MallMessageHandler(this);
			this._handlers["backpack"]=new BackpackMessageHandler(this);
			this._handlers["chat"]=new ChatMessageHandler(this);
			this._handlers["pay"]=new PayMessageHandler(this);
			this._handlers["friend"]=new FriendMessageHandler(this);
			this._handlers["mail"]=new MailMessageHandler(this);
			this._handlers["wechat"]=new WechatMessageHandler(this);
			this._initHall();
			this.sender=new GameMessageSender(this);
			this.ready(clientVersion);
		}

		__class(Game,'laya8.core.game.Game');
		var __proto=Game.prototype;
		/**
		*获取ROOM SOCKET的连接状态
		*/
		__proto.getRoomSocketStatus=function(){
			this.sender.getRoomSocketStatus();
		}

		__proto.getRoomTypeList=function(){
			this.sender.getRoomTypeList();
		}

		__proto.match=function(roomTypeId,mustNewRoom){
			(mustNewRoom===void 0)&& (mustNewRoom=0);
			this.sender.match(roomTypeId,mustNewRoom);
		}

		__proto.joinRoom=function(roomId,force){
			this.sender.joinRoom(roomId,force);
		}

		__proto.canJoinRoom=function(roomId,force){
			this.sender.canJoinRoom(roomId,force);
		}

		__proto.onGotRoomTypeList=function(list){
			this._eventHandler.onGotRoomTypeList(list);
		}

		__proto.startGame=function(data){
			this._eventHandler.startGame(data);
		}

		/**
		*赛季相关-请求某位角色当前赛季数据
		*@param userId 角色userId
		*@param args 动态参数-由游戏服和游戏客户端制定参数
		*<br> eg:getCurrentSeasonData(userId,[1,2]);
		*<br> 说明请求userId玩家当前赛季 1号和2号数据，而具体1号和2号数据存储的是什么 则有游戏服和客户端自行定义
		*/
		__proto.getCurrentSeasonData=function(userId,args){
			this.sender.getCurrentSeasonData(userId,args);
		}

		/**
		*赛季相关-批量获取角色当前赛季数据
		*@param userIds 角色userIds
		*@param args 动态参数-由游戏服和游戏客户端制定参数
		*<br> eg:queryCurrentData([100,3527,520],["s1","s3","s4","s5"]);
		*<br> 说明请求userId玩家当前赛季 1号和2号数据，而具体1号和2号数据存储的是什么 则有游戏服和客户端自行定义
		*/
		__proto.queryCurrentData=function(userIds,args){
			this.sender.queryCurrentData(userIds,args);
		}

		/**
		*移除游戏封面
		*/
		__proto.removeSplash=function(){
			this.sender.removeSplash();
		}

		/**
		*获取排行榜
		*@param rankListId 排行榜Id
		*@param cacheTime 缓存时间(秒),0为不缓存
		*/
		__proto.getRankList=function(rankListId,cacheTime){
			(cacheTime===void 0)&& (cacheTime=60);
			this.sender.getRankList(rankListId,cacheTime);
		}

		__proto.getQRCode=function(url){
			this.sender.getQRCode(url);
		}

		/**
		*透传数据
		*@param obj
		*/
		__proto.notify=function(obj){
			this.sender.notify(obj);
		}

		__proto.onGotQRCode=function(data){
			this._eventHandler.onGotQRCode(data);
		}

		__proto.onGotRankList=function(data){
			this._eventHandler.onGotRankList(data);
		}

		__proto.roomSocketStatus=function(isConnected){
			this._eventHandler.roomSocketStatus(isConnected);
		}

		__proto.onNotify=function(data){
			this._eventHandler.onNotify(data);
		}

		__proto.onGotCurrentSeasonDataResult=function(dat){
			this._eventHandler.onGotCurrentSeasonDataResult(dat);
		}

		__proto.seasonQueryCurrentDataResult=function(dat){
			this._eventHandler.seasonQueryCurrentDataResult(dat);
		}

		/**
		*轻测阶段-微信基础上报
		*<br>请确保调用report接口之前通过setCommonReportInfo接口设置了通用上报字段。
		*<br>一般来讲，在用户登录/等级变化/切换分区的时候需要调用这个接口。
		*@param info
		*/
		__proto.setWXBasicReport=function(info){
			this.sender.setWXBasicReport(info);
		}

		/**
		*请确保调用setWXReport接口之前通过setWXBasicReport接口设置了通用数据上报字段。
		*通过 创建 WXReportLoginInfo || WXReportLogoutInfo || WXReportShareInfo 对象来区分上报类型
		*@param info
		*/
		__proto.setWXReport=function(info){
			this.sender.setWXReport(info);
		}

		/**
		*对应 轻测阶段-分享 下的 app内分享
		*@param cfg
		*/
		__proto.initShareConfig=function(cfg){
			this.sender.initShareConfig(cfg);
		}

		/**
		*对应 轻测阶段-分享 下的 游戏内给单个好友分享
		*@param opts
		*/
		__proto.sendMessageToFriend=function(opts){
			this.sender.sendMessageToFriend(opts);
		}

		/**
		*对应 轻测阶段-分享 下的 弹出手Q联系人选择列表
		*@param info
		*/
		__proto.shareMessage=function(info){
			this.sender.shareMessage(info);
		}

		/**打开新的webview*/
		__proto.openUrlWithExtraWebview=function(opts){
			this.sender.openUrlWithExtraWebview(opts);
		}

		/**关闭当前webview*/
		__proto.closeWindow=function(){
			this.sender.closeWindow();
		}

		/**
		*发送桌面
		*@param opts
		*/
		__proto.sendDesktop=function(opts){
			this.sender.sendDesktop(opts);
		}

		/**初始化微信返回事件*/
		__proto.setCloseWindowConfirmDialogInfo=function(opts){
			this.sender.setCloseWindowConfirmDialogInfo(opts);
		}

		__proto.onGameVisibilityChange=function(flag,state){
			this._eventHandler.onGameVisibilityChange(flag,state);
		}

		__proto.getNetworkInfo=function(){
			this.sender.getNetworkInfo();
		}

		__proto.relation=function(){
			this.sender.relation();
		}

		__proto.onGotNetworkInfo=function(dat){
			this._eventHandler.onGotNetworkInfo(dat);
		}

		__proto.basicQuery=function(userIds,fields){
			this.sender.basicQuery(userIds,fields);
		}

		__proto.onBasicDataQueried=function(dat){
			this._eventHandler.onBasicDataQueried(dat);
		}

		__proto.onReconnect=function(dat){
			this._eventHandler.onReconnect(dat);
		}

		__proto.showErrorMsgBox=function(title,msg){
			this.sender.showErrorMsgBox(title,msg);
		}

		__proto.onGotRelation=function(dat){
			this._eventHandler.onGotRelation(dat);
		}

		__proto.setWXListSubscribe=function(subscribeId,subscribeType){
			this.sender.setWXListSubscribe(subscribeId,subscribeType);
		}

		__proto.onSetWXListSubscribeResult=function(dat){
			this._eventHandler.onSetWXListSubscribeResult(dat);
		}

		__proto.getWXListSubscribe=function(){
			this.sender.getWXListSubscribe();
		}

		__proto.onGotWXListSubscribe=function(dat){
			this._eventHandler.onGotWXListSubscribe(dat);
		}

		__proto.onShareFinish=function(dat){
			this._eventHandler.onShareFinish(dat);
		}

		__proto.openTopicCircle=function(){
			this.sender.openTopicCircle();
		}

		__proto.onError=function(err){
			this._eventHandler.onGameError(err);
		}

		__proto.preloadQQBrowserResource=function(resName,targetResVersion){
			(targetResVersion===void 0)&& (targetResVersion=NaN);
			this.sender.preloadQQBrowserResource(resName,targetResVersion);
		}

		__proto.onPreloadQQBrowserResource=function(rsp){
			this._eventHandler.onPreloadQQBrowserResource(rsp);
		}

		__proto.getAvailableLoginType=function(){
			this.sender.getAvailableLoginType();
		}

		__proto.onGotAvailableLoginType=function(dat){
			this._eventHandler.onGotAvailableLoginType(dat);
		}

		__proto.getWXShareParams=function(){
			this.sender.getWXShareParams();
		}

		__proto.getShareOpenid=function(){
			this.sender.getShareOpenid();
		}

		__proto.getShareChannel=function(){
			this.sender.getShareChannel();
		}

		__proto.onGotWXShareParams=function(dat){
			this._eventHandler.onGotWXShareParams(dat);
		}

		__proto.onGotShareOpenid=function(dat){
			this._eventHandler.onGotShareOpenid(dat);
		}

		__proto.onGotShareChannel=function(dat){
			this._eventHandler.onGotShareChannel(dat);
		}

		__proto.addQQGameShortcut=function(opts){
			this.sender.addQQGameShortcut(opts);
		}

		__proto.onSentDesktop=function(dat){
			this._eventHandler.onSentDesktop(dat);
		}

		__proto.addQQFriend=function(dat){
			this.sender.addQQFriend(dat);
		}

		__proto.shareScreenshot=function(dat){
			this.sender.shareScreenshot(dat);
		}

		__proto.switchToMsgList=function(dat){
			this.sender.switchToMsgList(dat);
		}

		__proto.onAddedQQFriend=function(dat){
			this._eventHandler.onAddedQQFriend(dat);
		}

		__proto.onShareScreenshot=function(dat){
			this._eventHandler.onShareScreenshot(dat);
		}

		__proto.onSwitchToMsgList=function(dat){
			this._eventHandler.onSwitchToMsgList(dat);
		}

		__proto.onGotShareInfo=function(dat){
			this._eventHandler.onGotShareInfo(dat);
		}

		__proto.getInterstitialAdAsync=function(placement_id){
			this.sender.getInterstitialAdAsync(placement_id);
		}

		__proto.getRewardedVideoAsync=function(placement_id){
			this.sender.getRewardedVideoAsync(placement_id);
		}

		__proto.onGotInterstitialAdAsync=function(dat){
			this._eventHandler.onGotInterstitialAdAsync(dat);
		}

		__proto.onGotRewardedVideoAsync=function(dat){
			this._eventHandler.onGotRewardedVideoAsync(dat);
		}

		__proto.setLoadingProgress=function(progress){
			this.sender.setLoadingProgress(progress);
		}

		__proto.onLoginError=function(){
			this._eventHandler.onLoginError();
		}

		/**
		*设置上报信息
		*@param boardName 场景值
		*@param score 上报分数
		*@param extData 上报扩展数据
		*/
		__proto.setScoreAsync=function(boardName,score,extData){}
		/**
		*获取排行数据
		*@param boardName 场景值
		*/
		__proto.getLeaderboardAsync=function(boardName){}
		__proto.getEntriesAsync=function(option){}
		__proto._initHall=function(){
			var host=Laya8Core.getVars('host');
			var port=Laya8Core.getVars('port');
			this._socket=new HallMessage(Browser.window.parent);
			this._socket.on("message",this,this.onHallMessage);
		}

		__proto.ready=function(clientVersion){
			this.sender.ready(clientVersion);
		}

		__proto.onHallMessage=function(data){
			Game.debug && console.log('recv hall msg:',data);
			this.processSingleMessage(data.data);
		}

		/**
		*处理完整的单个消息
		*@param msg
		*/
		__proto.processSingleMessage=function(msg,target){
			var msgInfo;
			if((typeof msg=='string')){
				msgInfo=JSON.parse(msg);
				}else{
				msgInfo=msg;
			}
			if (target){
				msgInfo.target=target;
			}
			if (msgInfo.target!='sdk'){
				return;
			}
			if (!msgInfo.url)return;
			var splitIndex=msgInfo.url.indexOf('.');
			var module=msgInfo.url.substr(0,splitIndex);
			var method=msgInfo.url.substr(splitIndex+1);
			if (this._handlers[module]){
				if (this._handlers[module][method]){
					this._handlers[module][method].call(this._handlers[module],msgInfo.params);
					}else{
					console.error('[SDK]没有找到方法, 模块:'+module+',方法:'+method);
				}
				}else{
				console.error('[SDK]没有找到模块:',module);
			}
		}

		__getset(0,__proto,'socket',function(){
			return this._socket;
		});

		__getset(0,__proto,'user',function(){
			return this._user;
			},function(value){
			this._user=value;
		});

		__getset(0,__proto,'chat',function(){
			return this._chat;
		});

		__getset(0,__proto,'backpack',function(){
			return this._backpack;
		});

		__getset(0,__proto,'mall',function(){
			return this._mall;
		});

		__getset(0,__proto,'pay',function(){
			return this._pay;
		});

		__getset(0,__proto,'friend',function(){
			return this._friend;
		});

		__getset(0,__proto,'mail',function(){
			return this._mail;
		});

		__getset(0,__proto,'wechat',function(){
			return this._wechat;
		});

		Game.debug=false;
		return Game;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class laya8.core.game.NetworkInfo
	var NetworkInfo=(function(){
		function NetworkInfo(){
			this.type=NaN;
			this.radio=null;
			this.carriertype=NaN;
		}

		__class(NetworkInfo,'laya8.core.game.NetworkInfo');
		return NetworkInfo;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class laya8.core.game.OpenWebViewInfo
	var OpenWebViewInfo=(function(){
		function OpenWebViewInfo(){
			this.url=null;
			this.openType=0;
		}

		__class(OpenWebViewInfo,'laya8.core.game.OpenWebViewInfo');
		return OpenWebViewInfo;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class laya8.core.game.PreloadQQBrowserResourceInfo
	var PreloadQQBrowserResourceInfo=(function(){
		function PreloadQQBrowserResourceInfo(){
			this.result=null;
			this.msg=null;
			this.resVersion=null;
		}

		__class(PreloadQQBrowserResourceInfo,'laya8.core.game.PreloadQQBrowserResourceInfo');
		return PreloadQQBrowserResourceInfo;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class laya8.core.game.QRCodeInfo
	var QRCodeInfo=(function(){
		function QRCodeInfo(){
			this.code=0;
			this.data=null;
		}

		__class(QRCodeInfo,'laya8.core.game.QRCodeInfo');
		return QRCodeInfo;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class laya8.core.game.RankInfo
	var RankInfo=(function(){
		function RankInfo(){
			this.Rank=0;
			this.RankValue=0;
			this.Change=0;
			this.userId=0;
			this.UserData=null;
			this.UserData=new UserBasicDataInfo();
		}

		__class(RankInfo,'laya8.core.game.RankInfo');
		return RankInfo;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class laya8.core.game.RankListInfo
	var RankListInfo=(function(){
		function RankListInfo(){
			this.RankListId=0;
			this.List=null;
		}

		__class(RankListInfo,'laya8.core.game.RankListInfo');
		return RankListInfo;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class laya8.core.game.ReconnectInfo
	var ReconnectInfo=(function(){
		function ReconnectInfo(){
			this.span=0;
			this.cur=0;
			this.max=0;
		}

		__class(ReconnectInfo,'laya8.core.game.ReconnectInfo');
		return ReconnectInfo;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class laya8.core.game.RelationInfo
	var RelationInfo=(function(){
		function RelationInfo(){
			this.iRet=NaN;
			this.sMsg=null;
			this.list=null;
		}

		__class(RelationInfo,'laya8.core.game.RelationInfo');
		return RelationInfo;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class laya8.core.game.RelationUserInfo
	var RelationUserInfo=(function(){
		function RelationUserInfo(){
			this.gender=NaN;
			this.openid=null;
			this.nickName=null;
			this.picture=null;
		}

		__class(RelationUserInfo,'laya8.core.game.RelationUserInfo');
		return RelationUserInfo;
	})()


	/**
	*...
	*@author luohuantao
	*/
	//class laya8.core.game.Result
	var Result=(function(){
		function Result(){
			this.code=0;
		}

		__class(Result,'laya8.core.game.Result');
		Result.SUCCESS=0;
		return Result;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class laya8.core.game.RoomInfo
	var RoomInfo=(function(){
		function RoomInfo(){
			this.gameid=null;
			this.id=null;
			this.roomname=null;
			this.ip=null;
			this.sslip=null;
			this.key=null;
			this.type=0;
			this.roomType=0;
		}

		__class(RoomInfo,'laya8.core.game.RoomInfo');
		return RoomInfo;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class laya8.core.game.RoomTypeInfo
	var RoomTypeInfo=(function(){
		function RoomTypeInfo(){
			this.id=0;
			this.name=0;
		}

		__class(RoomTypeInfo,'laya8.core.game.RoomTypeInfo');
		return RoomTypeInfo;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class laya8.core.game.SendDesktopInfo
	var SendDesktopInfo=(function(){
		function SendDesktopInfo(){
			this.title=null;
			this.icon=null;
			this.url=null;
			this.ext=null;
		}

		__class(SendDesktopInfo,'laya8.core.game.SendDesktopInfo');
		return SendDesktopInfo;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class laya8.core.game.SendMessageToFriendInfo
	var SendMessageToFriendInfo=(function(){
		function SendMessageToFriendInfo(){
			this.fopenid=null;
			this.thumb_url=null;
			this.title=null;
			this.description=null;
			this.url=null;
			this.game_tag=0;
		}

		__class(SendMessageToFriendInfo,'laya8.core.game.SendMessageToFriendInfo');
		return SendMessageToFriendInfo;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class laya8.core.game.ShareConfigInfo
	var ShareConfigInfo=(function(){
		function ShareConfigInfo(){
			this.title=null;
			this.desc=null;
			this.image_url=null;
			this.share_url=null;
			this.params=null;
			this.sourceName=null;
			this.wx_share_url=null;
			this.toApp=0;
		}

		__class(ShareConfigInfo,'laya8.core.game.ShareConfigInfo');
		return ShareConfigInfo;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class laya8.core.game.ShareFinishInfo
	var ShareFinishInfo=(function(){
		function ShareFinishInfo(){
			this.code=0;
		}

		__class(ShareFinishInfo,'laya8.core.game.ShareFinishInfo');
		return ShareFinishInfo;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class laya8.core.game.ShareInfo
	var ShareInfo=(function(){
		function ShareInfo(){
			this.title=null;
			this.desc=null;
			this.sourceName=null;
			this.share_url=null;
			this.image_url=null;
		}

		__class(ShareInfo,'laya8.core.game.ShareInfo');
		return ShareInfo;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class laya8.core.game.ShareScreenshotInfo
	var ShareScreenshotInfo=(function(){
		function ShareScreenshotInfo(){
			this.briefMsg=null;
			this.appName=null;
			this.iconUrl=null;
			this.actionUrl=null;
		}

		__class(ShareScreenshotInfo,'laya8.core.game.ShareScreenshotInfo');
		return ShareScreenshotInfo;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class laya8.core.game.SubscribeInfo
	var SubscribeInfo=(function(){
		function SubscribeInfo(){
			this.more=false;
			this.list=null;
			this.sMsg=null;
			this.iRet=0;
		}

		__class(SubscribeInfo,'laya8.core.game.SubscribeInfo');
		return SubscribeInfo;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class laya8.core.game.SubscribeListInfo
	var SubscribeListInfo=(function(){
		function SubscribeListInfo(){
			this.more=false;
			this.subscribeList=null;
		}

		__class(SubscribeListInfo,'laya8.core.game.SubscribeListInfo');
		return SubscribeListInfo;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class laya8.core.game.SubscribeResultInfo
	var SubscribeResultInfo=(function(){
		function SubscribeResultInfo(){
			this.iRet=NaN;
			this.sMsg=null;
		}

		__class(SubscribeResultInfo,'laya8.core.game.SubscribeResultInfo');
		return SubscribeResultInfo;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class laya8.core.game.SwitchToMsgListInfo
	var SwitchToMsgListInfo=(function(){
		function SwitchToMsgListInfo(){
			this.title=null;
			this.icon=null;
		}

		__class(SwitchToMsgListInfo,'laya8.core.game.SwitchToMsgListInfo');
		return SwitchToMsgListInfo;
	})()


	/**
	*...
	*@author ...
	*/
	//class laya8.core.game.Wechat
	var Wechat=(function(){
		function Wechat(game,eventHandler){
			this.game=null;
			this.eventHandler=null;
			this.sender=null;
			this.game=game;
			this.eventHandler=eventHandler;
			this.sender=new WechatMessageSender(game);
		}

		__class(Wechat,'laya8.core.game.Wechat');
		var __proto=Wechat.prototype;
		__proto.onDecrypted=function(dat){
			this.eventHandler.onDecryptWechatInfo(dat);
		}

		__proto.decrypt=function(encryptedData,iv){
			this.sender.decrypt(encryptedData,iv);
		}

		__proto.sendGroupMessage=function(dat){
			this.sender.sendGroupMessage(dat);
		}

		__proto.onSentGroupMessage=function(dat){
			this.eventHandler.onSentGroupMessage(dat);
		}

		return Wechat;
	})()


	/**
	*...
	*@author ...
	*/
	//class laya8.core.game.WechatGroupMessageInfo
	var WechatGroupMessageInfo=(function(){
		function WechatGroupMessageInfo(){
			this.opengid=null;
			this.group_msg_ticket=null;
			this.action=null;
			this.env_version=0;
			this.query=null;
		}

		__class(WechatGroupMessageInfo,'laya8.core.game.WechatGroupMessageInfo');
		return WechatGroupMessageInfo;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class laya8.core.game.WXBasicReportInfo
	var WXBasicReportInfo=(function(){
		function WXBasicReportInfo(){
			this.game_version=null;
			this.role_id=null;
			this.role_name=null;
			this.zone_id=NaN;
			this.server_id=NaN;
			this.user_level=NaN;
		}

		__class(WXBasicReportInfo,'laya8.core.game.WXBasicReportInfo');
		return WXBasicReportInfo;
	})()


	/**
	*setWXReport 接口 上报 数据的基类 ;
	*@author 贾艳昭
	*/
	//class laya8.core.game.WXReportInfoBase
	var WXReportInfoBase=(function(){
		function WXReportInfoBase(){
			this.type=null;
		}

		__class(WXReportInfoBase,'laya8.core.game.WXReportInfoBase');
		return WXReportInfoBase;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class laya8.core.io.Http
	var Http=(function(){
		function Http(){}
		__class(Http,'laya8.core.io.Http');
		Http.getQueryString=function(name){
			var reg2=new RegExp("(^|&)"+name+"=([^&]*)(&|$)","i");
			var searchStr=Browser.window.hostStr|| Browser.window.location.search;
			var a=searchStr.substr(1).match(reg2);
			if (a !=null)return decodeURIComponent(a[2]);return '';
		}

		return Http;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class laya8.core.io.MsgInfo
	var MsgInfo=(function(){
		function MsgInfo(url,params){
			this.url=null;
			this.params=null;
			this.target=null;
			this.cache=true;
			this.url=url;
			this.params=params;
		}

		__class(MsgInfo,'laya8.core.io.MsgInfo');
		return MsgInfo;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class laya8.core.Laya8Core
	var Laya8Core=(function(){
		function Laya8Core(){}
		__class(Laya8Core,'laya8.core.Laya8Core');
		Laya8Core._initVars=function(){
			Laya8Core._vars={};
			var query=Http.getQueryString('laya8');
			if (!query)return;
			var params=query.split('|');
			for (var param in params){
				var _a=params[param].split('='),k=_a[0],v=_a[1];
				Laya8Core._vars[k]=decodeURIComponent(v);
			}
			console.log('parse config:',Laya8Core._vars);
		}

		Laya8Core.getVars=function(key){
			(key===void 0)&& (key='');
			if (Laya8Core._vars==null){
				Laya8Core._initVars();
			}
			if (key){
				return Laya8Core._vars[key];
			}
			return Laya8Core._vars;
		}

		Laya8Core.init=function(gameId,eventHandler,clientVersion){
			Laya8Core._initVars();
			Laya8Core.game=new Game(gameId,eventHandler,clientVersion);
			laya8.core.Laya8Core._eventHandler=eventHandler;
			Browser.window["Laya8Core"]=Laya8Core;
		}

		Laya8Core._eventHandler=null
		Laya8Core._vars=null
		Laya8Core.game=null
		return Laya8Core;
	})()


	/**
	*...
	*@author ...
	*/
	//class laya8.core.mail.GotAnnouncementListInfo
	var GotAnnouncementListInfo=(function(){
		function GotAnnouncementListInfo(){
			this.code=0;
			this.list=null;
		}

		__class(GotAnnouncementListInfo,'laya8.core.mail.GotAnnouncementListInfo');
		return GotAnnouncementListInfo;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class laya8.core.mail.GotAttachmentResultInfo
	var GotAttachmentResultInfo=(function(){
		function GotAttachmentResultInfo(){
			this.list=null;
		}

		__class(GotAttachmentResultInfo,'laya8.core.mail.GotAttachmentResultInfo');
		return GotAttachmentResultInfo;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class laya8.core.mail.GotMailListInfo
	var GotMailListInfo=(function(){
		function GotMailListInfo(){
			this.code=0;
			this.list=null;
		}

		__class(GotMailListInfo,'laya8.core.mail.GotMailListInfo');
		return GotMailListInfo;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class laya8.core.mail.GotUnreadMailCountInfo
	var GotUnreadMailCountInfo=(function(){
		function GotUnreadMailCountInfo(){
			this.code=0;
			this.list=null;
		}

		__class(GotUnreadMailCountInfo,'laya8.core.mail.GotUnreadMailCountInfo');
		return GotUnreadMailCountInfo;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class laya8.core.mail.Mail
	var Mail=(function(){
		function Mail(game,eventHandler){
			this.game=null;
			this.sender=null;
			this.eventHandler=null;
			this.game=game;
			this.sender=new MailMessageSender(game);
			this.eventHandler=eventHandler;
		}

		__class(Mail,'laya8.core.mail.Mail');
		var __proto=Mail.prototype;
		__proto.getAttachment=function(mailIds){
			this.sender.getAttachment(mailIds);
		}

		__proto.onGotAttachment=function(dat){
			this.eventHandler.onMailGotAttachment(dat);
		}

		__proto.getList=function(list){
			this.sender.getList(list);
		}

		__proto.onGotList=function(dat){
			this.eventHandler.onMailGotList(dat);
		}

		__proto.getUnreadMailCount=function(types){
			this.sender.getUnreadMailCount(types);
		}

		__proto.onGotUnreadMailCount=function(dat){
			this.eventHandler.onMailGotUnreadMailCount(dat);
		}

		__proto.del=function(mailids){
			this.sender.del(mailids);
		}

		__proto.onDeleted=function(dat){
			this.eventHandler.onMailDeleted(dat);
		}

		__proto.read=function(mailids){
			this.sender.read(mailids);
		}

		__proto.onRead=function(dat){
			this.eventHandler.onRead(dat);
		}

		__proto.onGotAnnouncementList=function(dat){
			this.eventHandler.onGotAnnouncementList(dat);
		}

		return Mail;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class laya8.core.mail.MailCountInfo
	var MailCountInfo=(function(){
		function MailCountInfo(){
			this.type=0;
			this.count=0;
		}

		__class(MailCountInfo,'laya8.core.mail.MailCountInfo');
		return MailCountInfo;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class laya8.core.mail.MailInfo
	var MailInfo=(function(){
		function MailInfo(){
			this.mailid=0;
			this.from=0;
			this.title=null;
			this.content=null;
			this.attachment=null;
			this.sendtime=0;
			this.status=0;
		}

		__class(MailInfo,'laya8.core.mail.MailInfo');
		return MailInfo;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class laya8.core.mail.MailListInfo
	var MailListInfo=(function(){
		function MailListInfo(){
			this.type=0;
			this.start=0;
			this.count=0;
		}

		__class(MailListInfo,'laya8.core.mail.MailListInfo');
		return MailListInfo;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class laya8.core.mail.OnDeleteMailInfo
	var OnDeleteMailInfo=(function(){
		function OnDeleteMailInfo(){
			this.code=0;
			this.list=null;
		}

		__class(OnDeleteMailInfo,'laya8.core.mail.OnDeleteMailInfo');
		return OnDeleteMailInfo;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class laya8.core.mail.OnReadMailInfo
	var OnReadMailInfo=(function(){
		function OnReadMailInfo(){
			this.code=0;
			this.list=null;
		}

		__class(OnReadMailInfo,'laya8.core.mail.OnReadMailInfo');
		return OnReadMailInfo;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class laya8.core.mall.ListGoodsResultInfo
	var ListGoodsResultInfo=(function(){
		function ListGoodsResultInfo(){
			this.mallId=0;
			this.goodses=null;
		}

		__class(ListGoodsResultInfo,'laya8.core.mall.ListGoodsResultInfo');
		return ListGoodsResultInfo;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class laya8.core.mall.ListMallsResultInfo
	var ListMallsResultInfo=(function(){
		function ListMallsResultInfo(){
			this.id=0;
			this.title=null;
			this.description=null;
		}

		__class(ListMallsResultInfo,'laya8.core.mall.ListMallsResultInfo');
		return ListMallsResultInfo;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class laya8.core.mall.Mall
	var Mall=(function(){
		function Mall(game,eventHandler){
			this.sender=null;
			this.game=null;
			this.eventHandler=null;
			this.game=game;
			this.eventHandler=eventHandler;
			this.sender=new MallMessageSender(this.game);
		}

		__class(Mall,'laya8.core.mall.Mall');
		var __proto=Mall.prototype;
		__proto.listMalls=function(){
			this.sender.listMalls();
		}

		__proto.listGoods=function(mallId){
			this.sender.listGoods(mallId);
		}

		__proto.purchase=function(mallId,goodsId,itemInGoodsId,backpackId,amount){
			this.sender.purchase(mallId,goodsId,itemInGoodsId,backpackId,amount);
		}

		__proto.onListMallsResult=function(dat){
			this.eventHandler.onListMallsResult(dat);
		}

		__proto.onListGoodsResult=function(dat){
			this.eventHandler.onListGoodsResult(dat);
		}

		__proto.onPurchaseResult=function(dat){
			this.eventHandler.onPurchaseResult(dat);
		}

		return Mall;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class laya8.core.mall.PurchaseResultInfo
	var PurchaseResultInfo=(function(){
		function PurchaseResultInfo(){
			this.amount=0;
			this.backpackId=0;
			this.gameId=0;
			this.goodsId=0;
			this.isSuccess=false;
			this.itemInGoodsId=0;
			this.mallId=0;
			this.userId=0;
		}

		__class(PurchaseResultInfo,'laya8.core.mall.PurchaseResultInfo');
		return PurchaseResultInfo;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class laya8.core.pay.Pay
	var Pay=(function(){
		function Pay(game,eventHandler){
			this.game=null;
			this.eventHandler=null;
			this.sender=null;
			this.game=game;
			this.eventHandler=eventHandler;
			this.sender=new PayMessageSender(this.game);
		}

		__class(Pay,'laya8.core.pay.Pay');
		var __proto=Pay.prototype;
		/**
		*获得商品列表
		*/
		__proto.getPayItems=function(){
			this.sender.getPayItems();
		}

		/**
		*使用平台币购买商品
		*@param id
		*@param count
		*/
		__proto.buyPayItem=function(id,count){
			(count===void 0)&& (count=1);
			this.sender.buyPayItem(id,count);
		}

		/**
		*获得平台币充值档位
		*/
		__proto.getCoinsPayItems=function(){
			this.sender.getCoinsPayItems();
		}

		/**
		*充值平台币
		*@param id
		*/
		__proto.buyCoins=function(id){
			this.sender.buyCoins(id);
		}

		/**
		*获得直购商品列表
		*/
		__proto.getDirectPayItems=function(){
			this.sender.getDirectPayItems();
		}

		/**
		*购买直购商品
		*@param id
		*/
		__proto.buyDirectPayItem=function(id){
			this.sender.buyDirectPayItem(id);
		}

		__proto.onPayError=function(err){
			this.eventHandler.onPayError(err);
		}

		__proto.onGotDirectPayItems=function(dat){
			this.eventHandler.onGotDirectPayItems(dat);
		}

		__proto.midasPay=function(count,env){
			this.sender.midasPay(count,env);
		}

		__proto.onMidasPayResult=function(dat){
			this.eventHandler.onMidasPayResult(dat.code,dat.count);
		}

		__proto.onPayFinish=function(dat){
			this.eventHandler.onPayFinish(dat.code,dat.count);
		}

		return Pay;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class laya8.core.social.FriendResultBaseInfo
	var FriendResultBaseInfo=(function(){
		function FriendResultBaseInfo(){
			this.targetId=0;
			this.code=0;
			this.friendInfo=null;
		}

		__class(FriendResultBaseInfo,'laya8.core.social.FriendResultBaseInfo');
		return FriendResultBaseInfo;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class laya8.core.social.Friend
	var Friend=(function(){
		function Friend(game,eventHandler){
			this.game=null;
			this.eventHandler=null;
			this.sender=null;
			this.game=game;
			this.eventHandler=eventHandler;
			this.sender=new FriendMessageSender(this.game);
		}

		__class(Friend,'laya8.core.social.Friend');
		var __proto=Friend.prototype;
		/**
		*邀请玩家成为自己的好友
		*@param targetId 对方玩家用户Id
		*@param groupId 组Id
		*@param params 拓展参数
		*/
		__proto.invite=function(targetId,groupId,params){
			this.sender.invite(targetId,groupId,params);
		}

		/**
		*拒绝玩家的添加好友请求
		*@param targetId 对方玩家用户Id
		*/
		__proto.reject=function(targetId){
			this.sender.reject(targetId);
		}

		/**
		*接受玩家的添加好友请求
		*@param targetId 对方玩家用户Id
		*/
		__proto.accept=function(targetId,groupId,params){
			this.sender.accept(targetId,groupId,params);
		}

		/**
		*拉黑好友
		*@param targetId 对方玩家用户Id
		*/
		__proto.block=function(targetId){
			this.sender.block(targetId);
		}

		/**
		*恢复拉黑的好友
		*@param targetId 对方玩家用户Id
		*/
		__proto.unblock=function(targetId){
			this.sender.unblock(targetId);
		}

		/**
		*删除好友
		*@param targetId 对方玩家用户Id
		*/
		__proto.Delete=function(targetId){
			this.sender.Delete(targetId);
		}

		/**
		*获取组和好友的完整列表
		*/
		__proto.list=function(){
			this.sender.list();
		}

		/**
		*移动好友到组
		*@param friendId 对方玩家用户Id
		*@param groupId 组Id
		*/
		__proto.move=function(friendId,groupId){
			this.sender.move(friendId,groupId);
		}

		/**
		*关注好友进出房间事件
		*@param friendId 对方玩家用户Id
		*/
		__proto.attention=function(friendId){
			this.sender.attention(friendId);
		}

		/**
		*取消关注好友进出房间事件
		*@param friendId 对方玩家用户Id
		*/
		__proto.inattention=function(friendId){
			this.sender.inattention(friendId);
		}

		/**
		*获取未处理的好友请求
		*/
		__proto.listInviting=function(){
			this.sender.listInviting();
		}

		/**
		*获取他人对自己某组的关系
		*@param groupId 组Id
		*/
		__proto.listBeInGroup=function(groupId){
			this.sender.listBeInGroup(groupId);
		}

		__proto.inviteResult=function(dat){
			this.eventHandler.onFriendInviteResult(dat);
		}

		__proto.rejectResult=function(dat){
			this.eventHandler.onFriendRejectResult(dat);
		}

		__proto.acceptResult=function(dat){
			this.eventHandler.onFriendAcceptResult(dat);
		}

		__proto.blockResult=function(dat){
			this.eventHandler.onFriendBlockResult(dat);
		}

		__proto.unblockResult=function(dat){
			this.eventHandler.onFriendUnblockResult(dat);
		}

		__proto.deleteResult=function(dat){
			this.eventHandler.onFriendDeleteResult(dat);
		}

		__proto.listResult=function(dat){
			this.eventHandler.onFriendListResult(dat);
		}

		__proto.moveResult=function(dat){
			this.eventHandler.onFriendMoveResult(dat);
		}

		__proto.online=function(dat){
			this.eventHandler.onFriendOnline(dat);
		}

		__proto.offline=function(dat){
			this.eventHandler.onFriendOffline(dat);
		}

		__proto.joinRoom=function(dat){
			this.eventHandler.onFriendJoinRoom(dat);
		}

		__proto.leaveRoom=function(dat){
			this.eventHandler.onFriendLeaveRoom(dat);
		}

		__proto.invited=function(dat){
			this.eventHandler.onFriendInvited(dat);
		}

		__proto.rejected=function(dat){
			this.eventHandler.onFriendRejected(dat);
		}

		__proto.accepted=function(dat){
			this.eventHandler.onFriendAccepted(dat);
		}

		__proto.blocked=function(dat){
			this.eventHandler.onFriendBlocked(dat);
		}

		__proto.unblocked=function(dat){
			this.eventHandler.onFriendUnblocked(dat);
		}

		__proto.deleted=function(dat){
			this.eventHandler.onFriendDeleted(dat);
		}

		__proto.moved=function(dat){
			this.eventHandler.onFriendMoved(dat);
		}

		__proto.attentionResult=function(dat){
			this.eventHandler.onFriendAttentionResult(dat);
		}

		__proto.inattentionResult=function(dat){
			this.eventHandler.onFriendInattentionResult(dat);
		}

		__proto.listInvitingResult=function(dat){
			this.eventHandler.onListInvitingResult(dat);
		}

		__proto.listBeInGroupResult=function(dat){
			this.eventHandler.onListBeInGroupResult(dat);
		}

		__proto.attentioned=function(dat){
			this.eventHandler.attentioned(dat);
		}

		__proto.joinTeam=function(dat){
			this.eventHandler.onFriendJoinTeam(dat);
		}

		__proto.leaveTeam=function(dat){
			this.eventHandler.onFriendLeaveTeam(dat);
		}

		return Friend;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class laya8.core.social.FriendAttentionedInfo
	var FriendAttentionedInfo=(function(){
		function FriendAttentionedInfo(){
			this.friendId=0;
			this.groupId=0;
			this.userInfo=null;
		}

		__class(FriendAttentionedInfo,'laya8.core.social.FriendAttentionedInfo');
		return FriendAttentionedInfo;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class laya8.core.social.FriendNotifyResultBaseInfo
	var FriendNotifyResultBaseInfo=(function(){
		function FriendNotifyResultBaseInfo(){
			this.friendId=0;
		}

		__class(FriendNotifyResultBaseInfo,'laya8.core.social.FriendNotifyResultBaseInfo');
		return FriendNotifyResultBaseInfo;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class laya8.core.social.FriendBeInGroupInfo
	var FriendBeInGroupInfo=(function(){
		function FriendBeInGroupInfo(){
			this.userInfo=null;
			this.online=0;
		}

		__class(FriendBeInGroupInfo,'laya8.core.social.FriendBeInGroupInfo');
		return FriendBeInGroupInfo;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class laya8.core.social.FriendInviteInfo
	var FriendInviteInfo=(function(){
		function FriendInviteInfo(){
			this.userInfo=null;
			this.creation=0;
		}

		__class(FriendInviteInfo,'laya8.core.social.FriendInviteInfo');
		return FriendInviteInfo;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class laya8.core.social.FriendListBeInGroupResultInfo
	var FriendListBeInGroupResultInfo=(function(){
		function FriendListBeInGroupResultInfo(){
			this.groupId=0;
			this.relations=null;
			this.code=0;
		}

		__class(FriendListBeInGroupResultInfo,'laya8.core.social.FriendListBeInGroupResultInfo');
		return FriendListBeInGroupResultInfo;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class laya8.core.social.FriendListInviteResultInfo
	var FriendListInviteResultInfo=(function(){
		function FriendListInviteResultInfo(){
			this.invitings=null;
			this.code=0;
			;
		}

		__class(FriendListInviteResultInfo,'laya8.core.social.FriendListInviteResultInfo');
		return FriendListInviteResultInfo;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class laya8.core.social.FriendListResultInfo
	var FriendListResultInfo=(function(){
		function FriendListResultInfo(){
			this.groups=null;
			this.code=0;
		}

		__class(FriendListResultInfo,'laya8.core.social.FriendListResultInfo');
		return FriendListResultInfo;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class laya8.core.social.FriendMoveResultInfo
	var FriendMoveResultInfo=(function(){
		function FriendMoveResultInfo(){
			this.friendId=0;
			this.groupId=0;
			this.code=0;
		}

		__class(FriendMoveResultInfo,'laya8.core.social.FriendMoveResultInfo');
		return FriendMoveResultInfo;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class laya8.core.social.FriendTeamInfo
	var FriendTeamInfo=(function(){
		function FriendTeamInfo(){
			this.friendId=0;
			this.teamId=0;
		}

		__class(FriendTeamInfo,'laya8.core.social.FriendTeamInfo');
		return FriendTeamInfo;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class laya8.core.user.AttentionResultInfo
	var AttentionResultInfo=(function(){
		function AttentionResultInfo(){
			this.code=0;
			this.results=null;
		}

		__class(AttentionResultInfo,'laya8.core.user.AttentionResultInfo');
		return AttentionResultInfo;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class laya8.core.user.AttentionResultUserInfo
	var AttentionResultUserInfo=(function(){
		function AttentionResultUserInfo(){
			this.userId=0;
			this.online=0;
			this.roomId=0;
			this.roomType=0;
			this.teamId=0;
		}

		__class(AttentionResultUserInfo,'laya8.core.user.AttentionResultUserInfo');
		return AttentionResultUserInfo;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class laya8.core.user.ErrorInfo
	var ErrorInfo=(function(){
		function ErrorInfo(){
			this.errorCode=0;
			this.errorMessage=null;
		}

		__class(ErrorInfo,'laya8.core.user.ErrorInfo');
		return ErrorInfo;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class laya8.core.user.InAttentionResultInfo
	var InAttentionResultInfo=(function(){
		function InAttentionResultInfo(){
			this.code=0;
			this.userIds=null;
		}

		__class(InAttentionResultInfo,'laya8.core.user.InAttentionResultInfo');
		return InAttentionResultInfo;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class laya8.core.user.QueryByOpenIdResultInfo
	var QueryByOpenIdResultInfo=(function(){
		function QueryByOpenIdResultInfo(){
			this.results=null;
		}

		__class(QueryByOpenIdResultInfo,'laya8.core.user.QueryByOpenIdResultInfo');
		return QueryByOpenIdResultInfo;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class laya8.core.user.QueryByOpenIdResultUserInfo
	var QueryByOpenIdResultUserInfo=(function(){
		function QueryByOpenIdResultUserInfo(){
			this.openId=null;
			this.userBasicData=null;
			this.online=0;
		}

		__class(QueryByOpenIdResultUserInfo,'laya8.core.user.QueryByOpenIdResultUserInfo');
		return QueryByOpenIdResultUserInfo;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class laya8.core.user.TeamInviteInfo
	var TeamInviteInfo=(function(){
		function TeamInviteInfo(){
			this.teamid=0;
			this.userinfo=null;
			this.payload=null;
			this.type=0;
		}

		__class(TeamInviteInfo,'laya8.core.user.TeamInviteInfo');
		return TeamInviteInfo;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class laya8.core.user.TeamJoinInfo
	var TeamJoinInfo=(function(){
		function TeamJoinInfo(){
			this.code=0;
			this.teamid=0;
			this.type=0;
			this.creator=0;
			this.userInfo=null;
		}

		__class(TeamJoinInfo,'laya8.core.user.TeamJoinInfo');
		return TeamJoinInfo;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class laya8.core.user.TeamLeftInfo
	var TeamLeftInfo=(function(){
		function TeamLeftInfo(){
			this.teamid=0;
			this.userid=0;
		}

		__class(TeamLeftInfo,'laya8.core.user.TeamLeftInfo');
		return TeamLeftInfo;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class laya8.core.user.TeamListInfo
	var TeamListInfo=(function(){
		function TeamListInfo(){
			this.code=0;
			this.type=0;
			this.list=null;
		}

		__class(TeamListInfo,'laya8.core.user.TeamListInfo');
		return TeamListInfo;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class laya8.core.user.TeamListInfo2
	var TeamListInfo2=(function(){
		function TeamListInfo2(){
			this.code=0;
			this.list=null;
		}

		__class(TeamListInfo2,'laya8.core.user.TeamListInfo2');
		return TeamListInfo2;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class laya8.core.user.UserShortDataInfo
	var UserShortDataInfo=(function(){
		function UserShortDataInfo(){
			this.NkName=null;
			this.Avtor=0;
			this.Level=0;
			this.Grade=0;
			this.Gender=0;
			this.NkNameIP=null;
			this.AvtorIP=null;
			this.UserNameIP=null;
		}

		__class(UserShortDataInfo,'laya8.core.user.UserShortDataInfo');
		return UserShortDataInfo;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class laya8.core.user.User
	var User=(function(){
		function User(game,eventHandler){
			this.sender=null;
			this.game=null;
			this.eventHandler=null;
			this.game=game;
			this.sender=new UserMessageSender(game);
			this.eventHandler=eventHandler;
		}

		__class(User,'laya8.core.user.User');
		var __proto=User.prototype;
		__proto.onBasicDataChg=function(_data){
			this.eventHandler.onBasicDataChg(_data);
		}

		__proto.onGameDataChg=function(_data){
			this.eventHandler.onGameDataChg(_data);
		}

		__proto.updateBasicData=function(nkname,gender,avtor){
			(gender===void 0)&& (gender=0);
			(avtor===void 0)&& (avtor=0);
			this.sender.updateBasicData(nkname,gender,avtor);
		}

		__proto.onError=function(err){
			this.eventHandler.onUserError(err);
		}

		__proto.getRandomName=function(){
			this.sender.getRandomName();
		}

		__proto.onGotRandomName=function(nkname){
			this.eventHandler.onGotRandomName(nkname);
		}

		__proto.onMyRanksChg=function(list){
			this.eventHandler.onMyRanksChg(list);
		}

		__proto.setLoginData=function(user){
			this.eventHandler.onGotLoginData(user);
		}

		__proto.getReward=function(rewardIdArray){
			this.sender.getReward(rewardIdArray);
		}

		__proto.getRewardData=function(rewardIdArray){
			this.sender.getRewardData(rewardIdArray);
		}

		__proto.getGameData=function(obj){
			this.sender.getGameData(obj);
		}

		__proto.getGameDataResult=function(dat){
			this.eventHandler.onGotGameDataResult(dat);
		}

		__proto.onGotRewardData=function(dat){
			this.eventHandler.onGotRewardData(dat);
		}

		__proto.getLastRoom=function(){
			this.sender.getLastRoom();
		}

		__proto.setClientObject=function(dat){
			this.sender.setClientObject(dat);
		}

		__proto.onGotClientObjectResult=function(dat){
			this.eventHandler.onGotClientObjectResult(dat);
		}

		__proto.onGotLastRoom=function(dat){
			this.eventHandler.onGotLastRoom(dat);
		}

		__proto.searchByUId=function(targetId){
			this.sender.searchByUId(targetId);
		}

		__proto.searchByUIdResult=function(dat){
			this.eventHandler.searchByUIdResult(dat);
		}

		__proto.createTeam=function(roomType,displayInList){
			(displayInList===void 0)&& (displayInList=false);
			this.sender.createTeam(roomType,displayInList);
		}

		__proto.leaveTeam=function(){
			this.sender.leaveTeam();
		}

		__proto.joinTeam=function(team,payload){
			this.sender.joinTeam(team,payload);
		}

		__proto.inviteTeam=function(userId,payload){
			(payload===void 0)&& (payload='');
			this.sender.inviteTeam(userId,payload);
		}

		__proto.kickTeam=function(userId){
			this.sender.kickTeam(userId);
		}

		__proto.sendMessage=function(id,msg){
			this.sender.sendMessage(id,msg);
		}

		__proto.teamPlay=function(){
			this.sender.teamPlay();
		}

		__proto.onTeamCreated=function(dat){
			this.eventHandler.onTeamCreated(dat.teamid);
		}

		__proto.onTeamJoined=function(dat){
			this.eventHandler.onTeamJoined(dat);
		}

		__proto.onTeamLeft=function(dat){
			this.eventHandler.onTeamLeft(dat);
		}

		__proto.onTeamInvite=function(dat){
			this.eventHandler.onTeamInvite(dat);
		}

		__proto.teamReady=function(ready){
			this.sender.teamReady(ready);
		}

		__proto.getRandomTeamList=function(type,count){
			this.sender.getRandomTeamList(type,count);
		}

		__proto.getExtraTeamList=function(type,count,exclude){
			this.sender.getExtraTeamList(type,count,exclude);
		}

		/**
		*更新队伍信息
		*@param displayInList 设置是否在列表中出现,1=出现,0=不出现,-1=不修改
		*@param payload 队伍自定义扩展信息,null=不修改
		*/
		__proto.updateTeam=function(displayInList,payload){
			this.sender.updateTeam(displayInList,payload);
		}

		__proto.refreshTeamInfo=function(teamIdList){
			this.sender.refreshTeamInfo(teamIdList);
		}

		__proto.queryByOpenId=function(openIds){
			this.sender.queryByOpenId(openIds);
		}

		__proto.queryByOpenIdResult=function(dat){
			this.eventHandler.queryByOpenIdResult(dat);
		}

		__proto.attention=function(userIds){
			this.sender.attention(userIds);
		}

		__proto.attentionResult=function(dat){
			this.eventHandler.attentionResult(dat);
		}

		__proto.inattention=function(userIds){
			this.sender.inattention(userIds);
		}

		__proto.inattentionResult=function(dat){
			this.eventHandler.inattentionResult(dat);
		}

		__proto.sendMessageResult=function(dat){
			this.eventHandler.sendMessageResult(dat);
		}

		__proto.receiveMessage=function(dat){
			this.eventHandler.receiveMessage(dat);
		}

		__proto.onTeamReady=function(dat){
			this.eventHandler.onTeamReady(dat.teamid,dat.userid,dat.ready > 0?true:false);
		}

		__proto.onOtherUserBasicDataChange=function(dat){
			this.eventHandler.onOtherUserBasicDataChange(dat);
		}

		__proto.onGotRandomTeamList=function(dat){
			this.eventHandler.onGotRandomTeamList(dat);
		}

		__proto.onGotExtraTeamList=function(dat){
			this.eventHandler.onGotExtraTeamList(dat);
		}

		__proto.onTeamUpdated=function(dat){
			this.eventHandler.onTeamUpdated(dat);
		}

		__proto.onTeamInfoRefreshed=function(dat){
			this.eventHandler.onTeamInfoRefreshed(dat);
		}

		__proto.Login=function(){
			this.sender.Login();
		}

		__proto.Logout=function(param){
			this.sender.Logout();
		}

		return User;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class laya8.core.user.UserGameDataInfo
	var UserGameDataInfo=(function(){
		function UserGameDataInfo(){
			this.F1=0;
			this.F2=0;
			this.F3=0;
			this.F4=0;
			this.F5=0;
			this.F6=0;
			this.F7=0;
		}

		__class(UserGameDataInfo,'laya8.core.user.UserGameDataInfo');
		var __proto=UserGameDataInfo.prototype;
		__proto.setData=function(_data){
			var arr=_data.split(':');
			this.F1=arr[0];
			this.F2=arr[1];
			this.F3=arr[2];
			this.F4=arr[3];
			this.F5=arr[4];
			this.F6=arr[5];
			this.F7=arr[6];
		}

		return UserGameDataInfo;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class laya8.core.user.UserInfo
	var UserInfo=(function(){
		function UserInfo(){
			this.UnionId=null;
			this.UserId=0;
			this.UserName=null;
			this.OpenId=null;
			this.tm=0;
		}

		__class(UserInfo,'laya8.core.user.UserInfo');
		return UserInfo;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class common.ErrorCode
	var ErrorCode=(function(){
		function ErrorCode(){}
		__class(ErrorCode,'common.ErrorCode');
		ErrorCode.ERR_IS_NOT_STRING=-10602;
		ErrorCode.SUCCESS=0;
		ErrorCode.ERR_PARSEJSON_FORMAT_ERROR=-10601;
		return ErrorCode;
	})()


	/**
	*...
	*@author anling
	*/
	//class common.KeyMap
	var KeyMap=(function(){
		function KeyMap(){}
		__class(KeyMap,'common.KeyMap');
		KeyMap.isUP=function(keyCode){
			return keyCode==KeyMap.UP || keyCode==38 || keyCode==19;
		}

		KeyMap.isDown=function(keyCode){
			return keyCode==KeyMap.DOWN || keyCode==40 || keyCode==20;
		}

		KeyMap.isLeft=function(keyCode){
			return keyCode==KeyMap.LEFT || keyCode==37 || keyCode==21;
		}

		KeyMap.isRight=function(keyCode){
			return keyCode==KeyMap.RIGHT || keyCode==39 || keyCode==22;
		}

		KeyMap.isSure=function(keyCode){
			return keyCode==KeyMap.SURE || keyCode==13 || keyCode==23 || keyCode==96;
		}

		KeyMap.isBack=function(keyCode){
			return keyCode==KeyMap.BACK || keyCode==4;
		}

		KeyMap.isMenu=function(keyCode){
			return keyCode==KeyMap.MENU || keyCode==82 || keyCode==97;
		}

		KeyMap.UP=87;
		KeyMap.DOWN=83;
		KeyMap.LEFT=65;
		KeyMap.RIGHT=68;
		KeyMap.SURE=74;
		KeyMap.BACK=75;
		KeyMap.MENU=76;
		KeyMap.JS_KEY_UP=38;
		KeyMap.JS_KEY_DOWN=40;
		KeyMap.JS_KEY_LEFT=37;
		KeyMap.JS_KEY_RIGHT=39;
		KeyMap.JS_KEY_SURE=13;
		KeyMap.ANDROID_KEY_UP=19;
		KeyMap.ANDROID_KEY_DOWN=20;
		KeyMap.ANDROID_KEY_LEFT=21;
		KeyMap.ANDROID_KEY_RIGHT=22;
		KeyMap.ANDROID_KEY_SURE=23;
		KeyMap.ANDROID_KEY_BACK=4;
		KeyMap.ANDROID_KEY_MENU=82;
		KeyMap.ANDROID_KEY_A=96;
		KeyMap.ANDROID_KEY_B=97;
		return KeyMap;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class common.Method
	var Method=(function(){
		function Method(){};
		__class(Method,'common.Method');
		Method.isSSL=function(){
			if(Browser.onMiniGame){
				return Browser.window.wxSSL;
			}
			return 'https:'==Browser.window.document.location.protocol ? true :false;
		}

		Method.getUnionId=function(){
			if (Browser.onMiniGame){
				if (Browser.onIOS){
					return '-109';
					}else{
					return '-106';
				}
			};
			var unionId=Method.getQueryString('spId');
			if (unionId=='-5'){
				if (Browser.onIOS){
					if (Browser.onWeiXin){
						return "-10";
						}else {
						return "-9";
					}
					}else {
					if (Browser.onWeiXin){
						return "-8";
						}else {
						return "-5";
					}
				}
			}
			if (unionId=='-101'){
				if (Browser.onIOS){
					if (common.Method.getCookie('qblogintype')=='qq'){
						return '-104';
						}else {
						return '-103';
					}
					}else {
					if (common.Method.getCookie('qblogintype')=='qq'){
						return '-102';
						}else {
						return '-101';
					}
				}
			}
			if (unionId=='-107'){
				if (Browser.onIOS){
					return '-108';
					}else{
					return '-107';
				}
			}
			return unionId;
		}

		Method.getQueryString=function(name){
			var reg=new RegExp("(^|&)"+name+"=([^&]*)(&|$)","i");
			var searchStr=Browser.window.hostStr|| Browser.window.location.search;
			var a=searchStr.substr(1).match(reg);
			if (a !=null)return decodeURIComponent(a[2]);return '';
		}

		Method.getQueryInt=function(name){
			var v=Method.getQueryString(name);
			var i=parseInt(v);
			return isNaN(i)?0:i;
		}

		Method.onHttpRequestComplete=function(handler,requestUrl,cacheRes,content){
			if (cacheRes){
				Method._httpCache[requestUrl]=content;
			}
			handler.runWith(content);
		}

		Method.getHttpCache=function(key){
			return Method._httpCache[key];
		}

		Method.httpRequest=function(url,data,onSuccess,onError,cacheRes){
			(cacheRes===void 0)&& (cacheRes=false);
			url=URL.formatURL(url);
			var cachedContent=Method.getHttpCache(url);
			if (cachedContent!=null){
				Laya.timer.callLater(null,Method.onHttpRequestComplete,[onSuccess,url,cacheRes,cachedContent]);
				return;
			};
			var req=new HttpRequest();
			if (onSuccess !=null){
				req.on("complete",null,Method.onHttpRequestComplete,[onSuccess,url,cacheRes]);
			}
			if (onError==null){
				req.on("error",null,Method.defaultHttpRequestOnErrorFn);
				}else{
				req.on("error",onError.caller,onError.method,onError.args);
			};
			var tm=Browser.now()+''+Method.random(10000,99999);
			var dataString='';
			for (var k in data){
				dataString+='&'+k+'='+encodeURIComponent(data[k]);
			}
			req.send(url+(url.indexOf('?')>-1?'':'?')+'&_tm='+tm+dataString);
		}

		Method.socketRequest=function(host,port,processor){
			var socket=new Laya8Socket(host,port);
			var game=GameManager.GetCurrentGame();
			var p=new processor(game,socket);
		}

		Method.getCookie=function(name){
			var arrStr=Browser.window.document.cookie.split("; ");
			for (var i=0;i < arrStr.length;i++){
				var temp=arrStr[i].split("=");
				if(temp[0]==name)return decodeURIComponent(temp[1]);
			}
			return '';
		}

		Method.setCookie=function(name,value,hours,domain){
			(hours===void 0)&& (hours=0);
			(domain===void 0)&& (domain='');
			var str=name+"="+encodeURIComponent(value);
			if(hours > 0){
				var date=new Date();
				var ms=hours*3600*1000;
			}
			if (domain){
				str+="; domain="+domain;
			}
			Browser.window.document.cookie=str;
		}

		Method.random=function(min,max){
			var range=max-min;
			return (min+Math.round(Math.random()*range));
		}

		Method.onJSONDone=function(callbackFn,response,onerr){
			if (response==null){
				onerr();
				return;
			}
			callbackFn.runWith(response);
		}

		Method.getJSONP=function(url,callbackFn,splitChar,onerr){
			(splitChar===void 0)&& (splitChar='&');
			var response;
			var jsoncb=function (args){
				response=args;
			};
			var tm='';
			if (callbackFn){
				tm=Browser.now()+''+Method.random(10000,99999);
				Browser.window['laya8hallcallback'+tm]=jsoncb;
			};
			var script=Browser.document.createElement('script');
			script.type="text/javascript";
			if (onerr){
				script.onerror=function (e){
					onerr.runWith(e);
				}
				}else{
				script.onerror=Method.defaultHttpRequestOnErrorFn;
			}
			script.onload=script.onreadystatechange=function (e,isAbort){
				var reg=new RegExp("loaded|complete");
				if (isAbort || !script.readyState || reg.test(script.readyState+"")){
					script.onload=script.onreadystatechange=null;
					if (script.parentNode !=null){}
						if (!isAbort){
						Method.onJSONDone(callbackFn,response,script.onerror);
					}
				}
			};
			script.src=url+(tm!=''?splitChar+'callback=laya8hallcallback'+tm:'');
			Browser.document.getElementsByTagName('head')[0].appendChild(script);
		}

		Method.defaultHttpRequestOnErrorFn=function(e){
			common.Method.log('HTTP请求时发生错误:',e);
		}

		Method.getOS=function(){
			var sUserAgent=Browser.userAgent;
			var navigator=Browser.window.navigator;
			var isWin=(navigator.platform=="Win32")|| (navigator.platform=="Windows");
			var isMac=(navigator.platform=="Mac68K")|| (navigator.platform=="MacPPC")|| (navigator.platform=="Macintosh")|| (navigator.platform=="MacIntel");
			if (isMac)return "Mac";
			var isIpad=navigator.platform.indexOf('iPad')>-1;
			if (isIpad)return 'iPad';
			var isIPhone=navigator.platform.indexOf('iPhone')>-1;
			if (isIPhone)return 'iPhone';
			var isIpod=navigator.platform.indexOf('iPod')>-1;
			if (isIpod)return 'iPod';
			var isUnix=(navigator.platform=="X11")&& !isWin && !isMac;
			if (isUnix)return "Unix";
			var isLinux=(navigator.platform.indexOf("Linux")>-1);
			if (isLinux)return "Linux";
			if (isWin){
				var isWin2K=sUserAgent.indexOf("Windows NT 5.0")>-1 || sUserAgent.indexOf("Windows 2000")>-1;
				if (isWin2K)return "Win2000";
				var isWinXP=sUserAgent.indexOf("Windows NT 5.1")>-1 || sUserAgent.indexOf("Windows XP")>-1;
				if (isWinXP)return "WinXP";
				var isWin2003=sUserAgent.indexOf("Windows NT 5.2")>-1 || sUserAgent.indexOf("Windows 2003")>-1;
				if (isWin2003)return "Win2003";
				var isWinVista=sUserAgent.indexOf("Windows NT 6.0")>-1 || sUserAgent.indexOf("Windows Vista")>-1;
				if (isWinVista)return "WinVista";
				var isWin7=sUserAgent.indexOf("Windows NT 6.1")>-1 || sUserAgent.indexOf("Windows 7")>-1;
				if (isWin7)return "Win7";
				var isWin8=sUserAgent.indexOf("Windows NT 8")>-1;
				if (isWin8)return "Win8";
				var isWin10=sUserAgent.indexOf("Windows NT 10")>-1;
				if (isWin10)return "Win10";
			}
			return "other";
		}

		Method.getBrowserInfo=function(){
			if(((Method.getBrowserType())instanceof Array))
				return Method.getBrowserType()[0];
			return "unknown";
		}

		Method.getBrowserType=function(){
			var agent=Browser.userAgent.toLowerCase();
			if(agent.indexOf("micromessenger")> 0)
				return agent.match(Method.regStr_wx);
			if(agent.indexOf("QQ")> 0 || agent.indexOf("mqqbrowser")> 0)
				return agent.match(Method.regStr_QQ);
			if(agent.indexOf("Opera")> 0 || agent.indexOf("opr")> 0)
				return agent.match(Method.regStr_Opera);
			if(agent.indexOf("360")> 0 || agent.indexOf("360 aphone browser")> 0){
				if(((agent.match(Method.regStr_360))instanceof Array))
					return agent.match(Method.regStr_360);
				var news=agent.slice(agent.indexOf("360"),agent.length-1);
				return [news.replace(/\x20\(/g,'/')];
			}
			if(agent.indexOf("mb2345browser")> 0)
				return agent.match(Method.regStr_2345);
			if(agent.indexOf("sogoumse")> 0 || agent.indexOf("sogoumobilebrowser")> 0)
				return agent.match(Method.regStr_sougou);
			if(agent.indexOf("ucbrowser")> 0)
				return agent.match(Method.regStr_uc);
			if(agent.indexOf("mxbrowser")> 0)
				return agent.match(Method.regStr_aoyou);
			if(agent.indexOf("baidubrowser")> 0)
				return agent.match(Method.regStr_baidu);
			if(agent.indexOf("liebaofast")> 0)
				return agent.match(Method.regStr_liebao);
			if(agent.indexOf("msie")> 0)
				return agent.match(Method.regStr_ie);
			if(agent.indexOf("firefox")> 0)
				return agent.match(Method.regStr_ff);
			if(agent.indexOf("chrome")> 0)
				return agent.match(Method.regStr_chrome);
			if(agent.indexOf("safari")> 0 && agent.indexOf("chrome")< 0)
				return agent.match(Method.regStr_saf);
			return "unknown";
		}

		Method.refreshWindow=function(){
			if (Browser.onWeiXin && !Browser.onMiniGame){
				Browser.window.location.href=Browser.window.location.protocol+'//'+
				Browser.window.location.host+Browser.window.location.pathname+
				Browser.window.location.search+'&rand='+common.Method.random(1,9999999)+
				Browser.window.location.hash;
				}else {
				Browser.window.location.reload();
			}
		}

		Method.log=function(__args){
			var args=arguments;
			if(Browser.onMiniGame){
				console.log(args[0]);
				return;
			}
			if (true || Method.getQueryString("showlog")){
				console.log.apply(console,args);
			}
		}

		Method.getUnixTimeStamp=function(){
			return Math.round(Browser.now()/ 1000);
		}

		Method.md5=function(s){return Method.binl2hex(Method.core_md5(Method.str2binl(s),s.length *Method.chrsz));}
		Method.binl2hex=function(binarray){
			var hex_tab=Method.hexcase ? "0123456789ABCDEF" :"0123456789abcdef";
			var str="";
			for(var i=0;i < binarray.length *4;i++){
				str+=hex_tab.charAt((binarray[i>>2] >> ((i%4)*8+4))& 0xF)+
				hex_tab.charAt((binarray[i>>2] >> ((i%4)*8))& 0xF);
			}
			return str;
		}

		Method.core_md5=function(x,len){
			x[len >> 5] |=0x80 << ((len)% 32);
			x[(((len+64)>>> 9)<< 4)+14]=len;
			var a=1732584193;
			var b=-271733879;
			var c=-1732584194;
			var d=271733878;
			for(var i=0;i < x.length;i+=16){
				var olda=a;
				var oldb=b;
				var oldc=c;
				var oldd=d;
				a=Method.md5_ff(a,b,c,d,x[i+0],7 ,-680876936);
				d=Method.md5_ff(d,a,b,c,x[i+1],12,-389564586);
				c=Method.md5_ff(c,d,a,b,x[i+2],17,606105819);
				b=Method.md5_ff(b,c,d,a,x[i+3],22,-1044525330);
				a=Method.md5_ff(a,b,c,d,x[i+4],7 ,-176418897);
				d=Method.md5_ff(d,a,b,c,x[i+5],12,1200080426);
				c=Method.md5_ff(c,d,a,b,x[i+6],17,-1473231341);
				b=Method.md5_ff(b,c,d,a,x[i+7],22,-45705983);
				a=Method.md5_ff(a,b,c,d,x[i+8],7 ,1770035416);
				d=Method.md5_ff(d,a,b,c,x[i+9],12,-1958414417);
				c=Method.md5_ff(c,d,a,b,x[i+10],17,-42063);
				b=Method.md5_ff(b,c,d,a,x[i+11],22,-1990404162);
				a=Method.md5_ff(a,b,c,d,x[i+12],7 ,1804603682);
				d=Method.md5_ff(d,a,b,c,x[i+13],12,-40341101);
				c=Method.md5_ff(c,d,a,b,x[i+14],17,-1502002290);
				b=Method.md5_ff(b,c,d,a,x[i+15],22,1236535329);
				a=Method.md5_gg(a,b,c,d,x[i+1],5 ,-165796510);
				d=Method.md5_gg(d,a,b,c,x[i+6],9 ,-1069501632);
				c=Method.md5_gg(c,d,a,b,x[i+11],14,643717713);
				b=Method.md5_gg(b,c,d,a,x[i+0],20,-373897302);
				a=Method.md5_gg(a,b,c,d,x[i+5],5 ,-701558691);
				d=Method.md5_gg(d,a,b,c,x[i+10],9 ,38016083);
				c=Method.md5_gg(c,d,a,b,x[i+15],14,-660478335);
				b=Method.md5_gg(b,c,d,a,x[i+4],20,-405537848);
				a=Method.md5_gg(a,b,c,d,x[i+9],5 ,568446438);
				d=Method.md5_gg(d,a,b,c,x[i+14],9 ,-1019803690);
				c=Method.md5_gg(c,d,a,b,x[i+3],14,-187363961);
				b=Method.md5_gg(b,c,d,a,x[i+8],20,1163531501);
				a=Method.md5_gg(a,b,c,d,x[i+13],5 ,-1444681467);
				d=Method.md5_gg(d,a,b,c,x[i+2],9 ,-51403784);
				c=Method.md5_gg(c,d,a,b,x[i+7],14,1735328473);
				b=Method.md5_gg(b,c,d,a,x[i+12],20,-1926607734);
				a=Method.md5_hh(a,b,c,d,x[i+5],4 ,-378558);
				d=Method.md5_hh(d,a,b,c,x[i+8],11,-2022574463);
				c=Method.md5_hh(c,d,a,b,x[i+11],16,1839030562);
				b=Method.md5_hh(b,c,d,a,x[i+14],23,-35309556);
				a=Method.md5_hh(a,b,c,d,x[i+1],4 ,-1530992060);
				d=Method.md5_hh(d,a,b,c,x[i+4],11,1272893353);
				c=Method.md5_hh(c,d,a,b,x[i+7],16,-155497632);
				b=Method.md5_hh(b,c,d,a,x[i+10],23,-1094730640);
				a=Method.md5_hh(a,b,c,d,x[i+13],4 ,681279174);
				d=Method.md5_hh(d,a,b,c,x[i+0],11,-358537222);
				c=Method.md5_hh(c,d,a,b,x[i+3],16,-722521979);
				b=Method.md5_hh(b,c,d,a,x[i+6],23,76029189);
				a=Method.md5_hh(a,b,c,d,x[i+9],4 ,-640364487);
				d=Method.md5_hh(d,a,b,c,x[i+12],11,-421815835);
				c=Method.md5_hh(c,d,a,b,x[i+15],16,530742520);
				b=Method.md5_hh(b,c,d,a,x[i+2],23,-995338651);
				a=Method.md5_ii(a,b,c,d,x[i+0],6 ,-198630844);
				d=Method.md5_ii(d,a,b,c,x[i+7],10,1126891415);
				c=Method.md5_ii(c,d,a,b,x[i+14],15,-1416354905);
				b=Method.md5_ii(b,c,d,a,x[i+5],21,-57434055);
				a=Method.md5_ii(a,b,c,d,x[i+12],6 ,1700485571);
				d=Method.md5_ii(d,a,b,c,x[i+3],10,-1894986606);
				c=Method.md5_ii(c,d,a,b,x[i+10],15,-1051523);
				b=Method.md5_ii(b,c,d,a,x[i+1],21,-2054922799);
				a=Method.md5_ii(a,b,c,d,x[i+8],6 ,1873313359);
				d=Method.md5_ii(d,a,b,c,x[i+15],10,-30611744);
				c=Method.md5_ii(c,d,a,b,x[i+6],15,-1560198380);
				b=Method.md5_ii(b,c,d,a,x[i+13],21,1309151649);
				a=Method.md5_ii(a,b,c,d,x[i+4],6 ,-145523070);
				d=Method.md5_ii(d,a,b,c,x[i+11],10,-1120210379);
				c=Method.md5_ii(c,d,a,b,x[i+2],15,718787259);
				b=Method.md5_ii(b,c,d,a,x[i+9],21,-343485551);
				a=Method.safe_add(a,olda);
				b=Method.safe_add(b,oldb);
				c=Method.safe_add(c,oldc);
				d=Method.safe_add(d,oldd);
			}
			return [a,b,c,d];
		}

		Method.str2binl=function(str){
			var bin=[];
			var mask=(1 << Method.chrsz)-1;
			for(var i=0;i < str.length *Method.chrsz;i+=Method.chrsz)
			bin[i>>5] |=(str.charCodeAt(i / Method.chrsz)& mask)<< (i%32);
			return bin;
		}

		Method.md5_cmn=function(q,a,b,x,s,t){
			return Method.safe_add(Method.bit_rol(Method.safe_add(Method.safe_add(a,q),Method.safe_add(x,t)),s),b);
		}

		Method.md5_ff=function(a,b,c,d,x,s,t){
			return Method.md5_cmn((b & c)| ((~b)& d),a,b,x,s,t);
		}

		Method.md5_gg=function(a,b,c,d,x,s,t){
			return Method.md5_cmn((b & d)| (c & (~d)),a,b,x,s,t);
		}

		Method.md5_hh=function(a,b,c,d,x,s,t){
			return Method.md5_cmn(b ^ c ^ d,a,b,x,s,t);
		}

		Method.md5_ii=function(a,b,c,d,x,s,t){
			return Method.md5_cmn(c ^ (b | (~d)),a,b,x,s,t);
		}

		Method.safe_add=function(x,y){
			var lsw=(x & 0xFFFF)+(y & 0xFFFF);
			var msw=(x >> 16)+(y >> 16)+(lsw >> 16);
			return (msw << 16)| (lsw & 0xFFFF);
		}

		Method.bit_rol=function(num,cnt){
			return (num << cnt)| (num >>> (32-cnt));
		}

		Method.cutString=function(str,length){
			if(!str)return "";
			var count=0;
			var len=str.length;
			for (var i=0;i < len;i++){
				var code=str.charCodeAt(i);
				count+=(code >=0x4E00 && code <=0x9FA5)?2:1;
				if (count > length)break ;
			}
			if (count <=length)return str;
			else return str.substring(0,i)+"..";
		}

		Method.getCompleteJSON=function(str){
			var res=new JSONParseResult();
			if (!((typeof str=='string'))){
				res.code=ErrorCode.ERR_IS_NOT_STRING;
				return res;
			}
			if (null==str || ""==str){
				res.code=0;
				return res;
			}
			if (str.charAt(0)!="{"){
				res.code=ErrorCode.ERR_PARSEJSON_FORMAT_ERROR;
				return res;
			};
			var _sb="{";
			var _cnt=1;
			var _ch='';
			var _chin=false,jump=false;
			for(var _i=1;_i<str.length;_i++){
				_sb+=(_ch=str.charAt(_i));
				if(jump){jump=false;continue ;}
					if(_ch=='\\')jump=true;
				if(_ch=='\"')_chin=!_chin;
				if(_chin)continue ;
				switch(_ch){
					case '}':{
							if(--_cnt==0){
								res.code=0;
								res.matchedJSONString=_sb.toString();
								res.leftString=(_i+1)>=str.length? "":str.substring(_i+1);
								return res;
							}
							break ;
						}
					case '{':
						_cnt++;
						break ;
					}
			}
			res.code=0;
			res.leftString=str;
			return res;
		}

		Method._httpCache={};
		Method.hexcase=0;
		Method.chrsz=8;
		__static(Method,
		['regStr_ie',function(){return this.regStr_ie=/msie [\d.]+;/gi ;},'regStr_ff',function(){return this.regStr_ff=/firefox\/[\d.]+/gi;},'regStr_chrome',function(){return this.regStr_chrome=/chrome\/[\d.]+/gi ;},'regStr_saf',function(){return this.regStr_saf=/safari\/[\d.]+/gi ;},'regStr_QQ',function(){return this.regStr_QQ=/mqqbrowser\/[\d.]+/gi ;},'regStr_Opera',function(){return this.regStr_Opera=/opr\/[\d.]+/gi ;},'regStr_360',function(){return this.regStr_360=/360 aphone browser\/[\d.]+/gi ;},'regStr_2345',function(){return this.regStr_2345=/mb2345browser\/[\d.]+/gi ;},'regStr_sougou',function(){return this.regStr_sougou=/sogoumobilebrowser\/[\d.]+/gi ;},'regStr_uc',function(){return this.regStr_uc=/ucbrowser\/[\d.]+/gi ;},'regStr_aoyou',function(){return this.regStr_aoyou=/mxbrowser\/[\d.]+/gi ;},'regStr_baidu',function(){return this.regStr_baidu=/baidubrowser\/[\d.]+/gi ;},'regStr_liebao',function(){return this.regStr_liebao=/liebaofast\/[\d.]+/gi ;},'regStr_wx',function(){return this.regStr_wx=/micromessenger\/[\d.]+/gi ;}
		]);
		return Method;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class Conf
	var Conf=(function(){
		function Conf(){};
		__class(Conf,'Conf');
		Conf.LAYASTOREMARKET_URL='//layamarket.layabox.com/LayaStoreMarket.js';
		Conf.LAYABOX_PASSPORT_URL='//api.masteropen.layabox.com/';
		Conf.LAYABOX_UCENTER_URL='//ucenter.layabox.com/';
		Conf.LAYABOX_PAYCENTER_URL='//paycenter.layabox.com/?a=Pay&m=Payment&ac=submit';
		Conf.TENCENT_SDK_URL='//h5sdk.qq.com/h5game/js/h5jssdk-1.1.4.min.js';
		Conf.CONFIGCENTER_URL='laya8/';
		Conf.PAYCENTER_URL='//pay.xq.qq.com/';
		__static(Conf,
		['CUSTOMUI_BASE_URL',function(){return this.CUSTOMUI_BASE_URL=Conf.CONFIGCENTER_URL;}
		]);
		return Conf;
	})()


	/**
	*...
	*@author jiayanzhao
	*/
	//class data.DataCenter
	var DataCenter=(function(){
		function DataCenter(){}
		__class(DataCenter,'data.DataCenter');
		DataCenter.callListener=function(key,value){
			if (DataCenter.listener[key]){
				for (var i=0;i < DataCenter.listener[key].length;i++){
					var r=true;
					if (DataCenter.listener[key][i].caller==null || (DataCenter.listener[key][i].caller !=null && DataCenter.listener[key][i].caller.displayedInStage)){
						r=DataCenter.listener[key][i].fn.call(DataCenter.listener[key][i].caller,value);
					}
					if (r===false){
						break ;
					}
				}
			}
		}

		DataCenter.Clear=function(){
			DataCenter.datatable={};
			DataCenter.listener={};
		}

		DataCenter.Set=function(key,value){
			DataCenter.datatable[key]=value;
			DataCenter.callListener(key,value);
		}

		DataCenter.Listen=function(key,fn,obj,priority,tiggerOtherListener){
			(priority===void 0)&& (priority=0);
			(tiggerOtherListener===void 0)&& (tiggerOtherListener=true);
			if (!DataCenter.listener[key]){
				DataCenter.listener[key]=[];
			};
			var o={caller:obj,fn:fn,priority:priority };
			var i=-1;
			for (var x=0;x < DataCenter.listener[key].length;x++){
				if (DataCenter.listener[key][x].caller===obj && DataCenter.listener[key][x].fn===fn){
					i=x;
				}
			}
			if (i==-1){
				DataCenter.listener[key].push(o);
				DataCenter.listener[key].sort(function(a,b){
					return a.priority-b.priority;
				});
			};
			var _data=DataCenter.Query(key);
			if (_data !=null){
				if (tiggerOtherListener){
					DataCenter.callListener(key,_data);
					}else {
					fn.call(obj,_data);
				}
			}
		}

		DataCenter.Query=function(key){
			return DataCenter.datatable[key];
		}

		DataCenter.datatable={};
		DataCenter.listener={};
		return DataCenter;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class io.JSONParseResult
	var JSONParseResult=(function(){
		function JSONParseResult(){
			this.code=-1;
			this.matchedJSONString="";
			this.leftString="";
		}

		__class(JSONParseResult,'io.JSONParseResult');
		return JSONParseResult;
	})()


	//class Laya8Hall
	var Laya8Hall=(function(){
		function Laya8Hall(gameId,onStart){
			this.startGameId=0;
			this.startRoomId='';
			this._onStart=null;
			this._onStart=onStart;
			Laya8Hall.Hall=this;
			Browser.window.logtime('Laya8主js加载完成');
			this.startGameId=gameId>0?gameId:parseInt(Method.getQueryString('gameid'));
			this.startRoomId=Method.getQueryString('roomid');
			Browser.window["gmr"]=GameManager;
			if (isNaN(this.startGameId)){
				}else{
				GameManager.StartGame(this.startGameId,this.startRoomId);
			}
		}

		__class(Laya8Hall,'Laya8Hall');
		var __proto=Laya8Hall.prototype;
		__proto.Start=function(){
			if (this._onStart!=null){
				this._onStart.run();
			}
		}

		Laya8Hall.Hall=null
		Laya8Hall.langSpec='cn';
		return Laya8Hall;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class logic.MessageHandlerBase
	var MessageHandlerBase$1=(function(){
		function MessageHandlerBase(game){
			this.game=null;
			this.game=game;
		}

		__class(MessageHandlerBase,'logic.MessageHandlerBase',null,'MessageHandlerBase$1');
		return MessageHandlerBase;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class logic.MessageSenderBase
	var MessageSenderBase$1=(function(){
		function MessageSenderBase(game){
			this.game=null;
			this.game=game;
		}

		__class(MessageSenderBase,'logic.MessageSenderBase',null,'MessageSenderBase$1');
		return MessageSenderBase;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class logic.Constant
	var Constant=(function(){
		function Constant(){};
		__class(Constant,'logic.Constant');
		Constant.ROOMLISTMODE_ROOMTYPE=0x0000;
		Constant.ROOMLISTMODE_ROOM=0x0001;
		return Constant;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class logic.ErrorMsg
	var ErrorMsg=(function(){
		function ErrorMsg(){}
		__class(ErrorMsg,'logic.ErrorMsg');
		ErrorMsg.GetMsg=function(code){
			if (ErrorMsg._msgs==null){
				ErrorMsg._initMsgs();
			}
			if (ErrorMsg._msgs[code]){
				return ErrorMsg._msgs[code][Laya8Hall.langSpec];
			}
			return ErrorMsg._umsg[Laya8Hall.langSpec]+'('+code+')';
		}

		ErrorMsg._initMsgs=function(){
			ErrorMsg._msgs=new Object();
			ErrorMsg._msgs[0]={cn:"成功",us:"Success"};
			ErrorMsg._msgs[1]={cn:"数据库执行失败",us:"Database operation failure."};
			ErrorMsg._msgs[-501]={cn:"游戏太火爆，内测人数已达上限",us:"Users in close beta have reached the limit."};
			ErrorMsg._msgs[-10001]={cn:"昵称为空",us:"Nickname is empty."};
			ErrorMsg._msgs[-10002]={cn:"昵称不能全是数字",us:"Nickname cannot be all numbers."};
			ErrorMsg._msgs[-10003]={cn:"昵称包含非法字符",us:"Nickname contains invalid character."};
			ErrorMsg._msgs[-10004]={cn:"昵称包含敏感词",us:"Nickname contains sensitive word."};
			ErrorMsg._msgs[-10005]={cn:"没有被修改的信息",us:"Unchanged information."};
			ErrorMsg._msgs[-20001]={cn:"购买参数无效",us:"Invalid purchase parameter."};
			ErrorMsg._msgs[-20002]={cn:"金钱不足",us:"Not enough money."};
			ErrorMsg._msgs[-20003]={cn:"已经有这个物品",us:"Duplicated item."};
			ErrorMsg._msgs[-30001]={cn:"没有这个物品",us:"Item does not exist."};
			ErrorMsg._msgs[-30002]={cn:"此物品已经在使用中",us:"This item is already in use."};
			ErrorMsg._msgs[-40001]={cn:"GameServer已离线",us:"GameServer offline."};
			ErrorMsg._msgs[-90001]={cn:"您的网络似乎出了点问题，请检查网络设置或退出重试",us:"There may be a problem with your network, please check your network settings or restart the game(2)."};
			ErrorMsg._msgs[-90002]={cn:"网络消息异常",us:"Network message exception."};
			ErrorMsg._msgs[-90003]={cn:"超时时间已到, 与服务器的连接已断开",us:"Time out. Disconnected from server."};
			ErrorMsg._msgs[-100001]={cn:"大厅服务器已离线",us:"Lobby server offline."};
			ErrorMsg._msgs[-100002]={cn:"用户已被封停",us:"This account has been banned."};
			ErrorMsg._msgs[-100003]={cn:"非法的GameId",us:"Invalid GameId."};
			ErrorMsg._msgs[-100004]={cn:"MSDK对象不存在",us:"MSDK object does not exist."};
			ErrorMsg._msgs[-100005]={cn:"授权失败",us:"Authorization fails."};
			ErrorMsg._msgs[-100006]={cn:"无效的SPID",us:"Invalid SPID."};
			ErrorMsg._msgs[-100007]={cn:"渠道已禁用",us:"Channel has been disabled."};
			ErrorMsg._msgs[-100008]={cn:"用户名过长",us:"Username is too long."};
			ErrorMsg._msgs[-100009]={cn:"用户名为空",us:"Username is empty."};
			ErrorMsg._msgs[-100010]={cn:"登录PHP调用出错",us:"PHP login error."};
			ErrorMsg._msgs[-110001]={cn:"您的账号已在其他设备登录，如果不是您本人操作，请尽快修改密码！",us:"Your account has been logged in on another device. If this is not your operation, please change your password soon."};
			ErrorMsg._msgs[-110002]={cn:"您的账号已被封停！",us:"Your account has been banned."};
			ErrorMsg._umsg={cn:"未知错误,错误码",us:"Unknown error, error code"};
		}

		ErrorMsg._msgs=null
		ErrorMsg._umsg=null
		return ErrorMsg;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class logic.game.AddQQFriendInfo
	var AddQQFriendInfo$1=(function(){
		function AddQQFriendInfo(){
			this.openId=null;
			this.appId=null;
			this.nickName=null;
			this.msg=null;
			this.sourceId=null;
		}

		__class(AddQQFriendInfo,'logic.game.AddQQFriendInfo',null,'AddQQFriendInfo$1');
		return AddQQFriendInfo;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class logic.game.CloseWindowConfirmDialogInfo
	var CloseWindowConfirmDialogInfo$1=(function(){
		function CloseWindowConfirmDialogInfo(){
			this.Switch=false;
			this.title_cn=null;
			this.title_eng=null;
			this.ok_cn=null;
			this.ok_eng=null;
			this.cancel_cn=null;
			this.cancel_eng=null;
		}

		__class(CloseWindowConfirmDialogInfo,'logic.game.CloseWindowConfirmDialogInfo',null,'CloseWindowConfirmDialogInfo$1');
		return CloseWindowConfirmDialogInfo;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class logic.game.ErrorMessageHandler
	var ErrorMessageHandler=(function(){
		function ErrorMessageHandler(game){
			this.gameId=0;
			this.game=null;
			this.gameId=game.gameId;
			this.game=game;
		}

		__class(ErrorMessageHandler,'logic.game.ErrorMessageHandler');
		var __proto=ErrorMessageHandler.prototype;
		__proto.msg=function(data){
			Method.log('有错误发生:',data);
			switch (data.errorCode){
				case-17:
					Method.log('此用户已经在这个房间中了');
					break ;
				}
		}

		return ErrorMessageHandler;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class logic.game.Game
	var Game$1=(function(){
		function Game(gameId,startRoomId){
			this.hallMessager=null;
			this.authCode=false;
			this._gameId=0;
			this._startRoomId=null;
			this._config=null;
			this._socket=null;
			this._handlers=null;
			this._user=null;
			this._rankCacheTime=null;
			this.sender=null;
			this._externalUserName=null;
			this._externalToken=null;
			this.gamewin=null;
			this.hasError=false;
			this._clientIsReady=false;
			this._userDataIsReady=false;
			this.layaStageHasInited=false;
			this.cachedHallMessage=[];
			this.m_SupMsg="";
			this.canRemoveSplash=false;
			this.gameHasBeenStarted=false;
			this._externalNkName='';
			this._externalHeadImg='';
			this._extSex=0;
			this.gameHideStartTime=0;
			this._clientVersion=null;
			this.extParams=null;
			this._cacheQRCode=new Object();
			Browser.window['hhh']=this;
			this._gameId=gameId;
			this._startRoomId=startRoomId;
			this._rankCacheTime=new Object();
			this._handlers=new Object();
			this._handlers['room']=new RoomMessageHandler(this);
			this._handlers['user']=new UserMessageHandler$1(this);
			this._handlers['game']=new GameMessageHandler$1(this);
			this._handlers['error']=new ErrorMessageHandler(this);
			this._handlers['mall']=new MallMessageHandler$1(this);
			this._handlers['backpack']=new BackpackMessageHandler$1(this);
			this._handlers['chat']=new ChatMessageHandler$1(this);
			this._handlers['pay']=new PayMessageHandler$1(this);
			this._handlers['friend']=new FriendMessageHandler$1(this);
			this._handlers['mail']=new MailMessageHandler$1(this);
			this._handlers['wechat']=new WechatMessageHandler$1(this);
			Browser.window.logtime('GAME对象构造完成');
			this.loadConfig(new Handler(this,this.onGameConfigLoaded));
		}

		__class(Game,'logic.game.Game',null,'Game$1');
		var __proto=Game.prototype;
		__proto._onStageResize=function(){
			if (this.gamewin!=null){
				this.gamewin.style.width=Browser.clientWidth+'px';
				this.gamewin.style.height='100%';
			}
			this.notifyGameClientWindowSize();
		}

		__proto.onMessage=function(e){
			if (e.origin==Browser.window.location.origin || Browser.window.runtime){
				this.processSingleMessage(e.data);
				}else {
				Method.log('大厅收到未知消息:',e.data,'来源:',e.origin);
			}
		}

		__proto.Connect2Router=function(res){
			if (res){
				console.log('Connect2Router:'+res.ip+':'+res.port);
				Stats.report("1_7");
				if (this._socket !=null){
					this.closeRouterSocket();
				};
				var bSSL=Method.isSSL();
				this._socket=new RouterSocket(res.ip,bSSL?res.port_ssl:res.port,bSSL,3);
				this._socket.on("open",this,this.onRouterSocketOpen);
				this._socket.on('ReConnect',this,this.onRouterSocketReconnect);
				this._socket.on("message",this,this.onRouterSocketMessage);
				this._socket.on("error",this,this.onRouterSocketERROR);
				this._socket.on("close",this,this.onRouterSocketCLOSE);
				}else{
				this.onGetRouterError();
			}
		}

		__proto.closeRouterSocket=function(){
			this.stopHeart();
			if (this._socket !=null){
				this._socket.offAll();
				this._socket.close();
			}
		}

		__proto.onRouterSocketReconnect=function(dat){
			if (!this.hasError){
				this.sender.onReconnect(dat);
			}
		}

		__proto.onGetRouterError=function(){
			Method.log('从网关获取Router失败');
		}

		__proto.onExternalUserLogin=function(username,token,nkname,headimg,extParams,sex){
			(nkname===void 0)&& (nkname='');
			(headimg===void 0)&& (headimg='');
			(sex===void 0)&& (sex=0);
			this._externalUserName=username;
			this._externalToken=token;
			this._externalNkName=nkname;
			this._externalHeadImg=headimg;
			this.extParams=extParams;
			this._extSex=sex;
			if (this.authCode){
				this.login2Router();
				}else{
				this.onGotRouter(this.config.routerAddr);
			}
		}

		__proto.onGotRouter=function(res){
			Browser.window.logtime('从Gate得到Router地址');
			this.showStartMsg("从Gate得到Router地址");
			if (res){
				this.Connect2Router(res);
				}else{
				this.onGetRouterError();
			}
		}

		__proto.onRouterSocketCLOSE=function(e){
			if (e !=null){
				this.showErrorMsgBox('网络异常',ErrorMsg.GetMsg(-90001)+'(3)');
			}
			this.sendRoomSocketStatus(false);
			this.stopHeart();
		}

		__proto.onRouterSocketERROR=function(){
			this.showErrorMsgBox('网络异常',ErrorMsg.GetMsg(-90001)+'(4)');
			this.sendRoomSocketStatus(false);
			this.stopHeart();
		}

		//private var processedCount:int=0;
		__proto.onRouterSocketMessage=function(data){
			Method.log('receive msg:',data);
			this.m_SupMsg+=data;
			var rs;
			for (var i=0;i < 100;i++){
				rs=Method.getCompleteJSON(this.m_SupMsg);
				if (rs.code !=0){
					this.showErrorMsgBox('协议错误',ErrorMsg.GetMsg(-90002));
					this.closeRouterSocket();
					return;
				}
				this.m_SupMsg=rs.leftString;
				var pkg=rs.matchedJSONString;
				if (null !=pkg && "" !=pkg && "{}" !=pkg){
					this.processSingleMessage(pkg,'hall');
					}else if ("{}" !=pkg){
					break ;
				}
			}
		}

		/**
		*处理完整的单个消息
		*@param msg
		*/
		__proto.processSingleMessage=function(msg,target){
			var msgInfo;
			if ((typeof msg=='string')){
				if (msg==null || msg==""){
					return;
				}
				try {
					msgInfo=JSON.parse(msg);
					}catch (e){
					alert('协议错误, 请截图给研发商\r\n'+msg);
				}
				}else{
				msgInfo=msg;
			}
			if (!this._userDataIsReady && msgInfo.cache){
				Method.log('router连接还没准备好,暂存'+msg);
				this.cachedHallMessage.push(msg);
				return;
			}
			if (target){
				msgInfo.target=target;
			}
			if (msgInfo.target!='hall'){
				return;
			}
			if (!msgInfo.url){
				return;
			};
			var splitIndex=msgInfo.url.indexOf('.');
			var module=msgInfo.url.substr(0,splitIndex);
			var method=msgInfo.url.substr(splitIndex+1);
			if (this._handlers[module]){
				if (this._handlers[module][method]){
					this._handlers[module][method].call(this._handlers[module],msgInfo.params);
					}else{
					Method.log('[大厅]没有找到方法, 模块:'+module+',方法:'+method);
				}
				}else{
				Method.log('[大厅]没有找到模块:',module);
			}
		}

		__proto.login2Router=function(){
			var extParam='nip='+encodeURIComponent(this.externalNkName)+'&aip='+encodeURIComponent(this.externalHeadImg);
			extParam+='&cver='+encodeURIComponent(this.clientVersion);
			extParam+='&os='+encodeURIComponent(Method.getOS());
			extParam+='&sw='+Browser.clientWidth;
			extParam+='&sh='+Browser.clientHeight;
			extParam+='&dpr='+Browser.window.devicePixelRatio;
			if (this.extParams !=null){
				extParam+=this.extParams;
			};
			var referee=Method.getQueryInt('referee');
			var source=this.user.Union.getSource();
			this.showStartMsg("正在登录");
			this.user.Login(this.externalUserName,this.externalToken,source,referee,extParam);
			this.sendRoomSocketStatus(true);
		}

		__proto.onRouterSocketOpen=function(e){
			Method.log('router connected, ',this._socket);
			this.startHeart();
			if (this.authCode){
				this.authCode=false;
				this.user.sendAuthCode();
				}else{
				this.login2Router();
			}
		}

		__proto.startHeart=function(){
			Laya.timer.loop(10000,this,this.onHeartTick);
		}

		__proto.stopHeart=function(){
			Laya.timer.clear(this,this.onHeartTick);
		}

		__proto.onHeartTick=function(){
			if (Browser.now()-this.socket.lastSentTime > 10000){
				this.socket.send('user.ping',{id:1 });
			}
			if (Browser.now()-this.socket.lastRecvTime > 300000){
				this.closeRouterSocket();
				this.showErrorMsgBox('超时',ErrorMsg.GetMsg(-90003));
			}
		}

		__proto.onGameConfigLoaded=function(config){
			this.showStartMsg("游戏配置加载完成");
			Browser.window.logtime('游戏配置加载完成');
			if(Browser.onMiniGame){
				this._config=Laya.loader.getRes(Conf.CONFIGCENTER_URL+'config.json');
				}else{
				this._config=JSON.parse(config);
			}
			this._initLayaStage();
			this._loadGameLoadingImages();
			UIMgr$1.preloadUI(MessageBox);
			this.sender=new GameMessageSender$1(this.gameId);
			this._user=new User$1(this.gameId);
			this.openClient();
		}

		//将对客户端资源的加载提前
		__proto._loadGameLoadingImages=function(){
			this.showStartMsg("正在加载资源");
			this.showStartMsg("资源加载完成");
		}

		//}));
		__proto._initLayaStage=function(){
			if (this.layaStageHasInited){
				return;
			}
			this.layaStageHasInited=true;
			if (!this.config.isEmbeddedMode){
				Laya.init(1280,720);
				Laya.stage.scaleMode="fixedheight";
				Laya.stage.screenMode="horizontal";
				Laya.stage.alignH="center";
				Laya.stage.alignV="middle";
				Laya.stage.bgColor=null;
			}
			UIMgr$1.init(1280,720);
			Laya.stage.on("resize",this,this._onStageResize);
			this.showStartMsg("大厅启动中");
		}

		__proto.loadConfig=function(callback){
			this.showStartMsg("加载配置信息");
			if(Browser.onMiniGame){
				Laya.loader.load([{url:Conf.CONFIGCENTER_URL+'config.json',type:"json"}],new Handler(this,this.onGameConfigLoaded));
				Laya.loader.once("error",this,this.onGameConfigLoadError);
				}else{
				Method.httpRequest(Conf.CONFIGCENTER_URL+'config.json',{"gameid":this.gameId
				},new Handler(this,this.onGameConfigLoaded),Handler.create(this,this.onGameConfigLoadError));
			}
		}

		__proto.onGameConfigLoadError=function(){
			this._config=new GameConfig();
			this._initLayaStage();
			this.showErrorMsgBox('网络异常',ErrorMsg.GetMsg(-90001)+'(5)');
		}

		__proto.joinRoom=function(roomId,force){
			this.sender.JoinRoom(roomId,force);
		}

		__proto.canJoinRoom=function(roomId,force){
			this.sender.canJoinRoom(roomId,force);
		}

		__proto.RefreshRoomList=function(){
			this.sender.RoomList(0,10);
		}

		__proto.onRoomListRefresh=function(list){
			DataCenter.Set('roomlist',list);
		}

		__proto.onLogin2Router=function(){
			Stats.report("1_8");
			if (this.gameHasBeenStarted){
				return;
			}
			this.gameHasBeenStarted=true;
			Browser.window.logtime('Router登录完成');
			this.showStartMsg("Router登录完成,游戏载入中");
			this._userDataIsReady=true;
			if (this.isEverythingReady()){
				this.startGame();
			}
			if (this.cachedHallMessage.length>0){
				for (var i=0;i < this.cachedHallMessage.length;i++){
					Method.log('处理大厅连接建立前收到的游戏客户端消息');
					this.processSingleMessage(this.cachedHallMessage[i]);
				}
				this.cachedHallMessage.length=0;
			}
		}

		//快速开始一个类型的房间
		__proto.Match=function(type,mustNew){
			(mustNew===void 0)&& (mustNew=0);
			this.sender.Match(type,mustNew);
		}

		__proto.showStartMsg=function(str){
			var msg=Browser.document.getElementById('STARTMSG');
			if (msg!=null){
				msg.innerText=str+'';
			}
		}

		__proto.showStartScreen=function(show){
			var start=Browser.document.getElementById('start');
			if (start){
				Method.log('隐藏封面:'+show);
				start.style.visibility=show ? 'visible':'hidden';
				}else{
				Method.log('隐藏封面:'+show+',但是封面已销毁');
			}
		}

		__proto.removeStartScreen=function(){
			Method.log('移除封面0');
			Laya.timer.once(500,this,this.__removeStartScreen);
		}

		__proto.__removeStartScreen=function(){
			Method.log('移除封面1');
			var start=Browser.document.getElementById('start');
			if (start !=null){
				Method.log('移除封面2');
				start.parentNode.removeChild(start);
			}
		}

		__proto.openClient=function(){
			if (this.config.isEmbeddedMode){
				this.hallMessager=new HallMessage$1(Browser.window);
				this.hallMessager.on("message",this,this.onMessage);
				}else{
				var url=this.config.gameStartUrl;
				if (url.indexOf('?')==-1){
					url+='?'
				};
				var transParams=[];
				transParams.push('spId='+Method.getUnionId());
				transParams.push('ext='+Method.getQueryString('ext'));
				url+='&laya8='+encodeURIComponent(transParams.join('|'));
				if (!Browser.window.runtime){
					var document=Browser.document;
					this.gamewin=document.getElementById('__laya8_hall_game');
					if (!this.gamewin){
						this.gamewin=document.createElement('iframe');
						this.gamewin.scrolling="no";
						this.gamewin.style.cssText+='position:absolute;margin:0;padding:0;left:-10000px;top:-10000px;width:'+Browser.clientWidth+'px;height:'+Browser.clientHeight+'px;border:none;visibility2:hidden';
						document.body.appendChild(this.gamewin);
						this.hallMessager=new HallMessage$1(this.gamewin.contentWindow);
						this.hallMessager.on("message",this,this.onMessage);
					}
					this.gamewin.id='__laya8_hall_game';
					this.gamewin.src=url;
					this.gamewin=this.gamewin;
					}else{
					var d={
						gameUrl:url,
						orientation:"landscape",
						engineName:"layaAirPlugin"
					};
					Method.log('使用runtime打开游戏');
					Browser.window.runtime.openGame(JSON.stringify(d));
					this.hallMessager=new HallMessage$1(null);
					this.hallMessager.on("message",this,this.onMessage);
				}
			}
			Laya8Hall.Hall.Start();
			Method.log('打开游戏:',this.gameId);
		}

		__proto.notifyGameClientWindowSize=function(){
			if (this._clientIsReady && !Browser.window.runtime){
				this.gamewin && this.gamewin.contentWindow.postMessage({name:'size',width:Browser.clientWidth,height:Browser.window.innerHeight,clientHeight:(Browser.document.body.clientHeight || Browser.document.documentElement.clientHeight)},'*');
			}
		}

		//alert(JSON.stringify({name:'size',width:Browser.clientWidth,height:Browser.window.innerHeight,clientHeight:(Browser.document.body.clientHeight || Browser.document.documentElement.clientHeight)}));
		__proto.showGameWindow=function(show){
			if (show && this.hasError){
				Method.log('有错误发生, 不显示游戏窗口');
				return;
			}
			if (Browser.window.runtime){
				if (!this.config.isEmbeddedMode){
					Method.log('显示游戏窗口:',show);
					Browser.window.runtime.hideWebview(show);
					}else{
					Laya.conchMarket.sendMessageToPlatform('{"type":"ge_load_game_end"}',function(){});
				}
				}else{
				if (this.gamewin !=null){
					var style=this.gamewin.style;
					if (show){
						Browser.document.body.blur();
						this.gamewin.focus();
						style.left=0;
						style.top=0;
						}else{
						style.left='-10000px';
						style.top='-10000px';
						this.gamewin.blur();
						Browser.document.body.focus();
					}
					}else{
					if (this.config.isEmbeddedMode){
						UIMgr$1.hideAllLayer(show);
					}
				}
			}
		}

		/**
		*停止运行当前游戏
		*/
		__proto.Stop=function(){
			Method.log('结束游戏:',this.gameId);
			UIMgr$1.closeAll();
			this.stopHeart();
			this.socket.close();
		}

		__proto.getRoomTypeList=function(){
			this.sender.RoomTypeList(this.config.roomTypeList);
		}

		__proto.startGame=function(){
			var _$this=this;
			function __ (){
				_$this.showGameWindow(true);
				if (_$this.canRemoveSplash){
					_$this.removeStartScreen();
				}
				if (!_$this.config.isEmbeddedMode){}
					_$this.user.SyncData();
				_$this.user.SyncMyRankData();
				_$this.notifyGameClientWindowSize();
			}
			Laya.timer.once(100,null,__);
		}

		//}
		__proto.clientIsReady=function(){
			Method.log('客户端准备完成');
			Browser.window.logtime('游戏客户端准备完毕');
			Browser.window.alertTimeLog();
			this.showStartMsg("游戏准备完毕");
			if (this.hasError){return;}
				this._clientIsReady=true;
			if (this.isEverythingReady()){
				this.startGame();
			}
		}

		__proto.isEverythingReady=function(){
			return this._clientIsReady && this._userDataIsReady;
		}

		/**
		*获取自定义ui的存储路径
		*/
		__proto.getCustomUIPath=function(){
			return '';
		}

		// Math.floor(_gameId / 1000)+'/'+_gameId+'/';
		__proto.onStartFight=function(data){
			this.sender.StartGame(data);
		}

		__proto.makeTestRankData=function(rankListId){
			var m=new RankListInfo$1();
			m.RankListId=rankListId;
			for (var i=1;i <=10;i++){
				var r=new RankInfo$1();
				r.Change=Method.random(-100,100);
				r.Rank=i;
				r.RankValue=Method.random(1,10000);
				r.UserData.Avtor=Method.random(1,2);
				r.UserData.Gender=Method.random(0,1);
				r.UserData.Grade=Method.random(1,10);
				r.UserData.Level=Method.random(1,999);
				r.UserData.NkName='测试数据昵称'+Method.random(100,999);
				m.List.push(r);
			}
			this.onGotRankList(m);
		}

		/**
		*获取排行榜信息
		*@param rankListId
		*@param cacheTime
		*/
		__proto.getRankList=function(rankListId,cacheTime){
			(cacheTime===void 0)&& (cacheTime=60);
			var now=Browser.now();
			var res=DataCenter.Query('ranklist.'+rankListId);
			if (res==null || this._rankCacheTime[rankListId]==null || this._rankCacheTime[rankListId] <=now){
				this.sender.GetRankList(rankListId,cacheTime);
				this._rankCacheTime[rankListId]=now+cacheTime *1000;
				}else{
				this.onGotRankList(res);
			}
		}

		__proto.onGotRankList=function(res){
			DataCenter.Set('ranklist.'+res.RankListId,res);
			this.sender.onGotRankList(res);
		}

		__proto.sendRoomSocketStatus=function(isConnected){
			this.sender.sendRoomSocketStatus(isConnected);
		}

		__proto.showErrorMsgBox=function(title,msg){
			this.hasError=true;
			if (Laya.stage==null){
				this._initLayaStage();
			}
			this.closeRouterSocket();
			Laya.stage.visible=true;
			if(Browser.onMiniGame){
				if(!Game.onNetWorkType){
					return;
				}
			}
			MessageBox.title=title;
			MessageBox.message=msg;
			MessageBox.onCloseCallbackFn=Handler.create(this,function(){
				Method.refreshWindow();
			});
			UIMgr$1.openUI(MessageBox,UIMgr$1.LAYER_POP5);
			this.showGameWindow(false);
		}

		__proto.onError=function(err){
			if (err.errorCode !=0){
				var msg=ErrorMsg.GetMsg(err.errorCode);
				this.showErrorMsgBox('系统错误',msg);
			}
			this.sender.onError(err);
		}

		__proto.getQRCode=function(url){
			return;
		}

		/*
		var urls:Array=[];
		urls.push(Browser.window.location.protocol);
		urls.push('//');
		urls.push(Browser.window.location.host);
		urls.push(Browser.window.location.pathname);
		urls.push('?');
		urls.push(url);
		url=urls.join('');
		if (_cacheQRCode[url]){
			this.sender.onGotQRCode(_cacheQRCode[url]);
			return;
		}

		Method.httpRequest(Conf.WECHAT_BASE_URL+'index.php?m=weixin&a=qrcode',{
			gameid:this.gameId,
			url:url
			},Handler.create(this,function(dat:*):void {
			if (dat.code==0){
				_cacheQRCode[url]=dat;
			}
			this.sender.onGotQRCode(dat);
		}));*/

		__proto.initShareConfig=function(cfg){
			this.user.GetUnion().InitShareConfig(cfg);
		}

		__proto.sendMessageToFriend=function(opts){
			this.user.GetUnion().SendMessageToFriend(opts);
		}

		__proto.share=function(share){
			this.user.GetUnion().Share(share);
		}

		__proto.openUrlWithExtraWebview=function(opts){
			this.user.GetUnion().openUrlWithExtraWebview(opts);
		}

		__proto.closeWindow=function(){
			this.user.GetUnion().closeWindow();
		}

		__proto.sendDesktop=function(opts){
			this.user.GetUnion().sendDesktop(opts);
		}

		__proto.setCloseWindowConfirmDialogInfo=function(opts){
			this.user.GetUnion().setCloseWindowConfirmDialogInfo(opts);
		}

		__proto.getNetworkInfo=function(){
			this.user.GetUnion().getNetworkInfo();
		}

		__proto.relation=function(){
			this.user.GetUnion().relation();
		}

		__proto.onShareFinish=function(code,param){
			this.sender.onShareFinish(code,param);
		}

		__proto.notify=function(dat){
			this.sender.notify(dat);
		}

		__proto.onNotify=function(dat){
			this.sender.onNotify(dat);
		}

		__proto.removeSplash=function(){
			this.canRemoveSplash=true;
			if (this._userDataIsReady && this._clientIsReady){
				this.removeStartScreen();
			}
		}

		__proto.getCurrentSeasonData=function(dat){
			this.sender.getCurrentSeasonData(dat);
		}

		__proto.queryCurrentData=function(dat){
			this.sender.queryCurrentData(dat);
		}

		__proto.onGotCurrentSeasonDataResult=function(dat){
			this.sender.onGotCurrentSeasonDataResult(dat);
		}

		__proto.seasonQueryCurrentDataResult=function(dat){
			this.sender.seasonQueryCurrentDataResult(dat);
		}

		__proto.setWXBasicReport=function(info){
			this.user.GetUnion().SetWXBasicReport(info);
		}

		__proto.setWXReport=function(info){
			this.user.GetUnion().SetWXReport(info);
		}

		__proto.checkGameHideTime=function(){
			console.log('游戏隐藏检查');
			if (this.gameHideStartTime>0&&Browser.now()-this.gameHideStartTime > 300000){
				if (this.socket !=null && this.socket.isConnected()){
					console.log('超时时间已到，自动断开连接');
					this.closeRouterSocket();
					this.showErrorMsgBox('超时',ErrorMsg.GetMsg(-90003));
				}
				Laya.timer.clear(this,this.checkGameHideTime);
				return;
			}
		}

		__proto.onGameVisibilityChange=function(flag,state){
			if (state=='onDestroy'){
				this.user.leaveTeam();
			}
			if (flag){
				this.gameHideStartTime=0;
				Laya.timer.clear(this,this.checkGameHideTime);
				}else {
				this.gameHideStartTime=Browser.now();
				Laya.timer.loop(30000,this,this.checkGameHideTime);
			}
			this.sender.onGameVisibilityChange(flag,state);
		}

		__proto.basicQuery=function(dat){
			this.sender.basicQuery(dat);
		}

		__proto.onBasicDataQueried=function(dat){
			this.sender.onBasicDataQueried(dat);
		}

		__proto.onGotNetworkInfo=function(param){
			this.sender.onGotNetworkInfo(param);
		}

		__proto.onGotRelation=function(dat){
			this.sender.onGotRelation(dat);
		}

		__proto.setWXListSubscribe=function(dat){
			this.user.GetUnion().setWXListSubscribe(dat);
		}

		__proto.onSetWXListSubscribeResult=function(dat){
			this.sender.onSetWXListSubscribeResult(dat);
		}

		__proto.getWXListSubscribe=function(){
			this.user.GetUnion().getWXListSubscribe();
		}

		__proto.onGotWXListSubscribe=function(dat){
			this.sender.onGotWXListSubscribe(dat);
		}

		__proto.openTopicCircle=function(){
			this.user.GetUnion().openTopicCircle();
		}

		__proto.onPreloadQQBrowserResource=function(rsp){
			this.sender.onPreloadQQBrowserResource(rsp);
		}

		__proto.preloadQQBrowserResource=function(options){
			this.user.GetUnion().preloadQQBrowserResource(options);
		}

		__proto.getAvailableLoginType=function(){
			this.user.GetUnion().getAvailableLoginType();
		}

		__proto.onGotAvailableLoginType=function(availableLoginType){
			this.sender.onGotAvailableLoginType(availableLoginType);
		}

		__proto.getShareInfo=function(shareTicket){
			this.user.GetUnion().getShareInfo(shareTicket);
		}

		__proto.getWXShareParams=function(){
			this.user.GetUnion().getWXShareParams();
		}

		__proto.getShareOpenid=function(){
			this.user.GetUnion().getShareOpenid();
		}

		__proto.getShareChannel=function(){
			this.user.GetUnion().getShareChannel();
		}

		__proto.onGotWXShareParams=function(dat){
			this.sender.onGotWXShareParams(dat);
		}

		__proto.onGotShareOpenid=function(dat){
			this.sender.onGotShareOpenid(dat);
		}

		__proto.onGotShareChannel=function(dat){
			this.sender.onGotShareChannel(dat);
		}

		__proto.addQQGameShortcut=function(opts){
			this.user.GetUnion().addQQGameShortcut(opts);
		}

		__proto.onSentDesktop=function(dat){
			this.sender.onSentDesktop(dat);
		}

		__proto.addQQFriend=function(opts){
			this.user.GetUnion().addQQFriend(opts);
		}

		__proto.shareScreenshot=function(opts){
			this.user.GetUnion().shareScreenshot(opts);
		}

		__proto.switchToMsgList=function(opts){
			this.user.GetUnion().switchToMsgList(opts);
		}

		__proto.getInterstitialAdAsync=function(placement_id){
			this.user.GetUnion().getInterstitialAdAsync(placement_id);
		}

		__proto.getRewardedVideoAsync=function(placement_id){
			this.user.GetUnion().getRewardedVideoAsync(placement_id);
		}

		__proto.onAddedQQFriend=function(dat){
			this.sender.onAddedQQFriend(dat);
		}

		__proto.onShareScreenshot=function(dat){
			this.sender.onShareScreenshot(dat);
		}

		__proto.onSwitchToMsgList=function(dat){
			this.sender.onSwitchToMsgList(dat);
		}

		__proto.onMidasPayResult=function(code,count){
			this._handlers['pay'].onMidasPayResult(code,count);
		}

		/**
		*
		*@param code 0=成功,-1=失败,1=窗口关闭
		*/
		__proto.onPayFinish=function(code,count){
			this._handlers['pay'].onPayFinish(code,count);
		}

		__proto.getPlayZoneUserInfo=function(){
			this._handlers['pay'].getPlayZoneUserInfo();
		}

		__proto.buyPlayZoneItem=function(orderId,itemId,itemCount){
			this._handlers['pay'].buyPlayZoneItem(orderId,itemId,itemCount);
		}

		__proto.decryptWechatInfo=function(encryptedData,iv){
			this._handlers['wechat'].decrypt({encryptedData:encryptedData,iv:iv});
		}

		__proto.onGotShareInfo=function(dat){
			this.sender.onGotShareInfo(dat);
		}

		__proto.onGotInterstitialAdAsync=function(dat){
			this.sender.onGotInterstitialAdAsync(dat);
		}

		__proto.onGotRewardedVideoAsync=function(dat){
			this.sender.onGotRewardedVideoAsync(dat);
		}

		__proto.getLeaderboardAsync=function(dat){
			this.user.GetUnion().getLeaderboardAsync(dat);
		}

		__proto.onGotLeaderboardEntry=function(dat){
			this.sender.onGotLeaderboardEntry(dat);
		}

		__proto.setScoreAsync=function(dat){
			this.user.GetUnion().setScoreAsync(dat);
		}

		__proto.onLoginError=function(){
			this.sender.onLoginError();
		}

		__proto.onSetScoreAsync=function(dat){
			this.sender.onSetScoreAsync(dat);
		}

		__proto.getEntriesAsync=function(dat){
			this.user.GetUnion().getEntriesAsync(dat);
		}

		__proto.onGotEntriesAsync=function(dat){
			this.sender.onGotEntriesAsync(dat);
		}

		__proto.setLoadingProgress=function(progress){
			this.user.GetUnion().setLoadingProgress(progress);
		}

		__getset(0,__proto,'clientVersion',function(){
			return this._clientVersion;
			},function(value){
			this._clientVersion=value;
		});

		__getset(0,__proto,'user',function(){
			return this._user;
		});

		__getset(0,__proto,'gameId',function(){
			return this._gameId;
		});

		__getset(0,__proto,'socket',function(){
			return this._socket;
		});

		__getset(0,__proto,'externalToken',function(){
			return this._externalToken;
		});

		__getset(0,__proto,'config',function(){
			return this._config;
		});

		__getset(0,__proto,'externalNkName',function(){
			return this._externalNkName;
		});

		__getset(0,__proto,'externalUserName',function(){
			return this._externalUserName;
		});

		__getset(0,__proto,'externalHeadImg',function(){
			return this._externalHeadImg;
		});

		__getset(0,__proto,'extSex',function(){
			return this._extSex;
		});

		Game.isConnected=true;
		Game.onNetWorkType=function(msg){
			return false;
		}

		return Game;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class logic.game.GameConfig
	var GameConfig=(function(){
		function GameConfig(){
			this.defaultRoomListType=1;
			this.layaMarketOpenId='';
			this.layaMarketOpenKey='';
			this.gameStartUrl='';
			this.customUI=null;
			this.layaMarketRelatedId=null;
			this.roomTypeList=null;
			this.banUnionIdList=null;
			this.isEmbeddedMode=0;
			this.routerAddr=null;
			this.signSite=null;
			this.paycenter=null;
			this.configcenter=null;
			this.LayaStoreMarketSDKUrl=null;
			this.orientation=false;
			this.facebookInfo=null;
			this.roomListMode=0x0001;
		}

		__class(GameConfig,'logic.game.GameConfig');
		return GameConfig;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class logic.game.GameManager
	var GameManager=(function(){
		function GameManager(){}
		__class(GameManager,'logic.game.GameManager');
		GameManager.GetGame=function(gameId){
			if (GameManager.games[gameId]){
				return GameManager.games[gameId];
			}
			return null;
		}

		GameManager.AddGame=function(g){
			if (!GameManager.games[g.gameId]){
				GameManager.games[g.gameId]=g;
			}
		}

		GameManager.GetCurrentGame=function(){
			return GameManager.GetGame(GameManager._currentGameId);
		}

		GameManager.SetCurrentGameId=function(gameId){
			GameManager._currentGameId=gameId;
		}

		GameManager.StartGame=function(gameId,roomId){
			(roomId===void 0)&& (roomId='');
			if (GameManager._currentGameId>0){
				GameManager.StopGame(GameManager._currentGameId);
			}
			Method.log('开始游戏:',gameId,roomId);
			logic.game.GameManager.SetCurrentGameId(gameId);
			logic.game.GameManager.AddGame(new Game$1(gameId,roomId));
		}

		GameManager.StopGame=function(gameId){
			if (gameId !=GameManager._currentGameId){
				Method.log('要停止的游戏不是当前正在进行的游戏');
				return;
			};
			var g=GameManager.GetGame(gameId);
			g.Stop();
		}

		GameManager._currentGameId=0;
		__static(GameManager,
		['games',function(){return this.games=new Object();}
		]);
		return GameManager;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class logic.game.GameMessageSender
	var GameMessageSender$1=(function(){
		function GameMessageSender(gameId){
			this.gameId=0;
			this.game=null;
			this.gameId=gameId;
			this.game=GameManager.GetGame(gameId);
		}

		__class(GameMessageSender,'logic.game.GameMessageSender',null,'GameMessageSender$1');
		var __proto=GameMessageSender.prototype;
		__proto.RoomList=function(pageIndex,pageSize){
			alert('未实现RoomList');
			this.socket.send('room.user.'+'roomList',{
				gameId:this.gameId,
				pageIndex:pageIndex,
				pageSize:pageSize
			});
		}

		__proto.Match=function(type,mustNew){
			this.socket.send('room.user.'+'play',{
				roomtype:type,
				mustNew:mustNew
			});
		}

		__proto.JoinRoom=function(roomId,forceEnter){
			this.socket.send('room.user.'+'join',{
				roomid:roomId,
				force:forceEnter?1:0
			});
		}

		__proto.canJoinRoom=function(roomId,forceEnter){
			this.socket.send('room.user.'+'canJoin',{
				roomid:roomId,
				force:forceEnter?1:0
			});
		}

		__proto.RoomTypeList=function(list){
			Method.log('发送房间类型列表:',list);
			this.game.hallMessager.send('game.'+'onGotRoomTypeList',list);
		}

		__proto.StartGame=function(data){
			this.game.hallMessager.send('game.'+'startGame',data);
		}

		__proto.GetRankList=function(rankListId,cacheTime){
			this.socket.send('room.user.getRank',{
				rankId:rankListId
			});
		}

		__proto.onGotRankList=function(res){
			this.game.hallMessager.send('game.'+'onGotRankList',res);
		}

		__proto.onGotGoodList=function(shopId,data){
			this.game.hallMessager.send('game.'+'onGotGoodList',{
				ShopId:shopId,
				List:data
			});
		}

		__proto.buyGood=function(defId,deadline,price){
			this.socket.send('room.shop.buygood',{
				defId:defId,
				deadline:deadline,
				price:price
			});
		}

		__proto.sendRoomSocketStatus=function(isConnected){
			this.game.hallMessager && this.game.hallMessager.send('game.'+'roomSocketStatus',isConnected);
		}

		__proto.onGotQRCode=function(dat){
			this.game.hallMessager.send('game.'+'onGotQRCode',dat);
		}

		__proto.notify=function(dat){
			this.socket.send('game.'+'game.notify',dat);
		}

		__proto.onNotify=function(dat){
			this.game.hallMessager.send('game.'+'onNotify',dat);
		}

		__proto.getCurrentSeasonData=function(dat){
			this.socket.send('game.season.getCurrentData',dat);
		}

		__proto.queryCurrentData=function(dat){
			this.socket.send('game.season.queryCurrentData',dat);
		}

		__proto.onGotCurrentSeasonDataResult=function(dat){
			this.game.hallMessager.send('game.'+'onGotCurrentSeasonDataResult',dat);
		}

		__proto.seasonQueryCurrentDataResult=function(dat){
			this.game.hallMessager.send('game.'+'seasonQueryCurrentDataResult',dat);
		}

		__proto.onShareFinish=function(code,param){
			this.game.hallMessager.send('game.'+'onShareFinish',{
				code:code,
				param:param
			});
		}

		__proto.onGameVisibilityChange=function(flag,state){
			if (this.game.hallMessager){
				this.game.hallMessager.send('game.'+'onGameVisibilityChange',{
					flag:flag,
					state:state
				});
			}
		}

		__proto.basicQuery=function(dat){
			this.socket.send('game.data.basicQuery',dat);
		}

		__proto.onBasicDataQueried=function(dat){
			this.game.hallMessager.send('game.'+'basicDataQueried',dat);
		}

		__proto.onReconnect=function(dat){
			if (this.game.hallMessager){
				this.game.hallMessager.send('game.'+'onReconnect',dat);
			}
		}

		__proto.onGotNetworkInfo=function(param){
			this.game.hallMessager.send('game.'+'onGotNetworkInfo',param);
		}

		__proto.onGotRelation=function(dat){
			this.game.hallMessager.send('game.'+'onGotRelation',dat);
		}

		__proto.onSetWXListSubscribeResult=function(dat){
			this.game.hallMessager.send('game.'+'onSetWXListSubscribeResult',dat);
		}

		__proto.onGotWXListSubscribe=function(dat){
			this.game.hallMessager.send('game.'+'onGotWXListSubscribe',dat);
		}

		__proto.onError=function(err){
			if (this.game.hallMessager){
				this.game.hallMessager.send('game.'+'onError',err);
			}
		}

		__proto.onPreloadQQBrowserResource=function(rsp){
			this.game.hallMessager.send('game.'+'onPreloadQQBrowserResource',rsp);
		}

		__proto.onGotAvailableLoginType=function(availableLoginType){
			this.game.hallMessager.send('game.'+'onGotAvailableLoginType',availableLoginType);
		}

		__proto.onGotWXShareParams=function(dat){
			this.game.hallMessager.send('game.'+'onGotWXShareParams',dat);
		}

		__proto.onGotShareOpenid=function(dat){
			this.game.hallMessager.send('game.'+'onGotShareOpenid',dat);
		}

		__proto.onGotShareChannel=function(dat){
			this.game.hallMessager.send('game.'+'onGotShareChannel',dat);
		}

		__proto.onSentDesktop=function(dat){
			this.game.hallMessager.send('game.'+'onSentDesktop',dat);
		}

		__proto.onAddedQQFriend=function(dat){
			this.game.hallMessager.send('game.'+'onAddedQQFriend',dat);
		}

		__proto.onShareScreenshot=function(dat){
			this.game.hallMessager.send('game.'+'onShareScreenshot',dat);
		}

		__proto.onSwitchToMsgList=function(dat){
			this.game.hallMessager.send('game.'+'onSwitchToMsgList',dat);
		}

		__proto.onGotShareInfo=function(dat){
			this.game.hallMessager.send('game.'+'onGotShareInfo',dat);
		}

		__proto.onGotInterstitialAdAsync=function(dat){
			this.game.hallMessager.send('game.'+'onGotInterstitialAdAsync',dat);
		}

		__proto.onSetScoreAsync=function(dat){
			this.game.hallMessager.send('game.'+'onSetScoreAsync',dat);
		}

		__proto.onGotEntriesAsync=function(dat){
			this.game.hallMessager.send('game.'+'onGotEntriesAsync',dat);
		}

		__proto.onGotLeaderboardEntry=function(dat){
			this.game.hallMessager.send('game.'+'onGotLeaderboardEntry',dat);
		}

		__proto.onGotRewardedVideoAsync=function(dat){
			this.game.hallMessager.send('game.'+'onGotRewardedVideoAsync',dat);
		}

		__proto.onLoginError=function(){
			this.game.hallMessager.send('game.'+'onLoginError',[]);
		}

		__getset(0,__proto,'socket',function(){
			return this.game.socket;
		});

		GameMessageSender._urlPrefix='room.user.';
		GameMessageSender._gameUrlPrefix='game.';
		return GameMessageSender;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class logic.game.OpenWebViewInfo
	var OpenWebViewInfo$1=(function(){
		function OpenWebViewInfo(){
			this.url=null;
			this.openType=0;
		}

		__class(OpenWebViewInfo,'logic.game.OpenWebViewInfo',null,'OpenWebViewInfo$1');
		return OpenWebViewInfo;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class logic.game.RankInfo
	var RankInfo$1=(function(){
		function RankInfo(){
			this.Rank=0;
			this.RankValue=0;
			this.Change=0;
			this.UserData=null;
			this.UserData=new UserShortDataInfo$1();
		}

		__class(RankInfo,'logic.game.RankInfo',null,'RankInfo$1');
		return RankInfo;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class logic.game.RankListInfo
	var RankListInfo$1=(function(){
		function RankListInfo(){
			this.RankListId=0;
			this.List=null;
			this.List=[];
		}

		__class(RankListInfo,'logic.game.RankListInfo',null,'RankListInfo$1');
		return RankListInfo;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class logic.game.SendDesktopInfo
	var SendDesktopInfo$1=(function(){
		function SendDesktopInfo(){
			this.title=null;
			this.icon=null;
			this.url=null;
			this.ext=null;
		}

		__class(SendDesktopInfo,'logic.game.SendDesktopInfo',null,'SendDesktopInfo$1');
		return SendDesktopInfo;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class logic.game.SendMessageToFriendInfo
	var SendMessageToFriendInfo$1=(function(){
		function SendMessageToFriendInfo(){
			this.fopenid=null;
			this.thumb_url=null;
			this.title=null;
			this.description=null;
			this.url=null;
			this.game_tag=0;
		}

		__class(SendMessageToFriendInfo,'logic.game.SendMessageToFriendInfo',null,'SendMessageToFriendInfo$1');
		return SendMessageToFriendInfo;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class logic.game.ShareConfigInfo
	var ShareConfigInfo$1=(function(){
		function ShareConfigInfo(){
			this.title=null;
			this.desc=null;
			this.image_url=null;
			this.share_url=null;
			this.params=null;
			this.sourceName=null;
			this.toApp
		}

		__class(ShareConfigInfo,'logic.game.ShareConfigInfo',null,'ShareConfigInfo$1');
		return ShareConfigInfo;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class logic.game.ShareInfo
	var ShareInfo$1=(function(){
		function ShareInfo(){
			this.title=null;
			this.desc=null;
			this.sourceName=null;
			this.share_url=null;
			this.image_url=null;
			this.toUin=null;
			this.share_type=0;
		}

		__class(ShareInfo,'logic.game.ShareInfo',null,'ShareInfo$1');
		return ShareInfo;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class logic.game.ShareScreenshotInfo
	var ShareScreenshotInfo$1=(function(){
		function ShareScreenshotInfo(){
			this.briefMsg=null;
			this.appName=null;
			this.iconUrl=null;
			this.actionUrl=null;
		}

		__class(ShareScreenshotInfo,'logic.game.ShareScreenshotInfo',null,'ShareScreenshotInfo$1');
		return ShareScreenshotInfo;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class logic.game.SwitchToMsgListInfo
	var SwitchToMsgListInfo$1=(function(){
		function SwitchToMsgListInfo(){
			this.title=null;
			this.icon=null;
		}

		__class(SwitchToMsgListInfo,'logic.game.SwitchToMsgListInfo',null,'SwitchToMsgListInfo$1');
		return SwitchToMsgListInfo;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class logic.game.WXBasicReportInfo
	var WXBasicReportInfo$1=(function(){
		function WXBasicReportInfo(){
			this.game_version=null;
			this.role_id=null;
			this.role_name=null;
			this.zone_id=NaN;
			this.server_id=NaN;
			this.user_level=NaN;
		}

		__class(WXBasicReportInfo,'logic.game.WXBasicReportInfo',null,'WXBasicReportInfo$1');
		return WXBasicReportInfo;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class logic.game.WXReportInfoBase
	var WXReportInfoBase$1=(function(){
		function WXReportInfoBase(){
			this.type=null;
		}

		__class(WXReportInfoBase,'logic.game.WXReportInfoBase',null,'WXReportInfoBase$1');
		return WXReportInfoBase;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class logic.pay.CoinsPayItemInfo
	var CoinsPayItemInfo=(function(){
		function CoinsPayItemInfo(){
			this.id=null;
			this.name=null;
			this.desc=null;
			this.coin_count=0;
			this.coin_type=0;
			this.price=null;
			this.display_price=null;
			this.origin_price=null;
			this.icon=null;
			this.ext=null;
		}

		__class(CoinsPayItemInfo,'logic.pay.CoinsPayItemInfo');
		return CoinsPayItemInfo;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class logic.pay.PayOrderInfo
	var PayOrderInfo=(function(){
		function PayOrderInfo(){
			this.orderId=null;
			this.itemId=null;
			this.itemCount=0;
			this.totalPrice=NaN;
			this.userId=0;
			this.code=0;
		}

		__class(PayOrderInfo,'logic.pay.PayOrderInfo');
		return PayOrderInfo;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class logic.room.Room
	var Room=(function(){
		function Room(gameId){
			this.sender=null;
			this.gameId=0;
			this.gameId=gameId;
			this.sender=new RoomMessageSender(gameId);
		}

		__class(Room,'logic.room.Room');
		Room.Create=function(gameId,type){
			(type===void 0)&& (type=1);
			RoomMessageSender.Create(gameId,type);
		}

		Room.onCreated=function(roomInfo){
			Method.log('房间创建成功',roomInfo);
		}

		Room.Join=function(roomInfo,password){
			(password===void 0)&& (password='');
			RoomMessageSender.Join(roomInfo.room.gameId,roomInfo.room.id,password);
		}

		return Room;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class logic.room.RoomInfo
	var RoomInfo$1=(function(){
		function RoomInfo(){
			this.gameid=null;
			this.id=null;
			this.roomname=null;
			this.ip=null;
		}

		__class(RoomInfo,'logic.room.RoomInfo',null,'RoomInfo$1');
		return RoomInfo;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class logic.room.RoomMessageSender
	var RoomMessageSender=(function(){
		function RoomMessageSender(gameId){
			this.gameId=0;
			this.game=null;
			this.gameId=gameId;
			this.game=GameManager.GetGame(gameId);
		}

		__class(RoomMessageSender,'logic.room.RoomMessageSender');
		var __proto=RoomMessageSender.prototype;
		__getset(0,__proto,'socket',function(){
			return this.game.socket;
		});

		RoomMessageSender.Create=function(gameId,type){
			var game=GameManager.GetGame(gameId);
			game.socket.send('room.GameClientAPI.'+'createRoom',{gameId:gameId,type:type });
		}

		RoomMessageSender.Join=function(gameId,roomId,password){
			var game=GameManager.GetGame(gameId);
			game.socket.send('room.GameClientAPI.'+'joinRoom',{gameId:gameId,roomId:roomId,password:password });
		}

		RoomMessageSender._urlPrefix='room.GameClientAPI.';
		return RoomMessageSender;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class logic.stat.Stats
	var Stats=(function(){
		function Stats(){}
		__class(Stats,'logic.stat.Stats');
		Stats.report=function(step){
			ErrorLog.I&&ErrorLog.I.reportError("sdk",step,null);
			if (!Stats.enabled){
				return;
			};
			var content={
				event:step,
				param_01:"game_id",
				value_01:GameManager.GetCurrentGame().gameId,
				param_02:"sp_id",
				value_02:Method.getUnionId()
			};
			var params="event=custom&writter=all&loc_event_time="+Browser.now()+"&owner_id="+GameManager.GetCurrentGame().gameId+"&loc_sent_time"+Browser.now()+"&content="+
			encodeURIComponent(JSON.stringify(content));
			Method.httpRequest(Stats.reportUrl+params,null,Handler.create(null,function(){
				Method.log('日志汇报成功:'+step);
				}),Handler.create(null,function(){
				Method.log('日志汇报出错:'+step);
			}));
		}

		Stats.s1_0="1_0";
		Stats.s1_1="1_1";
		Stats.s1_2="1_2";
		Stats.s1_3="1_3";
		Stats.s1_4="1_4";
		Stats.s1_5="1_5";
		Stats.s1_6="1_6";
		Stats.s1_7="1_7";
		Stats.s1_8="1_8";
		Stats.enabled=false;
		Stats.reportUrl='//statistics.masteropen.layabox.com/open/log?';
		return Stats;
	})()


	/**
	*...
	*@author jiayanzhao
	*/
	//class logic.UIMgr
	var UIMgr$1=(function(){
		function UIMgr(){}
		__class(UIMgr,'logic.UIMgr',null,'UIMgr$1');
		UIMgr.init=function(width,height){
			if (UIMgr._inited){
				return;
			}
			UIMgr._inited=true;
			UIMgr._layerNames=[UIMgr.LAYER_FIGHT,UIMgr.LAYER_BG,UIMgr.LAYER_POP1,UIMgr.LAYER_POP2,UIMgr.LAYER_POP3,UIMgr.LAYER_POP4,UIMgr.LAYER_POP5,UIMgr.LAYER_TIPS,UIMgr.LAYER_GUIDE,UIMgr.LAYER_LOADING,UIMgr.LAYER_WARNING,UIMgr.LAYER_WAITING];
			UIMgr._layers=new Object();
			UIMgr.uiMap=new Object();
			UIMgr.openingUIArray=new Object();
			UIMgr.dicRes={
				Login:[ {url:"res/atlas/comp.json",type:"atlas" }]
			};
			var __layer;
			for (var i=0;i < UIMgr._layerNames.length;i++){
				__layer=new Box();
				__layer.name=UIMgr._layerNames[i];
				__layer.mouseThrough=true;
				__layer.mouseEnabled=true;
				__layer.left=__layer.top=__layer.right=__layer.bottom=0;
				__layer.zOrder=10000000+i;
				Laya.stage.addChild(__layer);
				UIMgr._layers[UIMgr._layerNames[i]]=__layer;
				UIMgr.openingUIArray[UIMgr._layerNames[i]]=[];
			}
			Browser.window["UIMgr"]=UIMgr;
		}

		UIMgr.onWaitingLoaded=function(){
			UIMgr.waitIcon=new WaitIcon();
			UIMgr.waitIcon.visible=false;
			UIMgr.getLayer(UIMgr.LAYER_WAITING).addChild(UIMgr.waitIcon);
		}

		UIMgr.getUIStringName=function(uiclass){
			if (!((typeof uiclass=='string'))){
				var arr=uiclass.prototype.__className.split('.');
				return arr[arr.length-1];
				}else{
				return uiclass;
			}
		}

		UIMgr.openUI=function(uiname,layerName){
			(layerName===void 0)&& (layerName='halllayer_pop1');
			Laya.stage.updateZOrder();
			uiname=UIMgr.getUIStringName(uiname);
			var layer=UIMgr.getLayer(layerName);
			var _ui;
			if (UIMgr.isOpening(uiname,layerName)){
				_ui=UIMgr.uiMap[uiname];
				if (_ui !=null && !_ui.isCreated)return '';
				_ui.onOpen();
			};
			var closeUIName=UIMgr.autoCloseUI(layerName);
			if (!UIMgr._checkRes(uiname)){
				Laya.loader.load(UIMgr.dicRes[uiname],new Handler(null,UIMgr._createUI,[uiname,layerName,closeUIName]));
				}else {
				UIMgr._createUI(uiname,layerName,closeUIName);
			}
			return closeUIName;
		}

		UIMgr._checkRes=function(uiname){
			var is_load=false;
			if (UIMgr.dicRes[uiname] !=null){
				if (UIMgr.dicRes[uiname].isload !=null && UIMgr.dicRes[uiname].isload==true){
					is_load=true;
				}
				}else {
				is_load=true;
			}
			return is_load;
		}

		UIMgr.isOpening=function(uiname,layerName){
			var arr=UIMgr.openingUIArray[layerName];
			if (arr==null)
				return false;
			for (var i=0;i < arr.length;i++){
				if (arr[i].name==uiname)
					return true;
			}
			return false;
		}

		UIMgr._createUI=function(uiname,layerName,closeUIName){
			if (UIMgr.dicRes[uiname] !=null){
				UIMgr.dicRes[uiname].isload=true;
			};
			var _ui=UIMgr.uiMap[uiname];
			var remote=false;
			if (_ui==null){
				_ui=UIMgr.uiMap[uiname]=ClassUtils.getInstance('ui.'+uiname);
				_ui.name=uiname;
				if (closeUIName !=''){
					_ui.once('created',_ui,function(autoCloseUIName){
						UIMgr.closeUI(autoCloseUIName);
					},[closeUIName]);
				}
				remote=_ui.loadCustomView();
				}else{
				UIMgr.closeUI(closeUIName);
			};
			var layer=UIMgr.getLayer(layerName);
			layer.addChild(_ui);
			UIMgr.openingUIArray[layerName].push(_ui);
			if (!remote){
				_ui.onOpen();
			}
		}

		UIMgr.closeUI=function(uiName){
			uiName=UIMgr.getUIStringName(uiName);
			var _ui=UIMgr.uiMap[uiName];
			if (_ui==null)return;
			if (_ui.parent==null)return;
			var layerName=_ui.parent.name;
			var array=UIMgr.openingUIArray[layerName];
			var uiIndex=array.indexOf(_ui);
			if (uiIndex >-1){
				array.splice(uiIndex,1);
				_ui.onClose();
				_ui.parent.removeChild(_ui);
			}
		}

		UIMgr.autoCloseUI=function(layerName){
			var layer=UIMgr.getLayer(layerName);
			var maxCount=parseInt(layer['maxcount']);
			if (isNaN(maxCount)|| maxCount < 1)maxCount=1;
			if (UIMgr.openingUIArray[layerName].length >=maxCount){
				var _ui=UIMgr.openingUIArray[layerName][0];
				var uiName=_ui.name;
				return uiName;
			}
			return '';
		}

		UIMgr.getLayer=function(layerName){
			return UIMgr._layers[layerName];
		}

		UIMgr.showWaitIcon=function(show,flagIndex){
			UIMgr.maskScreenFlag=show ? UIMgr.maskScreenFlag | (1 << flagIndex):UIMgr.maskScreenFlag & (~(1 << flagIndex));
			UIMgr.waitIcon.visible=UIMgr.maskScreenFlag > 0;
		}

		UIMgr.closeAll=function(){
			for (var i=0;i < UIMgr._layerNames.length;i++){
				var openingUI=UIMgr.openingUIArray[UIMgr._layerNames[i]];
				var j=openingUI.length-1;
				while (j >=0){
					UIMgr.closeUI(openingUI[j].name);
					j--;
				}
			}
		}

		UIMgr.preloadUI=function(uiname){
			uiname=UIMgr.getUIStringName(uiname);
			Method.log('预加载ui资源:'+uiname);
			var _ui=UIMgr.uiMap[uiname];
			var remote=false;
			if (_ui==null){
				_ui=ClassUtils.getInstance('ui.'+uiname);
				_ui.name=uiname;
				remote=_ui.loadCustomView(false);
			}
		}

		UIMgr.hideAllLayer=function(show){
			for (var i=0;i < UIMgr._layerNames.length;i++){
				var _layer=UIMgr.getLayer(UIMgr._layerNames[i]);
				_layer.visible=!show;
			}
		}

		UIMgr.LAYER_BG="halllayer_bg";
		UIMgr.LAYER_FIGHT="halllayer_fight";
		UIMgr.LAYER_POP1="halllayer_pop1";
		UIMgr.LAYER_POP2="halllayer_pop2";
		UIMgr.LAYER_POP3="halllayer_pop3";
		UIMgr.LAYER_POP4="halllayer_pop4";
		UIMgr.LAYER_POP5="halllayer_pop5";
		UIMgr.LAYER_TIPS="halllayer_tips";
		UIMgr.LAYER_GUIDE="halllayer_guide";
		UIMgr.LAYER_LOADING="halllayer_loading";
		UIMgr.LAYER_WARNING="halllayer_warning";
		UIMgr.LAYER_WAITING="halllayer_waiting";
		UIMgr.MASKSCREEN_USER=1;
		UIMgr._layerNames=null
		UIMgr._layers=null
		UIMgr.openingUIArray=null
		UIMgr.uiMap=null
		UIMgr.dicRes=null
		UIMgr.waitIcon=null
		UIMgr.maskScreenFlag=0;
		UIMgr._inited=false;
		return UIMgr;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class logic.UITools
	var UITools=(function(){
		function UITools(){}
		__class(UITools,'logic.UITools');
		UITools.loadRemoteUI=function(basePath,uiInfo,callback){
			var res=[];
			for (var i=0;i < uiInfo.res.length;i++){
				res[i]={};
				res[i].type=uiInfo.res[i].type;
				res[i].url=basePath+uiInfo.res[i].url;
			}
			if (res.length>0){
				Laya.loader.load(res,new Handler(null,function(){
					Method.log('加载完成远端资源');
					for (var i=0;i < res.length;i++){
						if (res[i].type!='altas'){
							Loader.cacheRes(URL.basePath+uiInfo.res[i].url,Loader.getRes(res[i].url));
						}
					}
					Method.httpRequest(basePath+uiInfo.ui,null,callback,null,true);
				}),null,"atlas");
				}else {
				Method.httpRequest(basePath+uiInfo.ui,null,callback,null,true);
			}
		}

		return UITools;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class logic.union.LayaBoxGameUserInfo
	var LayaBoxGameUserInfo=(function(){
		function LayaBoxGameUserInfo(storeUserInfo,layaboxGameInfo,access_token){
			this.SP_UID='';
			this.SP='';
			this.NICKNAME='';
			this.AVTOR_URL='';
			this.DEV_OS='';
			this.DEV_OS_VER='';
			this.DEV_IMEI='';
			this.DEV_IMSI='';
			this.DEV_MAC='';
			this.SP_TOKEN='';
			this.IP='';
			this.ACCESS_TOKEN='';
			this.GAME_ID='';
			this.IS_VIP='';
			this.CITY='';
			this.SEX='';
			this.PROVINCE='';
			this.COUNTRY='';
			this.HEADIMG='';
			this.DEV_MOBILE='';
			this.EMAIL='';
			this.EQUIPMENT_NUM='';
			this.SP_NAME='';
			try {
				storeUserInfo=JSON.parse(storeUserInfo);
			}catch(e){}
			if (!storeUserInfo["userId"]){
				alert('数据异常:'+JSON.stringify(storeUserInfo));
			}
			this.SP_UID=storeUserInfo["userId"];
			this.AVTOR_URL=storeUserInfo["headimg"];
			this.SP=layaboxGameInfo["sp"];
			this.NICKNAME=storeUserInfo["nickName"] || storeUserInfo["nickname"];
			this.SP_TOKEN=storeUserInfo["token"];
			this.ACCESS_TOKEN=access_token;
			this.GAME_ID=layaboxGameInfo["gameId"];
			this.HEADIMG=storeUserInfo["headimg"];
			this.SP_NAME=layaboxGameInfo["spFname"];
		}

		__class(LayaBoxGameUserInfo,'logic.union.LayaBoxGameUserInfo');
		return LayaBoxGameUserInfo;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class logic.union.LayaBoxOrderInfo
	var LayaBoxOrderInfo=(function(){
		function LayaBoxOrderInfo(){
			this.order_id=null;
			this.goods_name=null;
			this.amount=0;
			this.goods_desc=null;
			this.serverId=null;
			this.params=null;
			this.data={};
		}

		__class(LayaBoxOrderInfo,'logic.union.LayaBoxOrderInfo');
		return LayaBoxOrderInfo;
	})()


	/**
	*...
	*@author ...
	*/
	//class logic.union.Union_Facebook
	var Union_Facebook=(function(){
		function Union_Facebook(){
			this.game=null;
			this.instance=null;
			this.layaSDKURL='Facebook/FBSDK.6.0.js';
			this.inited=false;
			this.FBSDK=null;
			this.instance=this;
			this.game=GameManager.GetCurrentGame();
			this._loadSDKJS();
		}

		__class(Union_Facebook,'logic.union.Union_Facebook');
		var __proto=Union_Facebook.prototype;
		Laya.imps(__proto,{"logic.union.IUnion":true})
		__proto._loadSDKJS=function(){
			var _$this=this;
			var script=Browser.document.getElementById('laya8_layasdk_script')|| Browser.document.createElement('script');
			script.id='laya8_layasdk_script';
			script.onerror=function (){
				script.src=_$this.layaSDKURL;
			}
			script.onload=function (){
				_$this.instance._onLayaSDKLoaded();
			}
			script.src=this.layaSDKURL;
			Browser.document.getElementsByTagName('head')[0].appendChild(script);
		}

		__proto._onLayaSDKLoaded=function(){
			var _$this=this;
			this.FBSDK=Browser.window.FBSDK;
			if (!this.instance.game.config.facebookInfo){
				alert('config.json中没有配置[facebookInfo]');
				return;
			}
			this.FBSDK.initializeAsync(this.instance.game.config.facebookInfo,function(data){
				if (data.result==0){
					_$this.instance.inited=true;
					}else{
					alert('加载sdk时出错');
				}
			});
		}

		/*INTERFACE logic.union.IUnion */
		__proto.Login=function(loginType){
			var _$this=this;
			(loginType===void 0)&& (loginType='');
			if (!this.inited){
				Laya.timer.once(10,this,this.Login);
				}else{
				var extParams='';
				this.FBSDK.player.getSignedPlayerInfoAsync('',function(data){
					_$this.FBSDK.startGameAsync(function(){
						_$this.instance.game.onExternalUserLogin(data.getPlayerID(),data.getSignature(),_$this.FBSDK.player.getName(),_$this.FBSDK.player.getPhoto(),extParams,0);
						_$this.instance.game.user.setOpenId(data.getPlayerID());
					});
				});
			}
		}

		__proto.Pay=function(payorder,good){}
		__proto.Share=function(share){
			var _$this=this;
			if (!this.inited){
				Laya.timer.once(10,this,this.Share,[share]);
				}else {
				this.FBSDK.shareAsync({
					intent:"SHARE",
					image:share.image_url,
					text:share.title,
					data:{share_url:share.share_url}
					},function(e){
					if (null==e){
						_$this.instance.game.onShareFinish(0);
						}else{
						_$this.instance.game.onShareFinish(-1);
					}
				});
			}
		}

		__proto.InitShareConfig=function(cfg){}
		__proto.SendMessageToFriend=function(opts){}
		//}
		__proto.SetWXBasicReport=function(info){}
		__proto.SetWXReport=function(info){}
		__proto.openUrlWithExtraWebview=function(opts){}
		__proto.closeWindow=function(){}
		__proto.sendDesktop=function(opts){}
		__proto.setCloseWindowConfirmDialogInfo=function(opts){}
		__proto.getNetworkInfo=function(){}
		/**获取好友关系链数据**/
		__proto.relation=function(){
			var _$this=this;
			if (!this.inited){
				Laya.timer.once(10,this,this.relation);
				}else{
				this.FBSDK.player.getConnectedPlayersAsync(function(dat){
					_$this.instance.game.onGotRelation(dat);
				});
			}
		}

		__proto.setWXListSubscribe=function(dat){}
		__proto.getWXListSubscribe=function(){}
		__proto.openTopicCircle=function(){}
		__proto.preloadQQBrowserResource=function(options){}
		__proto.getAvailableLoginType=function(){}
		__proto.Logout=function(loginType){
			(loginType===void 0)&& (loginType='');
		}

		__proto.getWXShareParams=function(){}
		__proto.getShareOpenid=function(){}
		__proto.getShareChannel=function(){}
		__proto.addQQGameShortcut=function(opts){}
		__proto.addQQFriend=function(opts){}
		__proto.shareScreenshot=function(opts){}
		__proto.switchToMsgList=function(opts){}
		__proto.getSource=function(){
			return '';
		}

		__proto.setQQClipboard=function(content,callback){}
		__proto.midasPay=function(count,env){}
		__proto.onAuthCodeResult=function(dat){}
		__proto.onGotPlayZoneUserInfo=function(dat){}
		__proto.onBuyPlayZoneItem=function(dat){}
		__proto.getShareInfo=function(shareTicket){
			if (!this.inited){
				Laya.timer.once(10,this,this.getShareInfo,[shareTicket]);
				}else{
				this.instance.game.onGotShareInfo(this.FBSDK.getEntryPointData());
			}
		}

		/**获取分享挈带的内容**/
		__proto.getShareInfoData=function(){
			return this.FBSDK.getEntryPointData();
		}

		/**
		*为当前环境设置与单个游戏会话相关的数据
		*@param boardName
		*@param score 积分
		*@param extData 扩展数据
		*/
		__proto.setScoreAsync=function(dat){
			var _$this=this;
			var boardName,score=NaN,extData;
			boardName=dat.boardName;
			score=dat.score;
			extData=JSON.stringify(dat.extData);
			console.log("-------------------setSessionData------------------");
			if (!this.inited){
				Laya.timer.once(10,this,this.setScoreAsync,[boardName,score,extData]);
				}else{
				this.FBSDK.setScoreAsync(boardName,score,extData,function(dat){
					_$this.instance.game.onSetScoreAsync(dat);
				});
			}
		}

		/**
		*检索一组排行榜上榜分数，按排行榜上的得分名次 排序
		*@param boardName
		*/
		__proto.getEntriesAsync=function(option){
			var _$this=this;
			if (!this.inited){
				Laya.timer.once(10,this,this.getEntriesAsync,[option]);
				}else{
				this.FBSDK.getEntriesAsync(option,function(dat){
					_$this.instance.game.onGotEntriesAsync(dat);
				});
			}
		}

		/**
		*玩家的排行数据（包括总排行数据条数）
		*@param boardName
		*/
		__proto.getLeaderboardAsync=function(boardName){
			var _$this=this;
			if (!this.inited){
				Laya.timer.once(10,this,this.getLeaderboardAsync,[boardName]);
				}else{
				this.FBSDK.getLeaderboardAsync(boardName,function(dat){
					_$this.instance.game.onGotLeaderboardEntry(dat);
				});
			}
		}

		/**
		*插屏广告
		*@param placement_id
		*
		*/
		__proto.getInterstitialAdAsync=function(placement_id){
			var _$this=this;
			if (!this.inited){
				Laya.timer.once(10,this,this.getInterstitialAdAsync,[placement_id]);
				}else{
				this.FBSDK.getInterstitialAdAsync(placement_id,function(dat){
					_$this.instance.game.onGotInterstitialAdAsync(dat);
				});
			}
		}

		/**
		*奖励式广告
		*@param placement_id
		*
		*/
		__proto.getRewardedVideoAsync=function(placement_id){
			var _$this=this;
			if (!this.inited){
				Laya.timer.once(10,this,this.getRewardedVideoAsync,[placement_id]);
				}else{
				this.FBSDK.getRewardedVideoAsync(placement_id,function(dat){
					_$this.instance.game.onGotRewardedVideoAsync(dat);
				});
			}
		}

		__proto.onGetLeaderboardEntry=function(dat){}
		__proto.onGotInterstitialAdAsync=function(dat){}
		__proto.setLoadingProgress=function(progress){
			if (!this.inited){
				Laya.timer.once(10,this,this.setLoadingProgress,[progress]);
				}else{
				this.FBSDK.setLoadingProgress(progress);
			}
		}

		return Union_Facebook;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class logic.union.Union_LayaBox
	var Union_LayaBox=(function(){
		function Union_LayaBox(){
			this.game=null;
			this.storeUser=null;
			this.layaboxGameUser=null;
			this.gameInfo=null;
			this.accessToken=null;
			Union_LayaBox.instance=this;
			this.game=GameManager.GetCurrentGame();
			if (!this.game.config.LayaStoreMarketSDKUrl){
				alert('config.json中没有设置LayaStoreMarketSDKUrl');
				return;
			}
			Browser.window.LayaStoreMarketSDKUrl=this.game.config.LayaStoreMarketSDKUrl;
			this._loadLayaStoreMarket();
		}

		__class(Union_LayaBox,'logic.union.Union_LayaBox');
		var __proto=Union_LayaBox.prototype;
		Laya.imps(__proto,{"logic.union.IUnion":true})
		__proto._loadLayaStoreMarket=function(){
			var script=Browser.document.getElementById('laya8_layastoremarket_script')|| Browser.document.createElement('script');
			script.id='laya8_layastoremarket_script';
			script.onerror=function (){
				script.src=Conf.LAYASTOREMARKET_URL;
			}
			script.onload=function (){
				Union_LayaBox.instance._onLayaStoreMarketLoaded();
			}
			script.src=Conf.LAYASTOREMARKET_URL;
			Browser.document.getElementsByTagName('head')[0].appendChild(script);
		}

		__proto._onLayaStoreMarketLoaded=function(){
			Method.log('_onLayaStoreMarketLoaded');
			if (!(Union_LayaBox.LayaStoreMarket=Browser.window['LayaStoreMarket'])){
				Laya.timer.once(10,Union_LayaBox.instance,Union_LayaBox.instance._onLayaStoreMarketLoaded);
				}else {
				Browser.window.logtime('StoreMarket加载完成');
				Union_LayaBox.LayaStoreMarket=Union_LayaBox.LayaStoreMarket.instance;
				Union_LayaBox.LayaStoreMarket.init("",function(res){
					if (res.result==0){
						Union_LayaBox.isLayaStoreMarketReady=true;
						}else{
						alert('有错误发生:'+JSON.stringify(res));
					}
				});
			}
		}

		__proto.Login=function(loginType){
			(loginType===void 0)&& (loginType='');
			if (!Union_LayaBox.isLayaStoreMarketReady){
				Laya.timer.once(10,this,this.Login);
				}else {
				Browser.window.logtime('LayaStoreMarket初始化完成');
				Union_LayaBox.LayaStoreMarket.login('',function(res){
					Union_LayaBox.instance.onStoreMarketLogin.call(Union_LayaBox.instance,res);
				});
			}
		}

		__proto.onStoreMarketLogin=function(res){
			Method.log('StoreLogin过程已完成',res);
			Browser.window.logtime('StoreLogin过程完成');
			this.storeUser=res;
			this._getLayaBoxAccessToken(Handler.create(this,this._getLayaBoxGameInfoByRelateId));
		}

		/*INTERFACE logic.union.IUnion */
		__proto.Pay=function(dat,good){
			var order=new LayaBoxOrderInfo();
			order.order_id=dat.orderId;
			order.goods_name=good.name;
			order.goods_desc=good.desc;
			order.serverId='0';
			order.amount=dat.totalPrice*100;
			order.params=dat.orderId+'|'+this.game.gameId+'|'+dat.userId;
			this.recharge(order);
		}

		/*INTERFACE logic.union.IUnion */
		__proto.Share=function(cfg){}
		/*INTERFACE logic.union.IUnion */
		__proto.InitShareConfig=function(cfg){}
		/*INTERFACE logic.union.IUnion */
		__proto.SendMessageToFriend=function(opts){}
		/*INTERFACE logic.union.IUnion */
		__proto.SetWXBasicReport=function(info){}
		__proto.SetWXReport=function(info){}
		/*INTERFACE logic.union.IUnion */
		__proto.openUrlWithExtraWebview=function(opts){}
		/*INTERFACE logic.union.IUnion */
		__proto.closeWindow=function(){}
		/*INTERFACE logic.union.IUnion */
		__proto.sendDesktop=function(opts){}
		/*INTERFACE logic.union.IUnion */
		__proto.setCloseWindowConfirmDialogInfo=function(opts){}
		/*INTERFACE logic.union.IUnion */
		__proto.getNetworkInfo=function(){}
		/*INTERFACE logic.union.IUnion */
		__proto.relation=function(){}
		/*INTERFACE logic.union.IUnion */
		__proto.setWXListSubscribe=function(dat){}
		/*INTERFACE logic.union.IUnion */
		__proto.getWXListSubscribe=function(){}
		/*INTERFACE logic.union.IUnion */
		__proto.openTopicCircle=function(){}
		/*INTERFACE logic.union.IUnion */
		__proto.preloadQQBrowserResource=function(options){}
		/*INTERFACE logic.union.IUnion */
		__proto.getAvailableLoginType=function(){}
		/*INTERFACE logic.union.IUnion */
		__proto.Logout=function(loginType){
			(loginType===void 0)&& (loginType='');
		}

		/*INTERFACE logic.union.IUnion */
		__proto.getWXShareParams=function(){}
		__proto.getShareOpenid=function(){}
		__proto.getShareChannel=function(){}
		/*INTERFACE logic.union.IUnion */
		__proto.addQQGameShortcut=function(opts){}
		/*INTERFACE logic.union.IUnion */
		__proto.addQQFriend=function(opts){}
		__proto.shareScreenshot=function(opts){}
		__proto.switchToMsgList=function(opts){}
		/*INTERFACE logic.union.IUnion */
		__proto.getSource=function(){
			return '0';
		}

		__proto.setLoginStatus=function(b,userInfo){
			Browser.window.LAYA_UNIFY_SDK.setLogin(b);
			Browser.window.LAYA_UNIFY_SDK.setLoginUserInfo(userInfo);
		}

		/*INTERFACE logic.union.IUnion */
		__proto.setQQClipboard=function(content,callback){}
		/*INTERFACE logic.union.IUnion */
		__proto.switchToQQMsgList=function(content,callback){}
		/*INTERFACE logic.union.IUnion */
		__proto.midasPay=function(count,env){}
		/*INTERFACE logic.union.IUnion */
		__proto.onAuthCodeResult=function(dat){}
		/*INTERFACE logic.union.IUnion */
		__proto.onGotPlayZoneUserInfo=function(dat){}
		/*INTERFACE logic.union.IUnion */
		__proto.onBuyPlayZoneItem=function(dat){}
		/*INTERFACE logic.union.IUnion */
		__proto.getShareInfo=function(shareTicket){}
		/*INTERFACE logic.union.IUnion */
		__proto.getInterstitialAdAsync=function(placement_id){}
		__proto.getRewardedVideoAsync=function(placement_id){}
		__proto._getLayaBoxGameInfoByRelateId=function(res){
			if (res.ret !=0){
				Method.log('_getLayaBoxGameInfoByRelateId错误:',res);
				return;
			}
			this.accessToken=res.data["access_token"];
			var relatedId=this.game.config.layaMarketRelatedId[Method.getUnionId()];
			var url=Conf.LAYABOX_UCENTER_URL+"api/getRelatedById?access_token="+this.accessToken+"&relatedId="+relatedId;
			Browser.window.logtime('getLayaBoxAccessToken完成');
			Method.getJSONP(url,Handler.create(this,this._ucenterLogin));
		}

		__proto._ucenterLogin=function(res){
			if (res.ret !=0){
				Method.log('_ucenterLogin错误:',res);
				return;
			}
			this.gameInfo=res.data;
			Browser.window.logtime('getRelatedById完成');
			this.layaboxGameUser=new LayaBoxGameUserInfo(this.storeUser.userInfo,res.data,this.accessToken);
			var url=Conf.LAYABOX_UCENTER_URL+'api/reglogin'+
			"?spuid="+this.layaboxGameUser.SP_UID+
			"&sp="+this.layaboxGameUser.SP+
			"&nickname="+encodeURIComponent(this.layaboxGameUser.NICKNAME)+
			"&photo="+encodeURIComponent(this.layaboxGameUser.AVTOR_URL)+
			"&os="+this.layaboxGameUser.DEV_OS+
			"&osver="+this.layaboxGameUser.DEV_OS_VER+
			"&imei="+this.layaboxGameUser.DEV_IMEI+
			"&imsi="+this.layaboxGameUser.DEV_IMSI+
			"&mac="+this.layaboxGameUser.DEV_MAC+
			"&sptoken="+this.layaboxGameUser.SP_TOKEN+
			"&ip="+this.layaboxGameUser.IP+
			"&typeId=2&access_token="+this.layaboxGameUser.ACCESS_TOKEN+
			"&gameId="+this.layaboxGameUser.GAME_ID+
			"&isvip="+this.layaboxGameUser.IS_VIP+
			"&city="+this.layaboxGameUser.CITY+
			"&sex="+this.layaboxGameUser.SEX+
			"&language=cn&province="+this.layaboxGameUser.PROVINCE+
			"&country="+this.layaboxGameUser.COUNTRY+
			"&headimg="+encodeURIComponent(this.layaboxGameUser.HEADIMG)+
			"&mobile="+this.layaboxGameUser.DEV_MOBILE+
			"&email="+this.layaboxGameUser.EMAIL+
			"&equipmentNum="+this.layaboxGameUser.EQUIPMENT_NUM+
			"&other="+JSON.stringify({from:this.storeUser.from,time:(new Date().getTime())})+
			"&SpFname="+this.layaboxGameUser.SP_NAME;
			Method.getJSONP(url,Handler.create(this,this._onLoginCallback));
		}

		__proto._getLayaBoxAccessToken=function(callback){
			var url=Conf.LAYABOX_UCENTER_URL+"oauth2/authorize?appid="+this.game.config.layaMarketOpenId+"&appkey="+this.game.config.layaMarketOpenKey;
			Method.getJSONP(url,callback);
		}

		__proto._onLoginCallback=function(res){
			Browser.window.logtime('ucenterLogin完成');
			res.data.accessToken=this.accessToken;
			this.storeUser.userInfo['unionUserId']=res.data.unionUserId=res.data.userId;
			if (res.ret !=0){
				Union_LayaBox.instance._onLoginError(res);
				}else{
				Union_LayaBox.instance._onLoginSuccess(res);
			}
		}

		__proto._onLoginSuccess=function(res){
			this.game.onExternalUserLogin(res.data.userId,res.data.accessToken);
		}

		__proto._onLoginError=function(res){
			if (res.data){
				var loginType=res.data.loginType;
				switch (loginType){
					case 0:
						alert('不支持 loginType = 0 的登录方式');
						break ;
					case 1:
						this.Login();
						break ;
					case 2:
						alert('不支持 loginType = 2 的登录方式');
						break ;
					}
				}else{
				Method.log('登录失败:',res);
			}
		}

		//public function Pay(
		__proto.recharge=function(order){
			var url=Conf.LAYABOX_PAYCENTER_URL+
			"&sp="+this.gameInfo["sp"]+
			"&appId="+this.gameInfo["appId"]+
			"&openKey="+this.gameInfo["openKey"]+
			"&suserId="+this.layaboxGameUser.SP_UID+
			"&stoken="+this.layaboxGameUser.SP_TOKEN+
			"&lang=cn&amount="+order.amount+
			"&payinfo="+encodeURIComponent(order.goods_name)+
			"&params="+order.params+
			"&token="+this.layaboxGameUser.ACCESS_TOKEN+
			"&currencyCode=CNY&goodsDescription="+encodeURIComponent(order.goods_desc)+
			"&gameId="+this.gameInfo["gameId"]+
			"&serverId="+order.serverId+
			"&userId="+this.storeUser.userInfo['unionUserId']+
			("&other="+"")+
			"&channelExt="+'';
			Method.log('向LayaBox下单:',url);
			Method.getJSONP(url,Handler.create(this,this.onLayaBoxOrderCreated,[order]));
		}

		__proto.onLayaBoxOrderCreated=function(order,dat){
			if (dat.ret==0){
				Method.log('onLayaBoxOrderCreated：',dat,order);
				order.data=dat.data;
				Union_LayaBox.LayaStoreMarket.recharge(JSON.stringify(order),function(res){
					Method.log('支付完成回调',res);
				});
				}else{
				alert('LayaBox订单创建失败:'+JSON.stringify(dat));
			}
		}

		__proto.getShareInfoData=function(){}
		__proto.getEntriesAsync=function(option){}
		__proto.getLeaderboardAsync=function(boardName){}
		__proto.setScoreAsync=function(dat){}
		__proto.onGotInterstitialAdAsync=function(dat){}
		__proto.onGetLeaderboardEntry=function(dat){}
		/*INTERFACE logic.union.IUnion */
		__proto.setLoadingProgress=function(progress){}
		Union_LayaBox.LayaStoreMarket=null
		Union_LayaBox.isLayaStoreMarketReady=false;
		Union_LayaBox.instance=null
		return Union_LayaBox;
	})()


	/**
	*此类直接对接LayaBoxGameMarket
	*@author 贾艳昭
	*/
	//class logic.union.Union_LayaBox2
	var Union_LayaBox2=(function(){
		function Union_LayaBox2(){
			this.LAYAGAMEMARKET_URL='//layamarket.layabox.com/layaboxmarket.v2.js';
			this.instance=null;
			this.LayaGameMarket=null;
			this.isLayaGameMarketReady=false;
			this.game=null;
			this.instance=this;
			this.game=GameManager.GetCurrentGame();
			Browser.window.openId=this.game.config.layaMarketOpenId;
			Browser.window.openKey=this.game.config.layaMarketOpenKey;
			this._loadLayaGameMarket();
		}

		__class(Union_LayaBox2,'logic.union.Union_LayaBox2');
		var __proto=Union_LayaBox2.prototype;
		Laya.imps(__proto,{"logic.union.IUnion":true})
		__proto._loadLayaGameMarket=function(){
			var _$this=this;
			var script=Browser.document.getElementById('laya8_layagamemarket_script')|| Browser.document.createElement('script');
			script.id='laya8_layagamemarket_script';
			script.onerror=function (){
				script.src=_$this.LAYAGAMEMARKET_URL;
			}
			script.onload=function (){
				_$this.instance._onLayaGameMarketLoaded();
			}
			script.src=this.LAYAGAMEMARKET_URL;
			Browser.document.getElementsByTagName('head')[0].appendChild(script);
		}

		__proto._onLayaGameMarketLoaded=function(){
			Method.log('_onLayaGameMarketLoaded');
			if (!(this.LayaGameMarket=Browser.window['LayaBoxMarket'])){
				Laya.timer.once(10,this.instance,this.instance._onLayaGameMarketLoaded);
				}else {
				Browser.window.logtime('GameMarket加载完成');
				this.LayaGameMarket=this.LayaGameMarket.getInstance();
				this.isLayaGameMarketReady=true;
			}
		}

		/*INTERFACE logic.union.IUnion */
		__proto.Login=function(loginType){
			var _$this=this;
			(loginType===void 0)&& (loginType='');
			if (!this.isLayaGameMarketReady){
				Laya.timer.once(10,this,this.Login);
				}else {
				Browser.window.logtime('LayaGameMarket初始化完成');
				this.LayaGameMarket.login('',function(res){
					_$this.instance.onGameMarketLogin.call(_$this.instance,res);
				});
			}
		}

		__proto.onGameMarketLogin=function(res){
			res=JSON.parse(res);
			Method.log('GameLogin过程已完成',res);
			Browser.window.logtime('GameLogin过程已完成');
			if (res.result==0){
				this.game.onExternalUserLogin(res.data.unionUserId,res.data.accessToken);
				}else{
				MessageBox.title='登录失败';
				MessageBox.message='登录失败:'+res.desc+'('+res.result+')';
				MessageBox.onCloseCallbackFn=Handler.create(this,function(){
					Browser.window.location.reload();
				});
				UIMgr$1.openUI(MessageBox,UIMgr$1.LAYER_POP5);
			}
		}

		__proto.Pay=function(payorder,good){
			var param={
				order_id:payorder.orderId,
				goods_name:good.name,
				amount:payorder.totalPrice *100,
				goods_desc:good.desc,
				serverId:0,
				params:payorder.orderId+'|'+this.game.gameId+'|'+payorder.userId
			};
			this.LayaGameMarket.recharge(JSON.stringify(param),function(res){
				Method.log('支付完成',res);
			});
		}

		/*INTERFACE logic.union.IUnion */
		__proto.Share=function(cfg){}
		/*INTERFACE logic.union.IUnion */
		__proto.InitShareConfig=function(cfg){}
		/*INTERFACE logic.union.IUnion */
		__proto.SendMessageToFriend=function(opts){}
		/*INTERFACE logic.union.IUnion */
		__proto.SetWXBasicReport=function(info){}
		__proto.SetWXReport=function(info){}
		/*INTERFACE logic.union.IUnion */
		__proto.openUrlWithExtraWebview=function(opts){}
		/*INTERFACE logic.union.IUnion */
		__proto.closeWindow=function(){}
		/*INTERFACE logic.union.IUnion */
		__proto.sendDesktop=function(opts){}
		/*INTERFACE logic.union.IUnion */
		__proto.setCloseWindowConfirmDialogInfo=function(opts){}
		/*INTERFACE logic.union.IUnion */
		__proto.getNetworkInfo=function(){}
		/*INTERFACE logic.union.IUnion */
		__proto.relation=function(){}
		/*INTERFACE logic.union.IUnion */
		__proto.setWXListSubscribe=function(dat){}
		/*INTERFACE logic.union.IUnion */
		__proto.getWXListSubscribe=function(){}
		/*INTERFACE logic.union.IUnion */
		__proto.openTopicCircle=function(){}
		/*INTERFACE logic.union.IUnion */
		__proto.preloadQQBrowserResource=function(options){}
		/*INTERFACE logic.union.IUnion */
		__proto.getAvailableLoginType=function(){}
		/*INTERFACE logic.union.IUnion */
		__proto.Logout=function(loginType){
			(loginType===void 0)&& (loginType='');
		}

		/*INTERFACE logic.union.IUnion */
		__proto.getWXShareParams=function(){}
		__proto.getShareOpenid=function(){}
		__proto.getShareChannel=function(){}
		/*INTERFACE logic.union.IUnion */
		__proto.addQQGameShortcut=function(opts){}
		/*INTERFACE logic.union.IUnion */
		__proto.addQQFriend=function(opts){}
		__proto.shareScreenshot=function(opts){}
		__proto.switchToMsgList=function(opts){}
		/*INTERFACE logic.union.IUnion */
		__proto.getSource=function(){
			return '0';
		}

		/*INTERFACE logic.union.IUnion */
		__proto.setQQClipboard=function(content,callback){}
		__proto.switchToQQMsgList=function(content,callback){}
		/*INTERFACE logic.union.IUnion */
		__proto.midasPay=function(count,env){}
		/*INTERFACE logic.union.IUnion */
		__proto.onAuthCodeResult=function(dat){}
		/*INTERFACE logic.union.IUnion */
		__proto.onGotPlayZoneUserInfo=function(dat){}
		/*INTERFACE logic.union.IUnion */
		__proto.onBuyPlayZoneItem=function(dat){}
		/*INTERFACE logic.union.IUnion */
		__proto.getShareInfo=function(shareTicket){}
		/*INTERFACE logic.union.IUnion */
		__proto.getInterstitialAdAsync=function(placement_id){}
		__proto.getRewardedVideoAsync=function(placement_id){}
		__proto.getShareInfoData=function(){}
		__proto.getEntriesAsync=function(option){}
		__proto.getLeaderboardAsync=function(boardName){}
		__proto.setScoreAsync=function(dat){}
		__proto.onGotInterstitialAdAsync=function(dat){}
		__proto.onGetLeaderboardEntry=function(dat){}
		/*INTERFACE logic.union.IUnion */
		__proto.setLoadingProgress=function(progress){}
		return Union_LayaBox2;
	})()


	/**
	*...
	*@author ...
	*/
	//class logic.union.Union_LayaNative
	var Union_LayaNative=(function(){
		function Union_LayaNative(){
			this.instance=null;
			this.instance=this;
			this.game=GameManager.GetCurrentGame();
		}

		__class(Union_LayaNative,'logic.union.Union_LayaNative');
		var __proto=Union_LayaNative.prototype;
		Laya.imps(__proto,{"logic.union.IUnion":true})
		/*INTERFACE logic.union.IUnion */
		__proto.Login=function(loginType){
			(loginType===void 0)&& (loginType='');
		}

		__proto.Pay=function(payorder,good){}
		__proto.Share=function(cfg){}
		__proto.InitShareConfig=function(cfg){}
		__proto.SendMessageToFriend=function(opts){}
		__proto.SetWXBasicReport=function(info){}
		__proto.SetWXReport=function(info){}
		__proto.openUrlWithExtraWebview=function(opts){}
		__proto.closeWindow=function(){}
		__proto.sendDesktop=function(opts){}
		__proto.setCloseWindowConfirmDialogInfo=function(opts){}
		__proto.getNetworkInfo=function(){}
		__proto.relation=function(){}
		__proto.setWXListSubscribe=function(dat){}
		__proto.getWXListSubscribe=function(){}
		__proto.openTopicCircle=function(){}
		__proto.preloadQQBrowserResource=function(options){}
		__proto.getAvailableLoginType=function(){}
		__proto.Logout=function(loginType){
			(loginType===void 0)&& (loginType='');
		}

		__proto.getWXShareParams=function(){}
		__proto.getShareOpenid=function(){}
		__proto.getShareChannel=function(){}
		__proto.addQQGameShortcut=function(opts){}
		__proto.addQQFriend=function(opts){}
		__proto.shareScreenshot=function(opts){}
		__proto.switchToMsgList=function(opts){}
		__proto.getSource=function(){
			return '';
		}

		/*INTERFACE logic.union.IUnion */
		__proto.setQQClipboard=function(content,callback){}
		__proto.midasPay=function(count,env){}
		/*INTERFACE logic.union.IUnion */
		__proto.onAuthCodeResult=function(dat){}
		/*INTERFACE logic.union.IUnion */
		__proto.onGotPlayZoneUserInfo=function(dat){}
		/*INTERFACE logic.union.IUnion */
		__proto.onBuyPlayZoneItem=function(dat){}
		/*INTERFACE logic.union.IUnion */
		__proto.getShareInfo=function(shareTicket){}
		/*INTERFACE logic.union.IUnion */
		__proto.getInterstitialAdAsync=function(placement_id){}
		__proto.getRewardedVideoAsync=function(placement_id){}
		__proto.getShareInfoData=function(){}
		__proto.getEntriesAsync=function(option){}
		__proto.getLeaderboardAsync=function(boardName){}
		__proto.setScoreAsync=function(dat){}
		__proto.onGotInterstitialAdAsync=function(dat){}
		__proto.onGetLeaderboardEntry=function(dat){}
		/*INTERFACE logic.union.IUnion */
		__proto.setLoadingProgress=function(progress){}
		return Union_LayaNative;
	})()


	/**
	*微信小游戏对接类
	*@author ...
	*/
	//class logic.union.Union_MiniGame
	var Union_MiniGame=(function(){
		function Union_MiniGame(){
			this.instance=null;
			this.game=null;
			this.wx=null;
			this.wxBasicReport=null;
			this.androidOfferId='1450013811';
			this.iosOfferId='1450013812';
			this.instance=this;
			this.game=GameManager.GetCurrentGame();
			this.wx=Browser.window.wx;
			this.wx.onMessage(function(msg){
				Method.log('wx对象收到消息',msg);
			});
		}

		__class(Union_MiniGame,'logic.union.Union_MiniGame');
		var __proto=Union_MiniGame.prototype;
		Laya.imps(__proto,{"logic.union.IUnion":true})
		__proto.onSessionExpired=function(){
			var _$this=this;
			Method.log('checkSession fail');
			this.clearStorage();
			this.wx.login({
				success:function (dat){
					Method.log('login ok');
					_$this.instance.game.user.authCode(dat.code);
				},
				fail:function (res){
					Method.log('login fail');
					_$this.instance.game.showErrorMsgBox('登录失败',res.errMsg);
				}
			})
		}

		/*INTERFACE logic.union.IUnion */
		__proto.Login=function(loginType){
			var _$this=this;
			(loginType===void 0)&& (loginType='');
			Method.log('调用登陆函数了');
			this.wx.checkSession({
				success:function (){
					Method.log('checkSession ok');
					var extParams='';
					var openId=LocalStorage.getItem('laya8_minigame_openid');
					var userInfo=LocalStorage.getJSON('laya8_minigame_userinfo');
					if (openId && userInfo !=null){
						_$this.instance.game.onExternalUserLogin(openId,'',userInfo.nickName,userInfo.avatarUrl,extParams,userInfo.gender==1?1:0);
						_$this.instance.game.user.setOpenId(openId);
						}else{
						_$this.instance.onSessionExpired()
					}
				},
				fail:function (){
					_$this.instance.onSessionExpired();
				}
			});
		}

		__proto.clearStorage=function(){
			LocalStorage.removeItem('laya8_minigame_openid');
			LocalStorage.removeItem('laya8_minigame_session_key');
			LocalStorage.removeItem('laya8_minigame_userinfo');
		}

		/*INTERFACE logic.union.IUnion */
		__proto.onAuthCodeResult=function(dat){
			var _$this=this;
			if (dat.code==0){
				var extParams='';
				this.wx.getUserInfo({
					success:function (dat1){
						Method.log('getUserInfo ok');
						var userInfo=dat1.userInfo;
						LocalStorage.setItem('laya8_minigame_openid',dat.openId);
						LocalStorage.setJSON('laya8_minigame_userinfo',userInfo);
						_$this.instance.game.onExternalUserLogin(dat.openId,'',userInfo.nickName,userInfo.avatarUrl,extParams,userInfo.gender==1?1:0);
						_$this.instance.game.user.setOpenId(dat.openId);
					},
					fail:function (res){
						_$this.instance.game.onLoginError();
						_$this.instance.game.closeRouterSocket();
					}
				});
				}else{
				Method.log('验证失败:'+dat.msg+'|'+dat.code);
				this.instance.onSessionExpired();
			}
		}

		//instance.game.showErrorMsgBox('验证失败',dat.msg+'|'+dat.code);
		__proto.Pay=function(payorder,good){}
		__proto.Share=function(cfg){
			var _$this=this;
			this.wx.showShareMenu();
			this.wx.updateShareMenu({
				withShareTicket:true,
				success:function (data){
					console.log("--Share----updateShareMenu------success----------");
					console.log("-----cfg:"+JSON.stringify(cfg));
					Method.log('share',cfg);
					_$this.wx.shareAppMessage({
						getGroupMsgTicket:true,
						title:cfg.title,
						imageUrl:cfg.image_url,
						query:cfg.share_url,
						success:function (res){
							Method.log('分享成功',res);
							_$this.instance.game.onShareFinish(0,res);
						},
						fail:function (res){
							Method.log('分享失败',res);
							_$this.instance.game.onShareFinish(-1);
						}
					});
					},fail:function (data){
					console.log("--Share----updateShareMenu------fail----------");
					console.log(data);
				}
			});
		}

		__proto.InitShareConfig=function(cfg){
			var _$this=this;
			this.wx.showShareMenu();
			this.wx.updateShareMenu({
				withShareTicket:true,
				success:function (data){
					console.log("------updateShareMenu------success----------");
					console.log(data);
					_$this.wx.onShareAppMessage(function(obj){
						Method.log('onShareAppMessage');
						return {
							getGroupMsgTicket:true,
							title:cfg.title,
							imageUrl:cfg.image_url,
							query:cfg.share_url,
							success:function (res){
								Method.log(res);
								_$this.instance.game.onShareFinish(0,res);
							},
							fail:function (){
								_$this.instance.game.onShareFinish(-1);
							}
						}
					});
					},fail:function (data){
					console.log("------updateShareMenu------fail----------");
					console.log(data);
				}
			});
		}

		__proto.SendMessageToFriend=function(opts){}
		__proto.SetWXBasicReport=function(info){
			this.instance.wxBasicReport=info;
		}

		__proto.SetWXReport=function(info){
			if (this.instance.wxBasicReport==null){
				alert('必须先调用SetWXBasicReport接口');
				}else{
				var gv=this.instance.wxBasicReport.game_version.substr(1).split('.');
				var v=0;
				for (var i=0;i < gv.length;i++){
					v+=gv[gv.length-i-1] *Math.pow(100,i);
				}
				if (info.type=='login'){
					this.wx.gameLoginReport({
						data:{
							gameVersion:v,
							zoneId:this.instance.wxBasicReport.zone_id,
							serverId:this.instance.wxBasicReport.server_id,
							roleId:this.instance.wxBasicReport.role_id,
							roleName:this.instance.wxBasicReport.role_name,
							userLevel:this.instance.wxBasicReport.user_level
						}
					});
				}
				if (info.type=='logout'){
					this.wx.gameLogoutReport({
						data:{
							gameVersion:v,
							zoneId:this.instance.wxBasicReport.zone_id,
							serverId:this.instance.wxBasicReport.server_id,
							roleId:this.instance.wxBasicReport.role_id,
							roleName:this.instance.wxBasicReport.role_name,
							userLevel:this.instance.wxBasicReport.user_level
						}
					});
				}
			}
		}

		__proto.openUrlWithExtraWebview=function(opts){}
		__proto.closeWindow=function(){}
		__proto.sendDesktop=function(opts){}
		__proto.setCloseWindowConfirmDialogInfo=function(opts){}
		__proto.postMessage=function(cmd,params){
			this.wx.postMessage({url:cmd,params:params});
		}

		__proto.getNetworkInfo=function(){}
		__proto.relation=function(){
			this.postMessage('getFriendUserGameData',null);
		}

		//});
		__proto.setWXListSubscribe=function(dat){}
		__proto.getWXListSubscribe=function(){}
		__proto.openTopicCircle=function(){}
		__proto.preloadQQBrowserResource=function(options){}
		__proto.getAvailableLoginType=function(){}
		__proto.Logout=function(loginType){
			(loginType===void 0)&& (loginType='');
		}

		__proto.getWXShareParams=function(){}
		__proto.getShareOpenid=function(){}
		__proto.getShareChannel=function(){}
		__proto.addQQGameShortcut=function(opts){}
		__proto.addQQFriend=function(opts){}
		__proto.shareScreenshot=function(opts){}
		__proto.switchToMsgList=function(opts){}
		__proto.getSource=function(){
			return '';
		}

		__proto.setQQClipboard=function(content,callback){}
		__proto.midasPay=function(count,env){
			var _$this=this;
			this.wx.requestMidasPayment({
				mode:'game',
				env:env,
				offerId:Browser.onIOS?this.iosOfferId:this.androidOfferId,
				currencyType:'CNY',
				platform:Browser.onIOS?'iap':'android',
				buyQuantity:count,
				zoneId:"1",
				success:function (res){
					_$this.instance.onMidasPayResult(0,count);
				},
				fail:function (res){
					_$this.instance.onMidasPayResult(1,count);
				}
			});
		}

		__proto.onMidasPayResult=function(code,count){
			this.game.onMidasPayResult(code,count);
		}

		/*INTERFACE logic.union.IUnion */
		__proto.onGotPlayZoneUserInfo=function(dat){}
		/*INTERFACE logic.union.IUnion */
		__proto.onBuyPlayZoneItem=function(dat){}
		/*INTERFACE logic.union.IUnion */
		__proto.getShareInfo=function(shareTicket){
			var _$this=this;
			this.wx.getShareInfo({
				shareTicket:shareTicket,
				success:function (res){
					Method.log('getshare success:',res);
					_$this.instance.game.onGotShareInfo(res);
				},
				fail:function (res){
					Method.log('getshare fail:',res);
					_$this.instance.game.onGotShareInfo(res);
				}
			});
		}

		/*INTERFACE logic.union.IUnion */
		__proto.getInterstitialAdAsync=function(placement_id){}
		__proto.getRewardedVideoAsync=function(placement_id){}
		__proto.getShareInfoData=function(){}
		__proto.getEntriesAsync=function(option){}
		__proto.getLeaderboardAsync=function(boardName){}
		__proto.setScoreAsync=function(dat){}
		__proto.onGotInterstitialAdAsync=function(dat){}
		__proto.onGetLeaderboardEntry=function(dat){}
		/*INTERFACE logic.union.IUnion */
		__proto.setLoadingProgress=function(progress){}
		return Union_MiniGame;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class logic.union.Union_QQBrowser
	var Union_QQBrowser=(function(){
		function Union_QQBrowser(){
			this.instance=null;
			this.game=null;
			this.isEndPointVersion=false;
			this.QQBROWSER_APPID='4618737219';
			this.endPointSDKURL="//jsapi.qq.com/get?api=x5gameplayer.*";
			this.commonSDKURL="//res.imtt.qq.com/html5game/api/js/qbh5-1.0.0-min.js";
			this.startDownloadTick=NaN;
			this.shareConfigInfo=null;
			this.sdk=null;
			this.hasLogined=false;
			this.tlogUrl='//h5sdk.game.qq.com/api2/H5SDKApi.php?';
			this.availableLoginType=null;
			this.instance=this;
			this.game=GameManager.GetCurrentGame();
			this.isEndPointVersion=true;
			this._loadQQBrowserSDK();
		}

		__class(Union_QQBrowser,'logic.union.Union_QQBrowser');
		var __proto=Union_QQBrowser.prototype;
		Laya.imps(__proto,{"logic.union.IUnion":true})
		__proto._loadQQBrowserSDK=function(){
			var _$this=this;
			var url=this.isEndPointVersion ? this.endPointSDKURL:this.commonSDKURL;
			this.startDownloadTick=new Date().getTime();
			this.downloadTimeoutChecker();
			Stats.report("1_0");
			var script=Browser.document.getElementById('laya8_tencent_script')|| Browser.document.createElement('script');
			script.id='laya8_tencent_script';
			script.onerror=function (){
				script.src=url;
			}
			script.onload=function (){
				_$this.instance._onTencentSDKLoaded();
			}
			script.src=url;
			Browser.document.getElementsByTagName('head')[0].appendChild(script);
		}

		__proto._onTencentSDKLoaded=function(){
			var _$this=this;
			Method.log('_onTencentBrowserSDKLoaded');
			if (!(this.sdk=Browser.window.browser.x5gameplayer)){
				Laya.timer.once(10,this.instance,this.instance._onTencentSDKLoaded);
				}else {
				Stats.report("1_1");
				Laya.timer.clear(this,this.downloadTimeoutChecker);
				Union_QQBrowser.inited=true;
				this.sdk.config && this.sdk.config({
					loginCallBack:function (rsp){_$this.instance.onLogined(rsp);}
				});
				if (!Browser.window.browser){
					Browser.window.browser={};
				}
				if (!Browser.window.browser.execWebFn){
					Browser.window.browser.execWebFn={};
				}
				if (Browser.window.browser.execWebFn){
					Browser.window.browser.execWebFn.postX5GamePlayerMessage=function (param){
						var message=param.type;
						console.log('postX5GamePlayerMessage='+message);
						switch (message){
							case 'app_enter_foreground':
								_$this.instance.game.onGameVisibilityChange(true,message);
								break ;
							case 'app_enter_background':
								_$this.instance.game.onGameVisibilityChange(false,message);
								break ;
							default :
								break ;
							}
					}
				}
			}
		}

		__proto._getAvailableLoginType=function(cb){
			var options={
				appid:this.instance.QQBROWSER_APPID
			};
			this.sdk.getAvailableLoginType(options,function(rsp){
				cb.runWith(rsp);
			});
		}

		__proto.onGotAvailableLoginType=function(rsp){
			if (rsp.result==0){
				this.instance.availableLoginType=rsp.loginTypes;
				for (var i=0;i < rsp.loginTypes.length;i++){
					var loginTypeData=rsp.loginTypes[i];
					if (rsp.loginTypes.length==1){
						this.instance.Login(loginTypeData.loginType);
						}else{
						Login_QB.LoginData=rsp.loginTypes;
						UIMgr$1.openUI(Login_QB);
						break ;
					}
				}
				}else {
				this.instance.game.showErrorMsgBox('接口错误',rsp.msg);
			}
		}

		__proto.downloadTimeoutChecker=function(){
			if (new Date().getTime()-this.startDownloadTick > 20000){
				this.game.showErrorMsgBox('网络异常','您的网络似乎出了点问题，请检查网络设置或退出重试(8)');
				}else{
				Laya.timer.once(3000,this,this.downloadTimeoutChecker);
			}
		}

		__proto.version=function(){
			return this.sdk.version();
		}

		/*INTERFACE logic.union.IUnion */
		__proto.getSign=function(cb){
			Method.getJSONP(this.game.config.signSite+'index.php?m=game&a=getsign&game_id='+this.game.gameId,cb,'&',Handler.create(this.instance,this.onGetSignError));
		}

		__proto.onGetSignError=function(){
			this.instance.game.showErrorMsgBox('网络异常','您的网络似乎出了点问题，请检查网络设置或退出重试(9)');
		}

		__proto.Login=function(loginType){
			(loginType===void 0)&& (loginType='');
			if (!Union_QQBrowser.inited){
				Laya.timer.once(10,this,this.Login,[loginType]);
				}else {
				var rtoken=Method.getCookie('qbrefreshToken');
				var qbopenid=Method.getCookie('qbopenid');
				if (!qbopenid || !rtoken){
					if (!loginType){
						this.instance._getAvailableLoginType(Handler.create(this.instance,this.onGotAvailableLoginType));
						return;
					}
					this.getSign(Handler.create(this.instance,this._login,[loginType]));
				}
				else{
					this.instance.refreshToken(Handler.create(this,this.onLogined));
				}
			}
		}

		__proto.refreshToken=function(cb){
			var _$this=this;
			if (!Union_QQBrowser.inited){
				Laya.timer.once(10,this,this.refreshToken);
				}else {
				var options={
					appid:this.instance.QQBROWSER_APPID,
					qbopenid:Method.getCookie('qbopenid'),
					refreshToken:Method.getCookie('qbrefreshToken')
				};
				this.sdk.refreshToken(options,function(rsp){
					if (rsp.result!=0){
						_$this.instance.clearCookie();
						_$this.instance._getAvailableLoginType(Handler.create(_$this.instance,_$this.onGotAvailableLoginType));
						return;
					}
					cb.runWith(rsp);
				});
			}
		}

		__proto.clearCookie=function(){
			this.hasLogined=false;
			Method.setCookie("qbopenid",'');
			Method.setCookie("qbopenkey",'');
			Method.setCookie("qbrefreshToken",'');
			Method.setCookie("qbnkname",'');
			Method.setCookie("qbavtor",'');
			Method.setCookie("qblogintype",'');
		}

		__proto._login=function(loginType,sign){
			var _$this=this;
			var option={
				appid:this.QQBROWSER_APPID,
				appsig:sign.appsig ,
				appsigData:sign.appsigData,
				loginType:loginType
			};
			Method.setCookie("qblogintype",loginType);
			this.sdk.login(option,function(rsp){
				_$this.instance.onLogined(rsp);
			});
		}

		__proto.onLogined=function(rsp){
			if (rsp.result==0){
				if (this.hasLogined){
					Method.log('已经是登录状态, 不再接收登录成功回调');
					return;
				}
				this.hasLogined=true;
				var unionId=Method.getUnionId();
				if (this.game.config.banUnionIdList && this.game.config.banUnionIdList.indexOf(unionId)>-1){
					if ("-102"==unionId){
						if (this.game.config.banUnionIdList.indexOf("-101")==-1){
							this.game.showErrorMsgBox('','暂不开放手Q版本，敬请期待！');
							}else {
							this.game.showErrorMsgBox('','暂不开放安卓版本，敬请期待！');
						}
					}
					if ("-101"==unionId){
						if (this.game.config.banUnionIdList.indexOf("-102")==-1){
							this.game.showErrorMsgBox('','暂不开放微信版本，敬请期待！');
							}else {
							this.game.showErrorMsgBox('','暂不开放安卓版本，敬请期待！');
						}
					}
					if ("-104"==unionId){
						if (this.game.config.banUnionIdList.indexOf("-103")==-1){
							this.game.showErrorMsgBox('','暂不开放手Q版本，敬请期待！');
							}else {
							this.game.showErrorMsgBox('','暂不开放IOS版本，敬请期待！');
						}
					}
					if ("-103"==unionId){
						if (this.game.config.banUnionIdList.indexOf("-104")==-1){
							this.game.showErrorMsgBox('','暂不开放微信版本，敬请期待！');
							}else {
							this.game.showErrorMsgBox('','暂不开放IOS版本，敬请期待！');
						}
					}
					return;
				}
				if (rsp.qbopenid){
					Method.setCookie("qbopenid",rsp.qbopenid);
					}else{
					rsp.qbopenid=Method.getCookie('qbopenid');
				}
				if (rsp.qbopenkey){
					Method.setCookie("qbopenkey",rsp.qbopenkey);
					}else{
					rsp.qbopenkey=Method.getCookie('qbopenkey');
				}
				if (rsp.refreshToken){
					Method.setCookie("qbrefreshToken",rsp.refreshToken);
					}else{
					rsp.refreshToken=Method.getCookie('qbrefreshToken');
				}
				if (rsp.nickName){
					Method.setCookie("qbnkname",rsp.nickName);
					}else{
					rsp.nickName=Method.getCookie('qbnkname');
				}
				if (rsp.avatarUrl){
					Method.setCookie("qbavtor",rsp.avatarUrl);
					}else{
					rsp.avatarUrl=Method.getCookie('qbavtor');
				};
				var nkname=rsp.nickName ? rsp.nickName :Method.getCookie("qbnkname");
				var avtor=rsp.avatarUrl ? rsp.avatarUrl :Method.getCookie("qbavtor");
				this.game.onExternalUserLogin(rsp.qbopenid,rsp.qbopenkey,nkname,avtor);
				this.instance.game.user.setOpenId(rsp.qbopenid);
				this.instance.report2TLog('login',rsp.result);
				UIMgr$1.closeUI(Login_QB);
				this.instance.game.showGameWindow(true);
				}else {
				if (rsp.result !=-2){
					this.instance.game.showErrorMsgBox('接口错误',rsp.msg+'('+rsp.result+')');
				}
			}
		}

		__proto.Pay=function(payorder,good){}
		__proto.Share=function(cfg){
			var _$this=this;
			if (!Union_QQBrowser.inited){
				Laya.timer.once(10,this,this.Share,[cfg]);
				}else {
				var option={
					url:this.shareConfigInfo.share_url,
					title:this.shareConfigInfo.title,
					description:this.shareConfigInfo.desc,
					imgUrl:this.shareConfigInfo.image_url,
					imgTitle:this.shareConfigInfo.title,
					cusTxt:'',
					toApp:this.shareConfigInfo.toApp
				};
				this.sdk.share(option,function(e){
					_$this.instance.game.onShareFinish(e.result);
					_$this.instance.report2TLog('share',e.result,'0','0');
				});
			}
		}

		__proto.InitShareConfig=function(cfg){
			this.shareConfigInfo=cfg;
		}

		__proto.SendMessageToFriend=function(opts){}
		__proto.SetWXBasicReport=function(info){}
		__proto.SetWXReport=function(info){}
		__proto.openUrlWithExtraWebview=function(opts){}
		__proto.closeWindow=function(){
			var _$this=this;
			if (!Union_QQBrowser.inited){
				Laya.timer.once(10,this,this.closeWindow);
				}else {
				var option={
					appid:this.instance.QQBROWSER_APPID,
					qbopenid:Method.getCookie('qbopenid'),
					loginType:Method.getCookie('qblogintype')
				};
				this.sdk.logout(option,function(rsp){
					if (rsp.result==0){
						_$this.instance.game.closeRouterSocket();
						_$this.instance.clearCookie();
						_$this.instance._getAvailableLoginType(Handler.create(_$this.instance,_$this.onLogout));
						}else{
						_$this.instance.game.showErrorMsgBox('接口异常',rsp.msg);
					}
				});
			}
		}

		__proto.onLogout=function(rsp){
			Method.refreshWindow();
		}

		//instance.game.showGameWindow(false);
		__proto.sendDesktop=function(opts){}
		__proto.setCloseWindowConfirmDialogInfo=function(opts){}
		__proto.getNetworkInfo=function(){}
		__proto.relation=function(){
			var _$this=this;
			if (!Union_QQBrowser.inited){
				Laya.timer.once(10,this,this.relation);
				}else {
				var option={
					appid:this.instance.QQBROWSER_APPID,
					appsig:'',
					qbopenid:this.instance.game.externalUserName,
					qbopenkey:this.instance.game.externalToken
				};
				this.sdk.getGameFriends(option,function(rsp){
					var ret={
						iRet:rsp.result,
						sMsg:rsp.msg,
						list:[]
					};
					switch(rsp.result){
						case 0:
							for (var i=0;i < rsp.friends.length;i++){
								ret.list.push({
									openid:rsp.friends[i]
								});
							}
							_$this.instance.game.onGotRelation(ret);
							break ;
						case-4:
							break ;
						default :
							_$this.instance.game.onGotRelation(ret);
							break ;
						}
				});
			}
		}

		__proto.setWXListSubscribe=function(dat){}
		__proto.getWXListSubscribe=function(){}
		/*INTERFACE logic.union.IUnion */
		__proto.createDesktopIcon=function(options){}
		/*INTERFACE logic.union.IUnion */
		__proto.openTopicCircle=function(){
			var _$this=this;
			if (!Union_QQBrowser.inited){
				Laya.timer.once(10,this,this.openTopicCircle);
				}else {
				this.sdk.openTopicCircle({
					appid:this.instance.QQBROWSER_APPID
					},function(rsp){
					if (rsp.result!=0){
						_$this.instance.game.showErrorMsgBox('接口错误',rsp.msg);
					}
				});
			}
		}

		__proto.preloadQQBrowserResource=function(options){
			var _$this=this;
			if (!Union_QQBrowser.inited){
				Laya.timer.once(10,this,this.preloadQQBrowserResource,[options]);
				}else {
				options.appid=this.QQBROWSER_APPID;
				this.sdk.preloadResource(options,function(rsp){
					_$this.instance.game.onPreloadQQBrowserResource(rsp);
				});
			}
		}

		/*INTERFACE logic.union.IUnion */
		__proto.getAvailableLoginType=function(){
			if (!Union_QQBrowser.inited){
				Laya.timer.once(10,this,this.getAvailableLoginType);
				}else {
				if (this.instance.availableLoginType !=null){
					this.instance.game.onGotAvailableLoginType(this.instance.availableLoginType);
					}else {
					this._getAvailableLoginType(Handler.create(this.instance,this._onGotAvailableLoginType));
				}
			}
		}

		/*INTERFACE logic.union.IUnion */
		__proto.Logout=function(loginType){
			var _$this=this;
			(loginType===void 0)&& (loginType='');
			if (!Union_QQBrowser.inited){
				Laya.timer.once(10,this,this.Logout,[loginType]);
				}else {
				var options={
					appid:this.instance.QQBROWSER_APPID,
					qbopenid:Method.getCookie('qbopenid'),
					loginType:loginType
				};
				this.sdk.logout(loginType,function(rsp){
					_$this.instance.onLogout(rsp);
				});
			}
		}

		/*INTERFACE logic.union.IUnion */
		__proto.getWXShareParams=function(){}
		__proto.getShareOpenid=function(){}
		__proto.getShareChannel=function(){}
		/*INTERFACE logic.union.IUnion */
		__proto.addQQGameShortcut=function(opts){
			var _$this=this;
			if (!Union_QQBrowser.inited){
				Laya.timer.once(10,this,this.addQQGameShortcut,[opts]);
				}else {
				this.sdk.sendToDesktop(
				opts,
				function(rsp){
					var dat={
						result:rsp.result,
						resultData:opts.ext,
						message:rsp.msg
					};
					_$this.instance.game.onSentDesktop(dat);
					_$this.instance.report2TLog('sendToDeskTop',rsp.result);
				});
			}
		}

		/*INTERFACE logic.union.IUnion */
		__proto.addQQFriend=function(opts){}
		__proto.shareScreenshot=function(opts){}
		__proto.switchToMsgList=function(opts){}
		/*INTERFACE logic.union.IUnion */
		__proto.getSource=function(){
			return '0';
		}

		/*INTERFACE logic.union.IUnion */
		__proto.setQQClipboard=function(content,callback){}
		/*INTERFACE logic.union.IUnion */
		__proto.switchToQQMsgList=function(content,callback){}
		/*INTERFACE logic.union.IUnion */
		__proto.midasPay=function(count,env){}
		/*INTERFACE logic.union.IUnion */
		__proto.onAuthCodeResult=function(dat){}
		/*INTERFACE logic.union.IUnion */
		__proto.onGotPlayZoneUserInfo=function(dat){}
		/*INTERFACE logic.union.IUnion */
		__proto.onBuyPlayZoneItem=function(dat){}
		/*INTERFACE logic.union.IUnion */
		__proto.getShareInfo=function(shareTicket){}
		/*INTERFACE logic.union.IUnion */
		__proto.getInterstitialAdAsync=function(placement_id){}
		__proto.getRewardedVideoAsync=function(placement_id){}
		__proto._onGotAvailableLoginType=function(rsp){
			if (rsp.result==0){
				this.instance.availableLoginType=rsp.loginTypes;
				this.instance.game.onGotAvailableLoginType(this.instance.availableLoginType);
				}else {
				this.instance.game.showErrorMsgBox('接口错误',rsp.msg);
			}
		}

		__proto.report2TLog=function(logType,result,shareOpenid,shareStatus){
			(shareOpenid===void 0)&& (shareOpenid='');
			(shareStatus===void 0)&& (shareStatus='');
			var h5game_os='pc';
			if (Browser.onIOS){
				h5game_os='ios';
			}
			if (Browser.onAndriod){
				h5game_os='android';
			};
			var reqTime=Method.getUnixTimeStamp();
			var source=this.QQBROWSER_APPID+Method.getCookie('qbopenkey')+Method.getCookie('qbopenid')+reqTime;
			var sign=Method.md5(source);
			var queryArray=[
			'h5game_accesstoken='+(Method.getCookie('qbopenkey')),
			'h5game_openid='+(Method.getCookie('qbopenid')),
			'apptype='+(Method.getCookie('qblogintype')=='qq'?2:1),
			'appid='+this.instance.QQBROWSER_APPID,
			'methodCmd=1014',
			'logtype='+logType,
			'h5game_os='+h5game_os,
			'QQExtChannel=qqbrowser',
			'QQExtChannelReqTime='+reqTime,
			'QQExtChannelSign='+sign];
			Method.getJSONP(this.tlogUrl+queryArray.join('&'),Handler.create(this,this.onTLogReported));
		}

		__proto.onTLogReported=function(rsp){
			Method.log('TLog汇报结果:'+JSON.stringify(rsp));
		}

		__proto.getShareInfoData=function(){}
		__proto.getEntriesAsync=function(option){}
		__proto.getLeaderboardAsync=function(boardName){}
		__proto.setScoreAsync=function(dat){}
		__proto.onGotInterstitialAdAsync=function(dat){}
		__proto.onGetLeaderboardEntry=function(dat){}
		/*INTERFACE logic.union.IUnion */
		__proto.setLoadingProgress=function(progress){}
		Union_QQBrowser.inited=false;
		return Union_QQBrowser;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class logic.union.Union_Space
	var Union_Space=(function(){
		function Union_Space(){
			this.SnowFightPaySDK=null;
			this.game=null;
			var _$this=this;
			this.game=GameManager.GetCurrentGame();
			this.SnowFightPaySDK=Browser.window.SnowFightPaySDK;
			if (!this.SnowFightPaySDK){
				this.SnowFightPaySDK={
					login:function (){
						Laya.conchMarket.login("{}",function(data){
							_$this.SnowFightPaySDK.loginResult(JSON.parse(data));
						});
					},
					pay:function (parm){
						Laya.conchMarket.recharge(parm,function(data){
							_$this.SnowFightPaySDK.payResult(JSON.parse(data));
						});
					}
				};
			}
			this.SnowFightPaySDK.loginResult=function (dat){
				_$this.game.onExternalUserLogin(dat.unionUserId,'');
			}
			this.SnowFightPaySDK.payResult=function (dat){
				Method.log('支付结果');
				Method.log(dat);
			}
		}

		__class(Union_Space,'logic.union.Union_Space');
		var __proto=Union_Space.prototype;
		Laya.imps(__proto,{"logic.union.IUnion":true})
		/*INTERFACE logic.union.IUnion */
		__proto.Login=function(loginType){
			(loginType===void 0)&& (loginType='');
			this.SnowFightPaySDK.login();
		}

		/*SnowFightPaySDK.loginResult({
		unionUserId:'123213',
		result:0,
		desc:''
	});*/


	__proto.Pay=function(payorder,good){
		var param=good.ext.split(',');
		var obj={
			propName:param[4],
			propAmount:parseFloat(good.price)*100,
			cpExData:payorder.orderId,
			notifyUrl:encodeURIComponent('http:'+Conf.PAYCENTER_URL+'index.php?m=payorder&a=pay&union=space&userid='+payorder.userId),
			cpId:'10001',
			gameId:'10001001',
			payType:param[5]
		};

		this.SnowFightPaySDK.pay(JSON.stringify(obj));
	}


	/*INTERFACE logic.union.IUnion */
	__proto.Share=function(cfg){}
	/*INTERFACE logic.union.IUnion */
	__proto.InitShareConfig=function(cfg){}
	/*INTERFACE logic.union.IUnion */
	__proto.SendMessageToFriend=function(opts){}
	/*INTERFACE logic.union.IUnion */
	__proto.SetWXBasicReport=function(info){}
	__proto.SetWXReport=function(info){}
	/*INTERFACE logic.union.IUnion */
	__proto.openUrlWithExtraWebview=function(opts){}
	/*INTERFACE logic.union.IUnion */
	__proto.closeWindow=function(){}
	/*INTERFACE logic.union.IUnion */
	__proto.sendDesktop=function(opts){}
	/*INTERFACE logic.union.IUnion */
	__proto.setCloseWindowConfirmDialogInfo=function(opts){}
	/*INTERFACE logic.union.IUnion */
	__proto.getNetworkInfo=function(){}
	/*INTERFACE logic.union.IUnion */
	__proto.relation=function(){}
	/*INTERFACE logic.union.IUnion */
	__proto.setWXListSubscribe=function(dat){}
	/*INTERFACE logic.union.IUnion */
	__proto.getWXListSubscribe=function(){}
	/*INTERFACE logic.union.IUnion */
	__proto.openTopicCircle=function(){}
	/*INTERFACE logic.union.IUnion */
	__proto.preloadQQBrowserResource=function(options){}
	/*INTERFACE logic.union.IUnion */
	__proto.getAvailableLoginType=function(){}
	/*INTERFACE logic.union.IUnion */
	__proto.Logout=function(loginType){
		(loginType===void 0)&& (loginType='');
	}


	/*INTERFACE logic.union.IUnion */
	__proto.getWXShareParams=function(){}
	__proto.getShareOpenid=function(){}
	__proto.getShareChannel=function(){}
	/*INTERFACE logic.union.IUnion */
	__proto.addQQGameShortcut=function(opts){}
	/*INTERFACE logic.union.IUnion */
	__proto.addQQFriend=function(opts){}
	__proto.shareScreenshot=function(opts){}
	__proto.switchToMsgList=function(opts){}
	/*INTERFACE logic.union.IUnion */
	__proto.getSource=function(){
		return '0';
	}


	/*INTERFACE logic.union.IUnion */
	__proto.setQQClipboard=function(content,callback){}
	__proto.switchToQQMsgList=function(content,callback){}
	/*INTERFACE logic.union.IUnion */
	__proto.midasPay=function(count,env){}
	/*INTERFACE logic.union.IUnion */
	__proto.onAuthCodeResult=function(dat){}
	/*INTERFACE logic.union.IUnion */
	__proto.onGotPlayZoneUserInfo=function(dat){}
	/*INTERFACE logic.union.IUnion */
	__proto.onBuyPlayZoneItem=function(dat){}
	/*INTERFACE logic.union.IUnion */
	__proto.getShareInfo=function(shareTicket){}
	/*INTERFACE logic.union.IUnion */
	__proto.getInterstitialAdAsync=function(placement_id){}
	__proto.getRewardedVideoAsync=function(placement_id){}
	__proto.getShareInfoData=function(){}
	__proto.getEntriesAsync=function(option){}
	__proto.getLeaderboardAsync=function(boardName){}
	__proto.setScoreAsync=function(dat){}
	__proto.onGotInterstitialAdAsync=function(dat){}
	__proto.onGetLeaderboardEntry=function(dat){}
	/*INTERFACE logic.union.IUnion */
	__proto.setLoadingProgress=function(progress){}
	return Union_Space;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class logic.union.Union_Tencent
	var Union_Tencent=(function(){
		function Union_Tencent(){
			this.game=null;
			this.instance=null;
			this.QQ_APPID='1105884587';
			this.WX_APPID='wx9e8f5c13236cb27d';
			this.MIDAS_OFFER_ID_ANDROID='1450012998';
			this.MIDAS_OFFER_ID_IOS='1450013814';
			this.MIDAS_SDK_URL='https://midas.gtimg.cn/h5pay/js/api/midas.js';
			this.sdk=null;
			this.midas=null;
			this.startDownloadTick=0;
			this.openId=null;
			this.accesstoken=null;
			this.loginTimeout=3000;
			this.lastLoginTime=0;
			this.retryLoginCount=0;
			this.loginSuccessCalled=false;
			this.payorder=null;
			this.good=null;
			var _$this=this;
			this.instance=this;
			this.game=GameManager.GetCurrentGame();
			var unionId=Method.getUnionId();
			if (this.game.config.banUnionIdList && this.game.config.banUnionIdList.indexOf(unionId)>-1){
				if ("-5"==unionId){
					if (this.game.config.banUnionIdList.indexOf("-8")==-1){
						this.game.showErrorMsgBox('','暂不开放手Q版本，敬请期待！');
						}else {
						this.game.showErrorMsgBox('','暂不开放安卓版本，敬请期待！');
					}
				}
				if ("-8"==unionId){
					if (this.game.config.banUnionIdList.indexOf("-5")==-1){
						this.game.showErrorMsgBox('','暂不开放微信版本，敬请期待！');
						}else {
						this.game.showErrorMsgBox('','暂不开放安卓版本，敬请期待！');
					}
				}
				if ("-9"==unionId){
					if (this.game.config.banUnionIdList.indexOf("-10")==-1){
						this.game.showErrorMsgBox('','暂不开放手Q版本，敬请期待！');
						}else {
						this.game.showErrorMsgBox('','亲爱的玩家，本次测试暂时不开放iOS版本，敬请谅解，可关注全民打雪球部落了解最新消息');
					}
				}
				if ("-10"==unionId){
					if (this.game.config.banUnionIdList.indexOf("-9")==-1){
						this.game.showErrorMsgBox('','暂不开放微信版本，敬请期待！');
						}else {
						this.game.showErrorMsgBox('','暂不开放IOS版本，敬请期待！');
					}
				}
				return;
			}
			this._loadTencentH5JSSDK();
			this._loadTencentMidasSDK();
			Browser.window.__paySuccess=function (){
				_$this.instance.game.buyPlayZoneItem(_$this.instance.payorder.orderId,_$this.instance.payorder.itemId,_$this.instance.payorder.itemCount);
			}
			Browser.window.__payError=function (){
				_$this.instance.game.onPayFinish(-1,0);
			}
			Browser.window.__payClose=function (){
				_$this.instance.game.onPayFinish(1,0);
			}
		}

		__class(Union_Tencent,'logic.union.Union_Tencent');
		var __proto=Union_Tencent.prototype;
		Laya.imps(__proto,{"logic.union.IUnion":true})
		__proto._loadTencentMidasSDK=function(){
			var _$this=this;
			var script=Browser.document.getElementById('laya8_tencent_midas_script')|| Browser.document.createElement('script');
			script.id='laya8_tencent_midas_script';
			script.onerror=function (){
				script.src=_$this.MIDAS_SDK_URL;
			}
			script.onload=function (){
				_$this.instance._onTencentMidasSDKLoaded();
			}
			script.src=this.MIDAS_SDK_URL;;
			Browser.document.getElementsByTagName('head')[0].appendChild(script);
		}

		__proto._onTencentMidasSDKLoaded=function(){
			this.midas=Browser.window.Midas;
			Union_Tencent.isMidasInited=true;
		}

		__proto._loadTencentH5JSSDK=function(){
			var _$this=this;
			if (Browser.window.H5jssdk){
				Stats.report("1_0");
				this.instance._onTencentSDKLoaded();
				return;
			}
			this.startDownloadTick=new Date().getTime();
			this.downloadTimeoutChecker();
			Stats.report("1_0");
			var script=Browser.document.getElementById('laya8_tencent_script')|| Browser.document.createElement('script');
			script.id='laya8_tencent_script';
			script.onerror=function (){
				script.src=Conf.TENCENT_SDK_URL;
			}
			script.onload=function (){
				_$this.instance._onTencentSDKLoaded();
			}
			script.src=Conf.TENCENT_SDK_URL;
			Browser.document.getElementsByTagName('head')[0].appendChild(script);
		}

		__proto.downloadTimeoutChecker=function(){
			if (new Date().getTime()-this.startDownloadTick > 20000){
				this.game.showErrorMsgBox('网络异常','您的网络似乎出了点问题，请检查网络设置或退出重试(8)');
				}else{
				Laya.timer.once(3000,this,this.downloadTimeoutChecker);
			}
		}

		__proto._onTencentSDKLoaded=function(){
			var _$this=this;
			Method.log('_onTencentSDKLoaded');
			if (!(this.sdk=Browser.window.H5jssdk)){
				Laya.timer.once(10,this.instance,this.instance._onTencentSDKLoaded);
				}else {
				Stats.report("1_1");
				var config={
					qqappid:this.QQ_APPID,
					wxappid:this.WX_APPID,
					enbaleRightDragToGoBackParams:false,
					isNeedPayToken:true,
					isNeeduserInfo:true,
					wxscope:["snsapi_userinfo","snsapi_friend","snsapi_message"],
					showMenuList:[],
					isDebug:true,
					orientation:true
				};
				this.sdk.init(config,function(){
					_$this.instance._onTencentSDKInited()
				});
			}
		}

		__proto._onTencentSDKInited=function(){
			var _$this=this;
			Method.log('_onTencentSDKInited');
			Stats.report("1_2");
			Union_Tencent.isInited=true;
			Laya.timer.clear(this,this.downloadTimeoutChecker);
			this.sdk.onGameVisibilityChange(function(flag,state){
				console.log('游戏状态改变:'+state);
				_$this.instance.onGameVisibilityChange(flag,state);
			});
		}

		__proto.onGameVisibilityChange=function(flag,state){
			this.game.onGameVisibilityChange(flag,state);
		}

		__proto.Login=function(loginType){
			var _$this=this;
			(loginType===void 0)&& (loginType='');
			if (!Union_Tencent.isInited){
				Laya.timer.once(10,this,this.Login);
				}else {
				if (this.retryLoginCount > 5){
					this.game.showErrorMsgBox('网络异常','您的网络似乎出了点问题，请检查网络设置或退出重试(7)');
					return;
				}
				Laya.timer.once(3000,this,this.onLoginTimeout);
				this.lastLoginTime=new Date().getTime();
				this.retryLoginCount++;
				Stats.report("1_3");
				Method.log('Tencent授权尝试第 '+this.retryLoginCount+'次, 当前时间:'+new Date().getTime());
				this.sdk.checkLogin(function(userInfo){
					if (userInfo.errcode==-111111){
						ErrorLog.I&&ErrorLog.I.reportError("realname","0.2",null);
						Method.log("未实名制");
						Laya.timer.clear(_$this.instance,_$this.onLoginTimeout);
						var start=Browser.document.getElementById('start');
						if (start){
							start.style.zIndex=48;
						}
						return;
					}
					if (_$this.instance.loginSuccessCalled){
						Method.log('login回调已调用');
						Laya.timer.clear(_$this.instance,_$this.onLoginTimeout);
						return;
					}
					_$this.instance.loginSuccessCalled=true;
					Stats.report("1_4");
					Laya.timer.clear(_$this.instance,_$this.onLoginTimeout);
					Method.log(userInfo);
					_$this.instance.openId=Method.getCookie('h5game_openid')||userInfo.openid;
					_$this.instance.accesstoken=Method.getCookie('h5game_accesstoken')||userInfo.openkey;
					var extParams='';
					var unionId=Method.getUnionId();
					if (unionId=='-5' || unionId=='-9'){
						extParams+='&paytoken='+Method.getCookie('h5game_paytoken').toUpperCase();
						}else {
						extParams+='&paytoken='+_$this.instance.accesstoken.toUpperCase();
						if (unionId=='-107' || unionId=='-108'){
							extParams+='&pf='+encodeURIComponent(Browser.window.OPEN_DATA.pf);
						}
					}
					Browser.window.userSex=userInfo.sex==1?1:0;
					_$this.instance.game.onExternalUserLogin(_$this.instance.openId,_$this.instance.accesstoken,userInfo.nickname,userInfo.headimgurl,extParams,userInfo.sex==1?1:0);
					_$this.instance.game.user.setOpenId(_$this.instance.openId);
					},function(userinfo){
					if (userinfo && userinfo.errcode==-111111){
						ErrorLog.I&&ErrorLog.I.reportError("realname","0.1",null);
						Method.log("未实名制");
						Laya.timer.clear(_$this.instance,_$this.onLoginTimeout);
						var start=Browser.document.getElementById('start');
						if (start){
							start.style.zIndex=48;
						}
						return;
					}
					ErrorLog.I&&ErrorLog.I.reportError("loginfield",userinfo?(userinfo.errcode+""):"noreson",null);
					Laya.timer.clear(_$this.instance,_$this.onLoginTimeout);
					_$this.instance.game.showErrorMsgBox('错误','SDK授权失败, 请重试');
					Method.log('未登录');
				});
			}
		}

		__proto.onLoginTimeout=function(){
			if (this.lastLoginTime>0 && new Date().getTime()-this.lastLoginTime>this.loginTimeout){
				this.Login();
				}else{
				Laya.timer.once(3000,this,this.onLoginTimeout);
			}
		}

		__proto.getAppId=function(){
			var unionId=Method.getUnionId();
			if (unionId=='-5' || unionId=='-9')
				return this.QQ_APPID;
			return this.WX_APPID;
		}

		__proto.getAccount=function(){
			var unionId=Method.getUnionId();
			if (unionId=='-5' || unionId=='-9')
				return 'qq';
			return 'wechat';
		}

		__proto.getOfferId=function(){
			var unionId=Method.getUnionId();
			if (unionId=='-9' || unionId=='-10')
				return this.MIDAS_OFFER_ID_IOS;
			return this.MIDAS_OFFER_ID_ANDROID;
		}

		__proto.midasPay=function(count,env){
			var _$this=this;
			var unionId=Method.getUnionId();
			if (unionId=='-9' || unionId=='-10'){
				var payObj={};
				var product_id='com.tencent.mqq.snowball.consumable.'+count;
				payObj['app_id']=this.getOfferId();
				payObj['pf']=this.getPf();
				payObj['pfkey']='pfkey';
				payObj['product_id']=product_id;
				payObj['product_type']=0;
				payObj['pay_item']=count;
				payObj['quantity']=1;
				payObj['is_deposit_game_coin']=1;
				payObj['var_item']='aid=2017&appid='+this.getOfferId()+'&product_id='+product_id;
				if (Browser.window.mqq && Browser.window.mqq.pay && Browser.window.mqq.pay.pay){
					Browser.window.mqq.pay.pay(payObj,function(ret,msg){
						if (ret==0){
							_$this.instance.onMidasPayResult(0,count);
							}else{
							_$this.instance.onMidasPayResult(1,count);
						}
					});
					}else{
					alert('请使用手Q');
				}
				}else{
				var payObj={};
				payObj['appid']=this.getOfferId();
				payObj['pf']=this.getPf();
				payObj['zoneid']="1";
				payObj['n']=count;
				payObj['as']='1';
				payObj['account']=this.getAccount();
				var b=env==1;
				if(b)payObj['sandbox']=b;
				payObj=this.getLoginState(payObj);
				payObj['onSuccess']=function (){_$this.instance.onMidasPayResult(0,count);};
				payObj['onClose']=function (){_$this.instance.onMidasPayResult(1,count);};
				this.midas.rechargeGameCurrency(payObj);
			}
		}

		__proto.onMidasPayResult=function(code,count){
			this.game.onMidasPayResult(code,count);
		}

		/**
		*QQ空间要使用这个接口
		*@param payorder
		*@param good
		*/
		__proto.Pay=function(payorder,good){
			this.payorder=payorder;
			this.good=good;
			this.game.getPlayZoneUserInfo();
		}

		__proto.onGotPlayZoneUserInfo=function(dat){
			var resp=JSON.parse(dat.resp);
			if (resp.code !=0){
				this.instance.game.onPayFinish(0,0);
				return;
			}
			if (resp.data[0].score >=this.payorder.totalPrice){
				this.instance.game.buyPlayZoneItem(this.payorder.orderId,this.payorder.itemId,this.payorder.itemCount);
				}else{
				if (Browser.window.popPayTips){
					Browser.window.popPayTips({
						defaultScore:this.payorder.totalPrice,
						appid:this.instance.QQ_APPID
					});
					}else{
					Method.log('非QQ空间环境，无法弹出支付窗口');
				}
			}
		}

		__proto.onBuyPlayZoneItem=function(dat){
			var resp=JSON.parse(dat.resp);
			if (resp.code==0){
				var count=0;
				if (resp.data&&resp.data[0]){
					count=resp.data[0].cost;
				}
				this.instance.game.onPayFinish(0,count);
				}else{
				this.instance.game.onPayFinish(-1,0);
			}
		}

		__proto.getPf=function(){
			var unionId=Method.getUnionId();
			switch(unionId){
				case '-5':
					return "qq_m_qq-2017-android-0-qq-"+this.QQ_APPID+"-"+this.instance.game.user.getOpenId()+"-1-android";
				case '-8':
					return "qq_m_qq-2017-android-2017";
				case '-9':
					return "qq_m-0-html5-0-qq-"+this.QQ_APPID+"-"+this.instance.game.user.getOpenId()+"-1-iap";
				case '-10':
					return "qq_m_qq-2017-iap-2017";
				default :
					return '';
				}
			return null;
		}

		__proto.getLoginState=function(obj){
			var unionId=Method.getUnionId();
			if (unionId=='-5' || unionId=='-9'){
				obj['sessionid']='openid';
				obj['sessiontype']='kp_actoken';
				obj['openid']=this.openId;
				obj['openkey']=Method.getCookie('h5game_paytoken');
				}else {
				obj['sessionid']='hy_gameid';
				obj['sessiontype']='wc_actoken';
				obj['openid']=this.openId;
				obj['openkey']=this.accesstoken;
				obj['wxAppid2']=this.WX_APPID;
			}
			return obj;
		}

		/*INTERFACE logic.union.IUnion */
		__proto.InitShareConfig=function(cfg){
			var _$this=this;
			if (!Union_Tencent.isInited){
				Laya.timer.once(10,this,this.InitShareConfig,[cfg]);
				}else {
				this.sdk.share(cfg,function(){
					_$this.instance.game.onShareFinish(0);
					},function(e){
					Method.log('设置分享信息失败:',e);
					_$this.instance.game.onShareFinish(-1);
				});
			}
		}

		/*INTERFACE logic.union.IUnion */
		__proto.Share=function(share){
			var _$this=this;
			if (!Union_Tencent.isInited){
				Laya.timer.once(10,this,this.Share,[share]);
				}else {
				this.sdk.shareMessage(share,function(e){
					_$this.instance.game.onShareFinish(0);
					},function(e){
					_$this.instance.game.onShareFinish(-1);
				});
			}
		}

		/*INTERFACE logic.union.IUnion */
		__proto.SendMessageToFriend=function(opts){
			var _$this=this;
			if (!Union_Tencent.isInited){
				Laya.timer.once(10,this,this.SendMessageToFriend,[opts]);
				}else {
				this.sdk.sendMessageToFriend(opts,function(){
					_$this.instance.game.onShareFinish(0);
					},function(){
					_$this.instance.game.onShareFinish(1);
				});
			}
		}

		/*INTERFACE logic.union.IUnion */
		__proto.SetWXBasicReport=function(info){
			if (!Union_Tencent.isInited){
				Laya.timer.once(10,this,this.SetWXBasicReport,[info]);
				}else {
				this.sdk.setWXBasicReport(info);
			}
		}

		__proto.SetWXReport=function(info){
			if (!Union_Tencent.isInited){
				Laya.timer.once(10,this,this.SetWXReport,[info]);
				}else {
				this.sdk.setWXReport(info);
			}
		}

		/*INTERFACE logic.union.IUnion */
		__proto.openUrlWithExtraWebview=function(opts){
			if (!Union_Tencent.isInited){
				Laya.timer.once(10,this,this.openUrlWithExtraWebview,[opts]);
				}else {
				this.sdk.openUrlWithExtraWebview(opts);
			}
		}

		/*INTERFACE logic.union.IUnion */
		__proto.closeWindow=function(){
			if (!Union_Tencent.isInited){
				Laya.timer.once(10,this,this.closeWindow);
				}else {
				this.sdk.closeWindow(function(msg){
					Method.log('关闭webview:'+msg);
				});
			}
		}

		/*INTERFACE logic.union.IUnion */
		__proto.sendDesktop=function(opts){
			var _$this=this;
			if (!Union_Tencent.isInited){
				Laya.timer.once(10,this,this.sendDesktop,[opts]);
				}else {
				this.sdk.sendDesktop(opts,function(dat){
					if (!dat){
						dat={
							result:0,
							resultData:'',
							message:''
						};
					}
					_$this.instance.game.onSentDesktop(dat);
					},function(dat){
					if (!dat){
						dat={
							result:-100,
							resultData:'',
							message:''
						};
					}
					_$this.instance.game.onSentDesktop(dat);
				});
			}
		}

		/*INTERFACE logic.union.IUnion */
		__proto.setCloseWindowConfirmDialogInfo=function(opts){
			opts['switch']=opts.Switch;
			if (!Union_Tencent.isInited){
				Laya.timer.once(10,this,this.setCloseWindowConfirmDialogInfo,[opts]);
				}else {
				this.sdk.setCloseWindowConfirmDialogInfo(opts);
			}
		}

		/*INTERFACE logic.union.IUnion */
		__proto.getNetworkInfo=function(){
			var _$this=this;
			if (!Union_Tencent.isInited){
				Laya.timer.once(10,this,this.getNetworkInfo);
				}else {
				this.sdk.getNetworkInfo(function(param){
					_$this.instance.game.onGotNetworkInfo(param);
				});
			}
		}

		/*INTERFACE logic.union.IUnion */
		__proto.relation=function(){
			var _$this=this;
			if (!Union_Tencent.isInited){
				Laya.timer.once(10,this,this.relation);
				}else {
				this.sdk.relation({
					wxappid:this.WX_APPID,
					qqappid:this.QQ_APPID
					},function(dat){
					_$this.instance.game.onGotRelation(dat);
					},function(dat){
					_$this.instance.game.onGotRelation(dat);
				});
			}
		}

		/*INTERFACE logic.union.IUnion */
		__proto.setWXListSubscribe=function(param){
			var _$this=this;
			if (!Union_Tencent.isInited){
				Laya.timer.once(10,this,this.setWXListSubscribe,[param]);
				}else {
				this.sdk.setWXListSubscribe(param,function(dat){
					_$this.instance.game.onSetWXListSubscribeResult(dat);
					},function(dat){
					_$this.instance.game.onSetWXListSubscribeResult(dat);
				});
			}
		}

		/*INTERFACE logic.union.IUnion */
		__proto.getWXListSubscribe=function(){
			var _$this=this;
			if (!Union_Tencent.isInited){
				Laya.timer.once(10,this,this.getWXListSubscribe);
				}else {
				this.sdk.getWXListSubscribe(function(dat){
					_$this.instance.game.onGotWXListSubscribe(
					{iRet:0,
						sMsg:"success",
						list:dat
					});
					},function(dat){
					_$this.instance.game.onGotWXListSubscribe(dat);
				});
			}
		}

		/*INTERFACE logic.union.IUnion */
		__proto.createDesktopIcon=function(options){}
		/*INTERFACE logic.union.IUnion */
		__proto.openTopicCircle=function(){}
		/*INTERFACE logic.union.IUnion */
		__proto.preloadQQBrowserResource=function(options){}
		/*INTERFACE logic.union.IUnion */
		__proto.getAvailableLoginType=function(){}
		/*INTERFACE logic.union.IUnion */
		__proto.Logout=function(loginType){
			(loginType===void 0)&& (loginType='');
			if (!Union_Tencent.isInited){
				Laya.timer.once(10,this,this.Logout,[loginType]);
				}else {
				this.sdk.QQLogout(function(){
					Method.refreshWindow();
				});
			}
		}

		/*INTERFACE logic.union.IUnion */
		__proto.getWXShareParams=function(){
			if (!Union_Tencent.isInited){
				Laya.timer.once(10,this,this.getWXShareParams);
				}else {
				this.game.onGotWXShareParams(this.sdk.getWXShareParams());
			}
		}

		__proto.getShareOpenid=function(){
			if (!Union_Tencent.isInited){
				Laya.timer.once(10,this,this.getShareOpenid);
				}else {
				this.game.onGotShareOpenid(this.sdk.getShareOpenid());
			}
		}

		__proto.getShareChannel=function(){
			if (!Union_Tencent.isInited){
				Laya.timer.once(10,this,this.getShareChannel);
				}else {
				this.game.onGotShareChannel(this.sdk.getShareChannel());
			}
		}

		/*INTERFACE logic.union.IUnion */
		__proto.addQQGameShortcut=function(opts){
			var _$this=this;
			if (!Union_Tencent.isInited){
				Laya.timer.once(10,this,this.addQQGameShortcut,[opts]);
				}else {
				this.sdk.addQQGameShortcut(opts,function(dat){
					_$this.instance.game.onSentDesktop(dat);
					},function(dat){
					_$this.instance.game.onSentDesktop(dat);
				});
			}
		}

		/*INTERFACE logic.union.IUnion */
		__proto.addQQFriend=function(opts){
			var _$this=this;
			opts.appId=this.QQ_APPID;
			if (!Union_Tencent.isInited){
				Laya.timer.once(10,this,this.addQQFriend,[opts]);
				}else {
				this.sdk.addQQFriend(opts,function(dat){
					_$this.instance.game.onAddedQQFriend(dat);
				});
			}
		}

		__proto.shareScreenshot=function(opts){
			var _$this=this;
			if (!Union_Tencent.isInited){
				Laya.timer.once(10,this,this.shareScreenshot,[opts]);
				}else {
				this.sdk.shareScreenshot(opts,function(dat){
					if (!dat.iRet){
						_$this.instance.game.onShareScreenshot({code:0});
					}
					else{
						_$this.instance.game.onShareScreenshot({code:-1});
					}
				});
			}
		}

		__proto.switchToMsgList=function(opts){
			var _$this=this;
			if (!Union_Tencent.isInited){
				Laya.timer.once(10,this,this.switchToMsgList,[opts]);
				}else {
				this.sdk.switchToMsgList(opts,function(dat){
					_$this.instance.game.onSwitchToMsgList(dat);
				});
			}
		}

		/*INTERFACE logic.union.IUnion */
		__proto.getSource=function(){
			return this.sdk.getShareChannel();
		}

		/*INTERFACE logic.union.IUnion */
		__proto.setQQClipboard=function(content,callback){
			this.sdk.setQQClipboard(content,function(){
				callback(1);
				},function(){
				callback(0);
			});
		}

		//返回手Q消息列表
		__proto.switchToQQMsgList=function(content,callback){
			this.sdk.switchToMsgList({
				title:"返回消息列表显示的标题",
				icon:"http://ossweb-img.qq.com/images/agile/2015/12/9/4508773212a46c5d785239b960a2cda3.jpg"
				},function(){
			});
		}

		/*INTERFACE logic.union.IUnion */
		__proto.onAuthCodeResult=function(dat){}
		/*INTERFACE logic.union.IUnion */
		__proto.getShareInfo=function(shareTicket){}
		/*INTERFACE logic.union.IUnion */
		__proto.getInterstitialAdAsync=function(placement_id){}
		__proto.getRewardedVideoAsync=function(placement_id){}
		__proto.getShareInfoData=function(){}
		__proto.getEntriesAsync=function(option){}
		__proto.getLeaderboardAsync=function(boardName){}
		__proto.setScoreAsync=function(dat){}
		__proto.onGotInterstitialAdAsync=function(dat){}
		__proto.onGetLeaderboardEntry=function(dat){}
		/*INTERFACE logic.union.IUnion */
		__proto.setLoadingProgress=function(progress){}
		__getset(1,Union_Tencent,'I',function(){
			return Union_Tencent._instance=Union_Tencent._instance|| new Union_Tencent();
		});

		Union_Tencent.isInited=false;
		Union_Tencent.isMidasInited=false;
		Union_Tencent._instance=null
		return Union_Tencent;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class logic.union.Union_Test
	var Union_Test=(function(){
		function Union_Test(){
			this.game=null;
			this.game=GameManager.GetCurrentGame();
		}

		__class(Union_Test,'logic.union.Union_Test');
		var __proto=Union_Test.prototype;
		Laya.imps(__proto,{"logic.union.IUnion":true})
		/*INTERFACE logic.union.IUnion */
		__proto.Login=function(loginType){
			(loginType===void 0)&& (loginType='');
			this.game.onExternalUserLogin('testuser_'+Method.random(1,9999999999),'');
		}

		__proto.Pay=function(payorder,good){}
		/*INTERFACE logic.union.IUnion */
		__proto.Share=function(cfg){}
		/*INTERFACE logic.union.IUnion */
		__proto.InitShareConfig=function(cfg){}
		/*INTERFACE logic.union.IUnion */
		__proto.SendMessageToFriend=function(opts){}
		/*INTERFACE logic.union.IUnion */
		__proto.SetWXBasicReport=function(info){}
		__proto.SetWXReport=function(info){}
		/*INTERFACE logic.union.IUnion */
		__proto.openUrlWithExtraWebview=function(opts){}
		/*INTERFACE logic.union.IUnion */
		__proto.closeWindow=function(){}
		/*INTERFACE logic.union.IUnion */
		__proto.sendDesktop=function(opts){}
		/*INTERFACE logic.union.IUnion */
		__proto.setCloseWindowConfirmDialogInfo=function(opts){}
		/*INTERFACE logic.union.IUnion */
		__proto.getNetworkInfo=function(){}
		/*INTERFACE logic.union.IUnion */
		__proto.relation=function(){}
		/*INTERFACE logic.union.IUnion */
		__proto.setWXListSubscribe=function(dat){}
		/*INTERFACE logic.union.IUnion */
		__proto.getWXListSubscribe=function(){}
		/*INTERFACE logic.union.IUnion */
		__proto.openTopicCircle=function(){}
		/*INTERFACE logic.union.IUnion */
		__proto.preloadQQBrowserResource=function(options){}
		/*INTERFACE logic.union.IUnion */
		__proto.getAvailableLoginType=function(){}
		/*INTERFACE logic.union.IUnion */
		__proto.Logout=function(loginType){
			(loginType===void 0)&& (loginType='');
		}

		/*INTERFACE logic.union.IUnion */
		__proto.getWXShareParams=function(){}
		__proto.getShareOpenid=function(){}
		__proto.getShareChannel=function(){}
		/*INTERFACE logic.union.IUnion */
		__proto.addQQGameShortcut=function(opts){}
		/*INTERFACE logic.union.IUnion */
		__proto.addQQFriend=function(opts){}
		__proto.shareScreenshot=function(opts){}
		__proto.switchToMsgList=function(opts){}
		/*INTERFACE logic.union.IUnion */
		__proto.getSource=function(){
			return '0';
		}

		/*INTERFACE logic.union.IUnion */
		__proto.setQQClipboard=function(content,callback){}
		/*INTERFACE logic.union.IUnion */
		__proto.switchToQQMsgList=function(content,callback){}
		/*INTERFACE logic.union.IUnion */
		__proto.midasPay=function(count,env){}
		/*INTERFACE logic.union.IUnion */
		__proto.onAuthCodeResult=function(dat){}
		/*INTERFACE logic.union.IUnion */
		__proto.onGotPlayZoneUserInfo=function(dat){}
		/*INTERFACE logic.union.IUnion */
		__proto.onBuyPlayZoneItem=function(dat){}
		/*INTERFACE logic.union.IUnion */
		__proto.getShareInfo=function(shareTicket){}
		/*INTERFACE logic.union.IUnion */
		__proto.getInterstitialAdAsync=function(placement_id){}
		__proto.getRewardedVideoAsync=function(placement_id){}
		__proto.getShareInfoData=function(){}
		__proto.getEntriesAsync=function(option){}
		__proto.getLeaderboardAsync=function(boardName){}
		__proto.setScoreAsync=function(dat){}
		__proto.onGotInterstitialAdAsync=function(dat){}
		__proto.onGetLeaderboardEntry=function(dat){}
		/*INTERFACE logic.union.IUnion */
		__proto.setLoadingProgress=function(progress){}
		return Union_Test;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class logic.union.Union_Test2
	var Union_Test2=(function(){
		function Union_Test2(){
			this.game=null;
			this.game=GameManager.GetCurrentGame();
		}

		__class(Union_Test2,'logic.union.Union_Test2');
		var __proto=Union_Test2.prototype;
		Laya.imps(__proto,{"logic.union.IUnion":true})
		/*INTERFACE logic.union.IUnion */
		__proto.Login=function(loginType){
			(loginType===void 0)&& (loginType='');
			var username=LocalStorage.getItem('laya8_union_test2_username');
			if (!username){
				username='testuser_'+Method.random(1,9999999999);
				LocalStorage.setItem('laya8_union_test2_username',username);
			}
			this.game.onExternalUserLogin(username,'');
		}

		__proto.Pay=function(payorder,good){}
		/*INTERFACE logic.union.IUnion */
		__proto.Share=function(cfg){}
		/*INTERFACE logic.union.IUnion */
		__proto.InitShareConfig=function(cfg){}
		/*INTERFACE logic.union.IUnion */
		__proto.SendMessageToFriend=function(opts){}
		/*INTERFACE logic.union.IUnion */
		__proto.SetWXBasicReport=function(info){}
		__proto.SetWXReport=function(info){}
		/*INTERFACE logic.union.IUnion */
		__proto.openUrlWithExtraWebview=function(opts){}
		/*INTERFACE logic.union.IUnion */
		__proto.closeWindow=function(){}
		/*INTERFACE logic.union.IUnion */
		__proto.sendDesktop=function(opts){}
		/*INTERFACE logic.union.IUnion */
		__proto.setCloseWindowConfirmDialogInfo=function(opts){}
		/*INTERFACE logic.union.IUnion */
		__proto.getNetworkInfo=function(){}
		/*INTERFACE logic.union.IUnion */
		__proto.relation=function(){}
		/*INTERFACE logic.union.IUnion */
		__proto.setWXListSubscribe=function(dat){}
		/*INTERFACE logic.union.IUnion */
		__proto.getWXListSubscribe=function(){}
		/*INTERFACE logic.union.IUnion */
		__proto.openTopicCircle=function(){}
		/*INTERFACE logic.union.IUnion */
		__proto.preloadQQBrowserResource=function(options){}
		/*INTERFACE logic.union.IUnion */
		__proto.getAvailableLoginType=function(){}
		/*INTERFACE logic.union.IUnion */
		__proto.Logout=function(loginType){
			(loginType===void 0)&& (loginType='');
		}

		/*INTERFACE logic.union.IUnion */
		__proto.getWXShareParams=function(){}
		__proto.getShareOpenid=function(){}
		__proto.getShareChannel=function(){}
		/*INTERFACE logic.union.IUnion */
		__proto.addQQGameShortcut=function(opts){}
		/*INTERFACE logic.union.IUnion */
		__proto.addQQFriend=function(opts){}
		__proto.shareScreenshot=function(opts){}
		__proto.switchToMsgList=function(opts){}
		/*INTERFACE logic.union.IUnion */
		__proto.getSource=function(){
			return '';
		}

		/*INTERFACE logic.union.IUnion */
		__proto.setQQClipboard=function(content,callback){}
		/*INTERFACE logic.union.IUnion */
		__proto.switchToQQMsgList=function(content,callback){}
		/*INTERFACE logic.union.IUnion */
		__proto.midasPay=function(count,env){}
		/*INTERFACE logic.union.IUnion */
		__proto.onAuthCodeResult=function(dat){}
		/*INTERFACE logic.union.IUnion */
		__proto.onGotPlayZoneUserInfo=function(dat){}
		/*INTERFACE logic.union.IUnion */
		__proto.onBuyPlayZoneItem=function(dat){}
		/*INTERFACE logic.union.IUnion */
		__proto.getShareInfo=function(shareTicket){}
		/*INTERFACE logic.union.IUnion */
		__proto.getInterstitialAdAsync=function(placement_id){}
		__proto.getRewardedVideoAsync=function(placement_id){}
		__proto.getShareInfoData=function(){}
		__proto.getEntriesAsync=function(option){}
		__proto.getLeaderboardAsync=function(boardName){}
		__proto.setScoreAsync=function(dat){}
		__proto.onGotInterstitialAdAsync=function(dat){}
		__proto.onGetLeaderboardEntry=function(dat){}
		/*INTERFACE logic.union.IUnion */
		__proto.setLoadingProgress=function(progress){}
		return Union_Test2;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class logic.user.LayaBoxUser
	var LayaBoxUser=(function(){
		function LayaBoxUser(){}
		__class(LayaBoxUser,'logic.user.LayaBoxUser');
		LayaBoxUser.login=function(userName,password,callback){
			Method.getJSONP(Conf.LAYABOX_PASSPORT_URL+'layapassport/login?idtype=1&identifier='+userName+"&password="+password,Handler.create(null,function(data){
				if (data.ret==0){
					Browser.window.layaopen_user_data=data.data.token;
					LocalStorage.setItem('layaopen_token',data.data.token);
					Method.getJSONP(Conf.LAYABOX_PASSPORT_URL+'sso/?access_token='+data.data.token,callback);
					}else {
					callback.runWith(data);
				}
			}));
		}

		LayaBoxUser.makeJumpUrl=function(){
			return encodeURIComponent(Browser.window.location.href);
			var url=[];
			var search=Browser.window.location.search.substr(1);
			var searchs=search.split('&');
			url.push(Browser.window.location.protocol);
			url.push('//');
			url.push(Browser.window.location.host);
			url.push(Browser.window.location.pathname);
			for (var i=0;i<searchs.length;i++){
				var _param=searchs[i].split('=');
				if (url[url.length-1]!='/'){
					url.push('/');
				}
				url.push(_param[0]+'-'+_param[1]);
			}
			return url.join('');
		}

		LayaBoxUser.thirdLogin=function(type){
			if (Browser.window.runtime){
				alert(111);
				try{
					Browser.window.conchMarket.login(JSON.stringify({type:type }),Browser.window._LAYAOPEN_SDK._callback.login);
					}catch(e){
					alert(e);
				}
				alert(222);
				return;
			};
			var document=Browser.document;
			var gamewin=document.getElementById('__laya8_hall_thirdlogin');
			if (!gamewin){
				gamewin=document.createElement('iframe');
				gamewin.style.cssText+='position:absolute;left:0;top:0;width:100%;height:100%;border:none;background:white';
				document.body.appendChild(gamewin);
			}
			gamewin.id='__laya8_hall_thirdlogin';
			gamewin.src=Conf.LAYABOX_PASSPORT_URL+'third/'+(type=='WX'?LayaBoxUser.url_wx:LayaBoxUser.url_qq)+LayaBoxUser.makeJumpUrl();
			Method.log('第三方登录:',type,gamewin.src);
		}

		LayaBoxUser.regAndLogin=function(userName,password,callback){
			Method.getJSONP(Conf.LAYABOX_PASSPORT_URL+'layapassport/register?idtype=1&username='+userName+"&password="+password,Handler.create(null,function(data){
				if (data.ret==0){
					Browser.window.layaopen_user_data=data.data.token;
					LocalStorage.setItem('layaopen_token',data.data.token);
					Method.getJSONP(Conf.LAYABOX_PASSPORT_URL+'sso/?access_token='+data.data.token,callback);
					}else {
					callback.runWith(data);
				}
			}));
		}

		LayaBoxUser.url_wx='wxlogin?jumpurl=';
		LayaBoxUser.url_qq='qqlogin?jumpurl=';
		return LayaBoxUser;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class logic.user.UserShortDataInfo
	var UserShortDataInfo$1=(function(){
		function UserShortDataInfo(){
			this.NkName=null;
			this.Avtor=0;
			this.Level=0;
			this.Grade=0;
			this.Gender=0;
		}

		__class(UserShortDataInfo,'logic.user.UserShortDataInfo',null,'UserShortDataInfo$1');
		var __proto=UserShortDataInfo.prototype;
		__proto.setData=function(data){
			var arr=data.split(':');
			this.NkName=arr[0];
			this.Avtor=arr[1];
			this.Level=arr[2];
			this.Grade=arr[3];
			this.Gender=arr[4];
		}

		return UserShortDataInfo;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class logic.user.User
	var User$1=(function(){
		function User(gameId){
			this.sender=null;
			this.gameId=0;
			this.unionId=null;
			this.union=null;
			this.game=null;
			this.user=null;
			this.basicData=null;
			this.gamedata=null;
			this.items=null;
			this._hadGameData=false;
			this._hadBasicData=false;
			this._hadItemData=false;
			this._hadMyRankData=false;
			this.myrankData=null;
			this._openId=null;
			this._authCode=null;
			this.gameId=gameId;
			this.game=GameManager.GetGame(this.gameId);
			this.unionId=Method.getUnionId();
			this.union=this.getUnion();
			this.basicData=new UserBasicDataInfo$1();
			this.gamedata=new UserGameDataInfo$1();
			this.items=new Object();
			this.sender=new UserMessageSender$1(gameId);
		}

		__class(User,'logic.user.User',null,'User$1');
		var __proto=User.prototype;
		__proto.setOpenId=function(openId){
			this._openId=openId;
		}

		__proto.getOpenId=function(){
			return this._openId;
		}

		__proto.GetUnion=function(){
			return this.union;
		}

		__proto.getUnion=function(){
			if (parseInt(this.unionId)<=-11 && parseInt(this.unionId)>=-100){
				return new Union_Space();
			}
			switch (this.unionId){
				case "-1":
				case "-6":
				case "-7":
					return new Union_Space();
				case "-2":
					return new Union_Test();
				case "-3":
					return new Union_LayaBox2();
				case "-4":
					return new Union_Test2();
				case "-5":
				case "-8":
				case "-9":
				case "-10":
				case "-107":
				case "-108":
					return new Union_Tencent();
				case "-101":
				case "-102":
				case "-103":
				case "-104":
					return new Union_QQBrowser();
				case "-105":
					return new Union_LayaNative();
				case "-106":
				case "-109":
					return new Union_MiniGame();
				case "-110":
					return new Union_Facebook();
				default :
					return new Union_LayaBox()
				}
		}

		__proto.Login=function(username,token,source,referee,extendParams){
			this.sender.Login(username,token,source,referee,extendParams);
		}

		/**
		*使用联运商的方式进行登录,默认使用LayaMarket
		*/
		__proto.Login2Union=function(){
			this.union.Login();
		}

		__proto.onLogin2Router=function(u){
			this.user=u;
			this.user.OpenId=this._openId;
			this.user.UnionId=Method.getUnionId();
			this.sender.onLoginDataChg(this.user);
			this.game.onLogin2Router();
		}

		__proto.onDataChg=function(data){
			switch (data.type){
				case "1":
					this.onBasicDataChg(data.data);
					break ;
				case "2":
					this.onGameDataChg(data.data);
					break ;
				}
		}

		__proto.SyncData=function(){
			this.sender.onLoginDataChg(this.user);
			if (this._hadBasicData){
				this.sender.onBasicDataChg(this.basicData);
			}
			if (this._hadGameData){
				this.sender.onGameDataChg(this.gamedata);
			}
		}

		__proto.updateBasicData=function(nkname,gender,avtor){
			this.sender.updateBasicData(nkname,gender,avtor);
		}

		__proto.onUserError=function(code){
			var er=new ErrorInfo$1();
			er.errorCode=code;
			er.errorMessage=ErrorMsg.GetMsg(code);
			switch (er.errorCode){
				case '-40001':
				case '-40002':
				case '-40003':
					this.game.showErrorMsgBox('网络异常',ErrorMsg.GetMsg(-90001)+'('+er.errorCode+')');
					break ;
				}
			this.sender.onUserError(er);
		}

		__proto.getRandomName=function(){
			if (User._randomNamePool.length>0){
				this.sendRandomName();
				}else {
				this.sender.getRandomName();
			}
		}

		__proto.sendRandomName=function(){
			this.sender.sendRandomName(User._randomNamePool.shift());
		}

		__proto.addRandomNamePool=function(nknames){
			User._randomNamePool=User._randomNamePool.concat(nknames.split(';'));
			User._randomNamePool.pop();
			this.sendRandomName();
		}

		__proto.chgMoney=function(money){
			this.basicData.Money=money;
			this.sender.onBasicDataChg(this.basicData);
		}

		__proto.SyncMyRankData=function(){
			if (this._hadMyRankData){
				this.sender.onGotMyRanks(this.myrankData);
			}
		}

		__proto.onGotMyRanks=function(dat){
			this._hadMyRankData=true;
			this.myrankData=dat;
			this.sender.onGotMyRanks(dat);
		}

		__proto.getReward=function(rewardIdArray){
			this.sender.getReward(rewardIdArray);
		}

		__proto.getRewardData=function(rewardIdArray){
			this.sender.getRewardData(rewardIdArray);
		}

		__proto.getGameData=function(dat){
			this.sender.getGameData(dat);
		}

		__proto.getGameDataResult=function(dat){
			try {
				if (dat.results && dat.results.fjson && (typeof dat.results.fjson=='string')){
					dat.results.fjson=JSON.parse(dat.results.fjson);
				}
				if (dat.results && dat.results.fclient && (typeof dat.results.fclient=='string')){
					dat.results.fclient=JSON.parse(dat.results.fclient);
				}
			}catch(ex){}
			this.sender.getGameDataResult(dat);
		}

		__proto.onGotRewardData=function(dat){
			this.sender.onGotRewardData(dat);
		}

		__proto.onGameDataChg=function(data){
			this._hadGameData=true;
			this.gamedata.setData(data);
			this.sender.onGameDataChg(this.gamedata);
		}

		__proto.onBasicDataChg=function(data){
			this._hadBasicData=true;
			this.basicData.setData(data);
			this.sender.onBasicDataChg(this.basicData);
		}

		__proto.getUserId=function(){
			if (this.user!=null){
				return this.user.UserId;
			}
			return 0;
		}

		__proto.setClientObject=function(dat){
			this.sender.setClientObject(dat);
		}

		__proto.onGotClientObjectResult=function(dat){
			this.sender.onGotClientObjectResult(dat);
		}

		__proto.getLastRoom=function(){
			this.sender.getLastRoom();
		}

		__proto.onGotLastRoom=function(roomId){
			this.sender.onGotLastRoom(roomId);
		}

		__proto.searchByUId=function(targetId){
			this.sender.searchByUId(targetId);
		}

		__proto.searchByUIdResult=function(dat){
			this.sender.searchByUIdResult(dat);
		}

		__proto.createTeam=function(type,displayInList){
			this.sender.createTeam(type,displayInList);
		}

		__proto.leaveTeam=function(){
			this.sender.leaveTeam();
		}

		__proto.joinTeam=function(team,payload){
			this.sender.joinTeam(team,payload);
		}

		__proto.teamReady=function(ready){
			this.sender.teamReady(ready);
		}

		__proto.teamCreated=function(dat){
			this.sender.teamCreated(dat);
		}

		__proto.teamInvite=function(dat){
			var u=new UserBasicDataInfo$1();
			u.setData(dat.userinfo);
			dat.userinfo=u;
			this.sender.onTeamInvite(dat);
		}

		__proto.teamJoined=function(dat){
			if (dat.code==0){
				var users=dat.userInfo.split(';');
				var list=[];
				for (var i=0;i < users.length;i++){
					var u=new TeamUserBasicDataInfo$1();
					u.setData(users[i]);
					list.push(u);
				}
				dat.userInfo=list;
			}
			this.sender.onTeamJoined(dat);
		}

		__proto.teamLeft=function(dat){
			this.sender.onTeamLeft(dat);
		}

		__proto.teamPlay=function(){
			this.sender.teamPlay();
		}

		__proto.inviteTeam=function(toUserId,payload){
			this.sender.inviteTeam(toUserId,payload);
		}

		__proto.kickTeam=function(toUserId){
			this.sender.kickTeam(toUserId);
		}

		__proto.queryByOpenId=function(openIds){
			this.sender.queryByOpenId(openIds);
		}

		__proto.queryByOpenIdResult=function(dat){
			this.sender.queryByOpenIdResult(dat);
		}

		__proto.attention=function(userIds){
			this.sender.attention(userIds);
		}

		__proto.attentionResult=function(dat){
			this.sender.attentionResult(dat);
		}

		__proto.inattention=function(userIds){
			this.sender.inattention(userIds);
		}

		__proto.inattentionResult=function(dat){
			this.sender.inattentionResult(dat);
		}

		__proto.sendMessage=function(dat){
			this.sender.sendMessage(dat);
		}

		__proto.sendMessageResult=function(dat){
			this.sender.sendMessageResult(dat);
		}

		__proto.receiveMessage=function(dat){
			this.sender.receiveMessage(dat);
		}

		__proto.onTeamReady=function(dat){
			this.sender.onTeamReady(dat);
		}

		__proto.onOtherUserBasicDataChange=function(dat){
			var u=new UserBasicDataInfo$1();
			u.setData(dat.userInfo);
			this.sender.onOtherUserBasicDataChange(u);
		}

		__proto.getRandomTeamList=function(type,count){
			this.sender.getRandomTeamList(type,count);
		}

		__proto.getExtraTeamList=function(type,count,exclude){
			this.sender.getExtraTeamList(type,count,exclude);
		}

		__proto.updateTeam=function(displayInList,payload){
			this.sender.updateTeam(displayInList,payload);
		}

		__proto.refreshTeamInfo=function(teamIdList){
			this.sender.refreshTeamInfo(teamIdList);
		}

		__proto.onGotRandomTeamList=function(dat){
			for (var i=0;i < dat.list.length;i++){
				var u=new TeamUserBasicDataInfo$1();
				u.setData(dat.list[i].creator);
				dat.list[i].creator=u;
			}
			this.sender.onGotRandomTeamList(dat);
		}

		__proto.onGotExtraTeamList=function(dat){
			for (var i=0;i < dat.list.length;i++){
				var u=new TeamUserBasicDataInfo$1();
				u.setData(dat.list[i].creator);
				dat.list[i].creator=u;
			}
			this.sender.onGotExtraTeamList(dat);
		}

		__proto.onTeamUpdated=function(dat){
			this.sender.onTeamUpdated(dat);
		}

		__proto.onTeamInfoRefreshed=function(dat){
			for (var i=0;i < dat.list.length;i++){
				var u=new TeamUserBasicDataInfo$1();
				u.setData(dat.list[i].creator);
				dat.list[i].creator=u;
			}
			this.sender.onTeamInfoRefreshed(dat);
		}

		__proto.authCode=function(code){
			this._authCode=code;
			this.game.authCode=true;
			this.game.onGotRouter(this.game.config.routerAddr);
		}

		__proto.sendAuthCode=function(){
			this.sender.authCode(this._authCode);
		}

		__getset(0,__proto,'Union',function(){
			return this.union;
		});

		User._randomNamePool=[];
		return User;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class logic.user.UserGameDataInfo
	var UserGameDataInfo$1=(function(){
		function UserGameDataInfo(){
			this.F1=0;
			this.F2=0;
			this.F3=0;
			this.F4=0;
			this.F5=0;
			this.F6=0;
			this.F7=0;
		}

		__class(UserGameDataInfo,'logic.user.UserGameDataInfo',null,'UserGameDataInfo$1');
		var __proto=UserGameDataInfo.prototype;
		__proto.setData=function(_data){
			var arr=_data.split(':');
			this.F1=arr[0];
			this.F2=arr[1];
			this.F3=arr[2];
			this.F4=arr[3];
			this.F5=arr[4];
			this.F6=arr[5];
			this.F7=arr[6];
		}

		return UserGameDataInfo;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class logic.user.UserInfo
	var UserInfo$1=(function(){
		function UserInfo(user){
			this.UnionId=null;
			this.UserName=null;
			this.UserId=0;
			this.OpenId=null;
			this.tm=0;
			var arr=user.logindt.split(',');
			this.UserId=parseInt(arr[0]);
			this.UserName=arr[1];
			this.tm=user.tm;
		}

		__class(UserInfo,'logic.user.UserInfo',null,'UserInfo$1');
		return UserInfo;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class logic.user.UserMessageSender
	var UserMessageSender$1=(function(){
		function UserMessageSender(gameId){
			this.gameId=0;
			this.game=null;
			this.gameId=gameId;
			this.game=GameManager.GetGame(gameId);
		}

		__class(UserMessageSender,'logic.user.UserMessageSender',null,'UserMessageSender$1');
		var __proto=UserMessageSender.prototype;
		__proto.Login=function(username,token,source,referee,extendParams){
			this.socket.send(UserMessageSender._urlPrefix+'login',{
				gameid:this.gameId,
				username:username,
				password:token,
				source:source,
				unionid:Method.getUnionId(),
				referee:referee,
				extendParams:extendParams
			});
		}

		__proto.authCode=function(code){
			this.socket.send(UserMessageSender._urlPrefix+'authCode',{
				gameId:this.gameId,
				unionid:Method.getUnionId(),
				code:code
			});
		}

		__proto.onBasicDataChg=function(_data){
			this.game.hallMessager.send(UserMessageSender._urlPrefix+'basicDataChg',_data);
		}

		__proto.onGameDataChg=function(_data){
			this.game.hallMessager.send(UserMessageSender._urlPrefix+'gameDataChg',_data);
		}

		__proto.updateBasicData=function(nkname,gender,avtor){
			var data=new Object();
			if (nkname){
				data['nkname']=nkname;
			};
			var gend=gender;
			if (gend!=null && !isNaN(gend)){
				data['gender']=gend;
			};
			var avt=avtor;
			if (avt!=null && !isNaN(avt)){
				data['avtor']=avtor;
			}
			this.socket.send('room.'+UserMessageSender._urlPrefix+'updateBasicData',data);
		}

		__proto.onUserError=function(error){
			this.game.hallMessager.send(UserMessageSender._urlPrefix+'error',error);
		}

		__proto.getRandomName=function(){
			this.socket.send('room.'+UserMessageSender._urlPrefix+'getRandomName',{});
		}

		__proto.sendRandomName=function(nkname){
			this.game.hallMessager.send(UserMessageSender._urlPrefix+'randomname',nkname);
		}

		__proto.onGotMyRanks=function(dat){
			this.game.hallMessager && this.game.hallMessager.send(UserMessageSender._urlPrefix+'onMyRanksChg',dat);
		}

		__proto.addMoney=function(money){
			this.socket.send('room.'+UserMessageSender._urlPrefix+'addMoney',{
				money:money
			});
		}

		__proto.onLoginDataChg=function(user){
			this.game.hallMessager && this.game.hallMessager.send(UserMessageSender._urlPrefix+'onLoginDataChg',user);
		}

		__proto.getReward=function(rewardIdArray){
			this.game.socket.send('room.'+UserMessageSender._urlPrefix+'getReward',{
				rewardId:rewardIdArray
			});
		}

		__proto.getRewardData=function(rewardIdArray){
			this.game.socket.send('room.'+UserMessageSender._urlPrefix+'getRewardData',{
				rewardId:rewardIdArray
			});
		}

		__proto.getGameData=function(dat){
			this.game.socket.send('room.'+UserMessageSender._urlPrefix+'getGameData',dat);
		}

		__proto.getGameDataResult=function(dat){
			this.game.hallMessager.send(UserMessageSender._urlPrefix+'getGameDataResult',dat);
		}

		__proto.onGotRewardData=function(dat){
			this.game.hallMessager.send(UserMessageSender._urlPrefix+'onGotRewardData',dat);
		}

		__proto.setClientObject=function(dat){
			this.socket.send('room.'+UserMessageSender._urlPrefix+'setClientObject',{
				'value':dat
			});
		}

		__proto.onGotClientObjectResult=function(dat){
			this.game.hallMessager.send(UserMessageSender._urlPrefix+'onGotClientObjectResult',dat);
		}

		__proto.getLastRoom=function(){
			this.game.socket.send('room.'+UserMessageSender._urlPrefix+'getLastRoom',{});
		}

		__proto.onGotLastRoom=function(roomId){
			this.game.hallMessager.send(UserMessageSender._urlPrefix+'onGotLastRoom',roomId);
		}

		__proto.searchByUId=function(targetId){
			this.socket.send('room.'+UserMessageSender._urlPrefix+'searchByUId',{
				targetId:targetId
			});
		}

		__proto.searchByUIdResult=function(dat){
			this.game.hallMessager.send(UserMessageSender._urlPrefix+'searchByUIdResult',dat);
		}

		__proto.createTeam=function(type,displayInList){
			this.socket.send('room.'+UserMessageSender._urlPrefix+'createTeam',{
				type:type,
				displayInList:displayInList?1:0
			});
		}

		__proto.leaveTeam=function(){
			this.socket.send('room.'+UserMessageSender._urlPrefix+'leaveTeam',{
			});
		}

		__proto.joinTeam=function(team,payload){
			this.socket.send('room.'+UserMessageSender._urlPrefix+'joinTeam',{
				team:team,
				payload:payload
			});
		}

		__proto.inviteTeam=function(toUserId,payload){
			this.socket.send('room.'+UserMessageSender._urlPrefix+'inviteTeam',{
				to:toUserId,
				payload:payload
			});
		}

		__proto.teamCreated=function(dat){
			this.game.hallMessager.send(UserMessageSender._urlPrefix+'teamCreated',dat);
		}

		__proto.onTeamJoined=function(dat){
			this.game.hallMessager.send(UserMessageSender._urlPrefix+'onTeamJoined',dat);
		}

		__proto.onTeamLeft=function(dat){
			this.game.hallMessager.send(UserMessageSender._urlPrefix+'onTeamLeft',dat);
		}

		__proto.onTeamInvite=function(dat){
			this.game.hallMessager.send(UserMessageSender._urlPrefix+'onTeamInvite',dat);
		}

		__proto.teamPlay=function(){
			this.socket.send('room.'+UserMessageSender._urlPrefix+'teamPlay',{});
		}

		__proto.kickTeam=function(toUserId){
			this.socket.send('room.'+UserMessageSender._urlPrefix+'kickTeam',{
				to:toUserId
			});
		}

		__proto.queryByOpenId=function(openIds){
			this.socket.send('room.'+UserMessageSender._urlPrefix+'queryByOpenId',{openIds:openIds});
		}

		__proto.queryByOpenIdResult=function(dat){
			this.game.hallMessager.send(UserMessageSender._urlPrefix+'queryByOpenIdResult',dat);
		}

		__proto.attention=function(userIds){
			this.socket.send('room.'+UserMessageSender._urlPrefix+'attention',{userIds:userIds});
		}

		__proto.attentionResult=function(dat){
			this.game.hallMessager.send(UserMessageSender._urlPrefix+'attentionResult',dat);
		}

		__proto.sendMessage=function(dat){
			this.socket.send('room.'+UserMessageSender._urlPrefix+'sendMessage',dat);
		}

		__proto.inattention=function(userIds){
			this.socket.send('room.'+UserMessageSender._urlPrefix+'inattention',{userIds:userIds});
		}

		__proto.inattentionResult=function(dat){
			this.game.hallMessager.send(UserMessageSender._urlPrefix+'inattentionResult',dat);
		}

		__proto.sendMessageResult=function(dat){
			this.game.hallMessager.send(UserMessageSender._urlPrefix+'sendMessageResult',dat);
		}

		__proto.receiveMessage=function(dat){
			this.game.hallMessager.send(UserMessageSender._urlPrefix+'receiveMessage',dat);
		}

		__proto.teamReady=function(ready){
			this.socket.send('room.'+UserMessageSender._urlPrefix+'teamReady',{
				ready:ready?1:0
			});
		}

		__proto.onTeamReady=function(dat){
			this.game.hallMessager.send(UserMessageSender._urlPrefix+'onTeamReady',dat);
		}

		__proto.onOtherUserBasicDataChange=function(dat){
			this.game.hallMessager.send(UserMessageSender._urlPrefix+'onOtherUserBasicDataChange',dat);
		}

		__proto.getRandomTeamList=function(type,count){
			this.socket.send('room.'+UserMessageSender._urlPrefix+'getRandomTeamList',{
				type:type,
				count:count
			});
		}

		__proto.getExtraTeamList=function(type,count,exclude){
			this.socket.send('room.'+UserMessageSender._urlPrefix+'getExtraTeamList',{
				type:type,
				count:count,
				exclude:exclude.join(',')
			});
		}

		__proto.updateTeam=function(displayInList,payload){
			var params={};
			if (displayInList >=0){
				params['displayInList']=displayInList;
			}
			if (payload !=null){
				params['payload']=payload;
			}
			this.socket.send('room.'+UserMessageSender._urlPrefix+'updateTeam',params);
		}

		__proto.refreshTeamInfo=function(teamIdList){
			this.socket.send('room.'+UserMessageSender._urlPrefix+'refreshTeamInfo',{
				teamidlist:teamIdList.join(',')
			});
		}

		__proto.onGotRandomTeamList=function(dat){
			this.game.hallMessager.send(UserMessageSender._urlPrefix+'onGotRandomTeamList',dat);
		}

		__proto.onGotExtraTeamList=function(dat){
			this.game.hallMessager.send(UserMessageSender._urlPrefix+'onGotExtraTeamList',dat);
		}

		__proto.onTeamUpdated=function(dat){
			this.game.hallMessager.send(UserMessageSender._urlPrefix+'onTeamUpdated',dat);
		}

		__proto.onTeamInfoRefreshed=function(dat){
			this.game.hallMessager.send(UserMessageSender._urlPrefix+'onTeamInfoRefreshed',dat);
		}

		__getset(0,__proto,'socket',function(){
			return this.game.socket;
		});

		UserMessageSender._urlPrefix='user.';
		return UserMessageSender;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class logic.user.UserSvrInfo
	var UserSvrInfo=(function(){
		function UserSvrInfo(){
			this.session=null;
			this.gameid=0;
			this.logindt=null;
			this.tm=0;
		}

		__class(UserSvrInfo,'logic.user.UserSvrInfo');
		return UserSvrInfo;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class model.CustomUIInfo
	var CustomUIInfo=(function(){
		function CustomUIInfo(){
			this.ui=null;
			this.res=null;
		}

		__class(CustomUIInfo,'model.CustomUIInfo');
		return CustomUIInfo;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class model.ErrorInfo
	var ErrorInfo$1=(function(){
		function ErrorInfo(){
			this.errorCode=0;
			this.errorMessage=null;
		}

		__class(ErrorInfo,'model.ErrorInfo',null,'ErrorInfo$1');
		return ErrorInfo;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class model.HostInfo
	var HostInfo=(function(){
		function HostInfo(){
			this.ip=null;
			this.port=0;
			this.port_ssl=0;
		}

		__class(HostInfo,'model.HostInfo');
		return HostInfo;
	})()


	/**
	*...
	*@author 贾艳昭
	*/
	//class model.MsgInfo
	var MsgInfo$1=(function(){
		function MsgInfo(url,params){
			this.url=null;
			this.target=null;
			this.params=null;
			this.cache=true;
			this.url=url;
			this.params=params;
		}

		__class(MsgInfo,'model.MsgInfo',null,'MsgInfo$1');
		return MsgInfo;
	})()


	/**
	*...
	*@author luohuantao
	*/
	//class statm.StatID
	var StatID=(function(){
		//充值类埋点相关---------------------------------------------------------------
		function StatID(){}
		__class(StatID,'statm.StatID');
		StatID.fight_exitonfight="exitonfight";
		StatID.login_fromdesktop="v2_loginfromdesktop";
		StatID.v2_jumpstore="v2_jumpstore";
		StatID.v2_opmodebygrade="v2_opmodebygrade";
		StatID.v2_openpage="v2_openpage";
		StatID.viewType_1=1;
		StatID.viewType_2=2;
		StatID.viewType_3=3;
		StatID.viewType_4=4;
		StatID.viewType_5=5;
		StatID.viewType_6=6;
		StatID.viewType_7=7;
		StatID.viewType_8=8;
		StatID.viewType_9=9;
		StatID.viewType_10=10;
		StatID.viewType_11=11;
		StatID.viewType_12=12;
		StatID.viewType_13=13;
		StatID.viewType_14=14;
		StatID.viewType_15=15;
		StatID.viewType_16=16;
		StatID.viewType_17=17;
		StatID.v2_send_desktop="v2_send_desktop";
		StatID.v2_share="v2_share";
		StatID.v2_sharenewuser="v2_sharenewuser";
		StatID.v2_sharesucavg="v2_sharesucavg";
		StatID.v2_sharesucfriends="v2_sharesucfriends";
		StatID.duanwei="duanwei";
		StatID.geren="geren";
		StatID.zudui="zudui";
		StatID.menuShare="menuShare";
		StatID.zhFriend="zhFriend";
		StatID.v2_tbs="v2_tbs";
		StatID.ty="ty";
		StatID.v2_clickmenu="v2_clickmenu";
		StatID.v2_timedbag="v2_timedbag";
		StatID.v2_payment_recharge_gear="v2_payment_recharge_gear";
		StatID.v2_payment_bargainprice_gifts="v2_payment_bargainprice_gifts";
		StatID.v2_payment_first_charge="v2_payment_first_charge";
		__static(StatID,
		['s1_9',function(){return this.s1_9=["1.9","大厅消息初始化完毕，请求自己是不是新号"];},'s2_0',function(){return this.s2_0=["2.0","服务器发来消息，判断角色是新手"];},'s2_0_1',function(){return this.s2_0_1=["2.0.1","服务器发来消息，判断角色不是新手，打开大厅"];},'s2_1_1',function(){return this.s2_1_1=["2.1.1","初始化教学模式"];},'s2_1_2',function(){return this.s2_1_2=["2.1.2","初始化Player以及战斗消息管理器"];},'s2_1_3',function(){return this.s2_1_3=["2.1.3","开始加载-教学模式配置和资源"];},'s2_2_1',function(){return this.s2_2_1=["2.2.1","打开新手加载页面"];},'s2_2_2',function(){return this.s2_2_2=["2.2.2","加载完成-教学模式配置和资源"];},'s2_3_1',function(){return this.s2_3_1=["2.3.1","开始加载-教学模式默认皮肤资源"];},'s2_3_2',function(){return this.s2_3_2=["2.3.2","加载完成-教学模式默认皮肤资源"];},'s2_4_1',function(){return this.s2_4_1=["2.4.1","加载完成-教学模式地图相关资源和配置"];},'s3_1_1',function(){return this.s3_1_1=["3.1.1","关闭新手加载页面"];},'s4_1_1',function(){return this.s4_1_1=["4.1.1","提示框：欢迎"];},'s4_1_2',function(){return this.s4_1_2=["4.1.2","提示框：移动"];},'s4_2_1',function(){return this.s4_2_1=["4.2.1","第1段移动"];},'s4_2_2',function(){return this.s4_2_2=["4.2.2","第2段移动"];},'s4_3_1',function(){return this.s4_3_1=["4.3.3","新手关结束，显示战斗结束页面"];},'s4_3_2',function(){return this.s4_3_2=["4.3.4","新手关结束，战斗结束页面点击"];},'s4_3_6',function(){return this.s4_3_6=["4.3.6","新手关结束，领奖台界面弹出用户数"];},'s4_3_7',function(){return this.s4_3_7=["4.3.7","新手关结束，领奖台界面点击按钮用户数"];},'s4_3_8',function(){return this.s4_3_8=["4.3.8","新手关结束，点击继续"];},'s4_3_9',function(){return this.s4_3_9=["4.3.9","新手关结束，返回大厅"];},'s4_4_1',function(){return this.s4_4_1=["4.4.1","第一场自由战"];},'s4_5_1',function(){return this.s4_5_1=["4.5.1","第一场组队"];},'s100_0_0',function(){return this.s100_0_0=['100.0.0',"新手首次进入大厅统计"];},'s4_6_1_0',function(){return this.s4_6_1_0=['4.6.1.0','正式局_第一局_时长统计0'];},'s4_6_1_1',function(){return this.s4_6_1_1=['4.6.1.1','正式局_第一局_时长统计1'];},'s4_6_1_2',function(){return this.s4_6_1_2=['4.6.1.2','正式局_第一局_时长统计2'];},'s4_6_2',function(){return this.s4_6_2=['4.6.2','正式局_第一局_战斗结束界面弹出用户数'];},'s4_6_3',function(){return this.s4_6_3=['4.6.3','正式局_第一局_点击关闭结束战斗界面用户数'];},'s4_6_4',function(){return this.s4_6_4=['4.6.4','正式局_第一局_领奖台界面弹出用户数'];},'s4_6_5',function(){return this.s4_6_5=['4.6.5','正式局_第一局_领奖台界面点击按钮用户数'];},'s4_6_6',function(){return this.s4_6_6=['4.6.6','正式局_第一局_评价界面弹出用户数'];},'s4_6_7',function(){return this.s4_6_7=['4.6.7','正式局_第一局_评价界面点击按钮用户数'];},'s4_7_1_0',function(){return this.s4_7_1_0=['4.7.1.0','正式局_第二局_时长统计0'];},'s4_7_1_1',function(){return this.s4_7_1_1=['4.7.1.1','正式局_第二局_时长统计1'];},'s4_7_1_2',function(){return this.s4_7_1_2=['4.7.1.2','正式局_第二局_时长统计2'];},'s4_7_2',function(){return this.s4_7_2=['4.7.2','正式局_第二局_战斗结束界面弹出用户数'];},'s4_7_3',function(){return this.s4_7_3=['4.7.3','正式局_第二局_点击关闭结束战斗界面用户数'];},'s4_7_4',function(){return this.s4_7_4=['4.7.4','正式局_第二局_领奖台界面弹出用户数'];},'s4_7_5',function(){return this.s4_7_5=['4.7.5','正式局_第二局_领奖台界面点击按钮用户数'];},'s4_7_6',function(){return this.s4_7_6=['4.7.6','正式局_第二局_评价界面弹出用户数'];},'s4_7_7',function(){return this.s4_7_7=['4.7.7','正式局_第二局_评价界面点击按钮用户数'];},'s4_7_8',function(){return this.s4_7_8=['4.7.8','正式局_第二局_女神界面弹出用户数'];},'s4_7_9',function(){return this.s4_7_9=['4.7.9','正式局_第二局_女神界面点击“领取并保存”用户数'];},'s4_8_1_0',function(){return this.s4_8_1_0=['4.8.1.0','正式局_第三局_时长统计0'];},'s4_8_1_1',function(){return this.s4_8_1_1=['4.8.1.1','正式局_第三局_时长统计1'];},'s4_8_1_2',function(){return this.s4_8_1_2=['4.8.1.2','正式局_第三局_时长统计2'];},'s4_8_2',function(){return this.s4_8_2=['4.8.2','正式局_第三局_战斗结束界面弹出用户数'];},'s4_8_3',function(){return this.s4_8_3=['4.8.3','正式局_第三局_点击关闭结束战斗界面用户数'];},'s4_8_4',function(){return this.s4_8_4=['4.8.4','正式局_第三局_领奖台界面弹出用户数'];},'s4_8_5',function(){return this.s4_8_5=['4.8.5','正式局_第三局_领奖台界面点击按钮用户数'];},'s4_8_6',function(){return this.s4_8_6=['4.8.6','正式局_第三局_评价界面弹出用户数'];},'s4_8_7',function(){return this.s4_8_7=['4.8.7','正式局_第三局_评价界面点击按钮用户数'];},'s4_9_1_0',function(){return this.s4_9_1_0=['4.9.1.0','正式局_第四局_时长统计0'];},'s4_9_1_1',function(){return this.s4_9_1_1=['4.9.1.1','正式局_第四局_时长统计1'];},'s4_9_1_2',function(){return this.s4_9_1_2=['4.9.1.2','正式局_第四局_时长统计2'];},'s4_9_2',function(){return this.s4_9_2=['4.9.2','正式局_第四局_战斗结束界面弹出用户数'];},'s4_9_3',function(){return this.s4_9_3=['4.9.3','正式局_第四局_点击关闭结束战斗界面用户数'];},'s4_9_4',function(){return this.s4_9_4=['4.9.4','正式局_第四局_领奖台界面弹出用户数'];},'s4_9_5',function(){return this.s4_9_5=['4.9.5','正式局_第四局_领奖台界面点击按钮用户数'];},'s4_9_6',function(){return this.s4_9_6=['4.9.6','正式局_第四局_评价界面弹出用户数'];},'s4_9_7',function(){return this.s4_9_7=['4.9.7','正式局_第四局_评价界面点击按钮用户数'];},'s4_10_1_0',function(){return this.s4_10_1_0=['4.10.1.0','正式局_第五局_时长统计0'];},'s4_10_1_1',function(){return this.s4_10_1_1=['4.10.1.1','正式局_第五局_时长统计1'];},'s4_10_1_2',function(){return this.s4_10_1_2=['4.10.1.2','正式局_第五局_时长统计2'];},'s4_10_2',function(){return this.s4_10_2=['4.10.2','正式局_第四局_战斗结束界面弹出用户数'];},'s4_10_3',function(){return this.s4_10_3=['4.10.3','正式局_第四局_点击关闭结束战斗界面用户数'];},'s4_10_4',function(){return this.s4_10_4=['4.10.4','正式局_第四局_领奖台界面弹出用户数'];},'s4_10_5',function(){return this.s4_10_5=['4.10.5','正式局_第四局_领奖台界面点击按钮用户数'];},'s4_10_6',function(){return this.s4_10_6=['4.10.6','正式局_第四局_评价界面弹出用户数'];},'s4_10_7',function(){return this.s4_10_7=['4.10.7','正式局_第四局_评价界面点击按钮用户数'];},'s4_11_1_0',function(){return this.s4_11_1_0=['4.11.1.0','正式局_第六局_时长统计0'];},'s4_11_1_1',function(){return this.s4_11_1_1=['4.11.1.1','正式局_第六局_时长统计1'];},'s4_11_1_2',function(){return this.s4_11_1_2=['4.11.1.2','正式局_第六局_时长统计2'];},'s4_11_2',function(){return this.s4_11_2=['4.11.2','正式局_第六局_战斗结束界面弹出用户数'];},'s4_11_3',function(){return this.s4_11_3=['4.11.3','正式局_第六局_点击关闭结束战斗界面用户数'];},'s4_11_4',function(){return this.s4_11_4=['4.11.4','正式局_第六局_领奖台界面弹出用户数'];},'s4_11_5',function(){return this.s4_11_5=['4.11.5','正式局_第六局_领奖台界面点击按钮用户数'];},'s4_11_6',function(){return this.s4_11_6=['4.11.6','正式局_第六局_评价界面弹出用户数'];},'s4_11_7',function(){return this.s4_11_7=['4.11.7','正式局_第六局_评价界面点击按钮用户数'];}
		]);
		return StatID;
	})()


	/**
	*埋点统计 / 错误统计
	*<br>隔天查看统计信息
	*<br>http://data.lmzy.layabox.com/show/gameAct.html?gameId=10000
	*@author xiaosong
	*/
	//class statm.StatManager
	var StatManager=(function(){
		function StatManager(){
			this.url="//snowlog.sh.1251586634.clb.myqcloud.com/wechatlog.php?";
			this.testUrl="//statistics.devopen.layabox.com/open/log?";
			this.releaseUrl="//statistics.releaseopen.layabox.com/open/log?";
			this.loginUrl="event=login";
			this.payUrl="event=pay";
			this.customUrl="event=custom";
		}

		__class(StatManager,'statm.StatManager');
		var __proto=StatManager.prototype;
		/**
		*发送埋点
		*@param params 参数
		*/
		__proto.send=function(params){
			if (StatManager.isUse==false)return;
			var _httprequest=new HttpRequest();
			params+="&loc_sent_time="+NotifyCenter.I.getServerTimer();
			var _url;
			if (StatManager.isDebug==0)_url=this.url;
			else if(StatManager.isDebug==1)_url=this.testUrl;
			else if (StatManager.isDebug==2)_url=this.releaseUrl;
			if (SnowUtils.isSSL){
				_url="https:"+_url;
			}
			else{
				_url="http:"+_url;
			}
			Log_Test.debug(1,"埋点url  :  "+_url+params);
			_httprequest.on("complete",this,this._onRequestComplete,[_httprequest]);
			_httprequest.on("error",this,this._onRequestError,[_httprequest]);
			_httprequest.send(_url+params);
		}

		/*params,'post','text',['Content-Type','application/x-www-form-urlencoded']*/
		__proto._onRequestError=function(_httprequest,evt){
			var data1=JSON.parse(_httprequest.data);
			Log_Test.error("埋点 Error ："+evt);
			this._removeHttprequest(_httprequest);
		}

		__proto._onRequestComplete=function(_httprequest,evt){
			var data1=JSON.parse(_httprequest.data);
			this._removeHttprequest(_httprequest);
		}

		__proto._removeHttprequest=function(_httprequest){
			_httprequest.off("complete",this,this._onRequestComplete);
			_httprequest.off("error",this,this._onRequestError);
			_httprequest=null;
		}

		/**
		*自定义事件统计
		*@param data
		*/
		__proto.addCustom=function(dat){
			if (StatManager.isUse==false)return;
			if (dat.event.indexOf("v2_")==-1)return;
			var info=NotifyCenter.I.Query("on_GotLoginData");
			dat.userid=info.UserId;
			if (StatManager.isDebug==1){
				dat.sp_id="-10";
				dat.game_id=9999+"";
				StatManager.OWNER_ID=10000+"";
				}else if(StatManager.isDebug==2){
				dat.sp_id="-10";
				dat.game_id=10000+"";
				StatManager.OWNER_ID=10000+"";
			}
			else{
				dat.sp_id=info.UnionId;
				dat.game_id=CrazySnowball.gameId+"";
			}
			CrazySnowball.addStat(dat.event,dat);
			var params=this.customUrl+"&writter=all&loc_event_time="+NotifyCenter.I.getServerTimer()+"&owner_id="+StatManager.OWNER_ID+"&content="+dat.encodeData();
			this.send(params);
		}

		/**
		*添加新手教学埋点
		*@param dat
		*@param isTeShu 新手进入大厅后还要统计自由站跟团战，这里加个变量特殊处理下
		*/
		__proto.addTeach=function(dat,isTeShu){
			(isTeShu===void 0)&& (isTeShu=false);
			if(!isTeShu){
				if (RoleCenter.I.nowStep !=enumUserEnterGameType.newUser)return;
			};
			var newDat=new TeachAction();
			newDat.event="v2_inittreating";
			newDat.level=dat.p0;
			this.addCustom(newDat);
			this.onTlogTongJi(dat.p0);
		}

		/**新手用户首次进入大厅**/
		__proto.onTeachToMenuList=function(){
			var newDat=new TeachAction();
			newDat.event="v2_newinhall";
			this.addCustom(newDat);
			this.onTlogTongJi(StatID.s100_0_0[0]);
		}

		/**
		*统计大富翁0分享打开页面类型统计
		*@param type
		*/
		__proto.onTongJianSpinWheelZeroShareNum=function(type){
			var newDat=new WheelBase();
			newDat.event="v2_wheel_nonumber";
			newDat.type=type;
			this.addCustom(newDat);
		}

		/**
		*tlog日志统计
		*@param id
		*/
		__proto.onTlogTongJi=function(idStr){
			if (!statm.StatManager.isUse)return;
			var cmds=new RequestGuideFlow();
			cmds.iGuideID=parseInt(idStr.replace(/\./g,''));
			HallApp.notify(cmds);
		}

		/**
		*步骤统计数据
		*@param step
		*@return
		*/
		__proto.getStatData=function(step){
			var statTeach=new NStatTeach();
			statTeach.p0=step;
			statTeach.time=Browser.now();
			return statTeach;
		}

		/**
		*页面打开次数统计
		*@param viewType 枚举 StatID.viewType_
		*/
		__proto.v2_openpage=function(viewType){
			var sop=Pool.getItemByClass("StatOpenPage",StatOpenPage);
			sop.showpage="show";
			sop.event="v2_openpage";
			sop.type=viewType;
			this.addCustom(sop);
			Pool.recover("StatOpenPage",sop);
		}

		/**
		*统计分享点分享次数和人数
		*@param fromType 分享类型
		*@param count 预留
		*/
		__proto.v2_share=function(fromType,showcount){
			(showcount===void 0)&& (showcount="show");
			var st=Pool.getItemByClass("StatShare",StatShare);
			st.event="v2_share";
			st.type=fromType;
			st.showcount=showcount;
			this.addCustom(st);
			Pool.recover("StatShare",st);
			var arr=StatManager.inviteMap[fromType];
			if (arr){
				SnowUtils.reportTlogReason(arr[0],arr[1]);
			}
		}

		/**
		*分享点新增用户统计
		*@param fromType
		*@param who
		*/
		__proto.v2_sharenewuser=function(fromType,userid02){
			var st=Pool.getItemByClass("StatShareNewUser",StatShareNewUser);
			st.event="v2_sharenewuser";
			st.type=fromType;
			st.userid02=userid02;
			this.addCustom(st);
			Pool.recover("StatShareNewUser",st);
		}

		/**
		*分享活动人均成功邀请好友数
		*@param userid
		*@param userid02
		*/
		__proto.v2_sharesucavg=function(userid02){
			var st=Pool.getItemByClass("StatShareHd",StatShareHd);
			st.event="v2_sharesucavg";
			st.userid02=userid02;
			this.addCustom(st);
			Pool.recover("StatShareHd",st);
		}

		/**
		*分享活动成功邀请好友数分布
		*@param userid
		*@param userid02
		*/
		__proto.v2_sharesucfriends=function(userid02){
			var st=Pool.getItemByClass("StatShareHd",StatShareHd);
			st.event="v2_sharesucfriends";
			st.userid02=userid02;
			this.addCustom(st);
			Pool.recover("StatShareHd",st);
		}

		/**
		*各充值档位充值人数分布
		*@param type
		*/
		__proto.v2_payment_recharge_gear=function(type){
			var st=Pool.getItemByClass("StatBuy",StatBuy);
			st.event="v2_payment_recharge_gear";
			st.type=type;
			this.addCustom(st);
			Pool.recover("StatBuy",st);
		}

		/**
		*商城特价礼包购买人数分布
		*@param type
		*/
		__proto.v2_payment_bargainprice_gifts=function(type){
			var st=Pool.getItemByClass("StatBuy",StatBuy);
			st.event="v2_payment_bargainprice_gifts";
			st.type=type;
			this.addCustom(st);
			Pool.recover("StatBuy",st);
		}

		/**
		*首冲购买人数
		*/
		__proto.v2_payment_first_charge=function(type){
			(type===void 0)&& (type=60);
			var st=Pool.getItemByClass("statBase",statBase);
			st.event="v2_payment_first_charge";
			this.addCustom(st);
			Pool.recover("statBase",st);
		}

		/**
		*发送桌面成功领取奖励人数
		*/
		__proto.v2_send_desktop=function(){
			var st=Pool.getItemByClass("statBase",statBase);
			st.event="v2_send_desktop";
			this.addCustom(st);
			Pool.recover("statBase",st);
		}

		/**
		*请求公告内容
		*@param url
		*@param callBack
		*/
		__proto.requestData=function(url,callBack){
			if(StatManager.dataRequest==null){
				StatManager.dataRequest=new HttpRequest();
				StatManager.dataRequest.on("complete",this,this.onRequestComplete,[callBack]);
				StatManager.dataRequest.on("error",this,this.onRequestError,[callBack]);
			}
			StatManager.dataRequest.send(url,null,"get");
		}

		__proto.onRequestError=function(callBack,evt){
			callBack !=null && callBack.runWith([0]);
		}

		__proto.onRequestComplete=function(callBack,evt){
			var data1=JSON.parse(StatManager.dataRequest.data);
			callBack !=null && callBack.runWith([1,data1]);
			this.removeHttprequest();
		}

		__proto.removeHttprequest=function(){
			StatManager.dataRequest.off("complete",this,this.onRequestComplete);
			StatManager.dataRequest.off("error",this,this.onRequestError);
			StatManager.dataRequest=null;
		}

		/**
		*按钮点击事件
		*@param type //按钮类型
		*/
		__proto.v2_clickmenu=function(type){
			var st=Pool.getItemByClass("StatBtnClick",StatBtnClick);
			st.event="v2_clickmenu";
			st.type=type;
			this.addCustom(st);
			Pool.recover("StatBtnClick",st);
		}

		/**
		*限时礼包购买
		*/
		__proto.v2_timedbag=function(){
			var st=Pool.getItemByClass("statBase",statBase);
			st.event="v2_timedbag";
			this.addCustom(st);
			Pool.recover("statBase",st);
		}

		__getset(1,StatManager,'I',function(){
			if(StatManager._instance==null){
				StatManager.OWNER_ID=SnowUtils.getQueryString("gameid");
				StatManager._instance=new StatManager();
			}
			return StatManager._instance;
		});

		StatManager.isUse=false;
		StatManager.isDebug=1;
		StatManager._instance=null
		StatManager.OWNER_ID="";
		StatManager.dataRequest=null
		__static(StatManager,
		['inviteMap',function(){return this.inviteMap={
				"team3vepk":[101,10],
				"team3v3PiPei":[100,62],
				"playerpk":[100,421],
				"rankPK":[100,420],
				"rewardInfo":[100,417]
		};}

		]);
		return StatManager;
	})()


	/**
	*埋点自定义参数基类
	*@author luohuantao
	*/
	//class statm.vo.statBase
	var statBase=(function(){
		function statBase(){
			this.userid=0;
			this.event=null;
			this.sp_id=null;
			this.game_id=null;
		}

		__class(statBase,'statm.vo.statBase');
		var __proto=statBase.prototype;
		Laya.imps(__proto,{"laya.utils.IError":true})
		/**
		*<br> 将自己序列化
		*/
		__proto.encodeData=function(){
			return encodeURIComponent(JSON.stringify(this));
		}

		__proto.writeToObj=function(obj){
			obj.spid=this.sp_id;
			obj.user=this.userid;
		}

		return statBase;
	})()


	/**
	*Config 用于配置一些全局参数。如需更改，请在初始化引擎之前设置。
	*/
	//class Config
	var Config=(function(){
		function Config(){};
		__class(Config,'Config');
		Config.WebGLTextCacheCount=500;
		Config.atlasEnable=false;
		Config.showCanvasMark=false;
		Config.animationInterval=50;
		Config.isAntialias=false;
		Config.isAlpha=false;
		Config.premultipliedAlpha=true;
		Config.isStencil=true;
		Config.preserveDrawingBuffer=false;
		return Config;
	})()


	/**
	*<code>Graphics</code> 类用于创建绘图显示对象。Graphics可以同时绘制多个位图或者矢量图，还可以结合save，restore，transform，scale，rotate，translate，alpha等指令对绘图效果进行变化。
	*Graphics以命令流方式存储，可以通过cmds属性访问所有命令流。Graphics是比Sprite更轻量级的对象，合理使用能提高应用性能(比如把大量的节点绘图改为一个节点的Graphics命令集合，能减少大量节点创建消耗)。
	*@see laya.display.Sprite#graphics
	*/
	//class laya.display.Graphics
	var Graphics=(function(){
		function Graphics(){
			//this._sp=null;
			this._one=null;
			this._cmds=null;
			//this._vectorgraphArray=null;
			//this._graphicBounds=null;
			this._render=this._renderEmpty;
			if (Render.isConchNode){
				this._nativeObj=new _conchGraphics();;
				this.id=this._nativeObj.conchID;;
			}
		}

		__class(Graphics,'laya.display.Graphics');
		var __proto=Graphics.prototype;
		/**
		*<p>销毁此对象。</p>
		*/
		__proto.destroy=function(){
			this.clear();
			if (this._graphicBounds)this._graphicBounds.destroy();
			this._graphicBounds=null;
			this._vectorgraphArray=null;
			this._sp && (this._sp._renderType=0);
			this._sp=null;
		}

		/**
		*<p>清空绘制命令。</p>
		*@param recoverCmds 是否回收绘图指令
		*/
		__proto.clear=function(recoverCmds){
			(recoverCmds===void 0)&& (recoverCmds=false);
			if (recoverCmds){
				var tCmd=this._one;
				if (this._cmds){
					var i=0,len=this._cmds.length;
					for (i=0;i < len;i++){
						tCmd=this._cmds[i];
						if (tCmd && (tCmd.callee===Render._context._drawTexture || tCmd.callee===Render._context._drawTextureWithTransform)){
							tCmd[0]=null;
							Graphics._cache.push(tCmd);
						}
					}
					this._cmds.length=0;
					}else if (tCmd){
					if (tCmd && (tCmd.callee===Render._context._drawTexture || tCmd.callee===Render._context._drawTextureWithTransform)){
						tCmd[0]=null;
						Graphics._cache.push(tCmd);
					}
				}
				}else {
				this._cmds=null;
			}
			this._one=null;
			this._render=this._renderEmpty;
			this._sp && (this._sp._renderType &=~0x01);
			this._sp && (this._sp._renderType &=~0x200);
			this._repaint();
			if (this._vectorgraphArray){
				for (i=0,len=this._vectorgraphArray.length;i < len;i++){
					VectorGraphManager.getInstance().deleteShape(this._vectorgraphArray[i]);
				}
				this._vectorgraphArray.length=0;
			}
		}

		/**@private */
		__proto._clearBoundsCache=function(){
			if (this._graphicBounds)this._graphicBounds.reset();
		}

		/**@private */
		__proto._initGraphicBounds=function(){
			if (!this._graphicBounds){
				this._graphicBounds=new GraphicsBounds();
				this._graphicBounds._graphics=this;
			}
		}

		/**
		*@private
		*重绘此对象。
		*/
		__proto._repaint=function(){
			this._clearBoundsCache();
			this._sp && this._sp.repaint();
		}

		/**@private */
		__proto._isOnlyOne=function(){
			return !this._cmds || this._cmds.length===0;
		}

		/**
		*获取位置及宽高信息矩阵(比较耗CPU，频繁使用会造成卡顿，尽量少用)。
		*@param realSize （可选）使用图片的真实大小，默认为false
		*@return 位置与宽高组成的 一个 Rectangle 对象。
		*/
		__proto.getBounds=function(realSize){
			(realSize===void 0)&& (realSize=false);
			this._initGraphicBounds();
			return this._graphicBounds.getBounds(realSize);
		}

		/**
		*@private
		*@param realSize （可选）使用图片的真实大小，默认为false
		*获取端点列表。
		*/
		__proto.getBoundPoints=function(realSize){
			(realSize===void 0)&& (realSize=false);
			this._initGraphicBounds();
			return this._graphicBounds.getBoundPoints(realSize);
		}

		__proto._addCmd=function(a){
			this._cmds=this._cmds || [];
			a.callee=a.shift();
			this._cmds.push(a);
		}

		__proto.setFilters=function(fs){
			this._saveToCmd(Render._context._setFilters,fs);
		}

		/**
		*绘制纹理。
		*@param tex 纹理。
		*@param x （可选）X轴偏移量。
		*@param y （可选）Y轴偏移量。
		*@param width （可选）宽度。
		*@param height （可选）高度。
		*@param m （可选）矩阵信息。
		*@param alpha （可选）透明度。
		*/
		__proto.drawTexture=function(tex,x,y,width,height,m,alpha){
			(x===void 0)&& (x=0);
			(y===void 0)&& (y=0);
			(width===void 0)&& (width=0);
			(height===void 0)&& (height=0);
			(alpha===void 0)&& (alpha=1);
			if (!tex || alpha < 0.01)return null;
			if (!width)width=tex.sourceWidth;
			if (!height)height=tex.sourceHeight;
			if (alpha > 1){
				alpha=1;
			};
			var wRate=width / tex.sourceWidth;
			var hRate=height / tex.sourceHeight;
			width=tex.width *wRate;
			height=tex.height *hRate;
			if (tex.loaded && (width <=0 || height <=0))return null;
			x+=tex.offsetX *wRate;
			y+=tex.offsetY *hRate;
			this._sp && (this._sp._renderType |=0x200);
			if (Graphics._cache.length){
				var args=Graphics._cache.pop();
				args[0]=tex;
				args[1]=x;
				args[2]=y;
				args[3]=width;
				args[4]=height;
				args[5]=m;
				args[6]=alpha;
				}else {
				args=[tex,x,y,width,height,m,alpha];
			}
			args.callee=(m || alpha !=1)? Render._context._drawTextureWithTransform :Render._context._drawTexture;
			if (this._one==null && !m && alpha==1){
				this._one=args;
				this._render=this._renderOneImg;
				}else {
				this._saveToCmd(args.callee,args);
			}
			if (!tex.loaded){
				tex.once("loaded",this,this._textureLoaded,[tex,args]);
			}
			this._repaint();
			return args;
		}

		/**
		*@private 清理贴图并替换为最新的
		*@param tex
		*/
		__proto.cleanByTexture=function(tex,x,y,width,height){
			(width===void 0)&& (width=0);
			(height===void 0)&& (height=0);
			if (!tex)return this.clear();
			if (this._one && this._render===this._renderOneImg){
				if (!width)width=tex.sourceWidth;
				if (!height)height=tex.sourceHeight;
				var wRate=width / tex.sourceWidth;
				var hRate=height / tex.sourceHeight;
				width=tex.width *wRate;
				height=tex.height *hRate;
				x+=tex.offsetX *wRate;
				y+=tex.offsetY *hRate;
				this._one[0]=tex;
				this._one[1]=x;
				this._one[2]=y;
				this._one[3]=width;
				this._one[4]=height;
				}else {
				this.clear();
				tex && this.drawTexture(tex,x,y,width,height);
			}
		}

		/**
		*批量绘制同样纹理。
		*@param tex 纹理。
		*@param pos 绘制次数和坐标。
		*/
		__proto.drawTextures=function(tex,pos){
			if (!tex)return;
			this._saveToCmd(Render._context._drawTextures,[tex,pos]);
		}

		/**
		*用texture填充。
		*@param tex 纹理。
		*@param x X轴偏移量。
		*@param y Y轴偏移量。
		*@param width （可选）宽度。
		*@param height （可选）高度。
		*@param type （可选）填充类型 repeat|repeat-x|repeat-y|no-repeat
		*@param offset （可选）贴图纹理偏移
		*
		*/
		__proto.fillTexture=function(tex,x,y,width,height,type,offset){
			(width===void 0)&& (width=0);
			(height===void 0)&& (height=0);
			(type===void 0)&& (type="repeat");
			if (!tex)return;
			var args=[tex,x,y,width,height,type,offset || Point.EMPTY,{}];
			if (!tex.loaded){
				tex.once("loaded",this,this._textureLoaded,[tex,args]);
			}
			this._saveToCmd(Render._context._fillTexture,args);
		}

		__proto._textureLoaded=function(tex,param){
			param[3]=param[3] || tex.width;
			param[4]=param[4] || tex.height;
			this._repaint();
		}

		/**
		*@private
		*保存到命令流。
		*/
		__proto._saveToCmd=function(fun,args){
			this._sp && (this._sp._renderType |=0x200);
			if (this._one==null){
				this._one=args;
				this._render=this._renderOne;
				}else {
				this._sp && (this._sp._renderType &=~0x01);
				this._render=this._renderAll;
				(this._cmds || (this._cmds=[])).length===0 && this._cmds.push(this._one);
				this._cmds.push(args);
			}
			args.callee=fun;
			this._repaint();
			return args;
		}

		/**
		*设置剪裁区域，超出剪裁区域的坐标不显示。
		*@param x X 轴偏移量。
		*@param y Y 轴偏移量。
		*@param width 宽度。
		*@param height 高度。
		*/
		__proto.clipRect=function(x,y,width,height){
			this._saveToCmd(Render._context._clipRect,[x,y,width,height]);
		}

		/**
		*在画布上绘制文本。
		*@param text 在画布上输出的文本。
		*@param x 开始绘制文本的 x 坐标位置（相对于画布）。
		*@param y 开始绘制文本的 y 坐标位置（相对于画布）。
		*@param font 定义字号和字体，比如"20px Arial"。
		*@param color 定义文本颜色，比如"#ff0000"。
		*@param textAlign 文本对齐方式，可选值："left"，"center"，"right"。
		*/
		__proto.fillText=function(text,x,y,font,color,textAlign){
			this._saveToCmd(Render._context._fillText,[text,x,y,font || Font.defaultFont,color,textAlign]);
		}

		/**
		*在画布上绘制“被填充且镶边的”文本。
		*@param text 在画布上输出的文本。
		*@param x 开始绘制文本的 x 坐标位置（相对于画布）。
		*@param y 开始绘制文本的 y 坐标位置（相对于画布）。
		*@param font 定义字体和字号，比如"20px Arial"。
		*@param fillColor 定义文本颜色，比如"#ff0000"。
		*@param borderColor 定义镶边文本颜色。
		*@param lineWidth 镶边线条宽度。
		*@param textAlign 文本对齐方式，可选值："left"，"center"，"right"。
		*/
		__proto.fillBorderText=function(text,x,y,font,fillColor,borderColor,lineWidth,textAlign){
			this._saveToCmd(Render._context._fillBorderText,[text,x,y,font || Font.defaultFont,fillColor,borderColor,lineWidth,textAlign]);
		}

		/**
		*在画布上绘制文本（没有填色）。文本的默认颜色是黑色。
		*@param text 在画布上输出的文本。
		*@param x 开始绘制文本的 x 坐标位置（相对于画布）。
		*@param y 开始绘制文本的 y 坐标位置（相对于画布）。
		*@param font 定义字体和字号，比如"20px Arial"。
		*@param color 定义文本颜色，比如"#ff0000"。
		*@param lineWidth 线条宽度。
		*@param textAlign 文本对齐方式，可选值："left"，"center"，"right"。
		*/
		__proto.strokeText=function(text,x,y,font,color,lineWidth,textAlign){
			this._saveToCmd(Render._context._strokeText,[text,x,y,font || Font.defaultFont,color,lineWidth,textAlign]);
		}

		/**
		*设置透明度。
		*@param value 透明度。
		*/
		__proto.alpha=function(value){
			this._saveToCmd(Render._context._alpha,[value]);
		}

		/**
		*设置当前透明度。
		*@param value 透明度。
		*/
		__proto.setAlpha=function(value){
			this._saveToCmd(Render._context._setAlpha,[value]);
		}

		/**
		*替换绘图的当前转换矩阵。
		*@param mat 矩阵。
		*@param pivotX （可选）水平方向轴心点坐标。
		*@param pivotY （可选）垂直方向轴心点坐标。
		*/
		__proto.transform=function(matrix,pivotX,pivotY){
			(pivotX===void 0)&& (pivotX=0);
			(pivotY===void 0)&& (pivotY=0);
			this._saveToCmd(Render._context._transform,[matrix,pivotX,pivotY]);
		}

		/**
		*旋转当前绘图。(推荐使用transform，性能更高)
		*@param angle 旋转角度，以弧度计。
		*@param pivotX （可选）水平方向轴心点坐标。
		*@param pivotY （可选）垂直方向轴心点坐标。
		*/
		__proto.rotate=function(angle,pivotX,pivotY){
			(pivotX===void 0)&& (pivotX=0);
			(pivotY===void 0)&& (pivotY=0);
			this._saveToCmd(Render._context._rotate,[angle,pivotX,pivotY]);
		}

		/**
		*缩放当前绘图至更大或更小。(推荐使用transform，性能更高)
		*@param scaleX 水平方向缩放值。
		*@param scaleY 垂直方向缩放值。
		*@param pivotX （可选）水平方向轴心点坐标。
		*@param pivotY （可选）垂直方向轴心点坐标。
		*/
		__proto.scale=function(scaleX,scaleY,pivotX,pivotY){
			(pivotX===void 0)&& (pivotX=0);
			(pivotY===void 0)&& (pivotY=0);
			this._saveToCmd(Render._context._scale,[scaleX,scaleY,pivotX,pivotY]);
		}

		/**
		*重新映射画布上的 (0,0)位置。
		*@param x 添加到水平坐标（x）上的值。
		*@param y 添加到垂直坐标（y）上的值。
		*/
		__proto.translate=function(x,y){
			this._saveToCmd(Render._context._translate,[x,y]);
		}

		/**
		*保存当前环境的状态。
		*/
		__proto.save=function(){
			this._saveToCmd(Render._context._save,[]);
		}

		/**
		*返回之前保存过的路径状态和属性。
		*/
		__proto.restore=function(){
			this._saveToCmd(Render._context._restore,[]);
		}

		/**
		*@private
		*替换文本内容。
		*@param text 文本内容。
		*@return 替换成功则值为true，否则值为flase。
		*/
		__proto.replaceText=function(text){
			this._repaint();
			var cmds=this._cmds;
			if (!cmds){
				if (this._one && this._isTextCmd(this._one.callee)){
					if (this._one[0].toUpperCase)this._one[0]=text;
					else this._one[0].setText(text);
					return true;
				}
				}else {
				for (var i=cmds.length-1;i >-1;i--){
					if (this._isTextCmd(cmds[i].callee)){
						if (cmds[i][0].toUpperCase)cmds[i][0]=text;
						else cmds[i][0].setText(text);
						return true;
					}
				}
			}
			return false;
		}

		/**@private */
		__proto._isTextCmd=function(fun){
			return fun===Render._context._fillText || fun===Render._context._fillBorderText || fun===Render._context._strokeText;
		}

		/**
		*@private
		*替换文本颜色。
		*@param color 颜色。
		*/
		__proto.replaceTextColor=function(color){
			this._repaint();
			var cmds=this._cmds;
			if (!cmds){
				if (this._one && this._isTextCmd(this._one.callee)){
					this._one[4]=color;
					if (!this._one[0].toUpperCase)this._one[0].changed=true;
				}
				}else {
				for (var i=cmds.length-1;i >-1;i--){
					if (this._isTextCmd(cmds[i].callee)){
						cmds[i][4]=color;
						if (!cmds[i][0].toUpperCase)cmds[i][0].changed=true;
					}
				}
			}
		}

		/**
		*加载并显示一个图片。
		*@param url 图片地址。
		*@param x （可选）显示图片的x位置。
		*@param y （可选）显示图片的y位置。
		*@param width （可选）显示图片的宽度，设置为0表示使用图片默认宽度。
		*@param height （可选）显示图片的高度，设置为0表示使用图片默认高度。
		*@param complete （可选）加载完成回调。
		*/
		__proto.loadImage=function(url,x,y,width,height,complete){
			var _$this=this;
			(x===void 0)&& (x=0);
			(y===void 0)&& (y=0);
			(width===void 0)&& (width=0);
			(height===void 0)&& (height=0);
			var tex=Loader.getRes(url);
			if (tex)onloaded(tex);
			else Laya.loader.load(url,Handler.create(null,onloaded),null,"image");
			function onloaded (tex){
				if (tex){
					_$this.drawTexture(tex,x,y,width,height);
					if (complete !=null)complete.call(_$this._sp,tex);
				}
			}
		}

		/**
		*@private
		*/
		__proto._renderEmpty=function(sprite,context,x,y){}
		/**
		*@private
		*/
		__proto._renderAll=function(sprite,context,x,y){
			var cmds=this._cmds,cmd;
			for (var i=0,n=cmds.length;i < n;i++){
				(cmd=cmds[i]).callee.call(context,x,y,cmd);
			}
		}

		/**
		*@private
		*/
		__proto._renderOne=function(sprite,context,x,y){
			this._one.callee.call(context,x,y,this._one);
		}

		/**
		*@private
		*/
		__proto._renderOneImg=function(sprite,context,x,y){
			this._one.callee.call(context,x,y,this._one);
			if (sprite._renderType!==2305){
				sprite._renderType |=0x01;
			}
		}

		/**
		*绘制一条线。
		*@param fromX X轴开始位置。
		*@param fromY Y轴开始位置。
		*@param toX X轴结束位置。
		*@param toY Y轴结束位置。
		*@param lineColor 颜色。
		*@param lineWidth （可选）线条宽度。
		*/
		__proto.drawLine=function(fromX,fromY,toX,toY,lineColor,lineWidth){
			(lineWidth===void 0)&& (lineWidth=1);
			var tId=0;
			if (Render.isWebGL){
				tId=VectorGraphManager.getInstance().getId();
				if (this._vectorgraphArray==null)this._vectorgraphArray=[];
				this._vectorgraphArray.push(tId);
			};
			var offset=lineWidth % 2===0 ? 0 :0.5;
			var arr=[fromX+offset,fromY+offset,toX+offset,toY+offset,lineColor,lineWidth,tId];
			this._saveToCmd(Render._context._drawLine,arr);
		}

		/**
		*绘制一系列线段。
		*@param x 开始绘制的X轴位置。
		*@param y 开始绘制的Y轴位置。
		*@param points 线段的点集合。格式:[x1,y1,x2,y2,x3,y3...]。
		*@param lineColor 线段颜色，或者填充绘图的渐变对象。
		*@param lineWidth （可选）线段宽度。
		*/
		__proto.drawLines=function(x,y,points,lineColor,lineWidth){
			(lineWidth===void 0)&& (lineWidth=1);
			var tId=0;
			if (!points || points.length < 1)return;
			if (Render.isWebGL){
				tId=VectorGraphManager.getInstance().getId();
				if (this._vectorgraphArray==null)this._vectorgraphArray=[];
				this._vectorgraphArray.push(tId);
			};
			var offset=lineWidth % 2===0 ? 0 :0.5;
			var arr=[x+offset,y+offset,points,lineColor,lineWidth,tId];
			this._saveToCmd(Render._context._drawLines,arr);
		}

		/**
		*绘制一系列曲线。
		*@param x 开始绘制的 X 轴位置。
		*@param y 开始绘制的 Y 轴位置。
		*@param points 线段的点集合，格式[startx,starty,ctrx,ctry,startx,starty...]。
		*@param lineColor 线段颜色，或者填充绘图的渐变对象。
		*@param lineWidth （可选）线段宽度。
		*/
		__proto.drawCurves=function(x,y,points,lineColor,lineWidth){
			(lineWidth===void 0)&& (lineWidth=1);
			var arr=[x,y,points,lineColor,lineWidth];
			this._saveToCmd(Render._context._drawCurves,arr);
		}

		/**
		*绘制矩形。
		*@param x 开始绘制的 X 轴位置。
		*@param y 开始绘制的 Y 轴位置。
		*@param width 矩形宽度。
		*@param height 矩形高度。
		*@param fillColor 填充颜色，或者填充绘图的渐变对象。
		*@param lineColor （可选）边框颜色，或者填充绘图的渐变对象。
		*@param lineWidth （可选）边框宽度。
		*/
		__proto.drawRect=function(x,y,width,height,fillColor,lineColor,lineWidth){
			(lineWidth===void 0)&& (lineWidth=1);
			var offset=lineColor ? lineWidth / 2 :0;
			var lineOffset=lineColor ? lineWidth :0;
			var arr=[x+offset,y+offset,width-lineOffset,height-lineOffset,fillColor,lineColor,lineWidth];
			this._saveToCmd(Render._context._drawRect,arr);
		}

		/**
		*绘制圆形。
		*@param x 圆点X 轴位置。
		*@param y 圆点Y 轴位置。
		*@param radius 半径。
		*@param fillColor 填充颜色，或者填充绘图的渐变对象。
		*@param lineColor （可选）边框颜色，或者填充绘图的渐变对象。
		*@param lineWidth （可选）边框宽度。
		*/
		__proto.drawCircle=function(x,y,radius,fillColor,lineColor,lineWidth){
			(lineWidth===void 0)&& (lineWidth=1);
			var offset=lineColor ? lineWidth / 2 :0;
			var tId=0;
			if (Render.isWebGL){
				tId=VectorGraphManager.getInstance().getId();
				if (this._vectorgraphArray==null)this._vectorgraphArray=[];
				this._vectorgraphArray.push(tId);
			};
			var arr=[x,y,radius-offset,fillColor,lineColor,lineWidth,tId];
			this._saveToCmd(Render._context._drawCircle,arr);
		}

		/**
		*绘制扇形。
		*@param x 开始绘制的 X 轴位置。
		*@param y 开始绘制的 Y 轴位置。
		*@param radius 扇形半径。
		*@param startAngle 开始角度。
		*@param endAngle 结束角度。
		*@param fillColor 填充颜色，或者填充绘图的渐变对象。
		*@param lineColor （可选）边框颜色，或者填充绘图的渐变对象。
		*@param lineWidth （可选）边框宽度。
		*/
		__proto.drawPie=function(x,y,radius,startAngle,endAngle,fillColor,lineColor,lineWidth){
			(lineWidth===void 0)&& (lineWidth=1);
			var offset=lineColor ? lineWidth / 2 :0;
			var lineOffset=lineColor ? lineWidth :0;
			var tId=0;
			if (Render.isWebGL){
				tId=VectorGraphManager.getInstance().getId();
				if (this._vectorgraphArray==null)this._vectorgraphArray=[];
				this._vectorgraphArray.push(tId);
			};
			var arr=[x+offset,y+offset,radius-lineOffset,startAngle,endAngle,fillColor,lineColor,lineWidth,tId];
			arr[3]=Utils$2.toRadian(startAngle);
			arr[4]=Utils$2.toRadian(endAngle);
			this._saveToCmd(Render._context._drawPie,arr);
		}

		/**
		*绘制多边形。
		*@param x 开始绘制的 X 轴位置。
		*@param y 开始绘制的 Y 轴位置。
		*@param points 多边形的点集合。
		*@param fillColor 填充颜色，或者填充绘图的渐变对象。
		*@param lineColor （可选）边框颜色，或者填充绘图的渐变对象。
		*@param lineWidth （可选）边框宽度。
		*/
		__proto.drawPoly=function(x,y,points,fillColor,lineColor,lineWidth){
			(lineWidth===void 0)&& (lineWidth=1);
			var tId=0;
			if (Render.isWebGL){
				tId=VectorGraphManager.getInstance().getId();
				if (this._vectorgraphArray==null)this._vectorgraphArray=[];
				this._vectorgraphArray.push(tId);
				var tIsConvexPolygon=false;
				if (points.length > 6){
					tIsConvexPolygon=false;
					}else {
					tIsConvexPolygon=true;
				}
			};
			var offset=lineColor ? (lineWidth % 2===0 ? 0 :0.5):0;
			var arr=[x+offset,y+offset,points,fillColor,lineColor,lineWidth,tId,tIsConvexPolygon];
			this._saveToCmd(Render._context._drawPoly,arr);
		}

		/**
		*绘制路径。
		*@param x 开始绘制的 X 轴位置。
		*@param y 开始绘制的 Y 轴位置。
		*@param paths 路径集合，路径支持以下格式：[["moveTo",x,y],["lineTo",x,y,x,y,x,y],["arcTo",x1,y1,x2,y2,r],["closePath"]]。
		*@param brush （可选）刷子定义，支持以下设置{fillStyle}。
		*@param pen （可选）画笔定义，支持以下设置{strokeStyle,lineWidth,lineJoin,lineCap,miterLimit}。
		*/
		__proto.drawPath=function(x,y,paths,brush,pen){
			var arr=[x,y,paths,brush,pen];
			this._saveToCmd(Render._context._drawPath,arr);
		}

		/**
		*@private
		*命令流。存储了所有绘制命令。
		*/
		__getset(0,__proto,'cmds',function(){
			return this._cmds;
			},function(value){
			this._sp && (this._sp._renderType |=0x200);
			this._cmds=value;
			this._render=this._renderAll;
			this._repaint();
		});

		Graphics.__init__=function(){
			if (Render.isConchNode){
				var from=laya.display.Graphics.prototype;
				var to=ConchGraphics.prototype;
				var list=["clear","destroy","alpha","rotate","transform","scale","translate","save","restore","clipRect","blendMode","fillText","fillBorderText","_fands","drawRect","drawCircle","drawPie","drawPoly","drawPath","drawImageM","drawLine","drawLines","_drawPs","drawCurves","replaceText","replaceTextColor","_fillImage","fillTexture","setSkinMesh","drawParticle","drawImageS"];
				for (var i=0,len=list.length;i <=len;i++){
					var temp=list[i];
					from[temp]=to[temp];
				}
				from._saveToCmd=null;
				if (to.drawImageS){
					from.drawTextures=function (tex,pos){
						if (!tex)return;
						if (!(tex.loaded && tex.bitmap && tex.source)){
							return;
						};
						var uv=tex.uv,w=tex.bitmap.width,h=tex.bitmap.height;
						this.drawImageS(tex.bitmap.source,uv[0] *w,uv[1] *h,(uv[2]-uv[0])*w,(uv[5]-uv[3])*h,tex.offsetX,tex.offsetY,tex.width,tex.height,pos);
					}
				}
				from.drawTexture=function (tex,x,y,width,height,m,alpha){
					(x===void 0)&& (x=0);
					(y===void 0)&& (y=0);
					(width===void 0)&& (width=0);
					(height===void 0)&& (height=0);
					(alpha===void 0)&& (alpha=1);
					if (!tex)return;
					if (!tex.loaded){
						tex.once("loaded",this,function(){
							this.drawTexture(tex,x,y,width,height,m);
						});
						return;
					}
					if (!(tex.loaded && tex.bitmap && tex.source)){
						return;
					}
					if (!width)width=tex.sourceWidth;
					if (!height)height=tex.sourceHeight;
					width=width-tex.sourceWidth+tex.width;
					height=height-tex.sourceHeight+tex.height;
					if (width <=0 || height <=0)return;
					x+=tex.offsetX;
					y+=tex.offsetY;
					var uv=tex.uv,w=tex.bitmap.width,h=tex.bitmap.height;
					this.drawImageM(tex.bitmap.source,uv[0] *w,uv[1] *h,(uv[2]-uv[0])*w,(uv[5]-uv[3])*h,x,y,width,height,m,alpha);
					this._repaint();
				}
				from.fillTexture=function (tex,x,y,width,height,type,offset){
					(width===void 0)&& (width=0);
					(height===void 0)&& (height=0);
					(type===void 0)&& (type="repeat");
					if (!tex)return;
					if (tex.loaded){
						var ctxi=Render._context.ctx;
						var w=tex.bitmap.width,h=tex.bitmap.height,uv=tex.uv;
						var pat;
						if (tex.uv !=Texture.DEF_UV){
							pat=ctxi.createPattern(tex.bitmap.source,type,uv[0] *w,uv[1] *h,(uv[2]-uv[0])*w,(uv[5]-uv[3])*h);
							}else {
							pat=ctxi.createPattern(tex.bitmap.source,type);
						};
						var sX=0,sY=0;
						if (offset){
							x+=offset.x % tex.width;
							y+=offset.y % tex.height;
							sX-=offset.x % tex.width;
							sY-=offset.y % tex.height;
						}
						this._fillImage(pat,x,y,sX,sY,width,height);
					}
				}
			}
		}

		Graphics._cache=[];
		return Graphics;
	})()


	/**
	*<code>BitmapFont</code> 是位图字体类，用于定义位图字体信息。
	*/
	//class laya.display.BitmapFont
	var BitmapFont=(function(){
		function BitmapFont(){
			this._texture=null;
			this._fontCharDic={};
			this._fontWidthMap={};
			this._complete=null;
			this._path=null;
			this._maxWidth=0;
			this._spaceWidth=10;
			this._padding=null;
			this.fontSize=12;
			this.autoScaleSize=false;
			this.letterSpacing=0;
		}

		__class(BitmapFont,'laya.display.BitmapFont');
		var __proto=BitmapFont.prototype;
		/**
		*通过指定位图字体文件路径，加载位图字体文件，加载完成后会自动解析。
		*@param path 位图字体文件的路径。
		*@param complete 加载并解析完成的回调。
		*/
		__proto.loadFont=function(path,complete){
			this._path=path;
			this._complete=complete;
			Laya.loader.load([{url:this._path,type:"xml"},{url:this._path.replace(".fnt",".png"),type:"image"}],Handler.create(this,this.onLoaded));
		}

		/**
		*@private
		*/
		__proto.onLoaded=function(){
			this.parseFont(Loader.getRes(this._path),Loader.getRes(this._path.replace(".fnt",".png")));
			this._complete && this._complete.run();
		}

		/**
		*解析字体文件。
		*@param xml 字体文件XML。
		*@param texture 字体的纹理。
		*/
		__proto.parseFont=function(xml,texture){
			if (xml==null || texture==null)return;
			this._texture=texture;
			var tX=0;
			var tScale=1;
			var tInfo=xml.getElementsByTagName("info");
			this.fontSize=parseInt(tInfo[0].attributes["size"].nodeValue);
			var tPadding=tInfo[0].attributes["padding"].nodeValue;
			var tPaddingArray=tPadding.split(",");
			this._padding=[parseInt(tPaddingArray[0]),parseInt(tPaddingArray[1]),parseInt(tPaddingArray[2]),parseInt(tPaddingArray[3])];
			var chars=xml.getElementsByTagName("char");
			var i=0;
			for (i=0;i < chars.length;i++){
				var tAttribute=chars[i].attributes;
				var tId=parseInt(tAttribute["id"].nodeValue);
				var xOffset=parseInt(tAttribute["xoffset"].nodeValue)/ tScale;
				var yOffset=parseInt(tAttribute["yoffset"].nodeValue)/ tScale;
				var xAdvance=parseInt(tAttribute["xadvance"].nodeValue)/ tScale;
				var region=new Rectangle();
				region.x=parseInt(tAttribute["x"].nodeValue);
				region.y=parseInt(tAttribute["y"].nodeValue);
				region.width=parseInt(tAttribute["width"].nodeValue);
				region.height=parseInt(tAttribute["height"].nodeValue);
				var tTexture=Texture.create(texture,region.x,region.y,region.width,region.height,xOffset,yOffset);
				this._maxWidth=Math.max(this._maxWidth,xAdvance+this.letterSpacing);
				this._fontCharDic[tId]=tTexture;
				this._fontWidthMap[tId]=xAdvance;
			}
		}

		/**
		*获取指定字符的字体纹理对象。
		*@param char 字符。
		*@return 指定的字体纹理对象。
		*/
		__proto.getCharTexture=function(char){
			return this._fontCharDic[char.charCodeAt(0)];
		}

		/**
		*销毁位图字体，调用Text.unregisterBitmapFont 时，默认会销毁。
		*/
		__proto.destroy=function(){
			if (this._texture){
				for (var p in this._fontCharDic){
					var tTexture=this._fontCharDic[p];
					if (tTexture)tTexture.destroy();
				}
				this._texture.destroy();
				this._fontCharDic=null;
				this._fontWidthMap=null;
				this._texture=null;
			}
		}

		/**
		*设置空格的宽（如果字体库有空格，这里就可以不用设置了）。
		*@param spaceWidth 宽度，单位为像素。
		*/
		__proto.setSpaceWidth=function(spaceWidth){
			this._spaceWidth=spaceWidth;
		}

		/**
		*获取指定字符的宽度。
		*@param char 字符。
		*@return 宽度。
		*/
		__proto.getCharWidth=function(char){
			var code=char.charCodeAt(0);
			if (this._fontWidthMap[code])return this._fontWidthMap[code]+this.letterSpacing;
			if (char==" ")return this._spaceWidth+this.letterSpacing;
			return 0;
		}

		/**
		*获取指定文本内容的宽度。
		*@param text 文本内容。
		*@return 宽度。
		*/
		__proto.getTextWidth=function(text){
			var tWidth=0;
			for (var i=0,n=text.length;i < n;i++){
				tWidth+=this.getCharWidth(text.charAt(i));
			}
			return tWidth;
		}

		/**
		*获取最大字符宽度。
		*/
		__proto.getMaxWidth=function(){
			return this._maxWidth;
		}

		/**
		*获取最大字符高度。
		*/
		__proto.getMaxHeight=function(){
			return this.fontSize;
		}

		/**
		*@private
		*将指定的文本绘制到指定的显示对象上。
		*/
		__proto.drawText=function(text,sprite,drawX,drawY,align,width){
			var tWidth=this.getTextWidth(text);
			var tTexture;
			var dx=0;
			align==="center" && (dx=(width-tWidth)/ 2);
			align==="right" && (dx=(width-tWidth));
			var tX=0;
			for (var i=0,n=text.length;i < n;i++){
				tTexture=this.getCharTexture(text.charAt(i));
				if (tTexture){
					sprite.graphics.drawTexture(tTexture,drawX+tX+dx,drawY);
					tX+=this.getCharWidth(text.charAt(i));
				}
			}
		}

		return BitmapFont;
	})()


	/**
	*@private
	*<code>Style</code> 类是元素样式定义类。
	*/
	//class laya.display.css.Style
	var Style=(function(){
		function Style(){
			this.alpha=1;
			this.visible=true;
			this.scrollRect=null;
			this.blendMode=null;
			this._type=0;
			this._tf=Style._TF_EMPTY;
		}

		__class(Style,'laya.display.css.Style');
		var __proto=Style.prototype;
		__proto.getTransform=function(){
			return this._tf;
		}

		__proto.setTransform=function(value){
			this._tf=value==='none' || !value ? Style._TF_EMPTY :value;
		}

		__proto.setTranslateX=function(value){
			this._tf===Style._TF_EMPTY && (this._tf=new TransformInfo());
			this._tf.translateX=value;
		}

		__proto.setTranslateY=function(value){
			this._tf===Style._TF_EMPTY && (this._tf=new TransformInfo());
			this._tf.translateY=value;
		}

		__proto.setScaleX=function(value){
			this._tf===Style._TF_EMPTY && (this._tf=new TransformInfo());
			this._tf.scaleX=value;
		}

		__proto.setScale=function(x,y){
			this._tf===Style._TF_EMPTY && (this._tf=new TransformInfo());
			this._tf.scaleX=x;
			this._tf.scaleY=y;
		}

		__proto.setScaleY=function(value){
			this._tf===Style._TF_EMPTY && (this._tf=new TransformInfo());
			this._tf.scaleY=value;
		}

		__proto.setRotate=function(value){
			this._tf===Style._TF_EMPTY && (this._tf=new TransformInfo());
			this._tf.rotate=value;
		}

		__proto.setSkewX=function(value){
			this._tf===Style._TF_EMPTY && (this._tf=new TransformInfo());
			this._tf.skewX=value;
		}

		__proto.setSkewY=function(value){
			this._tf===Style._TF_EMPTY && (this._tf=new TransformInfo());
			this._tf.skewY=value;
		}

		/**销毁此对象。*/
		__proto.destroy=function(){
			this.scrollRect=null;
		}

		/**@private */
		__proto.render=function(sprite,context,x,y){}
		/**@private */
		__proto.getCSSStyle=function(){
			return CSSStyle.EMPTY;
		}

		/**@private */
		__proto._enableLayout=function(){
			return false;
		}

		/**X 轴缩放值。*/
		__getset(0,__proto,'scaleX',function(){
			return this._tf.scaleX;
			},function(value){
			this.setScaleX(value);
		});

		/**元素应用的 2D 或 3D 转换的值。该属性允许我们对元素进行旋转、缩放、移动或倾斜。*/
		__getset(0,__proto,'transform',function(){
			return this.getTransform();
			},function(value){
			this.setTransform(value);
		});

		/**定义转换，只是用 X 轴的值。*/
		__getset(0,__proto,'translateX',function(){
			return this._tf.translateX;
			},function(value){
			this.setTranslateX(value);
		});

		/**定义转换，只是用 Y 轴的值。*/
		__getset(0,__proto,'translateY',function(){
			return this._tf.translateY;
			},function(value){
			this.setTranslateY(value);
		});

		/**Y 轴缩放值。*/
		__getset(0,__proto,'scaleY',function(){
			return this._tf.scaleY;
			},function(value){
			this.setScaleY(value);
		});

		/**表示元素是否显示为块级元素。*/
		__getset(0,__proto,'block',function(){
			return (this._type & 0x1)!=0;
		});

		/**定义沿着 Y 轴的 2D 倾斜转换。*/
		__getset(0,__proto,'skewY',function(){
			return this._tf.skewY;
			},function(value){
			this.setSkewY(value);
		});

		/**定义旋转角度。*/
		__getset(0,__proto,'rotate',function(){
			return this._tf.rotate;
			},function(value){
			this.setRotate(value);
		});

		/**定义沿着 X 轴的 2D 倾斜转换。*/
		__getset(0,__proto,'skewX',function(){
			return this._tf.skewX;
			},function(value){
			this.setSkewX(value);
		});

		/**表示元素的左内边距。*/
		__getset(0,__proto,'paddingLeft',function(){
			return 0;
		});

		/**表示元素的上内边距。*/
		__getset(0,__proto,'paddingTop',function(){
			return 0;
		});

		/**是否为绝对定位。*/
		__getset(0,__proto,'absolute',function(){
			return true;
		});

		Style.__init__=function(){
			Style._TF_EMPTY=new TransformInfo();
			Style.EMPTY=new Style();
		}

		Style.EMPTY=null
		Style._TF_EMPTY=null
		return Style;
	})()


	/**
	*@private
	*<code>Font</code> 类是字体显示定义类。
	*/
	//class laya.display.css.Font
	var Font=(function(){
		function Font(src){
			this._type=0;
			this._weight=0;
			this._decoration=null;
			this._text=null;
			this.indent=0;
			this._color=Color$2.create(Font.defaultColor);
			this.family=Font.defaultFamily;
			this.stroke=Font._STROKE;
			this.size=Font.defaultSize;
			src && src!==Font.EMPTY && src.copyTo(this);
		}

		__class(Font,'laya.display.css.Font');
		var __proto=Font.prototype;
		/**
		*字体样式字符串。
		*/
		__proto.setValue=function(value){
			this._text=null;
			var strs=value.split(' ');
			for (var i=0,n=strs.length;i < n;i++){
				var str=strs[i];
				switch (str){
					case 'italic':
						this.italic=true;
						continue ;
					case 'bold':
						this.bold=true;
						continue ;
					}
				if (str.indexOf('px')> 0){
					this.size=parseInt(str);
					this.family=strs[i+1];
					i++;
					continue ;
				}
			}
		}

		/**
		*返回字体样式字符串。
		*@return 字体样式字符串。
		*/
		__proto.toString=function(){
			this._text=""
			this.italic && (this._text+="italic ");
			this.bold && (this._text+="bold ");
			return this._text+=this.size+"px "+this.family;
		}

		/**
		*将当前的属性值复制到传入的 <code>Font</code> 对象。
		*@param dec 一个 Font 对象。
		*/
		__proto.copyTo=function(dec){
			dec._type=this._type;
			dec._text=this._text;
			dec._weight=this._weight;
			dec._color=this._color;
			dec.family=this.family;
			dec.stroke=this.stroke !=Font._STROKE ? this.stroke.slice():Font._STROKE;
			dec.indent=this.indent;
			dec.size=this.size;
		}

		/**
		*表示是否为密码格式。
		*/
		__getset(0,__proto,'password',function(){
			return (this._type & 0x400)!==0;
			},function(value){
			value ? (this._type |=0x400):(this._type &=~0x400);
		});

		/**
		*表示颜色字符串。
		*/
		__getset(0,__proto,'color',function(){
			return this._color.strColor;
			},function(value){
			this._color=Color$2.create(value);
		});

		/**
		*表示是否为斜体。
		*/
		__getset(0,__proto,'italic',function(){
			return (this._type & 0x200)!==0;
			},function(value){
			value ? (this._type |=0x200):(this._type &=~0x200);
		});

		/**
		*表示是否为粗体。
		*/
		__getset(0,__proto,'bold',function(){
			return (this._type & 0x800)!==0;
			},function(value){
			value ? (this._type |=0x800):(this._type &=~0x800);
		});

		/**
		*文本的粗细。
		*/
		__getset(0,__proto,'weight',function(){
			return ""+this._weight;
			},function(value){
			var weight=0;
			switch (value){
				case 'normal':
					break ;
				case 'bold':
					this.bold=true;
					weight=700;
					break ;
				case 'bolder':
					weight=800;
					break ;
				case 'lighter':
					weight=100;
					break ;
				default :
					weight=parseInt(value);
				}
			this._weight=weight;
			this._text=null;
		});

		/**
		*规定添加到文本的修饰。
		*/
		__getset(0,__proto,'decoration',function(){
			return this._decoration ? this._decoration.value :"none";
			},function(value){
			var strs=value.split(' ');
			this._decoration || (this._decoration={});
			switch (strs[0]){
				case '_':
					this._decoration.type='underline'
					break ;
				case '-':
					this._decoration.type='line-through'
					break ;
				case 'overline':
					this._decoration.type='overline'
					break ;
				default :
					this._decoration.type=strs[0];
				}
			strs[1] && (this._decoration.color=Color$2.create(strs));
			this._decoration.value=value;
		});

		Font.__init__=function(){
			Font.EMPTY=new Font(null);
		}

		Font.EMPTY=null
		Font.defaultColor="#000000";
		Font.defaultSize=12;
		Font.defaultFamily="Arial";
		Font.defaultFont="12px Arial";
		Font._STROKE=[0,"#000000"];
		Font._ITALIC=0x200;
		Font._PASSWORD=0x400;
		Font._BOLD=0x800;
		return Font;
	})()


	/**
	*@private
	*/
	//class laya.display.css.TransformInfo
	var TransformInfo=(function(){
		function TransformInfo(){
			this.translateX=0;
			this.translateY=0;
			this.scaleX=1;
			this.scaleY=1;
			this.rotate=0;
			this.skewX=0;
			this.skewY=0;
		}

		__class(TransformInfo,'laya.display.css.TransformInfo');
		return TransformInfo;
	})()


	/**
	*@private
	*Graphic bounds数据类
	*/
	//class laya.display.GraphicsBounds
	var GraphicsBounds=(function(){
		function GraphicsBounds(){
			//this._temp=null;
			//this._bounds=null;
			//this._rstBoundPoints=null;
			this._cacheBoundsType=false;
			//this._graphics=null;
		}

		__class(GraphicsBounds,'laya.display.GraphicsBounds');
		var __proto=GraphicsBounds.prototype;
		/**
		*销毁
		*/
		__proto.destroy=function(){
			this._graphics=null;
			this._temp=null;
			this._rstBoundPoints=null;
			this._bounds=null;
		}

		/**
		*重置数据
		*/
		__proto.reset=function(){
			this._temp && (this._temp.length=0);
		}

		/**
		*获取位置及宽高信息矩阵(比较耗CPU，频繁使用会造成卡顿，尽量少用)。
		*@param realSize （可选）使用图片的真实大小，默认为false
		*@return 位置与宽高组成的 一个 Rectangle 对象。
		*/
		__proto.getBounds=function(realSize){
			(realSize===void 0)&& (realSize=false);
			if (!this._bounds || !this._temp || this._temp.length < 1 || realSize !=this._cacheBoundsType){
				this._bounds=Rectangle._getWrapRec(this.getBoundPoints(realSize),this._bounds)
			}
			this._cacheBoundsType=realSize;
			return this._bounds;
		}

		/**
		*@private
		*@param realSize （可选）使用图片的真实大小，默认为false
		*获取端点列表。
		*/
		__proto.getBoundPoints=function(realSize){
			(realSize===void 0)&& (realSize=false);
			if (!this._temp || this._temp.length < 1 || realSize !=this._cacheBoundsType)
				this._temp=this._getCmdPoints(realSize);
			this._cacheBoundsType=realSize;
			return this._rstBoundPoints=Utils$2.copyArray(this._rstBoundPoints,this._temp);
		}

		__proto._getCmdPoints=function(realSize){
			(realSize===void 0)&& (realSize=false);
			var context=Render._context;
			var cmds=this._graphics.cmds;
			var rst;
			rst=this._temp || (this._temp=[]);
			rst.length=0;
			if (!cmds && this._graphics._one !=null){
				GraphicsBounds._tempCmds.length=0;
				GraphicsBounds._tempCmds.push(this._graphics._one);
				cmds=GraphicsBounds._tempCmds;
			}
			if (!cmds)
				return rst;
			var matrixs;
			matrixs=GraphicsBounds._tempMatrixArrays;
			matrixs.length=0;
			var tMatrix=GraphicsBounds._initMatrix;
			tMatrix.identity();
			var tempMatrix=GraphicsBounds._tempMatrix;
			var cmd;
			var tex;
			for (var i=0,n=cmds.length;i < n;i++){
				cmd=cmds[i];
				switch (cmd.callee){
					case context._save:
					case 7:
						matrixs.push(tMatrix);
						tMatrix=tMatrix.clone();
						break ;
					case context._restore:
					case 8:
						tMatrix=matrixs.pop();
						break ;
					case context._scale:
					case 5:
						tempMatrix.identity();
						tempMatrix.translate(-cmd[2],-cmd[3]);
						tempMatrix.scale(cmd[0],cmd[1]);
						tempMatrix.translate(cmd[2],cmd[3]);
						this._switchMatrix(tMatrix,tempMatrix);
						break ;
					case context._rotate:
					case 3:
						tempMatrix.identity();
						tempMatrix.translate(-cmd[1],-cmd[2]);
						tempMatrix.rotate(cmd[0]);
						tempMatrix.translate(cmd[1],cmd[2]);
						this._switchMatrix(tMatrix,tempMatrix);
						break ;
					case context._translate:
					case 6:
						tempMatrix.identity();
						tempMatrix.translate(cmd[0],cmd[1]);
						this._switchMatrix(tMatrix,tempMatrix);
						break ;
					case context._transform:
					case 4:
						tempMatrix.identity();
						tempMatrix.translate(-cmd[1],-cmd[2]);
						tempMatrix.concat(cmd[0]);
						tempMatrix.translate(cmd[1],cmd[2]);
						this._switchMatrix(tMatrix,tempMatrix);
						break ;
					case 16:
					case 24:
						GraphicsBounds._addPointArrToRst(rst,Rectangle._getBoundPointS(cmd[0],cmd[1],cmd[2],cmd[3]),tMatrix);
						break ;
					case 17:
						tMatrix.copyTo(tempMatrix);
						tempMatrix.concat(cmd[4]);
						GraphicsBounds._addPointArrToRst(rst,Rectangle._getBoundPointS(cmd[0],cmd[1],cmd[2],cmd[3]),tempMatrix);
						break ;
					case context._drawTexture:
						tex=cmd[0];
						if (realSize){
							if (cmd[3] && cmd[4]){
								GraphicsBounds._addPointArrToRst(rst,Rectangle._getBoundPointS(cmd[1],cmd[2],cmd[3],cmd[4]),tMatrix);
								}else {
								tex=cmd[0];
								GraphicsBounds._addPointArrToRst(rst,Rectangle._getBoundPointS(cmd[1],cmd[2],tex.width,tex.height),tMatrix);
							}
							}else {
							var wRate=(cmd[3] || tex.sourceWidth)/ tex.width;
							var hRate=(cmd[4] || tex.sourceHeight)/ tex.height;
							var oWidth=wRate *tex.sourceWidth;
							var oHeight=hRate *tex.sourceHeight;
							var offX=tex.offsetX > 0 ? tex.offsetX :0;
							var offY=tex.offsetY > 0 ? tex.offsetY :0;
							offX *=wRate;
							offY *=hRate;
							GraphicsBounds._addPointArrToRst(rst,Rectangle._getBoundPointS(cmd[1]-offX,cmd[2]-offY,oWidth,oHeight),tMatrix);
						}
						break ;
					case context._fillTexture:
						if (cmd[3] && cmd[4]){
							GraphicsBounds._addPointArrToRst(rst,Rectangle._getBoundPointS(cmd[1],cmd[2],cmd[3],cmd[4]),tMatrix);
							}else {
							tex=cmd[0];
							GraphicsBounds._addPointArrToRst(rst,Rectangle._getBoundPointS(cmd[1],cmd[2],tex.width,tex.height),tMatrix);
						}
						break ;
					case context._drawTextureWithTransform:;
						var drawMatrix;
						if (cmd[5]){
							tMatrix.copyTo(tempMatrix);
							tempMatrix.concat(cmd[5]);
							drawMatrix=tempMatrix;
							}else {
							drawMatrix=tMatrix;
						}
						if (realSize){
							if (cmd[3] && cmd[4]){
								GraphicsBounds._addPointArrToRst(rst,Rectangle._getBoundPointS(cmd[1],cmd[2],cmd[3],cmd[4]),drawMatrix);
								}else {
								tex=cmd[0];
								GraphicsBounds._addPointArrToRst(rst,Rectangle._getBoundPointS(cmd[1],cmd[2],tex.width,tex.height),drawMatrix);
							}
							}else {
							tex=cmd[0];
							wRate=(cmd[3] || tex.sourceWidth)/ tex.width;
							hRate=(cmd[4] || tex.sourceHeight)/ tex.height;
							oWidth=wRate *tex.sourceWidth;
							oHeight=hRate *tex.sourceHeight;
							offX=tex.offsetX > 0 ? tex.offsetX :0;
							offY=tex.offsetY > 0 ? tex.offsetY :0;
							offX *=wRate;
							offY *=hRate;
							GraphicsBounds._addPointArrToRst(rst,Rectangle._getBoundPointS(cmd[1]-offX,cmd[2]-offY,oWidth,oHeight),drawMatrix);
						}
						break ;
					case context._drawRect:
					case 13:
						GraphicsBounds._addPointArrToRst(rst,Rectangle._getBoundPointS(cmd[0],cmd[1],cmd[2],cmd[3]),tMatrix);
						break ;
					case context._drawCircle:
					case context._fillCircle:
					case 14:
						GraphicsBounds._addPointArrToRst(rst,Rectangle._getBoundPointS(cmd[0]-cmd[2],cmd[1]-cmd[2],cmd[2]+cmd[2],cmd[2]+cmd[2]),tMatrix);
						break ;
					case context._drawLine:
					case 20:
						GraphicsBounds._tempPoints.length=0;
						var lineWidth=NaN;
						lineWidth=cmd[5] *0.5;
						if (cmd[0]==cmd[2]){
							GraphicsBounds._tempPoints.push(cmd[0]+lineWidth,cmd[1],cmd[2]+lineWidth,cmd[3],cmd[0]-lineWidth,cmd[1],cmd[2]-lineWidth,cmd[3]);
							}else if (cmd[1]==cmd[3]){
							GraphicsBounds._tempPoints.push(cmd[0],cmd[1]+lineWidth,cmd[2],cmd[3]+lineWidth,cmd[0],cmd[1]-lineWidth,cmd[2],cmd[3]-lineWidth);
							}else {
							GraphicsBounds._tempPoints.push(cmd[0],cmd[1],cmd[2],cmd[3]);
						}
						GraphicsBounds._addPointArrToRst(rst,GraphicsBounds._tempPoints,tMatrix);
						break ;
					case context._drawCurves:
					case 22:
						GraphicsBounds._addPointArrToRst(rst,Bezier.I.getBezierPoints(cmd[2]),tMatrix,cmd[0],cmd[1]);
						break ;
					case context._drawPoly:
					case context._drawLines:
					case 18:
						GraphicsBounds._addPointArrToRst(rst,cmd[2],tMatrix,cmd[0],cmd[1]);
						break ;
					case context._drawPath:
					case 19:
						GraphicsBounds._addPointArrToRst(rst,this._getPathPoints(cmd[2]),tMatrix,cmd[0],cmd[1]);
						break ;
					case context._drawPie:
					case 15:
						GraphicsBounds._addPointArrToRst(rst,this._getPiePoints(cmd[0],cmd[1],cmd[2],cmd[3],cmd[4]),tMatrix);
						break ;
					}
			}
			if (rst.length > 200){
				rst=Utils$2.copyArray(rst,Rectangle._getWrapRec(rst)._getBoundPoints());
			}else if (rst.length > 8)
			rst=GrahamScan.scanPList(rst);
			return rst;
		}

		__proto._switchMatrix=function(tMatix,tempMatrix){
			tempMatrix.concat(tMatix);
			tempMatrix.copyTo(tMatix);
		}

		__proto._getPiePoints=function(x,y,radius,startAngle,endAngle){
			var rst=GraphicsBounds._tempPoints;
			GraphicsBounds._tempPoints.length=0;
			rst.push(x,y);
			var dP=Math.PI / 10;
			var i=NaN;
			for (i=startAngle;i < endAngle;i+=dP){
				rst.push(x+radius *Math.cos(i),y+radius *Math.sin(i));
			}
			if (endAngle !=i){
				rst.push(x+radius *Math.cos(endAngle),y+radius *Math.sin(endAngle));
			}
			return rst;
		}

		__proto._getPathPoints=function(paths){
			var i=0,len=0;
			var rst=GraphicsBounds._tempPoints;
			rst.length=0;
			len=paths.length;
			var tCMD;
			for (i=0;i < len;i++){
				tCMD=paths[i];
				if (tCMD.length > 1){
					rst.push(tCMD[1],tCMD[2]);
					if (tCMD.length > 3){
						rst.push(tCMD[3],tCMD[4]);
					}
				}
			}
			return rst;
		}

		GraphicsBounds._addPointArrToRst=function(rst,points,matrix,dx,dy){
			(dx===void 0)&& (dx=0);
			(dy===void 0)&& (dy=0);
			var i=0,len=0;
			len=points.length;
			for (i=0;i < len;i+=2){
				GraphicsBounds._addPointToRst(rst,points[i]+dx,points[i+1]+dy,matrix);
			}
		}

		GraphicsBounds._addPointToRst=function(rst,x,y,matrix){
			var _tempPoint=Point.TEMP;
			_tempPoint.setTo(x ? x :0,y ? y :0);
			matrix.transformPoint(_tempPoint);
			rst.push(_tempPoint.x,_tempPoint.y);
		}

		GraphicsBounds._tempPoints=[];
		GraphicsBounds._tempMatrixArrays=[];
		GraphicsBounds._tempCmds=[];
		__static(GraphicsBounds,
		['_tempMatrix',function(){return this._tempMatrix=new Matrix();},'_initMatrix',function(){return this._initMatrix=new Matrix();}
		]);
		return GraphicsBounds;
	})()


	/**
	*<code>Event</code> 是事件类型的集合。一般当发生事件时，<code>Event</code> 对象将作为参数传递给事件侦听器。
	*/
	//class laya.events.Event
	var Event=(function(){
		function Event(){
			//this.type=null;
			//this.nativeEvent=null;
			//this.target=null;
			//this.currentTarget=null;
			//this._stoped=false;
			//this.touchId=0;
			//this.keyCode=0;
			//this.delta=0;
		}

		__class(Event,'laya.events.Event');
		var __proto=Event.prototype;
		/**
		*设置事件数据。
		*@param type 事件类型。
		*@param currentTarget 事件目标触发对象。
		*@param target 事件当前冒泡对象。
		*@return 返回当前 Event 对象。
		*/
		__proto.setTo=function(type,currentTarget,target){
			this.type=type;
			this.currentTarget=currentTarget;
			this.target=target;
			return this;
		}

		/**
		*阻止对事件流中当前节点的后续节点中的所有事件侦听器进行处理。此方法不会影响当前节点 (currentTarget)中的任何事件侦听器。
		*/
		__proto.stopPropagation=function(){
			this._stoped=true;
		}

		/**鼠标在 Stage 上的 Y 轴坐标*/
		__getset(0,__proto,'stageY',function(){
			return Laya.stage.mouseY;
		});

		/**
		*包含按下或释放的键的字符代码值。字符代码值为英文键盘值。
		*/
		__getset(0,__proto,'charCode',function(){
			return this.nativeEvent.charCode;
		});

		/**
		*触摸点列表。
		*/
		__getset(0,__proto,'touches',function(){
			var arr=this.nativeEvent.touches;
			if (arr){
				var stage=Laya.stage;
				for (var i=0,n=arr.length;i < n;i++){
					var e=arr[i];
					var point=Point.TEMP;
					point.setTo(e.clientX,e.clientY);
					stage._canvasTransform.invertTransformPoint(point);
					stage.transform.invertTransformPoint(point);
					e.stageX=point.x;
					e.stageY=point.y;
				}
			}
			return arr;
		});

		/**
		*表示键在键盘上的位置。这对于区分在键盘上多次出现的键非常有用。<br>
		*例如，您可以根据此属性的值来区分左 Shift 键和右 Shift 键：左 Shift 键的值为 KeyLocation.LEFT，右 Shift 键的值为 KeyLocation.RIGHT。另一个示例是区分标准键盘 (KeyLocation.STANDARD)与数字键盘 (KeyLocation.NUM_PAD)上按下的数字键。
		*/
		__getset(0,__proto,'keyLocation',function(){
			return this.nativeEvent.keyLocation;
		});

		/**
		*表示 Ctrl 键是处于活动状态 (true)还是非活动状态 (false)。
		*/
		__getset(0,__proto,'ctrlKey',function(){
			return this.nativeEvent.ctrlKey;
		});

		/**
		*表示 Alt 键是处于活动状态 (true)还是非活动状态 (false)。
		*/
		__getset(0,__proto,'altKey',function(){
			return this.nativeEvent.altKey;
		});

		/**
		*表示 Shift 键是处于活动状态 (true)还是非活动状态 (false)。
		*/
		__getset(0,__proto,'shiftKey',function(){
			return this.nativeEvent.shiftKey;
		});

		/**鼠标在 Stage 上的 X 轴坐标*/
		__getset(0,__proto,'stageX',function(){
			return Laya.stage.mouseX;
		});

		Event.EMPTY=new Event();
		Event.MOUSE_DOWN="mousedown";
		Event.MOUSE_UP="mouseup";
		Event.CLICK="click";
		Event.RIGHT_MOUSE_DOWN="rightmousedown";
		Event.RIGHT_MOUSE_UP="rightmouseup";
		Event.RIGHT_CLICK="rightclick";
		Event.MOUSE_MOVE="mousemove";
		Event.MOUSE_OVER="mouseover";
		Event.MOUSE_OUT="mouseout";
		Event.MOUSE_WHEEL="mousewheel";
		Event.ROLL_OVER="mouseover";
		Event.ROLL_OUT="mouseout";
		Event.DOUBLE_CLICK="doubleclick";
		Event.CHANGE="change";
		Event.CHANGED="changed";
		Event.RESIZE="resize";
		Event.ADDED="added";
		Event.REMOVED="removed";
		Event.DISPLAY="display";
		Event.UNDISPLAY="undisplay";
		Event.ERROR="error";
		Event.COMPLETE="complete";
		Event.LOADED="loaded";
		Event.PROGRESS="progress";
		Event.INPUT="input";
		Event.RENDER="render";
		Event.OPEN="open";
		Event.MESSAGE="message";
		Event.CLOSE="close";
		Event.KEY_DOWN="keydown";
		Event.KEY_PRESS="keypress";
		Event.KEY_UP="keyup";
		Event.FRAME="enterframe";
		Event.DRAG_START="dragstart";
		Event.DRAG_MOVE="dragmove";
		Event.DRAG_END="dragend";
		Event.ENTER="enter";
		Event.SELECT="select";
		Event.BLUR="blur";
		Event.FOCUS="focus";
		Event.VISIBILITY_CHANGE="visibilitychange";
		Event.FOCUS_CHANGE="focuschange";
		Event.PLAYED="played";
		Event.PAUSED="paused";
		Event.STOPPED="stopped";
		Event.START="start";
		Event.END="end";
		Event.ENABLE_CHANGED="enablechanged";
		Event.ACTIVE_IN_HIERARCHY_CHANGED="activeinhierarchychanged";
		Event.COMPONENT_ADDED="componentadded";
		Event.COMPONENT_REMOVED="componentremoved";
		Event.LAYER_CHANGED="layerchanged";
		Event.HIERARCHY_LOADED="hierarchyloaded";
		Event.RECOVERING="recovering";
		Event.RECOVERED="recovered";
		Event.RELEASED="released";
		Event.LINK="link";
		Event.LABEL="label";
		Event.FULL_SCREEN_CHANGE="fullscreenchange";
		Event.DEVICE_LOST="devicelost";
		Event.MESH_CHANGED="meshchanged";
		Event.MATERIAL_CHANGED="materialchanged";
		Event.RENDERQUEUE_CHANGED="renderqueuechanged";
		Event.WORLDMATRIX_NEEDCHANGE="worldmatrixneedchanged";
		Event.ANIMATION_CHANGED="animationchanged";
		return Event;
	})()


	/**
	*<code>Keyboard</code> 类的属性是一些常数，这些常数表示控制游戏时最常用的键。
	*/
	//class laya.events.Keyboard
	var Keyboard=(function(){
		function Keyboard(){};
		__class(Keyboard,'laya.events.Keyboard');
		Keyboard.NUMBER_0=48;
		Keyboard.NUMBER_1=49;
		Keyboard.NUMBER_2=50;
		Keyboard.NUMBER_3=51;
		Keyboard.NUMBER_4=52;
		Keyboard.NUMBER_5=53;
		Keyboard.NUMBER_6=54;
		Keyboard.NUMBER_7=55;
		Keyboard.NUMBER_8=56;
		Keyboard.NUMBER_9=57;
		Keyboard.A=65;
		Keyboard.B=66;
		Keyboard.C=67;
		Keyboard.D=68;
		Keyboard.E=69;
		Keyboard.F=70;
		Keyboard.G=71;
		Keyboard.H=72;
		Keyboard.I=73;
		Keyboard.J=74;
		Keyboard.K=75;
		Keyboard.L=76;
		Keyboard.M=77;
		Keyboard.N=78;
		Keyboard.O=79;
		Keyboard.P=80;
		Keyboard.Q=81;
		Keyboard.R=82;
		Keyboard.S=83;
		Keyboard.T=84;
		Keyboard.U=85;
		Keyboard.V=86;
		Keyboard.W=87;
		Keyboard.X=88;
		Keyboard.Y=89;
		Keyboard.Z=90;
		Keyboard.F1=112;
		Keyboard.F2=113;
		Keyboard.F3=114;
		Keyboard.F4=115;
		Keyboard.F5=116;
		Keyboard.F6=117;
		Keyboard.F7=118;
		Keyboard.F8=119;
		Keyboard.F9=120;
		Keyboard.F10=121;
		Keyboard.F11=122;
		Keyboard.F12=123;
		Keyboard.F13=124;
		Keyboard.F14=125;
		Keyboard.F15=126;
		Keyboard.NUMPAD=21;
		Keyboard.NUMPAD_0=96;
		Keyboard.NUMPAD_1=97;
		Keyboard.NUMPAD_2=98;
		Keyboard.NUMPAD_3=99;
		Keyboard.NUMPAD_4=100;
		Keyboard.NUMPAD_5=101;
		Keyboard.NUMPAD_6=102;
		Keyboard.NUMPAD_7=103;
		Keyboard.NUMPAD_8=104;
		Keyboard.NUMPAD_9=105;
		Keyboard.NUMPAD_ADD=107;
		Keyboard.NUMPAD_DECIMAL=110;
		Keyboard.NUMPAD_DIVIDE=111;
		Keyboard.NUMPAD_ENTER=108;
		Keyboard.NUMPAD_MULTIPLY=106;
		Keyboard.NUMPAD_SUBTRACT=109;
		Keyboard.SEMICOLON=186;
		Keyboard.EQUAL=187;
		Keyboard.COMMA=188;
		Keyboard.MINUS=189;
		Keyboard.PERIOD=190;
		Keyboard.SLASH=191;
		Keyboard.BACKQUOTE=192;
		Keyboard.LEFTBRACKET=219;
		Keyboard.BACKSLASH=220;
		Keyboard.RIGHTBRACKET=221;
		Keyboard.QUOTE=222;
		Keyboard.ALTERNATE=18;
		Keyboard.BACKSPACE=8;
		Keyboard.CAPS_LOCK=20;
		Keyboard.COMMAND=15;
		Keyboard.CONTROL=17;
		Keyboard.DELETE=46;
		Keyboard.ENTER=13;
		Keyboard.ESCAPE=27;
		Keyboard.PAGE_UP=33;
		Keyboard.PAGE_DOWN=34;
		Keyboard.END=35;
		Keyboard.HOME=36;
		Keyboard.LEFT=37;
		Keyboard.UP=38;
		Keyboard.RIGHT=39;
		Keyboard.DOWN=40;
		Keyboard.SHIFT=16;
		Keyboard.SPACE=32;
		Keyboard.TAB=9;
		Keyboard.INSERT=45;
		return Keyboard;
	})()


	/**
	*<p><code>KeyBoardManager</code> 是键盘事件管理类。该类从浏览器中接收键盘事件，并派发该事件。</p>
	*<p>派发事件时若 Stage.focus 为空则只从 Stage 上派发该事件，否则将从 Stage.focus 对象开始一直冒泡派发该事件。所以在 Laya.stage 上监听键盘事件一定能够收到，如果在其他地方监听，则必须处在Stage.focus的冒泡链上才能收到该事件。</p>
	*<p>用户可以通过代码 Laya.stage.focus=someNode 的方式来设置focus对象。</p>
	*<p>用户可统一的根据事件对象中 e.keyCode 来判断按键类型，该属性兼容了不同浏览器的实现。</p>
	*/
	//class laya.events.KeyBoardManager
	var KeyBoardManager=(function(){
		function KeyBoardManager(){};
		__class(KeyBoardManager,'laya.events.KeyBoardManager');
		KeyBoardManager.__init__=function(){
			KeyBoardManager._addEvent("keydown");
			KeyBoardManager._addEvent("keypress");
			KeyBoardManager._addEvent("keyup");
		}

		KeyBoardManager._addEvent=function(type){
			Browser.document.addEventListener(type,function(e){
				laya.events.KeyBoardManager._dispatch(e,type);
			},true);
		}

		KeyBoardManager._dispatch=function(e,type){
			if (!KeyBoardManager.enabled)return;
			KeyBoardManager._event._stoped=false;
			KeyBoardManager._event.nativeEvent=e;
			KeyBoardManager._event.keyCode=e.keyCode || e.which || e.charCode;
			if (type==="keydown")KeyBoardManager._pressKeys[KeyBoardManager._event.keyCode]=true;
			else if (type==="keyup")KeyBoardManager._pressKeys[KeyBoardManager._event.keyCode]=null;
			var target=(Laya.stage.focus && (Laya.stage.focus.event !=null)&& Laya.stage.focus.displayedInStage)? Laya.stage.focus :Laya.stage;
			var ct=target;
			while (ct){
				ct.event(type,KeyBoardManager._event.setTo(type,ct,target));
				ct=ct.parent;
			}
		}

		KeyBoardManager.hasKeyDown=function(key){
			return KeyBoardManager._pressKeys[key];
		}

		KeyBoardManager._pressKeys={};
		KeyBoardManager.enabled=true;
		__static(KeyBoardManager,
		['_event',function(){return this._event=new Event();}
		]);
		return KeyBoardManager;
	})()


	/**
	*<p><code>MouseManager</code> 是鼠标、触摸交互管理器。</p>
	*<p>鼠标事件流包括捕获阶段、目标阶段、冒泡阶段。<br/>
	*捕获阶段：此阶段引擎会从stage开始递归检测stage及其子对象，直到找到命中的目标对象或者未命中任何对象；<br/>
	*目标阶段：找到命中的目标对象；<br/>
	*冒泡阶段：事件离开目标对象，按节点层级向上逐层通知，直到到达舞台的过程。</p>
	*/
	//class laya.events.MouseManager
	var MouseManager=(function(){
		function MouseManager(){
			this.mouseX=0;
			this.mouseY=0;
			this.disableMouseEvent=false;
			this.mouseDownTime=0;
			this.mouseMoveAccuracy=2;
			this._stage=null;
			this._target=null;
			this._lastMoveTimer=0;
			this._isLeftMouse=false;
			this._eventList=[];
			this._touchIDs={};
			this._id=1;
			this._tTouchID=0;
			this._event=new Event();
			this._matrix=new Matrix();
			this._point=new Point();
			this._rect=new Rectangle();
			this._prePoint=new Point();
			this._curTouchID=NaN;
		}

		__class(MouseManager,'laya.events.MouseManager');
		var __proto=MouseManager.prototype;
		/**
		*@private
		*初始化。
		*/
		__proto.__init__=function(stage,canvas){
			this._stage=stage;
			var _this=this;
			var list=this._eventList;
			canvas.oncontextmenu=function (e){
				if (MouseManager.enabled)return false;
			}
			canvas.addEventListener('mousedown',function(e){
				if(!Browser.onIE)e.preventDefault();
				if (MouseManager.enabled){
					list.push(e);
					_this.mouseDownTime=Browser.now();
				}
			});
			canvas.addEventListener('mouseup',function(e){
				e.preventDefault();
				if (MouseManager.enabled){
					list.push(e);
					_this.mouseDownTime=-Browser.now();
				}
			},true);
			canvas.addEventListener('mousemove',function(e){
				e.preventDefault();
				if (MouseManager.enabled){
					var now=Browser.now();
					if (now-_this._lastMoveTimer < 10)return;
					_this._lastMoveTimer=now;
					list.push(e);
				}
			},true);
			canvas.addEventListener("mouseout",function(e){
				if (MouseManager.enabled)list.push(e);
			})
			canvas.addEventListener("mouseover",function(e){
				if (MouseManager.enabled)list.push(e);
			})
			canvas.addEventListener("touchstart",function(e){
				if (!Input.isInputting)e.preventDefault();
				if (MouseManager.enabled){
					list.push(e);
					_this.mouseDownTime=Browser.now();
				}
			});
			canvas.addEventListener("touchend",function(e){
				if (!Input.isInputting)e.preventDefault();
				if (MouseManager.enabled){
					list.push(e);
					_this.mouseDownTime=-Browser.now();
				}
			},true);
			canvas.addEventListener("touchmove",function(e){
				e.preventDefault();
				if (MouseManager.enabled){
					list.push(e);
				}
			},true);
			canvas.addEventListener("touchcancel",function(e){
				e.preventDefault();
				if (MouseManager.enabled){
					list.push(e);
				}
			},true);
			canvas.addEventListener('mousewheel',function(e){
				if (MouseManager.enabled)list.push(e);
			});
			canvas.addEventListener('DOMMouseScroll',function(e){
				if (MouseManager.enabled)list.push(e);
			});
		}

		__proto.initEvent=function(e,nativeEvent){
			var _this=this;
			_this._event._stoped=false;
			_this._event.nativeEvent=nativeEvent || e;
			_this._target=null;
			this._point.setTo(e.pageX || e.clientX,e.pageY || e.clientY);
			this._stage._canvasTransform.invertTransformPoint(this._point);
			_this.mouseX=this._point.x;
			_this.mouseY=this._point.y;
			_this._event.touchId=e.identifier || 0;
			this._tTouchID=_this._event.touchId;
			var evt;
			evt=TouchManager.I._event;
			evt._stoped=false;
			evt.nativeEvent=_this._event.nativeEvent;
			evt.touchId=_this._event.touchId;
		}

		__proto.checkMouseWheel=function(e){
			this._event.delta=e.wheelDelta ? e.wheelDelta *0.025 :-e.detail;
			var _lastOvers=TouchManager.I.getLastOvers();
			for (var i=0,n=_lastOvers.length;i < n;i++){
				var ele=_lastOvers[i];
				ele.event("mousewheel",this._event.setTo("mousewheel",ele,this._target));
			}
		}

		// _stage.event(Event.MOUSE_WHEEL,_event.setTo(Event.MOUSE_WHEEL,_stage,_target));
		__proto.onMouseMove=function(ele){
			TouchManager.I.onMouseMove(ele,this._tTouchID);
		}

		__proto.onMouseDown=function(ele){
			if (Input.isInputting && Laya.stage.focus && Laya.stage.focus["focus"] && !Laya.stage.focus.contains(this._target)){
				var pre_input=Laya.stage.focus['_tf'] || Laya.stage.focus;
				var new_input=ele['_tf'] || ele;
				if ((new_input instanceof laya.display.Input )&& new_input.multiline==pre_input.multiline)
					pre_input['_focusOut']();
				else
				pre_input.focus=false;
			}
			TouchManager.I.onMouseDown(ele,this._tTouchID,this._isLeftMouse);
		}

		__proto.onMouseUp=function(ele){
			TouchManager.I.onMouseUp(ele,this._tTouchID,this._isLeftMouse);
		}

		__proto.check=function(sp,mouseX,mouseY,callBack){
			this._point.setTo(mouseX,mouseY);
			sp.fromParentPoint(this._point);
			mouseX=this._point.x;
			mouseY=this._point.y;
			var scrollRect=sp.scrollRect;
			if (scrollRect){
				this._rect.setTo(scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height);
				if (!this._rect.contains(mouseX,mouseY))return false;
			}
			if (!this.disableMouseEvent){
				if (sp.hitTestPrior && !sp.mouseThrough && !this.hitTest(sp,mouseX,mouseY)){
					return false;
				}
				for (var i=sp._childs.length-1;i >-1;i--){
					var child=sp._childs[i];
					if (!child.destroyed && child.mouseEnabled && child.visible){
						if (this.check(child,mouseX,mouseY,callBack))return true;
					}
				}
			};
			var isHit=(sp.hitTestPrior && !sp.mouseThrough && !this.disableMouseEvent)? true :this.hitTest(sp,mouseX,mouseY);
			if (isHit){
				this._target=sp;
				callBack.call(this,sp);
				}else if (callBack===this.onMouseUp && sp===this._stage){
				this._target=this._stage;
				callBack.call(this,this._target);
			}
			return isHit;
		}

		__proto.hitTest=function(sp,mouseX,mouseY){
			var isHit=false;
			if (sp.scrollRect){
				mouseX-=sp.scrollRect.x;
				mouseY-=sp.scrollRect.y;
			}
			if ((sp.hitArea instanceof laya.utils.HitArea )){
				return sp.hitArea.isHit(mouseX,mouseY);
			}
			if (sp.width > 0 && sp.height > 0 || sp.mouseThrough || sp.hitArea){
				if (!sp.mouseThrough){
					var hitRect=this._rect;
					if (sp.hitArea)hitRect=sp.hitArea;
					else hitRect.setTo(0,0,sp.width,sp.height);
					isHit=hitRect.contains(mouseX,mouseY);
					}else {
					isHit=sp.getGraphicBounds().contains(mouseX,mouseY);
				}
			}
			return isHit;
		}

		/**
		*执行事件处理。
		*/
		__proto.runEvent=function(){
			var len=this._eventList.length;
			if (!len)return;
			var _this=this;
			var i=0;
			while (i < len){
				var evt=this._eventList[i];
				if (evt.type!=='mousemove')this._prePoint.x=this._prePoint.y=-1000000;
				switch (evt.type){
					case 'mousedown':
						this._touchIDs[0]=this._id++;
						if (!MouseManager._isTouchRespond){
							_this._isLeftMouse=evt.button===0;
							_this.initEvent(evt);
							_this.check(_this._stage,_this.mouseX,_this.mouseY,_this.onMouseDown);
						}else
						MouseManager._isTouchRespond=false;
						break ;
					case 'mouseup':
						_this._isLeftMouse=evt.button===0;
						_this.initEvent(evt);
						_this.check(_this._stage,_this.mouseX,_this.mouseY,_this.onMouseUp);
						break ;
					case 'mousemove':
						if ((Math.abs(this._prePoint.x-evt.clientX)+Math.abs(this._prePoint.y-evt.clientY))>=this.mouseMoveAccuracy){
							this._prePoint.x=evt.clientX;
							this._prePoint.y=evt.clientY;
							_this.initEvent(evt);
							_this.check(_this._stage,_this.mouseX,_this.mouseY,_this.onMouseMove);
						}
						break ;
					case "touchstart":
						MouseManager._isTouchRespond=true;
						_this._isLeftMouse=true;
						var touches=evt.changedTouches;
						for (var j=0,n=touches.length;j < n;j++){
							var touch=touches[j];
							if (MouseManager.multiTouchEnabled || isNaN(this._curTouchID)){
								this._curTouchID=touch.identifier;
								if (this._id % 200===0)this._touchIDs={};
								this._touchIDs[touch.identifier]=this._id++;
								_this.initEvent(touch,evt);
								_this.check(_this._stage,_this.mouseX,_this.mouseY,_this.onMouseDown);
							}
						}
						break ;
					case "touchend":
					case "touchcancel":
						MouseManager._isTouchRespond=true;
						_this._isLeftMouse=true;
						var touchends=evt.changedTouches;
						for (j=0,n=touchends.length;j < n;j++){
							touch=touchends[j];
							if (MouseManager.multiTouchEnabled || touch.identifier==this._curTouchID){
								this._curTouchID=NaN;
								_this.initEvent(touch,evt);
								var isChecked=false;
								isChecked=_this.check(_this._stage,_this.mouseX,_this.mouseY,_this.onMouseUp);
								if (!isChecked){
									_this.onMouseUp(null);
								}
							}
						}
						break ;
					case "touchmove":;
						var touchemoves=evt.changedTouches;
						for (j=0,n=touchemoves.length;j < n;j++){
							touch=touchemoves[j];
							if (MouseManager.multiTouchEnabled || touch.identifier==this._curTouchID){
								_this.initEvent(touch,evt);
								_this.check(_this._stage,_this.mouseX,_this.mouseY,_this.onMouseMove);
							}
						}
						break ;
					case "wheel":
					case "mousewheel":
					case "DOMMouseScroll":
						_this.checkMouseWheel(evt);
						break ;
					case "mouseout":
						_this._stage.event("mouseout",_this._event.setTo("mouseout",_this._stage,_this._stage));
						break ;
					case "mouseover":
						_this._stage.event("mouseover",_this._event.setTo("mouseover",_this._stage,_this._stage));
						break ;
					}
				i++;
			}
			this._eventList.length=0;
		}

		MouseManager.enabled=true;
		MouseManager.multiTouchEnabled=true;
		MouseManager._isTouchRespond=false;
		__static(MouseManager,
		['instance',function(){return this.instance=new MouseManager();}
		]);
		return MouseManager;
	})()


	/**
	*@private
	*Touch事件管理类，处理多点触控下的鼠标事件
	*/
	//class laya.events.TouchManager
	var TouchManager=(function(){
		function TouchManager(){
			this.preOvers=[];
			this.preDowns=[];
			this.preRightDowns=[];
			this.enable=true;
			this._lastClickTime=0;
			this._event=new Event();
		}

		__class(TouchManager,'laya.events.TouchManager');
		var __proto=TouchManager.prototype;
		/**
		*从touch表里查找对应touchID的数据
		*@param touchID touch ID
		*@param arr touch表
		*@return
		*
		*/
		__proto.getTouchFromArr=function(touchID,arr){
			var i=0,len=0;
			len=arr.length;
			var tTouchO;
			for (i=0;i < len;i++){
				tTouchO=arr[i];
				if (tTouchO.id==touchID){
					return tTouchO;
				}
			}
			return null;
		}

		/**
		*从touch表里移除一个元素
		*@param touchID touch ID
		*@param arr touch表
		*
		*/
		__proto.removeTouchFromArr=function(touchID,arr){
			var i=0;
			for (i=arr.length-1;i >=0;i--){
				if (arr[i].id==touchID){
					arr.splice(i,1);
				}
			}
		}

		/**
		*创建一个touch数据
		*@param ele 当前的根节点
		*@param touchID touchID
		*@return
		*
		*/
		__proto.createTouchO=function(ele,touchID){
			var rst;
			rst=Pool.getItem("TouchData")|| {};
			rst.id=touchID;
			rst.tar=ele;
			return rst;
		}

		/**
		*处理touchStart
		*@param ele 根节点
		*@param touchID touchID
		*@param isLeft （可选）是否为左键
		*/
		__proto.onMouseDown=function(ele,touchID,isLeft){
			(isLeft===void 0)&& (isLeft=false);
			if (!this.enable)
				return;
			var preO;
			var tO;
			var arrs;
			preO=this.getTouchFromArr(touchID,this.preOvers);
			arrs=this.getEles(ele,null,TouchManager._tEleArr);
			if (!preO){
				tO=this.createTouchO(ele,touchID);
				this.preOvers.push(tO);
				}else {
				preO.tar=ele;
			}
			if (Browser.onMobile)
				this.sendEvents(arrs,"mouseover",touchID);
			var preDowns;
			preDowns=isLeft ? this.preDowns :this.preRightDowns;
			preO=this.getTouchFromArr(touchID,preDowns);
			if (!preO){
				tO=this.createTouchO(ele,touchID);
				preDowns.push(tO);
				}else {
				preO.tar=ele;
			}
			this.sendEvents(arrs,isLeft ? "mousedown" :"rightmousedown",touchID);
		}

		/**
		*派发事件。
		*@param eles 对象列表。
		*@param type 事件类型。
		*@param touchID （可选）touchID，默认为0。
		*/
		__proto.sendEvents=function(eles,type,touchID){
			(touchID===void 0)&& (touchID=0);
			var i=0,len=0;
			len=eles.length;
			this._event._stoped=false;
			var _target;
			_target=eles[0];
			var tE;
			for (i=0;i < len;i++){
				tE=eles[i];
				if (tE.destroyed)return;
				tE.event(type,this._event.setTo(type,tE,_target));
				if (this._event._stoped)
					break ;
			}
		}

		/**
		*获取对象列表。
		*@param start 起始节点。
		*@param end 结束节点。
		*@param rst 返回值。如果此值不为空，则将其赋值为计算结果，从而避免创建新数组；如果此值为空，则创建新数组返回。
		*@return Array 返回节点列表。
		*/
		__proto.getEles=function(start,end,rst){
			if (!rst){
				rst=[];
				}else {
				rst.length=0;
			}
			while (start && start !=end){
				rst.push(start);
				start=start.parent;
			}
			return rst;
		}

		/**
		*touchMove时处理out事件和over时间。
		*@param eleNew 新的根节点。
		*@param elePre 旧的根节点。
		*@param touchID （可选）touchID，默认为0。
		*/
		__proto.checkMouseOutAndOverOfMove=function(eleNew,elePre,touchID){
			(touchID===void 0)&& (touchID=0);
			if (elePre==eleNew)
				return;
			var tar;
			var arrs;
			var i=0,len=0;
			if (elePre.contains(eleNew)){
				arrs=this.getEles(eleNew,elePre,TouchManager._tEleArr);
				this.sendEvents(arrs,"mouseover",touchID);
				}else if (eleNew.contains(elePre)){
				arrs=this.getEles(elePre,eleNew,TouchManager._tEleArr);
				this.sendEvents(arrs,"mouseout",touchID);
				}else {
				arrs=TouchManager._tEleArr;
				arrs.length=0;
				var oldArr;
				oldArr=this.getEles(elePre,null,TouchManager._oldArr);
				var newArr;
				newArr=this.getEles(eleNew,null,TouchManager._newArr);
				len=oldArr.length;
				var tIndex=0;
				for (i=0;i < len;i++){
					tar=oldArr[i];
					tIndex=newArr.indexOf(tar);
					if (tIndex >=0){
						newArr.splice(tIndex,newArr.length-tIndex);
						break ;
						}else {
						arrs.push(tar);
					}
				}
				if (arrs.length > 0){
					this.sendEvents(arrs,"mouseout",touchID);
				}
				if (newArr.length > 0){
					this.sendEvents(newArr,"mouseover",touchID);
				}
			}
		}

		/**
		*处理TouchMove事件
		*@param ele 根节点
		*@param touchID touchID
		*
		*/
		__proto.onMouseMove=function(ele,touchID){
			if (!this.enable)
				return;
			var preO;
			preO=this.getTouchFromArr(touchID,this.preOvers);
			var arrs;
			arrs=this.getEles(ele,null,TouchManager._tEleArr);
			var tO;
			if (!preO){
				this.sendEvents(arrs,"mouseover",touchID);
				this.preOvers.push(this.createTouchO(ele,touchID));
				}else {
				this.checkMouseOutAndOverOfMove(ele,preO.tar);
				preO.tar=ele;
			}
			this.sendEvents(arrs,"mousemove",touchID);
		}

		__proto.getLastOvers=function(){
			TouchManager._tEleArr.length=0;
			if (this.preOvers.length > 0 && this.preOvers[0].tar){
				return this.getEles(this.preOvers[0].tar,null,TouchManager._tEleArr);
			}
			TouchManager._tEleArr.push(Laya.stage);
			return TouchManager._tEleArr;
		}

		/**
		*处理TouchEnd事件
		*@param ele 根节点
		*@param touchID touchID
		*@param isLeft 是否为左键
		*/
		__proto.onMouseUp=function(ele,touchID,isLeft){
			(isLeft===void 0)&& (isLeft=false);
			if (!this.enable)
				return;
			var preO;
			var tO;
			var arrs;
			var oldArr;
			var i=0,len=0;
			var tar;
			var sendArr;
			var onMobile=Browser.onMobile;
			arrs=this.getEles(ele,null,TouchManager._tEleArr);
			this.sendEvents(arrs,isLeft ? "mouseup" :"rightmouseup",touchID);
			var preDowns;
			preDowns=isLeft ? this.preDowns :this.preRightDowns;
			preO=this.getTouchFromArr(touchID,preDowns);
			if (!preO){
				}else {
				var isDouble=false;
				var now=Browser.now();
				isDouble=now-this._lastClickTime < 300;
				this._lastClickTime=now;
				if (ele==preO.tar){
					sendArr=arrs;
					}else {
					oldArr=this.getEles(preO.tar,null,TouchManager._oldArr);
					sendArr=TouchManager._newArr;
					sendArr.length=0;
					len=oldArr.length;
					for (i=0;i < len;i++){
						tar=oldArr[i];
						if (arrs.indexOf(tar)>=0){
							sendArr.push(tar);
						}
					}
				}
				if (sendArr.length > 0){
					this.sendEvents(sendArr,isLeft ? "click" :"rightclick",touchID);
				}
				if (isLeft && isDouble){
					this.sendEvents(sendArr,"doubleclick",touchID);
				}
				this.removeTouchFromArr(touchID,preDowns);
				preO.tar=null;
				Pool.recover("TouchData",preO);
			}
			preO=this.getTouchFromArr(touchID,this.preOvers);
			if (!preO){
				}else {
				if (onMobile){
					sendArr=this.getEles(preO.tar,null,sendArr);
					if (sendArr && sendArr.length > 0){
						this.sendEvents(sendArr,"mouseout",touchID);
					}
					this.removeTouchFromArr(touchID,this.preOvers);
					preO.tar=null;
					Pool.recover("TouchData",preO);
				}
			}
		}

		TouchManager._oldArr=[];
		TouchManager._newArr=[];
		TouchManager._tEleArr=[];
		__static(TouchManager,
		['I',function(){return this.I=new TouchManager();}
		]);
		return TouchManager;
	})()


	/**
	*<code>Filter</code> 是滤镜基类。
	*/
	//class laya.filters.Filter
	var Filter=(function(){
		function Filter(){
			this._action=null;
		}

		__class(Filter,'laya.filters.Filter');
		var __proto=Filter.prototype;
		Laya.imps(__proto,{"laya.filters.IFilter":true})
		/**@private */
		__proto.callNative=function(sp){}
		/**@private 滤镜类型。*/
		__getset(0,__proto,'type',function(){return-1});
		/**@private 滤镜动作。*/
		__getset(0,__proto,'action',function(){return this._action });
		Filter.BLUR=0x10;
		Filter.COLOR=0x20;
		Filter.GLOW=0x08;
		Filter._filterStart=null
		Filter._filterEnd=null
		Filter._EndTarget=null
		Filter._recycleScope=null
		Filter._filter=null
		Filter._useSrc=null
		Filter._endSrc=null
		Filter._useOut=null
		Filter._endOut=null
		return Filter;
	})()


	/**
	*@private
	*<code>ColorFilterAction</code> 是一个颜色滤镜应用类。
	*/
	//class laya.filters.ColorFilterAction
	var ColorFilterAction=(function(){
		function ColorFilterAction(){
			this.data=null;
		}

		__class(ColorFilterAction,'laya.filters.ColorFilterAction');
		var __proto=ColorFilterAction.prototype;
		Laya.imps(__proto,{"laya.filters.IFilterAction":true})
		/**
		*给指定的对象应用颜色滤镜。
		*@param srcCanvas 需要应用画布对象。
		*@return 应用了滤镜后的画布对象。
		*/
		__proto.apply=function(srcCanvas){
			var ctx=srcCanvas.ctx.ctx;
			var canvas=srcCanvas.ctx.ctx.canvas;
			if (canvas.width==0 || canvas.height==0)return canvas;
			var imgdata=ctx.getImageData(0,0,canvas.width,canvas.height);
			var data=imgdata.data;
			var nData;
			for (var i=0,n=data.length;i < n;i+=4){
				nData=this.getColor(data[i],data[i+1],data[i+2],data[i+3]);
				if (data[i+3]==0)continue ;
				data[i]=nData[0];
				data[i+1]=nData[1];
				data[i+2]=nData[2];
				data[i+3]=nData[3];
			}
			ctx.putImageData(imgdata,0,0);
			return srcCanvas;
		}

		__proto.getColor=function(red,green,blue,alpha){
			var rst=[];
			if (this.data._mat && this.data._alpha){
				var mat=this.data._mat;
				var tempAlpha=this.data._alpha;
				rst[0]=mat[0] *red+mat[1] *green+mat[2] *blue+mat[3] *alpha+tempAlpha[0];
				rst[1]=mat[4] *red+mat[5] *green+mat[6] *blue+mat[7] *alpha+tempAlpha[1];
				rst[2]=mat[8] *red+mat[9] *green+mat[10] *blue+mat[11] *alpha+tempAlpha[2];
				rst[3]=mat[12] *red+mat[13] *green+mat[14] *blue+mat[15] *alpha+tempAlpha[3];
			}
			return rst;
		}

		return ColorFilterAction;
	})()


	//class laya.filters.webgl.FilterActionGL
	var FilterActionGL=(function(){
		function FilterActionGL(){}
		__class(FilterActionGL,'laya.filters.webgl.FilterActionGL');
		var __proto=FilterActionGL.prototype;
		Laya.imps(__proto,{"laya.filters.IFilterActionGL":true})
		__proto.setValue=function(shader){}
		__proto.setValueMix=function(shader){}
		__proto.apply3d=function(scope,sprite,context,x,y){return null;}
		__proto.apply=function(srcCanvas){return null;}
		__getset(0,__proto,'typeMix',function(){
			return 0;
		});

		return FilterActionGL;
	})()


	/**
	*@private
	*/
	//class laya.html.utils.HTMLParse
	var HTMLParse=(function(){
		function HTMLParse(){};
		__class(HTMLParse,'laya.html.utils.HTMLParse');
		HTMLParse.parse=function(ower,xmlString,url){
			xmlString=xmlString.replace(/<br>/g,"<br/>");
			xmlString="<root>"+xmlString+"</root>";
			xmlString=xmlString.replace(HTMLParse.spacePattern,HTMLParse.char255);
			var xml=Utils$2.parseXMLFromString(xmlString);
			HTMLParse._parseXML(ower,xml.childNodes[0].childNodes,url);
		}

		HTMLParse._parseXML=function(parent,xml,url,href){
			var i=0,n=0;
			if (xml.join || xml.item){
				for (i=0,n=xml.length;i < n;++i){
					HTMLParse._parseXML(parent,xml[i],url,href);
				}
				}else {
				var node;
				var nodeName;
				if (xml.nodeType==3){
					var txt;
					if ((parent instanceof laya.html.dom.HTMLDivElement )){
						if (xml.nodeName==null){
							xml.nodeName="#text";
						}
						nodeName=xml.nodeName.toLowerCase();
						txt=xml.textContent.replace(/^\s+|\s+$/g,'');
						if (txt.length > 0){
							node=ClassUtils.getInstance(nodeName);
							if (node){
								parent.addChild(node);
								((node).innerTEXT=txt.replace(HTMLParse.char255AndOneSpacePattern," "));
							}
						}
						}else {
						txt=xml.textContent.replace(/^\s+|\s+$/g,'');
						if (txt.length > 0){
							((parent).innerTEXT=txt.replace(HTMLParse.char255AndOneSpacePattern," "));
						}
					}
					return;
					}else {
					nodeName=xml.nodeName.toLowerCase();
					if (nodeName=="#comment")return;
					node=ClassUtils.getInstance(nodeName);
					if (node){
						node=parent.addChild(node);
						(node).URI=url;
						(node).href=href;
						var attributes=xml.attributes;
						if (attributes && attributes.length > 0){
							for (i=0,n=attributes.length;i < n;++i){
								var attribute=attributes[i];
								var attrName=attribute.nodeName;
								var value=attribute.value;
								node._setAttributes(attrName,value);
							}
						}
						HTMLParse._parseXML(node,xml.childNodes,url,(node).href);
						}else {
						HTMLParse._parseXML(parent,xml.childNodes,url,href);
					}
				}
			}
		}

		HTMLParse.char255=String.fromCharCode(255);
		HTMLParse.spacePattern=/&nbsp;|&#160;/g;
		HTMLParse.char255AndOneSpacePattern=new RegExp(String.fromCharCode(255)+"|(\\s+)","g");
		return HTMLParse;
	})()


	/**
	*@private
	*HTML的布局类
	*对HTML的显示对象进行排版
	*/
	//class laya.html.utils.Layout
	var Layout=(function(){
		function Layout(){};
		__class(Layout,'laya.html.utils.Layout');
		Layout.later=function(element){
			if (Layout._will==null){
				Layout._will=[];
				Laya.stage.frameLoop(1,null,function(){
					if (Layout._will.length < 1)
						return;
					for (var i=0;i < Layout._will.length;i++){
						laya.html.utils.Layout.layout(Layout._will[i]);
					}
					Layout._will.length=0;
				});
			}
			Layout._will.push(element);
		}

		Layout.layout=function(element){
			if (!element || !element._style)return null;
			if ((element._style._type & 0x200)===0)
				return null;
			element.getStyle()._type &=~0x200;
			var arr=Layout._multiLineLayout(element);
			if (Render.isConchApp&&element["layaoutCallNative"]){
				(element).layaoutCallNative();
			}
			return arr;
		}

		Layout._multiLineLayout=function(element){
			var elements=new Array;
			element._addChildsToLayout(elements);
			var i=0,n=elements.length,j=0;
			var style=element._getCSSStyle();
			var letterSpacing=style.letterSpacing;
			var leading=style.leading;
			var lineHeight=style.lineHeight;
			var widthAuto=style._widthAuto()|| !style.wordWrap;
			var width=widthAuto ? 999999 :element.width;
			var height=element.height;
			var maxWidth=0;
			var exWidth=style.italic ? style.fontSize / 3 :0;
			var align=style._getAlign();
			var valign=style._getValign();
			var endAdjust=valign!==0 || align!==0 || lineHeight !=0;
			var oneLayout;
			var x=0;
			var y=0;
			var w=0;
			var h=0;
			var tBottom=0;
			var lines=new Array;
			var curStyle;
			var curPadding;
			var curLine=lines[0]=new LayoutLine();
			var newLine=false,nextNewline=false;
			var htmlWord;
			var sprite;
			curLine.h=0;
			if (style.italic)
				width-=style.fontSize / 3;
			var tWordWidth=0;
			var tLineFirstKey=true;
			function addLine (){
				curLine.y=y;
				y+=curLine.h+leading;
				curLine.mWidth=tWordWidth;
				tWordWidth=0;
				curLine=new LayoutLine();
				lines.push(curLine);
				curLine.h=0;
				x=0;
				tLineFirstKey=true;
				newLine=false;
			}
			for (i=0;i < n;i++){
				oneLayout=elements[i];
				if (oneLayout==null){
					if (!tLineFirstKey){
						x+=Layout.DIV_ELEMENT_PADDING;
					}
					curLine.wordStartIndex=curLine.elements.length;
					continue ;
				}
				tLineFirstKey=false;
				if ((oneLayout instanceof laya.html.dom.HTMLBrElement )){
					addLine();
					curLine.y=y;
					curLine.h=lineHeight;
					continue ;
					}else if (oneLayout._isChar()){
					htmlWord=oneLayout;
					if (!htmlWord.isWord){
						if (lines.length > 0 && (x+w)> width && curLine.wordStartIndex > 0){
							var tLineWord=0;
							tLineWord=curLine.elements.length-curLine.wordStartIndex+1;
							curLine.elements.length=curLine.wordStartIndex;
							i-=tLineWord;
							addLine();
							continue ;
						}
						newLine=false;
						tWordWidth+=htmlWord.width;
						}else {
						newLine=nextNewline || (htmlWord.char==='\n');
						curLine.wordStartIndex=curLine.elements.length;
					}
					w=htmlWord.width+letterSpacing;
					h=htmlWord.height;
					nextNewline=false;
					newLine=newLine || ((x+w)> width);
					newLine && addLine();
					curLine.minTextHeight=Math.min(curLine.minTextHeight,oneLayout.height);
					}else {
					curStyle=oneLayout._getCSSStyle();
					sprite=oneLayout;
					curPadding=curStyle.padding;
					curStyle._getCssFloat()===0 || (endAdjust=true);
					newLine=nextNewline || curStyle.lineElement;
					w=sprite.width *sprite._style._tf.scaleX+curPadding[1]+curPadding[3]+letterSpacing;
					h=sprite.height *sprite._style._tf.scaleY+curPadding[0]+curPadding[2];
					nextNewline=curStyle.lineElement;
					newLine=newLine || ((x+w)> width && curStyle.wordWrap);
					newLine && addLine();
				}
				curLine.elements.push(oneLayout);
				curLine.h=Math.max(curLine.h,h);
				oneLayout.x=x;
				oneLayout.y=y;
				x+=w;
				curLine.w=x-letterSpacing;
				curLine.y=y;
				maxWidth=Math.max(x+exWidth,maxWidth);
			}
			y=curLine.y+curLine.h;
			if (endAdjust){
				var tY=0;
				var tWidth=width;
				if (widthAuto && element.width > 0){
					tWidth=element.width;
				}
				for (i=0,n=lines.length;i < n;i++){
					lines[i].updatePos(0,tWidth,i,tY,align,valign,lineHeight);
					tY+=Math.max(lineHeight,lines[i].h+leading);
				}
				y=tY;
			}
			widthAuto && (element.width=maxWidth);
			(y > element.height)&& (element.height=y);
			return [maxWidth,y];
		}

		Layout._will=null
		Layout.DIV_ELEMENT_PADDING=0;
		return Layout;
	})()


	/**
	*@private
	*/
	//class laya.html.utils.LayoutLine
	var LayoutLine=(function(){
		function LayoutLine(){
			this.x=0;
			this.y=0;
			this.w=0;
			this.h=0;
			this.wordStartIndex=0;
			this.minTextHeight=99999;
			this.mWidth=0;
			this.elements=new Array;
		}

		__class(LayoutLine,'laya.html.utils.LayoutLine');
		var __proto=LayoutLine.prototype;
		/**
		*底对齐（默认）
		*@param left
		*@param width
		*@param dy
		*@param align 水平
		*@param valign 垂直
		*@param lineHeight 行高
		*/
		__proto.updatePos=function(left,width,lineNum,dy,align,valign,lineHeight){
			var w=0;
			var one
			if (this.elements.length > 0){
				one=this.elements[this.elements.length-1];
				w=one.x+one.width-this.elements[0].x;
			};
			var dx=0,ddy=NaN;
			align===1 && (dx=(width-w)/ 2);
			align===2 && (dx=(width-w));
			lineHeight===0 || valign !=0 || (valign=1);
			for (var i=0,n=this.elements.length;i < n;i++){
				one=this.elements[i];
				var tCSSStyle=one._getCSSStyle();
				dx!==0 && (one.x+=dx);
				switch (tCSSStyle._getValign()){
					case 0:
						one.y=dy;
						break ;
					case 1:;
						var tMinTextHeight=0;
						if (this.minTextHeight !=99999){
							tMinTextHeight=this.minTextHeight;
						};
						var tBottomLineY=(tMinTextHeight+lineHeight)/ 2;
						tBottomLineY=Math.max(tBottomLineY,this.h);
						if ((one instanceof laya.html.dom.HTMLImageElement )){
							ddy=dy+tBottomLineY-one.height;
							}else {
							ddy=dy+tBottomLineY-one.height;
						}
						one.y=ddy;
						break ;
					case 2:
						one.y=dy+(lineHeight-one.height);
						break ;
					}
			}
		}

		return LayoutLine;
	})()


	/**
	*tiledMap是整个地图的核心
	*地图以层级来划分地图（例如：地表层，植被层，建筑层）
	*每层又以分块（GridSprite)来处理显示对象，只显示在视口区域的区
	*每块又包括N*N个格子（tile)
	*格子类型又分为动画格子跟图片格子两种
	*@author ...
	*/
	//class laya.map.TiledMap
	var TiledMap=(function(){
		var GRect,TileMapAniData,TileSet;
		function TiledMap(){
			this._jsonData=null;
			this._tileTexSetArr=[];
			this._texArray=[];
			this._x=0;
			this._y=0;
			this._width=0;
			this._height=0;
			this._mapW=0;
			this._mapH=0;
			this._mapTileW=0;
			this._mapTileH=0;
			this._mapSprite=null;
			this._layerArray=[];
			this._renderLayerArray=[];
			this._gridArray=[];
			this._showGridKey=false;
			this._totalGridNum=0;
			this._gridW=0;
			this._gridH=0;
			this._gridWidth=450;
			this._gridHeight=450;
			this._jsonLoader=null;
			this._loader=null;
			this._tileSetArray=[];
			this._currTileSet=null;
			this._completeHandler=null;
			this._index=0;
			this._animationDic={};
			this._properties=null;
			this._tileProperties={};
			this._tileProperties2={};
			this._orientation="orthogonal";
			this._renderOrder="right-down";
			this._colorArray=["FF","00","33","66"];
			this._scale=1;
			this._pivotScaleX=0.5;
			this._pivotScaleY=0.5;
			this._centerX=0;
			this._centerY=0;
			this._viewPortX=0;
			this._viewPortY=0;
			this._viewPortWidth=0;
			this._viewPortHeight=0;
			this._enableLinear=true;
			this._resPath=null;
			this._pathArray=null;
			this._limitRange=false;
			this._fastDirty=true;
			this.autoCache=true;
			this.autoCacheType="normal";
			this.enableMergeLayer=false;
			this.removeCoveredTile=false;
			this.showGridTextureCount=false;
			this.antiCrack=true;
			this.cacheAllAfterInit=false;
			this._rect=new Rectangle();
			this._paddingRect=new Rectangle();
			this._mapRect=new GRect();
			this._mapLogicRect=new GRect();
			this._mapLastRect=new GRect();
			this._mapSprite=new Sprite();
		}

		__class(TiledMap,'laya.map.TiledMap');
		var __proto=TiledMap.prototype;
		/**
		*创建地图
		*@param mapName JSON文件名字
		*@param viewRect 视口区域
		*@param completeHandler 地图创建完成的回调函数
		*@param viewRectPadding 视口扩充区域，把视口区域上、下、左、右扩充一下，防止视口移动时的穿帮
		*@param gridSize grid大小
		*@param enableLinear 是否开启线性取样（为false时，可以解决地图黑线的问题，但画质会锐化）
		*@param limitRange 把地图限制在显示区域
		*/
		__proto.createMap=function(mapName,viewRect,completeHandler,viewRectPadding,gridSize,enableLinear,limitRange){
			(enableLinear===void 0)&& (enableLinear=true);
			(limitRange===void 0)&& (limitRange=false);
			this._enableLinear=enableLinear;
			this._limitRange=limitRange;
			this._rect.x=viewRect.x;
			this._rect.y=viewRect.y;
			this._rect.width=viewRect.width;
			this._rect.height=viewRect.height;
			this._viewPortWidth=viewRect.width / this._scale;
			this._viewPortHeight=viewRect.height / this._scale;
			this._completeHandler=completeHandler;
			if (viewRectPadding){
				this._paddingRect.copyFrom(viewRectPadding);
			}
			else {
				this._paddingRect.setTo(0,0,0,0);
			}
			if (gridSize){
				this._gridWidth=gridSize.x;
				this._gridHeight=gridSize.y;
			};
			var tIndex=mapName.lastIndexOf("/");
			if (tIndex >-1){
				this._resPath=mapName.substr(0,tIndex);
				this._pathArray=this._resPath.split("/");
			}
			else {
				this._resPath="";
				this._pathArray=[];
			}
			this._jsonLoader=new Loader();
			this._jsonLoader.once("complete",this,this.onJsonComplete);
			this._jsonLoader.load(mapName,"json",false);
		}

		/**
		*json文件读取成功后，解析里面的纹理数据，进行加载
		*@param e JSON数据
		*/
		__proto.onJsonComplete=function(e){
			var tJsonData=this._jsonData=e;
			this._properties=tJsonData.properties;
			this._orientation=tJsonData.orientation;
			this._renderOrder=tJsonData.renderorder;
			this._mapW=tJsonData.width;
			this._mapH=tJsonData.height;
			this._mapTileW=tJsonData.tilewidth;
			this._mapTileH=tJsonData.tileheight;
			this._width=this._mapTileW *this._mapW;
			this._height=this._mapTileH *this._mapH;
			if (this._orientation=="staggered"){
				this._height=(0.5+this._mapH *0.5)*this._mapTileH;
			}
			this._mapLastRect.top=this._mapLastRect.bottom=this._mapLastRect.left=this._mapLastRect.right=-1;
			var tArray=tJsonData.tilesets;
			var tileset;
			var tTileSet;
			var i=0;
			for (i=0;i < tArray.length;i++){
				tileset=tArray[i];
				tTileSet=new TileSet();
				tTileSet.init(tileset);
				if (tTileSet.properties &&tTileSet.properties.ignore){
					continue ;
				}
				this._tileProperties[i]=tTileSet.tileproperties;
				this.addTileProperties(tTileSet.tileproperties);
				this._tileSetArray.push(tTileSet);
				var tTiles=tileset.tiles;
				if (tTiles){
					for (var p in tTiles){
						var tAnimation=tTiles[p].animation;
						if (tAnimation){
							var tAniData=new TileMapAniData();
							this._animationDic[p]=tAniData;
							for (var j=0;j < tAnimation.length;j++){
								var tAnimationItem=tAnimation[j];
								tAniData.mAniIdArray.push(tAnimationItem.tileid);
								tAniData.mDurationTimeArray.push(tAnimationItem.duration);
							}
						}
					}
				}
			}
			this._tileTexSetArr.push(null);
			if (this._tileSetArray.length > 0){
				tTileSet=this._currTileSet=this._tileSetArray.shift();
				this._loader=new Loader();
				this._loader.once("complete",this,this.onTextureComplete);
				var tPath=this.mergePath(this._resPath,tTileSet.image);
				this._loader.load(tPath,"image",false);
			}
		}

		/**
		*合并路径
		*@param resPath
		*@param relativePath
		*@return
		*/
		__proto.mergePath=function(resPath,relativePath){
			var tResultPath="";
			var tImageArray=relativePath.split("/");
			var tParentPathNum=0;
			var i=0;
			for (i=tImageArray.length-1;i >=0;i--){
				if (tImageArray[i]==".."){
					tParentPathNum++;
				}
			}
			if (tParentPathNum==0){
				if (this._pathArray.length > 0){
					tResultPath=resPath+"/"+relativePath;
				}
				else {
					tResultPath=relativePath;
				}
				return tResultPath;
			};
			var tSrcNum=this._pathArray.length-tParentPathNum;
			if (tSrcNum < 0){
				console.log("[error]path does not exist",this._pathArray,tImageArray,resPath,relativePath);
			}
			for (i=0;i < tSrcNum;i++){
				if (i==0){
					tResultPath+=this._pathArray[i];
				}
				else {
					tResultPath=tResultPath+"/"+this._pathArray[i];
				}
			}
			for (i=tParentPathNum;i < tImageArray.length;i++){
				tResultPath=tResultPath+"/"+tImageArray[i];
			}
			return tResultPath;
		}

		/**
		*纹理加载完成，如果所有的纹理加载，开始初始化地图
		*@param e 纹理数据
		*/
		__proto.onTextureComplete=function(e){
			var json=this._jsonData;
			var tTexture=e;
			if (Render.isWebGL && (!this._enableLinear)){
				tTexture.bitmap.minFifter=0x2600;
				tTexture.bitmap.magFifter=0x2600;
				tTexture.bitmap.enableMerageInAtlas=false;
			}
			this._texArray.push(tTexture);
			var tSubTexture=null;
			var tTileSet=this._currTileSet;
			var tTileTextureW=tTileSet.tilewidth;
			var tTileTextureH=tTileSet.tileheight;
			var tImageWidth=tTileSet.imagewidth;
			var tImageHeight=tTileSet.imageheight;
			var tFirstgid=tTileSet.firstgid;
			var tTileWNum=Math.floor((tImageWidth-tTileSet.margin-tTileTextureW)/ (tTileTextureW+tTileSet.spacing))+1;
			var tTileHNum=Math.floor((tImageHeight-tTileSet.margin-tTileTextureH)/ (tTileTextureH+tTileSet.spacing))+1;
			var tTileTexSet=null;
			for (var i=0;i < tTileHNum;i++){
				for (var j=0;j < tTileWNum;j++){
					tTileTexSet=new TileTexSet();
					tTileTexSet.offX=tTileSet.titleoffsetX;
					tTileTexSet.offY=tTileSet.titleoffsetY-(tTileTextureH-this._mapTileH);
					tTileTexSet.texture=Texture.createFromTexture(tTexture,tTileSet.margin+(tTileTextureW+tTileSet.spacing)*j,tTileSet.margin+(tTileTextureH+tTileSet.spacing)*i,tTileTextureW,tTileTextureH);
					if(this.antiCrack)
						this.adptTexture(tTileTexSet.texture);
					this._tileTexSetArr.push(tTileTexSet);
					tTileTexSet.gid=this._tileTexSetArr.length;
				}
			}
			if (this._tileSetArray.length > 0){
				tTileSet=this._currTileSet=this._tileSetArray.shift();
				this._loader.once("complete",this,this.onTextureComplete);
				var tPath=this.mergePath(this._resPath,tTileSet.image);
				this._loader.load(tPath,"image",false);
			}
			else {
				this._currTileSet=null;
				this.initMap();
			}
		}

		__proto.adptTexture=function(tex){
			if (!tex)return;
			var pX=tex.uv[0];
			var pX1=tex.uv[2];
			var pY=tex.uv[1];
			var pY1=tex.uv[7];
			var dW=1 / tex.bitmap.width;
			var dH=1 / tex.bitmap.height;
			tex.uv[0]=tex.uv[6]=pX+dW;
			tex.uv[2]=tex.uv[4]=pX1-dW;
			tex.uv[1]=tex.uv[3]=pY+dH;
			tex.uv[5]=tex.uv[7]=pY1-dH;
		}

		/**
		*初始化地图
		*/
		__proto.initMap=function(){
			var i=0,n=0;
			for (var p in this._animationDic){
				var tTileTexSet=this.getTexture(parseInt(p)+1);
				var tAniData=this._animationDic[p];
				if (tAniData.mAniIdArray.length > 0){
					tTileTexSet.textureArray=[];
					tTileTexSet.durationTimeArray=tAniData.mDurationTimeArray;
					tTileTexSet.isAnimation=true;
					tTileTexSet.animationTotalTime=0;
					for (i=0,n=tTileTexSet.durationTimeArray.length;i < n;i++){
						tTileTexSet.animationTotalTime+=tTileTexSet.durationTimeArray[i];
					}
					for (i=0,n=tAniData.mAniIdArray.length;i < n;i++){
						var tTexture=this.getTexture(tAniData.mAniIdArray[i]+1);
						tTileTexSet.textureArray.push(tTexture);
					}
				}
			}
			this._gridWidth=Math.floor(this._gridWidth / this._mapTileW)*this._mapTileW;
			this._gridHeight=Math.floor(this._gridHeight / this._mapTileH)*this._mapTileH;
			if (this._gridWidth < this._mapTileW){
				this._gridWidth=this._mapTileW;
			}
			if (this._gridHeight < this._mapTileH){
				this._gridHeight=this._mapTileH;
			}
			this._gridW=Math.ceil(this._width / this._gridWidth);
			this._gridH=Math.ceil(this._height / this._gridHeight);
			this._totalGridNum=this._gridW *this._gridH;
			for (i=0;i < this._gridH;i++){
				var tGridArray=[];
				this._gridArray.push(tGridArray);
				for (var j=0;j < this._gridW;j++){
					tGridArray.push(null);
				}
			};
			var tLayerArray=this._jsonData.layers;
			var isFirst=true;
			var tTarLayerID=1;
			var tLayerTarLayerName;
			var preLayerTarName;
			var preLayer;
			for (var tLayerLoop=0;tLayerLoop < tLayerArray.length;tLayerLoop++){
				var tLayerData=tLayerArray[tLayerLoop];
				if (tLayerData.visible==true){
					var tMapLayer=new MapLayer();
					tMapLayer.init(tLayerData,this);
					if (!this.enableMergeLayer){
						this._mapSprite.addChild(tMapLayer);
						this._renderLayerArray.push(tMapLayer);
						}else{
						tLayerTarLayerName=tMapLayer.getLayerProperties("layer");
						isFirst=isFirst || (!preLayer)|| (tLayerTarLayerName !=preLayerTarName);
						if (isFirst){
							isFirst=false;
							tMapLayer.tarLayer=tMapLayer;
							preLayer=tMapLayer;
							this._mapSprite.addChild(tMapLayer);
							this._renderLayerArray.push(tMapLayer);
							}else{
							tMapLayer.tarLayer=preLayer;
						}
						preLayerTarName=tLayerTarLayerName;
					}
					this._layerArray.push(tMapLayer);
				}
			}
			if (this.removeCoveredTile){
				this.adptTiledMapData();
			}
			if (this.cacheAllAfterInit){
				this.cacheAllGrid();
			}
			this.moveViewPort(this._rect.x,this._rect.y);
			if (this._completeHandler !=null){
				this._completeHandler.run();
			}
		}

		//这里应该发送消息，通知上层，地图创建完成
		__proto.addTileProperties=function(tileDataDic){
			var key;
			for (key in tileDataDic){
				this._tileProperties2[key]=tileDataDic[key];
			}
		}

		__proto.getTileUserData=function(id,sign,defaultV){
			if (!this._tileProperties2 || !this._tileProperties2[id] || !(sign in this._tileProperties2[id]))return defaultV;
			return this._tileProperties2[id][sign];
		}

		__proto.adptTiledMapData=function(){
			var i=0,len=0;
			len=this._layerArray.length;
			var tLayer;
			var noNeeds={};
			var tDatas;
			for (i=len-1;i >=0;i--){
				tLayer=this._layerArray[i];
				tDatas=tLayer._mapData;
				if (!tDatas)continue ;
				this.removeCoverd(tDatas,noNeeds);
				this.collectCovers(tDatas,noNeeds,i);
			}
		}

		__proto.removeCoverd=function(datas,noNeeds){
			var i=0,len=0;
			len=datas.length;
			for (i=0;i < len;i++){
				if (noNeeds[i]){
					datas[i]=0;
				}
			}
		}

		__proto.collectCovers=function(datas,noNeeds,layer){
			var i=0,len=0;
			len=datas.length;
			var tTileData=0;
			var isCover=0;
			for (i=0;i < len;i++){
				tTileData=datas[i];
				if (tTileData > 0){
					isCover=this.getTileUserData(tTileData-1,"type",0);
					if (isCover > 0){
						noNeeds[i]=tTileData;
					}
				}
			}
		}

		/**
		*得到一块指定的地图纹理
		*@param index 纹理的索引值，默认从1开始
		*@return
		*/
		__proto.getTexture=function(index){
			if (index < this._tileTexSetArr.length){
				return this._tileTexSetArr[index];
			}
			return null;
		}

		/**
		*得到地图的自定义属性
		*@param name 属性名称
		*@return
		*/
		__proto.getMapProperties=function(name){
			if (this._properties){
				return this._properties[name];
			}
			return null;
		}

		/**
		*得到tile自定义属性
		*@param index 地图块索引
		*@param id 具体的TileSetID
		*@param name 属性名称
		*@return
		*/
		__proto.getTileProperties=function(index,id,name){
			if (this._tileProperties[index] && this._tileProperties[index][id]){
				return this._tileProperties[index][id][name];
			}
			return null;
		}

		/**
		*通过纹理索引，生成一个可控制物件
		*@param index 纹理的索引值，默认从1开始
		*@return
		*/
		__proto.getSprite=function(index,width,height){
			if (0 < this._tileTexSetArr.length){
				var tGridSprite=new GridSprite();
				tGridSprite.initData(this,true);
				tGridSprite.size(width,height);
				var tTileTexSet=this._tileTexSetArr[index];
				if (tTileTexSet !=null && tTileTexSet.texture !=null){
					if (tTileTexSet.isAnimation){
						var tAnimationSprite=new TileAniSprite();
						this._index++;
						tAnimationSprite.setTileTextureSet(this._index.toString(),tTileTexSet);
						tGridSprite.addAniSprite(tAnimationSprite);
						tGridSprite.addChild(tAnimationSprite);
					}
					else {
						tGridSprite.graphics.drawTexture(tTileTexSet.texture,0,0,width,height);
					}
					tGridSprite.drawImageNum++;
				}
				return tGridSprite;
			}
			return null;
		}

		/**
		*设置视口的缩放中心点（例如：scaleX=scaleY=0.5,就是以视口中心缩放）
		*@param scaleX
		*@param scaleY
		*/
		__proto.setViewPortPivotByScale=function(scaleX,scaleY){
			this._pivotScaleX=scaleX;
			this._pivotScaleY=scaleY;
			this._fastDirty=true;
		}

		/**
		*移动视口
		*@param moveX 视口的坐标x
		*@param moveY 视口的坐标y
		*/
		__proto.moveViewPort=function(moveX,moveY){
			this._x=-moveX;
			this._y=-moveY;
			if (this._fastDirty){
				this._rect.x=moveX;
				this._rect.y=moveY;
				this.updateViewPort();
				}else{
				var dx=NaN,dy=NaN;
				dx=moveX-this._rect.x;
				dy=moveY-this._rect.y;
				this._rect.x=moveX;
				this._rect.y=moveY;
				this.updateViewPortFast(dx,dy);
			}
		}

		/**
		*改变视口大小
		*@param moveX 视口的坐标x
		*@param moveY 视口的坐标y
		*@param width 视口的宽
		*@param height 视口的高
		*/
		__proto.changeViewPort=function(moveX,moveY,width,height){
			if (moveX==this._rect.x && moveY==this._rect.y && width==this._rect.width && height==this._rect.height)return;
			if (width==this._rect.width && height==this._rect.height){
				this.moveViewPort(moveX,moveY);
				return;
			}
			this._fastDirty=true;
			this._x=-moveX;
			this._y=-moveY;
			this._rect.x=moveX;
			this._rect.y=moveY;
			this._rect.width=width;
			this._rect.height=height;
			this._viewPortWidth=width / this._scale;
			this._viewPortHeight=height / this._scale;
			this.updateViewPort();
		}

		/**
		*在锚点的基础上计算，通过宽和高，重新计算视口
		*@param width 新视口宽
		*@param height 新视口高
		*@param rect 返回的结果
		*@return
		*/
		__proto.changeViewPortBySize=function(width,height,rect){
			if (rect==null){
				rect=new Rectangle();
			}
			this._centerX=this._rect.x+this._rect.width *this._pivotScaleX;
			this._centerY=this._rect.y+this._rect.height *this._pivotScaleY;
			rect.x=this._centerX-width *this._pivotScaleX;
			rect.y=this._centerY-height *this._pivotScaleY;
			rect.width=width;
			rect.height=height;
			this.changeViewPort(rect.x,rect.y,rect.width,rect.height);
			return rect;
		}

		/**
		*快速更新视口 ,只有在视口大小和各种缩放信息没有改变时才可以使用这个函数更新
		*@param dx 视口偏移x
		*@param dy 视口偏移y
		*/
		__proto.updateViewPortFast=function(dx,dy){
			this._centerX+=dx;
			this._centerY+=dy;
			this._viewPortX+=dx;
			this._viewPortY+=dy;
			var posChanged=false;
			var dyG=dy / this._gridHeight;
			var dxG=dx / this._gridWidth;
			this._mapLogicRect.top+=dyG;
			this._mapLogicRect.bottom+=dyG;
			this._mapLogicRect.left+=dxG;
			this._mapLogicRect.right+=dxG;
			this._mapRect.top=0|this._mapLogicRect.top;
			this._mapRect.bottom=0|this._mapLogicRect.bottom;
			this._mapRect.left=0|this._mapLogicRect.left;
			this._mapRect.right=0|this._mapLogicRect.right;
			if (this._mapRect.top !=this._mapLastRect.top || this._mapRect.bottom !=this._mapLastRect.bottom || this._mapRect.left !=this._mapLastRect.left || this._mapRect.right !=this._mapLastRect.right){
				this.clipViewPort();
				this._mapLastRect.top=this._mapRect.top;
				this._mapLastRect.bottom=this._mapRect.bottom;
				this._mapLastRect.left=this._mapRect.left;
				this._mapLastRect.right=this._mapRect.right;
				posChanged=true;
			};posChanged=posChanged|| (dx !=0 || dy !=0);
			if (!posChanged)return;
			this.updateMapLayersPos();
		}

		/**
		*刷新地图层坐标
		*/
		__proto.updateMapLayersPos=function(){
			var tMapLayer;
			var len=this._renderLayerArray.length;
			for (var i=0;i < len;i++){
				tMapLayer=this._renderLayerArray[i];
				if (tMapLayer._gridSpriteArray.length > 0){
					tMapLayer.updateAloneObject();
					tMapLayer.pos(-this._viewPortX,-this._viewPortY);
				}
			}
		}

		/**
		*刷新视口
		*/
		__proto.updateViewPort=function(){
			this._fastDirty=false;
			var dw=this._rect.width *this._pivotScaleX;
			var dh=this._rect.height *this._pivotScaleY;
			this._centerX=this._rect.x+dw;
			this._centerY=this._rect.y+dh;
			var posChanged=false;
			var preValue=this._viewPortX;
			this._viewPortX=this._centerX-dw / this._scale;
			if (preValue !=this._viewPortX){
				posChanged=true;
				}else {
				preValue=this._viewPortY;
			}
			this._viewPortY=this._centerY-dh/ this._scale;
			if (!posChanged && preValue !=this._viewPortY){
				posChanged=true;
			}
			if (this._limitRange){
				var tRight=this._viewPortX+this._viewPortWidth;
				if (tRight > this._width){
					this._viewPortX=this._width-this._viewPortWidth;
				};
				var tBottom=this._viewPortY+this._viewPortHeight;
				if (tBottom > this._height){
					this._viewPortY=this._height-this._viewPortHeight;
				}
				if (this._viewPortX < 0){
					this._viewPortX=0;
				}
				if (this._viewPortY < 0){
					this._viewPortY=0;
				}
			};
			var tPaddingRect=this._paddingRect;
			this._mapLogicRect.top=(this._viewPortY-tPaddingRect.y)/ this._gridHeight;
			this._mapLogicRect.bottom=(this._viewPortY+this._viewPortHeight+tPaddingRect.height+tPaddingRect.y)/ this._gridHeight;
			this._mapLogicRect.left=(this._viewPortX-tPaddingRect.x)/ this._gridWidth;
			this._mapLogicRect.right=(this._viewPortX+this._viewPortWidth+tPaddingRect.width+tPaddingRect.x)/ this._gridWidth;
			this._mapRect.top=0|this._mapLogicRect.top;
			this._mapRect.bottom=0|this._mapLogicRect.bottom;
			this._mapRect.left=0|this._mapLogicRect.left;
			this._mapRect.right=0|this._mapLogicRect.right;
			if (this._mapRect.top !=this._mapLastRect.top || this._mapRect.bottom !=this._mapLastRect.bottom || this._mapRect.left !=this._mapLastRect.left || this._mapRect.right !=this._mapLastRect.right){
				this.clipViewPort();
				this._mapLastRect.top=this._mapRect.top;
				this._mapLastRect.bottom=this._mapRect.bottom;
				this._mapLastRect.left=this._mapRect.left;
				this._mapLastRect.right=this._mapRect.right;
				posChanged=true;
			}
			if (!posChanged)return;
			this.updateMapLayersPos();
		}

		/**
		*GRID裁剪
		*/
		__proto.clipViewPort=function(){
			var tSpriteNum=0;
			var tSprite;
			var tIndex=0;
			var tSub=0;
			var tAdd=0;
			var i=0,j=0;
			if (this._mapRect.left > this._mapLastRect.left){
				tSub=this._mapRect.left-this._mapLastRect.left;
				if (tSub > 0){
					for (j=this._mapLastRect.left;j < this._mapLastRect.left+tSub;j++){
						for (i=this._mapLastRect.top;i <=this._mapLastRect.bottom;i++){
							this.hideGrid(j,i);
						}
					}
				}
			}
			else {
				tAdd=Math.min(this._mapLastRect.left,this._mapRect.right+1)-this._mapRect.left;
				if (tAdd > 0){
					for (j=this._mapRect.left;j < this._mapRect.left+tAdd;j++){
						for (i=this._mapRect.top;i <=this._mapRect.bottom;i++){
							this.showGrid(j,i);
						}
					}
				}
			}
			if (this._mapRect.right > this._mapLastRect.right){
				tAdd=this._mapRect.right-this._mapLastRect.right;
				if (tAdd > 0){
					for (j=Math.max(this._mapLastRect.right+1,this._mapRect.left);j <=this._mapLastRect.right+tAdd;j++){
						for (i=this._mapRect.top;i <=this._mapRect.bottom;i++){
							this.showGrid(j,i);
						}
					}
				}
			}
			else {
				tSub=this._mapLastRect.right-this._mapRect.right
				if (tSub > 0){
					for (j=this._mapRect.right+1;j <=this._mapRect.right+tSub;j++){
						for (i=this._mapLastRect.top;i <=this._mapLastRect.bottom;i++){
							this.hideGrid(j,i);
						}
					}
				}
			}
			if (this._mapRect.top > this._mapLastRect.top){
				tSub=this._mapRect.top-this._mapLastRect.top;
				if (tSub > 0){
					for (i=this._mapLastRect.top;i < this._mapLastRect.top+tSub;i++){
						for (j=this._mapLastRect.left;j <=this._mapLastRect.right;j++){
							this.hideGrid(j,i);
						}
					}
				}
			}
			else {
				tAdd=Math.min(this._mapLastRect.top,this._mapRect.bottom+1)-this._mapRect.top;
				if (tAdd > 0){
					for (i=this._mapRect.top;i < this._mapRect.top+tAdd;i++){
						for (j=this._mapRect.left;j <=this._mapRect.right;j++){
							this.showGrid(j,i);
						}
					}
				}
			}
			if (this._mapRect.bottom > this._mapLastRect.bottom){
				tAdd=this._mapRect.bottom-this._mapLastRect.bottom;
				if (tAdd > 0){
					for (i=Math.max(this._mapLastRect.bottom+1,this._mapRect.top);i <=this._mapLastRect.bottom+tAdd;i++){
						for (j=this._mapRect.left;j <=this._mapRect.right;j++){
							this.showGrid(j,i);
						}
					}
				}
			}
			else {
				tSub=this._mapLastRect.bottom-this._mapRect.bottom
				if (tSub > 0){
					for (i=this._mapRect.bottom+1;i <=this._mapRect.bottom+tSub;i++){
						for (j=this._mapLastRect.left;j <=this._mapLastRect.right;j++){
							this.hideGrid(j,i);
						}
					}
				}
			}
		}

		/**
		*显示指定的GRID
		*@param gridX
		*@param gridY
		*/
		__proto.showGrid=function(gridX,gridY){
			if (gridX < 0 || gridX >=this._gridW || gridY < 0 || gridY >=this._gridH){
				return;
			};
			var i=0,j=0;
			var tGridSprite;
			var tTempArray=this._gridArray[gridY][gridX];
			if (tTempArray==null){
				tTempArray=this.getGridArray(gridX,gridY);
			}
			else {
				for (i=0;i < tTempArray.length && i < this._layerArray.length;i++){
					var tLayerSprite=this._layerArray[i];
					if (tLayerSprite && tTempArray[i]){
						tGridSprite=tTempArray[i];
						if (tGridSprite.visible==false && tGridSprite.drawImageNum > 0){
							tGridSprite.show();
						}
					}
				}
			}
		}

		__proto.cacheAllGrid=function(){
			var i=0,j=0;
			var tempArr;
			for (i=0;i < this._gridW;i++){
				for (j=0;j < this._gridH;j++){
					tempArr=this.getGridArray(i,j);
					this.cacheGridsArray(tempArr);
				}
			}
		}

		__proto.cacheGridsArray=function(arr){
			var canvas;
			if (!TiledMap._tempContext){
				TiledMap._tempContext=new RenderContext(1,1,HTMLCanvas.create("AUTO"));
			}
			canvas=TiledMap._tempContext.canvas;
			canvas.context.asBitmap=false;
			var i=0,len=0;
			len=arr.length;
			var tGrid;
			for (i=0;i < len;i++){
				tGrid=arr[i];
				canvas.clear();
				canvas.size(1,1);
				tGrid.render(TiledMap._tempContext,0,0);
				tGrid.hide();
			}
			canvas.clear();
			canvas.size(1,1);
		}

		__proto.getGridArray=function(gridX,gridY){
			var i=0,j=0;
			var tGridSprite;
			var tTempArray=this._gridArray[gridY][gridX];
			if (tTempArray==null){
				tTempArray=this._gridArray[gridY][gridX]=[];
				var tLeft=0;
				var tRight=0;
				var tTop=0;
				var tBottom=0;
				var tGridWidth=this._gridWidth;
				var tGridHeight=this._gridHeight;
				switch (this.orientation){
					case "isometric":
						tLeft=Math.floor(gridX *tGridWidth);
						tRight=Math.floor(gridX *tGridWidth+tGridWidth);
						tTop=Math.floor(gridY *tGridHeight);
						tBottom=Math.floor(gridY *tGridHeight+tGridHeight);
						var tLeft1=0,tRight1=0,tTop1=0,tBottom1=0;
						break ;
					case "staggered":
						tLeft=Math.floor(gridX *tGridWidth / this._mapTileW);
						tRight=Math.floor((gridX *tGridWidth+tGridWidth)/ this._mapTileW);
						tTop=Math.floor(gridY *tGridHeight / (this._mapTileH / 2));
						tBottom=Math.floor((gridY *tGridHeight+tGridHeight)/ (this._mapTileH / 2));
						break ;
					case "orthogonal":
						tLeft=Math.floor(gridX *tGridWidth / this._mapTileW);
						tRight=Math.floor((gridX *tGridWidth+tGridWidth)/ this._mapTileW);
						tTop=Math.floor(gridY *tGridHeight / this._mapTileH);
						tBottom=Math.floor((gridY *tGridHeight+tGridHeight)/ this._mapTileH);
						break ;
					case "hexagonal":;
						var tHeight=this._mapTileH *2 / 3;
						tLeft=Math.floor(gridX *tGridWidth / this._mapTileW);
						tRight=Math.ceil((gridX *tGridWidth+tGridWidth)/ this._mapTileW);
						tTop=Math.floor(gridY *tGridHeight / tHeight);
						tBottom=Math.ceil((gridY *tGridHeight+tGridHeight)/ tHeight);
						break ;
					};
				var tLayer=null;
				var tTGridSprite;
				var tDrawMapLayer;
				for (var z=0;z < this._layerArray.length;z++){
					tLayer=this._layerArray[z];
					if (this.enableMergeLayer){
						if (tLayer.tarLayer !=tDrawMapLayer){
							tTGridSprite=null;
							tDrawMapLayer=tLayer.tarLayer;
						}
						if (!tTGridSprite){
							tTGridSprite=tDrawMapLayer.getDrawSprite(gridX,gridY);
							tTempArray.push(tTGridSprite);
						}
						tGridSprite=tTGridSprite;
					}
					else {
						tGridSprite=tLayer.getDrawSprite(gridX,gridY);
						tTempArray.push(tGridSprite);
					};
					var tColorStr;
					if (this._showGridKey){
						tColorStr="#";
						tColorStr+=this._colorArray[Math.floor(Math.random()*this._colorArray.length)];
						tColorStr+=this._colorArray[Math.floor(Math.random()*this._colorArray.length)];
						tColorStr+=this._colorArray[Math.floor(Math.random()*this._colorArray.length)];
					}
					switch (this.orientation){
						case "isometric":;
							var tHalfTileHeight=this.tileHeight / 2;
							var tHalfTileWidth=this.tileWidth / 2;
							var tHalfMapWidth=this._width / 2;
							tTop1=Math.floor(tTop / tHalfTileHeight);
							tBottom1=Math.floor(tBottom / tHalfTileHeight);
							tLeft1=this._mapW+Math.floor((tLeft-tHalfMapWidth)/ tHalfTileWidth);
							tRight1=this._mapW+Math.floor((tRight-tHalfMapWidth)/ tHalfTileWidth);
							var tMapW=this._mapW *2;
							var tMapH=this._mapH *2;
							if (tTop1 < 0){
								tTop1=0;
							}
							if (tTop1 >=tMapH){
								tTop1=tMapH-1;
							}
							if (tBottom1 < 0){
								tBottom=0;
							}
							if (tBottom1 >=tMapH){
								tBottom1=tMapH-1;
							}
							tGridSprite.zOrder=this._totalGridNum *z+gridY *this._gridW+gridX;
							for (i=tTop1;i < tBottom1;i++){
								for (j=0;j <=i;j++){
									var tIndexX=i-j;
									var tIndexY=j;
									var tIndexValue=(tIndexX-tIndexY)+this._mapW;
									if (tIndexValue > tLeft1 && tIndexValue <=tRight1){
										if (tLayer.drawTileTexture(tGridSprite,tIndexX,tIndexY)){
											tGridSprite.drawImageNum++;
										}
									}
								}
							}
							break ;
						case "staggered":
							tGridSprite.zOrder=z *this._totalGridNum+gridY *this._gridW+gridX;
							for (i=tTop;i < tBottom;i++){
								for (j=tLeft;j < tRight;j++){
									if (tLayer.drawTileTexture(tGridSprite,j,i)){
										tGridSprite.drawImageNum++;
									}
								}
							}
							break ;
						case "orthogonal":
						case "hexagonal":
						switch (this._renderOrder){
							case "right-down":
								tGridSprite.zOrder=z *this._totalGridNum+gridY *this._gridW+gridX;
								for (i=tTop;i < tBottom;i++){
									for (j=tLeft;j < tRight;j++){
										if (tLayer.drawTileTexture(tGridSprite,j,i)){
											tGridSprite.drawImageNum++;
										}
									}
								}
								break ;
							case "right-up":
								tGridSprite.zOrder=z *this._totalGridNum+(this._gridH-1-gridY)*this._gridW+gridX;
								for (i=tBottom-1;i >=tTop;i--){
									for (j=tLeft;j < tRight;j++){
										if (tLayer.drawTileTexture(tGridSprite,j,i)){
											tGridSprite.drawImageNum++;
										}
									}
								}
								break ;
							case "left-down":
								tGridSprite.zOrder=z *this._totalGridNum+gridY *this._gridW+(this._gridW-1-gridX);
								for (i=tTop;i < tBottom;i++){
									for (j=tRight-1;j >=tLeft;j--){
										if (tLayer.drawTileTexture(tGridSprite,j,i)){
											tGridSprite.drawImageNum++;
										}
									}
								}
								break ;
							case "left-up":
								tGridSprite.zOrder=z *this._totalGridNum+(this._gridH-1-gridY)*this._gridW+(this._gridW-1-gridX);
								for (i=tBottom-1;i >=tTop;i--){
									for (j=tRight-1;j >=tLeft;j--){
										if (tLayer.drawTileTexture(tGridSprite,j,i)){
											tGridSprite.drawImageNum++;
										}
									}
								}
								break ;
							}
						break ;
					}
					if (!tGridSprite.isHaveAnimation){
						tGridSprite.autoSize=true;
						if (this.autoCache)
							tGridSprite.cacheAs=this.autoCacheType;
						tGridSprite.autoSize=false;
					}
					if (!this.enableMergeLayer){
						if (tGridSprite.drawImageNum > 0){
							tLayer.addChild(tGridSprite);
							tGridSprite.visible=false;
							tGridSprite.show();
						}
						if (this._showGridKey){
							tGridSprite.graphics.drawRect(0,0,tGridWidth,tGridHeight,null,tColorStr);
						}
						}else{
						if (tTGridSprite && tTGridSprite.drawImageNum > 0&&tDrawMapLayer){
							tDrawMapLayer.addChild(tTGridSprite);
							tTGridSprite.visible=false;
							tTGridSprite.show();
						}
					}
				}
				if (this.enableMergeLayer&&this.showGridTextureCount){
					if (tTGridSprite){
						tTGridSprite.graphics.fillText(tTGridSprite.drawImageNum+"",20,20,null,"#ff0000","");
					}
				}
			}
			return tTempArray;
		}

		/**
		*隐藏指定的GRID
		*@param gridX
		*@param gridY
		*/
		__proto.hideGrid=function(gridX,gridY){
			if (gridX < 0 || gridX >=this._gridW || gridY < 0 || gridY >=this._gridH){
				return;
			};
			var tTempArray=this._gridArray[gridY][gridX];
			if (tTempArray){
				var tGridSprite;
				for (var i=0;i < tTempArray.length;i++){
					tGridSprite=tTempArray[i];
					if (tGridSprite.drawImageNum > 0){
						if (tGridSprite !=null){
							tGridSprite.hide();
						}
					}
				}
			}
		}

		/**
		*得到对象层上的某一个物品
		*@param layerName 层的名称
		*@param objectName 所找物品的名称
		*@return
		*/
		__proto.getLayerObject=function(layerName,objectName){
			var tLayer=null;
			for (var i=0;i < this._layerArray.length;i++){
				tLayer=this._layerArray[i];
				if (tLayer.layerName==layerName){
					break ;
				}
			}
			if (tLayer){
				return tLayer.getObjectByName(objectName);
			}
			return null;
		}

		/**
		*销毁地图
		*/
		__proto.destroy=function(){
			this._orientation="orthogonal";
			this._jsonData=null;
			var i=0;
			var j=0;
			var z=0;
			this._gridArray=[];
			var tTileTexSet;
			for (i=0;i < this._tileTexSetArr.length;i++){
				tTileTexSet=this._tileTexSetArr[i];
				if (tTileTexSet){
					tTileTexSet.clearAll();
				}
			}
			this._tileTexSetArr=[];
			var tTexture;
			for (i=0;i < this._texArray.length;i++){
				tTexture=this._texArray[i];
				tTexture.destroy();
			}
			this._texArray=[];
			this._width=0;
			this._height=0;
			this._mapW=0;
			this._mapH=0;
			this._mapTileW=0;
			this._mapTileH=0;
			this._rect.setTo(0,0,0,0);
			var tLayer;
			for (i=0;i < this._layerArray.length;i++){
				tLayer=this._layerArray[i];
				tLayer.clearAll();
			}
			this._layerArray=[];
			this._renderLayerArray=[];
			if (this._mapSprite){
				this._mapSprite.destroy();
				this._mapSprite=null;
			}
			this._jsonLoader=null;
			this._loader=null;
			var tDic=this._animationDic;
			for (var p in tDic){
				delete tDic[p];
			}
			this._properties=null;
			tDic=this._tileProperties;
			for (p in tDic){
				delete tDic[p];
			}
			this._currTileSet=null;
			this._completeHandler=null;
			this._mapRect.clearAll();
			this._mapLastRect.clearAll();
			this._tileSetArray=[];
			this._gridWidth=450;
			this._gridHeight=450;
			this._gridW=0;
			this._gridH=0;
			this._x=0;
			this._y=0;
			this._index=0;
			this._enableLinear=true;
			this._resPath=null;
			this._pathArray=null;
		}

		/**
		*整个地图的显示容器
		*@return 地图的显示容器
		*/
		__proto.mapSprite=function(){
			return this._mapSprite;
		}

		/**
		*得到指定的MapLayer
		*@param layerName 要找的层名称
		*@return
		*/
		__proto.getLayerByName=function(layerName){
			var tMapLayer;
			for (var i=0;i < this._layerArray.length;i++){
				tMapLayer=this._layerArray[i];
				if (layerName==tMapLayer.layerName){
					return tMapLayer;
				}
			}
			return null;
		}

		/**
		*通过索引得MapLayer
		*@param index 要找的层索引
		*@return
		*/
		__proto.getLayerByIndex=function(index){
			if (index < this._layerArray.length){
				return this._layerArray[index];
			}
			return null;
		}

		/**
		*当前地图类型
		*/
		__getset(0,__proto,'orientation',function(){
			return this._orientation;
		});

		/**
		*@private
		*视口x坐标
		*/
		__getset(0,__proto,'viewPortX',function(){
			return-this._viewPortX;
		});

		/**
		*设置地图缩放
		*@param scale
		*/
		/**
		*得到当前地图的缩放
		*/
		__getset(0,__proto,'scale',function(){
			return this._scale;
			},function(scale){
			if (scale <=0)
				return;
			this._scale=scale;
			this._viewPortWidth=this._rect.width / scale;
			this._viewPortHeight=this._rect.height / scale;
			this._mapSprite.scale(this._scale,this._scale);
			this.updateViewPort();
		});

		/**
		*格子的宽度
		*/
		__getset(0,__proto,'tileWidth',function(){
			return this._mapTileW;
		});

		/**
		*@private
		*视口的y坐标
		*/
		__getset(0,__proto,'viewPortY',function(){
			return-this._viewPortY;
		});

		/**
		*格子的高度
		*/
		__getset(0,__proto,'tileHeight',function(){
			return this._mapTileH;
		});

		/**
		*地图的宽度
		*/
		__getset(0,__proto,'width',function(){
			return this._width;
		});

		/**
		*地图竖向的格子数
		*/
		__getset(0,__proto,'numRowsTile',function(){
			return this._mapH;
		});

		/**
		*地图横向的格子数
		*/
		__getset(0,__proto,'numColumnsTile',function(){
			return this._mapW;
		});

		/**
		*地图的高度
		*/
		__getset(0,__proto,'height',function(){
			return this._height;
		});

		/**
		*@private
		*视口的宽度
		*/
		__getset(0,__proto,'viewPortWidth',function(){
			return this._viewPortWidth;
		});

		/**
		*@private
		*视口的高度
		*/
		__getset(0,__proto,'viewPortHeight',function(){
			return this._viewPortHeight;
		});

		/**
		*地图的x坐标
		*/
		__getset(0,__proto,'x',function(){
			return this._x;
		});

		/**
		*地图的y坐标
		*/
		__getset(0,__proto,'y',function(){
			return this._y;
		});

		/**
		*块的宽度
		*/
		__getset(0,__proto,'gridWidth',function(){
			return this._gridWidth;
		});

		/**
		*块的高度
		*/
		__getset(0,__proto,'gridHeight',function(){
			return this._gridHeight;
		});

		/**
		*地图的横向块数
		*/
		__getset(0,__proto,'numColumnsGrid',function(){
			return this._gridW;
		});

		/**
		*地图的坚向块数
		*/
		__getset(0,__proto,'numRowsGrid',function(){
			return this._gridH;
		});

		/**
		*tile渲染顺序
		*/
		__getset(0,__proto,'renderOrder',function(){
			return this._renderOrder;
		});

		TiledMap.ORIENTATION_ORTHOGONAL="orthogonal";
		TiledMap.ORIENTATION_ISOMETRIC="isometric";
		TiledMap.ORIENTATION_STAGGERED="staggered";
		TiledMap.ORIENTATION_HEXAGONAL="hexagonal";
		TiledMap.RENDERORDER_RIGHTDOWN="right-down";
		TiledMap.RENDERORDER_RIGHTUP="right-up";
		TiledMap.RENDERORDER_LEFTDOWN="left-down";
		TiledMap.RENDERORDER_LEFTUP="left-up";
		TiledMap._tempContext=null
		TiledMap.__init$=function(){
			//class GRect
			GRect=(function(){
				function GRect(){
					this.left=0;
					this.top=0;
					this.right=0;
					this.bottom=0;
				}
				__class(GRect,'');
				var __proto=GRect.prototype;
				__proto.clearAll=function(){
					this.left=this.top=this.right=this.bottom=0;
				}
				return GRect;
			})()
			//class TileMapAniData
			TileMapAniData=(function(){
				function TileMapAniData(){
					this.mAniIdArray=[];
					this.mDurationTimeArray=[];
					this.mTileTexSetArr=[];
				}
				__class(TileMapAniData,'');
				return TileMapAniData;
			})()
			//class TileSet
			TileSet=(function(){
				function TileSet(){
					this.firstgid=0;
					this.image="";
					this.imageheight=0;
					this.imagewidth=0;
					this.margin=0;
					this.name=0;
					this.properties=null;
					this.spacing=0;
					this.tileheight=0;
					this.tilewidth=0;
					this.titleoffsetX=0;
					this.titleoffsetY=0;
					this.tileproperties=null;
				}
				__class(TileSet,'');
				var __proto=TileSet.prototype;
				__proto.init=function(data){
					this.firstgid=data.firstgid;
					this.image=data.image;
					this.imageheight=data.imageheight;
					this.imagewidth=data.imagewidth;
					this.margin=data.margin;
					this.name=data.name;
					this.properties=data.properties;
					this.spacing=data.spacing;
					this.tileheight=data.tileheight;
					this.tilewidth=data.tilewidth;
					this.tileproperties=data.tileproperties;
					var tTileoffset=data.tileoffset;
					if (tTileoffset){
						this.titleoffsetX=tTileoffset.x;
						this.titleoffsetY=tTileoffset.y;
					}
				}
				return TileSet;
			})()
		}

		return TiledMap;
	})()


	/**
	*此类是子纹理类，也包括同类动画的管理
	*TiledMap会把纹理分割成无数子纹理，也可以把其中的某块子纹理替换成一个动画序列
	*本类的实现就是如果发现子纹理被替换成一个动画序列，animationKey会被设为true
	*即animationKey为true,就使用TileAniSprite来做显示，把动画序列根据时间画到TileAniSprite上
	*@author ...
	*/
	//class laya.map.TileTexSet
	var TileTexSet=(function(){
		function TileTexSet(){
			this.gid=-1;
			this.texture=null;
			this.offX=0;
			this.offY=0;
			this.textureArray=null;
			this.durationTimeArray=null;
			this.animationTotalTime=0;
			this.isAnimation=false;
			this._spriteNum=0;
			this._aniDic=null;
			this._frameIndex=0;
			this._time=0;
			this._interval=0;
			this._preFrameTime=0;
		}

		__class(TileTexSet,'laya.map.TileTexSet');
		var __proto=TileTexSet.prototype;
		/**
		*加入一个动画显示对象到此动画中
		*@param aniName //显示对象的名字
		*@param sprite //显示对象
		*/
		__proto.addAniSprite=function(aniName,sprite){
			if (this.animationTotalTime==0){
				return;
			}
			if (this._aniDic==null){
				this._aniDic={};
			}
			if (this._spriteNum==0){
				Laya.timer.frameLoop(3,this,this.animate);
				this._preFrameTime=Browser.now();
				this._frameIndex=0;
				this._time=0;
				this._interval=0;
			}
			this._spriteNum++;
			this._aniDic[aniName]=sprite;
			if (this.textureArray && this._frameIndex < this.textureArray.length){
				var tTileTextureSet=this.textureArray[this._frameIndex];
				this.drawTexture(sprite,tTileTextureSet);
			}
		}

		/**
		*把动画画到所有注册的SPRITE上
		*/
		__proto.animate=function(){
			if (this.textureArray && this.textureArray.length > 0 && this.durationTimeArray && this.durationTimeArray.length > 0){
				var tNow=Browser.now();
				this._interval=tNow-this._preFrameTime;
				this._preFrameTime=tNow;
				if (this._interval > this.animationTotalTime){
					this._interval=this._interval % this.animationTotalTime;
				}
				this._time+=this._interval;
				var tTime=this.durationTimeArray[this._frameIndex];
				while (this._time > tTime){
					this._time-=tTime;
					this._frameIndex++;
					if (this._frameIndex >=this.durationTimeArray.length || this._frameIndex >=this.textureArray.length){
						this._frameIndex=0;
					};
					var tTileTextureSet=this.textureArray[this._frameIndex];
					var tSprite;
					for (var p in this._aniDic){
						tSprite=this._aniDic[p];
						this.drawTexture(tSprite,tTileTextureSet);
					}
					tTime=this.durationTimeArray[this._frameIndex];
				}
			}
		}

		__proto.drawTexture=function(sprite,tileTextSet){
			sprite.graphics.clear();
			sprite.graphics.drawTexture(tileTextSet.texture,tileTextSet.offX,tileTextSet.offY);
		}

		/**
		*移除不需要更新的SPRITE
		*@param _name
		*/
		__proto.removeAniSprite=function(_name){
			if (this._aniDic && this._aniDic[_name]){
				delete this._aniDic[_name];
				this._spriteNum--
				if (this._spriteNum==0){
					Laya.timer.clear(this,this.animate);
				}
			}
		}

		/**
		*显示当前动画的使用情况
		*/
		__proto.showDebugInfo=function(){
			var tInfo=null;
			if (this._spriteNum > 0){
				tInfo="TileTextureSet::gid:"+this.gid.toString()+" 动画数:"+this._spriteNum.toString();
			}
			return tInfo;
		}

		/**
		*清理
		*/
		__proto.clearAll=function(){
			this.gid=-1;
			if (this.texture){
				this.texture.destroy();
				this.texture=null;
			}
			this.offX=0;
			this.offY=0;
			this.textureArray=null;
			this.durationTimeArray=null;
			this.isAnimation=false;
			this._spriteNum=0;
			this._aniDic=null;
			this._frameIndex=0;
			this._preFrameTime=0;
			this._time=0;
			this._interval=0;
		}

		return TileTexSet;
	})()


	/**
	*@private
	*/
	//class laya.maths.Arith
	var Arith=(function(){
		function Arith(){};
		__class(Arith,'laya.maths.Arith');
		Arith.formatR=function(r){
			if (r > Math.PI)r-=Math.PI *2;
			if (r <-Math.PI)r+=Math.PI *2;
			return r;
		}

		Arith.isPOT=function(w,h){
			return (w > 0 && (w & (w-1))===0 && h > 0 && (h & (h-1))===0);
		}

		Arith.setMatToArray=function(mat,array){
			mat.a,mat.b,0,0,mat.c,mat.d,0,0,0,0,1,0,mat.tx+20,mat.ty+20,0,1
			array[0]=mat.a;
			array[1]=mat.b;
			array[4]=mat.c;
			array[5]=mat.d;
			array[12]=mat.tx;
			array[13]=mat.ty;
		}

		return Arith;
	})()


	/**
	*@private
	*计算贝塞尔曲线的工具类。
	*/
	//class laya.maths.Bezier
	var Bezier=(function(){
		function Bezier(){
			this._controlPoints=[new Point(),new Point(),new Point()];
			this._calFun=this.getPoint2;
		}

		__class(Bezier,'laya.maths.Bezier');
		var __proto=Bezier.prototype;
		/**@private */
		__proto._switchPoint=function(x,y){
			var tPoint=this._controlPoints.shift();
			tPoint.setTo(x,y);
			this._controlPoints.push(tPoint);
		}

		/**
		*计算二次贝塞尔点。
		*@param t
		*@param rst
		*
		*/
		__proto.getPoint2=function(t,rst){
			var p1=this._controlPoints[0];
			var p2=this._controlPoints[1];
			var p3=this._controlPoints[2];
			var lineX=Math.pow((1-t),2)*p1.x+2 *t *(1-t)*p2.x+Math.pow(t,2)*p3.x;
			var lineY=Math.pow((1-t),2)*p1.y+2 *t *(1-t)*p2.y+Math.pow(t,2)*p3.y;
			rst.push(lineX,lineY);
		}

		/**
		*计算三次贝塞尔点
		*@param t
		*@param rst
		*
		*/
		__proto.getPoint3=function(t,rst){
			var p1=this._controlPoints[0];
			var p2=this._controlPoints[1];
			var p3=this._controlPoints[2];
			var p4=this._controlPoints[3];
			var lineX=Math.pow((1-t),3)*p1.x+3 *p2.x *t *(1-t)*(1-t)+3 *p3.x *t *t *(1-t)+p4.x *Math.pow(t,3);
			var lineY=Math.pow((1-t),3)*p1.y+3 *p2.y *t *(1-t)*(1-t)+3 *p3.y *t *t *(1-t)+p4.y *Math.pow(t,3);
			rst.push(lineX,lineY);
		}

		/**
		*计算贝塞尔点序列
		*@param count
		*@param rst
		*
		*/
		__proto.insertPoints=function(count,rst){
			var i=NaN;
			count=count > 0 ? count :5;
			var dLen=NaN;
			dLen=1 / count;
			for (i=0;i <=1;i+=dLen){
				this._calFun(i,rst);
			}
		}

		/**
		*获取贝塞尔曲线上的点。
		*@param pList 控制点[x0,y0,x1,y1...]
		*@param inSertCount 每次曲线的插值数量
		*@return
		*
		*/
		__proto.getBezierPoints=function(pList,inSertCount,count){
			(inSertCount===void 0)&& (inSertCount=5);
			(count===void 0)&& (count=2);
			var i=0,len=0;
			len=pList.length;
			if (len < (count+1)*2)return [];
			var rst;
			rst=[];
			switch (count){
				case 2:
					this._calFun=this.getPoint2;
					break ;
				case 3:
					this._calFun=this.getPoint3;
					break ;
				default :
					return [];
				}
			while (this._controlPoints.length <=count){
				this._controlPoints.push(new Point());
			}
			for (i=0;i < count *2;i+=2){
				this._switchPoint(pList[i],pList[i+1]);
			}
			for (i=count *2;i < len;i+=2){
				this._switchPoint(pList[i],pList[i+1]);
				if ((i / 2)% count==0)
					this.insertPoints(inSertCount,rst);
			}
			return rst;
		}

		__static(Bezier,
		['I',function(){return this.I=new Bezier();}
		]);
		return Bezier;
	})()


	/**
	*@private
	*凸包算法。
	*/
	//class laya.maths.GrahamScan
	var GrahamScan=(function(){
		function GrahamScan(){};
		__class(GrahamScan,'laya.maths.GrahamScan');
		GrahamScan.multiply=function(p1,p2,p0){
			return ((p1.x-p0.x)*(p2.y-p0.y)-(p2.x-p0.x)*(p1.y-p0.y));
		}

		GrahamScan.dis=function(p1,p2){
			return (p1.x-p2.x)*(p1.x-p2.x)+(p1.y-p2.y)*(p1.y-p2.y);
		}

		GrahamScan._getPoints=function(count,tempUse,rst){
			(tempUse===void 0)&& (tempUse=false);
			if (!GrahamScan._mPointList)GrahamScan._mPointList=[];
			while (GrahamScan._mPointList.length < count)GrahamScan._mPointList.push(new Point());
			if (!rst)rst=[];
			rst.length=0;
			if (tempUse){
				GrahamScan.getFrom(rst,GrahamScan._mPointList,count);
				}else {
				GrahamScan.getFromR(rst,GrahamScan._mPointList,count);
			}
			return rst;
		}

		GrahamScan.getFrom=function(rst,src,count){
			var i=0;
			for (i=0;i < count;i++){
				rst.push(src[i]);
			}
			return rst;
		}

		GrahamScan.getFromR=function(rst,src,count){
			var i=0;
			for (i=0;i < count;i++){
				rst.push(src.pop());
			}
			return rst;
		}

		GrahamScan.pListToPointList=function(pList,tempUse){
			(tempUse===void 0)&& (tempUse=false);
			var i=0,len=pList.length / 2,rst=GrahamScan._getPoints(len,tempUse,GrahamScan._tempPointList);
			for (i=0;i < len;i++){
				rst[i].setTo(pList[i+i],pList[i+i+1]);
			}
			return rst;
		}

		GrahamScan.pointListToPlist=function(pointList){
			var i=0,len=pointList.length,rst=GrahamScan._temPList,tPoint;
			rst.length=0;
			for (i=0;i < len;i++){
				tPoint=pointList[i];
				rst.push(tPoint.x,tPoint.y);
			}
			return rst;
		}

		GrahamScan.scanPList=function(pList){
			return Utils$2.copyArray(pList,GrahamScan.pointListToPlist(GrahamScan.scan(GrahamScan.pListToPointList(pList,true))));
		}

		GrahamScan.scan=function(PointSet){
			var i=0,j=0,k=0,top=2,tmp,n=PointSet.length,ch;
			var _tmpDic={};
			var key;
			ch=GrahamScan._temArr;
			ch.length=0;
			n=PointSet.length;
			for (i=n-1;i >=0;i--){
				tmp=PointSet[i];
				key=tmp.x+"_"+tmp.y;
				if (!_tmpDic.hasOwnProperty(key)){
					_tmpDic[key]=true;
					ch.push(tmp);
				}
			}
			n=ch.length;
			Utils$2.copyArray(PointSet,ch);
			for (i=1;i < n;i++)
			if ((PointSet[i].y < PointSet[k].y)|| ((PointSet[i].y==PointSet[k].y)&& (PointSet[i].x < PointSet[k].x)))
				k=i;
			tmp=PointSet[0];
			PointSet[0]=PointSet[k];
			PointSet[k]=tmp;
			for (i=1;i < n-1;i++){
				k=i;
				for (j=i+1;j < n;j++)
				if ((GrahamScan.multiply(PointSet[j],PointSet[k],PointSet[0])> 0)|| ((GrahamScan.multiply(PointSet[j],PointSet[k],PointSet[0])==0)&& (GrahamScan.dis(PointSet[0],PointSet[j])< GrahamScan.dis(PointSet[0],PointSet[k]))))
					k=j;
				tmp=PointSet[i];
				PointSet[i]=PointSet[k];
				PointSet[k]=tmp;
			}
			ch=GrahamScan._temArr;
			ch.length=0;
			if (PointSet.length < 3){
				return Utils$2.copyArray(ch,PointSet);
			}
			ch.push(PointSet[0],PointSet[1],PointSet[2]);
			for (i=3;i < n;i++){
				while (ch.length >=2 && GrahamScan.multiply(PointSet[i],ch[ch.length-1],ch[ch.length-2])>=0)ch.pop();
				PointSet[i] && ch.push(PointSet[i]);
			}
			return ch;
		}

		GrahamScan._mPointList=null
		GrahamScan._tempPointList=[];
		GrahamScan._temPList=[];
		GrahamScan._temArr=[];
		return GrahamScan;
	})()


	/**
	*@private
	*<code>MathUtil</code> 是一个数据处理工具类。
	*/
	//class laya.maths.MathUtil
	var MathUtil=(function(){
		function MathUtil(){};
		__class(MathUtil,'laya.maths.MathUtil');
		MathUtil.subtractVector3=function(l,r,o){
			o[0]=l[0]-r[0];
			o[1]=l[1]-r[1];
			o[2]=l[2]-r[2];
		}

		MathUtil.lerp=function(left,right,amount){
			return left *(1-amount)+right *amount;
		}

		MathUtil.scaleVector3=function(f,b,e){
			e[0]=f[0] *b;
			e[1]=f[1] *b;
			e[2]=f[2] *b;
		}

		MathUtil.lerpVector3=function(l,r,t,o){
			var ax=l[0],ay=l[1],az=l[2];
			o[0]=ax+t *(r[0]-ax);
			o[1]=ay+t *(r[1]-ay);
			o[2]=az+t *(r[2]-az);
		}

		MathUtil.lerpVector4=function(l,r,t,o){
			var ax=l[0],ay=l[1],az=l[2],aw=l[3];
			o[0]=ax+t *(r[0]-ax);
			o[1]=ay+t *(r[1]-ay);
			o[2]=az+t *(r[2]-az);
			o[3]=aw+t *(r[3]-aw);
		}

		MathUtil.slerpQuaternionArray=function(a,Offset1,b,Offset2,t,out,Offset3){
			var ax=a[Offset1+0],ay=a[Offset1+1],az=a[Offset1+2],aw=a[Offset1+3],bx=b[Offset2+0],by=b[Offset2+1],bz=b[Offset2+2],bw=b[Offset2+3];
			var omega,cosom,sinom,scale0,scale1;
			cosom=ax *bx+ay *by+az *bz+aw *bw;
			if (cosom < 0.0){
				cosom=-cosom;
				bx=-bx;
				by=-by;
				bz=-bz;
				bw=-bw;
			}
			if ((1.0-cosom)> 0.000001){
				omega=Math.acos(cosom);
				sinom=Math.sin(omega);
				scale0=Math.sin((1.0-t)*omega)/ sinom;
				scale1=Math.sin(t *omega)/ sinom;
				}else {
				scale0=1.0-t;
				scale1=t;
			}
			out[Offset3+0]=scale0 *ax+scale1 *bx;
			out[Offset3+1]=scale0 *ay+scale1 *by;
			out[Offset3+2]=scale0 *az+scale1 *bz;
			out[Offset3+3]=scale0 *aw+scale1 *bw;
			return out;
		}

		MathUtil.getRotation=function(x0,y0,x1,y1){
			return Math.atan2(y1-y0,x1-x0)/ Math.PI *180;
		}

		MathUtil.sortBigFirst=function(a,b){
			if (a==b)
				return 0;
			return b > a ? 1 :-1;
		}

		MathUtil.sortSmallFirst=function(a,b){
			if (a==b)
				return 0;
			return b > a ?-1 :1;
		}

		MathUtil.sortNumBigFirst=function(a,b){
			return parseFloat(b)-parseFloat(a);
		}

		MathUtil.sortNumSmallFirst=function(a,b){
			return parseFloat(a)-parseFloat(b);
		}

		MathUtil.sortByKey=function(key,bigFirst,forceNum){
			(bigFirst===void 0)&& (bigFirst=false);
			(forceNum===void 0)&& (forceNum=true);
			var _sortFun;
			if (bigFirst){
				_sortFun=forceNum ? MathUtil.sortNumBigFirst :MathUtil.sortBigFirst;
				}else {
				_sortFun=forceNum ? MathUtil.sortNumSmallFirst :MathUtil.sortSmallFirst;
			}
			return function (a,b){
				return _sortFun(a[key],b[key]);
			}
		}

		return MathUtil;
	})()


	/**
	*<p> <code>Matrix</code> 类表示一个转换矩阵，它确定如何将点从一个坐标空间映射到另一个坐标空间。</p>
	*<p>您可以对一个显示对象执行不同的图形转换，方法是设置 Matrix 对象的属性，将该 Matrix 对象应用于 Transform 对象的 matrix 属性，然后应用该 Transform 对象作为显示对象的 transform 属性。这些转换函数包括平移（x 和 y 重新定位）、旋转、缩放和倾斜。</p>
	*/
	//class laya.maths.Matrix
	var Matrix=(function(){
		function Matrix(a,b,c,d,tx,ty){
			//this.a=NaN;
			//this.b=NaN;
			//this.c=NaN;
			//this.d=NaN;
			//this.tx=NaN;
			//this.ty=NaN;
			this.inPool=false;
			this.bTransform=false;
			(a===void 0)&& (a=1);
			(b===void 0)&& (b=0);
			(c===void 0)&& (c=0);
			(d===void 0)&& (d=1);
			(tx===void 0)&& (tx=0);
			(ty===void 0)&& (ty=0);
			this.a=a;
			this.b=b;
			this.c=c;
			this.d=d;
			this.tx=tx;
			this.ty=ty;
			this._checkTransform();
		}

		__class(Matrix,'laya.maths.Matrix');
		var __proto=Matrix.prototype;
		/**
		*将本矩阵设置为单位矩阵。
		*@return 返回当前矩形。
		*/
		__proto.identity=function(){
			this.a=this.d=1;
			this.b=this.tx=this.ty=this.c=0;
			this.bTransform=false;
			return this;
		}

		/**@private*/
		__proto._checkTransform=function(){
			return this.bTransform=(this.a!==1 || this.b!==0 || this.c!==0 || this.d!==1);
		}

		/**
		*设置沿 x 、y 轴平移每个点的距离。
		*@param x 沿 x 轴平移每个点的距离。
		*@param y 沿 y 轴平移每个点的距离。
		*@return 返回对象本身
		*/
		__proto.setTranslate=function(x,y){
			this.tx=x;
			this.ty=y;
			return this;
		}

		/**
		*沿 x 和 y 轴平移矩阵，平移的变化量由 x 和 y 参数指定。
		*@param x 沿 x 轴向右移动的量（以像素为单位）。
		*@param y 沿 y 轴向下移动的量（以像素为单位）。
		*@return 返回此矩形对象。
		*/
		__proto.translate=function(x,y){
			this.tx+=x;
			this.ty+=y;
			return this;
		}

		/**
		*对矩阵应用缩放转换。
		*@param x 用于沿 x 轴缩放对象的乘数。
		*@param y 用于沿 y 轴缩放对象的乘数。
		*/
		__proto.scale=function(x,y){
			this.a *=x;
			this.d *=y;
			this.c *=x;
			this.b *=y;
			this.tx *=x;
			this.ty *=y;
			this.bTransform=true;
		}

		/**
		*对 Matrix 对象应用旋转转换。
		*@param angle 以弧度为单位的旋转角度。
		*/
		__proto.rotate=function(angle){
			var cos=Math.cos(angle);
			var sin=Math.sin(angle);
			var a1=this.a;
			var c1=this.c;
			var tx1=this.tx;
			this.a=a1 *cos-this.b *sin;
			this.b=a1 *sin+this.b *cos;
			this.c=c1 *cos-this.d *sin;
			this.d=c1 *sin+this.d *cos;
			this.tx=tx1 *cos-this.ty *sin;
			this.ty=tx1 *sin+this.ty *cos;
			this.bTransform=true;
		}

		/**
		*对 Matrix 对象应用倾斜转换。
		*@param x 沿着 X 轴的 2D 倾斜弧度。
		*@param y 沿着 Y 轴的 2D 倾斜弧度。
		*@return 当前 Matrix 对象。
		*/
		__proto.skew=function(x,y){
			var tanX=Math.tan(x);
			var tanY=Math.tan(y);
			var a1=this.a;
			var b1=this.b;
			this.a+=tanY *this.c;
			this.b+=tanY *this.d;
			this.c+=tanX *a1;
			this.d+=tanX *b1;
			return this;
		}

		/**
		*对指定的点应用当前矩阵的逆转化并返回此点。
		*@param out 待转化的点 Point 对象。
		*@return 返回out
		*/
		__proto.invertTransformPoint=function(out){
			var a1=this.a;
			var b1=this.b;
			var c1=this.c;
			var d1=this.d;
			var tx1=this.tx;
			var n=a1 *d1-b1 *c1;
			var a2=d1 / n;
			var b2=-b1 / n;
			var c2=-c1 / n;
			var d2=a1 / n;
			var tx2=(c1 *this.ty-d1 *tx1)/ n;
			var ty2=-(a1 *this.ty-b1 *tx1)/ n;
			return out.setTo(a2 *out.x+c2 *out.y+tx2,b2 *out.x+d2 *out.y+ty2);
		}

		/**
		*将 Matrix 对象表示的几何转换应用于指定点。
		*@param out 用来设定输出结果的点。
		*@return 返回out
		*/
		__proto.transformPoint=function(out){
			return out.setTo(this.a *out.x+this.c *out.y+this.tx,this.b *out.x+this.d *out.y+this.ty);
		}

		/**
		*将 Matrix 对象表示的几何转换应用于指定点，忽略tx、ty。
		*@param out 用来设定输出结果的点。
		*@return 返回out
		*/
		__proto.transformPointN=function(out){
			return out.setTo(this.a *out.x+this.c *out.y ,this.b *out.x+this.d *out.y);
		}

		/**
		*@private
		*将 Matrix 对象表示的几何转换应用于指定点。
		*@param data 点集合。
		*@param out 存储应用转化的点的列表。
		*@return 返回out数组
		*/
		__proto.transformPointArray=function(data,out){
			var len=data.length;
			for (var i=0;i < len;i+=2){
				var x=data[i],y=data[i+1];
				out[i]=this.a *x+this.c *y+this.tx;
				out[i+1]=this.b *x+this.d *y+this.ty;
			}
			return out;
		}

		/**
		*@private
		*将 Matrix 对象表示的几何缩放转换应用于指定点。
		*@param data 点集合。
		*@param out 存储应用转化的点的列表。
		*@return 返回out数组
		*/
		__proto.transformPointArrayScale=function(data,out){
			var len=data.length;
			for (var i=0;i < len;i+=2){
				var x=data[i],y=data[i+1];
				out[i]=this.a *x+this.c *y;
				out[i+1]=this.b *x+this.d *y;
			}
			return out;
		}

		/**
		*获取 X 轴缩放值。
		*@return X 轴缩放值。
		*/
		__proto.getScaleX=function(){
			return this.b===0 ? this.a :Math.sqrt(this.a *this.a+this.b *this.b);
		}

		/**
		*获取 Y 轴缩放值。
		*@return Y 轴缩放值。
		*/
		__proto.getScaleY=function(){
			return this.c===0 ? this.d :Math.sqrt(this.c *this.c+this.d *this.d);
		}

		/**
		*执行原始矩阵的逆转换。
		*@return 当前矩阵对象。
		*/
		__proto.invert=function(){
			var a1=this.a;
			var b1=this.b;
			var c1=this.c;
			var d1=this.d;
			var tx1=this.tx;
			var n=a1 *d1-b1 *c1;
			this.a=d1 / n;
			this.b=-b1 / n;
			this.c=-c1 / n;
			this.d=a1 / n;
			this.tx=(c1 *this.ty-d1 *tx1)/ n;
			this.ty=-(a1 *this.ty-b1 *tx1)/ n;
			return this;
		}

		/**
		*将 Matrix 的成员设置为指定值。
		*@param a 缩放或旋转图像时影响像素沿 x 轴定位的值。
		*@param b 旋转或倾斜图像时影响像素沿 y 轴定位的值。
		*@param c 旋转或倾斜图像时影响像素沿 x 轴定位的值。
		*@param d 缩放或旋转图像时影响像素沿 y 轴定位的值。
		*@param tx 沿 x 轴平移每个点的距离。
		*@param ty 沿 y 轴平移每个点的距离。
		*@return 当前矩阵对象。
		*/
		__proto.setTo=function(a,b,c,d,tx,ty){
			this.a=a,this.b=b,this.c=c,this.d=d,this.tx=tx,this.ty=ty;
			return this;
		}

		/**
		*将指定矩阵与当前矩阵连接，从而将这两个矩阵的几何效果有效地结合在一起。
		*@param matrix 要连接到源矩阵的矩阵。
		*@return 当前矩阵。
		*/
		__proto.concat=function(matrix){
			var a=this.a;
			var c=this.c;
			var tx=this.tx;
			this.a=a *matrix.a+this.b *matrix.c;
			this.b=a *matrix.b+this.b *matrix.d;
			this.c=c *matrix.a+this.d *matrix.c;
			this.d=c *matrix.b+this.d *matrix.d;
			this.tx=tx *matrix.a+this.ty *matrix.c+matrix.tx;
			this.ty=tx *matrix.b+this.ty *matrix.d+matrix.ty;
			return this;
		}

		/**
		*@private
		*对矩阵应用缩放转换。反向相乘
		*@param x 用于沿 x 轴缩放对象的乘数。
		*@param y 用于沿 y 轴缩放对象的乘数。
		*/
		__proto.scaleEx=function(x,y){
			var ba=this.a,bb=this.b,bc=this.c,bd=this.d;
			if (bb!==0 || bc!==0){
				this.a=x *ba;
				this.b=x *bb;
				this.c=y *bc;
				this.d=y *bd;
				}else {
				this.a=x *ba;
				this.b=0 *bd;
				this.c=0 *ba;
				this.d=y *bd;
			}
			this.bTransform=true;
		}

		/**
		*@private
		*对 Matrix 对象应用旋转转换。反向相乘
		*@param angle 以弧度为单位的旋转角度。
		*/
		__proto.rotateEx=function(angle){
			var cos=Math.cos(angle);
			var sin=Math.sin(angle);
			var ba=this.a,bb=this.b,bc=this.c,bd=this.d;
			if (bb!==0 || bc!==0){
				this.a=cos *ba+sin *bc;
				this.b=cos *bb+sin *bd;
				this.c=-sin *ba+cos *bc;
				this.d=-sin *bb+cos *bd;
				}else {
				this.a=cos *ba;
				this.b=sin *bd;
				this.c=-sin *ba;
				this.d=cos *bd;
			}
			this.bTransform=true;
		}

		/**
		*返回此 Matrix 对象的副本。
		*@return 与原始实例具有完全相同的属性的新 Matrix 实例。
		*/
		__proto.clone=function(){
			var dec=Matrix.create();
			dec.a=this.a;
			dec.b=this.b;
			dec.c=this.c;
			dec.d=this.d;
			dec.tx=this.tx;
			dec.ty=this.ty;
			dec.bTransform=this.bTransform;
			return dec;
		}

		/**
		*将当前 Matrix 对象中的所有矩阵数据复制到指定的 Matrix 对象中。
		*@param dec 要复制当前矩阵数据的 Matrix 对象。
		*@return 已复制当前矩阵数据的 Matrix 对象。
		*/
		__proto.copyTo=function(dec){
			dec.a=this.a;
			dec.b=this.b;
			dec.c=this.c;
			dec.d=this.d;
			dec.tx=this.tx;
			dec.ty=this.ty;
			dec.bTransform=this.bTransform;
			return dec;
		}

		/**
		*返回列出该 Matrix 对象属性的文本值。
		*@return 一个字符串，它包含 Matrix 对象的属性值：a、b、c、d、tx 和 ty。
		*/
		__proto.toString=function(){
			return this.a+","+this.b+","+this.c+","+this.d+","+this.tx+","+this.ty;
		}

		/**
		*销毁此对象。
		*/
		__proto.destroy=function(){
			if (this.inPool)return;
			var cache=Matrix._cache;
			this.inPool=true;
			cache._length || (cache._length=0);
			cache[cache._length++]=this;
			this.a=this.d=1;
			this.b=this.c=this.tx=this.ty=0;
			this.bTransform=false;
		}

		Matrix.mul=function(m1,m2,out){
			var aa=m1.a,ab=m1.b,ac=m1.c,ad=m1.d,atx=m1.tx,aty=m1.ty;
			var ba=m2.a,bb=m2.b,bc=m2.c,bd=m2.d,btx=m2.tx,bty=m2.ty;
			if (bb!==0 || bc!==0){
				out.a=aa *ba+ab *bc;
				out.b=aa *bb+ab *bd;
				out.c=ac *ba+ad *bc;
				out.d=ac *bb+ad *bd;
				out.tx=ba *atx+bc *aty+btx;
				out.ty=bb *atx+bd *aty+bty;
				}else {
				out.a=aa *ba;
				out.b=ab *bd;
				out.c=ac *ba;
				out.d=ad *bd;
				out.tx=ba *atx+btx;
				out.ty=bd *aty+bty;
			}
			return out;
		}

		Matrix.mul16=function(m1,m2,out){
			var aa=m1.a,ab=m1.b,ac=m1.c,ad=m1.d,atx=m1.tx,aty=m1.ty;
			var ba=m2.a,bb=m2.b,bc=m2.c,bd=m2.d,btx=m2.tx,bty=m2.ty;
			if (bb!==0 || bc!==0){
				out[0]=aa *ba+ab *bc;
				out[1]=aa *bb+ab *bd;
				out[4]=ac *ba+ad *bc;
				out[5]=ac *bb+ad *bd;
				out[12]=ba *atx+bc *aty+btx;
				out[13]=bb *atx+bd *aty+bty;
				}else {
				out[0]=aa *ba;
				out[1]=ab *bd;
				out[4]=ac *ba;
				out[5]=ad *bd;
				out[12]=ba *atx+btx;
				out[13]=bd *aty+bty;
			}
			return out;
		}

		Matrix.mulPre=function(m1,ba,bb,bc,bd,btx,bty,out){
			var aa=m1.a,ab=m1.b,ac=m1.c,ad=m1.d,atx=m1.tx,aty=m1.ty;
			if (bb!==0 || bc!==0){
				out.a=aa *ba+ab *bc;
				out.b=aa *bb+ab *bd;
				out.c=ac *ba+ad *bc;
				out.d=ac *bb+ad *bd;
				out.tx=ba *atx+bc *aty+btx;
				out.ty=bb *atx+bd *aty+bty;
				}else {
				out.a=aa *ba;
				out.b=ab *bd;
				out.c=ac *ba;
				out.d=ad *bd;
				out.tx=ba *atx+btx;
				out.ty=bd *aty+bty;
			}
			return out;
		}

		Matrix.mulPos=function(m1,aa,ab,ac,ad,atx,aty,out){
			var ba=m1.a,bb=m1.b,bc=m1.c,bd=m1.d,btx=m1.tx,bty=m1.ty;
			if (bb!==0 || bc!==0){
				out.a=aa *ba+ab *bc;
				out.b=aa *bb+ab *bd;
				out.c=ac *ba+ad *bc;
				out.d=ac *bb+ad *bd;
				out.tx=ba *atx+bc *aty+btx;
				out.ty=bb *atx+bd *aty+bty;
				}else {
				out.a=aa *ba;
				out.b=ab *bd;
				out.c=ac *ba;
				out.d=ad *bd;
				out.tx=ba *atx+btx;
				out.ty=bd *aty+bty;
			}
			return out;
		}

		Matrix.preMul=function(parent,self,out){
			var pa=parent.a,pb=parent.b,pc=parent.c,pd=parent.d;
			var na=self.a,nb=self.b,nc=self.c,nd=self.d,ntx=self.tx,nty=self.ty;
			out.a=na *pa;
			out.b=out.c=0;
			out.d=nd *pd;
			out.tx=ntx *pa+parent.tx;
			out.ty=nty *pd+parent.ty;
			if (nb!==0 || nc!==0 || pb!==0 || pc!==0){
				out.a+=nb *pc;
				out.d+=nc *pb;
				out.b+=na *pb+nb *pd;
				out.c+=nc *pa+nd *pc;
				out.tx+=nty *pc;
				out.ty+=ntx *pb;
			}
			return out;
		}

		Matrix.preMulXY=function(parent,x,y,out){
			var pa=parent.a,pb=parent.b,pc=parent.c,pd=parent.d;
			out.a=pa;
			out.b=pb;
			out.c=pc;
			out.d=pd;
			out.tx=x *pa+parent.tx+y *pc;
			out.ty=y *pd+parent.ty+x *pb;
			return out;
		}

		Matrix.create=function(){
			var cache=Matrix._cache;
			var mat=!cache._length ? (new Matrix()):cache[--cache._length];
			mat.inPool=false;
			return mat;
		}

		Matrix.EMPTY=new Matrix();
		Matrix.TEMP=new Matrix();
		Matrix._cache=[];
		return Matrix;
	})()


	/**
	*<code>Point</code> 对象表示二维坐标系统中的某个位置，其中 x 表示水平轴，y 表示垂直轴。
	*/
	//class laya.maths.Point
	var Point=(function(){
		function Point(x,y){
			//this.x=NaN;
			//this.y=NaN;
			(x===void 0)&& (x=0);
			(y===void 0)&& (y=0);
			this.x=x;
			this.y=y;
		}

		__class(Point,'laya.maths.Point');
		var __proto=Point.prototype;
		/**
		*将 <code>Point</code> 的成员设置为指定值。
		*@param x 水平坐标。
		*@param y 垂直坐标。
		*@return 当前 Point 对象。
		*/
		__proto.setTo=function(x,y){
			this.x=x;
			this.y=y;
			return this;
		}

		/**
		*计算当前点和目标点(x，y)的距离。
		*@param x 水平坐标。
		*@param y 垂直坐标。
		*@return 返回当前点和目标点之间的距离。
		*/
		__proto.distance=function(x,y){
			return Math.sqrt((this.x-x)*(this.x-x)+(this.y-y)*(this.y-y));
		}

		/**返回包含 x 和 y 坐标的值的字符串。*/
		__proto.toString=function(){
			return this.x+","+this.y;
		}

		/**
		*标准化向量。
		*/
		__proto.normalize=function(){
			var d=Math.sqrt(this.x *this.x+this.y *this.y);
			if (d > 0){
				var id=1.0 / d;
				this.x *=id;
				this.y *=id;
			}
		}

		Point.TEMP=new Point();
		Point.EMPTY=new Point();
		return Point;
	})()


	/**
	*<p><code>Rectangle</code> 对象是按其位置（由它左上角的点 (x,y)确定）以及宽度和高度定义的区域。</p>
	*<p>Rectangle 类的 x、y、width 和 height 属性相互独立；更改一个属性的值不会影响其他属性。</p>
	*/
	//class laya.maths.Rectangle
	var Rectangle=(function(){
		function Rectangle(x,y,width,height){
			//this.x=NaN;
			//this.y=NaN;
			//this.width=NaN;
			//this.height=NaN;
			(x===void 0)&& (x=0);
			(y===void 0)&& (y=0);
			(width===void 0)&& (width=0);
			(height===void 0)&& (height=0);
			this.x=x;
			this.y=y;
			this.width=width;
			this.height=height;
		}

		__class(Rectangle,'laya.maths.Rectangle');
		var __proto=Rectangle.prototype;
		/**
		*将 Rectangle 的属性设置为指定值。
		*@param x x 矩形左上角的 X 轴坐标。
		*@param y x 矩形左上角的 Y 轴坐标。
		*@param width 矩形的宽度。
		*@param height 矩形的高。
		*@return 返回属性值修改后的矩形对象本身。
		*/
		__proto.setTo=function(x,y,width,height){
			this.x=x;
			this.y=y;
			this.width=width;
			this.height=height;
			return this;
		}

		/**
		*复制 source 对象的属性值到此矩形对象中。
		*@param sourceRect 源 Rectangle 对象。
		*@return 返回属性值修改后的矩形对象本身。
		*/
		__proto.copyFrom=function(source){
			this.x=source.x;
			this.y=source.y;
			this.width=source.width;
			this.height=source.height;
			return this;
		}

		/**
		*确定由此 Rectangle 对象定义的矩形区域内是否包含指定的点。
		*@param x 点的 X 轴坐标值（水平位置）。
		*@param y 点的 Y 轴坐标值（垂直位置）。
		*@return 如果 Rectangle 对象包含指定的点，则值为 true；否则为 false。
		*/
		__proto.contains=function(x,y){
			if (this.width <=0 || this.height <=0)return false;
			if (x >=this.x && x < this.right){
				if (y >=this.y && y < this.bottom){
					return true;
				}
			}
			return false;
		}

		/**
		*确定在 rect 参数中指定的对象是否与此 Rectangle 对象相交。此方法检查指定的 Rectangle 对象的 x、y、width 和 height 属性，以查看它是否与此 Rectangle 对象相交。
		*@param rect Rectangle 对象。
		*@return 如果传入的矩形对象与此对象相交，则返回 true 值，否则返回 false。
		*/
		__proto.intersects=function(rect){
			return !(rect.x > (this.x+this.width)|| (rect.x+rect.width)< this.x || rect.y > (this.y+this.height)|| (rect.y+rect.height)< this.y);
		}

		/**
		*如果在 rect 参数中指定的 Rectangle 对象与此 Rectangle 对象相交，则返回交集区域作为 Rectangle 对象。如果矩形不相交，则此方法返回null。
		*@param rect 待比较的矩形区域。
		*@param out （可选）待输出的矩形区域。如果为空则创建一个新的。建议：尽量复用对象，减少对象创建消耗。
		*@return 返回相交的矩形区域对象。
		*/
		__proto.intersection=function(rect,out){
			if (!this.intersects(rect))return null;
			out || (out=new Rectangle());
			out.x=Math.max(this.x,rect.x);
			out.y=Math.max(this.y,rect.y);
			out.width=Math.min(this.right,rect.right)-out.x;
			out.height=Math.min(this.bottom,rect.bottom)-out.y;
			return out;
		}

		/**
		*<p>矩形联合，通过填充两个矩形之间的水平和垂直空间，将这两个矩形组合在一起以创建一个新的 Rectangle 对象。</p>
		*<p>注意：union()方法忽略高度或宽度值为 0 的矩形，如：var rect2:Rectangle=new Rectangle(300,300,50,0);</p>
		*@param 要添加到此 Rectangle 对象的 Rectangle 对象。
		*@param out 用于存储输出结果的矩形对象。如果为空，则创建一个新的。建议：尽量复用对象，减少对象创建消耗。Rectangle.TEMP对象用于对象复用。
		*@return 充当两个矩形的联合的新 Rectangle 对象。
		*/
		__proto.union=function(source,out){
			out || (out=new Rectangle());
			this.clone(out);
			if (source.width <=0 || source.height <=0)return out;
			out.addPoint(source.x,source.y);
			out.addPoint(source.right,source.bottom);
			return this;
		}

		/**
		*返回一个 Rectangle 对象，其 x、y、width 和 height 属性的值与当前 Rectangle 对象的对应值相同。
		*@param out （可选）用于存储结果的矩形对象。如果为空，则创建一个新的。建议：尽量复用对象，减少对象创建消耗。。Rectangle.TEMP对象用于对象复用。
		*@return Rectangle 对象，其 x、y、width 和 height 属性的值与当前 Rectangle 对象的对应值相同。
		*/
		__proto.clone=function(out){
			out || (out=new Rectangle());
			out.x=this.x;
			out.y=this.y;
			out.width=this.width;
			out.height=this.height;
			return out;
		}

		/**
		*当前 Rectangle 对象的水平位置 x 和垂直位置 y 以及高度 width 和宽度 height 以逗号连接成的字符串。
		*/
		__proto.toString=function(){
			return this.x+","+this.y+","+this.width+","+this.height;
		}

		/**
		*检测传入的 Rectangle 对象的属性是否与当前 Rectangle 对象的属性 x、y、width、height 属性值都相等。
		*@param rect 待比较的 Rectangle 对象。
		*@return 如果判断的属性都相等，则返回 true ,否则返回 false。
		*/
		__proto.equals=function(rect){
			if (!rect || rect.x!==this.x || rect.y!==this.y || rect.width!==this.width || rect.height!==this.height)return false;
			return true;
		}

		/**
		*<p>为当前矩形对象加一个点，以使当前矩形扩展为包含当前矩形和此点的最小矩形。</p>
		*<p>此方法会修改本对象。</p>
		*@param x 点的 X 坐标。
		*@param y 点的 Y 坐标。
		*@return 返回此 Rectangle 对象。
		*/
		__proto.addPoint=function(x,y){
			this.x > x && (this.width+=this.x-x,this.x=x);
			this.y > y && (this.height+=this.y-y,this.y=y);
			if (this.width < x-this.x)this.width=x-this.x;
			if (this.height < y-this.y)this.height=y-this.y;
			return this;
		}

		/**
		*@private
		*返回代表当前矩形的顶点数据。
		*@return 顶点数据。
		*/
		__proto._getBoundPoints=function(){
			var rst=Rectangle._temB;
			rst.length=0;
			if (this.width==0 || this.height==0)return rst;
			rst.push(this.x,this.y,this.x+this.width,this.y,this.x,this.y+this.height,this.x+this.width,this.y+this.height);
			return rst;
		}

		/**
		*确定此 Rectangle 对象是否为空。
		*@return 如果 Rectangle 对象的宽度或高度小于等于 0，则返回 true 值，否则返回 false。
		*/
		__proto.isEmpty=function(){
			if (this.width <=0 || this.height <=0)return true;
			return false;
		}

		/**此矩形右侧的 X 轴坐标。 x 和 width 属性的和。*/
		__getset(0,__proto,'right',function(){
			return this.x+this.width;
		});

		/**此矩形底端的 Y 轴坐标。y 和 height 属性的和。*/
		__getset(0,__proto,'bottom',function(){
			return this.y+this.height;
		});

		Rectangle._getBoundPointS=function(x,y,width,height){
			var rst=Rectangle._temA;
			rst.length=0;
			if (width==0 || height==0)return rst;
			rst.push(x,y,x+width,y,x,y+height,x+width,y+height);
			return rst;
		}

		Rectangle._getWrapRec=function(pointList,rst){
			if (!pointList || pointList.length < 1)return rst ? rst.setTo(0,0,0,0):Rectangle.TEMP.setTo(0,0,0,0);
			rst=rst ? rst :new Rectangle();
			var i,len=pointList.length,minX,maxX,minY,maxY,tPoint=Point.TEMP;
			minX=minY=99999;
			maxX=maxY=-minX;
			for (i=0;i < len;i+=2){
				tPoint.x=pointList[i];
				tPoint.y=pointList[i+1];
				minX=minX < tPoint.x ? minX :tPoint.x;
				minY=minY < tPoint.y ? minY :tPoint.y;
				maxX=maxX > tPoint.x ? maxX :tPoint.x;
				maxY=maxY > tPoint.y ? maxY :tPoint.y;
			}
			return rst.setTo(minX,minY,maxX-minX,maxY-minY);
		}

		Rectangle._temB=[];
		Rectangle._temA=[];
		__static(Rectangle,
		['EMPTY',function(){return this.EMPTY=new Rectangle();},'TEMP',function(){return this.TEMP=new Rectangle();}
		]);
		return Rectangle;
	})()


	/**
	*<code>SoundManager</code> 是一个声音管理类。提供了对背景音乐、音效的播放控制方法。
	*/
	//class laya.media.SoundManager
	var SoundManager=(function(){
		function SoundManager(){};
		__class(SoundManager,'laya.media.SoundManager');
		__getset(1,SoundManager,'useAudioMusic',function(){
			return SoundManager._useAudioMusic;
			},function(value){
			SoundManager._useAudioMusic=value;
			if (value)SoundManager._musicClass=AudioSound;
		});

		/**
		*失去焦点后是否自动停止背景音乐。
		*@param v Boolean 失去焦点后是否自动停止背景音乐。
		*
		*/
		/**
		*失去焦点后是否自动停止背景音乐。
		*/
		__getset(1,SoundManager,'autoStopMusic',function(){
			return SoundManager._autoStopMusic;
			},function(v){
			Laya.stage.off("blur",null,SoundManager._stageOnBlur);
			Laya.stage.off("focus",null,SoundManager._stageOnFocus);
			Laya.stage.off("visibilitychange",null,SoundManager._visibilityChange);
			SoundManager._autoStopMusic=v;
			if (v){
				Laya.stage.on("blur",null,SoundManager._stageOnBlur);
				Laya.stage.on("focus",null,SoundManager._stageOnFocus);
				Laya.stage.on("visibilitychange",null,SoundManager._visibilityChange);
			}
		});

		/**
		*背景音乐和所有音效是否静音。
		*/
		__getset(1,SoundManager,'muted',function(){
			return SoundManager._muted;
			},function(value){
			if (value){
				SoundManager.stopAllSound();
			}
			SoundManager.musicMuted=value;
			SoundManager._muted=value;
		});

		/**
		*背景音乐（不包括音效）是否静音。
		*/
		__getset(1,SoundManager,'musicMuted',function(){
			return SoundManager._musicMuted;
			},function(value){
			if (value){
				if (SoundManager._tMusic)
					SoundManager.stopSound(SoundManager._tMusic);
				SoundManager._musicMuted=value;
				}else {
				SoundManager._musicMuted=value;
				if (SoundManager._tMusic){
					SoundManager.playMusic(SoundManager._tMusic);
				}
			}
		});

		/**
		*所有音效（不包括背景音乐）是否静音。
		*/
		__getset(1,SoundManager,'soundMuted',function(){
			return SoundManager._soundMuted;
			},function(value){
			SoundManager._soundMuted=value;
		});

		SoundManager.addChannel=function(channel){
			if (SoundManager._channels.indexOf(channel)>=0)return;
			SoundManager._channels.push(channel);
		}

		SoundManager.removeChannel=function(channel){
			var i=0;
			for (i=SoundManager._channels.length-1;i >=0;i--){
				if (SoundManager._channels[i]==channel){
					SoundManager._channels.splice(i,1);
				}
			}
		}

		SoundManager.disposeSoundIfNotUsed=function(url){
			var i=0;
			for (i=SoundManager._channels.length-1;i >=0;i--){
				if (SoundManager._channels[i].url==url){
					return;
				}
			}
			SoundManager.destroySound(url);
		}

		SoundManager._visibilityChange=function(){
			if (Laya.stage.isVisibility){
				SoundManager._stageOnFocus();
				}else {
				SoundManager._stageOnBlur();
			}
		}

		SoundManager._stageOnBlur=function(){
			SoundManager._isActive=false;
			if (SoundManager._musicChannel){
				if (!SoundManager._musicChannel.isStopped){
					SoundManager._blurPaused=true;
					SoundManager._musicLoops=SoundManager._musicChannel.loops;
					SoundManager._musicCompleteHandler=SoundManager._musicChannel.completeHandler;
					SoundManager._musicPosition=SoundManager._musicChannel.position;
					SoundManager._musicChannel.stop();
					Laya.stage.once("mousedown",null,SoundManager._stageOnFocus);
				}
			}
			SoundManager.stopAllSound();
		}

		SoundManager._stageOnFocus=function(){
			SoundManager._isActive=true;
			Laya.stage.off("mousedown",null,SoundManager._stageOnFocus);
			if (SoundManager._blurPaused){
				if (SoundManager._tMusic){
					SoundManager.playMusic(SoundManager._tMusic,SoundManager._musicLoops,SoundManager._musicCompleteHandler,SoundManager._musicPosition);
				}
				SoundManager._blurPaused=false;
			}
		}

		SoundManager.playSound=function(url,loops,complete,soundClass,startTime){
			(loops===void 0)&& (loops=1);
			(startTime===void 0)&& (startTime=0);
			if(!Laya.stage.isVisibility)Laya.stage._isVisibility=true;
			if (!SoundManager._isActive || !url)return null;
			if (SoundManager._muted)return null;
			url=URL.formatURL(url);
			if (url==SoundManager._tMusic){
				if (SoundManager._musicMuted)return null;
				}else {
				if (Render.isConchApp){
					var ext=Utils$2.getFileExtension(url);
					if (ext !="wav" && ext !="ogg"){
						alert("The sound only supports wav or ogg format,for optimal performance reason,please refer to the official website document.");
						return null;
					}
				}
				if (SoundManager._soundMuted)return null;
			};
			var tSound;
			if(!Browser.onMiniGame){
				tSound=Laya.loader.getRes(url);
			}
			if (!soundClass)soundClass=SoundManager._soundClass;
			if (!tSound){
				tSound=new soundClass();
				tSound.load(url);
				if(!Browser.onMiniGame){
					Loader.cacheRes(url,tSound);
				}
			};
			var channel;
			channel=tSound.play(startTime,loops);
			if (!channel)return null;
			channel.url=url;
			channel.volume=(url==SoundManager._tMusic)? SoundManager.musicVolume :SoundManager.soundVolume;
			channel.completeHandler=complete;
			return channel;
		}

		SoundManager.destroySound=function(url){
			var tSound=Laya.loader.getRes(url);
			if (tSound){
				Loader.clearRes(url);
				tSound.dispose();
			}
		}

		SoundManager.playMusic=function(url,loops,complete,startTime){
			(loops===void 0)&& (loops=0);
			(startTime===void 0)&& (startTime=0);
			url=URL.formatURL(url);
			SoundManager._tMusic=url;
			if (SoundManager._musicChannel)SoundManager._musicChannel.stop();
			return SoundManager._musicChannel=SoundManager.playSound(url,loops,complete,SoundManager._musicClass,startTime);
		}

		SoundManager.stopSound=function(url){
			url=URL.formatURL(url);
			var i=0;
			var channel;
			for (i=SoundManager._channels.length-1;i >=0;i--){
				channel=SoundManager._channels[i];
				if (channel.url==url){
					channel.stop();
				}
			}
		}

		SoundManager.stopAll=function(){
			SoundManager._tMusic=null;
			var i=0;
			var channel;
			for (i=SoundManager._channels.length-1;i >=0;i--){
				channel=SoundManager._channels[i];
				channel.stop();
			}
		}

		SoundManager.stopAllSound=function(){
			var i=0;
			var channel;
			for (i=SoundManager._channels.length-1;i >=0;i--){
				channel=SoundManager._channels[i];
				if (channel.url !=SoundManager._tMusic){
					channel.stop();
				}
			}
		}

		SoundManager.stopMusic=function(){
			if (SoundManager._musicChannel)SoundManager._musicChannel.stop();
			SoundManager._tMusic=null;
		}

		SoundManager.setSoundVolume=function(volume,url){
			if (url){
				url=URL.formatURL(url);
				SoundManager._setVolume(url,volume);
				}else {
				SoundManager.soundVolume=volume;
				var i=0;
				var channel;
				for (i=SoundManager._channels.length-1;i >=0;i--){
					channel=SoundManager._channels[i];
					if (channel.url !=SoundManager._tMusic){
						channel.volume=volume;
					}
				}
			}
		}

		SoundManager.setMusicVolume=function(volume){
			SoundManager.musicVolume=volume;
			SoundManager._setVolume(SoundManager._tMusic,volume);
		}

		SoundManager._setVolume=function(url,volume){
			url=URL.formatURL(url);
			var i=0;
			var channel;
			for (i=SoundManager._channels.length-1;i >=0;i--){
				channel=SoundManager._channels[i];
				if (channel.url==url){
					channel.volume=volume;
				}
			}
		}

		SoundManager.musicVolume=1;
		SoundManager.soundVolume=1;
		SoundManager.playbackRate=1;
		SoundManager._muted=false;
		SoundManager._soundMuted=false;
		SoundManager._musicMuted=false;
		SoundManager._tMusic=null;
		SoundManager._musicChannel=null;
		SoundManager._channels=[];
		SoundManager._autoStopMusic=false;
		SoundManager._blurPaused=false;
		SoundManager._isActive=true;
		SoundManager._musicLoops=0;
		SoundManager._musicPosition=0;
		SoundManager._musicCompleteHandler=null;
		SoundManager._soundClass=null
		SoundManager._musicClass=null
		SoundManager.autoReleaseSound=true;
		SoundManager._useAudioMusic=true;
		return SoundManager;
	})()


	/**
	*<p> <code>LocalStorage</code> 类用于没有时间限制的数据存储。</p>
	*/
	//class laya.net.LocalStorage
	var LocalStorage=(function(){
		var Storage;
		function LocalStorage(){};
		__class(LocalStorage,'laya.net.LocalStorage');
		LocalStorage.__init__=function(){
			if (!LocalStorage._baseClass){
				LocalStorage._baseClass=Storage;
				Storage.init();
			}
			LocalStorage.items=LocalStorage._baseClass.items;
			LocalStorage.support=LocalStorage._baseClass.support;
		}

		LocalStorage.setItem=function(key,value){
			LocalStorage._baseClass.setItem(key,value);
		}

		LocalStorage.getItem=function(key){
			return LocalStorage._baseClass.getItem(key);
		}

		LocalStorage.setJSON=function(key,value){
			LocalStorage._baseClass.setJSON(key,value);
		}

		LocalStorage.getJSON=function(key){
			return LocalStorage._baseClass.getJSON(key);
		}

		LocalStorage.removeItem=function(key){
			LocalStorage._baseClass.removeItem(key);
		}

		LocalStorage.clear=function(){
			LocalStorage._baseClass.clear();
		}

		LocalStorage._baseClass=null
		LocalStorage.items=null
		LocalStorage.support=false;
		LocalStorage.__init$=function(){
			//class Storage
			Storage=(function(){
				function Storage(){};
				__class(Storage,'');
				Storage.init=function(){
					try{Storage.items=window.localStorage;Storage.setItem('laya','1');Storage.removeItem('laya');Storage.support=true;}catch(e){}if(!Storage.support)console.log('LocalStorage is not supprot or browser is private mode.');
				}
				Storage.setItem=function(key,value){
					try {
						Storage.support && Storage.items.setItem(key,value);
						}catch (e){
						console.warn("set localStorage failed",e);
					}
				}
				Storage.getItem=function(key){
					return Storage.support ? Storage.items.getItem(key):null;
				}
				Storage.setJSON=function(key,value){
					try {
						Storage.support && Storage.items.setItem(key,JSON.stringify(value));
						}catch (e){
						console.warn("set localStorage failed",e);
					}
				}
				Storage.getJSON=function(key){
					try{
						return JSON.parse(Storage.support ? Storage.items.getItem(key):null);
					}
					catch(error){
						console.log("---------------getJSON-------error----------");
					}
					return null;
				}
				Storage.removeItem=function(key){
					Storage.support && Storage.items.removeItem(key);
				}
				Storage.clear=function(){
					Storage.support && Storage.items.clear();
				}
				Storage.items=null
				Storage.support=false;
				return Storage;
			})()
		}

		return LocalStorage;
	})()


	/**
	*<p> <code>URL</code> 类用于定义地址信息。</p>
	*/
	//class laya.net.URL
	var URL=(function(){
		function URL(url){
			this._url=null;
			this._path=null;
			this._url=URL.formatURL(url);
			this._path=URL.getPath(url);
		}

		__class(URL,'laya.net.URL');
		var __proto=URL.prototype;
		/**地址的路径。*/
		__getset(0,__proto,'path',function(){
			return this._path;
		});

		/**格式化后的地址。*/
		__getset(0,__proto,'url',function(){
			return this._url;
		});

		URL.formatURL=function(url,base){
			if (!url)return "null path";
			if (url.indexOf(":")> 0)return url;
			if (URL.customFormat !=null)url=URL.customFormat(url,base);
			if (url.indexOf("http")==0)return url;
			var char1=url.charAt(0);
			if (char1==="."){
				return URL.formatRelativePath((base || URL.basePath)+url);
				}else if (char1==='~'){
				return URL.rootPath+url.substring(1);
				}else if (char1==="d"){
				if (url.indexOf("data:image")===0)return url;
				}else if (char1==="/"){
				return url;
			}
			return (base || URL.basePath)+url;
		}

		URL.formatRelativePath=function(value){
			var parts=value.split("/");
			for (var i=0,len=parts.length;i < len;i++){
				if (parts[i]=='..'){
					parts.splice(i-1,2);
					i-=2;
				}
			}
			return parts.join('/');
		}

		URL.isAbsolute=function(url){
			return url.indexOf(":")> 0 || url.charAt(0)=='/';
		}

		URL.getPath=function(url){
			var ofs=url.lastIndexOf('/');
			return ofs > 0 ? url.substr(0,ofs+1):"";
		}

		URL.getFileName=function(url){
			var ofs=url.lastIndexOf('/');
			return ofs > 0 ? url.substr(ofs+1):url;
		}

		URL.version={};
		URL.basePath="";
		URL.rootPath="";
		URL.customFormat=function(url){
			var newUrl=URL.version[url];
			if (!Render.isConchApp && newUrl)url+="?v="+newUrl;
			return url;
		}

		return URL;
	})()


	//class laya.webgl.shader.ShaderValue
	var ShaderValue=(function(){
		function ShaderValue(){}
		__class(ShaderValue,'laya.webgl.shader.ShaderValue');
		return ShaderValue;
	})()


	/**
	*@private
	*<code>Render</code> 是渲染管理类。它是一个单例，可以使用 Laya.render 访问。
	*/
	//class laya.renders.Render
	var Render=(function(){
		function Render(width,height){
			this._timeId=0;
			var style=Render._mainCanvas.source.style;
			style.position='absolute';
			style.top=style.left="0px";
			style.background="#000000";
			Render._mainCanvas.source.id="layaCanvas";
			var isWebGl=laya.renders.Render.isWebGL;
			Render._mainCanvas.source.width=width;
			Render._mainCanvas.source.height=height;
			isWebGl && Render.WebGL.init(Render._mainCanvas,width,height);
			Browser.container.appendChild(Render._mainCanvas.source);
			Render._context=new RenderContext(width,height,isWebGl ? null :Render._mainCanvas);
			Render._context.ctx.setIsMainContext();
			Browser.window.requestAnimationFrame(loop);
			function loop (){
				Laya.stage._loop();
				Browser.window.requestAnimationFrame(loop);
			}
			Laya.stage.on("visibilitychange",this,this._onVisibilitychange);
		}

		__class(Render,'laya.renders.Render');
		var __proto=Render.prototype;
		/**@private */
		__proto._onVisibilitychange=function(){
			if (!Laya.stage.isVisibility){
				this._timeId=Browser.window.setInterval(this._enterFrame,1000);
				}else if (this._timeId !=0){
				Browser.window.clearInterval(this._timeId);
			}
		}

		/**@private */
		__proto._enterFrame=function(e){
			Laya.stage._loop();
		}

		/**目前使用的渲染器。*/
		__getset(1,Render,'context',function(){
			return Render._context;
		});

		/**渲染使用的原生画布引用。 */
		__getset(1,Render,'canvas',function(){
			return Render._mainCanvas.source;
		});

		Render.__loop_time=function(){
			if (Render.__loop_time_id==Stat.loopCount)Laya.stage._loop();
			Render.__loop_time_id=Stat.loopCount;
		}

		Render.__loop_ani=function(){
			if (Render.__loop_ani_id==Stat.loopCount)Laya.stage._loop();
			Render.__loop_ani_id=Stat.loopCount;
			Browser.window.requestAnimationFrame(laya.renders.Render.__loop_ani);
		}

		Render._context=null
		Render._mainCanvas=null
		Render.WebGL=null
		Render.isConchNode=false;
		Render.isConchApp=false;
		Render.isConchWebGL=false;
		Render.isWebGL=false;
		Render.is3DMode=false;
		Render.optimizeTextureMemory=function(url,texture){
			return true;
		}

		Render.__loop_time_id=0;
		Render.__loop_ani_id=0;
		Render.__init$=function(){
			window.ConchRenderType=window.ConchRenderType||1;
			window.ConchRenderType|=(!window.conch?0:0x04);;{
				Render.isConchNode=(window.ConchRenderType & 5)==5;
				Render.isConchApp=(window.ConchRenderType & 0x04)==0x04;
				Render.isConchWebGL=window.ConchRenderType==6;
			};;;
		}

		return Render;
	})()


	/**
	*@private
	*渲染环境
	*/
	//class laya.renders.RenderContext
	var RenderContext=(function(){
		function RenderContext(width,height,canvas){
			this.x=0;
			this.y=0;
			//this.canvas=null;
			//this.ctx=null;
			this._drawTexture=function(x,y,args){
				if (args[0].loaded)this.ctx.drawTexture(args[0],args[1],args[2],args[3],args[4],x,y);
			}
			this._fillTexture=function(x,y,args){
				if (args[0].loaded)this.ctx.fillTexture(args[0],args[1]+x,args[2]+y,args[3],args[4],args[5],args[6],args[7]);
			}
			this._drawTextureWithTransform=function(x,y,args){
				if (args[0].loaded)this.ctx.drawTextureWithTransform(args[0],args[1],args[2],args[3],args[4],args[5],x,y,args[6]);
			}
			this._fillQuadrangle=function(x,y,args){
				this.ctx.fillQuadrangle(args[0],args[1],args[2],args[3],args[4]);
			}
			this._drawRect=function(x,y,args){
				var ctx=this.ctx;
				if (args[4] !=null){
					ctx.fillStyle=args[4];
					ctx.fillRect(x+args[0],y+args[1],args[2],args[3],null);
				}
				if (args[5] !=null){
					ctx.strokeStyle=args[5];
					ctx.lineWidth=args[6];
					ctx.strokeRect(x+args[0],y+args[1],args[2],args[3],args[6]);
				}
			}
			this._drawPie=function(x,y,args){
				return;
				var ctx=this.ctx;
				Render.isWebGL && ctx.setPathId(args[8]);
				ctx.beginPath();
				if (Render.isWebGL){
					ctx.movePath(args[0]+x,args[1]+y);
					ctx.moveTo(0,0);
					}else {
					ctx.moveTo(x+args[0],y+args[1]);
				}
				ctx.arc(x+args[0],y+args[1],args[2],args[3],args[4]);
				ctx.closePath();
				this._fillAndStroke(args[5],args[6],args[7],true);
			}
			this._clipRect=function(x,y,args){
				this.ctx.clipRect(x+args[0],y+args[1],args[2],args[3]);
			}
			this._fillRect=function(x,y,args){
				this.ctx.fillRect(x+args[0],y+args[1],args[2],args[3],args[4]);
			}
			this._drawCircle=function(x,y,args){
				var ctx=this.ctx;
				Render.isWebGL && ctx.setPathId(args[6]);
				Stat.drawCall++;
				ctx.beginPath();
				Render.isWebGL && ctx.movePath(args[0]+x,args[1]+y);
				ctx.arc(args[0]+x,args[1]+y,args[2],0,RenderContext.PI2);
				ctx.closePath();
				this._fillAndStroke(args[3],args[4],args[5],true);
			}
			this._fillCircle=function(x,y,args){
				Stat.drawCall++;
				var ctx=this.ctx;
				ctx.beginPath();
				ctx.fillStyle=args[3];
				ctx.arc(args[0]+x,args[1]+y,args[2],0,RenderContext.PI2);
				ctx.fill();
			}
			this._setShader=function(x,y,args){
				this.ctx.setShader(args[0]);
			}
			this._drawLine=function(x,y,args){
				var ctx=this.ctx;
				Render.isWebGL && ctx.setPathId(args[6]);
				ctx.beginPath();
				ctx.strokeStyle=args[4];
				ctx.lineWidth=args[5];
				if (Render.isWebGL){
					ctx.movePath(x,y);
					ctx.moveTo(args[0],args[1]);
					ctx.lineTo(args[2],args[3]);
					}else {
					ctx.moveTo(x+args[0],y+args[1]);
					ctx.lineTo(x+args[2],y+args[3]);
				}
				ctx.stroke();
			}
			this._drawLines=function(x,y,args){
				var ctx=this.ctx;
				Render.isWebGL && ctx.setPathId(args[5]);
				ctx.beginPath();
				x+=args[0],y+=args[1];
				Render.isWebGL && ctx.movePath(x,y);
				ctx.strokeStyle=args[3];
				ctx.lineWidth=args[4];
				var points=args[2];
				var i=2,n=points.length;
				if (Render.isWebGL){
					ctx.moveTo(points[0],points[1]);
					while (i < n){
						ctx.lineTo(points[i++],points[i++]);
					}
					}else {
					ctx.moveTo(x+points[0],y+points[1]);
					while (i < n){
						ctx.lineTo(x+points[i++],y+points[i++]);
					}
				}
				ctx.stroke();
			}
			this._drawLinesWebGL=function(x,y,args){
				this.ctx.drawLines(x+this.x+args[0],y+this.y+args[1],args[2],args[3],args[4]);
			}
			this._drawCurves=function(x,y,args){
				this.ctx.drawCurves(x,y,args);
			}
			this._draw=function(x,y,args){
				args[0].call(null,this,x,y);
			}
			this._transformByMatrix=function(x,y,args){
				this.ctx.transformByMatrix(args[0]);
			}
			this._setTransform=function(x,y,args){
				this.ctx.setTransform(args[0],args[1],args[2],args[3],args[4],args[5]);
			}
			this._setTransformByMatrix=function(x,y,args){
				this.ctx.setTransformByMatrix(args[0]);
			}
			this._save=function(x,y,args){
				this.ctx.save();
			}
			this._restore=function(x,y,args){
				this.ctx.restore();
			}
			this._translate=function(x,y,args){
				this.ctx.translate(args[0],args[1]);
			}
			this._transform=function(x,y,args){
				this.ctx.translate(args[1]+x,args[2]+y);
				var mat=args[0];
				this.ctx.transform(mat.a,mat.b,mat.c,mat.d,mat.tx,mat.ty);
				this.ctx.translate(-x-args[1],-y-args[2]);
			}
			this._rotate=function(x,y,args){
				this.ctx.translate(args[1]+x,args[2]+y);
				this.ctx.rotate(args[0]);
				this.ctx.translate(-x-args[1],-y-args[2]);
			}
			this._scale=function(x,y,args){
				this.ctx.translate(args[2]+x,args[3]+y);
				this.ctx.scale(args[0],args[1]);
				this.ctx.translate(-x-args[2],-y-args[3]);
			}
			this._alpha=function(x,y,args){
				this.ctx.globalAlpha *=args[0];
			}
			this._setAlpha=function(x,y,args){
				this.ctx.globalAlpha=args[0];
			}
			this._fillText=function(x,y,args){
				this.ctx.fillText(args[0],args[1]+x,args[2]+y,args[3],args[4],args[5]);
			}
			this._strokeText=function(x,y,args){
				this.ctx.strokeText(args[0],args[1]+x,args[2]+y,args[3],args[4],args[5],args[6]);
			}
			this._fillBorderText=function(x,y,args){
				this.ctx.fillBorderText(args[0],args[1]+x,args[2]+y,args[3],args[4],args[5],args[6],args[7]);
			}
			this._blendMode=function(x,y,args){
				this.ctx.globalCompositeOperation=args[0];
			}
			this._beginClip=function(x,y,args){
				this.ctx.beginClip && this.ctx.beginClip(x+args[0],y+args[1],args[2],args[3]);
			}
			this._setIBVB=function(x,y,args){
				this.ctx.setIBVB(args[0]+x,args[1]+y,args[2],args[3],args[4],args[5],args[6],args[7]);
			}
			this._fillTrangles=function(x,y,args){
				this.ctx.fillTrangles(args[0],args[1]+x,args[2]+y,args[3],args[4]);
			}
			this._drawPath=function(x,y,args){
				var ctx=this.ctx;
				Render.isWebGL && ctx.setPathId(-1);
				ctx.beginPath();
				x+=args[0],y+=args[1];
				var paths=args[2];
				for (var i=0,n=paths.length;i < n;i++){
					var path=paths[i];
					switch (path[0]){
						case "moveTo":
							ctx.moveTo(x+path[1],y+path[2]);
							break ;
						case "lineTo":
							ctx.lineTo(x+path[1],y+path[2]);
							break ;
						case "arcTo":
							ctx.arcTo(x+path[1],y+path[2],x+path[3],y+path[4],path[5]);
							break ;
						case "closePath":
							ctx.closePath();
							break ;
						}
				};
				var brush=args[3];
				if (brush !=null){
					ctx.fillStyle=brush.fillStyle;
					ctx.fill();
				};
				var pen=args[4];
				if (pen !=null){
					ctx.strokeStyle=pen.strokeStyle;
					ctx.lineWidth=pen.lineWidth || 1;
					ctx.lineJoin=pen.lineJoin;
					ctx.lineCap=pen.lineCap;
					ctx.miterLimit=pen.miterLimit;
					ctx.stroke();
				}
			}
			this.drawPoly=function(x,y,args){
				this.ctx.drawPoly(x+this.x+args[0],y+this.y+args[1],args[2],args[3],args[4],args[5],args[6]);
			}
			this._drawPoly=function(x,y,args){
				var ctx=this.ctx;
				var points=args[2];
				var i=2,n=points.length;
				if (Render.isWebGL){
					ctx.setPathId(args[6]);
					ctx.beginPath();
					x+=args[0],y+=args[1];
					ctx.movePath(x,y);
					ctx.moveTo(points[0],points[1]);
					while (i < n){
						ctx.lineTo(points[i++],points[i++]);
					}
					}else {
					ctx.beginPath();
					x+=args[0],y+=args[1];
					ctx.moveTo(x+points[0],y+points[1]);
					while (i < n){
						ctx.lineTo(x+points[i++],y+points[i++]);
					}
				}
				ctx.closePath();
				this._fillAndStroke(args[3],args[4],args[5],args[7]);
			}
			this._drawSkin=function(x,y,args){
				var tSprite=args[0];
				if (tSprite){
					var ctx=this.ctx;
					tSprite.render(ctx,x,y);
				}
			}
			this._drawParticle=function(x,y,args){
				this.ctx.drawParticle(x+this.x,y+this.y,args[0]);
			}
			this._setFilters=function(x,y,args){
				this.ctx.setFilters(args);
			}
			if (canvas){
				this.ctx=canvas.getContext('2d');
				}else {
				canvas=HTMLCanvas.create("3D");
				this.ctx=RunDriver.createWebGLContext2D(canvas);
				canvas._setContext(this.ctx);
			}
			canvas.size(width,height);
			this.canvas=canvas;
		}

		__class(RenderContext,'laya.renders.RenderContext');
		var __proto=RenderContext.prototype;
		/**销毁当前渲染环境*/
		__proto.destroy=function(){
			if (this.canvas){
				this.canvas.destroy();
				this.canvas=null;
				this.ctx=null;
			}
			if (this.ctx){
				this.ctx.destroy();
				this.ctx=null;
			}
		}

		__proto.drawTexture=function(tex,x,y,width,height){
			if (tex.loaded)this.ctx.drawTexture(tex,x,y,width,height,this.x,this.y);
		}

		__proto._drawTextures=function(x,y,args){
			if (args[0].loaded)this.ctx.drawTextures(args[0],args[1],x+this.x,y+this.y);
		}

		__proto.drawTextureWithTransform=function(tex,x,y,width,height,m,alpha){
			if (tex.loaded)this.ctx.drawTextureWithTransform(tex,x,y,width,height,m,this.x,this.y,alpha);
		}

		__proto.fillQuadrangle=function(tex,x,y,point4,m){
			this.ctx.fillQuadrangle(tex,x,y,point4,m);
		}

		__proto.drawCanvas=function(canvas,x,y,width,height){
			this.ctx.drawCanvas(canvas,x+this.x,y+this.y,width,height);
		}

		__proto.drawRect=function(x,y,width,height,color,lineWidth){
			(lineWidth===void 0)&& (lineWidth=1);
			var ctx=this.ctx;
			ctx.strokeStyle=color;
			ctx.lineWidth=lineWidth;
			ctx.strokeRect(x+this.x,y+this.y,width,height,lineWidth);
		}

		__proto._fillAndStroke=function(fillColor,strokeColor,lineWidth,isConvexPolygon){
			(isConvexPolygon===void 0)&& (isConvexPolygon=false);
			var ctx=this.ctx;
			if (fillColor !=null){
				ctx.fillStyle=fillColor;
				if (Render.isWebGL){
					ctx.fill(isConvexPolygon);
					}else {
					ctx.fill();
				}
			}
			if (strokeColor !=null && lineWidth > 0){
				ctx.strokeStyle=strokeColor;
				ctx.lineWidth=lineWidth;
				ctx.stroke();
			}
		}

		//ctx.translate(-x-args[0],-y-args[1]);
		__proto.clipRect=function(x,y,width,height){
			this.ctx.clipRect(x+this.x,y+this.y,width,height);
		}

		__proto.fillRect=function(x,y,width,height,fillStyle){
			this.ctx.fillRect(x+this.x,y+this.y,width,height,fillStyle);
		}

		__proto.drawCircle=function(x,y,radius,color,lineWidth){
			(lineWidth===void 0)&& (lineWidth=1);
			Stat.drawCall++;
			var ctx=this.ctx;
			ctx.beginPath();
			ctx.strokeStyle=color;
			ctx.lineWidth=lineWidth;
			ctx.arc(x+this.x,y+this.y,radius,0,RenderContext.PI2);
			ctx.stroke();
		}

		__proto.fillCircle=function(x,y,radius,color){
			Stat.drawCall++;
			var ctx=this.ctx;
			ctx.beginPath();
			ctx.fillStyle=color;
			ctx.arc(x+this.x,y+this.y,radius,0,RenderContext.PI2);
			ctx.fill();
		}

		__proto.setShader=function(shader){
			this.ctx.setShader(shader);
		}

		__proto.drawLine=function(fromX,fromY,toX,toY,color,lineWidth){
			(lineWidth===void 0)&& (lineWidth=1);
			var ctx=this.ctx;
			ctx.beginPath();
			ctx.strokeStyle=color;
			ctx.lineWidth=lineWidth;
			ctx.moveTo(this.x+fromX,this.y+fromY);
			ctx.lineTo(this.x+toX,this.y+toY);
			ctx.stroke();
		}

		__proto.clear=function(){
			this.ctx.clear();
		}

		__proto.transformByMatrix=function(value){
			this.ctx.transformByMatrix(value);
		}

		__proto.setTransform=function(a,b,c,d,tx,ty){
			this.ctx.setTransform(a,b,c,d,tx,ty);
		}

		__proto.setTransformByMatrix=function(value){
			this.ctx.setTransformByMatrix(value);
		}

		__proto.save=function(){
			this.ctx.save();
		}

		__proto.restore=function(){
			this.ctx.restore();
		}

		__proto.translate=function(x,y){
			this.ctx.translate(x,y);
		}

		__proto.transform=function(a,b,c,d,tx,ty){
			this.ctx.transform(a,b,c,d,tx,ty);
		}

		__proto.rotate=function(angle){
			this.ctx.rotate(angle);
		}

		__proto.scale=function(scaleX,scaleY){
			this.ctx.scale(scaleX,scaleY);
		}

		__proto.alpha=function(value){
			this.ctx.globalAlpha *=value;
		}

		__proto.setAlpha=function(value){
			this.ctx.globalAlpha=value;
		}

		__proto.fillWords=function(words,x,y,font,color){
			this.ctx.fillWords(words,x,y,font,color);
		}

		/***@private */
		__proto.fillBorderWords=function(words,x,y,font,fillColor,borderColor,lineWidth){
			this.ctx.fillBorderWords(words,x,y,font,fillColor,borderColor,lineWidth);
		}

		__proto.fillText=function(text,x,y,font,color,textAlign){
			this.ctx.fillText(text,x+this.x,y+this.y,font,color,textAlign);
		}

		__proto.strokeText=function(text,x,y,font,color,lineWidth,textAlign){
			this.ctx.strokeText(text,x+this.x,y+this.y,font,color,lineWidth,textAlign);
		}

		__proto.blendMode=function(type){
			this.ctx.globalCompositeOperation=type;
		}

		__proto.flush=function(){
			this.ctx.flush && this.ctx.flush();
		}

		__proto.addRenderObject=function(o){
			this.ctx.addRenderObject(o);
		}

		__proto.beginClip=function(x,y,w,h){
			this.ctx.beginClip && this.ctx.beginClip(x,y,w,h);
		}

		__proto.endClip=function(){
			this.ctx.endClip && this.ctx.endClip();
		}

		__proto.fillTrangles=function(x,y,args){
			this.ctx.fillTrangles(args[0],args[1],args[2],args[3],args.length > 4 ? args[4] :null);
		}

		RenderContext.PI2=2 *Math.PI;
		return RenderContext;
	})()


	/**
	*@private
	*精灵渲染器
	*/
	//class laya.renders.RenderSprite
	var RenderSprite=(function(){
		function RenderSprite(type,next){
			//this._next=null;
			//this._fun=null;
			this._next=next || RenderSprite.NORENDER;
			switch (type){
				case 0:
					this._fun=this._no;
					return;
				case 0x01:
					this._fun=this._image;
					return;
				case 0x02:
					this._fun=this._alpha;
					return;
				case 0x04:
					this._fun=this._transform;
					return;
				case 0x08:
					this._fun=this._blend;
					return;
				case 0x10:
					this._fun=this._canvas;
					return;
				case 0x40:
					this._fun=this._mask;
					return;
				case 0x80:
					this._fun=this._clip;
					return;
				case 0x100:
					this._fun=this._style;
					return;
				case 0x200:
					this._fun=this._graphics;
					return;
				case 0x800:
					this._fun=this._childs;
					return;
				case 0x400:
					this._fun=this._custom;
					return;
				case 0x01 | 0x200:
					this._fun=this._image2;
					return;
				case 0x01 | 0x04 | 0x200:
					this._fun=this._image2;
					return;
				case 0x20:
					this._fun=Filter._filter;
					return;
				case 0x11111:
					this._fun=RenderSprite._initRenderFun;
					return;
				}
			this.onCreate(type);
		}

		__class(RenderSprite,'laya.renders.RenderSprite');
		var __proto=RenderSprite.prototype;
		__proto.onCreate=function(type){}
		__proto._style=function(sprite,context,x,y){
			sprite._style.render(sprite,context,x,y);
			var next=this._next;
			next._fun.call(next,sprite,context,x,y);
		}

		__proto._no=function(sprite,context,x,y){}
		__proto._custom=function(sprite,context,x,y){
			sprite.customRender(context,x,y);
			var tf=sprite._style._tf;
			this._next._fun.call(this._next,sprite,context,x-tf.translateX,y-tf.translateY);
		}

		__proto._clip=function(sprite,context,x,y){
			var next=this._next;
			if (next==RenderSprite.NORENDER)return;
			var r=sprite._style.scrollRect;
			context.ctx.save();
			context.ctx.clipRect(x,y,r.width,r.height);
			next._fun.call(next,sprite,context,x-r.x,y-r.y);
			context.ctx.restore();
		}

		__proto._blend=function(sprite,context,x,y){
			var style=sprite._style;
			if (style.blendMode){
				context.ctx.globalCompositeOperation=style.blendMode;
			};
			var next=this._next;
			next._fun.call(next,sprite,context,x,y);
			context.ctx.globalCompositeOperation="source-over";
		}

		__proto._mask=function(sprite,context,x,y){
			var next=this._next;
			next._fun.call(next,sprite,context,x,y);
			var mask=sprite.mask;
			if (mask){
				context.ctx.globalCompositeOperation="destination-in";
				if (mask.numChildren > 0 || !mask.graphics._isOnlyOne()){
					mask.cacheAsBitmap=true;
				}
				mask.render(context,x-sprite.pivotX,y-sprite.pivotY);
			}
			context.ctx.globalCompositeOperation="source-over";
		}

		__proto._graphics=function(sprite,context,x,y){
			var tf=sprite._style._tf;
			sprite._graphics && sprite._graphics._render(sprite,context,x-tf.translateX,y-tf.translateY);
			var next=this._next;
			next._fun.call(next,sprite,context,x,y);
		}

		__proto._image=function(sprite,context,x,y){
			var style=sprite._style;
			context.ctx.drawTexture2(x,y,style._tf.translateX,style._tf.translateY,sprite.transform,style.alpha,style.blendMode,sprite._graphics._one);
		}

		__proto._image2=function(sprite,context,x,y){
			var tf=sprite._style._tf;
			context.ctx.drawTexture2(x,y,tf.translateX,tf.translateY,sprite.transform,1,null,sprite._graphics._one);
		}

		__proto._alpha=function(sprite,context,x,y){
			var style=sprite._style;
			var alpha;
			if ((alpha=style.alpha)> 0.01 || sprite._needRepaint()){
				var temp=context.ctx.globalAlpha;
				context.ctx.globalAlpha *=alpha;
				var next=this._next;
				next._fun.call(next,sprite,context,x,y);
				context.ctx.globalAlpha=temp;
			}
		}

		__proto._transform=function(sprite,context,x,y){
			var transform=sprite.transform,_next=this._next;
			if (transform && _next !=RenderSprite.NORENDER){
				context.save();
				context.transform(transform.a,transform.b,transform.c,transform.d,transform.tx+x,transform.ty+y);
				_next._fun.call(_next,sprite,context,0,0);
				context.restore();
			}else
			_next._fun.call(_next,sprite,context,x,y);
		}

		__proto._childs_max=function(sprite,context,x,y){
			var style=sprite._style;
			var tf=style._tf;
			x=x-tf.translateX+style.paddingLeft;
			y=y-tf.translateY+style.paddingTop;
			if (style._calculation){
				var words=sprite._getWords();
				if (words){
					var tStyle=style;
					if (tStyle){
						if (tStyle.stroke){
							context.fillBorderWords(words,x,y,tStyle.font,tStyle.color,tStyle.strokeColor,tStyle.stroke);
							}else{
							context.fillWords(words,x,y,tStyle.font,tStyle.color);
						}
					}
				}
			};
			var childs=sprite._childs,n=childs.length,ele;
			if (sprite.viewport || (sprite.optimizeScrollRect && sprite._style.scrollRect)){
				var rect=sprite.viewport || sprite._style.scrollRect;
				var left=rect.x;
				var top=rect.y;
				var right=rect.right;
				var bottom=rect.bottom;
				var _x=NaN,_y=NaN;
				for (i=0;i < n;++i){
					if ((ele=childs[i])._style.visible && ((_x=ele._x)< right && (_x+ele.width)> left && (_y=ele._y)< bottom && (_y+ele.height)> top)){
						ele.render(context,x,y);
					}
				}
				}else {
				for (var i=0;i < n;++i)
				(ele=(childs [i]))._style.visible && ele.render(context,x,y);
			}
		}

		__proto._childs=function(sprite,context,x,y){
			if (sprite._childRenderMax){
				this._childs_max(sprite,context,x,y);
				return;
			};
			var childs=sprite._childs,n=childs.length,ele;
			for (var i=0;i < n;++i)
			(ele=(childs [i]))._style.visible && ele.render(context,x,y);
		}

		__proto._canvas=function(sprite,context,x,y){
			var _cacheCanvas=sprite._$P.cacheCanvas;
			if (!_cacheCanvas){
				this._next._fun.call(this._next,sprite,context,x,y);
				return;
			}
			_cacheCanvas.type==='bitmap' ? (Stat.canvasBitmap++):(Stat.canvasNormal++);
			var tx=_cacheCanvas.ctx;
			if (sprite._needRepaint()|| !tx){
				this._canvas_repaint(sprite,context,x,y);
			}
			else{
				var tRec=_cacheCanvas._cacheRec;
				context.drawCanvas(tx.canvas,x+tRec.x,y+tRec.y,tRec.width,tRec.height);
			}
		}

		__proto._canvas_repaint=function(sprite,context,x,y){
			var _cacheCanvas=sprite._$P.cacheCanvas;
			var _next=this._next;
			if (!_cacheCanvas){
				_next._fun.call(_next,sprite,tx,x,y);
				return;
			};
			var tx=_cacheCanvas.ctx;
			var _repaint=sprite._needRepaint()|| (!tx);
			var canvas;
			var left;
			var top;
			var tRec;
			if (_repaint){
				if (!_cacheCanvas._cacheRec)
					_cacheCanvas._cacheRec=new Rectangle();
				var w,h;
				if (!Render.isWebGL || _cacheCanvas.type==="bitmap"){
					tRec=sprite.getSelfBounds();
					tRec.x-=sprite.pivotX;
					tRec.y-=sprite.pivotY;
					tRec.x-=16;
					tRec.y-=16;
					tRec.width+=32;
					tRec.height+=32;
					tRec.x=Math.floor(tRec.x+x)-x;
					tRec.y=Math.floor(tRec.y+y)-y;
					tRec.width=Math.floor(tRec.width);
					tRec.height=Math.floor(tRec.height);
					_cacheCanvas._cacheRec.copyFrom(tRec);
					}else{
					_cacheCanvas._cacheRec.setTo(-sprite.pivotX,-sprite.pivotY,1,1);
				}
				tRec=_cacheCanvas._cacheRec;
				var scaleX=Render.isWebGL ? 1 :Browser.pixelRatio *Laya.stage.clientScaleX;
				var scaleY=Render.isWebGL ? 1 :Browser.pixelRatio *Laya.stage.clientScaleY;
				if (!Render.isWebGL){
					var chainScaleX=1;
					var chainScaleY=1;
					var tar;
					tar=sprite;
					while (tar && tar !=Laya.stage){
						chainScaleX *=tar.scaleX;
						chainScaleY *=tar.scaleY;
						tar=tar.parent;
					}
					if (Render.isWebGL){
						if (chainScaleX < 1)scaleX *=chainScaleX;
						if (chainScaleY < 1)scaleY *=chainScaleY;
						}else {
						if (chainScaleX > 1)scaleX *=chainScaleX;
						if (chainScaleY > 1)scaleY *=chainScaleY;
					}
				}
				w=tRec.width *scaleX;
				h=tRec.height *scaleY;
				left=tRec.x;
				top=tRec.y;
				if (Render.isWebGL && _cacheCanvas.type==='bitmap' && (w > 2048 || h > 2048)){
					console.warn("cache bitmap size larger than 2048,cache ignored");
					if (_cacheCanvas.ctx){
						Pool.recover("RenderContext",_cacheCanvas.ctx);
						_cacheCanvas.ctx.canvas.size(0,0);
						_cacheCanvas.ctx=null;
					}
					_next._fun.call(_next,sprite,context,x,y);
					return;
				}
				if (!tx){
					tx=_cacheCanvas.ctx=Pool.getItem("RenderContext")|| new RenderContext(w,h,HTMLCanvas.create("AUTO"));
				}
				tx.ctx.sprite=sprite;
				canvas=tx.canvas;
				canvas.clear();
				(canvas.width !=w || canvas.height !=h)&& canvas.size(w,h);
				if (_cacheCanvas.type==='bitmap')canvas.context.asBitmap=true;
				else if(_cacheCanvas.type==='normal')canvas.context.asBitmap=false;
				var t;
				if (scaleX !=1 || scaleY !=1){
					var ctx=(tx).ctx;
					ctx.save();
					ctx.scale(scaleX,scaleY);
					if (!Render.isConchWebGL && Render.isConchApp){
						t=sprite._$P.cf;
						t && ctx.setFilterMatrix && ctx.setFilterMatrix(t._mat,t._alpha);
					}
					_next._fun.call(_next,sprite,tx,-left,-top);
					ctx.restore();
					if (!Render.isConchApp || Render.isConchWebGL)sprite._applyFilters();
					}else {
					ctx=(tx).ctx;
					if (!Render.isConchWebGL && Render.isConchApp){
						t=sprite._$P.cf;
						t && ctx.setFilterMatrix && ctx.setFilterMatrix(t._mat,t._alpha);
					}
					_next._fun.call(_next,sprite,tx,-left,-top);
					if (!Render.isConchApp || Render.isConchWebGL)sprite._applyFilters();
				}
				if (sprite._$P.staticCache)_cacheCanvas.reCache=false;
				Stat.canvasReCache++;
				}else {
				tRec=_cacheCanvas._cacheRec;
				left=tRec.x;
				top=tRec.y;
				canvas=tx.canvas;
			}
			context.drawCanvas(canvas,x+left,y+top,tRec.width,tRec.height);
		}

		RenderSprite.__init__=function(){
			var i=0,len=0;
			var initRender;
			initRender=RunDriver.createRenderSprite(0x11111,null);
			len=RenderSprite.renders.length=0x800 *2;
			for (i=0;i < len;i++)
			RenderSprite.renders[i]=initRender;
			RenderSprite.renders[0]=RunDriver.createRenderSprite(0,null);
			function _initSame (value,o){
				var n=0;
				for (var i=0;i < value.length;i++){
					n |=value[i];
					RenderSprite.renders[n]=o;
				}
			}
			_initSame([0x01,0x200,0x04,0x02],new RenderSprite(0x01,null));
			RenderSprite.renders[0x01 | 0x200]=RunDriver.createRenderSprite(0x01 | 0x200,null);
			RenderSprite.renders[0x01 | 0x04 | 0x200]=new RenderSprite(0x01 | 0x04 | 0x200,null);
		}

		RenderSprite._initRenderFun=function(sprite,context,x,y){
			var type=sprite._renderType;
			var r=RenderSprite.renders[type]=RenderSprite._getTypeRender(type);
			r._fun(sprite,context,x,y);
		}

		RenderSprite._getTypeRender=function(type){
			var rst=null;
			var tType=0x800;
			while (tType > 1){
				if (tType & type)
					rst=RunDriver.createRenderSprite(tType,rst);
				tType=tType >> 1;
			}
			return rst;
		}

		RenderSprite.IMAGE=0x01;
		RenderSprite.ALPHA=0x02;
		RenderSprite.TRANSFORM=0x04;
		RenderSprite.BLEND=0x08;
		RenderSprite.CANVAS=0x10;
		RenderSprite.FILTERS=0x20;
		RenderSprite.MASK=0x40;
		RenderSprite.CLIP=0x80;
		RenderSprite.STYLE=0x100;
		RenderSprite.GRAPHICS=0x200;
		RenderSprite.CUSTOM=0x400;
		RenderSprite.CHILDS=0x800;
		RenderSprite.INIT=0x11111;
		RenderSprite.renders=[];
		RenderSprite.NORENDER=new RenderSprite(0,null);
		return RenderSprite;
	})()


	/**
	*@private
	*Context扩展类
	*/
	//class laya.resource.Context
	var Context=(function(){
		function Context(){
			//this._canvas=null;
			this._repaint=false;
		}

		__class(Context,'laya.resource.Context');
		var __proto=Context.prototype;
		__proto.replaceReset=function(){
			var i=0,len=0;
			len=Context.replaceKeys.length;
			var key;
			for (i=0;i < len;i++){
				key=Context.replaceKeys[i];
				this[Context.newKeys[i]]=this[key];
			}
		}

		__proto.replaceResotre=function(){
			this.__restore();
			this.__reset();
		}

		__proto.setIsMainContext=function(){}
		__proto.drawTextures=function(tex,pos,tx,ty){
			Stat.drawCall+=pos.length / 2;
			var w=tex.width;
			var h=tex.height;
			for (var i=0,sz=pos.length;i < sz;i+=2){
				this.drawTexture(tex,pos[i],pos[i+1],w,h,tx,ty);
			}
		}

		/***@private */
		__proto.drawCanvas=function(canvas,x,y,width,height){
			Stat.drawCall++;
			this.drawImage(canvas.source,x,y,width,height);
		}

		/***@private */
		__proto.fillRect=function(x,y,width,height,style){
			Stat.drawCall++;
			style && (this.fillStyle=style);
			this.__fillRect(x,y,width,height);
		}

		/***@private */
		__proto.fillText=function(text,x,y,font,color,textAlign){
			Stat.drawCall++;
			if (arguments.length > 3 && font !=null){
				this.font=font;
				this.fillStyle=color;
				this.textAlign=textAlign;
				this.textBaseline="top";
			}
			this.__fillText(text,x,y);
		}

		/***@private */
		__proto.fillBorderText=function(text,x,y,font,fillColor,borderColor,lineWidth,textAlign){
			Stat.drawCall++;
			this.font=font;
			this.fillStyle=fillColor;
			this.textBaseline="top";
			this.strokeStyle=borderColor;
			this.lineWidth=lineWidth;
			this.textAlign=textAlign;
			this.__strokeText(text,x,y);
			this.__fillText(text,x,y);
		}

		/***@private */
		__proto.strokeText=function(text,x,y,font,color,lineWidth,textAlign){
			Stat.drawCall++;
			if (arguments.length > 3 && font !=null){
				this.font=font;
				this.strokeStyle=color;
				this.lineWidth=lineWidth;
				this.textAlign=textAlign;
				this.textBaseline="top";
			}
			this.__strokeText(text,x,y);
		}

		/***@private */
		__proto.transformByMatrix=function(value){
			this.transform(value.a,value.b,value.c,value.d,value.tx,value.ty);
		}

		/***@private */
		__proto.setTransformByMatrix=function(value){
			this.setTransform(value.a,value.b,value.c,value.d,value.tx,value.ty);
		}

		/***@private */
		__proto.clipRect=function(x,y,width,height){
			Stat.drawCall++;
			this.beginPath();
			this.rect(x,y,width,height);
			this.clip();
		}

		/***@private */
		__proto.drawTexture=function(tex,x,y,width,height,tx,ty){
			Stat.drawCall++;
			var uv=tex.uv,w=tex.bitmap.width,h=tex.bitmap.height;
			this.drawImage(tex.source,uv[0] *w,uv[1] *h,(uv[2]-uv[0])*w,(uv[5]-uv[3])*h,x+tx,y+ty,width,height);
		}

		/***@private */
		__proto.drawTextureWithTransform=function(tex,x,y,width,height,m,tx,ty,alpha){
			Stat.drawCall++;
			var uv=tex.uv,w=tex.bitmap.width,h=tex.bitmap.height;
			this.save();
			alpha !=1 && (this.globalAlpha *=alpha);
			if (m){
				this.transform(m.a,m.b,m.c,m.d,m.tx+tx,m.ty+ty);
				this.drawImage(tex.source,uv[0] *w,uv[1] *h,(uv[2]-uv[0])*w,(uv[5]-uv[3])*h,x ,y,width,height);
				}else {
				this.drawImage(tex.source,uv[0] *w,uv[1] *h,(uv[2]-uv[0])*w,(uv[5]-uv[3])*h,x+tx ,y+ty,width,height);
			}
			this.restore();
		}

		/***@private */
		__proto.drawTexture2=function(x,y,pivotX,pivotY,m,alpha,blendMode,args2){
			'use strict';
			var tex=args2[0];
			if (!(tex.loaded && tex.bitmap && tex.source)){
				return;
			}
			Stat.drawCall++;
			var alphaChanged=alpha!==1;
			if (alphaChanged){
				var temp=this.globalAlpha;
				this.globalAlpha *=alpha;
			};
			var uv=tex.uv,w=tex.bitmap.width,h=tex.bitmap.height;
			if (m){
				this.save();
				this.transform(m.a,m.b,m.c,m.d,m.tx+x,m.ty+y);
				this.drawImage(tex.source,uv[0] *w,uv[1] *h,(uv[2]-uv[0])*w,(uv[5]-uv[3])*h,args2[1]-pivotX ,args2[2]-pivotY,args2[3],args2[4]);
				this.restore();
				}else {
				this.drawImage(tex.source,uv[0] *w,uv[1] *h,(uv[2]-uv[0])*w,(uv[5]-uv[3])*h,args2[1]-pivotX+x ,args2[2]-pivotY+y,args2[3],args2[4]);
			}
			if (alphaChanged)this.globalAlpha=temp;
		}

		__proto.fillTexture=function(texture,x,y,width,height,type,offset,other){
			if (!other.pat){
				if (texture.uv !=Texture.DEF_UV){
					var canvas=new HTMLCanvas("2D");
					canvas.getContext('2d');
					canvas.size(texture.width,texture.height);
					canvas.context.drawTexture(texture,0,0,texture.width,texture.height,0,0);
					texture=new Texture(canvas);
				}
				other.pat=this.createPattern(texture.bitmap.source,type);
			};
			var oX=x,oY=y;
			var sX=0,sY=0;
			if (offset){
				oX+=offset.x % texture.width;
				oY+=offset.y % texture.height;
				sX-=offset.x % texture.width;
				sY-=offset.y % texture.height;
			}
			this.translate(oX,oY);
			this.fillRect(sX,sY,width,height,other.pat);
			this.translate(-oX,-oY);
		}

		/***@private */
		__proto.flush=function(){
			return 0;
		}

		/***@private */
		__proto.fillWords=function(words,x,y,font,color){
			font && (this.font=font);
			color && (this.fillStyle=color);
			var _this=this;
			this.textBaseline="top";
			this.textAlign='left';
			for (var i=0,n=words.length;i < n;i++){
				var a=words[i];
				this.__fillText(a.char,a.x+x,a.y+y);
			}
		}

		/***@private */
		__proto.fillBorderWords=function(words,x,y,font,color,borderColor,lineWidth){
			font && (this.font=font);
			color && (this.fillStyle=color);
			this.textBaseline="top";
			this.lineWidth=lineWidth;
			this.textAlign='left';
			this.strokeStyle=borderColor;
			for (var i=0,n=words.length;i < n;i++){
				var a=words[i];
				this.__strokeText(a.char,a.x+x,a.y+y);
				this.__fillText(a.char,a.x+x,a.y+y);
			}
		}

		/***@private */
		__proto.destroy=function(){
			this.canvas.width=this.canvas.height=0;
		}

		/***@private */
		__proto.clear=function(){
			this.clearRect(0,0,this._canvas.width,this._canvas.height);
			this._repaint=false;
		}

		__proto.drawCurves=function(x,y,args){
			this.beginPath();
			this.strokeStyle=args[3];
			this.lineWidth=args[4];
			var points=args[2];
			x+=args[0],y+=args[1];
			this.moveTo(x+points[0],y+points[1]);
			var i=2,n=points.length;
			while (i < n){
				this.quadraticCurveTo(x+points[i++],y+points[i++],x+points[i++],y+points[i++]);
			}
			this.stroke();
		}

		Context.__init__=function(to){
			var from=laya.resource.Context.prototype;
			to=to || CanvasRenderingContext2D.prototype;
			if(to.init2d)return;
			to.init2d=true;
			to.__fillText=to.fillText;
			to.__fillRect=to.fillRect;
			to.__strokeText=to.strokeText;
			var funs=['drawTextures','fillWords','fillBorderWords','setIsMainContext','fillRect','strokeText','fillTexture','fillText','transformByMatrix','setTransformByMatrix','clipRect','drawTexture','drawTexture2','drawTextureWithTransform','flush','clear','destroy','drawCanvas','fillBorderText','drawCurves'];
			funs.forEach(function(i){
				to[i]=from[i];
			});
			var canvasO=HTMLCanvasElement.prototype;
			if (!Context.replaceCanvasGetSet(canvasO,"width"))return;
			if (!Context.replaceCanvasGetSet(canvasO,"height"))return;
			var i=0,len=0;
			len=Context.replaceKeys.length;
			for (i=0;i < len;i++){
				if(!Context.replaceGetSet(to,Context.replaceKeys[i]))return;
			}
			to.__reset=from.replaceReset;
			to.__restore=to.restore;
			to.restore=from.replaceResotre;
		}

		Context.replaceCanvasGetSet=function(tar,key){
			var oldO=Object.getOwnPropertyDescriptor(tar,key);
			if (!oldO||!oldO.configurable)return false;
			var newO={};
			var tkey;
			for (tkey in oldO){
				if (tkey !="set"){
					newO[tkey]=oldO[tkey];
				}
			};
			var preFun=oldO["set"];
			newO["set"]=function (v){
				var _self=this;
				preFun.call(_self,v);
				var _ct=_self.getContext("2d");
				if (_ct && "__reset" in _ct){
					_ct.__reset();
				}
			}
			Object.defineProperty(tar,key,newO);
			return true;
		}

		Context.replaceGetSet=function(tar,key){
			var oldO=Object.getOwnPropertyDescriptor(tar,key);
			if (!oldO||!oldO.configurable)return false;
			var newO={};
			var tkey;
			for (tkey in oldO){
				if (tkey !="set"){
					newO[tkey]=oldO[tkey];
				}
			};
			var preFun=oldO["set"];
			var dataKey="___"+key+"__";
			Context.newKeys.push(dataKey);
			newO["set"]=function (v){
				var _self=this;
				if (v !=_self[dataKey]){
					_self[dataKey]=v;
					preFun.call(_self,v);
				}
			}
			Object.defineProperty(tar,key,newO);
			return true;
		}

		Context._default=new Context();
		Context.newKeys=[];
		__static(Context,
		['replaceKeys',function(){return this.replaceKeys=["font","fillStyle","textBaseline"];}
		]);
		return Context;
	})()


	/**
	*@private
	*<code>ResourceManager</code> 是资源管理类。它用于资源的载入、获取、销毁。
	*/
	//class laya.resource.ResourceManager
	var ResourceManager=(function(){
		function ResourceManager(){
			this._id=0;
			this._name=null;
			this._resources=null;
			this._memorySize=0;
			this._garbageCollectionRate=NaN;
			this._isOverflow=false;
			this.autoRelease=false;
			this.autoReleaseMaxSize=0;
			this._id=++ResourceManager._uniqueIDCounter;
			this._name="Content Manager";
			ResourceManager._isResourceManagersSorted=false;
			this._memorySize=0;
			this._isOverflow=false;
			this.autoRelease=false;
			this.autoReleaseMaxSize=1024 *1024 *512;
			this._garbageCollectionRate=0.2;
			ResourceManager._resourceManagers.push(this);
			this._resources=[];
		}

		__class(ResourceManager,'laya.resource.ResourceManager');
		var __proto=ResourceManager.prototype;
		Laya.imps(__proto,{"laya.resource.IDispose":true})
		/**打印图片路径信息**/
		__proto.traceInfo=function(){
			var tResource;
			for(var i=0;i <this._resources.length;i++){
				tResource=this._resources[i];
				if((tResource instanceof laya.webgl.resource.WebGLImage )){
					console.log("================image-src:"+(tResource).src+"     =====width:"+(tResource).width+"====height:"+(tResource).height);
				}
			}
		}

		/**
		*获取指定索引的资源 Resource 对象。
		*@param 索引。
		*@return 资源 Resource 对象。
		*/
		__proto.getResourceByIndex=function(index){
			return this._resources[index];
		}

		/**
		*获取此管理器所管理的资源个数。
		*@return 资源个数。
		*/
		__proto.getResourcesLength=function(){
			return this._resources.length;
		}

		/**
		*添加指定资源。
		*@param resource 需要添加的资源 Resource 对象。
		*@return 是否添加成功。
		*/
		__proto.addResource=function(resource){
			if (resource.resourceManager)
				resource.resourceManager.removeResource(resource);
			var index=this._resources.indexOf(resource);
			if (index===-1){
				resource._resourceManager=this;
				this._resources.push(resource);
				this.addSize(resource.memorySize);
				return true;
			}
			return false;
		}

		/**
		*移除指定资源。
		*@param resource 需要移除的资源 Resource 对象
		*@return 是否移除成功。
		*/
		__proto.removeResource=function(resource){
			var index=this._resources.indexOf(resource);
			if (index!==-1){
				this._resources.splice(index,1);
				resource._resourceManager=null;
				this._memorySize-=resource.memorySize;
				return true;
			}
			return false;
		}

		/**
		*卸载此资源管理器载入的资源。
		*/
		__proto.unload=function(){
			var tempResources=this._resources.slice(0,this._resources.length);
			for (var i=0;i < tempResources.length;i++){
				var resource=tempResources[i];
				resource.dispose();
			}
			tempResources.length=0;
		}

		/**
		*设置唯一名字。
		*@param newName 名字，如果名字重复则自动加上“-copy”。
		*/
		__proto.setUniqueName=function(newName){
			var isUnique=true;
			for (var i=0;i < ResourceManager._resourceManagers.length;i++){
				if (ResourceManager._resourceManagers[i]._name!==newName || ResourceManager._resourceManagers[i]===this)
					continue ;
				isUnique=false;
				return;
			}
			if (isUnique){
				if (this.name !=newName){
					this.name=newName;
					ResourceManager._isResourceManagersSorted=false;
				}
				}else{
				this.setUniqueName(newName.concat("-copy"));
			}
		}

		/**释放资源。*/
		__proto.dispose=function(){
			if (this===ResourceManager._systemResourceManager)
				throw new Error("systemResourceManager不能被释放！");
			ResourceManager._resourceManagers.splice(ResourceManager._resourceManagers.indexOf(this),1);
			ResourceManager._isResourceManagersSorted=false;
			var tempResources=this._resources.slice(0,this._resources.length);
			for (var i=0;i < tempResources.length;i++){
				var resource=tempResources[i];
				resource.resourceManager.removeResource(resource);
				resource.dispose();
			}
			tempResources.length=0;
		}

		/**
		*增加内存。
		*@param add 需要增加的内存大小。
		*/
		__proto.addSize=function(add){
			if (add){
				if (this.autoRelease && add > 0)
					((this._memorySize+add)> this.autoReleaseMaxSize)&& (this.garbageCollection((1-this._garbageCollectionRate)*this.autoReleaseMaxSize));
				this._memorySize+=add;
			}
		}

		/**
		*垃圾回收。
		*@param reserveSize 保留尺寸。
		*/
		__proto.garbageCollection=function(reserveSize){
			var all=this._resources;
			all=all.slice();
			all.sort(function(a,b){
				if (!a || !b)
					throw new Error("a或b不能为空！");
				if (a.released && b.released)
					return 0;
				else if (a.released)
				return 1;
				else if (b.released)
				return-1;
				return a.lastUseFrameCount-b.lastUseFrameCount;
			});
			var currentFrameCount=Stat.loopCount;
			for (var i=0,n=all.length;i < n;i++){
				var resou=all[i];
				if (currentFrameCount-resou.lastUseFrameCount > 1){
					resou.releaseResource();
					}else {
					if (this._memorySize >=reserveSize)
						this._isOverflow=true;
					return;
				}
				if (this._memorySize < reserveSize){
					this._isOverflow=false;
					return;
				}
			}
		}

		/**
		*唯一标识 ID 。
		*/
		__getset(0,__proto,'id',function(){
			return this._id;
		});

		/**
		*名字。
		*/
		__getset(0,__proto,'name',function(){
			return this._name;
			},function(value){
			if ((value || value!=="")&& this._name!==value){
				this._name=value;
				ResourceManager._isResourceManagersSorted=false;
			}
		});

		/**
		*此管理器所管理资源的累计内存，以字节为单位。
		*/
		__getset(0,__proto,'memorySize',function(){
			return this._memorySize;
		});

		/**
		*系统资源管理器。
		*/
		__getset(1,ResourceManager,'systemResourceManager',function(){
			(ResourceManager._systemResourceManager===null)&& (ResourceManager._systemResourceManager=new ResourceManager(),ResourceManager._systemResourceManager._name="System Resource Manager");
			return ResourceManager._systemResourceManager;
		});

		/**
		*排序后的资源管理器列表。
		*/
		__getset(1,ResourceManager,'sortedResourceManagersByName',function(){
			if (!ResourceManager._isResourceManagersSorted){
				ResourceManager._isResourceManagersSorted=true;
				ResourceManager._resourceManagers.sort(ResourceManager.compareResourceManagersByName);
			}
			return ResourceManager._resourceManagers;
		});

		ResourceManager.__init__=function(){
			ResourceManager.currentResourceManager=ResourceManager.systemResourceManager;
		}

		ResourceManager.getLoadedResourceManagerByIndex=function(index){
			return ResourceManager._resourceManagers[index];
		}

		ResourceManager.getLoadedResourceManagersCount=function(){
			return ResourceManager._resourceManagers.length;
		}

		ResourceManager.recreateContentManagers=function(force){
			(force===void 0)&& (force=false);
			var temp=ResourceManager.currentResourceManager;
			for (var i=0;i < ResourceManager._resourceManagers.length;i++){
				ResourceManager.currentResourceManager=ResourceManager._resourceManagers[i];
				for (var j=0;j < ResourceManager.currentResourceManager._resources.length;j++){
					ResourceManager.currentResourceManager._resources[j].releaseResource(force);
					ResourceManager.currentResourceManager._resources[j].activeResource(force);
				}
			}
			ResourceManager.currentResourceManager=temp;
		}

		ResourceManager.releaseContentManagers=function(force){
			(force===void 0)&& (force=false);
			var temp=ResourceManager.currentResourceManager;
			for (var i=0;i < ResourceManager._resourceManagers.length;i++){
				ResourceManager.currentResourceManager=ResourceManager._resourceManagers[i];
				for (var j=0;j < ResourceManager.currentResourceManager._resources.length;j++){
					var resource=ResourceManager.currentResourceManager._resources[j];
					(!resource.released)&& (resource.releaseResource(force));
				}
			}
			ResourceManager.currentResourceManager=temp;
		}

		ResourceManager.compareResourceManagersByName=function(left,right){
			if (left==right)
				return 0;
			var x=left._name;
			var y=right._name;
			if (x==null){
				if (y==null)
					return 0;
				else
				return-1;
				}else {
				if (y==null)
					return 1;
				else {
					var retval=x.localeCompare(y);
					if (retval !=0)
						return retval;
					else {
						right.setUniqueName(y);
						y=right._name;
						return x.localeCompare(y);
					}
				}
			}
		}

		ResourceManager._uniqueIDCounter=0;
		ResourceManager._systemResourceManager=null
		ResourceManager._isResourceManagersSorted=false;
		ResourceManager._resourceManagers=[];
		ResourceManager.currentResourceManager=null
		return ResourceManager;
	})()


	/**
	*@private
	*/
	//class laya.system.System
	var System$1=(function(){
		function System(){};
		__class(System,'laya.system.System',null,'System$1');
		System.changeDefinition=function(name,classObj){
			Laya[name]=classObj;
			var str=name+"=classObj";
			eval(str);
		}

		System.__init__=function(){
			if (Render.isConchApp){
				conch.disableConchResManager();
				conch.disableConchAutoRestoreLostedDevice();
			}
		}

		return System;
	})()


	/**
	*<code>LayoutStyle</code> 是一个布局样式类。
	*/
	//class laya.ui.LayoutStyle
	var LayoutStyle=(function(){
		function LayoutStyle(){
			this.enable=false;
			this.top=NaN;
			this.bottom=NaN;
			this.left=NaN;
			this.right=NaN;
			this.centerX=NaN;
			this.centerY=NaN;
			this.anchorX=NaN;
			this.anchorY=NaN;
		}

		__class(LayoutStyle,'laya.ui.LayoutStyle');
		__static(LayoutStyle,
		['EMPTY',function(){return this.EMPTY=new LayoutStyle();}
		]);
		return LayoutStyle;
	})()


	/**
	*<code>Styles</code> 定义了组件常用的样式属性。
	*/
	//class laya.ui.Styles
	var Styles=(function(){
		function Styles(){};
		__class(Styles,'laya.ui.Styles');
		Styles.labelColor="#000000";
		Styles.buttonStateNum=3;
		Styles.scrollBarMinNum=15;
		Styles.scrollBarDelayTime=500;
		__static(Styles,
		['defaultSizeGrid',function(){return this.defaultSizeGrid=[4,4,4,4,0];},'labelPadding',function(){return this.labelPadding=[2,2,2,2];},'inputLabelPadding',function(){return this.inputLabelPadding=[1,1,1,3];},'buttonLabelColors',function(){return this.buttonLabelColors=["#32556b","#32cc6b","#ff0000","#C0C0C0"];},'comboBoxItemColors',function(){return this.comboBoxItemColors=["#5e95b6","#ffffff","#000000","#8fa4b1","#ffffff"];}
		]);
		return Styles;
	})()


	/**
	*<code>UIUtils</code> 是文本工具集。
	*/
	//class laya.ui.UIUtils
	var UIUtils=(function(){
		function UIUtils(){};
		__class(UIUtils,'laya.ui.UIUtils');
		UIUtils.fillArray=function(arr,str,type){
			var temp=arr.concat();
			if (str){
				var a=str.split(",");
				for (var i=0,n=Math.min(temp.length,a.length);i < n;i++){
					var value=a[i];
					temp[i]=(value=="true" ? true :(value=="false" ? false :value));
					if (type !=null)temp[i]=type(value);
				}
			}
			return temp;
		}

		UIUtils.toColor=function(color){
			return Utils$2.toHexColor(color);
		}

		UIUtils.gray=function(traget,isGray){
			(isGray===void 0)&& (isGray=true);
			if (isGray){
				UIUtils.addFilter(traget,UIUtils.grayFilter);
				}else {
				UIUtils.clearFilter(traget,ColorFilter);
			}
		}

		UIUtils.addFilter=function(target,filter){
			var filters=target.filters || [];
			filters.push(filter);
			target.filters=filters;
		}

		UIUtils.clearFilter=function(target,filterType){
			var filters=target.filters;
			if (filters !=null && filters.length > 0){
				for (var i=filters.length-1;i >-1;i--){
					var filter=filters[i];
					if (Laya.__typeof(filter,filterType))filters.splice(i,1);
				}
				target.filters=filters;
			}
		}

		UIUtils._getReplaceStr=function(word){
			return UIUtils.escapeSequence[word];
		}

		UIUtils.adptString=function(str){
			return str.replace(/\\(\w)/g,UIUtils._getReplaceStr);
		}

		__static(UIUtils,
		['grayFilter',function(){return this.grayFilter=new ColorFilter([0.3086,0.6094,0.082,0,0,0.3086,0.6094,0.082,0,0,0.3086,0.6094,0.082,0,0,0,0,0,1,0]);},'escapeSequence',function(){return this.escapeSequence={"\\n":"\n","\\t":"\t"};}
		]);
		return UIUtils;
	})()


	SoundManager;
	/**
	*<code>Browser</code> 是浏览器代理类。封装浏览器及原生 js 提供的一些功能。
	*/
	//class laya.utils.Browser
	var Browser=(function(){
		function Browser(){};
		__class(Browser,'laya.utils.Browser');
		/**设备像素比。*/
		__getset(1,Browser,'pixelRatio',function(){
			Browser.__init__();
			if (Browser.userAgent.indexOf("Mozilla/6.0(Linux; Android 6.0; HUAWEI NXT-AL10 Build/HUAWEINXT-AL10)")>-1)return 2;
			return RunDriver.getPixelRatio();
		});

		/**浏览器窗口物理高度。考虑了设备像素比。*/
		__getset(1,Browser,'height',function(){
			Browser.__init__();
			return ((Laya.stage && Laya.stage.canvasRotation)? Browser.clientWidth :Browser.clientHeight)*Browser.pixelRatio;
		});

		/**
		*浏览器窗口可视宽度。
		*通过分析浏览器信息获得。浏览器多个属性值优先级为：window.innerWidth(包含滚动条宽度)> document.body.clientWidth(不包含滚动条宽度)，如果前者为0或为空，则选择后者。
		*/
		__getset(1,Browser,'clientWidth',function(){
			Browser.__init__();
			return Browser.window.innerWidth || Browser.document.body.clientWidth;
		});

		/**浏览器原生 window 对象的引用。*/
		__getset(1,Browser,'window',function(){
			Browser.__init__();
			return Browser._window;
		});

		/**
		*浏览器窗口可视高度。
		*通过分析浏览器信息获得。浏览器多个属性值优先级为：window.innerHeight(包含滚动条高度)> document.body.clientHeight(不包含滚动条高度)> document.documentElement.clientHeight(不包含滚动条高度)，如果前者为0或为空，则选择后者。
		*/
		__getset(1,Browser,'clientHeight',function(){
			Browser.__init__();
			return Browser.window.innerHeight || Browser.document.body.clientHeight || Browser.document.documentElement.clientHeight;
		});

		/**浏览器窗口物理宽度。考虑了设备像素比。*/
		__getset(1,Browser,'width',function(){
			Browser.__init__();
			return ((Laya.stage && Laya.stage.canvasRotation)? Browser.clientHeight :Browser.clientWidth)*Browser.pixelRatio;
		});

		/**画布容器，用来盛放画布的容器。方便对画布进行控制*/
		__getset(1,Browser,'container',function(){
			Browser.__init__();
			if (!Browser._container){
				Browser._container=Browser.createElement("div");
				Browser._container.id="layaContainer";
				Browser.document.body.appendChild(Browser._container);
			}
			return Browser._container;
			},function(value){
			Browser._container=value;
		});

		/**浏览器原生 document 对象的引用。*/
		__getset(1,Browser,'document',function(){
			Browser.__init__();
			return Browser._document;
		});

		Browser.__init__=function(){
			SoundManager;
			if (Browser._window)return;
			Browser._window=RunDriver.getWindow();
			Browser._document=Browser.window.document;
			Browser._window.addEventListener('message',function(e){
				laya.utils.Browser._onMessage(e);
			},false);
			Browser.document.__createElement=Browser.document.createElement;
			window.requestAnimationFrame=window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function (c){return window.setTimeout(c,1000 / 60);};;
			var $BS=window.document.body.style;$BS.margin=0;$BS.overflow='hidden';;
			var metas=window.document.getElementsByTagName('meta');;
			var i=0,flag=false,content='width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no';;
			while(i<metas.length){var meta=metas[i];if(meta.name=='viewport'){meta.content=content;flag=true;break;}i++;};
			//if(!flag){meta=document.createElement('meta');meta.name='viewport',meta.content=content;document.getElementsByTagName('head')[0].appendChild(meta);};
			Browser.userAgent=/*[SAFE]*/ Browser.window.navigator.userAgent;
			Browser.u=/*[SAFE]*/ Browser.userAgent;
			Browser.onIOS=/*[SAFE]*/ !!Browser.u.match(/\(i[^;]+;(U;)? CPU.+Mac OS X/);
			Browser.onMobile=/*[SAFE]*/ Browser.u.indexOf("Mobile")>-1;
			Browser.onIPhone=/*[SAFE]*/ Browser.u.indexOf("iPhone")>-1;
			Browser.onIPad=/*[SAFE]*/ Browser.u.indexOf("iPad")>-1;
			Browser.onAndriod=/*[SAFE]*/ Browser.u.indexOf('Android')>-1 || Browser.u.indexOf('Adr')>-1;
			Browser.onWP=/*[SAFE]*/ Browser.u.indexOf("Windows Phone")>-1;
			Browser.onQQBrowser=/*[SAFE]*/ Browser.u.indexOf("QQBrowser")>-1;
			Browser.onMQQBrowser=/*[SAFE]*/ Browser.u.indexOf("MQQBrowser")>-1;
			Browser.onIE=/*[SAFE]*/ !!Browser.window.ActiveXObject || "ActiveXObject" in Browser.window;
			Browser.onWeiXin=/*[SAFE]*/ Browser.u.indexOf('MicroMessenger')>-1;
			Browser.onPC=/*[SAFE]*/ !Browser.onMobile;
			Browser.onSafari=/*[SAFE]*/ !!Browser.u.match(/Version\/\d+\.\d\x20Mobile\/\S+\x20Safari/);
			Browser.httpProtocol=/*[SAFE]*/ Browser.window.location.protocol=="http:";
			Browser.onMiniGame=/*[SAFE]*/ Browser.u.indexOf('MiniGame')>-1;
			Browser.webAudioEnabled=/*[SAFE]*/ Browser.window["AudioContext"] || Browser.window["webkitAudioContext"] || Browser.window["mozAudioContext"] ? true :false;
			Browser.soundType=/*[SAFE]*/ Browser.webAudioEnabled ? "WEBAUDIOSOUND" :"AUDIOSOUND";
			Browser.onIPhoneX=/iPhone/gi.test(Browser.window.navigator.userAgent)&& (Math.min(Browser.clientHeight,Browser.clientWidth)==375 && Math.max(Browser.clientHeight,Browser.clientWidth)==812);
			Sound=Browser.webAudioEnabled?WebAudioSound:AudioSound;;
			if (Browser.webAudioEnabled)WebAudioSound.initWebAudio();;
			Browser.enableTouch=(('ontouchstart' in window)|| window.DocumentTouch && document instanceof DocumentTouch);
			window.focus();
			SoundManager._soundClass=Sound;;
			Render._mainCanvas=Render._mainCanvas || HTMLCanvas.create('2D');
			if (Browser.canvas)return;
			Browser.canvas=HTMLCanvas.create('2D');
			Browser.context=Browser.canvas.getContext('2d');
		}

		Browser._onMessage=function(e){
			if (!e.data)return;
			if (e.data.name=="size"){
				Browser.window.innerWidth=e.data.width;
				Browser.window.innerHeight=e.data.height;
				Browser.window.__innerHeight=e.data.clientHeight;
				if (!Browser.document.createEvent){
					console.warn("no document.createEvent");
					return;
				};
				var evt=Browser.document.createEvent("HTMLEvents");
				evt.initEvent("resize",false,false);
				Browser.window.dispatchEvent(evt);
				return;
			}
		}

		Browser.createElement=function(type){
			Browser.__init__();
			return Browser.document.__createElement(type);
		}

		Browser.getElementById=function(type){
			Browser.__init__();
			return Browser.document.getElementById(type);
		}

		Browser.removeElement=function(ele){
			if (ele && ele.parentNode)ele.parentNode.removeChild(ele);
		}

		Browser.now=function(){
			return RunDriver.now();
		}

		Browser._window=null
		Browser._document=null
		Browser._container=null
		Browser.userAgent=null
		Browser.u=null
		Browser.onIOS=false;
		Browser.onMobile=false;
		Browser.onIPhone=false;
		Browser.onIPad=false;
		Browser.onAndriod=false;
		Browser.onAndroid=false;
		Browser.onWP=false;
		Browser.onQQBrowser=false;
		Browser.onMQQBrowser=false;
		Browser.onSafari=false;
		Browser.onIE=false;
		Browser.onWeiXin=false;
		Browser.onPC=false;
		Browser.httpProtocol=false;
		Browser.onMiniGame=false;
		Browser.webAudioEnabled=false;
		Browser.soundType=null
		Browser.enableTouch=false;
		Browser.canvas=null
		Browser.context=null
		Browser.onIPhoneX=false;
		Browser.__init$=function(){
			AudioSound;
			WebAudioSound;
		}

		return Browser;
	})()


	/**
	*@private
	*对象缓存统一管理类
	*/
	//class laya.utils.CacheManger
	var CacheManger=(function(){
		function CacheManger(){}
		__class(CacheManger,'laya.utils.CacheManger');
		CacheManger.regCacheByFunction=function(disposeFunction,getCacheListFunction){
			CacheManger.unRegCacheByFunction(disposeFunction,getCacheListFunction);
			var cache;
			cache={tryDispose:disposeFunction,getCacheList:getCacheListFunction};
			CacheManger._cacheList.push(cache);
		}

		CacheManger.unRegCacheByFunction=function(disposeFunction,getCacheListFunction){
			var i=0,len=0;
			len=CacheManger._cacheList.length;
			for (i=0;i < len;i++){
				if (CacheManger._cacheList[i].tryDispose==disposeFunction && CacheManger._cacheList[i].getCacheList==getCacheListFunction){
					CacheManger._cacheList.splice(i,1);
					return;
				}
			}
		}

		CacheManger.forceDispose=function(){
			var i=0,len=CacheManger._cacheList.length;
			for (i=0;i < len;i++){
				CacheManger._cacheList[i].tryDispose(true);
			}
		}

		CacheManger.beginCheck=function(waitTime){
			(waitTime===void 0)&& (waitTime=15000);
			Laya.timer.loop(waitTime,null,CacheManger._checkLoop);
		}

		CacheManger.stopCheck=function(){
			Laya.timer.clear(null,CacheManger._checkLoop);
		}

		CacheManger._checkLoop=function(){
			var cacheList=CacheManger._cacheList;
			if (cacheList.length < 1)return;
			var tTime=Laya.timer.currTimer;
			var count=0;
			var len=0;
			len=count=cacheList.length;
			while (count > 0){
				CacheManger._index++;
				CacheManger._index=CacheManger._index % len;
				cacheList[CacheManger._index].tryDispose(false);
				if (Laya.timer.currTimer-tTime > CacheManger.loopTimeLimit)break ;
				count--;
			}
		}

		CacheManger.loopTimeLimit=2;
		CacheManger._cacheList=[];
		CacheManger._index=0;
		return CacheManger;
	})()


	/**
	*<code>ClassUtils</code> 是一个类工具类。
	*/
	//class laya.utils.ClassUtils
	var ClassUtils=(function(){
		function ClassUtils(){};
		__class(ClassUtils,'laya.utils.ClassUtils');
		ClassUtils.regClass=function(className,classDef){
			ClassUtils._classMap[className]=classDef;
		}

		ClassUtils.getRegClass=function(className){
			return ClassUtils._classMap[className];
		}

		ClassUtils.getInstance=function(className){
			var compClass=ClassUtils.getClass(className);
			if (compClass)
				return new compClass();
			else
			console.warn("[error] Undefined class:",className);
			return null;
		}

		ClassUtils.createByJson=function(json,node,root,customHandler,instanceHandler){
			if ((typeof json=='string'))
				json=JSON.parse(json);
			var props=json.props;
			if (!node){
				node=instanceHandler ? instanceHandler.runWith(json):ClassUtils.getInstance(props.runtime || json.type);
				if (!node)
					return null;
			};
			var child=json.child;
			if (child){
				for (var i=0,n=child.length;i < n;i++){
					var data=child[i];
					if ((data.props.name==="render" || data.props.renderType==="render")&& node["_$set_itemRender"])
						node.itemRender=data;
					else {
						if (data.type=="Graphic"){
							ClassUtils.addGraphicsToSprite(data,node);
							}else if (ClassUtils.isDrawType(data.type)){
							ClassUtils.addGraphicToSprite(data,node,true);
							}else {
							var tChild=ClassUtils.createByJson(data,null,root,customHandler,instanceHandler)
							if (data.type=="Script"){
								if (tChild.hasOwnProperty("owner")){
									tChild["owner"]=node;
									}else if (tChild.hasOwnProperty("target")){
									tChild["target"]=node;
								}
								}else if (data.props.renderType=="mask"){
								node.mask=tChild;
								}else {
								node.addChild(tChild);
							}
						}
					}
				}
			}
			if (props){
				for (var prop in props){
					var value=props[prop];
					if (prop==="var" && root){
						root[value]=node;
						}else if ((value instanceof Array)&& (typeof (node[prop])=='function')){
						node[prop].apply(node,value);
						}else {
						node[prop]=value;
					}
				}
			}
			if (customHandler && json.customProps){
				customHandler.runWith([node,json]);
			}
			if (node["created"])
				node.created();
			return node;
		}

		ClassUtils.addGraphicsToSprite=function(graphicO,sprite){
			var graphics;
			graphics=graphicO.child;
			if (!graphics || graphics.length < 1)
				return;
			var g;
			g=ClassUtils._getGraphicsFromSprite(graphicO,sprite);
			var ox=0;
			var oy=0;
			if (graphicO.props){
				ox=ClassUtils._getObjVar(graphicO.props,"x",0);
				oy=ClassUtils._getObjVar(graphicO.props,"y",0);
			}
			if (ox !=0 && oy !=0){
				g.translate(ox,oy);
			};
			var i=0,len=0;
			len=graphics.length;
			for (i=0;i < len;i++){
				ClassUtils._addGraphicToGraphics(graphics[i],g);
			}
			if (ox !=0 && oy !=0){
				g.translate(-ox,-oy);
			}
		}

		ClassUtils.addGraphicToSprite=function(graphicO,sprite,isChild){
			(isChild===void 0)&& (isChild=false);
			var g;
			g=isChild ? ClassUtils._getGraphicsFromSprite(graphicO,sprite):sprite.graphics;
			ClassUtils._addGraphicToGraphics(graphicO,g);
		}

		ClassUtils._getGraphicsFromSprite=function(dataO,sprite){
			var g;
			if (!dataO || !dataO.props)
				return sprite.graphics;
			var propsName;
			propsName=dataO.props.renderType;
			switch (propsName){
				case "hit":
				case "unHit":;
					var hitArea;
					if (!sprite.hitArea){
						sprite.hitArea=new HitArea();
					}
					hitArea=sprite.hitArea;
					if (!hitArea[propsName]){
						hitArea[propsName]=new Graphics();
					}
					g=hitArea[propsName];
					break ;
				default :
				}
			if (!g)
				g=sprite.graphics;
			return g;
		}

		ClassUtils._getTransformData=function(propsO){
			var m;
			if (propsO.hasOwnProperty("pivotX")|| propsO.hasOwnProperty("pivotY")){
				m=m || new Matrix();
				m.translate(-ClassUtils._getObjVar(propsO,"pivotX",0),-ClassUtils._getObjVar(propsO,"pivotY",0));
			};
			var sx=ClassUtils._getObjVar(propsO,"scaleX",1),sy=ClassUtils._getObjVar(propsO,"scaleY",1);
			var rotate=ClassUtils._getObjVar(propsO,"rotation",0);
			var skewX=ClassUtils._getObjVar(propsO,"skewX",0);
			var skewY=ClassUtils._getObjVar(propsO,"skewY",0);
			if (sx !=1 || sy !=1 || rotate !=0){
				m=m || new Matrix();
				m.scale(sx,sy);
				m.rotate(rotate *0.0174532922222222);
			}
			return m;
		}

		ClassUtils._addGraphicToGraphics=function(graphicO,graphic){
			var propsO;
			propsO=graphicO.props;
			if (!propsO)
				return;
			var drawConfig;
			drawConfig=ClassUtils.DrawTypeDic[graphicO.type];
			if (!drawConfig)
				return;
			var g;
			g=graphic;
			var m;
			var params=ClassUtils._getParams(propsO,drawConfig[1],drawConfig[2],drawConfig[3]);
			m=ClassUtils._tM;
			if (m || ClassUtils._alpha !=1){
				g.save();
				if (m)
					g.transform(m);
				if (ClassUtils._alpha !=1)
					g.alpha(ClassUtils._alpha);
			}
			g[drawConfig[0]].apply(g,params);
			if (m || ClassUtils._alpha !=1){
				g.restore();
			}
		}

		ClassUtils._adptLineData=function(params){
			params[2]=parseFloat(params[0])+parseFloat(params[2]);
			params[3]=parseFloat(params[1])+parseFloat(params[3]);
			return params;
		}

		ClassUtils._adptTextureData=function(params){
			params[0]=Loader.getRes(params[0]);
			return params;
		}

		ClassUtils._adptLinesData=function(params){
			params[2]=ClassUtils._getPointListByStr(params[2]);
			return params;
		}

		ClassUtils.isDrawType=function(type){
			if (type=="Image")
				return false;
			return ClassUtils.DrawTypeDic.hasOwnProperty(type);
		}

		ClassUtils._getParams=function(obj,params,xPos,adptFun){
			(xPos===void 0)&& (xPos=0);
			var rst;
			rst=ClassUtils._temParam;
			rst.length=params.length;
			var i=0,len=0;
			len=params.length;
			for (i=0;i < len;i++){
				rst[i]=ClassUtils._getObjVar(obj,params[i][0],params[i][1]);
			}
			ClassUtils._alpha=ClassUtils._getObjVar(obj,"alpha",1);
			var m;
			m=ClassUtils._getTransformData(obj);
			if (m){
				if (!xPos)xPos=0;
				m.translate(rst[xPos],rst[xPos+1]);
				rst[xPos]=rst[xPos+1]=0;
				ClassUtils._tM=m;
				}else {
				ClassUtils._tM=null;
			}
			if (adptFun && ClassUtils[adptFun]){
				rst=ClassUtils[adptFun](rst);
			}
			return rst;
		}

		ClassUtils._getPointListByStr=function(str){
			var pointArr;
			pointArr=str.split(",");
			var i=0,len=0;
			len=pointArr.length;
			for (i=0;i < len;i++){
				pointArr[i]=parseFloat(pointArr[i]);
			}
			return pointArr;
		}

		ClassUtils._getObjVar=function(obj,key,noValue){
			if (obj.hasOwnProperty(key)){
				return obj[key];
			}
			return noValue;
		}

		ClassUtils._temParam=[];
		ClassUtils._classMap={'Sprite':'laya.display.Sprite','Text':'laya.display.Text','Animation':'laya.display.Animation','Skeleton':'laya.ani.bone.Skeleton','Particle2D':'laya.particle.Particle2D','div':'laya.html.dom.HTMLDivElement','p':'laya.html.dom.HTMLElement','img':'laya.html.dom.HTMLImageElement','span':'laya.html.dom.HTMLElement','br':'laya.html.dom.HTMLBrElement','style':'laya.html.dom.HTMLStyleElement','font':'laya.html.dom.HTMLElement','a':'laya.html.dom.HTMLElement','#text':'laya.html.dom.HTMLElement'};
		ClassUtils.getClass=function(className){
			var classObject=ClassUtils._classMap[className] || className;
			if ((typeof classObject=='string'))
				return Laya["__classmap"][classObject];
			return classObject;
		}

		ClassUtils._tM=null
		ClassUtils._alpha=NaN
		__static(ClassUtils,
		['DrawTypeDic',function(){return this.DrawTypeDic={"Rect":["drawRect",[["x",0],["y",0],["width",0],["height",0],["fillColor",null],["lineColor",null],["lineWidth",1]]],"Circle":["drawCircle",[["x",0],["y",0],["radius",0],["fillColor",null],["lineColor",null],["lineWidth",1]]],"Pie":["drawPie",[["x",0],["y",0],["radius",0],["startAngle",0],["endAngle",0],["fillColor",null],["lineColor",null],["lineWidth",1]]],"Image":["drawTexture",[["x",0],["y",0],["width",0],["height",0]]],"Texture":["drawTexture",[["skin",null],["x",0],["y",0],["width",0],["height",0]],1,"_adptTextureData"],"FillTexture":["fillTexture",[["skin",null],["x",0],["y",0],["width",0],["height",0],["repeat",null]],1,"_adptTextureData"],"FillText":["fillText",[["text",""],["x",0],["y",0],["font",null],["color",null],["textAlign",null]],1],"Line":["drawLine",[["x",0],["y",0],["toX",0],["toY",0],["lineColor",null],["lineWidth",0]],0,"_adptLineData"],"Lines":["drawLines",[["x",0],["y",0],["points",""],["lineColor",null],["lineWidth",0]],0,"_adptLinesData"],"Curves":["drawCurves",[["x",0],["y",0],["points",""],["lineColor",null],["lineWidth",0]],0,"_adptLinesData"],"Poly":["drawPoly",[["x",0],["y",0],["points",""],["fillColor",null],["lineColor",null],["lineWidth",1]],0,"_adptLinesData"]};}
		]);
		return ClassUtils;
	})()


	/**
	*@private
	*<code>Color</code> 是一个颜色值处理类。
	*/
	//class laya.utils.Color
	var Color$2=(function(){
		function Color(str){
			this._color=[];
			//this.strColor=null;
			//this.numColor=0;
			//this._drawStyle=null;
			if ((typeof str=='string')){
				this.strColor=str;
				if (str===null)str="#000000";
				str.charAt(0)=='#' && (str=str.substr(1));
				var len=str.length;
				if (len==3 || len==4){
					var temp="";
					for (var i=0;i < len;i++){
						temp+=(str[i]+str[i]);
					}
					str=temp;
				};
				var color=this.numColor=parseInt(str,16);
				var flag=(str.length==8);
				if (flag){
					this._color=[parseInt(str.substr(0,2),16)/ 255,((0x00FF0000 & color)>> 16)/ 255,((0x0000FF00 & color)>> 8)/ 255,(0x000000FF & color)/ 255];
					return;
				}
				}else {
				color=this.numColor=str;
				this.strColor=Utils$2.toHexColor(color);
			}
			this._color=[((0xFF0000 & color)>> 16)/ 255,((0xFF00 & color)>> 8)/ 255,(0xFF & color)/ 255,1];
			(this._color).__id=++Color._COLODID;
		}

		__class(Color,'laya.utils.Color',null,'Color$2');
		Color._initDefault=function(){
			Color._DEFAULT={};
			for (var i in Color._COLOR_MAP)Color._SAVE[i]=Color._DEFAULT[i]=new Color(Color._COLOR_MAP[i]);
			return Color._DEFAULT;
		}

		Color._initSaveMap=function(){
			Color._SAVE_SIZE=0;
			Color._SAVE={};
			for (var i in Color._DEFAULT)Color._SAVE[i]=Color._DEFAULT[i];
		}

		Color.create=function(str){
			var color=Color._SAVE[str+""];
			if (color !=null)return color;
			(Color._SAVE_SIZE < 1000)|| Color._initSaveMap();
			return Color._SAVE[str+""]=new Color(str);
		}

		Color._SAVE={};
		Color._SAVE_SIZE=0;
		Color._COLOR_MAP={"white":'#FFFFFF',"red":'#FF0000',"green":'#00FF00',"blue":'#0000FF',"black":'#000000',"yellow":'#FFFF00','gray':'#AAAAAA'};
		Color._DEFAULT=Color._initDefault();
		Color._COLODID=1;
		return Color;
	})()


	/**
	*@private
	*<code>Dragging</code> 类是触摸滑动控件。
	*/
	//class laya.utils.Dragging
	var Dragging=(function(){
		function Dragging(){
			//this.target=null;
			this.ratio=0.92;
			this.maxOffset=60;
			//this.area=null;
			//this.hasInertia=false;
			//this.elasticDistance=NaN;
			//this.elasticBackTime=NaN;
			//this.data=null;
			this._dragging=false;
			this._clickOnly=true;
			//this._elasticRateX=NaN;
			//this._elasticRateY=NaN;
			//this._lastX=NaN;
			//this._lastY=NaN;
			//this._offsetX=NaN;
			//this._offsetY=NaN;
			//this._offsets=null;
			//this._disableMouseEvent=false;
			//this._tween=null;
			//this._parent=null;
		}

		__class(Dragging,'laya.utils.Dragging');
		var __proto=Dragging.prototype;
		/**
		*开始拖拽。
		*@param target 待拖拽的 <code>Sprite</code> 对象。
		*@param area 滑动范围。
		*@param hasInertia 拖动是否有惯性。
		*@param elasticDistance 橡皮筋最大值。
		*@param elasticBackTime 橡皮筋回弹时间，单位为毫秒。
		*@param data 事件携带数据。
		*@param disableMouseEvent 鼠标事件是否有效。
		*@param ratio 惯性阻尼系数
		*/
		__proto.start=function(target,area,hasInertia,elasticDistance,elasticBackTime,data,disableMouseEvent,ratio){
			(ratio===void 0)&& (ratio=0.92);
			this.clearTimer();
			this.target=target;
			this.area=area;
			this.hasInertia=hasInertia;
			this.elasticDistance=area ? elasticDistance :0;
			this.elasticBackTime=elasticBackTime;
			this.data=data;
			this._disableMouseEvent=disableMouseEvent;
			this.ratio=ratio;
			if (target.globalScaleX !=1 || target.globalScaleY !=1){
				this._parent=target.parent;
				}else {
				this._parent=Laya.stage;
			}
			this._clickOnly=true;
			this._dragging=true;
			this._elasticRateX=this._elasticRateY=1;
			this._lastX=this._parent.mouseX;
			this._lastY=this._parent.mouseY;
			Laya.stage.on("mouseup",this,this.onStageMouseUp);
			Laya.stage.on("mouseout",this,this.onStageMouseUp);
			Laya.timer.frameLoop(1,this,this.loop);
		}

		/**
		*清除计时器。
		*/
		__proto.clearTimer=function(){
			Laya.timer.clear(this,this.loop);
			Laya.timer.clear(this,this.tweenMove);
			if (this._tween){
				this._tween.recover();
				this._tween=null;
			}
		}

		/**
		*停止拖拽。
		*/
		__proto.stop=function(){
			if (this._dragging){
				MouseManager.instance.disableMouseEvent=false;
				Laya.stage.off("mouseup",this,this.onStageMouseUp);
				Laya.stage.off("mouseout",this,this.onStageMouseUp);
				this._dragging=false;
				this.target && this.area && this.backToArea();
				this.clear();
			}
		}

		/**
		*拖拽的循环处理函数。
		*/
		__proto.loop=function(){
			var point=this._parent.getMousePoint();
			var mouseX=point.x;
			var mouseY=point.y;
			var offsetX=mouseX-this._lastX;
			var offsetY=mouseY-this._lastY;
			if (this._clickOnly){
				if (Math.abs(offsetX *Laya.stage._canvasTransform.getScaleX())> 1 || Math.abs(offsetY *Laya.stage._canvasTransform.getScaleY())> 1){
					this._clickOnly=false;
					this._offsets || (this._offsets=[]);
					this._offsets.length=0;
					this.target.event("dragstart",this.data);
					MouseManager.instance.disableMouseEvent=this._disableMouseEvent;
					this.target._set$P("$_MOUSEDOWN",false);
				}else return;
				}else {
				this._offsets.push(offsetX,offsetY);
			}
			if (offsetX===0 && offsetY===0)return;
			this._lastX=mouseX;
			this._lastY=mouseY;
			this.target.x+=offsetX *this._elasticRateX;
			this.target.y+=offsetY *this._elasticRateY;
			this.area && this.checkArea();
			this.target.event("dragmove",this.data);
		}

		/**
		*拖拽区域检测。
		*/
		__proto.checkArea=function(){
			if (this.elasticDistance <=0){
				this.backToArea();
				}else {
				if (this.target.x < this.area.x){
					var offsetX=this.area.x-this.target.x;
					}else if (this.target.x > this.area.x+this.area.width){
					offsetX=this.target.x-this.area.x-this.area.width;
					}else {
					offsetX=0;
				}
				this._elasticRateX=Math.max(0,1-(offsetX / this.elasticDistance));
				if (this.target.y < this.area.y){
					var offsetY=this.area.y-this.target.y;
					}else if (this.target.y > this.area.y+this.area.height){
					offsetY=this.target.y-this.area.y-this.area.height;
					}else {
					offsetY=0;
				}
				this._elasticRateY=Math.max(0,1-(offsetY / this.elasticDistance));
			}
		}

		/**
		*移动至设定的拖拽区域。
		*/
		__proto.backToArea=function(){
			this.target.x=Math.min(Math.max(this.target.x,this.area.x),this.area.x+this.area.width);
			this.target.y=Math.min(Math.max(this.target.y,this.area.y),this.area.y+this.area.height);
		}

		/**
		*舞台的抬起事件侦听函数。
		*@param e Event 对象。
		*/
		__proto.onStageMouseUp=function(e){
			MouseManager.instance.disableMouseEvent=false;
			Laya.stage.off("mouseup",this,this.onStageMouseUp);
			Laya.stage.off("mouseout",this,this.onStageMouseUp);
			Laya.timer.clear(this,this.loop);
			if (this._clickOnly || !this.target)return;
			if (this.hasInertia){
				if (this._offsets.length < 1){
					this._offsets.push(this._parent.mouseX-this._lastX,this._parent.mouseY-this._lastY);
				}
				this._offsetX=this._offsetY=0;
				var len=this._offsets.length;
				var n=Math.min(len,6);
				var m=this._offsets.length-n;
				for (var i=len-1;i > m;i--){
					this._offsetY+=this._offsets[i--];
					this._offsetX+=this._offsets[i];
				}
				this._offsetX=this._offsetX / n *2;
				this._offsetY=this._offsetY / n *2;
				if (Math.abs(this._offsetX)> this.maxOffset)this._offsetX=this._offsetX > 0 ? this.maxOffset :-this.maxOffset;
				if (Math.abs(this._offsetY)> this.maxOffset)this._offsetY=this._offsetY > 0 ? this.maxOffset :-this.maxOffset;
				Laya.timer.frameLoop(1,this,this.tweenMove);
				}else if (this.elasticDistance > 0){
				this.checkElastic();
				}else {
				this.clear();
			}
		}

		/**
		*橡皮筋效果检测。
		*/
		__proto.checkElastic=function(){
			var tx=NaN;
			var ty=NaN;
			if (this.target.x < this.area.x)tx=this.area.x;
			else if (this.target.x > this.area.x+this.area.width)tx=this.area.x+this.area.width;
			if (this.target.y < this.area.y)ty=this.area.y;
			else if (this.target.y > this.area.y+this.area.height)ty=this.area.y+this.area.height;
			if (!isNaN(tx)|| !isNaN(ty)){
				var obj={};
				if (!isNaN(tx))obj.x=tx;
				if (!isNaN(ty))obj.y=ty;
				this._tween=Tween.to(this.target,obj,this.elasticBackTime,Ease.sineOut,Handler.create(this,this.clear),0,false,false);
				}else {
				this.clear();
			}
		}

		/**
		*移动。
		*/
		__proto.tweenMove=function(){
			this._offsetX *=this.ratio *this._elasticRateX;
			this._offsetY *=this.ratio *this._elasticRateY;
			this.target.x+=this._offsetX;
			this.target.y+=this._offsetY;
			this.area && this.checkArea();
			this.target.event("dragmove",this.data);
			if ((Math.abs(this._offsetX)< 1 && Math.abs(this._offsetY)< 1)|| this._elasticRateX < 0.5 || this._elasticRateY < 0.5){
				Laya.timer.clear(this,this.tweenMove);
				if (this.elasticDistance > 0)this.checkElastic();
				else this.clear();
			}
		}

		/**
		*结束拖拽。
		*/
		__proto.clear=function(){
			if (this.target){
				this.clearTimer();
				var sp=this.target;
				this.target=null;
				this._parent=null;
				sp.event("dragend",this.data);
			}
		}

		return Dragging;
	})()


	/**
	*<code>Ease</code> 类定义了缓动函数，以便实现 <code>Tween</code> 动画的缓动效果。
	*/
	//class laya.utils.Ease
	var Ease=(function(){
		function Ease(){};
		__class(Ease,'laya.utils.Ease');
		Ease.linearNone=function(t,b,c,d){
			return c *t / d+b;
		}

		Ease.linearIn=function(t,b,c,d){
			return c *t / d+b;
		}

		Ease.linearInOut=function(t,b,c,d){
			return c *t / d+b;
		}

		Ease.linearOut=function(t,b,c,d){
			return c *t / d+b;
		}

		Ease.bounceIn=function(t,b,c,d){
			return c-Ease.bounceOut(d-t,0,c,d)+b;
		}

		Ease.bounceInOut=function(t,b,c,d){
			if (t < d *0.5)return Ease.bounceIn(t *2,0,c,d)*.5+b;
			else return Ease.bounceOut(t *2-d,0,c,d)*.5+c *.5+b;
		}

		Ease.bounceOut=function(t,b,c,d){
			if ((t /=d)< (1 / 2.75))return c *(7.5625 *t *t)+b;
			else if (t < (2 / 2.75))return c *(7.5625 *(t-=(1.5 / 2.75))*t+.75)+b;
			else if (t < (2.5 / 2.75))return c *(7.5625 *(t-=(2.25 / 2.75))*t+.9375)+b;
			else return c *(7.5625 *(t-=(2.625 / 2.75))*t+.984375)+b;
		}

		Ease.backIn=function(t,b,c,d,s){
			(s===void 0)&& (s=1.70158);
			return c *(t /=d)*t *((s+1)*t-s)+b;
		}

		Ease.backInOut=function(t,b,c,d,s){
			(s===void 0)&& (s=1.70158);
			if ((t /=d *0.5)< 1)return c *0.5 *(t *t *(((s *=(1.525))+1)*t-s))+b;
			return c / 2 *((t-=2)*t *(((s *=(1.525))+1)*t+s)+2)+b;
		}

		Ease.backOut=function(t,b,c,d,s){
			(s===void 0)&& (s=1.70158);
			return c *((t=t / d-1)*t *((s+1)*t+s)+1)+b;
		}

		Ease.elasticIn=function(t,b,c,d,a,p){
			(a===void 0)&& (a=0);
			(p===void 0)&& (p=0);
			var s;
			if (t==0)return b;
			if ((t /=d)==1)return b+c;
			if (!p)p=d *.3;
			if (!a || (c > 0 && a < c)|| (c < 0 && a <-c)){
				a=c;
				s=p / 4;
			}else s=p / Ease.PI2 *Math.asin(c / a);
			return-(a *Math.pow(2,10 *(t-=1))*Math.sin((t *d-s)*Ease.PI2 / p))+b;
		}

		Ease.elasticInOut=function(t,b,c,d,a,p){
			(a===void 0)&& (a=0);
			(p===void 0)&& (p=0);
			var s;
			if (t==0)return b;
			if ((t /=d *0.5)==2)return b+c;
			if (!p)p=d *(.3 *1.5);
			if (!a || (c > 0 && a < c)|| (c < 0 && a <-c)){
				a=c;
				s=p / 4;
			}else s=p / Ease.PI2 *Math.asin(c / a);
			if (t < 1)return-.5 *(a *Math.pow(2,10 *(t-=1))*Math.sin((t *d-s)*Ease.PI2 / p))+b;
			return a *Math.pow(2,-10 *(t-=1))*Math.sin((t *d-s)*Ease.PI2 / p)*.5+c+b;
		}

		Ease.elasticOut=function(t,b,c,d,a,p){
			(a===void 0)&& (a=0);
			(p===void 0)&& (p=0);
			var s;
			if (t==0)return b;
			if ((t /=d)==1)return b+c;
			if (!p)p=d *.3;
			if (!a || (c > 0 && a < c)|| (c < 0 && a <-c)){
				a=c;
				s=p / 4;
			}else s=p / Ease.PI2 *Math.asin(c / a);
			return (a *Math.pow(2,-10 *t)*Math.sin((t *d-s)*Ease.PI2 / p)+c+b);
		}

		Ease.strongIn=function(t,b,c,d){
			return c *(t /=d)*t *t *t *t+b;
		}

		Ease.strongInOut=function(t,b,c,d){
			if ((t /=d *0.5)< 1)return c *0.5 *t *t *t *t *t+b;
			return c *0.5 *((t-=2)*t *t *t *t+2)+b;
		}

		Ease.strongOut=function(t,b,c,d){
			return c *((t=t / d-1)*t *t *t *t+1)+b;
		}

		Ease.sineInOut=function(t,b,c,d){
			return-c *0.5 *(Math.cos(Math.PI *t / d)-1)+b;
		}

		Ease.sineIn=function(t,b,c,d){
			return-c *Math.cos(t / d *Ease.HALF_PI)+c+b;
		}

		Ease.sineOut=function(t,b,c,d){
			return c *Math.sin(t / d *Ease.HALF_PI)+b;
		}

		Ease.quintIn=function(t,b,c,d){
			return c *(t /=d)*t *t *t *t+b;
		}

		Ease.quintInOut=function(t,b,c,d){
			if ((t /=d *0.5)< 1)return c *0.5 *t *t *t *t *t+b;
			return c *0.5 *((t-=2)*t *t *t *t+2)+b;
		}

		Ease.quintOut=function(t,b,c,d){
			return c *((t=t / d-1)*t *t *t *t+1)+b;
		}

		Ease.quartIn=function(t,b,c,d){
			return c *(t /=d)*t *t *t+b;
		}

		Ease.quartInOut=function(t,b,c,d){
			if ((t /=d *0.5)< 1)return c *0.5 *t *t *t *t+b;
			return-c *0.5 *((t-=2)*t *t *t-2)+b;
		}

		Ease.quartOut=function(t,b,c,d){
			return-c *((t=t / d-1)*t *t *t-1)+b;
		}

		Ease.cubicIn=function(t,b,c,d){
			return c *(t /=d)*t *t+b;
		}

		Ease.cubicInOut=function(t,b,c,d){
			if ((t /=d *0.5)< 1)return c *0.5 *t *t *t+b;
			return c *0.5 *((t-=2)*t *t+2)+b;
		}

		Ease.cubicOut=function(t,b,c,d){
			return c *((t=t / d-1)*t *t+1)+b;
		}

		Ease.quadIn=function(t,b,c,d){
			return c *(t /=d)*t+b;
		}

		Ease.quadInOut=function(t,b,c,d){
			if ((t /=d *0.5)< 1)return c *0.5 *t *t+b;
			return-c *0.5 *((--t)*(t-2)-1)+b;
		}

		Ease.quadOut=function(t,b,c,d){
			return-c *(t /=d)*(t-2)+b;
		}

		Ease.expoIn=function(t,b,c,d){
			return (t==0)? b :c *Math.pow(2,10 *(t / d-1))+b-c *0.001;
		}

		Ease.expoInOut=function(t,b,c,d){
			if (t==0)return b;
			if (t==d)return b+c;
			if ((t /=d *0.5)< 1)return c *0.5 *Math.pow(2,10 *(t-1))+b;
			return c *0.5 *(-Math.pow(2,-10 *--t)+2)+b;
		}

		Ease.expoOut=function(t,b,c,d){
			return (t==d)? b+c :c *(-Math.pow(2,-10 *t / d)+1)+b;
		}

		Ease.circIn=function(t,b,c,d){
			return-c *(Math.sqrt(1-(t /=d)*t)-1)+b;
		}

		Ease.circInOut=function(t,b,c,d){
			if ((t /=d *0.5)< 1)return-c *0.5 *(Math.sqrt(1-t *t)-1)+b;
			return c *0.5 *(Math.sqrt(1-(t-=2)*t)+1)+b;
		}

		Ease.circOut=function(t,b,c,d){
			return c *Math.sqrt(1-(t=t / d-1)*t)+b;
		}

		Ease.HALF_PI=Math.PI *0.5;
		Ease.PI2=Math.PI *2;
		return Ease;
	})()


	/**
	*...
	*@author
	*/
	//class laya.utils.ErrorLog
	var ErrorLog=(function(){
		function ErrorLog(){
			this.errorUrl=null;
			this.type=null;
			this.channel=null;
			this.gameId=0;
			this.version=null;
			this.dinfo=null;
			this.user=null;
			this.openid=null;
		}

		__class(ErrorLog,'laya.utils.ErrorLog');
		var __proto=ErrorLog.prototype;
		__proto.initError=function(){
			Browser.window.addEventListener("error",this.uploadErr.bind(this));
			if (Browser.onMiniGame){
				wx.onError(this.uploadErrwx.bind(this));
			}
		}

		/**
		*自动上传错误日志
		*@param e
		*/
		__proto.uploadErr=function(e){
			if (e && e.error&&ErrorLog.errorCount++<5){
				this.reportError("error",e.error.stack,null);
			}
		}

		__proto.uploadErrwx=function(res){
			if (res && res.message &&ErrorLog.errorCount++<5){
				this.reportError("error",res.message,null);
			}
		}

		__proto.getDay=function(sdate){
			var month=sdate.getMonth()+1;
			var day=sdate.getDate();
			var result=sdate.getFullYear()+""+(month < 10?"0"+month:month)+""+(day < 10?"0"+day:day);
			return result;
		}

		__proto.sendLog=function(pro,path,btype){
			var _$this=this;
			var htt=new HttpRequest();
			htt.on("error",this,function(p,bt,e){
				if (e && e.indexOf("[404]")!=-1){
					var htt1=new HttpRequest();
					htt1.send(_$this.errorUrl+"garbage/"+bt+"/",JSON.stringify(p),"post","text",["Content-Type","application/json"]);
				}
			},[pro,btype]);
			htt.send(this.errorUrl+path,JSON.stringify(pro),"post","text",["Content-Type","application/json"]);
		}

		__proto.reportError=function(etype,errorInfo,pro){
			pro=pro || {};
			var now=Date.now();
			var date=new Date(now+ErrorLog.deltaTime);
			pro.date=date.toLocaleString();
			pro.version=this.version;
			pro.gameId=this.gameId;
			pro.dinfo=this.dinfo;
			pro.channel=this.channel;
			pro.msg=errorInfo;
			pro["@timestamp"]=date.toISOString();
			pro.user=this.user;
			pro.openid=this.openid;
			var rdate=this.getDay(date);
			pro.rdate=rdate;
			pro.day=date.getDate()+"";
			pro.hour=date.getHours()+"";
			pro.minute=date.getMinutes()+"";
			pro.gameurl=document.baseURI;
			this.sendLog(pro,this.type+"-"+rdate.substring(0,6)+"/"+etype+"/",etype);
		}

		__proto.reportOneMin=function(stepType,value){
			var pro={};
			pro.step=stepType;
			this.reportError("onemin",value,pro);
		}

		__proto.addStat=function(type,data){
			var pro={};
			data.writeToObj(pro);
			this.reportError("statistics",type,pro);
		}

		ErrorLog.init=function(type,channel,gameId,version){ErrorLog.I=ErrorLog.I|| new ErrorLog();
			ErrorLog.I.channel=channel;
			ErrorLog.I.type=type;
			ErrorLog.I.gameId=gameId;
			ErrorLog.I.version=version;
			ErrorLog.I.dinfo=Browser.userAgent;
			var isSSL=false;
			if(Browser.onMiniGame){
				isSSL=Browser.window.wxSSL ? Browser.window.wxSSL :false;
				}else{
				isSSL=Browser.window.location.protocol=="https:";
			}
			ErrorLog.I.errorUrl=isSSL?"https://elastic.layabox.com/":"http://elastic.sh.1251285021.clb.myqcloud.com/";
			ErrorLog.I.initError();
		}

		ErrorLog.initUser=function(userId,openId){
			if (ErrorLog.I){
				ErrorLog.I.user=userId;
				ErrorLog.I.openid=openId;
			}
		}

		ErrorLog.deltaTime=0;
		ErrorLog.isinit=false;
		ErrorLog.ErrorUrlHttps="https://elastic.layabox.com/";
		ErrorLog.ErrorUrlHttp="http://elastic.sh.1251285021.clb.myqcloud.com/";
		ErrorLog.I=null
		ErrorLog.errorCount=0;
		return ErrorLog;
	})()


	/**
	*鼠标点击区域，可以设置绘制一系列矢量图作为点击区域和非点击区域（目前只支持圆形，矩形，多边形）
	*/
	//class laya.utils.HitArea
	var HitArea=(function(){
		function HitArea(){
			this._hit=null;
			this._unHit=null;
		}

		__class(HitArea,'laya.utils.HitArea');
		var __proto=HitArea.prototype;
		/**
		*是否包含某个点
		*@param x x坐标
		*@param y y坐标
		*@return 是否点击到
		*/
		__proto.isHit=function(x,y){
			if (!HitArea.isHitGraphic(x,y,this.hit))return false;
			return !HitArea.isHitGraphic(x,y,this.unHit);
		}

		/**
		*检测对象是否包含指定的点。
		*@param x 点的 X 轴坐标值（水平位置）。
		*@param y 点的 Y 轴坐标值（垂直位置）。
		*@return 如果包含指定的点，则值为 true；否则为 false。
		*/
		__proto.contains=function(x,y){
			return this.isHit(x,y);
		}

		/**
		*可点击区域，可以设置绘制一系列矢量图作为点击区域（目前只支持圆形，矩形，多边形）
		*/
		__getset(0,__proto,'hit',function(){
			if (!this._hit)this._hit=new Graphics();
			return this._hit;
			},function(value){
			this._hit=value;
		});

		/**
		*不可点击区域，可以设置绘制一系列矢量图作为非点击区域（目前只支持圆形，矩形，多边形）
		*/
		__getset(0,__proto,'unHit',function(){
			if (!this._unHit)this._unHit=new Graphics();
			return this._unHit;
			},function(value){
			this._unHit=value;
		});

		HitArea.isHitGraphic=function(x,y,graphic){
			if (!graphic)return false;
			var cmds;
			cmds=graphic.cmds;
			if (!cmds && graphic._one){
				cmds=HitArea._cmds;
				cmds.length=1;
				cmds[0]=graphic._one;
			}
			if (!cmds)return false;
			var i=0,len=0;
			len=cmds.length;
			var cmd;
			for (i=0;i < len;i++){
				cmd=cmds[i];
				if (!cmd)continue ;
				var context=Render._context;
				switch (cmd.callee){
					case context._translate:
					case 6:
						x-=cmd[0];
						y-=cmd[1];
					default :
					}
				if (HitArea.isHitCmd(x,y,cmd))return true;
			}
			return false;
		}

		HitArea.isHitCmd=function(x,y,cmd){
			if (!cmd)return false;
			var context=Render._context;
			var rst=false;
			switch (cmd["callee"]){
				case context._drawRect:
				case 13:
					HitArea._rec.setTo(cmd[0],cmd[1],cmd[2],cmd[3]);
					rst=HitArea._rec.contains(x,y);
					break ;
				case context._drawCircle:
				case context._fillCircle:
				case 14:;
					var d=NaN;
					x-=cmd[0];
					y-=cmd[1];
					d=x *x+y *y;
					rst=d < cmd[2] *cmd[2];
					break ;
				case context._drawPoly:
				case 18:
					x-=cmd[0];
					y-=cmd[1];
					rst=HitArea.ptInPolygon(x,y,cmd[2]);
					break ;
				default :
					break ;
				}
			return rst;
		}

		HitArea.ptInPolygon=function(x,y,areaPoints){
			var p;
			p=HitArea._ptPoint;
			p.setTo(x,y);
			var nCross=0;
			var p1x=NaN,p1y=NaN,p2x=NaN,p2y=NaN;
			var len=0;
			len=areaPoints.length;
			for (var i=0;i < len;i+=2){
				p1x=areaPoints[i];
				p1y=areaPoints[i+1];
				p2x=areaPoints[(i+2)% len];
				p2y=areaPoints[(i+3)% len];
				if (p1y==p2y)
					continue ;
				if (p.y < Math.min(p1y,p2y))
					continue ;
				if (p.y >=Math.max(p1y,p2y))
					continue ;
				var tx=(p.y-p1y)*(p2x-p1x)/ (p2y-p1y)+p1x;
				if (tx > p.x){
					nCross++;
				}
			}
			return (nCross % 2==1);
		}

		HitArea._cmds=[];
		__static(HitArea,
		['_rec',function(){return this._rec=new Rectangle();},'_ptPoint',function(){return this._ptPoint=new Point();}
		]);
		return HitArea;
	})()


	/**
	*@private
	*<code>HTMLChar</code> 是一个 HTML 字符类。
	*/
	//class laya.utils.HTMLChar
	var HTMLChar=(function(){
		function HTMLChar(char,w,h,style){
			//this._sprite=null;
			//this._x=NaN;
			//this._y=NaN;
			//this._w=NaN;
			//this._h=NaN;
			//this.isWord=false;
			//this.char=null;
			//this.charNum=NaN;
			//this.style=null;
			this.char=char;
			this.charNum=char.charCodeAt(0);
			this._x=this._y=0;
			this.width=w;
			this.height=h;
			this.style=style;
			this.isWord=!HTMLChar._isWordRegExp.test(char);
		}

		__class(HTMLChar,'laya.utils.HTMLChar');
		var __proto=HTMLChar.prototype;
		Laya.imps(__proto,{"laya.display.ILayout":true})
		/**
		*设置与此对象绑定的显示对象 <code>Sprite</code> 。
		*@param sprite 显示对象 <code>Sprite</code> 。
		*/
		__proto.setSprite=function(sprite){
			this._sprite=sprite;
		}

		/**
		*获取与此对象绑定的显示对象 <code>Sprite</code>。
		*@return
		*/
		__proto.getSprite=function(){
			return this._sprite;
		}

		/**@private */
		__proto._isChar=function(){
			return true;
		}

		/**@private */
		__proto._getCSSStyle=function(){
			return this.style;
		}

		/**
		*宽度。
		*/
		__getset(0,__proto,'width',function(){
			return this._w;
			},function(value){
			this._w=value;
		});

		/**
		*此对象存储的 X 轴坐标值。
		*当设置此值时，如果此对象有绑定的 Sprite 对象，则改变 Sprite 对象的属性 x 的值。
		*/
		__getset(0,__proto,'x',function(){
			return this._x;
			},function(value){
			if (this._sprite){
				this._sprite.x=value;
			}
			this._x=value;
		});

		/**
		*此对象存储的 Y 轴坐标值。
		*当设置此值时，如果此对象有绑定的 Sprite 对象，则改变 Sprite 对象的属性 y 的值。
		*/
		__getset(0,__proto,'y',function(){
			return this._y;
			},function(value){
			if (this._sprite){
				this._sprite.y=value;
			}
			this._y=value;
		});

		/**
		*高度。
		*/
		__getset(0,__proto,'height',function(){
			return this._h;
			},function(value){
			this._h=value;
		});

		HTMLChar._isWordRegExp=new RegExp("[\\w\.]","");
		return HTMLChar;
	})()


	/**
	*<p> <code>Pool</code> 是对象池类，用于对象的存贮、重复使用。</p>
	*<p>合理使用对象池，可以有效减少对象创建的开销，避免频繁的垃圾回收，从而优化游戏流畅度。</p>
	*/
	//class laya.utils.Pool
	var Pool=(function(){
		function Pool(){};
		__class(Pool,'laya.utils.Pool');
		Pool.getPoolBySign=function(sign){
			return Pool._poolDic[sign] || (Pool._poolDic[sign]=[]);
		}

		Pool.clearBySign=function(sign){
			if (Pool._poolDic[sign])Pool._poolDic[sign].length=0;
		}

		Pool.recover=function(sign,item){
			if (item["__InPool"])return;
			item["__InPool"]=true;
			Pool.getPoolBySign(sign).push(item);
		}

		Pool.getItemByClass=function(sign,cls){
			var pool=Pool.getPoolBySign(sign);
			var rst=pool.length ? pool.pop():new cls();
			rst["__InPool"]=false;
			return rst;
		}

		Pool.getItemByCreateFun=function(sign,createFun){
			var pool=Pool.getPoolBySign(sign);
			var rst=pool.length ? pool.pop():createFun();
			rst["__InPool"]=false;
			return rst;
		}

		Pool.getItem=function(sign){
			var pool=Pool.getPoolBySign(sign);
			var rst=pool.length ? pool.pop():null;
			if (rst){
				rst["__InPool"]=false;
			}
			return rst;
		}

		Pool._poolDic={};
		Pool.InPoolSign="__InPool";
		return Pool;
	})()


	/**
	*<p> <code>Stat</code> 是一个性能统计面板，可以实时更新相关的性能参数。</p>
	*<p>参与统计的性能参数如下（所有参数都是每大约1秒进行更新）：<br/>
	*FPS(Canvas)/FPS(WebGL)：Canvas 模式或者 WebGL 模式下的帧频，也就是每秒显示的帧数，值越高、越稳定，感觉越流畅；<br/>
	*Sprite：统计所有渲染节点（包括容器）数量，它的大小会影响引擎进行节点遍历、数据组织和渲染的效率。其值越小，游戏运行效率越高；<br/>
	*DrawCall：此值是决定性能的重要指标，其值越小，游戏运行效率越高。Canvas模式下表示每大约1秒的图像绘制次数；WebGL模式下表示每大约1秒的渲染提交批次，每次准备数据并通知GPU渲染绘制的过程称为1次DrawCall，在每次DrawCall中除了在通知GPU的渲染上比较耗时之外，切换材质与shader也是非常耗时的操作；<br/>
	*CurMem：Canvas模式下，表示内存占用大小，值越小越好，过高会导致游戏闪退；WebGL模式下，表示内存与显存的占用，值越小越好；<br/>
	*Shader：是 WebGL 模式独有的性能指标，表示每大约1秒 Shader 提交次数，值越小越好；<br/>
	*Canvas：由三个数值组成，只有设置 CacheAs 后才会有值，默认为0/0/0。从左到右数值的意义分别为：每帧重绘的画布数量 / 缓存类型为"normal"类型的画布数量 / 缓存类型为"bitmap"类型的画布数量。</p>
	*/
	//class laya.utils.Stat
	var Stat=(function(){
		function Stat(){};
		__class(Stat,'laya.utils.Stat');
		/**
		*点击性能统计显示区域的处理函数。
		*/
		__getset(1,Stat,'onclick',null,function(fn){
			Stat._sp.on("click",Stat._sp,fn);
		});

		Stat.show=function(x,y){
			(x===void 0)&& (x=0);
			(y===void 0)&& (y=0);
			if (Render.isConchApp){
				Browser.window.conch.showFPS && Browser.window.conch.showFPS(x,y);
				return;
			};
			var stat=Stat._sp;
			var pixel=Browser.pixelRatio;
			if (!stat){
				stat=new Sprite();
				Stat._leftText=new Text();
				Stat._leftText.pos(5,5);
				Stat._leftText.color="#ffffff";
				stat.addChild(Stat._leftText);
				Stat._txt=new Text();
				Stat._txt.pos(80*pixel,5);
				Stat._txt.color="#ffffff";
				stat.addChild(Stat._txt);
				Stat._sp=stat;
			}
			stat.pos(x,y);
			Stat._show=true;
			Stat._fpsData.length=60;
			Stat._view[0]={title:"FPS(Canvas)",value:"_fpsStr",color:"yellow",units:"int"};
			Stat._view[1]={title:"Sprite",value:"_spriteStr",color:"white",units:"int"};
			Stat._view[2]={title:"DrawCall",value:"drawCall",color:"white",units:"int"};
			Stat._view[3]={title:"CurMem",value:"currentMemorySize",color:"yellow",units:"M"};
			if (Render.isWebGL){
				Stat._view[4]={title:"Shader",value:"shaderCall",color:"white",units:"int"};
				if (!Render.is3DMode){
					Stat._view[0].title="FPS(WebGL)";
					Stat._view[5]={title:"Canvas",value:"_canvasStr",color:"white",units:"int"};
					}else {
					Stat._view[0].title="FPS(3D)";
					Stat._view[5]={title:"TriFaces",value:"trianglesFaces",color:"white",units:"int"};
					Stat._view[6]={title:"treeNodeColl",value:"treeNodeCollision",color:"white",units:"int"};
					Stat._view[7]={title:"treeSpriteColl",value:"treeSpriteCollision",color:"white",units:"int"};
				}
				}else {
				Stat._view[4]={title:"Canvas",value:"_canvasStr",color:"white",units:"int"};
			};
			var text="";
			for (var i=0;i < Stat._view.length;i++){
				var one=Stat._view[i];
				text+=one.title+"\n";
			}
			Stat._leftText.text=text;
			var width=pixel *138;
			var height=pixel *(Stat._view.length *12+3 *pixel)+4;
			Stat._txt.fontSize=Stat._fontSize *pixel;
			Stat._leftText.fontSize=Stat._fontSize *pixel;
			stat.size(width,height);
			stat.graphics.clear();
			stat.graphics.setAlpha(0.5);
			stat.graphics.drawRect(0,0,width,height,"#999999");
			stat.graphics.setAlpha(1);
			Stat.loop();
			Stat.enable();
		}

		Stat.enable=function(){
			Laya.timer.frameLoop(1,Stat,Stat.loop);
		}

		Stat.hide=function(){
			Stat._show=false;
			Laya.timer.clear(Stat,Stat.loop);
		}

		Stat.clear=function(){
			Stat.trianglesFaces=Stat.drawCall=Stat.shaderCall=Stat.spriteCount=Stat.spriteRenderUseCacheCount=Stat.treeNodeCollision=Stat.treeSpriteCollision=Stat.canvasNormal=Stat.canvasBitmap=Stat.canvasReCache=0;
		}

		Stat.loop=function(){
			Stat._count++;
			var timer=Browser.now();
			if (timer-Stat._timer < 1000)return;
			var count=Stat._count;
			Stat.FPS=Math.round((count *1000)/ (timer-Stat._timer));
			if (Stat._show){
				Stat.trianglesFaces=Math.round(Stat.trianglesFaces / count);
				Stat.drawCall=Math.round(Stat.drawCall / count)-2;
				Stat.shaderCall=Math.round(Stat.shaderCall / count)-4;
				Stat.spriteCount=Math.round(Stat.spriteCount / count)-4;
				Stat.spriteRenderUseCacheCount=Math.round(Stat.spriteRenderUseCacheCount / count);
				Stat.canvasNormal=Math.round(Stat.canvasNormal / count);
				Stat.canvasBitmap=Math.round(Stat.canvasBitmap / count);
				Stat.canvasReCache=Math.ceil(Stat.canvasReCache / count);
				Stat.treeNodeCollision=Math.round(Stat.treeNodeCollision / count);
				Stat.treeSpriteCollision=Math.round(Stat.treeSpriteCollision / count);
				var delay=Stat.FPS > 0 ? Math.floor(1000 / Stat.FPS).toString():" ";
				Stat._fpsStr=Browser.window.f2||Stat.FPS+(Stat.renderSlow ? " slow" :"")+" "+delay;
				Stat._spriteStr=Stat.spriteCount+(Stat.spriteRenderUseCacheCount ? ("/"+Stat.spriteRenderUseCacheCount):'');
				Stat._canvasStr=Stat.canvasReCache+"/"+Stat.canvasNormal+"/"+Stat.canvasBitmap;
				Stat.currentMemorySize=ResourceManager.systemResourceManager.memorySize;
				var text="";
				for (var i=0;i < Stat._view.length;i++){
					var one=Stat._view[i];
					var value=Stat[one.value];
					(one.units=="M")&& (value=Math.floor(value / (1024 *1024)*100)/ 100+" M");
					(one.units=="K")&& (value=Math.floor(value / (1024)*100)/ 100+" K");
					text+=value+"\n";
				}
				Stat._txt.text=text;
				Stat.clear();
			}
			Stat._count=0;
			Stat._timer=timer;
		}

		Stat.FPS=0;
		Stat.loopCount=0;
		Stat.shaderCall=0;
		Stat.drawCall=0;
		Stat.drawCallOneFrame=0;
		Stat.trianglesFaces=0;
		Stat.spriteCount=0;
		Stat.spriteRenderUseCacheCount=0;
		Stat.treeNodeCollision=0;
		Stat.treeSpriteCollision=0;
		Stat.canvasNormal=0;
		Stat.canvasBitmap=0;
		Stat.canvasReCache=0;
		Stat.renderSlow=false;
		Stat.currentMemorySize=0;
		Stat._fpsStr=null
		Stat._canvasStr=null
		Stat._spriteStr=null
		Stat._fpsData=[];
		Stat._timer=0;
		Stat._count=0;
		Stat._view=[];
		Stat._fontSize=12;
		Stat._txt=null
		Stat._leftText=null
		Stat._sp=null
		Stat._show=false;
		return Stat;
	})()


	/**
	*@private
	*<code>StringKey</code> 类用于存取字符串对应的数字。
	*/
	//class laya.utils.StringKey
	var StringKey=(function(){
		function StringKey(){
			this._strsToID={};
			this._idToStrs=[];
			this._length=0;
		}

		__class(StringKey,'laya.utils.StringKey');
		var __proto=StringKey.prototype;
		/**
		*添加一个字符。
		*@param str 字符，将作为key 存储相应生成的数字。
		*@return 此字符对应的数字。
		*/
		__proto.add=function(str){
			var index=this._strsToID[str];
			if (index !=null)return index;
			this._idToStrs[this._length]=str;
			return this._strsToID[str]=this._length++;
		}

		/**
		*获取指定字符对应的ID。
		*@param str 字符。
		*@return 此字符对应的ID。
		*/
		__proto.getID=function(str){
			var index=this._strsToID[str];
			return index==null ?-1 :index;
		}

		/**
		*根据指定ID获取对应字符。
		*@param id ID。
		*@return 此id对应的字符。
		*/
		__proto.getName=function(id){
			var str=this._idToStrs[id];
			return str==null ? undefined :str;
		}

		return StringKey;
	})()


	/**
	*<code>Timer</code> 是时钟管理类。它是一个单例，不要手动实例化此类，应该通过 Laya.timer 访问。
	*/
	//class laya.utils.Timer
	var Timer=(function(){
		var TimerHandler;
		function Timer(){
			this._delta=0;
			this.scale=1;
			this.currFrame=0;
			this._mid=1;
			this._map=[];
			this._laters=[];
			this._handlers=[];
			this._temp=[];
			this._count=0;
			this.smoothDealy=true;
			this.currTimer=Browser.now();
			this._lastTimer=Browser.now();
			Laya.timer && Laya.timer.frameLoop(1,this,this._update);
		}

		__class(Timer,'laya.utils.Timer');
		var __proto=Timer.prototype;
		/**
		*@private
		*帧循环处理函数。
		*/
		__proto._update=function(){
			if (this.scale <=0){
				this._lastTimer=Browser.now();
				return;
			};
			var frame=this.currFrame=this.currFrame+this.scale;
			var now=Browser.now();
			var preDelta=this._delta;
			this._delta=(now-this._lastTimer)*this.scale;
			if (this.smoothDealy){
				this._delta=Math.round((this._delta+preDelta)/ 2);
			};
			var timer=this.currTimer=this.currTimer+this._delta;
			this._lastTimer=this._lastTimer+this._delta*this.scale;
			var handlers=this._handlers;
			this._count=0;
			for (i=0,n=handlers.length;i < n;i++){
				handler=handlers[i];
				if (handler.method!==null){
					var t=handler.userFrame ? frame :timer;
					if (t >=handler.exeTime){
						if (handler.repeat){
							if (!handler.jumpFrame){
								handler.exeTime+=handler.delay;
								handler.run(false);
								if (t > handler.exeTime){
									handler.exeTime+=Math.ceil((t-handler.exeTime)/ handler.delay)*handler.delay;
								}
								}else {
								while (t >=handler.exeTime){
									handler.exeTime+=handler.delay;
									handler.run(false);
								}
							}
							}else {
							handler.run(true);
						}
					}
					}else {
					this._count++;
				}
			}
			if (this._count > 30 || frame % 200===0)this._clearHandlers();
			var laters=this._laters;
			for (var i=0,n=laters.length-1;i <=n;i++){
				var handler=laters[i];
				if (handler.method!==null){
					this._map[handler.key]=null;
					handler.run(false);
				}
				this._recoverHandler(handler);
				i===n && (n=laters.length-1);
			}
			laters.length=0;
		}

		/**@private */
		__proto._clearHandlers=function(){
			var handlers=this._handlers;
			for (var i=0,n=handlers.length;i < n;i++){
				var handler=handlers[i];
				if (handler.method!==null)this._temp.push(handler);
				else this._recoverHandler(handler);
			}
			this._handlers=this._temp;
			this._temp=handlers;
			this._temp.length=0;
		}

		/**@private */
		__proto._recoverHandler=function(handler){
			if(this._map[handler.key]==handler)this._map[handler.key]=null;
			handler.clear();
			Timer._pool.push(handler);
		}

		/**@private */
		__proto._create=function(useFrame,repeat,delay,caller,method,args,coverBefore){
			if (!delay){
				method.apply(caller,args);
				return null;
			}
			if (coverBefore){
				var handler=this._getHandler(caller,method);
				if (handler){
					handler.repeat=repeat;
					handler.userFrame=useFrame;
					handler.delay=delay;
					handler.caller=caller;
					handler.method=method;
					handler.args=args;
					handler.exeTime=delay+(useFrame ? this.currFrame :this.currTimer+Browser.now()-this._lastTimer);
					return handler;
				}
			}
			handler=Timer._pool.length > 0 ? Timer._pool.pop():new TimerHandler();
			handler.repeat=repeat;
			handler.userFrame=useFrame;
			handler.delay=delay;
			handler.caller=caller;
			handler.method=method;
			handler.args=args;
			handler.exeTime=delay+(useFrame ? this.currFrame :this.currTimer+Browser.now()-this._lastTimer);
			this._indexHandler(handler);
			this._handlers.push(handler);
			return handler;
		}

		/**@private */
		__proto._indexHandler=function(handler){
			var caller=handler.caller;
			var method=handler.method;
			var cid=caller ? caller.$_GID || (caller.$_GID=Utils$2.getGID()):0;
			var mid=method.$_TID || (method.$_TID=(this._mid++)*100000);
			handler.key=cid+mid;
			this._map[handler.key]=handler;
		}

		/**
		*定时执行一次。
		*@param delay 延迟时间(单位为毫秒)。
		*@param caller 执行域(this)。
		*@param method 定时器回调函数。
		*@param args 回调参数。
		*@param coverBefore 是否覆盖之前的延迟执行，默认为 true 。
		*/
		__proto.once=function(delay,caller,method,args,coverBefore){
			(coverBefore===void 0)&& (coverBefore=true);
			this._create(false,false,delay,caller,method,args,coverBefore);
		}

		/**
		*定时重复执行。
		*@param delay 间隔时间(单位毫秒)。
		*@param caller 执行域(this)。
		*@param method 定时器回调函数。
		*@param args 回调参数。
		*@param coverBefore 是否覆盖之前的延迟执行，默认为 true 。
		*@param jumpFrame 时钟是否跳帧。基于时间的循环回调，单位时间间隔内，如能执行多次回调，出于性能考虑，引擎默认只执行一次，设置jumpFrame=true后，则回调会连续执行多次
		*/
		__proto.loop=function(delay,caller,method,args,coverBefore,jumpFrame){
			(coverBefore===void 0)&& (coverBefore=true);
			(jumpFrame===void 0)&& (jumpFrame=false);
			var handler=this._create(false,true,delay,caller,method,args,coverBefore);
			if (handler)handler.jumpFrame=jumpFrame;
		}

		/**
		*定时执行一次(基于帧率)。
		*@param delay 延迟几帧(单位为帧)。
		*@param caller 执行域(this)。
		*@param method 定时器回调函数。
		*@param args 回调参数。
		*@param coverBefore 是否覆盖之前的延迟执行，默认为 true 。
		*/
		__proto.frameOnce=function(delay,caller,method,args,coverBefore){
			(coverBefore===void 0)&& (coverBefore=true);
			this._create(true,false,delay,caller,method,args,coverBefore);
		}

		/**
		*定时重复执行(基于帧率)。
		*@param delay 间隔几帧(单位为帧)。
		*@param caller 执行域(this)。
		*@param method 定时器回调函数。
		*@param args 回调参数。
		*@param coverBefore 是否覆盖之前的延迟执行，默认为 true 。
		*/
		__proto.frameLoop=function(delay,caller,method,args,coverBefore){
			(coverBefore===void 0)&& (coverBefore=true);
			this._create(true,true,delay,caller,method,args,coverBefore);
		}

		/**返回统计信息。*/
		__proto.toString=function(){
			return "callLater:"+this._laters.length+" handlers:"+this._handlers.length+" pool:"+Timer._pool.length;
		}

		/**
		*清理定时器。
		*@param caller 执行域(this)。
		*@param method 定时器回调函数。
		*/
		__proto.clear=function(caller,method){
			var handler=this._getHandler(caller,method);
			if (handler){
				this._map[handler.key]=null;handler.key=0;
				handler.clear();
			}
		}

		/**
		*清理对象身上的所有定时器。
		*@param caller 执行域(this)。
		*/
		__proto.clearAll=function(caller){
			if (!caller)return;
			for (var i=0,n=this._handlers.length;i < n;i++){
				var handler=this._handlers[i];
				if (handler.caller===caller){
					this._map[handler.key]=null;handler.key=0;
					handler.clear();
				}
			}
		}

		/**@private */
		__proto._getHandler=function(caller,method){
			var cid=caller ? caller.$_GID || (caller.$_GID=Utils$2.getGID()):0;
			var mid=method.$_TID || (method.$_TID=(this._mid++)*100000);
			return this._map[cid+mid];
		}

		/**
		*延迟执行。
		*@param caller 执行域(this)。
		*@param method 定时器回调函数。
		*@param args 回调参数。
		*/
		__proto.callLater=function(caller,method,args){
			if (this._getHandler(caller,method)==null){
				if (Timer._pool.length)
					var handler=Timer._pool.pop();
				else handler=new TimerHandler();
				handler.caller=caller;
				handler.method=method;
				handler.args=args;
				this._indexHandler(handler);
				this._laters.push(handler);
			}
		}

		/**
		*立即执行 callLater 。
		*@param caller 执行域(this)。
		*@param method 定时器回调函数。
		*/
		__proto.runCallLater=function(caller,method){
			var handler=this._getHandler(caller,method);
			if (handler && handler.method !=null){
				this._map[handler.key]=null;
				handler.run(true);
			}
		}

		/**
		*立即提前执行定时器，执行之后从队列中删除
		*@param caller 执行域(this)。
		*@param method 定时器回调函数。
		*/
		__proto.runTimer=function(caller,method){
			this.runCallLater(caller,method);
		}

		/**
		*两帧之间的时间间隔,单位毫秒。
		*/
		__getset(0,__proto,'delta',function(){
			return this._delta;
		});

		Timer._pool=[];
		Timer.__init$=function(){
			/**@private */
			//class TimerHandler
			TimerHandler=(function(){
				function TimerHandler(){
					this.key=0;
					this.repeat=false;
					this.delay=0;
					this.userFrame=false;
					this.exeTime=0;
					this.caller=null;
					this.method=null;
					this.args=null;
					this.jumpFrame=false;
				}
				__class(TimerHandler,'');
				var __proto=TimerHandler.prototype;
				__proto.clear=function(){
					this.caller=null;
					this.method=null;
					this.args=null;
				}
				__proto.run=function(withClear){
					var caller=this.caller;
					if (caller && caller.destroyed)return this.clear();
					var method=this.method;
					var args=this.args;
					withClear && this.clear();
					if (method==null)return;
					args ? method.apply(caller,args):method.call(caller);
				}
				return TimerHandler;
			})()
		}

		return Timer;
	})()


	/**
	*<code>Tween</code> 是一个缓动类。使用此类能够实现对目标对象属性的渐变。
	*/
	//class laya.utils.Tween
	var Tween=(function(){
		function Tween(){
			//this._complete=null;
			//this._target=null;
			//this._ease=null;
			//this._props=null;
			//this._duration=0;
			//this._delay=0;
			//this._startTimer=0;
			//this._usedTimer=0;
			//this._usedPool=false;
			this.gid=0;
			//this.update=null;
		}

		__class(Tween,'laya.utils.Tween');
		var __proto=Tween.prototype;
		/**
		*缓动对象的props属性到目标值。
		*@param target 目标对象(即将更改属性值的对象)。
		*@param props 变化的属性列表，比如{x:100,y:20,ease:Ease.backOut,complete:Handler.create(this,onComplete),update:new Handler(this,onComplete)}。
		*@param duration 花费的时间，单位毫秒。
		*@param ease 缓动类型，默认为匀速运动。
		*@param complete 结束回调函数。
		*@param delay 延迟执行时间。
		*@param coverBefore 是否覆盖之前的缓动。
		*@return 返回Tween对象。
		*/
		__proto.to=function(target,props,duration,ease,complete,delay,coverBefore){
			(delay===void 0)&& (delay=0);
			(coverBefore===void 0)&& (coverBefore=false);
			return this._create(target,props,duration,ease,complete,delay,coverBefore,true,false,true);
		}

		/**
		*从props属性，缓动到当前状态。
		*@param target 目标对象(即将更改属性值的对象)。
		*@param props 变化的属性列表，比如{x:100,y:20,ease:Ease.backOut,complete:Handler.create(this,onComplete),update:new Handler(this,onComplete)}。
		*@param duration 花费的时间，单位毫秒。
		*@param ease 缓动类型，默认为匀速运动。
		*@param complete 结束回调函数。
		*@param delay 延迟执行时间。
		*@param coverBefore 是否覆盖之前的缓动。
		*@return 返回Tween对象。
		*/
		__proto.from=function(target,props,duration,ease,complete,delay,coverBefore){
			(delay===void 0)&& (delay=0);
			(coverBefore===void 0)&& (coverBefore=false);
			return this._create(target,props,duration,ease,complete,delay,coverBefore,false,false,true);
		}

		/**@private */
		__proto._create=function(target,props,duration,ease,complete,delay,coverBefore,isTo,usePool,runNow){
			if (!target)throw new Error("Tween:target is null");
			this._target=target;
			this._duration=duration;
			this._ease=ease || props.ease || Tween.easeNone;
			this._complete=complete || props.complete;
			this._delay=delay;
			this._props=[];
			this._usedTimer=0;
			this._startTimer=Laya.timer.currTimer;
			this._usedPool=usePool;
			this.update=props.update;
			var gid=(target.$_GID || (target.$_GID=Utils$2.getGID()));
			if (!Tween.tweenMap[gid]){
				Tween.tweenMap[gid]=[this];
				}else {
				if (coverBefore)Tween.clearTween(target);
				Tween.tweenMap[gid].push(this);
			}
			if (runNow){
				if (delay <=0)this.firstStart(target,props,isTo);
				else Laya.timer.once(delay,this,this.firstStart,[target,props,isTo]);
				}else {
				this._initProps(target,props,isTo);
			}
			return this;
		}

		__proto.firstStart=function(target,props,isTo){
			if (target.destroyed){
				this.clear();
				return;
			}
			this._initProps(target,props,isTo);
			this._beginLoop();
		}

		__proto._initProps=function(target,props,isTo){
			for (var p in props){
				if ((typeof (target[p])=='number')){
					var start=isTo ? target[p] :props[p];
					var end=isTo ? props[p] :target[p];
					this._props.push([p,start,end-start]);
					if (!isTo)target[p]=start;
				}
			}
		}

		__proto._beginLoop=function(){
			Laya.timer.frameLoop(1,this,this._doEase);
		}

		/**执行缓动**/
		__proto._doEase=function(){
			this._updateEase(Laya.timer.currTimer);
		}

		/**@private */
		__proto._updateEase=function(time){
			var target=this._target;
			if (!target)return;
			if (target.destroyed)return Tween.clearTween(target);
			var usedTimer=this._usedTimer=time-this._startTimer-this._delay;
			if (usedTimer < 0)return;
			if (usedTimer >=this._duration)return this.complete();
			var ratio=usedTimer > 0 ? this._ease(usedTimer,0,1,this._duration):0;
			var props=this._props;
			for (var i=0,n=props.length;i < n;i++){
				var prop=props[i];
				target[prop[0]]=prop[1]+(ratio *prop[2]);
			}
			if (this.update)this.update.run();
		}

		/**
		*立即结束缓动并到终点。
		*/
		__proto.complete=function(){
			if (!this._target)return;
			Laya.timer.runTimer(this,this.firstStart);
			var target=this._target;
			var props=this._props;
			var handler=this._complete;
			for (var i=0,n=props.length;i < n;i++){
				var prop=props[i];
				target[prop[0]]=prop[1]+prop[2];
			}
			if (this.update)this.update.run();
			this.clear();
			handler && handler.run();
		}

		/**
		*暂停缓动，可以通过resume或restart重新开始。
		*/
		__proto.pause=function(){
			Laya.timer.clear(this,this._beginLoop);
			Laya.timer.clear(this,this._doEase);
		}

		/**
		*设置开始时间。
		*@param startTime 开始时间。
		*/
		__proto.setStartTime=function(startTime){
			this._startTimer=startTime;
		}

		/**
		*停止并清理当前缓动。
		*/
		__proto.clear=function(){
			if (this._target){
				this._remove();
				this._clear();
			}
		}

		/**
		*@private
		*/
		__proto._clear=function(){
			this.pause();
			Laya.timer.clear(this,this.firstStart);
			this._complete=null;
			this._target=null;
			this._ease=null;
			this._props=null;
			if (this._usedPool){
				this.update=null;
				Pool.recover("tween",this);
			}
		}

		/**回收到对象池。*/
		__proto.recover=function(){
			this._usedPool=true;
			this._clear();
		}

		__proto._remove=function(){
			var tweens=Tween.tweenMap[this._target.$_GID];
			if (tweens){
				for (var i=0,n=tweens.length;i < n;i++){
					if (tweens[i]===this){
						tweens.splice(i,1);
						break ;
					}
				}
			}
		}

		/**
		*重新开始暂停的缓动。
		*/
		__proto.restart=function(){
			this.pause();
			this._usedTimer=0;
			this._startTimer=Laya.timer.currTimer;
			var props=this._props;
			for (var i=0,n=props.length;i < n;i++){
				var prop=props[i];
				this._target[prop[0]]=prop[1];
			}
			Laya.timer.once(this._delay,this,this._beginLoop);
		}

		/**
		*恢复暂停的缓动。
		*/
		__proto.resume=function(){
			if (this._usedTimer >=this._duration)return;
			this._startTimer=Laya.timer.currTimer-this._usedTimer-this._delay;
			this._beginLoop();
		}

		/**设置当前执行比例**/
		__getset(0,__proto,'progress',null,function(v){
			var uTime=v *this._duration;
			this._startTimer=Laya.timer.currTimer-this._delay-uTime;
		});

		Tween.to=function(target,props,duration,ease,complete,delay,coverBefore,autoRecover){
			(delay===void 0)&& (delay=0);
			(coverBefore===void 0)&& (coverBefore=false);
			(autoRecover===void 0)&& (autoRecover=true);
			return Pool.getItemByClass("tween",Tween)._create(target,props,duration,ease,complete,delay,coverBefore,true,autoRecover,true);
		}

		Tween.from=function(target,props,duration,ease,complete,delay,coverBefore,autoRecover){
			(delay===void 0)&& (delay=0);
			(coverBefore===void 0)&& (coverBefore=false);
			(autoRecover===void 0)&& (autoRecover=true);
			return Pool.getItemByClass("tween",Tween)._create(target,props,duration,ease,complete,delay,coverBefore,false,autoRecover,true);
		}

		Tween.clearAll=function(target){
			if (!target || !target.$_GID)return;
			var tweens=Tween.tweenMap[target.$_GID];
			if (tweens){
				for (var i=0,n=tweens.length;i < n;i++){
					tweens[i]._clear();
				}
				tweens.length=0;
			}
		}

		Tween.clear=function(tween){
			tween.clear();
		}

		Tween.clearTween=function(target){
			Tween.clearAll(target);
		}

		Tween.easeNone=function(t,b,c,d){
			return c *t / d+b;
		}

		Tween.tweenMap={};
		return Tween;
	})()


	/**
	*<code>Utils</code> 是工具类。
	*/
	//class laya.utils.Utils
	var Utils$2=(function(){
		function Utils(){};
		__class(Utils,'laya.utils.Utils',null,'Utils$2');
		Utils.toRadian=function(angle){
			return angle *Utils._pi2;
		}

		Utils.toAngle=function(radian){
			return radian *Utils._pi;
		}

		Utils.toHexColor=function(color){
			if (color < 0 || isNaN(color))return null;
			var str=color.toString(16);
			while (str.length < 6)str="0"+str;
			return "#"+str;
		}

		Utils.getGID=function(){
			return Utils._gid++;
		}

		Utils.concatArray=function(source,array){
			if (!array)return source;
			if (!source)return array;
			var i=0,len=array.length;
			for (i=0;i < len;i++){
				source.push(array[i]);
			}
			return source;
		}

		Utils.clearArray=function(array){
			if (!array)return array;
			array.length=0;
			return array;
		}

		Utils.copyArray=function(source,array){
			source || (source=[]);
			if (!array)return source;
			source.length=array.length;
			var i=0,len=array.length;
			for (i=0;i < len;i++){
				source[i]=array[i];
			}
			return source;
		}

		Utils.getGlobalRecByPoints=function(sprite,x0,y0,x1,y1){
			var newLTPoint;
			newLTPoint=new Point(x0,y0);
			newLTPoint=sprite.localToGlobal(newLTPoint);
			var newRBPoint;
			newRBPoint=new Point(x1,y1);
			newRBPoint=sprite.localToGlobal(newRBPoint);
			return Rectangle._getWrapRec([newLTPoint.x,newLTPoint.y,newRBPoint.x,newRBPoint.y]);
		}

		Utils.getGlobalPosAndScale=function(sprite){
			return Utils.getGlobalRecByPoints(sprite,0,0,1,1);
		}

		Utils.bind=function(fun,scope){
			var rst=fun;
			rst=fun.bind(scope);;
			return rst;
		}

		Utils.measureText=function(txt,font){
			return RunDriver.measureText(txt,font);
		}

		Utils.updateOrder=function(array){
			if (!array || array.length < 2)return false;
			var i=1,j=0,len=array.length,key=NaN,c;
			while (i < len){
				j=i;
				c=array[j];
				key=array[j]._zOrder;
				while (--j >-1){
					if (array[j]._zOrder > key)array[j+1]=array[j];
					else break ;
				}
				array[j+1]=c;
				i++;
			};
			var model=c.parent.conchModel;
			if (model){
				if (model.updateZOrder !=null){
					model.updateZOrder();
					}else {
					for (i=0;i < len;i++){
						model.removeChild(array[i].conchModel);
					}
					for (i=0;i < len;i++){
						model.addChildAt(array[i].conchModel,i);
					}
				}
			}
			return true;
		}

		Utils.transPointList=function(points,x,y){
			var i=0,len=points.length;
			for (i=0;i < len;i+=2){
				points[i]+=x;
				points[i+1]+=y;
			}
		}

		Utils.parseInt=function(str,radix){
			(radix===void 0)&& (radix=0);
			var result=Browser.window.parseInt(str,radix);
			if (isNaN(result))return 0;
			return result;
		}

		Utils.getFileExtension=function(path){
			Utils._extReg.lastIndex=path.lastIndexOf(".");
			var result=Utils._extReg.exec(path);
			if (result && result.length > 1){
				return result[1].toLowerCase();
			}
			return null;
		}

		Utils.getTransformRelativeToWindow=function(coordinateSpace,x,y){
			var stage=Laya.stage;
			var globalTransform=laya.utils.Utils.getGlobalPosAndScale(coordinateSpace);
			var canvasMatrix=stage._canvasTransform.clone();
			var canvasLeft=canvasMatrix.tx;
			var canvasTop=canvasMatrix.ty;
			canvasMatrix.rotate(-Math.PI / 180 *Laya.stage.canvasDegree);
			canvasMatrix.scale(Laya.stage.clientScaleX,Laya.stage.clientScaleY);
			var perpendicular=(Laya.stage.canvasDegree % 180 !=0);
			var tx=NaN,ty=NaN;
			if (perpendicular){
				tx=y+globalTransform.y;
				ty=x+globalTransform.x;
				tx *=canvasMatrix.d;
				ty *=canvasMatrix.a;
				if (Laya.stage.canvasDegree==90){
					tx=canvasLeft-tx;
					ty+=canvasTop;
				}
				else {
					tx+=canvasLeft;
					ty=canvasTop-ty;
				}
			}
			else {
				tx=x+globalTransform.x;
				ty=y+globalTransform.y;
				tx *=canvasMatrix.a;
				ty *=canvasMatrix.d;
				tx+=canvasLeft;
				ty+=canvasTop;
			}
			ty+=Laya.stage['_safariOffsetY'];
			var domScaleX=NaN,domScaleY=NaN;
			if (perpendicular){
				domScaleX=canvasMatrix.d *globalTransform.height;
				domScaleY=canvasMatrix.a *globalTransform.width;
				}else {
				domScaleX=canvasMatrix.a *globalTransform.width;
				domScaleY=canvasMatrix.d *globalTransform.height;
			}
			return {x:tx,y:ty,scaleX:domScaleX,scaleY:domScaleY};
		}

		Utils.fitDOMElementInArea=function(dom,coordinateSpace,x,y,width,height){
			if (!dom._fitLayaAirInitialized){
				dom._fitLayaAirInitialized=true;
				dom.style.transformOrigin=dom.style.webKittransformOrigin="left top";
				dom.style.position="absolute"
			};
			var transform=Utils.getTransformRelativeToWindow(coordinateSpace,x,y);
			dom.style.transform=dom.style.webkitTransform="scale("+transform.scaleX+","+transform.scaleY+") rotate("+(Laya.stage.canvasDegree)+"deg)";
			dom.style.width=width+'px';
			dom.style.height=height+'px';
			dom.style.left=transform.x+'px';
			dom.style.top=transform.y+'px';
		}

		Utils._gid=1;
		Utils._pi=180 / Math.PI;
		Utils._pi2=Math.PI / 180;
		Utils._extReg=/\.(\w+)\??/g;
		Utils.parseXMLFromString=function(value){
			var rst;
			value=value.replace(/>\s+</g,'><');
			rst=(new DOMParser()).parseFromString(value,'text/xml');
			if (rst.firstChild.textContent.indexOf("This page contains the following errors")>-1){
				throw new Error(rst.firstChild.firstChild.textContent);
			}
			return rst;
		}

		return Utils;
	})()


	/**
	*@private
	*/
	//class laya.utils.VectorGraphManager
	var VectorGraphManager=(function(){
		function VectorGraphManager(){
			this.useDic={};
			this.shapeDic={};
			this.shapeLineDic={};
			this._id=0;
			this._checkKey=false;
			this._freeIdArray=[];
			if (Render.isWebGL){
				CacheManger.regCacheByFunction(Utils$2.bind(this.startDispose,this),Utils$2.bind(this.getCacheList,this));
			}
		}

		__class(VectorGraphManager,'laya.utils.VectorGraphManager');
		var __proto=VectorGraphManager.prototype;
		/**
		*得到个空闲的ID
		*@return
		*/
		__proto.getId=function(){
			return this._id++;
		}

		/**
		*添加一个图形到列表中
		*@param id
		*@param shape
		*/
		__proto.addShape=function(id,shape){
			this.shapeDic[id]=shape;
			if (!this.useDic[id]){
				this.useDic[id]=true;
			}
		}

		/**
		*添加一个线图形到列表中
		*@param id
		*@param Line
		*/
		__proto.addLine=function(id,Line){
			this.shapeLineDic[id]=Line;
			if (!this.shapeLineDic[id]){
				this.shapeLineDic[id]=true;
			}
		}

		/**
		*检测一个对象是否在使用中
		*@param id
		*/
		__proto.getShape=function(id){
			if (this._checkKey){
				if (this.useDic[id] !=null){
					this.useDic[id]=true;
				}
			}
		}

		/**
		*删除一个图形对象
		*@param id
		*/
		__proto.deleteShape=function(id){
			if (this.shapeDic[id]){
				this.shapeDic[id]=null;
				delete this.shapeDic[id];
			}
			if (this.shapeLineDic[id]){
				this.shapeLineDic[id]=null;
				delete this.shapeLineDic[id];
			}
			if (this.useDic[id] !=null){
				delete this.useDic[id];
			}
		}

		/**
		*得到缓存列表
		*@return
		*/
		__proto.getCacheList=function(){
			var str;
			var list=[];
			for (str in this.shapeDic){
				list.push(this.shapeDic[str]);
			}
			for (str in this.shapeLineDic){
				list.push(this.shapeLineDic[str]);
			}
			return list;
		}

		/**
		*开始清理状态，准备销毁
		*/
		__proto.startDispose=function(key){
			var str;
			for (str in this.useDic){
				this.useDic[str]=false;
			}
			this._checkKey=true;
		}

		/**
		*确认销毁
		*/
		__proto.endDispose=function(){
			if (this._checkKey){
				var str;
				for (str in this.useDic){
					if (!this.useDic[str]){
						this.deleteShape(str);
					}
				}
				this._checkKey=false;
			}
		}

		VectorGraphManager.getInstance=function(){
			return VectorGraphManager.instance=VectorGraphManager.instance|| new VectorGraphManager();
		}

		VectorGraphManager.instance=null
		return VectorGraphManager;
	})()


	/**
	*@private
	*/
	//class laya.utils.WordText
	var WordText=(function(){
		function WordText(){
			this.id=NaN;
			this.save=[];
			this.toUpperCase=null;
			this.changed=false;
			this._text=null;
		}

		__class(WordText,'laya.utils.WordText');
		var __proto=WordText.prototype;
		__proto.setText=function(txt){
			this.changed=true;
			this._text=txt;
		}

		__proto.toString=function(){
			return this._text;
		}

		__proto.charCodeAt=function(i){
			return this._text ? this._text.charCodeAt(i):NaN;
		}

		__proto.charAt=function(i){
			return this._text ? this._text.charAt(i):null;
		}

		__getset(0,__proto,'length',function(){
			return this._text ? this._text.length :0;
		});

		return WordText;
	})()


	//class laya.webgl.atlas.AtlasGrid
	var AtlasGrid=(function(){
		var TexRowInfo,TexMergeTexSize;
		function AtlasGrid(width,height,atlasID){
			this._atlasID=0;
			this._width=0;
			this._height=0;
			this._texCount=0;
			this._rowInfo=null;
			this._cells=null;
			this._failSize=new TexMergeTexSize();
			(width===void 0)&& (width=0);
			(height===void 0)&& (height=0);
			(atlasID===void 0)&& (atlasID=0);
			this._cells=null;
			this._rowInfo=null;
			this._init(width,height);
			this._atlasID=atlasID;
		}

		__class(AtlasGrid,'laya.webgl.atlas.AtlasGrid');
		var __proto=AtlasGrid.prototype;
		//------------------------------------------------------------------------------
		__proto.getAltasID=function(){
			return this._atlasID;
		}

		//------------------------------------------------------------------------------
		__proto.setAltasID=function(atlasID){
			if (atlasID >=0){
				this._atlasID=atlasID;
			}
		}

		//------------------------------------------------------------------
		__proto.addTex=function(type,width,height){
			var result=this._get(width,height);
			if (result.ret==false){
				return result;
			}
			this._fill(result.x,result.y,width,height,type);
			this._texCount++;
			return result;
		}

		//------------------------------------------------------------------------------
		__proto._release=function(){
			if (this._cells !=null){
				this._cells.length=0;
				this._cells=null;
			}
			if (this._rowInfo){
				this._rowInfo.length=0;
				this._rowInfo=null;
			}
		}

		//------------------------------------------------------------------------------
		__proto._init=function(width,height){
			this._width=width;
			this._height=height;
			this._release();
			if (this._width==0)return false;
			this._cells=new Uint8Array(this._width *this._height*3);
			this._rowInfo=__newvec(this._height);
			for (var i=0;i < this._height;i++){
				this._rowInfo[i]=new TexRowInfo();
			}
			this._clear();
			return true;
		}

		//------------------------------------------------------------------
		__proto._get=function(width,height){
			var pFillInfo=new MergeFillInfo();
			if (width >=this._failSize.width && height >=this._failSize.height){
				return pFillInfo;
			};
			var rx=-1;
			var ry=-1;
			var nWidth=this._width;
			var nHeight=this._height;
			var pCellBox=this._cells;
			for (var y=0;y < nHeight;y++){
				if (this._rowInfo[y].spaceCount < width)continue ;
				for (var x=0;x < nWidth;){
					var tm=(y *nWidth+x)*3;
					if (pCellBox[tm] !=0 || pCellBox[tm+1] < width || pCellBox[tm+2] < height){
						x+=pCellBox[tm+1];
						continue ;
					}
					rx=x;
					ry=y;
					for (var xx=0;xx < width;xx++){
						if (pCellBox[3*xx+tm+2] < height){
							rx=-1;
							break ;
						}
					}
					if (rx < 0){
						x+=pCellBox[tm+1];
						continue ;
					}
					pFillInfo.ret=true;
					pFillInfo.x=rx;
					pFillInfo.y=ry;
					return pFillInfo;
				}
			}
			return pFillInfo;
		}

		//------------------------------------------------------------------
		__proto._fill=function(x,y,w,h,type){
			var nWidth=this._width;
			var nHeghit=this._height;
			this._check((x+w)<=nWidth && (y+h)<=nHeghit);
			for (var yy=y;yy < (h+y);++yy){
				this._check(this._rowInfo[yy].spaceCount >=w);
				this._rowInfo[yy].spaceCount-=w;
				for (var xx=0;xx < w;xx++){
					var tm=(x+yy *nWidth+xx)*3;
					this._check(this._cells[tm]==0);
					this._cells[tm]=type;
					this._cells[tm+1]=w;
					this._cells[tm+2]=h;
				}
			}
			if (x > 0){
				for (yy=0;yy < h;++yy){
					var s=0;
					for (xx=x-1;xx >=0;--xx,++s){
						if (this._cells[((y+yy)*nWidth+xx)*3] !=0)break ;
					}
					for (xx=s;xx > 0;--xx){
						this._cells[((y+yy)*nWidth+x-xx)*3+1]=xx;
						this._check(xx > 0);
					}
				}
			}
			if (y > 0){
				for (xx=x;xx < (x+w);++xx){
					s=0;
					for (yy=y-1;yy >=0;--yy,s++){
						if (this._cells[(xx+yy *nWidth)*3] !=0)break ;
					}
					for (yy=s;yy > 0;--yy){
						this._cells[(xx+(y-yy)*nWidth)*3+2]=yy;
						this._check(yy > 0);
					}
				}
			}
		}

		__proto._check=function(ret){
			if (ret==false){
				console.log("xtexMerger 错误啦");
			}
		}

		//------------------------------------------------------------------
		__proto._clear=function(){
			this._texCount=0;
			for (var y=0;y < this._height;y++){
				this._rowInfo[y].spaceCount=this._width;
			}
			for (var i=0;i < this._height;i++){
				for (var j=0;j < this._width;j++){
					var tm=(i *this._width+j)*3;
					this._cells[tm]=0;
					this._cells[tm+1]=this._width-j;
					this._cells[tm+2]=this._width-i;
				}
			}
			this._failSize.width=this._width+1;
			this._failSize.height=this._height+1;
		}

		AtlasGrid.__init$=function(){
			//------------------------------------------------------------------------------
			//class TexRowInfo
			TexRowInfo=(function(){
				function TexRowInfo(){
					this.spaceCount=0;
				}
				__class(TexRowInfo,'');
				return TexRowInfo;
			})()
			//------------------------------------------------------------------------------
			//class TexMergeTexSize
			TexMergeTexSize=(function(){
				function TexMergeTexSize(){
					this.width=0;
					this.height=0;
				}
				__class(TexMergeTexSize,'');
				return TexMergeTexSize;
			})()
		}

		return AtlasGrid;
	})()


	//class laya.webgl.atlas.AtlasResourceManager
	var AtlasResourceManager=(function(){
		function AtlasResourceManager(width,height,gridSize,maxTexNum){
			this._currentAtlasCount=0;
			this._maxAtlaserCount=0;
			this._width=0;
			this._height=0;
			this._gridSize=0;
			this._gridNumX=0;
			this._gridNumY=0;
			this._init=false;
			this._curAtlasIndex=0;
			this._setAtlasParam=false;
			this._atlaserArray=null;
			this._needGC=false;
			this._setAtlasParam=true;
			this._width=width;
			this._height=height;
			this._gridSize=gridSize;
			this._maxAtlaserCount=maxTexNum;
			this._gridNumX=width / gridSize;
			this._gridNumY=height / gridSize;
			this._curAtlasIndex=0;
			this._atlaserArray=[];
		}

		__class(AtlasResourceManager,'laya.webgl.atlas.AtlasResourceManager');
		var __proto=AtlasResourceManager.prototype;
		__proto.setAtlasParam=function(width,height,gridSize,maxTexNum){
			if (this._setAtlasParam==true){
				AtlasResourceManager._sid_=0;
				this._width=width;
				this._height=height;
				this._gridSize=gridSize;
				this._maxAtlaserCount=maxTexNum;
				this._gridNumX=width / gridSize;
				this._gridNumY=height / gridSize;
				this._curAtlasIndex=0;
				this.freeAll();
				return true;
				}else {
				console.log("设置大图合集参数错误，只能在开始页面设置各种参数");
				throw-1;
				return false;
			}
			return false;
		}

		//添加 图片到大图集
		__proto.pushData=function(texture){
			var tex=texture;
			this._setAtlasParam=false;
			var bFound=false;
			var nImageGridX=(Math.ceil((texture.bitmap.width+2)/ this._gridSize));
			var nImageGridY=(Math.ceil((texture.bitmap.height+2)/ this._gridSize));
			var bSuccess=false;
			for (var k=0;k < 2;k++){
				var maxAtlaserCount=this._maxAtlaserCount;
				for (var i=0;i < maxAtlaserCount;i++){
					var altasIndex=(this._curAtlasIndex+i)% maxAtlaserCount;
					(this._atlaserArray.length-1>=altasIndex)|| (this._atlaserArray.push(new Atlaser(this._gridNumX,this._gridNumY,this._width,this._height,AtlasResourceManager._sid_++)));
					var atlas=this._atlaserArray[altasIndex];
					var bitmap=texture.bitmap;
					var webGLImageIndex=atlas.inAtlasWebGLImagesKey.indexOf(bitmap);
					var offsetX=0,offsetY=0;
					if (webGLImageIndex==-1){
						var fillInfo=atlas.addTex(1,nImageGridX,nImageGridY);
						if (fillInfo.ret){
							offsetX=fillInfo.x *this._gridSize+1;
							offsetY=fillInfo.y *this._gridSize+1;
							bitmap.lock=true;
							atlas.addToAtlasTexture((bitmap),offsetX,offsetY);
							atlas.addToAtlas(texture,offsetX,offsetY);
							bSuccess=true;
							this._curAtlasIndex=altasIndex;
							break ;
						}
						}else {
						var offset=atlas.InAtlasWebGLImagesOffsetValue[webGLImageIndex];
						offsetX=offset[0];
						offsetY=offset[1];
						atlas.addToAtlas(texture,offsetX,offsetY);
						bSuccess=true;
						this._curAtlasIndex=altasIndex;
						break ;
					}
				}
				if (bSuccess)
					break ;
				this._atlaserArray.push(new Atlaser(this._gridNumX,this._gridNumY,this._width,this._height,AtlasResourceManager._sid_++));
				this._needGC=true;
				this.garbageCollection();
				this._curAtlasIndex=this._atlaserArray.length-1;
			}
			if (!bSuccess){
				console.log(">>>AtlasManager pushData error");
			}
			return bSuccess;
		}

		__proto.addToAtlas=function(tex){
			laya.webgl.atlas.AtlasResourceManager.instance.pushData(tex);
		}

		/**
		*回收大图合集,不建议手动调用
		*@return
		*/
		__proto.garbageCollection=function(){
			if (this._needGC===true){
				var n=this._atlaserArray.length-this._maxAtlaserCount;
				for (var i=0;i < n;i++){
					this._atlaserArray[i].dispose();
				}
				this._atlaserArray.splice(0,n);
				this._needGC=false;
			}
			return true;
		}

		__proto.freeAll=function(){
			for (var i=0,n=this._atlaserArray.length;i < n;i++){
				this._atlaserArray[i].dispose();
			}
			this._atlaserArray.length=0;
			this._curAtlasIndex=0;
		}

		__proto.getAtlaserCount=function(){
			return this._atlaserArray.length;
		}

		__proto.getAtlaserByIndex=function(index){
			return this._atlaserArray[index];
		}

		__getset(1,AtlasResourceManager,'instance',function(){
			if (!AtlasResourceManager._Instance){
				AtlasResourceManager._Instance=new AtlasResourceManager(laya.webgl.atlas.AtlasResourceManager.atlasTextureWidth,laya.webgl.atlas.AtlasResourceManager.atlasTextureHeight,16,laya.webgl.atlas.AtlasResourceManager.maxTextureCount);
			}
			return AtlasResourceManager._Instance;
		});

		__getset(1,AtlasResourceManager,'enabled',function(){
			return AtlasResourceManager._enabled;
		});

		__getset(1,AtlasResourceManager,'atlasLimitWidth',function(){
			return AtlasResourceManager._atlasLimitWidth;
			},function(value){
			AtlasResourceManager._atlasLimitWidth=value;
		});

		__getset(1,AtlasResourceManager,'atlasLimitHeight',function(){
			return AtlasResourceManager._atlasLimitHeight;
			},function(value){
			AtlasResourceManager._atlasLimitHeight=value;
		});

		AtlasResourceManager._enable=function(){
			AtlasResourceManager._enabled=true;
			Config.atlasEnable=true;
		}

		AtlasResourceManager._disable=function(){
			AtlasResourceManager._enabled=false;
			Config.atlasEnable=false;
		}

		AtlasResourceManager.__init__=function(){
			AtlasResourceManager.atlasTextureWidth=2048;
			AtlasResourceManager.atlasTextureHeight=2048;
			AtlasResourceManager.maxTextureCount=6;
			AtlasResourceManager.atlasLimitWidth=256;
			AtlasResourceManager.atlasLimitHeight=256;
		}

		AtlasResourceManager._enabled=false;
		AtlasResourceManager._atlasLimitWidth=0;
		AtlasResourceManager._atlasLimitHeight=0;
		AtlasResourceManager.gridSize=16;
		AtlasResourceManager.atlasTextureWidth=0;
		AtlasResourceManager.atlasTextureHeight=0;
		AtlasResourceManager.maxTextureCount=0;
		AtlasResourceManager._atlasRestore=0;
		AtlasResourceManager.BOARDER_TYPE_NO=0;
		AtlasResourceManager.BOARDER_TYPE_RIGHT=1;
		AtlasResourceManager.BOARDER_TYPE_LEFT=2;
		AtlasResourceManager.BOARDER_TYPE_BOTTOM=4;
		AtlasResourceManager.BOARDER_TYPE_TOP=8;
		AtlasResourceManager.BOARDER_TYPE_ALL=15;
		AtlasResourceManager._sid_=0;
		AtlasResourceManager._Instance=null;
		return AtlasResourceManager;
	})()


	//class laya.webgl.atlas.MergeFillInfo
	var MergeFillInfo=(function(){
		function MergeFillInfo(){
			this.x=0;
			this.y=0;
			this.ret=false;
			this.ret=false;
			this.x=0;
			this.y=0;
		}

		__class(MergeFillInfo,'laya.webgl.atlas.MergeFillInfo');
		return MergeFillInfo;
	})()


	;
	//class laya.webgl.canvas.BlendMode
	var BlendMode=(function(){
		function BlendMode(){};
		__class(BlendMode,'laya.webgl.canvas.BlendMode');
		BlendMode._init_=function(gl){
			BlendMode.fns=[BlendMode.BlendNormal,BlendMode.BlendAdd,BlendMode.BlendMultiply,BlendMode.BlendScreen,BlendMode.BlendOverlay,BlendMode.BlendLight,BlendMode.BlendMask,BlendMode.BlendDestinationOut];
			BlendMode.targetFns=[BlendMode.BlendNormalTarget,BlendMode.BlendAddTarget,BlendMode.BlendMultiplyTarget,BlendMode.BlendScreenTarget,BlendMode.BlendOverlayTarget,BlendMode.BlendLightTarget,BlendMode.BlendMask,BlendMode.BlendDestinationOut];
		}

		BlendMode.BlendNormal=function(gl){
			gl.blendFuncSeparate(0x0302,0x0303,1,1);
		}

		BlendMode.BlendAdd=function(gl){
			gl.blendFunc(0x0302,0x0304);
		}

		BlendMode.BlendMultiply=function(gl){
			gl.blendFunc(0x0306,0x0303);
		}

		BlendMode.BlendScreen=function(gl){
			gl.blendFunc(0x0302,1);
		}

		BlendMode.BlendOverlay=function(gl){
			gl.blendFunc(1,0x0301);
		}

		BlendMode.BlendLight=function(gl){
			gl.blendFunc(0x0302,1);
		}

		BlendMode.BlendNormalTarget=function(gl){
			gl.blendFuncSeparate(0x0302,0x0303,1,0x0303);
		}

		BlendMode.BlendAddTarget=function(gl){
			gl.blendFunc(0x0302,0x0304);
		}

		BlendMode.BlendMultiplyTarget=function(gl){
			gl.blendFunc(0x0306,0x0303);
		}

		BlendMode.BlendScreenTarget=function(gl){
			gl.blendFunc(0x0302,1);
		}

		BlendMode.BlendOverlayTarget=function(gl){
			gl.blendFunc(1,0x0301);
		}

		BlendMode.BlendLightTarget=function(gl){
			gl.blendFunc(0x0302,1);
		}

		BlendMode.BlendMask=function(gl){
			gl.blendFunc(0,0x0302);
		}

		BlendMode.BlendDestinationOut=function(gl){
			gl.blendFunc(0,0);
		}

		BlendMode.activeBlendFunction=null;
		BlendMode.NAMES=["normal","add","multiply","screen","overlay","light","mask","destination-out"];
		BlendMode.TOINT={"normal":0,"add":1,"multiply":2,"screen":3 ,"lighter":1,"overlay":4,"light":5,"mask":6,"destination-out":7};
		BlendMode.NORMAL="normal";
		BlendMode.ADD="add";
		BlendMode.MULTIPLY="multiply";
		BlendMode.SCREEN="screen";
		BlendMode.LIGHT="light";
		BlendMode.OVERLAY="overlay";
		BlendMode.DESTINATIONOUT="destination-out";
		BlendMode.fns=[];
		BlendMode.targetFns=[];
		return BlendMode;
	})()


	//class laya.webgl.canvas.DrawStyle
	var DrawStyle=(function(){
		function DrawStyle(value){
			this._color=Color$2.create("black");
			this.setValue(value);
		}

		__class(DrawStyle,'laya.webgl.canvas.DrawStyle');
		var __proto=DrawStyle.prototype;
		__proto.setValue=function(value){
			if (value){
				if ((typeof value=='string')){
					this._color=Color$2.create(value);
					return;
				}
				if ((value instanceof laya.utils.Color )){
					this._color=value;
					return;
				}
			}
		}

		__proto.reset=function(){
			this._color=Color$2.create("black");
		}

		__proto.equal=function(value){
			if ((typeof value=='string'))return this._color.strColor===value;
			if ((value instanceof laya.utils.Color ))return this._color.numColor===(value).numColor;
			return false;
		}

		__proto.toColorStr=function(){
			return this._color.strColor;
		}

		DrawStyle.create=function(value){
			if (value){
				var color;
				if ((typeof value=='string'))color=Color$2.create(value);
				else if ((value instanceof laya.utils.Color ))color=value;
				if (color){
					return color._drawStyle || (color._drawStyle=new DrawStyle(value));
				}
			}
			return null;
		}

		__static(DrawStyle,
		['DEFAULT',function(){return this.DEFAULT=new DrawStyle("#000000");}
		]);
		return DrawStyle;
	})()


	//class laya.webgl.canvas.Path
	var Path=(function(){
		function Path(){
			this._x=0;
			this._y=0;
			//this._rect=null;
			//this.ib=null;
			//this.vb=null;
			this.dirty=false;
			//this.geomatrys=null;
			//this._curGeomatry=null;
			this.offset=0;
			this.count=0;
			this.geoStart=0;
			this.tempArray=[];
			this.closePath=false;
			this.geomatrys=[];
			var gl=WebGL.mainContext;
			this.ib=IndexBuffer2D.create(0x88E8);
			this.vb=VertexBuffer2D.create(5);
		}

		__class(Path,'laya.webgl.canvas.Path');
		var __proto=Path.prototype;
		__proto.addPoint=function(pointX,pointY){
			this.tempArray.push(pointX,pointY);
		}

		__proto.getEndPointX=function(){
			return this.tempArray[this.tempArray.length-2];
		}

		__proto.getEndPointY=function(){
			return this.tempArray[this.tempArray.length-1];
		}

		__proto.polygon=function(x,y,points,color,borderWidth,borderColor){
			var geo;
			this.geomatrys.push(this._curGeomatry=geo=new Polygon(x,y,points,color,borderWidth,borderColor));
			if (!color)geo.fill=false;
			if (borderColor==undefined)geo.borderWidth=0;
			return geo;
		}

		__proto.setGeomtry=function(shape){
			this.geomatrys.push(this._curGeomatry=shape);
		}

		__proto.drawLine=function(x,y,points,width,color){
			var geo;
			if (this.closePath){
				this.geomatrys.push(this._curGeomatry=geo=new LoopLine(x,y,points,width,color));
				}else {
				this.geomatrys.push(this._curGeomatry=geo=new Line(x,y,points,width,color));
			}
			geo.fill=false;
			return geo;
		}

		__proto.update=function(){
			var si=this.ib.byteLength;
			var len=this.geomatrys.length;
			this.offset=si;
			for (var i=this.geoStart;i < len;i++){
				this.geomatrys[i].getData(this.ib,this.vb,this.vb.byteLength / 20);
			}
			this.geoStart=len;
			this.count=(this.ib.byteLength-si)/ CONST3D2D.BYTES_PIDX;
		}

		__proto.reset=function(){
			this.vb.clear();
			this.ib.clear();
			this.offset=this.count=this.geoStart=0;
			this.geomatrys.length=0;
		}

		__proto.recover=function(){
			this._curGeomatry=null;
			this.vb.destory();
			this.vb=null;
			this.ib.destory();
			this.ib=null;
		}

		return Path;
	})()


	//class laya.webgl.canvas.save.SaveBase
	var SaveBase=(function(){
		function SaveBase(){
			//this._valueName=null;
			//this._value=null;
			//this._dataObj=null;
			//this._newSubmit=false;
		}

		__class(SaveBase,'laya.webgl.canvas.save.SaveBase');
		var __proto=SaveBase.prototype;
		Laya.imps(__proto,{"laya.webgl.canvas.save.ISaveData":true})
		__proto.isSaveMark=function(){return false;}
		__proto.restore=function(context){
			this._dataObj[this._valueName]=this._value;
			SaveBase._cache[SaveBase._cache._length++]=this;
			this._newSubmit && (context._curSubmit=Submit.RENDERBASE,context._renderKey=0);
		}

		SaveBase._createArray=function(){
			var value=[];
			value._length=0;
			return value;
		}

		SaveBase._init=function(){
			var namemap=SaveBase._namemap={};
			namemap[0x1]="ALPHA";
			namemap[0x2]="fillStyle";
			namemap[0x8]="font";
			namemap[0x100]="lineWidth";
			namemap[0x200]="strokeStyle";
			namemap[0x2000]="_mergeID";
			namemap[0x400]=namemap[0x800]=namemap[0x1000]=[];
			namemap[0x4000]="textBaseline";
			namemap[0x8000]="textAlign";
			namemap[0x10000]="_nBlendType";
			namemap[0x80000]="shader";
			namemap[0x100000]="filters";
			return namemap;
		}

		SaveBase.save=function(context,type,dataObj,newSubmit){
			if ((context._saveMark._saveuse & type)!==type){
				context._saveMark._saveuse |=type;
				var cache=SaveBase._cache;
				var o=cache._length > 0 ? cache[--cache._length] :(new SaveBase());
				o._value=dataObj[o._valueName=SaveBase._namemap[type]];
				o._dataObj=dataObj;
				o._newSubmit=newSubmit;
				var _save=context._save;
				_save[_save._length++]=o;
			}
		}

		SaveBase._namemap=SaveBase._init();
		__static(SaveBase,
		['_cache',function(){return this._cache=laya.webgl.canvas.save.SaveBase._createArray();}
		]);
		return SaveBase;
	})()


	//class laya.webgl.canvas.save.SaveClipRect
	var SaveClipRect=(function(){
		function SaveClipRect(){
			//this._clipSaveRect=null;
			//this._submitScissor=null;
			this._clipRect=new Rectangle();
		}

		__class(SaveClipRect,'laya.webgl.canvas.save.SaveClipRect');
		var __proto=SaveClipRect.prototype;
		Laya.imps(__proto,{"laya.webgl.canvas.save.ISaveData":true})
		__proto.isSaveMark=function(){return false;}
		__proto.restore=function(context){
			context._clipRect=this._clipSaveRect;
			SaveClipRect._cache[SaveClipRect._cache._length++]=this;
			this._submitScissor.submitLength=context._submits._length-this._submitScissor.submitIndex;
			context._curSubmit=Submit.RENDERBASE;
			context._renderKey=0;
		}

		SaveClipRect.save=function(context,submitScissor){
			if ((context._saveMark._saveuse & 0x20000)==0x20000)return;
			context._saveMark._saveuse |=0x20000;
			var cache=SaveClipRect._cache;
			var o=cache._length > 0 ? cache[--cache._length] :(new SaveClipRect());
			o._clipSaveRect=context._clipRect;
			context._clipRect=o._clipRect.copyFrom(context._clipRect);
			o._submitScissor=submitScissor;
			var _save=context._save;
			_save[_save._length++]=o;
		}

		__static(SaveClipRect,
		['_cache',function(){return this._cache=SaveBase._createArray();}
		]);
		return SaveClipRect;
	})()


	//class laya.webgl.canvas.save.SaveMark
	var SaveMark=(function(){
		function SaveMark(){
			this._saveuse=0;
			//this._preSaveMark=null;
			;
		}

		__class(SaveMark,'laya.webgl.canvas.save.SaveMark');
		var __proto=SaveMark.prototype;
		Laya.imps(__proto,{"laya.webgl.canvas.save.ISaveData":true})
		__proto.isSaveMark=function(){
			return true;
		}

		__proto.restore=function(context){
			context._saveMark=this._preSaveMark;
			SaveMark._no[SaveMark._no._length++]=this;
		}

		SaveMark.Create=function(context){
			var no=SaveMark._no;
			var o=no._length > 0 ? no[--no._length] :(new SaveMark());
			o._saveuse=0;
			o._preSaveMark=context._saveMark;
			context._saveMark=o;
			return o;
		}

		SaveMark._no=SaveBase._createArray();
		return SaveMark;
	})()


	//class laya.webgl.canvas.save.SaveTransform
	var SaveTransform=(function(){
		function SaveTransform(){
			//this._savematrix=null;
			this._matrix=new Matrix();
		}

		__class(SaveTransform,'laya.webgl.canvas.save.SaveTransform');
		var __proto=SaveTransform.prototype;
		Laya.imps(__proto,{"laya.webgl.canvas.save.ISaveData":true})
		__proto.isSaveMark=function(){return false;}
		__proto.restore=function(context){
			context._curMat=this._savematrix;
			SaveTransform._no[SaveTransform._no._length++]=this;
		}

		SaveTransform.save=function(context){
			var _saveMark=context._saveMark;
			if ((_saveMark._saveuse & 0x800)===0x800)return;
			_saveMark._saveuse |=0x800;
			var no=SaveTransform._no;
			var o=no._length > 0 ? no[--no._length] :(new SaveTransform());
			o._savematrix=context._curMat;
			context._curMat=context._curMat.copyTo(o._matrix);
			var _save=context._save;
			_save[_save._length++]=o;
		}

		SaveTransform._no=SaveBase._createArray();
		return SaveTransform;
	})()


	//class laya.webgl.canvas.save.SaveTranslate
	var SaveTranslate=(function(){
		function SaveTranslate(){
			//this._x=NaN;
			//this._y=NaN;
		}

		__class(SaveTranslate,'laya.webgl.canvas.save.SaveTranslate');
		var __proto=SaveTranslate.prototype;
		Laya.imps(__proto,{"laya.webgl.canvas.save.ISaveData":true})
		__proto.isSaveMark=function(){return false;}
		__proto.restore=function(context){
			var mat=context._curMat;
			context._x=this._x;
			context._y=this._y;
			SaveTranslate._no[SaveTranslate._no._length++]=this;
		}

		SaveTranslate.save=function(context){
			var no=SaveTranslate._no;
			var o=no._length > 0 ? no[--no._length] :(new SaveTranslate());
			o._x=context._x;
			o._y=context._y;
			var _save=context._save;
			_save[_save._length++]=o;
		}

		SaveTranslate._no=SaveBase._createArray();
		return SaveTranslate;
	})()


	//class laya.webgl.resource.RenderTargetMAX
	var RenderTargetMAX=(function(){
		function RenderTargetMAX(){
			this.target=null;
			this.repaint=false;
			this._width=NaN;
			this._height=NaN;
			this._sp=null;
			this._clipRect=new Rectangle();
		}

		__class(RenderTargetMAX,'laya.webgl.resource.RenderTargetMAX');
		var __proto=RenderTargetMAX.prototype;
		__proto.setSP=function(sp){
			this._sp=sp;
		}

		__proto.size=function(w,h){
			var _$this=this;
			if (this._width===w && this._height===h){
				this.target.size(w,h);
				return;
			}
			this.repaint=true;
			this._width=w;
			this._height=h;
			if (!this.target)
				this.target=RenderTarget2D.create(w,h);
			else
			this.target.size(w,h);
			if (!this.target.hasListener("recovered")){
				this.target.on("recovered",this,function(e){
					Laya.timer.callLater(_$this._sp,_$this._sp.repaint);
				});
			}
		}

		__proto._flushToTarget=function(context,target){
			if (target._destroy)return;
			var worldScissorTest=RenderState2D.worldScissorTest;
			var preworldClipRect=RenderState2D.worldClipRect;
			RenderState2D.worldClipRect=this._clipRect;
			this._clipRect.x=this._clipRect.y=0;
			this._clipRect.width=this._width;
			this._clipRect.height=this._height;
			RenderState2D.worldScissorTest=false;
			WebGL.mainContext.disable(0x0C11);
			var preAlpha=RenderState2D.worldAlpha;
			var preMatrix4=RenderState2D.worldMatrix4;
			var preMatrix=RenderState2D.worldMatrix;
			var preFilters=RenderState2D.worldFilters;
			var preShaderDefines=RenderState2D.worldShaderDefines;
			RenderState2D.worldMatrix=Matrix.EMPTY;
			RenderState2D.restoreTempArray();
			RenderState2D.worldMatrix4=RenderState2D.TEMPMAT4_ARRAY;
			RenderState2D.worldAlpha=1;
			RenderState2D.worldFilters=null;
			RenderState2D.worldShaderDefines=null;
			BaseShader.activeShader=null;
			target.start();
			Config.showCanvasMark ? target.clear(0,1,0,0.3):target.clear(0,0,0,0);
			context.flush();
			target.end();
			BaseShader.activeShader=null;
			RenderState2D.worldAlpha=preAlpha;
			RenderState2D.worldMatrix4=preMatrix4;
			RenderState2D.worldMatrix=preMatrix;
			RenderState2D.worldFilters=preFilters;
			RenderState2D.worldShaderDefines=preShaderDefines;
			RenderState2D.worldScissorTest=worldScissorTest
			if (worldScissorTest){
				var y=RenderState2D.height-preworldClipRect.y-preworldClipRect.height;
				WebGL.mainContext.scissor(preworldClipRect.x,y,preworldClipRect.width,preworldClipRect.height);
				WebGL.mainContext.enable(0x0C11);
			}
			RenderState2D.worldClipRect=preworldClipRect;
		}

		__proto.flush=function(context){
			if (this.repaint){
				this._flushToTarget(context,this.target);
				this.repaint=false;
			}
		}

		__proto.drawTo=function(context,x,y,width,height){
			context.drawTexture(this.target.getTexture(),x,y,width,height,0,0);
		}

		__proto.destroy=function(){
			if (this.target){
				this.target.destroy();
				this.target=null;
				this._sp=null;
			}
		}

		return RenderTargetMAX;
	})()


	//class laya.webgl.shader.d2.Shader2D
	var Shader2D=(function(){
		function Shader2D(){
			this.ALPHA=1;
			//this.glTexture=null;
			//this.shader=null;
			//this.filters=null;
			this.shaderType=0;
			//this.colorAdd=null;
			//this.strokeStyle=null;
			//this.fillStyle=null;
			this.defines=new ShaderDefines2D();
		}

		__class(Shader2D,'laya.webgl.shader.d2.Shader2D');
		var __proto=Shader2D.prototype;
		__proto.destroy=function(){
			this.defines=null;
			this.filters=null;
			this.glTexture=null;
			this.strokeStyle=null;
			this.fillStyle=null;
		}

		Shader2D.__init__=function(){
			Shader.addInclude("parts/ColorFilter_ps_uniform.glsl","uniform vec4 colorAlpha;\nuniform mat4 colorMat;");
			Shader.addInclude("parts/ColorFilter_ps_logic.glsl","gl_FragColor = gl_FragColor * colorMat + colorAlpha/255.0;");
			Shader.addInclude("parts/GlowFilter_ps_uniform.glsl","uniform vec4 u_color;\nuniform float u_strength;\nuniform float u_blurX;\nuniform float u_blurY;\nuniform float u_offsetX;\nuniform float u_offsetY;\nuniform float u_textW;\nuniform float u_textH;");
			Shader.addInclude("parts/GlowFilter_ps_logic.glsl","const float c_IterationTime = 10.0;\nfloat floatIterationTotalTime = c_IterationTime * c_IterationTime;\nvec4 vec4Color = vec4(0.0,0.0,0.0,0.0);\nvec2 vec2FilterDir = vec2(-(u_offsetX)/u_textW,-(u_offsetY)/u_textH);\nvec2 vec2FilterOff = vec2(u_blurX/u_textW/c_IterationTime * 2.0,u_blurY/u_textH/c_IterationTime * 2.0);\nfloat maxNum = u_blurX * u_blurY;\nvec2 vec2Off = vec2(0.0,0.0);\nfloat floatOff = c_IterationTime/2.0;\nfor(float i = 0.0;i<=c_IterationTime; ++i){\n	for(float j = 0.0;j<=c_IterationTime; ++j){\n		vec2Off = vec2(vec2FilterOff.x * (i - floatOff),vec2FilterOff.y * (j - floatOff));\n		vec4Color += texture2D(texture, v_texcoord + vec2FilterDir + vec2Off)/floatIterationTotalTime;\n	}\n}\ngl_FragColor = vec4(u_color.rgb,vec4Color.a * u_strength);");
			Shader.addInclude("parts/BlurFilter_ps_logic.glsl","gl_FragColor =   blur();\ngl_FragColor.w*=alpha;");
			Shader.addInclude("parts/BlurFilter_ps_uniform.glsl","uniform float strength;\nuniform vec2 blurInfo;\n\n#define PI 3.141593\n\nfloat sigma=strength/3.0;//3σ以外影响很小。即当σ=1的时候，半径为3\nfloat sig2 = sigma*sigma;\nfloat _2sig2 = 2.0*sig2;\n//return 1.0/(2*PI*sig2)*exp(-(x*x+y*y)/_2sig2)\nfloat gauss1 = 1.0/(2.0*PI*sig2);\n\nfloat getGaussian(float x, float y){\n    return gauss1*exp(-(x*x+y*y)/_2sig2);\n}\n\nvec4 blur(){\n    const float blurw = 9.0;\n    vec4 vec4Color = vec4(0.0,0.0,0.0,0.0);\n    vec2 halfsz=vec2(blurw,blurw)/2.0/blurInfo;    \n    vec2 startpos=v_texcoord-halfsz;\n    vec2 ctexcoord = startpos;\n    vec2 step = 1.0/blurInfo;  //每个像素      \n    \n    for(float y = 0.0;y<=blurw; ++y){\n        ctexcoord.x=startpos.x;\n        for(float x = 0.0;x<=blurw; ++x){\n            //TODO 纹理坐标的固定偏移应该在vs中处理\n            vec4Color += texture2D(texture, ctexcoord)*getGaussian(x-blurw/2.0,y-blurw/2.0);\n            ctexcoord.x+=step.x;\n        }\n        ctexcoord.y+=step.y;\n    }\n    return vec4Color;\n}");
			Shader.addInclude("parts/ColorAdd_ps_uniform.glsl","uniform vec4 colorAdd;\n");
			Shader.addInclude("parts/ColorAdd_ps_logic.glsl","gl_FragColor = vec4(colorAdd.rgb,colorAdd.a*gl_FragColor.a);");
			var vs,ps;
			vs="attribute vec4 position;\nattribute vec2 texcoord;\nuniform vec2 size;\n\n#ifdef WORLDMAT\nuniform mat4 mmat;\n#endif\nvarying vec2 v_texcoord;\nvoid main() {\n  #ifdef WORLDMAT\n  vec4 pos=mmat*position;\n  gl_Position =vec4((pos.x/size.x-0.5)*2.0,(0.5-pos.y/size.y)*2.0,pos.z,1.0);\n  #else\n  gl_Position =vec4((position.x/size.x-0.5)*2.0,(0.5-position.y/size.y)*2.0,position.z,1.0);\n  #endif\n  \n  v_texcoord = texcoord;\n}";
			ps="precision mediump float;\n//precision highp float;\nvarying vec2 v_texcoord;\nuniform sampler2D texture;\nuniform float alpha;\n#include?BLUR_FILTER  \"parts/BlurFilter_ps_uniform.glsl\";\n#include?COLOR_FILTER \"parts/ColorFilter_ps_uniform.glsl\";\n#include?GLOW_FILTER \"parts/GlowFilter_ps_uniform.glsl\";\n#include?COLOR_ADD \"parts/ColorAdd_ps_uniform.glsl\";\n\nvoid main() {\n   vec4 color= texture2D(texture, v_texcoord);\n   color.a*=alpha;\n   gl_FragColor=color;\n   #include?COLOR_ADD \"parts/ColorAdd_ps_logic.glsl\";   \n   #include?BLUR_FILTER  \"parts/BlurFilter_ps_logic.glsl\";\n   #include?COLOR_FILTER \"parts/ColorFilter_ps_logic.glsl\";\n   #include?GLOW_FILTER \"parts/GlowFilter_ps_logic.glsl\";\n}";
			Shader.preCompile2D(0,0x01,vs,ps,null);
			vs="attribute vec4 position;\nuniform vec2 size;\nuniform mat4 mmat;\nvoid main() {\n  vec4 pos=mmat*position;\n  gl_Position =vec4((pos.x/size.x-0.5)*2.0,(0.5-pos.y/size.y)*2.0,pos.z,1.0);\n}";
			ps="precision mediump float;\nuniform vec4 color;\nuniform float alpha;\n#include?COLOR_FILTER \"parts/ColorFilter_ps_uniform.glsl\";\nvoid main() {\n	vec4 a = vec4(color.r, color.g, color.b, color.a);\n	a.w = alpha;\n	gl_FragColor = a;\n	#include?COLOR_FILTER \"parts/ColorFilter_ps_logic.glsl\";\n}";
			Shader.preCompile2D(0,0x02,vs,ps,null);
			vs="attribute vec4 position;\nattribute vec3 a_color;\nuniform mat4 mmat;\nuniform mat4 u_mmat2;\nuniform vec2 u_pos;\nuniform vec2 size;\nvarying vec3 color;\nvoid main(){\n  vec4 tPos = vec4(position.x + u_pos.x,position.y + u_pos.y,position.z,position.w);\n  vec4 pos=mmat*u_mmat2*tPos;\n  gl_Position =vec4((pos.x/size.x-0.5)*2.0,(0.5-pos.y/size.y)*2.0,pos.z,1.0);\n  color=a_color;\n}";
			ps="precision mediump float;\n//precision mediump float;\nvarying vec3 color;\nuniform float alpha;\nvoid main(){\n	//vec4 a=vec4(color.r, color.g, color.b, 1);\n	//a.a*=alpha;\n    gl_FragColor=vec4(color.r, color.g, color.b, alpha);\n}";
			Shader.preCompile2D(0,0x04,vs,ps,null);
			vs="attribute vec4 position;\nattribute vec2 texcoord;\nuniform vec2 size;\n\n#ifdef WORLDMAT\nuniform mat4 mmat;\n#endif\nvarying vec2 v_texcoord;\nvoid main() {\n  #ifdef WORLDMAT\n  vec4 pos=mmat*position;\n  gl_Position =vec4((pos.x/size.x-0.5)*2.0,(0.5-pos.y/size.y)*2.0,pos.z,1.0);\n  #else\n  gl_Position =vec4((position.x/size.x-0.5)*2.0,(0.5-position.y/size.y)*2.0,position.z,1.0);\n  #endif\n  \n  v_texcoord = texcoord;\n}";
			ps="#ifdef FSHIGHPRECISION\nprecision highp float;\n#else\nprecision mediump float;\n#endif\n//precision highp float;\nvarying vec2 v_texcoord;\nuniform sampler2D texture;\nuniform float alpha;\nuniform vec4 u_TexRange;\nuniform vec2 u_offset;\n#include?BLUR_FILTER  \"parts/BlurFilter_ps_uniform.glsl\";\n#include?COLOR_FILTER \"parts/ColorFilter_ps_uniform.glsl\";\n#include?GLOW_FILTER \"parts/GlowFilter_ps_uniform.glsl\";\n#include?COLOR_ADD \"parts/ColorAdd_ps_uniform.glsl\";\n\nvoid main() {\n   vec2 newTexCoord;\n   newTexCoord.x = mod(u_offset.x + v_texcoord.x,u_TexRange.y) + u_TexRange.x;\n   newTexCoord.y = mod(u_offset.y + v_texcoord.y,u_TexRange.w) + u_TexRange.z;\n   vec4 color= texture2D(texture, newTexCoord);\n   color.a*=alpha;\n   gl_FragColor=color;\n   #include?COLOR_ADD \"parts/ColorAdd_ps_logic.glsl\";   \n   #include?BLUR_FILTER  \"parts/BlurFilter_ps_logic.glsl\";\n   #include?COLOR_FILTER \"parts/ColorFilter_ps_logic.glsl\";\n   #include?GLOW_FILTER \"parts/GlowFilter_ps_logic.glsl\";\n}";
			Shader.preCompile2D(0,0x100,vs,ps,null);
			vs="attribute vec2 position;\nattribute vec2 texcoord;\nattribute vec4 color;\nuniform vec2 size;\nuniform float offsetX;\nuniform float offsetY;\nuniform mat4 mmat;\nuniform mat4 u_mmat2;\nvarying vec2 v_texcoord;\nvarying vec4 v_color;\nvoid main() {\n  vec4 pos=mmat*u_mmat2*vec4(offsetX+position.x,offsetY+position.y,0,1 );\n  gl_Position = vec4((pos.x/size.x-0.5)*2.0,(0.5-pos.y/size.y)*2.0,pos.z,1.0);\n  v_color = color;\n  v_texcoord = texcoord;  \n}";
			ps="precision mediump float;\nvarying vec2 v_texcoord;\nvarying vec4 v_color;\nuniform sampler2D texture;\nuniform float alpha;\nvoid main() {\n	vec4 t_color = texture2D(texture, v_texcoord);\n	gl_FragColor = t_color.rgba * v_color;\n	gl_FragColor.a = gl_FragColor.a * alpha;\n}";
			Shader.preCompile2D(0,0x200,vs,ps,null);
		}

		return Shader2D;
	})()


	//class laya.webgl.shader.ShaderDefines
	var ShaderDefines=(function(){
		function ShaderDefines(name2int,int2name,int2nameMap){
			this._value=0;
			//this._name2int=null;
			//this._int2name=null;
			//this._int2nameMap=null;
			this._name2int=name2int;
			this._int2name=int2name;
			this._int2nameMap=int2nameMap;
		}

		__class(ShaderDefines,'laya.webgl.shader.ShaderDefines');
		var __proto=ShaderDefines.prototype;
		__proto.add=function(value){
			if ((typeof value=='string'))value=this._name2int[value];
			this._value |=value;
			return this._value;
		}

		__proto.addInt=function(value){
			this._value |=value;
			return this._value;
		}

		__proto.remove=function(value){
			if ((typeof value=='string'))value=this._name2int[value];
			this._value &=(~value);
			return this._value;
		}

		__proto.isDefine=function(def){
			return (this._value & def)===def;
		}

		__proto.getValue=function(){
			return this._value;
		}

		__proto.setValue=function(value){
			this._value=value;
		}

		__proto.toNameDic=function(){
			var r=this._int2nameMap[this._value];
			return r ? r :ShaderDefines._toText(this._value,this._int2name,this._int2nameMap);
		}

		ShaderDefines._reg=function(name,value,_name2int,_int2name){
			_name2int[name]=value;
			_int2name[value]=name;
		}

		ShaderDefines._toText=function(value,_int2name,_int2nameMap){
			var r=_int2nameMap[value];
			if (r)return r;
			var o={};
			var d=1;
			for (var i=0;i < 32;i++){
				d=1 << i;
				if (d > value)break ;
				if (value & d){
					var name=_int2name[d];
					name && (o[name]="");
				}
			}
			_int2nameMap[value]=o;
			return o;
		}

		ShaderDefines._toInt=function(names,_name2int){
			var words=names.split('.');
			var num=0;
			for (var i=0,n=words.length;i < n;i++){
				var value=_name2int[words[i]];
				if (!value)throw new Error("Defines to int err:"+names+"/"+words[i]);
				num |=value;
			}
			return num;
		}

		return ShaderDefines;
	})()


	/**
	*这里销毁的问题，后面待确认
	*/
	//class laya.webgl.shader.d2.skinAnishader.SkinMesh
	var SkinMesh=(function(){
		function SkinMesh(){
			this.mVBBuffer=null;
			this.mIBBuffer=null;
			this.mVBData=null;
			this.mIBData=null;
			this.mEleNum=0;
			this.mTexture=null;
			this.transform=null;
			this._vs=null;
			this._ps=null;
			this._indexStart=-1;
			this._verticles=null;
			this._uvs=null;
			this._tempMat16=RenderState2D.getMatrArray();
		}

		__class(SkinMesh,'laya.webgl.shader.d2.skinAnishader.SkinMesh');
		var __proto=SkinMesh.prototype;
		__proto.init=function(texture,vs,ps){
			if (vs){
				this._vs=vs;
				}else {
				this._vs=[];
				var tWidth=texture.width;
				var tHeight=texture.height;
				var tRed=1;
				var tGreed=1;
				var tBlue=1;
				var tAlpha=1;
				this._vs.push(0,0,0,0,tRed,tGreed,tBlue,tAlpha);
				this._vs.push(tWidth,0,1,0,tRed,tGreed,tBlue,tAlpha);
				this._vs.push(tWidth,tHeight,1,1,tRed,tGreed,tBlue,tAlpha);
				this._vs.push(0,tHeight,0,1,tRed,tGreed,tBlue,tAlpha);
			}
			if (ps){
				this._ps=ps;
				}else {
				if (!SkinMesh._defaultPS){
					SkinMesh._defaultPS=[];
					SkinMesh._defaultPS.push(0,1,3,3,1,2);
				}
				this._ps=SkinMesh._defaultPS;
			}
			this.mVBData=new Float32Array(this._vs);
			this.mIBData=new Uint16Array(this._ps.length);
			this.mIBData["start"]=-1;
			this.mEleNum=this._ps.length;
			this.mTexture=texture;
		}

		__proto.init2=function(texture,vs,ps,verticles,uvs){
			if (this.transform)this.transform=null;
			if (ps){
				this._ps=ps;
				}else {
				this._ps=[];
				this._ps.push(0,1,3,3,1,2);
			}
			this._verticles=verticles;
			this._uvs=uvs;
			this.mEleNum=this._ps.length;
			this.mTexture=texture;
			if (Render.isConchNode || Render.isConchApp){
				this._initMyData();
				this.mVBData=new Float32Array(this._vs);
			}
		}

		__proto._initMyData=function(){
			var vsI=0;
			var vI=0;
			var vLen=this._verticles.length;
			var tempVLen=vLen *4;
			this._vs=SkinMesh._tempVS;
			var insertNew=false;
			if (Render.isConchNode || Render.isConchApp){
				this._vs.length=tempVLen;
				insertNew=true;
				}else{
				if (this._vs.length < tempVLen){
					this._vs.length=tempVLen;
					insertNew=true;
				}
			}
			SkinMesh._tVSLen=tempVLen;
			if (insertNew){
				while (vsI < tempVLen){
					this._vs[vsI]=this._verticles[vI];
					this._vs[vsI+1]=this._verticles[vI+1];
					this._vs[vsI+2]=this._uvs[vI];
					this._vs[vsI+3]=this._uvs[vI+1];
					this._vs[vsI+4]=1;
					this._vs[vsI+5]=1;
					this._vs[vsI+6]=1;
					this._vs[vsI+7]=1;
					vsI+=8;
					vI+=2;
				}
				}else{
				while (vsI < tempVLen){
					this._vs[vsI]=this._verticles[vI];
					this._vs[vsI+1]=this._verticles[vI+1];
					this._vs[vsI+2]=this._uvs[vI];
					this._vs[vsI+3]=this._uvs[vI+1];
					vsI+=8;
					vI+=2;
				}
			}
		}

		__proto.getData2=function(vb,ib,start){
			this.mVBBuffer=vb;
			this.mIBBuffer=ib;
			this._initMyData();
			vb.appendEx2(this._vs,Float32Array,SkinMesh._tVSLen,4);
			this._indexStart=ib.byteLength;
			var tIB;
			tIB=SkinMesh._tempIB;
			if (tIB.length < this._ps.length){
				tIB.length=this._ps.length;
			}
			for (var i=0,n=this._ps.length;i < n;i++){
				tIB[i]=this._ps[i]+start;
			}
			ib.appendEx2(tIB,Uint16Array,this._ps.length,2);
		}

		__proto.getData=function(vb,ib,start){
			this.mVBBuffer=vb;
			this.mIBBuffer=ib;
			vb.append(this.mVBData);
			this._indexStart=ib.byteLength;
			if (this.mIBData["start"] !=start){
				for (var i=0,n=this._ps.length;i < n;i++){
					this.mIBData[i]=this._ps[i]+start;
				}
				this.mIBData["start"]=start;
			}
			ib.append(this.mIBData);
		}

		__proto.render=function(context,x,y){
			if (Render.isWebGL && this.mTexture){
				context._renderKey=0;
				context._shader2D.glTexture=null;
				SkinMeshBuffer.getInstance().addSkinMesh(this);
				var tempSubmit=Submit.createShape(context,this.mIBBuffer,this.mVBBuffer,this.mEleNum,this._indexStart,Value2D.create(0x200,0));
				this.transform || (this.transform=Matrix.EMPTY);
				this.transform.translate(x,y);
				Matrix.mul16(this.transform,context._curMat,this._tempMat16);
				this.transform.translate(-x,-y);
				var tShaderValue=tempSubmit.shaderValue;
				tShaderValue.textureHost=this.mTexture;
				tShaderValue.offsetX=0;
				tShaderValue.offsetY=0;
				tShaderValue.u_mmat2=this._tempMat16;
				tShaderValue.ALPHA=context._shader2D.ALPHA;
				context._submits[context._submits._length++]=tempSubmit;
			}
			else if (Render.isConchApp&&this.mTexture){
				this.transform || (this.transform=Matrix.EMPTY);
				context.setSkinMesh&&context.setSkinMesh(x,y,this._ps,this.mVBData,this.mEleNum,0,this.mTexture,this.transform);
			}
		}

		SkinMesh._tempVS=[];
		SkinMesh._tempIB=[];
		SkinMesh._defaultPS=null
		SkinMesh._tVSLen=0;
		return SkinMesh;
	})()


	//class laya.webgl.shader.d2.skinAnishader.SkinMeshBuffer
	var SkinMeshBuffer=(function(){
		function SkinMeshBuffer(){
			this.ib=null;
			this.vb=null;
			var gl=WebGL.mainContext;
			this.ib=IndexBuffer2D.create(0x88E8);
			this.vb=VertexBuffer2D.create(8);
		}

		__class(SkinMeshBuffer,'laya.webgl.shader.d2.skinAnishader.SkinMeshBuffer');
		var __proto=SkinMeshBuffer.prototype;
		__proto.addSkinMesh=function(skinMesh){
			skinMesh.getData2(this.vb,this.ib,this.vb.byteLength / 32);
		}

		__proto.reset=function(){
			this.vb.clear();
			this.ib.clear();
		}

		SkinMeshBuffer.getInstance=function(){
			return SkinMeshBuffer.instance=SkinMeshBuffer.instance|| new SkinMeshBuffer();
		}

		SkinMeshBuffer.instance=null
		return SkinMeshBuffer;
	})()


	//此类可以减少代码
	//class laya.webgl.shapes.BasePoly
	var BasePoly=(function(){
		function BasePoly(x,y,width,height,edges,color,borderWidth,borderColor,round){
			//this.x=NaN;
			//this.y=NaN;
			//this.r=NaN;
			//this.width=NaN;
			//this.height=NaN;
			//this.edges=NaN;
			this.r0=0
			//this.color=0;
			//this.borderColor=NaN;
			//this.borderWidth=NaN;
			//this.round=0;
			this.fill=true;
			//this.mUint16Array=null;
			//this.mFloat32Array=null;
			this.r1=Math.PI / 2;
			(round===void 0)&& (round=0);
			this.x=x;
			this.y=y;
			this.width=width;
			this.height=height;
			this.edges=edges;
			this.color=color;
			this.borderWidth=borderWidth;
			this.borderColor=borderColor;
		}

		__class(BasePoly,'laya.webgl.shapes.BasePoly');
		var __proto=BasePoly.prototype;
		Laya.imps(__proto,{"laya.webgl.shapes.IShape":true})
		__proto.getData=function(ib,vb,start){}
		__proto.rebuild=function(points){}
		__proto.setMatrix=function(mat){}
		__proto.needUpdate=function(mat){
			return true;
		}

		__proto.sector=function(outVert,outIndex,start){
			var x=this.x,y=this.y,edges=this.edges,seg=(this.r1-this.r0)/ edges;
			var w=this.width,h=this.height,color=this.color;
			var r=((color >> 16)& 0x0000ff)/ 255,g=((color >> 8)& 0xff)/ 255,b=(color & 0x0000ff)/ 255;
			outVert.push(x,y,r,g,b);
			for (var i=0;i < edges+1;i++){
				outVert.push(x+Math.sin(seg *i+this.r0)*w,y+Math.cos(seg *i+this.r0)*h);
				outVert.push(r,g,b);
			}
			for (i=0;i < edges;i++){
				outIndex.push(start,start+i+1,start+i+2);
			}
		}

		//用于画线
		__proto.createLine2=function(p,indices,lineWidth,len,outVertex,indexCount){
			var points=p.concat();
			var result=outVertex;
			var color=this.borderColor;
			var r=((color >> 16)& 0x0000ff)/ 255,g=((color >> 8)& 0xff)/ 255,b=(color & 0x0000ff)/ 255;
			var length=points.length / 2;
			var iStart=len,w=lineWidth / 2;
			var px,py,p1x,p1y,p2x,p2y,p3x,p3y;
			var perpx,perpy,perp2x,perp2y,perp3x,perp3y;
			var a1,b1,c1,a2,b2,c2;
			var denom,pdist,dist;
			p1x=points[0];
			p1y=points[1];
			p2x=points[2];
			p2y=points[3];
			perpx=-(p1y-p2y);
			perpy=p1x-p2x;
			dist=Math.sqrt(perpx *perpx+perpy *perpy);
			perpx=perpx / dist *w;
			perpy=perpy / dist *w;
			result.push(p1x-perpx+this.x,p1y-perpy+this.y,r,g,b,p1x+perpx+this.x,p1y+perpy+this.y,r,g,b);
			for (var i=1;i < length-1;i++){
				p1x=points[(i-1)*2];
				p1y=points[(i-1)*2+1];
				p2x=points[(i)*2];
				p2y=points[(i)*2+1];
				p3x=points[(i+1)*2];
				p3y=points[(i+1)*2+1];
				perpx=-(p1y-p2y);
				perpy=p1x-p2x;
				dist=Math.sqrt(perpx *perpx+perpy *perpy);
				perpx=perpx / dist *w;
				perpy=perpy / dist *w;
				perp2x=-(p2y-p3y);
				perp2y=p2x-p3x;
				dist=Math.sqrt(perp2x *perp2x+perp2y *perp2y);
				perp2x=perp2x / dist *w;
				perp2y=perp2y / dist *w;
				a1=(-perpy+p1y)-(-perpy+p2y);
				b1=(-perpx+p2x)-(-perpx+p1x);
				c1=(-perpx+p1x)*(-perpy+p2y)-(-perpx+p2x)*(-perpy+p1y);
				a2=(-perp2y+p3y)-(-perp2y+p2y);
				b2=(-perp2x+p2x)-(-perp2x+p3x);
				c2=(-perp2x+p3x)*(-perp2y+p2y)-(-perp2x+p2x)*(-perp2y+p3y);
				denom=a1 *b2-a2 *b1;
				if (Math.abs(denom)< 0.1){
					denom+=10.1;
					result.push(p2x-perpx+this.x,p2y-perpy+this.y,r,g,b,p2x+perpx+this.x,p2y+perpy+this.y,r,g,b);
					continue ;
				}
				px=(b1 *c2-b2 *c1)/ denom;
				py=(a2 *c1-a1 *c2)/ denom;
				pdist=(px-p2x)*(px-p2x)+(py-p2y)+(py-p2y);
				result.push(px+this.x,py+this.y,r,g,b,p2x-(px-p2x)+this.x,p2y-(py-p2y)+this.y,r,g,b);
			}
			p1x=points[points.length-4];
			p1y=points[points.length-3];
			p2x=points[points.length-2];
			p2y=points[points.length-1];
			perpx=-(p1y-p2y);
			perpy=p1x-p2x;
			dist=Math.sqrt(perpx *perpx+perpy *perpy);
			perpx=perpx / dist *w;
			perpy=perpy / dist *w;
			result.push(p2x-perpx+this.x,p2y-perpy+this.y,r,g,b,p2x+perpx+this.x,p2y+perpy+this.y,r,g,b);
			var groupLen=indexCount;
			for (i=1;i < groupLen;i++){
				indices.push(iStart+(i-1)*2,iStart+(i-1)*2+1,iStart+i *2+1,iStart+i *2+1,iStart+i *2,iStart+(i-1)*2);
			}
			return result;
		}

		// /*,outVertex:Array,outIndex:Array*/
		__proto.createLine=function(p,indices,lineWidth,len){
			var points=p.concat();
			var result=p;
			var color=this.borderColor;
			var r=((color >> 16)& 0x0000ff)/ 255,g=((color >> 8)& 0xff)/ 255,b=(color & 0x0000ff)/ 255;
			points.splice(0,5);
			var length=points.length / 5;
			var iStart=len,w=lineWidth / 2;
			var px,py,p1x,p1y,p2x,p2y,p3x,p3y;
			var perpx,perpy,perp2x,perp2y,perp3x,perp3y;
			var a1,b1,c1,a2,b2,c2;
			var denom,pdist,dist;
			p1x=points[0];
			p1y=points[1];
			p2x=points[5];
			p2y=points[6];
			perpx=-(p1y-p2y);
			perpy=p1x-p2x;
			dist=Math.sqrt(perpx *perpx+perpy *perpy);
			perpx=perpx / dist *w;
			perpy=perpy / dist *w;
			result.push(p1x-perpx,p1y-perpy,r,g,b,p1x+perpx,p1y+perpy,r,g,b);
			for (var i=1;i < length-1;i++){
				p1x=points[(i-1)*5];
				p1y=points[(i-1)*5+1];
				p2x=points[(i)*5];
				p2y=points[(i)*5+1];
				p3x=points[(i+1)*5];
				p3y=points[(i+1)*5+1];
				perpx=-(p1y-p2y);
				perpy=p1x-p2x;
				dist=Math.sqrt(perpx *perpx+perpy *perpy);
				perpx=perpx / dist *w;
				perpy=perpy / dist *w;
				perp2x=-(p2y-p3y);
				perp2y=p2x-p3x;
				dist=Math.sqrt(perp2x *perp2x+perp2y *perp2y);
				perp2x=perp2x / dist *w;
				perp2y=perp2y / dist *w;
				a1=(-perpy+p1y)-(-perpy+p2y);
				b1=(-perpx+p2x)-(-perpx+p1x);
				c1=(-perpx+p1x)*(-perpy+p2y)-(-perpx+p2x)*(-perpy+p1y);
				a2=(-perp2y+p3y)-(-perp2y+p2y);
				b2=(-perp2x+p2x)-(-perp2x+p3x);
				c2=(-perp2x+p3x)*(-perp2y+p2y)-(-perp2x+p2x)*(-perp2y+p3y);
				denom=a1 *b2-a2 *b1;
				if (Math.abs(denom)< 0.1){
					denom+=10.1;
					result.push(p2x-perpx,p2y-perpy,r,g,b,p2x+perpx,p2y+perpy,r,g,b);
					continue ;
				}
				px=(b1 *c2-b2 *c1)/ denom;
				py=(a2 *c1-a1 *c2)/ denom;
				pdist=(px-p2x)*(px-p2x)+(py-p2y)+(py-p2y);
				result.push(px,py,r,g,b,p2x-(px-p2x),p2y-(py-p2y),r,g,b);
			}
			p1x=points[points.length-10];
			p1y=points[points.length-9];
			p2x=points[points.length-5];
			p2y=points[points.length-4];
			perpx=-(p1y-p2y);
			perpy=p1x-p2x;
			dist=Math.sqrt(perpx *perpx+perpy *perpy);
			perpx=perpx / dist *w;
			perpy=perpy / dist *w;
			result.push(p2x-perpx,p2y-perpy,r,g,b,p2x+perpx,p2y+perpy,r,g,b);
			var groupLen=this.edges+1;
			for (i=1;i < groupLen;i++){
				indices.push(iStart+(i-1)*2,iStart+(i-1)*2+1,iStart+i *2+1,iStart+i *2+1,iStart+i *2,iStart+(i-1)*2);
			}
			return result;
		}

		//闭合路径
		__proto.createLoopLine=function(p,indices,lineWidth,len,outVertex,outIndex){
			var points=p.concat();
			var result=outVertex ? outVertex :p;
			var color=this.borderColor;
			var r=((color >> 16)& 0x0000ff)/ 255,g=((color >> 8)& 0xff)/ 255,b=(color & 0x0000ff)/ 255;
			points.splice(0,5);
			var firstPoint=[points[0],points[1]];
			var lastPoint=[points[points.length-5],points[points.length-4]];
			var midPointX=lastPoint[0]+(firstPoint[0]-lastPoint[0])*0.5;
			var midPointY=lastPoint[1]+(firstPoint[1]-lastPoint[1])*0.5;
			points.unshift(midPointX,midPointY,0,0,0);
			points.push(midPointX,midPointY,0,0,0);
			var length=points.length / 5;
			var iStart=len,w=lineWidth / 2;
			var px,py,p1x,p1y,p2x,p2y,p3x,p3y;
			var perpx,perpy,perp2x,perp2y,perp3x,perp3y;
			var a1,b1,c1,a2,b2,c2;
			var denom,pdist,dist;
			p1x=points[0];
			p1y=points[1];
			p2x=points[5];
			p2y=points[6];
			perpx=-(p1y-p2y);
			perpy=p1x-p2x;
			dist=Math.sqrt(perpx *perpx+perpy *perpy);
			perpx=perpx / dist *w;
			perpy=perpy / dist *w;
			result.push(p1x-perpx,p1y-perpy,r,g,b,p1x+perpx,p1y+perpy,r,g,b);
			for (var i=1;i < length-1;i++){
				p1x=points[(i-1)*5];
				p1y=points[(i-1)*5+1];
				p2x=points[(i)*5];
				p2y=points[(i)*5+1];
				p3x=points[(i+1)*5];
				p3y=points[(i+1)*5+1];
				perpx=-(p1y-p2y);
				perpy=p1x-p2x;
				dist=Math.sqrt(perpx *perpx+perpy *perpy);
				perpx=perpx / dist *w;
				perpy=perpy / dist *w;
				perp2x=-(p2y-p3y);
				perp2y=p2x-p3x;
				dist=Math.sqrt(perp2x *perp2x+perp2y *perp2y);
				perp2x=perp2x / dist *w;
				perp2y=perp2y / dist *w;
				a1=(-perpy+p1y)-(-perpy+p2y);
				b1=(-perpx+p2x)-(-perpx+p1x);
				c1=(-perpx+p1x)*(-perpy+p2y)-(-perpx+p2x)*(-perpy+p1y);
				a2=(-perp2y+p3y)-(-perp2y+p2y);
				b2=(-perp2x+p2x)-(-perp2x+p3x);
				c2=(-perp2x+p3x)*(-perp2y+p2y)-(-perp2x+p2x)*(-perp2y+p3y);
				denom=a1 *b2-a2 *b1;
				if (Math.abs(denom)< 0.1){
					denom+=10.1;
					result.push(p2x-perpx,p2y-perpy,r,g,b,p2x+perpx,p2y+perpy,r,g,b);
					continue ;
				}
				px=(b1 *c2-b2 *c1)/ denom;
				py=(a2 *c1-a1 *c2)/ denom;
				pdist=(px-p2x)*(px-p2x)+(py-p2y)+(py-p2y);
				result.push(px,py,r,g,b,p2x-(px-p2x),p2y-(py-p2y),r,g,b);
			}
			if (outIndex){
				indices=outIndex;
			};
			var groupLen=this.edges+1;
			for (i=1;i < groupLen;i++){
				indices.push(iStart+(i-1)*2,iStart+(i-1)*2+1,iStart+i *2+1,iStart+i *2+1,iStart+i *2,iStart+(i-1)*2);
			}
			indices.push(iStart+(i-1)*2,iStart+(i-1)*2+1,iStart+1,iStart+1,iStart,iStart+(i-1)*2);
			return result;
		}

		return BasePoly;
	})()


	//class laya.webgl.submit.Submit
	var Submit=(function(){
		function Submit(renderType){
			//this._selfVb=null;
			//this._ib=null;
			//this._blendFn=null;
			//this._renderType=0;
			//this._vb=null;
			//this._startIdx=0;
			//this._numEle=0;
			//this.shaderValue=null;
			(renderType===void 0)&& (renderType=10000);
			this._renderType=renderType;
		}

		__class(Submit,'laya.webgl.submit.Submit');
		var __proto=Submit.prototype;
		Laya.imps(__proto,{"laya.webgl.submit.ISubmit":true})
		__proto.releaseRender=function(){
			var cache=Submit._cache;
			cache[cache._length++]=this;
			this.shaderValue.release();
			this._vb=null;
		}

		__proto.getRenderType=function(){
			return this._renderType;
		}

		__proto.renderSubmit=function(){
			if (this._numEle===0)return 1;
			var _tex=this.shaderValue.textureHost;
			if (_tex){
				var source=_tex.source;
				if (!_tex.bitmap || !source)
					return 1;
				this.shaderValue.texture=source;
			}
			this._vb.bind_upload(this._ib);
			var gl=WebGL.mainContext;
			this.shaderValue.upload();
			if (BlendMode.activeBlendFunction!==this._blendFn){
				gl.enable(0x0BE2);
				this._blendFn(gl);
				BlendMode.activeBlendFunction=this._blendFn;
			}
			Stat.drawCall++;
			Stat.trianglesFaces+=this._numEle / 3;
			gl.drawElements(0x0004,this._numEle,0x1403,this._startIdx);
			return 1;
		}

		Submit.__init__=function(){
			var s=Submit.RENDERBASE=new Submit(-1);
			s.shaderValue=new Value2D(0,0);
			s.shaderValue.ALPHA=-1234;
		}

		Submit.create=function(context,ib,vb,pos,sv){
			var o=Submit._cache._length ? Submit._cache[--Submit._cache._length] :new Submit();
			if (vb==null){
				vb=o._selfVb || (o._selfVb=VertexBuffer2D.create(-1));
				vb.clear();
				pos=0;
			}
			o._ib=ib;
			o._vb=vb;
			o._startIdx=pos *CONST3D2D.BYTES_PIDX;
			o._numEle=0;
			var blendType=context._nBlendType;
			o._blendFn=context._targets ? BlendMode.targetFns[blendType] :BlendMode.fns[blendType];
			o.shaderValue=sv;
			o.shaderValue.setValue(context._shader2D);
			var filters=context._shader2D.filters;
			filters && o.shaderValue.setFilters(filters);
			return o;
		}

		Submit.createShape=function(ctx,ib,vb,numEle,offset,sv){
			var o=(!Submit._cache._length)? (new Submit()):Submit._cache[--Submit._cache._length];
			o._ib=ib;
			o._vb=vb;
			o._numEle=numEle;
			o._startIdx=offset;
			o.shaderValue=sv;
			o.shaderValue.setValue(ctx._shader2D);
			var blendType=ctx._nBlendType;
			o._blendFn=ctx._targets ? BlendMode.targetFns[blendType] :BlendMode.fns[blendType];
			return o;
		}

		Submit.TYPE_2D=10000;
		Submit.TYPE_CANVAS=10003;
		Submit.TYPE_CMDSETRT=10004;
		Submit.TYPE_CUSTOM=10005;
		Submit.TYPE_BLURRT=10006;
		Submit.TYPE_CMDDESTORYPRERT=10007;
		Submit.TYPE_DISABLESTENCIL=10008;
		Submit.TYPE_OTHERIBVB=10009;
		Submit.TYPE_PRIMITIVE=10010;
		Submit.TYPE_RT=10011;
		Submit.TYPE_BLUR_RT=10012;
		Submit.TYPE_TARGET=10013;
		Submit.TYPE_CHANGE_VALUE=10014;
		Submit.TYPE_SHAPE=10015;
		Submit.TYPE_TEXTURE=10016;
		Submit.TYPE_FILLTEXTURE=10017;
		Submit.RENDERBASE=null
		Submit._cache=(Submit._cache=[],Submit._cache._length=0,Submit._cache);
		return Submit;
	})()


	//class laya.webgl.submit.SubmitCMD
	var SubmitCMD=(function(){
		function SubmitCMD(){
			this.fun=null;
			this.args=null;
		}

		__class(SubmitCMD,'laya.webgl.submit.SubmitCMD');
		var __proto=SubmitCMD.prototype;
		Laya.imps(__proto,{"laya.webgl.submit.ISubmit":true})
		__proto.renderSubmit=function(){
			this.fun.apply(null,this.args);
			return 1;
		}

		__proto.getRenderType=function(){
			return 0;
		}

		__proto.releaseRender=function(){
			var cache=SubmitCMD._cache;
			cache[cache._length++]=this;
		}

		SubmitCMD.create=function(args,fun){
			var o=SubmitCMD._cache._length?SubmitCMD._cache[--SubmitCMD._cache._length]:new SubmitCMD();
			o.fun=fun;
			o.args=args;
			return o;
		}

		SubmitCMD._cache=(SubmitCMD._cache=[],SubmitCMD._cache._length=0,SubmitCMD._cache);
		return SubmitCMD;
	})()


	//class laya.webgl.submit.SubmitCMDScope
	var SubmitCMDScope=(function(){
		function SubmitCMDScope(){
			this.variables={};
		}

		__class(SubmitCMDScope,'laya.webgl.submit.SubmitCMDScope');
		var __proto=SubmitCMDScope.prototype;
		__proto.getValue=function(name){
			return this.variables[name];
		}

		__proto.addValue=function(name,value){
			return this.variables[name]=value;
		}

		__proto.setValue=function(name,value){
			if(this.variables.hasOwnProperty(name)){
				return this.variables[name]=value;
			}
			return null;
		}

		__proto.clear=function(){
			for(var key in this.variables){
				delete this.variables[key];
			}
		}

		__proto.recycle=function(){
			this.clear();
			SubmitCMDScope.POOL.push(this);
		}

		SubmitCMDScope.create=function(){
			var scope=SubmitCMDScope.POOL.pop();
			scope||(scope=new SubmitCMDScope());
			return scope;
		}

		SubmitCMDScope.POOL=[];
		return SubmitCMDScope;
	})()


	//class laya.webgl.submit.SubmitOtherIBVB
	var SubmitOtherIBVB=(function(){
		function SubmitOtherIBVB(){
			this.offset=0;
			//this._vb=null;
			//this._ib=null;
			//this._blendFn=null;
			//this._mat=null;
			//this._shader=null;
			//this._shaderValue=null;
			//this._numEle=0;
			this.startIndex=0;
			;
			this._mat=Matrix.create();
		}

		__class(SubmitOtherIBVB,'laya.webgl.submit.SubmitOtherIBVB');
		var __proto=SubmitOtherIBVB.prototype;
		Laya.imps(__proto,{"laya.webgl.submit.ISubmit":true})
		__proto.releaseRender=function(){
			var cache=SubmitOtherIBVB._cache;
			cache[cache._length++]=this;
		}

		__proto.getRenderType=function(){
			return 10009;
		}

		__proto.renderSubmit=function(){
			var _tex=this._shaderValue.textureHost;
			if (_tex){
				var source=_tex.source;
				if (!_tex.bitmap || !source)
					return 1;
				this._shaderValue.texture=source;
			}
			this._vb.bind_upload(this._ib);
			var w=RenderState2D.worldMatrix4;
			var wmat=Matrix.TEMP;
			Matrix.mulPre(this._mat,w[0],w[1],w[4],w[5],w[12],w[13],wmat);
			var tmp=RenderState2D.worldMatrix4=SubmitOtherIBVB.tempMatrix4;
			tmp[0]=wmat.a;
			tmp[1]=wmat.b;
			tmp[4]=wmat.c;
			tmp[5]=wmat.d;
			tmp[12]=wmat.tx;
			tmp[13]=wmat.ty;
			this._shader._offset=this.offset;
			this._shaderValue.refresh();
			this._shader.upload(this._shaderValue);
			this._shader._offset=0;
			var gl=WebGL.mainContext;
			if (BlendMode.activeBlendFunction!==this._blendFn){
				gl.enable(0x0BE2);
				this._blendFn(gl);
				BlendMode.activeBlendFunction=this._blendFn;
			}
			Stat.drawCall++;
			Stat.trianglesFaces+=this._numEle / 3;
			gl.drawElements(0x0004,this._numEle,0x1403,this.startIndex);
			RenderState2D.worldMatrix4=w;
			BaseShader.activeShader=null;
			return 1;
		}

		SubmitOtherIBVB.create=function(context,vb,ib,numElement,shader,shaderValue,startIndex,offset,type){
			(type===void 0)&& (type=0);
			var o=(!SubmitOtherIBVB._cache._length)? (new SubmitOtherIBVB()):SubmitOtherIBVB._cache[--SubmitOtherIBVB._cache._length];
			o._ib=ib;
			o._vb=vb;
			o._numEle=numElement;
			o._shader=shader;
			o._shaderValue=shaderValue;
			var blendType=context._nBlendType;
			o._blendFn=context._targets ? BlendMode.targetFns[blendType] :BlendMode.fns[blendType];
			switch(type){
				case 0:
					o.offset=0;
					o.startIndex=offset / (CONST3D2D.BYTES_PE *vb.vertexStride)*1.5;
					o.startIndex *=CONST3D2D.BYTES_PIDX;
					break ;
				case 1:
					o.startIndex=startIndex;
					o.offset=offset;
					break ;
				}
			return o;
		}

		SubmitOtherIBVB._cache=(SubmitOtherIBVB._cache=[],SubmitOtherIBVB._cache._length=0,SubmitOtherIBVB._cache);
		SubmitOtherIBVB.tempMatrix4=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,];
		return SubmitOtherIBVB;
	})()


	//class laya.webgl.submit.SubmitScissor
	var SubmitScissor=(function(){
		function SubmitScissor(){
			this.submitIndex=0;
			this.submitLength=0;
			this.context=null;
			this.clipRect=new Rectangle();
			this.screenRect=new Rectangle();
		}

		__class(SubmitScissor,'laya.webgl.submit.SubmitScissor');
		var __proto=SubmitScissor.prototype;
		Laya.imps(__proto,{"laya.webgl.submit.ISubmit":true})
		__proto._scissor=function(x,y,w,h){
			var m=RenderState2D.worldMatrix4;
			var a=m[0],d=m[5],tx=m[12],ty=m[13];
			x=x *a+tx;
			y=y *d+ty;
			w *=a;
			h *=d;
			if (w < 1 || h < 1){
				return false;
			};
			var r=x+w;
			var b=y+h;
			x < 0 && (x=0,w=r-x);
			y < 0 && (y=0,h=b-y);
			var screen=RenderState2D.worldClipRect;
			x=Math.max(x,screen.x);
			y=Math.max(y,screen.y);
			w=Math.min(r,screen.right)-x;
			h=Math.min(b,screen.bottom)-y;
			if (w < 1 || h < 1){
				return false;
			};
			var worldScissorTest=RenderState2D.worldScissorTest;
			this.screenRect.copyFrom(screen);
			screen.x=x;
			screen.y=y;
			screen.width=w;
			screen.height=h;
			RenderState2D.worldScissorTest=true;
			y=RenderState2D.height-y-h;
			WebGL.mainContext.scissor(x,y,w,h);
			WebGL.mainContext.enable(0x0C11);
			this.context.submitElement(this.submitIndex,this.submitIndex+this.submitLength);
			if (worldScissorTest){
				y=RenderState2D.height-this.screenRect.y-this.screenRect.height;
				WebGL.mainContext.scissor(this.screenRect.x,y,this.screenRect.width,this.screenRect.height);
				WebGL.mainContext.enable(0x0C11);
			}
			else{
				WebGL.mainContext.disable(0x0C11);
				RenderState2D.worldScissorTest=false;
			}
			screen.copyFrom(this.screenRect);
			return true;
		}

		__proto._scissorWithTagart=function(x,y,w,h){
			if (w < 1 || h < 1){
				return false;
			};
			var r=x+w;
			var b=y+h;
			x < 0 && (x=0,w=r-x);
			y < 0 && (y=0,h=b-y);
			var screen=RenderState2D.worldClipRect;
			x=Math.max(x,screen.x);
			y=Math.max(y,screen.y);
			w=Math.min(r,screen.right)-x;
			h=Math.min(b,screen.bottom)-y;
			if (w < 1 || h < 1){
				return false;
			};
			var worldScissorTest=RenderState2D.worldScissorTest;
			this.screenRect.copyFrom(screen);
			RenderState2D.worldScissorTest=true;
			screen.x=x;
			screen.y=y;
			screen.width=w;
			screen.height=h;
			y=RenderState2D.height-y-h;
			WebGL.mainContext.scissor(x,y,w,h);
			WebGL.mainContext.enable(0x0C11);
			this.context.submitElement(this.submitIndex,this.submitIndex+this.submitLength);
			if (worldScissorTest){
				y=RenderState2D.height-this.screenRect.y-this.screenRect.height;
				WebGL.mainContext.scissor(this.screenRect.x,y,this.screenRect.width,this.screenRect.height);
				WebGL.mainContext.enable(0x0C11);
			}
			else{
				WebGL.mainContext.disable(0x0C11);
				RenderState2D.worldScissorTest=false;
			}
			screen.copyFrom(this.screenRect);
			return true;
		}

		__proto.renderSubmit=function(){
			this.submitLength=Math.min(this.context._submits._length-1,this.submitLength);
			if (this.submitLength < 1 || this.clipRect.width < 1 || this.clipRect.height < 1)
				return this.submitLength+1;
			if (this.context._targets)
				this._scissorWithTagart(this.clipRect.x,this.clipRect.y,this.clipRect.width,this.clipRect.height);
			else this._scissor(this.clipRect.x,this.clipRect.y,this.clipRect.width,this.clipRect.height);
			return this.submitLength+1;
		}

		__proto.getRenderType=function(){
			return 0;
		}

		__proto.releaseRender=function(){
			var cache=SubmitScissor._cache;
			cache[cache._length++]=this;
			this.context=null;
		}

		SubmitScissor.create=function(context){
			var o=SubmitScissor._cache._length?SubmitScissor._cache[--SubmitScissor._cache._length]:new SubmitScissor();
			o.context=context;
			return o;
		}

		SubmitScissor._cache=(SubmitScissor._cache=[],SubmitScissor._cache._length=0,SubmitScissor._cache);
		return SubmitScissor;
	})()


	//class laya.webgl.submit.SubmitStencil
	var SubmitStencil=(function(){
		function SubmitStencil(){
			this.step=0;
			this.blendMode=null;
			this.level=0;
		}

		__class(SubmitStencil,'laya.webgl.submit.SubmitStencil');
		var __proto=SubmitStencil.prototype;
		Laya.imps(__proto,{"laya.webgl.submit.ISubmit":true})
		__proto.renderSubmit=function(){
			switch(this.step){
				case 1:
					this.do1();
					break ;
				case 2:
					this.do2();
					break ;
				case 3:
					this.do3();
					break ;
				case 4:
					this.do4();
					break ;
				case 5:
					this.do5();
					break ;
				case 6:
					this.do6();
					break ;
				}
			return 1;
		}

		__proto.getRenderType=function(){
			return 0;
		}

		__proto.releaseRender=function(){
			var cache=SubmitStencil._cache;
			cache[cache._length++]=this;
		}

		__proto.do1=function(){
			var gl=WebGL.mainContext;
			gl.enable(0x0B90);
			gl.clear(0x00000400);
			gl.colorMask(false,false,false,false);
			gl.stencilFunc(0x0202,this.level,0xFF);
			gl.stencilOp(0x1E00,0x1E00,0x1E02);
		}

		//gl.stencilOp(WebGLContext.KEEP,WebGLContext.KEEP,WebGLContext.INVERT);//测试通过给模版缓冲 写入值 一开始是0 现在是 0xFF (模版缓冲中不知道是多少位的数据)
		__proto.do2=function(){
			var gl=WebGL.mainContext;
			gl.stencilFunc(0x0202,this.level+1,0xFF);
			gl.colorMask(true,true,true,true);
			gl.stencilOp(0x1E00,0x1E00,0x1E00);
		}

		__proto.do3=function(){
			var gl=WebGL.mainContext;
			gl.colorMask(true,true,true,true);
			gl.stencilOp(0x1E00,0x1E00,0x1E00);
			gl.clear(0x00000400);
			gl.disable(0x0B90);
		}

		__proto.do4=function(){
			var gl=WebGL.mainContext;
			gl.enable(0x0B90);
			gl.clear(0x00000400);
			gl.colorMask(false,false,false,false);
			gl.stencilFunc(0x0207,this.level,0xFF);
			gl.stencilOp(0x1E00,0x1E00,0x150A);
		}

		__proto.do5=function(){
			var gl=WebGL.mainContext;
			gl.stencilFunc(0x0202,0xff,0xFF);
			gl.colorMask(true,true,true,true);
			gl.stencilOp(0x1E00,0x1E00,0x1E00);
		}

		__proto.do6=function(){
			var gl=WebGL.mainContext;
			BlendMode.targetFns[BlendMode.TOINT[this.blendMode]](gl);
		}

		SubmitStencil.create=function(step){
			var o=SubmitStencil._cache._length?SubmitStencil._cache[--SubmitStencil._cache._length]:new SubmitStencil();
			o.step=step;
			return o;
		}

		SubmitStencil._cache=(SubmitStencil._cache=[],SubmitStencil._cache._length=0,SubmitStencil._cache);
		return SubmitStencil;
	})()


	//class laya.webgl.submit.SubmitTarget
	var SubmitTarget=(function(){
		function SubmitTarget(){
			this._renderType=0;
			this._vb=null;
			this._ib=null;
			this._startIdx=0;
			this._numEle=0;
			this.shaderValue=null;
			this.blendType=0;
			this.proName=null;
			this.scope=null;
		}

		__class(SubmitTarget,'laya.webgl.submit.SubmitTarget');
		var __proto=SubmitTarget.prototype;
		Laya.imps(__proto,{"laya.webgl.submit.ISubmit":true})
		__proto.renderSubmit=function(){
			this._vb.bind_upload(this._ib);
			var target=this.scope.getValue(this.proName);
			if (target){
				this.shaderValue.texture=target.source;
				if (this.shaderValue["strength"] && !this.shaderValue["blurInfo"]){
					this.shaderValue["blurInfo"]=[target.width,target.height];
				}
				this.shaderValue.upload();
				this.blend();
				Stat.drawCall++;
				Stat.trianglesFaces+=this._numEle/3;
				WebGL.mainContext.drawElements(0x0004,this._numEle,0x1403,this._startIdx);
			}
			return 1;
		}

		__proto.blend=function(){
			if (BlendMode.activeBlendFunction!==BlendMode.fns[this.blendType]){
				var gl=WebGL.mainContext;
				gl.enable(0x0BE2);
				BlendMode.fns[this.blendType](gl);
				BlendMode.activeBlendFunction=BlendMode.fns[this.blendType];
			}
		}

		__proto.getRenderType=function(){
			return 0;
		}

		__proto.releaseRender=function(){
			var cache=SubmitTarget._cache;
			cache[cache._length++]=this;
		}

		SubmitTarget.create=function(context,ib,vb,pos,sv,proName){
			var o=SubmitTarget._cache._length?SubmitTarget._cache[--SubmitTarget._cache._length]:new SubmitTarget();
			o._ib=ib;
			o._vb=vb;
			o.proName=proName;
			o._startIdx=pos *CONST3D2D.BYTES_PIDX;
			o._numEle=0;
			o.blendType=context._nBlendType;
			o.shaderValue=sv;
			o.shaderValue.setValue(context._shader2D);
			return o;
		}

		SubmitTarget._cache=(SubmitTarget._cache=[],SubmitTarget._cache._length=0,SubmitTarget._cache);
		return SubmitTarget;
	})()


	/**
	*...特殊的字符，如泰文，必须重新实现这个类
	*/
	//class laya.webgl.text.CharSegment
	var CharSegment=(function(){
		function CharSegment(){
			this._sourceStr=null;
		}

		__class(CharSegment,'laya.webgl.text.CharSegment');
		var __proto=CharSegment.prototype;
		Laya.imps(__proto,{"laya.webgl.text.ICharSegment":true})
		__proto.textToSpit=function(str){
			this._sourceStr=str;
		}

		__proto.getChar=function(i){
			return this._sourceStr.charAt(i);
		}

		__proto.getCharCode=function(i){
			return this._sourceStr.charCodeAt(i);
		}

		__proto.length=function(){
			return this._sourceStr.length;
		}

		return CharSegment;
	})()


	//class laya.webgl.text.DrawText
	var DrawText=(function(){
		var CharValue;
		function DrawText(){};
		__class(DrawText,'laya.webgl.text.DrawText');
		DrawText.__init__=function(){
			DrawText._charsTemp=new Array;
			DrawText._drawValue=new CharValue();
			DrawText._charSeg=new CharSegment();
		}

		DrawText.customCharSeg=function(charseg){
			DrawText._charSeg=charseg;
		}

		DrawText.getChar=function(char,id,drawValue){
			return DrawText._charsCache[id]=WebGLCharImage.createOneChar(char,drawValue);
		}

		DrawText._drawSlow=function(save,ctx,txt,words,curMat,font,textAlign,fillColor,borderColor,lineWidth,x,y,sx,sy){
			var drawValue=DrawText._drawValue.value(font,fillColor,borderColor,lineWidth,sx,sy);
			var i=0,n=0;
			var chars=DrawText._charsTemp;
			var width=0,oneChar,htmlWord,id=NaN;
			if (words){
				chars.length=words.length;
				for (i=0,n=words.length;i < n;i++){
					htmlWord=words[i];
					id=htmlWord.charNum+drawValue.txtID;
					chars[i]=oneChar=DrawText._charsCache[id] || DrawText.getChar(htmlWord.char,id,drawValue);
					oneChar.active();
				}
				}else {
				if ((txt instanceof laya.utils.WordText ))
					DrawText._charSeg.textToSpit((txt).toString());
				else
				DrawText._charSeg.textToSpit(txt);
				var len=/*if err,please use iflash.method.xmlLength()*/DrawText._charSeg.length();
				chars.length=len;
				for (i=0,n=len;i < n;i++){
					id=DrawText._charSeg.getCharCode(i)+drawValue.txtID;
					chars[i]=oneChar=DrawText._charsCache[id] || DrawText.getChar(DrawText._charSeg.getChar(i),id,drawValue);
					oneChar.active();
					width+=oneChar.cw;
				}
			};
			var dx=0;
			if (textAlign!==null && textAlign!=="left")
				dx=-(textAlign=="center" ? (width / 2):width);
			var uv,bdSz=NaN,texture,value,saveLength=0;
			if (words){
				for (i=0,n=chars.length;i < n;i++){
					oneChar=chars[i];
					if (!oneChar.isSpace){
						htmlWord=words[i];
						bdSz=oneChar.borderSize;
						texture=oneChar.texture;
						ctx._drawText(texture,x+dx+htmlWord.x *sx-bdSz,y+htmlWord.y *sy-bdSz,texture.width,texture.height,curMat,0,0,0,0);
					}
				}
				}else {
				for (i=0,n=chars.length;i < n;i++){
					oneChar=chars[i];
					if (!oneChar.isSpace){
						bdSz=oneChar.borderSize;
						texture=oneChar.texture;
						ctx._drawText(texture,x+dx-bdSz,y-bdSz,texture.width,texture.height,curMat,0,0,0,0);
						save && (value=save[saveLength++],value || (value=save[saveLength-1]=[]),value[0]=texture,value[1]=dx-bdSz,value[2]=-bdSz);
					}
					dx+=oneChar.cw;
				}
				save && (save.length=saveLength);
			}
		}

		DrawText._drawFast=function(save,ctx,curMat,x,y){
			var texture,value;
			for (var i=0,n=save.length;i < n;i++){
				value=save[i];
				texture=value[0];
				texture.active();
				ctx._drawText(texture,x+value[1],y+value[2],texture.width,texture.height,curMat,0,0,0,0);
			}
		}

		DrawText.drawText=function(ctx,txt,words,curMat,font,textAlign,fillColor,borderColor,lineWidth,x,y){
			if ((txt && txt.length===0)|| (words && words.length===0))
				return;
			var sx=curMat.a,sy=curMat.d;
			(curMat.b!==0 || curMat.c!==0)&& (sx=sy=1);
			var scale=sx!==1 || sy!==1;
			if (scale && Laya.stage.transform){
				var t=Laya.stage.transform;
				scale=t.a===sx && t.d===sy;
			}else scale=false;
			if (scale){
				curMat=curMat.copyTo(WebGLContext2D._tmpMatrix);
				curMat.scale(1 / sx,1 / sy);
				curMat._checkTransform();
				x *=sx;
				y *=sy;
			}else sx=sy=1;
			if (words){
				DrawText._drawSlow(null,ctx,txt,words,curMat,font,textAlign,fillColor,borderColor,lineWidth,x,y,sx,sy);
				}else {
				if (txt.toUpperCase===null){
					var idNum=sx+sy *100000;
					var myCache=txt;
					if (!myCache.changed && myCache.id===idNum){
						DrawText._drawFast(myCache.save,ctx,curMat,x,y);
						}else {
						myCache.id=idNum;
						myCache.changed=false;
						DrawText._drawSlow(myCache.save,ctx,txt,words,curMat,font,textAlign,fillColor,borderColor,lineWidth,x,y,sx,sy);
					}
					return;
				};
				var id=txt+font.toString()+fillColor+borderColor+lineWidth+sx+sy+textAlign;
				var cache=DrawText._textsCache[id];
				if (cache){
					DrawText._drawFast(cache,ctx,curMat,x,y);
					}else {
					DrawText._textsCache.__length || (DrawText._textsCache.__length=0);
					if (DrawText._textsCache.__length > Config.WebGLTextCacheCount){
						DrawText._textsCache={};
						DrawText._textsCache.__length=0;
						DrawText._curPoolIndex=0;
					}
					DrawText._textCachesPool[DrawText._curPoolIndex] ? (cache=DrawText._textsCache[id]=DrawText._textCachesPool[DrawText._curPoolIndex],cache.length=0):(DrawText._textCachesPool[DrawText._curPoolIndex]=cache=DrawText._textsCache[id]=[]);
					DrawText._textsCache.__length++
					DrawText._curPoolIndex++;
					DrawText._drawSlow(cache,ctx,txt,words,curMat,font,textAlign,fillColor,borderColor,lineWidth,x,y,sx,sy);
				}
			}
		}

		DrawText._charsTemp=null
		DrawText._textCachesPool=[];
		DrawText._curPoolIndex=0;
		DrawText._charsCache={};
		DrawText._textsCache={};
		DrawText._drawValue=null
		DrawText.d=[];
		DrawText._charSeg=null;
		DrawText.__init$=function(){
			//class CharValue
			CharValue=(function(){
				function CharValue(){
					//this.txtID=NaN;
					//this.font=null;
					//this.fillColor=null;
					//this.borderColor=null;
					//this.lineWidth=0;
					//this.scaleX=NaN;
					//this.scaleY=NaN;
				}
				__class(CharValue,'');
				var __proto=CharValue.prototype;
				__proto.value=function(font,fillColor,borderColor,lineWidth,scaleX,scaleY){
					this.font=font;
					this.fillColor=fillColor;
					this.borderColor=borderColor;
					this.lineWidth=lineWidth;
					this.scaleX=scaleX;
					this.scaleY=scaleY;
					var key=font.toString()+scaleX+scaleY+lineWidth+fillColor+borderColor;
					this.txtID=CharValue._keymap[key];
					if (!this.txtID){
						this.txtID=(++CharValue._keymapCount)*0.0000001;
						CharValue._keymap[key]=this.txtID;
					}
					return this;
				}
				CharValue.clear=function(){
					CharValue._keymap={};
					CharValue._keymapCount=1;
				}
				CharValue._keymap={};
				CharValue._keymapCount=1;
				return CharValue;
			})()
		}

		return DrawText;
	})()


	//class laya.webgl.text.FontInContext
	var FontInContext=(function(){
		function FontInContext(font){
			//this._text=null;
			//this._words=null;
			this._index=0;
			this._size=14;
			this._italic=-2;
			FontInContext._cache2=FontInContext._cache2|| [];
			this.setFont(font || "14px Arial");
		}

		__class(FontInContext,'laya.webgl.text.FontInContext');
		var __proto=FontInContext.prototype;
		__proto.setFont=function(value){
			var arr=FontInContext._cache2[value];
			if (!arr){
				this._words=value.split(' ');
				for (var i=0,n=this._words.length;i < n;i++){
					if (this._words[i].indexOf('px')> 0){
						this._index=i;
						break ;
					}
				}
				this._size=parseInt(this._words[this._index]);
				FontInContext._cache2[value]=[this._words,this._size];
				}else {
				this._words=arr[0];
				this._size=arr[1];
			}
			this._text=null;
			this._italic=-2;
		}

		__proto.getItalic=function(){
			this._italic===-2 && (this._italic=this.hasType("italic"));
			return this._italic;
		}

		__proto.hasType=function(name){
			for (var i=0,n=this._words.length;i < n;i++)
			if (this._words[i]===name)return i;
			return-1;
		}

		__proto.removeType=function(name){
			for (var i=0,n=this._words.length;i < n;i++)
			if (this._words[i]===name){
				this._words.splice(i,1);
				if (this._index > i)this._index--;
				break ;
			}
			this._text=null;
			this._italic=-2;
		}

		__proto.copyTo=function(dec){
			dec._text=this._text;
			dec._size=this._size;
			dec._index=this._index;
			dec._words=this._words.slice();
			dec._italic=-2;
			return dec;
		}

		__proto.toString=function(){
			return this._text ? this._text :(this._text=this._words.join(' '));
		}

		__getset(0,__proto,'size',function(){
			return this._size;
			},function(value){
			this._size=value;
			this._words[this._index]=value+"px";
			this._text=null;
		});

		FontInContext.create=function(font){
			var r=FontInContext._cache[font];
			if (r)return r;
			r=FontInContext._cache[font]=new FontInContext(font);
			return r;
		}

		FontInContext.EMPTY=new FontInContext();
		FontInContext._cache={};
		FontInContext._cache2=null
		return FontInContext;
	})()


	//class laya.webgl.utils.CONST3D2D
	var CONST3D2D=(function(){
		function CONST3D2D(){};
		__class(CONST3D2D,'laya.webgl.utils.CONST3D2D');
		CONST3D2D.defaultMatrix4=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1];
		CONST3D2D.defaultMinusYMatrix4=[1,0,0,0,0,-1,0,0,0,0,1,0,0,0,0,1];
		CONST3D2D.uniformMatrix3=[1,0,0,0,0,1,0,0,0,0,1,0];
		CONST3D2D._TMPARRAY=[];
		CONST3D2D._OFFSETX=0;
		CONST3D2D._OFFSETY=0;
		__static(CONST3D2D,
		['BYTES_PE',function(){return this.BYTES_PE=Float32Array.BYTES_PER_ELEMENT;},'BYTES_PIDX',function(){return this.BYTES_PIDX=Uint16Array.BYTES_PER_ELEMENT;}
		]);
		return CONST3D2D;
	})()


	//class laya.webgl.utils.GlUtils
	var GlUtils=(function(){
		function GlUtils(){};
		__class(GlUtils,'laya.webgl.utils.GlUtils');
		GlUtils.make2DProjection=function(width,height,depth){
			return [2.0 / width,0,0,0,0,-2.0 / height,0,0,0,0,2.0 / depth,0,-1,1,0,1,];
		}

		GlUtils.fillIBQuadrangle=function(buffer,count){
			if (count > 65535 / 4){
				throw Error("IBQuadrangle count:"+count+" must<:"+Math.floor(65535 / 4));
				return false;
			}
			count=Math.floor(count);
			buffer._resizeBuffer((count+1)*6 *2,false);
			buffer.byteLength=buffer.bufferLength;
			var bufferData=buffer.getUint16Array();
			var idx=0;
			for (var i=0;i < count;i++){
				bufferData[idx++]=i *4;
				bufferData[idx++]=i *4+2;
				bufferData[idx++]=i *4+1;
				bufferData[idx++]=i *4;
				bufferData[idx++]=i *4+3;
				bufferData[idx++]=i *4+2;
			}
			buffer.setNeedUpload();
			return true;
		}

		GlUtils.expandIBQuadrangle=function(buffer,count){
			buffer.bufferLength >=(count *6 *2)|| GlUtils.fillIBQuadrangle(buffer,count);
		}

		GlUtils.mathCeilPowerOfTwo=function(value){
			value--;
			value |=value >> 1;
			value |=value >> 2;
			value |=value >> 4;
			value |=value >> 8;
			value |=value >> 16;
			value++;
			return value;
		}

		GlUtils.fillQuadrangleImgVb=function(vb,x,y,point4,uv,m,_x,_y){
			'use strict';
			var vpos=(vb._byteLength >> 2)+16;
			vb.byteLength=(vpos << 2);
			var vbdata=vb.getFloat32Array();
			vpos-=16;
			vbdata[vpos+2]=uv[0];
			vbdata[vpos+3]=uv[1];
			vbdata[vpos+6]=uv[2];
			vbdata[vpos+7]=uv[3];
			vbdata[vpos+10]=uv[4];
			vbdata[vpos+11]=uv[5];
			vbdata[vpos+14]=uv[6];
			vbdata[vpos+15]=uv[7];
			var a=m.a,b=m.b,c=m.c,d=m.d;
			if (a!==1 || b!==0 || c!==0 || d!==1){
				m.bTransform=true;
				var tx=m.tx+_x,ty=m.ty+_y;
				vbdata[vpos]=(point4[0]+x)*a+(point4[1]+y)*c+tx;
				vbdata[vpos+1]=(point4[0]+x)*b+(point4[1]+y)*d+ty;
				vbdata[vpos+4]=(point4[2]+x)*a+(point4[3]+y)*c+tx;
				vbdata[vpos+5]=(point4[2]+x)*b+(point4[3]+y)*d+ty;
				vbdata[vpos+8]=(point4[4]+x)*a+(point4[5]+y)*c+tx;
				vbdata[vpos+9]=(point4[4]+x)*b+(point4[5]+y)*d+ty;
				vbdata[vpos+12]=(point4[6]+x)*a+(point4[7]+y)*c+tx;
				vbdata[vpos+13]=(point4[6]+x)*b+(point4[7]+y)*d+ty;
				}else {
				m.bTransform=false;
				x+=m.tx+_x;
				y+=m.ty+_y;
				vbdata[vpos]=x+point4[0];
				vbdata[vpos+1]=y+point4[1];
				vbdata[vpos+4]=x+point4[2];
				vbdata[vpos+5]=y+point4[3];
				vbdata[vpos+8]=x+point4[4];
				vbdata[vpos+9]=y+point4[5];
				vbdata[vpos+12]=x+point4[6];
				vbdata[vpos+13]=y+point4[7];
			}
			vb._upload=true;
			return true;
		}

		GlUtils.fillTranglesVB=function(vb,x,y,points,m,_x,_y){
			'use strict';
			var vpos=(vb._byteLength >> 2)+points.length;
			vb.byteLength=(vpos << 2);
			var vbdata=vb.getFloat32Array();
			vpos-=points.length;
			var len=points.length;
			var a=m.a,b=m.b,c=m.c,d=m.d;
			for (var i=0;i < len;i+=4){
				vbdata[vpos+i+2]=points[i+2];
				vbdata[vpos+i+3]=points[i+3];
				if (a!==1 || b!==0 || c!==0 || d!==1){
					m.bTransform=true;
					var tx=m.tx+_x,ty=m.ty+_y;
					vbdata[vpos+i]=(points[i]+x)*a+(points[i+1]+y)*c+tx;
					vbdata[vpos+i+1]=(points[i]+x)*b+(points[i+1]+y)*d+ty;
					}else {
					m.bTransform=false;
					x+=m.tx+_x;
					y+=m.ty+_y;
					vbdata[vpos+i]=x+points[i];
					vbdata[vpos+i+1]=y+points[i+1];
				}
			}
			vb._upload=true;
			return true;
		}

		GlUtils.copyPreImgVb=function(vb,dx,dy){
			var vpos=(vb._byteLength >> 2);
			vb.byteLength=((vpos+16)<< 2);
			var vbdata=vb.getFloat32Array();
			for (var i=0,ci=vpos-16;i < 4;i++){
				vbdata[vpos]=vbdata[ci]+dx;++vpos;++ci;
				vbdata[vpos]=vbdata[ci]+dy;++vpos;++ci;
				vbdata[vpos]=vbdata[ci];++vpos;++ci;
				vbdata[vpos]=vbdata[ci];++vpos;++ci;
			}
			vb._upload=true;
		}

		GlUtils.fillRectImgVb=function(vb,clip,x,y,width,height,uv,m,_x,_y,dx,dy,round){
			(round===void 0)&& (round=false);
			'use strict';
			var mType=1;
			var toBx,toBy,toEx,toEy;
			var cBx,cBy,cEx,cEy;
			var w0,h0,tx,ty;
			var finalX,finalY,offsetX,offsetY;
			var a=m.a,b=m.b,c=m.c,d=m.d;
			var useClip=clip.width < 99999999;
			if (a!==1 || b!==0 || c!==0 || d!==1){
				m.bTransform=true;
				if (b===0 && c===0){
					mType=23;
					w0=width+x,h0=height+y;
					tx=m.tx+_x,ty=m.ty+_y;
					toBx=a *x+tx;
					toEx=a *w0+tx;
					toBy=d *y+ty;
					toEy=d *h0+ty;
				}
				}else {
				mType=23;
				m.bTransform=false;
				toBx=x+m.tx+_x;
				toEx=toBx+width;
				toBy=y+m.ty+_y;
				toEy=toBy+height;
			}
			if (useClip){
				cBx=clip.x,cBy=clip.y,cEx=clip.width+cBx,cEy=clip.height+cBy;
			}
			if (mType!==1 && (Math.min(toBx,toEx)>=cEx || Math.min(toBy ,toEy)>=cEy || Math.max(toEx,toBx)<=cBx || Math.max(toEy,toBy)<=cBy))
				return false;
			var vpos=(vb._byteLength >> 2);
			vb.setByteLength((vpos+16)<< 2);
			var vbdata=vb._floatArray32 || vb.getFloat32Array();
			vbdata[vpos+2]=uv[0];
			vbdata[vpos+3]=uv[1];
			vbdata[vpos+6]=uv[2];
			vbdata[vpos+7]=uv[3];
			vbdata[vpos+10]=uv[4];
			vbdata[vpos+11]=uv[5];
			vbdata[vpos+14]=uv[6];
			vbdata[vpos+15]=uv[7];
			switch (mType){
				case 1:
					tx=m.tx+_x,ty=m.ty+_y;
					w0=width+x,h0=height+y;
					var w1=x,h1=y;
					var aw1=a *w1,ch1=c *h1,dh1=d *h1,bw1=b *w1;
					var aw0=a *w0,ch0=c *h0,dh0=d *h0,bw0=b *w0;
					if (round){
						finalX=aw1+ch1+tx;
						offsetX=Math.round(finalX)-finalX;
						finalY=dh1+bw1+ty;
						offsetY=Math.round(finalY)-finalY;
						vbdata[vpos]=finalX+offsetX;
						vbdata[vpos+1]=finalY+offsetY;
						vbdata[vpos+4]=aw0+ch1+tx+offsetX;
						vbdata[vpos+5]=dh1+bw0+ty+offsetY;
						vbdata[vpos+8]=aw0+ch0+tx+offsetX;
						vbdata[vpos+9]=dh0+bw0+ty+offsetY;
						vbdata[vpos+12]=aw1+ch0+tx+offsetX;
						vbdata[vpos+13]=dh0+bw1+ty+offsetY;
						}else {
						vbdata[vpos]=aw1+ch1+tx;
						vbdata[vpos+1]=dh1+bw1+ty;
						vbdata[vpos+4]=aw0+ch1+tx;
						vbdata[vpos+5]=dh1+bw0+ty;
						vbdata[vpos+8]=aw0+ch0+tx;
						vbdata[vpos+9]=dh0+bw0+ty;
						vbdata[vpos+12]=aw1+ch0+tx;
						vbdata[vpos+13]=dh0+bw1+ty;
					}
					break ;
				case 23:
					if (round){
						finalX=toBx+dx;
						offsetX=Math.round(finalX)-finalX;
						finalY=toBy;
						offsetY=Math.round(finalY)-finalY;
						vbdata[vpos]=finalX+offsetX;
						vbdata[vpos+1]=finalY+offsetY;
						vbdata[vpos+4]=toEx+dx+offsetX;
						vbdata[vpos+5]=toBy+offsetY;
						vbdata[vpos+8]=toEx+offsetX;
						vbdata[vpos+9]=toEy+offsetY;
						vbdata[vpos+12]=toBx+offsetX;
						vbdata[vpos+13]=toEy+offsetY;
						}else {
						vbdata[vpos]=toBx+dx;
						vbdata[vpos+1]=toBy;
						vbdata[vpos+4]=toEx+dx;
						vbdata[vpos+5]=toBy;
						vbdata[vpos+8]=toEx;
						vbdata[vpos+9]=toEy;
						vbdata[vpos+12]=toBx;
						vbdata[vpos+13]=toEy;
					}
					break ;
				}
			vb._upload=true;
			return true;
		}

		GlUtils.fillLineVb=function(vb,clip,fx,fy,tx,ty,width,mat){
			'use strict';
			var linew=width *.5;
			var data=GlUtils._fillLineArray;
			var perpx=-(fy-ty),perpy=fx-tx;
			var dist=Math.sqrt(perpx *perpx+perpy *perpy);
			perpx /=dist,perpy /=dist,perpx *=linew,perpy *=linew;
			data[0]=fx-perpx,data[1]=fy-perpy,data[4]=fx+perpx,data[5]=fy+perpy,data[8]=tx+perpx,data[9]=ty+perpy,data[12]=tx-perpx,data[13]=ty-perpy;
			mat && mat.transformPointArray(data,data);
			var vpos=(vb._byteLength >> 2)+16;
			vb.byteLength=(vpos << 2);
			vb.insertData(data,vpos-16);
			return true;
		}

		GlUtils._fillLineArray=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
		return GlUtils;
	})()


	//class laya.webgl.utils.MatirxArray
	var MatirxArray=(function(){
		function MatirxArray(){};
		__class(MatirxArray,'laya.webgl.utils.MatirxArray');
		MatirxArray.ArrayMul=function(a,b,o){
			if (!a){
				MatirxArray.copyArray(b,o);
				return;
			}
			if (!b){
				MatirxArray.copyArray(a,o);
				return;
			};
			var ai0=NaN,ai1=NaN,ai2=NaN,ai3=NaN;
			for (var i=0;i < 4;i++){
				ai0=a[i];
				ai1=a[i+4];
				ai2=a[i+8];
				ai3=a[i+12];
				o[i]=ai0 *b[0]+ai1 *b[1]+ai2 *b[2]+ai3 *b[3];
				o[i+4]=ai0 *b[4]+ai1 *b[5]+ai2 *b[6]+ai3 *b[7];
				o[i+8]=ai0 *b[8]+ai1 *b[9]+ai2 *b[10]+ai3 *b[11];
				o[i+12]=ai0 *b[12]+ai1 *b[13]+ai2 *b[14]+ai3 *b[15];
			}
		}

		MatirxArray.copyArray=function(f,t){
			if (!f)return;
			if (!t)return;
			for (var i=0;i < f.length;i++){
				t[i]=f[i];
			}
		}

		return MatirxArray;
	})()


	//class laya.webgl.utils.RenderState2D
	var RenderState2D=(function(){
		function RenderState2D(){};
		__class(RenderState2D,'laya.webgl.utils.RenderState2D');
		RenderState2D.getMatrArray=function(){
			return [1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1];
		}

		RenderState2D.mat2MatArray=function(mat,matArray){
			var m=mat;
			var m4=matArray;
			m4[0]=m.a;
			m4[1]=m.b;
			m4[4]=m.c;
			m4[5]=m.d;
			m4[12]=m.tx;
			m4[13]=m.ty;
			return matArray;
		}

		RenderState2D.restoreTempArray=function(){
			RenderState2D.TEMPMAT4_ARRAY[0]=1;
			RenderState2D.TEMPMAT4_ARRAY[1]=0;
			RenderState2D.TEMPMAT4_ARRAY[4]=0;
			RenderState2D.TEMPMAT4_ARRAY[5]=1;
			RenderState2D.TEMPMAT4_ARRAY[12]=0;
			RenderState2D.TEMPMAT4_ARRAY[13]=0;
		}

		RenderState2D.clear=function(){
			RenderState2D.worldScissorTest=false;
			RenderState2D.worldShaderDefines=null;
			RenderState2D.worldFilters=null;
			RenderState2D.worldAlpha=1;
			RenderState2D.worldClipRect.x=RenderState2D.worldClipRect.y=0;
			RenderState2D.worldClipRect.width=RenderState2D.width;
			RenderState2D.worldClipRect.height=RenderState2D.height;
			RenderState2D.curRenderTarget=null;
		}

		RenderState2D._MAXSIZE=99999999;
		RenderState2D.EMPTYMAT4_ARRAY=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1];
		RenderState2D.TEMPMAT4_ARRAY=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1];
		RenderState2D.worldMatrix4=RenderState2D.TEMPMAT4_ARRAY;
		RenderState2D.worldAlpha=1.0;
		RenderState2D.worldScissorTest=false;
		RenderState2D.worldFilters=null
		RenderState2D.worldShaderDefines=null
		RenderState2D.curRenderTarget=null
		RenderState2D.width=0;
		RenderState2D.height=0;
		__static(RenderState2D,
		['worldMatrix',function(){return this.worldMatrix=new Matrix();},'worldClipRect',function(){return this.worldClipRect=new Rectangle(0,0,99999999,99999999);}
		]);
		return RenderState2D;
	})()


	/**
	*@private
	*<code>ShaderCompile</code> 类用于实现Shader编译。
	*/
	//class laya.webgl.utils.ShaderCompile
	var ShaderCompile=(function(){
		var ShaderNode,InlcudeFile;
		function ShaderCompile(name,vs,ps,nameMap){
			//this._nameMap=null;
			//this._VS=null;
			//this._PS=null;
			var _$this=this;
			function _compile (script){
				var includefiles=[];
				var top=new ShaderNode(includefiles);
				_$this._compileToTree(top,script.split('\n'),0,includefiles);
				return top;
			};
			var startTime=Browser.now();
			this._VS=_compile(vs);
			this._PS=_compile(ps);
			this._nameMap=nameMap;
			if ((Browser.now()-startTime)> 2)
				console.log("ShaderCompile use time:"+(Browser.now()-startTime)+"  size:"+vs.length+"/"+ps.length);
		}

		__class(ShaderCompile,'laya.webgl.utils.ShaderCompile');
		var __proto=ShaderCompile.prototype;
		__proto._compileToTree=function(parent,lines,start,includefiles){
			var node,preNode;
			var text,name,fname;
			var ofs=0,words,noUseNode;
			for (var i=start;i < lines.length;i++){
				text=lines[i];
				if (text.length < 1)continue ;
				ofs=text.indexOf("//");
				if (ofs===0)continue ;
				if (ofs >=0)text=text.substr(0,ofs);
				node=noUseNode || new ShaderNode(includefiles);
				noUseNode=null;
				node.text=text;
				node.noCompile=true;
				if ((ofs=text.indexOf("#"))>=0){
					name="#";
					for (var j=ofs+1,n=text.length;j < n;j++){
						var c=text.charAt(j);
						if (c===' ' || c==='\t' || c==='?')break ;
						name+=c;
					}
					node.name=name;
					switch (name){
						case "#ifdef":
						case "#ifndef":
							node.src=text;
							node.noCompile=text.match(/[!&|()=<>]/)!=null;
							if (!node.noCompile){
								words=text.replace(/^\s*/,'').split(/\s+/);
								node.setCondition(words[1],name==="#ifdef" ? 1 :2);
								node.text="//"+node.text;
								}else {
								console.log("function():Boolean{return "+text.substr(ofs+node.name.length)+"}");
							}
							node.setParent(parent);
							parent=node;
							continue ;
						case "#if":
							node.src=text;
							node.noCompile=true;
							node.setParent(parent);
							parent=node;
							continue ;
						case "#else":
							node.src=text;
							parent=parent.parent;
							preNode=parent.childs[parent.childs.length-1];
							node.noCompile=preNode.noCompile;
							if (!node.noCompile){
								node.condition=preNode.condition;
								node.conditionType=preNode.conditionType==1 ? 2 :1;
								node.text="//"+node.text+" "+preNode.text+" "+node.conditionType;
							}
							node.setParent(parent);
							parent=node;
							continue ;
						case "#endif":
							parent=parent.parent;
							preNode=parent.childs[parent.childs.length-1];
							node.noCompile=preNode.noCompile;
							if (!node.noCompile){
								node.text="//"+node.text;
							}
							node.setParent(parent);
							continue ;
						case "#include":
							words=ShaderCompile.splitToWords(text,null);
							var inlcudeFile=ShaderCompile.includes[words[1]];
							if (!inlcudeFile){
								throw "ShaderCompile error no this include file:"+words[1];
								return;
							}
							if ((ofs=words[0].indexOf("?"))< 0){
								node.setParent(parent);
								text=inlcudeFile.getWith(words[2]=='with' ? words[3] :null);
								this._compileToTree(node,text.split('\n'),0,includefiles);
								node.text="";
								continue ;
							}
							node.setCondition(words[0].substr(ofs+1),1);
							node.text=inlcudeFile.getWith(words[2]=='with' ? words[3] :null);
							break ;
						case "#import":
							words=ShaderCompile.splitToWords(text,null);
							fname=words[1];
							includefiles.push({node:node,file:ShaderCompile.includes[fname],ofs:node.text.length});
							continue ;
						}
					}else {
					preNode=parent.childs[parent.childs.length-1];
					if (preNode && !preNode.name){
						includefiles.length > 0 && ShaderCompile.splitToWords(text,preNode);
						noUseNode=node;
						preNode.text+="\n"+text;
						continue ;
					}
					includefiles.length > 0 && ShaderCompile.splitToWords(text,node);
				}
				node.setParent(parent);
			}
		}

		__proto.createShader=function(define,shaderName,createShader){
			var defMap={};
			var defineStr="";
			if (define){
				for (var i in define){
					defineStr+="#define "+i+"\n";
					defMap[i]=true;
				}
			};
			var vs=this._VS.toscript(defMap,[]);
			var ps=this._PS.toscript(defMap,[]);
			return (createShader || Shader.create)(defineStr+vs.join('\n'),defineStr+ps.join('\n'),shaderName,this._nameMap);
		}

		ShaderCompile._parseOne=function(attributes,uniforms,words,i,word,b){
			var one={type:ShaderCompile.shaderParamsMap[words[i+1]],name:words[i+2],size:isNaN(parseInt(words[i+3]))? 1 :parseInt(words[i+3])};
			if (b){
				if (word=="attribute"){
					attributes.push(one);
					}else {
					uniforms.push(one);
				}
			}
			if (words[i+3]==':'){
				one.type=words[i+4];
				i+=2;
			}
			i+=2;
			return i;
		}

		ShaderCompile.addInclude=function(fileName,txt){
			if (!txt || txt.length===0)
				throw new Error("add shader include file err:"+fileName);
			if (ShaderCompile.includes[fileName])
				throw new Error("add shader include file err, has add:"+fileName);
			ShaderCompile.includes[fileName]=new InlcudeFile(txt);
		}

		ShaderCompile.preGetParams=function(vs,ps){
			var text=[vs,ps];
			var result={};
			var attributes=[];
			var uniforms=[];
			var definesInfo={};
			var definesName=[];
			result.attributes=attributes;
			result.uniforms=uniforms;
			result.defines=definesInfo;
			var i=0,n=0,one;
			for (var s=0;s < 2;s++){
				text[s]=text[s].replace(ShaderCompile._removeAnnotation,"");
				var words=text[s].match(ShaderCompile._reg);
				var tempelse;
				for (i=0,n=words.length;i < n;i++){
					var word=words[i];
					if (word !="attribute" && word !="uniform"){
						if (word=="#define"){
							word=words[++i];
							definesName[word]=1;
							continue ;
							}else if (word=="#ifdef"){
							tempelse=words[++i];
							var def=definesInfo[tempelse]=definesInfo[tempelse] || [];
							for (i++;i < n;i++){
								word=words[i];
								if (word !="attribute" && word !="uniform"){
									if (word=="#else"){
										for (i++;i < n;i++){
											word=words[i];
											if (word !="attribute" && word !="uniform"){
												if (word=="#endif"){
													break ;
												}
												continue ;
											}
											i=ShaderCompile._parseOne(attributes,uniforms,words,i,word,!definesName[tempelse]);
										}
									}
									continue ;
								}
								i=ShaderCompile._parseOne(attributes,uniforms,words,i,word,definesName[tempelse]);
							}
						}
						continue ;
					}
					i=ShaderCompile._parseOne(attributes,uniforms,words,i,word,true);
				}
			}
			return result;
		}

		ShaderCompile.splitToWords=function(str,block){
			var out=[];
			var c;
			var ofs=-1;
			var word;
			for (var i=0,n=str.length;i < n;i++){
				c=str.charAt(i);
				if (" \t=+-*/&%!<>()'\",;".indexOf(c)>=0){
					if (ofs >=0 && (i-ofs)> 1){
						word=str.substr(ofs,i-ofs);
						out.push(word);
					}
					if (c=='"' || c=="'"){
						var ofs2=str.indexOf(c,i+1);
						if (ofs2 < 0){
							throw "Sharder err:"+str;
							return null;
						}
						out.push(str.substr(i+1,ofs2-i-1));
						i=ofs2;
						ofs=-1;
						continue ;
					}
					if (c=='(' && block && out.length > 0){
						word=out[out.length-1]+";";
						if ("vec4;main;".indexOf(word)< 0)
							block.useFuns+=word;
					}
					ofs=-1;
					continue ;
				}
				if (ofs < 0)ofs=i;
			}
			if (ofs < n && (n-ofs)> 1){
				word=str.substr(ofs,n-ofs);
				out.push(word);
			}
			return out;
		}

		ShaderCompile.IFDEF_NO=0;
		ShaderCompile.IFDEF_YES=1;
		ShaderCompile.IFDEF_ELSE=2;
		ShaderCompile.IFDEF_PARENT=3;
		ShaderCompile._removeAnnotation=new RegExp("(/\\*([^*]|[\\r\\\n]|(\\*+([^*/]|[\\r\\n])))*\\*+/)|(//.*)","g");
		ShaderCompile._reg=new RegExp("(\".*\")|('.*')|([#\\w\\*-\\.+/()=<>{}\\\\]+)|([,;:\\\\])","g");
		ShaderCompile._splitToWordExps=new RegExp("[(\".*\")]+|[('.*')]+|([ \\t=\\+\\-*/&%!<>!%\(\),;])","g");
		ShaderCompile.includes={};
		__static(ShaderCompile,
		['shaderParamsMap',function(){return this.shaderParamsMap={"float":0x1406,"int":0x1404,"bool":0x8B56,"vec2":0x8B50,"vec3":0x8B51,"vec4":0x8B52,"ivec2":0x8B53,"ivec3":0x8B54,"ivec4":0x8B55,"bvec2":0x8B57,"bvec3":0x8B58,"bvec4":0x8B59,"mat2":0x8B5A,"mat3":0x8B5B,"mat4":0x8B5C,"sampler2D":0x8B5E,"samplerCube":0x8B60};}
		]);
		ShaderCompile.__init$=function(){
			//class ShaderNode
			ShaderNode=(function(){
				function ShaderNode(includefiles){
					this.childs=[];
					this.text="";
					this.parent=null;
					this.name=null;
					this.noCompile=false;
					this.includefiles=null;
					this.condition=null;
					this.conditionType=0;
					this.useFuns="";
					this.z=0;
					this.src=null;
					this.includefiles=includefiles;
				}
				__class(ShaderNode,'');
				var __proto=ShaderNode.prototype;
				__proto.setParent=function(parent){
					parent.childs.push(this);
					this.z=parent.z+1;
					this.parent=parent;
				}
				__proto.setCondition=function(condition,type){
					if (condition){
						this.conditionType=type;
						condition=condition.replace(/(\s*$)/g,"");
						this.condition=function (){
							return this[condition];
						}
						this.condition.__condition=condition;
					}
				}
				__proto.toscript=function(def,out){
					return this._toscript(def,out,++ShaderNode.__id);
				}
				__proto._toscript=function(def,out,id){
					if (this.childs.length < 1 && !this.text)return out;
					var outIndex=out.length;
					if (this.condition){
						var ifdef=!!this.condition.call(def);
						this.conditionType===2 && (ifdef=!ifdef);
						if (!ifdef)return out;
					}
					this.text && out.push(this.text);
					this.childs.length > 0 && this.childs.forEach(function(o,index,arr){
						o._toscript(def,out,id);
					});
					if (this.includefiles.length > 0 && this.useFuns.length > 0){
						var funsCode;
						for (var i=0,n=this.includefiles.length;i < n;i++){
							if (this.includefiles[i].curUseID==id){
								continue ;
							}
							funsCode=this.includefiles[i].file.getFunsScript(this.useFuns);
							if (funsCode.length > 0){
								this.includefiles[i].curUseID=id;
								out[0]=funsCode+out[0];
							}
						}
					}
					return out;
				}
				ShaderNode.__id=1;
				return ShaderNode;
			})()
			//class InlcudeFile
			InlcudeFile=(function(){
				function InlcudeFile(txt){
					this.script=null;
					this.codes={};
					this.funs={};
					this.curUseID=-1;
					this.funnames="";
					this.script=txt;
					var begin=0,ofs=0,end=0;
					while (true){
						begin=txt.indexOf("#begin",begin);
						if (begin < 0)break ;
						end=begin+5;
						while (true){
							end=txt.indexOf("#end",end);
							if (end < 0)break ;
							if (txt.charAt(end+4)==='i')
								end+=5;
							else break ;
						}
						if (end < 0){
							throw "add include err,no #end:"+txt;
							return;
						}
						ofs=txt.indexOf('\n',begin);
						var words=ShaderCompile.splitToWords(txt.substr(begin,ofs-begin),null);
						if (words[1]=='code'){
							this.codes[words[2]]=txt.substr(ofs+1,end-ofs-1);
							}else if (words[1]=='function'){
							ofs=txt.indexOf("function",begin);
							ofs+="function".length;
							this.funs[words[3]]=txt.substr(ofs+1,end-ofs-1);
							this.funnames+=words[3]+";";
						}
						begin=end+1;
					}
				}
				__class(InlcudeFile,'');
				var __proto=InlcudeFile.prototype;
				__proto.getWith=function(name){
					var r=name ? this.codes[name] :this.script;
					if (!r){
						throw "get with error:"+name;
					}
					return r;
				}
				__proto.getFunsScript=function(funsdef){
					var r="";
					for (var i in this.funs){
						if (funsdef.indexOf(i+";")>=0){
							r+=this.funs[i];
						}
					}
					return r;
				}
				return InlcudeFile;
			})()
		}

		return ShaderCompile;
	})()


	/**
	*@private
	*/
	//class laya.webgl.WebGL
	var WebGL=(function(){
		function WebGL(){};
		__class(WebGL,'laya.webgl.WebGL');
		WebGL._uint8ArraySlice=function(){
			var _this=this;
			var sz=_this.length;
			var dec=new Uint8Array(_this.length);
			for (var i=0;i < sz;i++)dec[i]=_this[i];
			return dec;
		}

		WebGL._float32ArraySlice=function(){
			var _this=this;
			var sz=_this.length;
			var dec=new Float32Array(_this.length);
			for (var i=0;i < sz;i++)dec[i]=_this[i];
			return dec;
		}

		WebGL._uint16ArraySlice=function(__arg){
			var arg=arguments;
			var _this=this;
			var sz=0;
			var dec;
			var i=0;
			if (arg.length===0){
				sz=_this.length;
				dec=new Uint16Array(sz);
				for (i=0;i < sz;i++)
				dec[i]=_this[i];
				}else if (arg.length===2){
				var start=arg[0];
				var end=arg[1];
				if (end > start){
					sz=end-start;
					dec=new Uint16Array(sz);
					for (i=start;i < end;i++)
					dec[i-start]=_this[i];
					}else {
					dec=new Uint16Array(0);
				}
			}
			return dec;
		}

		WebGL.expandContext=function(){
			var from=Context.prototype;
			var to=CanvasRenderingContext2D.prototype;
			to.fillTrangles=from.fillTrangles;
			Buffer2D.__int__(null);
			to.setIBVB=function (x,y,ib,vb,numElement,mat,shader,shaderValues,startIndex,offset){
				(startIndex===void 0)&& (startIndex=0);
				(offset===void 0)&& (offset=0);
				if (ib===null){
					this._ib=this._ib || IndexBuffer2D.QuadrangleIB;
					ib=this._ib;
					GlUtils.expandIBQuadrangle(ib,(vb.byteLength / (4 *16)+8));
				}
				this._setIBVB(x,y,ib,vb,numElement,mat,shader,shaderValues,startIndex,offset);
			};
			to.fillTrangles=function (tex,x,y,points,m){
				this._curMat=this._curMat || Matrix.create();
				this._vb=this._vb || VertexBuffer2D.create();
				if (!this._ib){
					this._ib=IndexBuffer2D.create();
					GlUtils.fillIBQuadrangle(this._ib,length / 4);
				};
				var vb=this._vb;
				var length=points.length >> 4;
				GlUtils.fillTranglesVB(vb,x,y,points,m || this._curMat,0,0);
				GlUtils.expandIBQuadrangle(this._ib,(vb.byteLength / (4 *16)+8));
				var shaderValues=new Value2D(0x01,0);
				shaderValues.textureHost=tex;
				var sd=new Shader2X("attribute vec2 position; attribute vec2 texcoord; uniform vec2 size; uniform mat4 mmat; varying vec2 v_texcoord; void main() { vec4 p=vec4(position.xy,0.0,1.0);vec4 pos=mmat*p; gl_Position =vec4((pos.x/size.x-0.5)*2.0,(0.5-pos.y/size.y)*2.0,pos.z,1.0); v_texcoord = texcoord; }","precision mediump float; varying vec2 v_texcoord; uniform sampler2D texture; void main() {vec4 color= texture2D(texture, v_texcoord); color.a*=1.0; gl_FragColor= color;}");
				vb._vertType=3;
				this._setIBVB(x,y,this._ib,vb,length *6,m,sd,shaderValues,0,0);
			}
		}

		WebGL.enable=function(){
			Browser.__init__();
			if (Render.isConchApp){
				if (!Render.isConchWebGL){
					RunDriver.skinAniSprite=function (){
						var tSkinSprite=new SkinMesh()
						return tSkinSprite;
					}
					WebGL.expandContext();
					return false;
				}
			}
			RunDriver.getWebGLContext=function getWebGLContext (canvas){
				var gl;
				var names=["webgl","experimental-webgl","webkit-3d","moz-webgl"];
				for (var i=0;i < names.length;i++){
					try {
						gl=canvas.getContext(names[i],{stencil:Config.isStencil,alpha:Config.isAlpha,antialias:Config.isAntialias,premultipliedAlpha:Config.premultipliedAlpha,preserveDrawingBuffer:Config.preserveDrawingBuffer});
					}catch (e){}
					if (gl){
						(i!==0)&& (WebGL._isExperimentalWebgl=true);
						return gl;
					}
				}
				return null;
			}
			WebGL.mainContext=RunDriver.getWebGLContext(Render._mainCanvas);
			if (WebGL.mainContext==null)
				return false;
			if (Render.isWebGL)return true;
			HTMLImage.create=function (src,def){
				return new WebGLImage(src,def);
			}
			HTMLSubImage.create=function (canvas,offsetX,offsetY,width,height,atlasImage,src){
				return new WebGLSubImage(canvas,offsetX,offsetY,width,height,atlasImage,src);
			}
			Render.WebGL=WebGL;
			Render.isWebGL=true;
			DrawText.__init__();
			RunDriver.createRenderSprite=function (type,next){
				return new RenderSprite3D(type,next);
			}
			RunDriver.createWebGLContext2D=function (c){
				return new WebGLContext2D(c);
			}
			RunDriver.changeWebGLSize=function (width,height){
				laya.webgl.WebGL.onStageResize(width,height);
			}
			RunDriver.createGraphics=function (){
				return new GraphicsGL();
			};
			var action=RunDriver.createFilterAction;
			RunDriver.createFilterAction=action ? action :function (type){
				return new ColorFilterActionGL()
			}
			RunDriver.clear=function (color){
				if(Browser.onAndriod)
					laya.webgl.WebGL.mainContext.flush();
				RenderState2D.worldScissorTest && laya.webgl.WebGL.mainContext.disable(0x0C11);
				var ctx=Render.context.ctx;
				var c=(ctx._submits._length==0 || Config.preserveDrawingBuffer)? Color$2.create(color)._color :Stage._wgColor;
				if (c)ctx.clearBG(c[0],c[1],c[2],c[3]);
				RenderState2D.clear();
			}
			RunDriver.addToAtlas=function (texture,force){
				(force===void 0)&& (force=false);
				var bitmap=texture.bitmap;
				if (!Render.optimizeTextureMemory(texture.url,texture)){
					(bitmap).enableMerageInAtlas=false;
					return;
				}
				if ((Laya.__typeof(bitmap,'laya.webgl.resource.IMergeAtlasBitmap'))&& ((bitmap).allowMerageInAtlas)){
					bitmap.on("recovered",texture,texture.addTextureToAtlas);
				}
			}
			AtlasResourceManager._enable();
			RunDriver.beginFlush=function (){
				var atlasResourceManager=AtlasResourceManager.instance;
				var count=atlasResourceManager.getAtlaserCount();
				for (var i=0;i < count;i++){
					var atlerCanvas=atlasResourceManager.getAtlaserByIndex(i).texture;
					(atlerCanvas._flashCacheImageNeedFlush)&& (RunDriver.flashFlushImage(atlerCanvas));
				}
			}
			RunDriver.drawToCanvas=function (sprite,_renderType,canvasWidth,canvasHeight,offsetX,offsetY){
				offsetX-=sprite.x;
				offsetY-=sprite.y;
				var renderTarget=new RenderTarget2D(canvasWidth,canvasHeight,0x1908,0x1401,0,false);
				renderTarget.start();
				Render.context.clear();
				sprite.render(Render.context,offsetX,RenderState2D.height-canvasHeight+offsetY);
				Render.context.flush();
				renderTarget.end();
				var pixels=renderTarget.getData(0,0,renderTarget.width,renderTarget.height);
				renderTarget.dispose();
				var htmlCanvas=new WebGLCanvas();
				htmlCanvas._canvas=Browser.createElement("canvas");
				htmlCanvas.size(canvasWidth,canvasHeight);
				var context=htmlCanvas._canvas.getContext('2d');
				Browser.canvas.size(canvasWidth,canvasHeight);
				var tempContext=Browser.context;
				var imgData=tempContext.createImageData(canvasWidth,canvasHeight);
				imgData.data.set(new Uint8ClampedArray(pixels.buffer));
				tempContext.putImageData(imgData,0,0);
				context.save();
				context.translate(0,canvasHeight);
				context.scale(1,-1);
				context.drawImage(Browser.canvas.source,0,0);
				context.restore();
				return htmlCanvas;
			}
			RunDriver.createFilterAction=function (type){
				var action;
				switch (type){
					case 0x20:
						action=new ColorFilterActionGL();
						break ;
					}
				return action;
			}
			RunDriver.addTextureToAtlas=function (texture){
				texture._uvID++;
				AtlasResourceManager._atlasRestore++;
				((texture.bitmap).enableMerageInAtlas)&& (AtlasResourceManager.instance.addToAtlas(texture));
			}
			RunDriver.getTexturePixels=function (value,x,y,width,height){
				(Render.context.ctx).clear();
				var tSprite=new Sprite();
				tSprite.graphics.drawTexture(value,-x,-y);
				var tRenderTarget=RenderTarget2D.create(width,height);
				tRenderTarget.start();
				tRenderTarget.clear(0,0,0,0);
				tSprite.render(Render.context,0,0);
				(Render.context.ctx).flush();
				tRenderTarget.end();
				var tUint8Array=tRenderTarget.getData(0,0,width,height);
				var tArray=[];
				var tIndex=0;
				for (var i=height-1;i >=0;i--){
					for (var j=0;j < width;j++){
						tIndex=(i *width+j)*4;
						tArray.push(tUint8Array[tIndex]);
						tArray.push(tUint8Array[tIndex+1]);
						tArray.push(tUint8Array[tIndex+2]);
						tArray.push(tUint8Array[tIndex+3]);
					}
				}
				return tArray;
			}
			RunDriver.skinAniSprite=function (){
				var tSkinSprite=new SkinMesh()
				return tSkinSprite;
			}
			HTMLCanvas.create=function (type,canvas){
				var ret=new WebGLCanvas();
				ret._imgData=canvas;
				ret.flipY=false;
				return ret;
			}
			Filter._filterStart=function (scope,sprite,context,x,y){
				var b=scope.getValue("bounds");
				var source=RenderTarget2D.create(b.width,b.height);
				source.start();
				source.clear(0,0,0,0);
				scope.addValue("src",source);
				scope.addValue("ScissorTest",RenderState2D.worldScissorTest);
				if (RenderState2D.worldScissorTest){
					var tClilpRect=new Rectangle();
					tClilpRect.copyFrom((context.ctx)._clipRect)
					scope.addValue("clipRect",tClilpRect);
					RenderState2D.worldScissorTest=false;
					laya.webgl.WebGL.mainContext.disable(0x0C11);
				}
			}
			Filter._filterEnd=function (scope,sprite,context,x,y){
				var b=scope.getValue("bounds");
				var source=scope.getValue("src");
				source.end();
				var out=RenderTarget2D.create(b.width,b.height);
				out.start();
				out.clear(0,0,0,0);
				scope.addValue("out",out);
				sprite._set$P('_filterCache',out);
				sprite._set$P('_isHaveGlowFilter',scope.getValue("_isHaveGlowFilter"));
			}
			Filter._EndTarget=function (scope,context){
				var source=scope.getValue("src");
				source.recycle();
				var out=scope.getValue("out");
				out.end();
				var b=scope.getValue("ScissorTest");
				if (b){
					RenderState2D.worldScissorTest=true;
					laya.webgl.WebGL.mainContext.enable(0x0C11);
					context.ctx.save();
					var tClipRect=scope.getValue("clipRect");
					(context.ctx).clipRect(tClipRect.x,tClipRect.y,tClipRect.width,tClipRect.height);
				}
			}
			Filter._useSrc=function (scope){
				var source=scope.getValue("out");
				source.end();
				source=scope.getValue("src");
				source.start();
				source.clear(0,0,0,0);
			}
			Filter._endSrc=function (scope){
				var source=scope.getValue("src");
				source.end();
			}
			Filter._useOut=function (scope){
				var source=scope.getValue("src");
				source.end();
				source=scope.getValue("out");
				source.start();
				source.clear(0,0,0,0);
			}
			Filter._endOut=function (scope){
				var source=scope.getValue("out");
				source.end();
			}
			Filter._recycleScope=function (scope){
				scope.recycle();
			}
			Filter._filter=function (sprite,context,x,y){
				var next=this._next;
				if (next){
					var filters=sprite.filters,len=filters.length;
					if (len==1 && (filters[0].type==0x20)){
						context.ctx.save();
						context.ctx.setFilters([filters[0]]);
						next._fun.call(next,sprite,context,x,y);
						context.ctx.restore();
						return;
					};
					var shaderValue;
					var b;
					var scope=SubmitCMDScope.create();
					var p=Point.TEMP;
					var tMatrix=context.ctx._getTransformMatrix();
					var mat=Matrix.create();
					tMatrix.copyTo(mat);
					var tPadding=0;
					var tHalfPadding=0;
					var tIsHaveGlowFilter=false;
					var out=sprite._$P._filterCache ? sprite._$P._filterCache :null;
					if (!out || sprite._repaint){
						tIsHaveGlowFilter=sprite._isHaveGlowFilter();
						scope.addValue("_isHaveGlowFilter",tIsHaveGlowFilter);
						if (tIsHaveGlowFilter){
							tPadding=50;
							tHalfPadding=25;
						}
						b=new Rectangle();
						b.copyFrom((sprite).getSelfBounds());
						b.x+=(sprite).x;
						b.y+=(sprite).y;
						b.x-=(sprite).pivotX+4;
						b.y-=(sprite).pivotY+4;
						var tSX=b.x;
						var tSY=b.y;
						b.width+=(tPadding+8);
						b.height+=(tPadding+8);
						p.x=b.x *mat.a+b.y *mat.c;
						p.y=b.y *mat.d+b.x *mat.b;
						b.x=p.x;
						b.y=p.y;
						p.x=b.width *mat.a+b.height *mat.c;
						p.y=b.height *mat.d+b.width *mat.b;
						b.width=p.x;
						b.height=p.y;
						if (b.width <=0 || b.height <=0){
							return;
						}
						out && out.recycle();
						scope.addValue("bounds",b);
						var submit=SubmitCMD.create([scope,sprite,context,0,0],Filter._filterStart);
						context.addRenderObject(submit);
						(context.ctx)._renderKey=0;
						(context.ctx)._shader2D.glTexture=null;
						var tX=sprite.x-tSX+tHalfPadding;
						var tY=sprite.y-tSY+tHalfPadding;
						next._fun.call(next,sprite,context,tX,tY);
						submit=SubmitCMD.create([scope,sprite,context,0,0],Filter._filterEnd);
						context.addRenderObject(submit);
						for (var i=0;i < len;i++){
							if (i !=0){
								submit=SubmitCMD.create([scope],Filter._useSrc);
								context.addRenderObject(submit);
								shaderValue=Value2D.create(0x01,0);
								Matrix.TEMP.identity();
								context.ctx.drawTarget(scope,0,0,b.width,b.height,Matrix.TEMP,"out",shaderValue,null,BlendMode.TOINT.overlay);
								submit=SubmitCMD.create([scope],Filter._useOut);
								context.addRenderObject(submit);
							};
							var fil=filters[i];
							fil.action.apply3d(scope,sprite,context,0,0);
						}
						submit=SubmitCMD.create([scope,context],Filter._EndTarget);
						context.addRenderObject(submit);
						}else {
						tIsHaveGlowFilter=sprite._$P._isHaveGlowFilter ? sprite._$P._isHaveGlowFilter :false;
						if (tIsHaveGlowFilter){
							tPadding=50;
							tHalfPadding=25;
						}
						b=sprite.getBounds();
						if (b.width <=0 || b.height <=0){
							return;
						}
						b.width+=tPadding;
						b.height+=tPadding;
						p.x=b.x *mat.a+b.y *mat.c;
						p.y=b.y *mat.d+b.x *mat.b;
						b.x=p.x;
						b.y=p.y;
						p.x=b.width *mat.a+b.height *mat.c;
						p.y=b.height *mat.d+b.width *mat.b;
						b.width=p.x;
						b.height=p.y;
						scope.addValue("out",out);
					}
					x=x-tHalfPadding-sprite.x;
					y=y-tHalfPadding-sprite.y;
					p.setTo(x,y);
					mat.transformPoint(p);
					x=p.x+b.x;
					y=p.y+b.y;
					shaderValue=Value2D.create(0x01,0);
					Matrix.TEMP.identity();
					(context.ctx).drawTarget(scope,x,y,b.width,b.height,Matrix.TEMP,"out",shaderValue,null,BlendMode.TOINT.overlay);
					submit=SubmitCMD.create([scope],Filter._recycleScope);
					context.addRenderObject(submit);
					mat.destroy();
				}
			}
			Float32Array.prototype.slice || (Float32Array.prototype.slice=WebGL._float32ArraySlice);
			Uint16Array.prototype.slice || (Uint16Array.prototype.slice=WebGL._uint16ArraySlice);
			Uint8Array.prototype.slice || (Uint8Array.prototype.slice=WebGL._uint8ArraySlice);
			return true;
		}

		WebGL.onStageResize=function(width,height){
			if (WebGL.mainContext==null)return;
			WebGL.mainContext.viewport(0,0,width,height);
			RenderState2D.width=width;
			RenderState2D.height=height;
		}

		WebGL.isExperimentalWebgl=function(){
			return WebGL._isExperimentalWebgl;
		}

		WebGL.addRenderFinish=function(){
			if (WebGL._isExperimentalWebgl || Render.isFlash){
				RunDriver.endFinish=function (){
					Render.context.ctx.finish();
				}
			}
		}

		WebGL.removeRenderFinish=function(){
			if (WebGL._isExperimentalWebgl){
				RunDriver.endFinish=function (){}
			}
		}

		WebGL.onInvalidGLRes=function(){
			AtlasResourceManager.instance.freeAll();
			ResourceManager.releaseContentManagers(true);
			WebGL.doNodeRepaint(Laya.stage);
			WebGL.mainContext.viewport(0,0,RenderState2D.width,RenderState2D.height);
			Laya.stage.event("devicelost");
		}

		WebGL.doNodeRepaint=function(sprite){
			(sprite.numChildren==0)&& (sprite.repaint());
			for (var i=0;i < sprite.numChildren;i++)
			WebGL.doNodeRepaint(sprite.getChildAt(i));
		}

		WebGL.init=function(canvas,width,height){
			WebGL.mainCanvas=canvas;
			HTMLCanvas._createContext=function (canvas){
				return new WebGLContext2D(canvas);
			}
			WebGLCanvas._createContext=function (canvas){
				return new WebGLContext2D(canvas);
			}
			WebGL._isExperimentalWebgl=(WebGL._isExperimentalWebgl && (Browser.onWeiXin || Browser.onMQQBrowser));
			WebGL.frameShaderHighPrecision=false;
			var gl=laya.webgl.WebGL.mainContext;
			try {
				var precisionFormat=gl.getShaderPrecisionFormat(0x8B30,0x8DF2);
				precisionFormat.precision ? WebGL.frameShaderHighPrecision=true :WebGL.frameShaderHighPrecision=false;
			}catch (e){}
			gl.deleteTexture1=gl.deleteTexture;
			gl.deleteTexture=function (t){
				if (t==WebGLContext.curBindTexValue){
					WebGLContext.curBindTexValue=null;
				}
				gl.deleteTexture1(t);
			}
			WebGL.onStageResize(width,height);
			if (WebGL.mainContext==null)
				throw new Error("webGL getContext err!");
			System$1.__init__();
			AtlasResourceManager.__init__();
			ShaderDefines2D.__init__();
			Submit.__init__();
			WebGLContext2D.__init__();
			Value2D.__init__();
			Shader2D.__init__();
			Buffer2D.__int__(gl);
			BlendMode._init_(gl);
			if (Render.isConchApp){
				conch.setOnInvalidGLRes(WebGL.onInvalidGLRes);
			}
		}

		WebGL.mainCanvas=null
		WebGL.mainContext=null
		WebGL.antialias=true;
		WebGL.frameShaderHighPrecision=false;
		WebGL._bg_null=[0,0,0,0];
		WebGL._isExperimentalWebgl=false;
		return WebGL;
	})()


	//class laya.webgl.WebGLContext
	var WebGLContext=(function(){
		function WebGLContext(){};
		__class(WebGLContext,'laya.webgl.WebGLContext');
		WebGLContext.UseProgram=function(program){
			if (WebGLContext._useProgram===program)return false;
			WebGL.mainContext.useProgram(program);
			WebGLContext._useProgram=program;
			return true;
		}

		WebGLContext.setDepthTest=function(gl,value){
			value!==WebGLContext._depthTest && (WebGLContext._depthTest=value,value?gl.enable(0x0B71):gl.disable(0x0B71));
		}

		WebGLContext.setDepthMask=function(gl,value){
			value!==WebGLContext._depthMask && (WebGLContext._depthMask=value,gl.depthMask(value));
		}

		WebGLContext.setDepthFunc=function(gl,value){
			value!==WebGLContext._depthFunc && (WebGLContext._depthFunc=value,gl.depthFunc(value));
		}

		WebGLContext.setBlend=function(gl,value){
			value!==WebGLContext._blend && (WebGLContext._blend=value,value?gl.enable(0x0BE2):gl.disable(0x0BE2));
		}

		WebGLContext.setBlendFunc=function(gl,sFactor,dFactor){
			(sFactor!==WebGLContext._sFactor||dFactor!==WebGLContext._dFactor)&& (WebGLContext._sFactor=sFactor,WebGLContext._dFactor=dFactor,gl.blendFunc(sFactor,dFactor));
		}

		WebGLContext.setCullFace=function(gl,value){
			value!==WebGLContext._cullFace && (WebGLContext._cullFace=value,value?gl.enable(0x0B44):gl.disable(0x0B44));
		}

		WebGLContext.setFrontFace=function(gl,value){
			value!==WebGLContext._frontFace && (WebGLContext._frontFace=value,gl.frontFace(value));
		}

		WebGLContext.bindTexture=function(gl,target,texture){
			gl.bindTexture(target,texture);
			WebGLContext.curBindTexTarget=target;
			WebGLContext.curBindTexValue=texture;
		}

		WebGLContext.DEPTH_BUFFER_BIT=0x00000100;
		WebGLContext.STENCIL_BUFFER_BIT=0x00000400;
		WebGLContext.COLOR_BUFFER_BIT=0x00004000;
		WebGLContext.POINTS=0x0000;
		WebGLContext.LINES=0x0001;
		WebGLContext.LINE_LOOP=0x0002;
		WebGLContext.LINE_STRIP=0x0003;
		WebGLContext.TRIANGLES=0x0004;
		WebGLContext.TRIANGLE_STRIP=0x0005;
		WebGLContext.TRIANGLE_FAN=0x0006;
		WebGLContext.ZERO=0;
		WebGLContext.ONE=1;
		WebGLContext.SRC_COLOR=0x0300;
		WebGLContext.ONE_MINUS_SRC_COLOR=0x0301;
		WebGLContext.SRC_ALPHA=0x0302;
		WebGLContext.ONE_MINUS_SRC_ALPHA=0x0303;
		WebGLContext.DST_ALPHA=0x0304;
		WebGLContext.ONE_MINUS_DST_ALPHA=0x0305;
		WebGLContext.DST_COLOR=0x0306;
		WebGLContext.ONE_MINUS_DST_COLOR=0x0307;
		WebGLContext.SRC_ALPHA_SATURATE=0x0308;
		WebGLContext.FUNC_ADD=0x8006;
		WebGLContext.BLEND_EQUATION=0x8009;
		WebGLContext.BLEND_EQUATION_RGB=0x8009;
		WebGLContext.BLEND_EQUATION_ALPHA=0x883D;
		WebGLContext.FUNC_SUBTRACT=0x800A;
		WebGLContext.FUNC_REVERSE_SUBTRACT=0x800B;
		WebGLContext.BLEND_DST_RGB=0x80C8;
		WebGLContext.BLEND_SRC_RGB=0x80C9;
		WebGLContext.BLEND_DST_ALPHA=0x80CA;
		WebGLContext.BLEND_SRC_ALPHA=0x80CB;
		WebGLContext.CONSTANT_COLOR=0x8001;
		WebGLContext.ONE_MINUS_CONSTANT_COLOR=0x8002;
		WebGLContext.CONSTANT_ALPHA=0x8003;
		WebGLContext.ONE_MINUS_CONSTANT_ALPHA=0x8004;
		WebGLContext.BLEND_COLOR=0x8005;
		WebGLContext.ARRAY_BUFFER=0x8892;
		WebGLContext.ELEMENT_ARRAY_BUFFER=0x8893;
		WebGLContext.ARRAY_BUFFER_BINDING=0x8894;
		WebGLContext.ELEMENT_ARRAY_BUFFER_BINDING=0x8895;
		WebGLContext.STREAM_DRAW=0x88E0;
		WebGLContext.STATIC_DRAW=0x88E4;
		WebGLContext.DYNAMIC_DRAW=0x88E8;
		WebGLContext.BUFFER_SIZE=0x8764;
		WebGLContext.BUFFER_USAGE=0x8765;
		WebGLContext.CURRENT_VERTEX_ATTRIB=0x8626;
		WebGLContext.FRONT=0x0404;
		WebGLContext.BACK=0x0405;
		WebGLContext.CULL_FACE=0x0B44;
		WebGLContext.FRONT_AND_BACK=0x0408;
		WebGLContext.BLEND=0x0BE2;
		WebGLContext.DITHER=0x0BD0;
		WebGLContext.STENCIL_TEST=0x0B90;
		WebGLContext.DEPTH_TEST=0x0B71;
		WebGLContext.SCISSOR_TEST=0x0C11;
		WebGLContext.POLYGON_OFFSET_FILL=0x8037;
		WebGLContext.SAMPLE_ALPHA_TO_COVERAGE=0x809E;
		WebGLContext.SAMPLE_COVERAGE=0x80A0;
		WebGLContext.NO_ERROR=0;
		WebGLContext.INVALID_ENUM=0x0500;
		WebGLContext.INVALID_VALUE=0x0501;
		WebGLContext.INVALID_OPERATION=0x0502;
		WebGLContext.OUT_OF_MEMORY=0x0505;
		WebGLContext.CW=0x0900;
		WebGLContext.CCW=0x0901;
		WebGLContext.LINE_WIDTH=0x0B21;
		WebGLContext.ALIASED_POINT_SIZE_RANGE=0x846D;
		WebGLContext.ALIASED_LINE_WIDTH_RANGE=0x846E;
		WebGLContext.CULL_FACE_MODE=0x0B45;
		WebGLContext.FRONT_FACE=0x0B46;
		WebGLContext.DEPTH_RANGE=0x0B70;
		WebGLContext.DEPTH_WRITEMASK=0x0B72;
		WebGLContext.DEPTH_CLEAR_VALUE=0x0B73;
		WebGLContext.DEPTH_FUNC=0x0B74;
		WebGLContext.STENCIL_CLEAR_VALUE=0x0B91;
		WebGLContext.STENCIL_FUNC=0x0B92;
		WebGLContext.STENCIL_FAIL=0x0B94;
		WebGLContext.STENCIL_PASS_DEPTH_FAIL=0x0B95;
		WebGLContext.STENCIL_PASS_DEPTH_PASS=0x0B96;
		WebGLContext.STENCIL_REF=0x0B97;
		WebGLContext.STENCIL_VALUE_MASK=0x0B93;
		WebGLContext.STENCIL_WRITEMASK=0x0B98;
		WebGLContext.STENCIL_BACK_FUNC=0x8800;
		WebGLContext.STENCIL_BACK_FAIL=0x8801;
		WebGLContext.STENCIL_BACK_PASS_DEPTH_FAIL=0x8802;
		WebGLContext.STENCIL_BACK_PASS_DEPTH_PASS=0x8803;
		WebGLContext.STENCIL_BACK_REF=0x8CA3;
		WebGLContext.STENCIL_BACK_VALUE_MASK=0x8CA4;
		WebGLContext.STENCIL_BACK_WRITEMASK=0x8CA5;
		WebGLContext.VIEWPORT=0x0BA2;
		WebGLContext.SCISSOR_BOX=0x0C10;
		WebGLContext.COLOR_CLEAR_VALUE=0x0C22;
		WebGLContext.COLOR_WRITEMASK=0x0C23;
		WebGLContext.UNPACK_ALIGNMENT=0x0CF5;
		WebGLContext.PACK_ALIGNMENT=0x0D05;
		WebGLContext.MAX_TEXTURE_SIZE=0x0D33;
		WebGLContext.MAX_VIEWPORT_DIMS=0x0D3A;
		WebGLContext.SUBPIXEL_BITS=0x0D50;
		WebGLContext.RED_BITS=0x0D52;
		WebGLContext.GREEN_BITS=0x0D53;
		WebGLContext.BLUE_BITS=0x0D54;
		WebGLContext.ALPHA_BITS=0x0D55;
		WebGLContext.DEPTH_BITS=0x0D56;
		WebGLContext.STENCIL_BITS=0x0D57;
		WebGLContext.POLYGON_OFFSET_UNITS=0x2A00;
		WebGLContext.POLYGON_OFFSET_FACTOR=0x8038;
		WebGLContext.TEXTURE_BINDING_2D=0x8069;
		WebGLContext.SAMPLE_BUFFERS=0x80A8;
		WebGLContext.SAMPLES=0x80A9;
		WebGLContext.SAMPLE_COVERAGE_VALUE=0x80AA;
		WebGLContext.SAMPLE_COVERAGE_INVERT=0x80AB;
		WebGLContext.NUM_COMPRESSED_TEXTURE_FORMATS=0x86A2;
		WebGLContext.COMPRESSED_TEXTURE_FORMATS=0x86A3;
		WebGLContext.DONT_CARE=0x1100;
		WebGLContext.FASTEST=0x1101;
		WebGLContext.NICEST=0x1102;
		WebGLContext.GENERATE_MIPMAP_HINT=0x8192;
		WebGLContext.BYTE=0x1400;
		WebGLContext.UNSIGNED_BYTE=0x1401;
		WebGLContext.SHORT=0x1402;
		WebGLContext.UNSIGNED_SHORT=0x1403;
		WebGLContext.INT=0x1404;
		WebGLContext.UNSIGNED_INT=0x1405;
		WebGLContext.FLOAT=0x1406;
		WebGLContext.DEPTH_COMPONENT=0x1902;
		WebGLContext.ALPHA=0x1906;
		WebGLContext.RGB=0x1907;
		WebGLContext.RGBA=0x1908;
		WebGLContext.LUMINANCE=0x1909;
		WebGLContext.LUMINANCE_ALPHA=0x190A;
		WebGLContext.UNSIGNED_SHORT_4_4_4_4=0x8033;
		WebGLContext.UNSIGNED_SHORT_5_5_5_1=0x8034;
		WebGLContext.UNSIGNED_SHORT_5_6_5=0x8363;
		WebGLContext.FRAGMENT_SHADER=0x8B30;
		WebGLContext.VERTEX_SHADER=0x8B31;
		WebGLContext.MAX_VERTEX_ATTRIBS=0x8869;
		WebGLContext.MAX_VERTEX_UNIFORM_VECTORS=0x8DFB;
		WebGLContext.MAX_VARYING_VECTORS=0x8DFC;
		WebGLContext.MAX_COMBINED_TEXTURE_IMAGE_UNITS=0x8B4D;
		WebGLContext.MAX_VERTEX_TEXTURE_IMAGE_UNITS=0x8B4C;
		WebGLContext.MAX_TEXTURE_IMAGE_UNITS=0x8872;
		WebGLContext.MAX_FRAGMENT_UNIFORM_VECTORS=0x8DFD;
		WebGLContext.SHADER_TYPE=0x8B4F;
		WebGLContext.DELETE_STATUS=0x8B80;
		WebGLContext.LINK_STATUS=0x8B82;
		WebGLContext.VALIDATE_STATUS=0x8B83;
		WebGLContext.ATTACHED_SHADERS=0x8B85;
		WebGLContext.ACTIVE_UNIFORMS=0x8B86;
		WebGLContext.ACTIVE_ATTRIBUTES=0x8B89;
		WebGLContext.SHADING_LANGUAGE_VERSION=0x8B8C;
		WebGLContext.CURRENT_PROGRAM=0x8B8D;
		WebGLContext.NEVER=0x0200;
		WebGLContext.LESS=0x0201;
		WebGLContext.EQUAL=0x0202;
		WebGLContext.LEQUAL=0x0203;
		WebGLContext.GREATER=0x0204;
		WebGLContext.NOTEQUAL=0x0205;
		WebGLContext.GEQUAL=0x0206;
		WebGLContext.ALWAYS=0x0207;
		WebGLContext.KEEP=0x1E00;
		WebGLContext.REPLACE=0x1E01;
		WebGLContext.INCR=0x1E02;
		WebGLContext.DECR=0x1E03;
		WebGLContext.INVERT=0x150A;
		WebGLContext.INCR_WRAP=0x8507;
		WebGLContext.DECR_WRAP=0x8508;
		WebGLContext.VENDOR=0x1F00;
		WebGLContext.RENDERER=0x1F01;
		WebGLContext.VERSION=0x1F02;
		WebGLContext.NEAREST=0x2600;
		WebGLContext.LINEAR=0x2601;
		WebGLContext.NEAREST_MIPMAP_NEAREST=0x2700;
		WebGLContext.LINEAR_MIPMAP_NEAREST=0x2701;
		WebGLContext.NEAREST_MIPMAP_LINEAR=0x2702;
		WebGLContext.LINEAR_MIPMAP_LINEAR=0x2703;
		WebGLContext.TEXTURE_MAG_FILTER=0x2800;
		WebGLContext.TEXTURE_MIN_FILTER=0x2801;
		WebGLContext.TEXTURE_WRAP_S=0x2802;
		WebGLContext.TEXTURE_WRAP_T=0x2803;
		WebGLContext.TEXTURE_2D=0x0DE1;
		WebGLContext.TEXTURE=0x1702;
		WebGLContext.TEXTURE_CUBE_MAP=0x8513;
		WebGLContext.TEXTURE_BINDING_CUBE_MAP=0x8514;
		WebGLContext.TEXTURE_CUBE_MAP_POSITIVE_X=0x8515;
		WebGLContext.TEXTURE_CUBE_MAP_NEGATIVE_X=0x8516;
		WebGLContext.TEXTURE_CUBE_MAP_POSITIVE_Y=0x8517;
		WebGLContext.TEXTURE_CUBE_MAP_NEGATIVE_Y=0x8518;
		WebGLContext.TEXTURE_CUBE_MAP_POSITIVE_Z=0x8519;
		WebGLContext.TEXTURE_CUBE_MAP_NEGATIVE_Z=0x851A;
		WebGLContext.MAX_CUBE_MAP_TEXTURE_SIZE=0x851C;
		WebGLContext.TEXTURE0=0x84C0;
		WebGLContext.TEXTURE1=0x84C1;
		WebGLContext.TEXTURE2=0x84C2;
		WebGLContext.TEXTURE3=0x84C3;
		WebGLContext.TEXTURE4=0x84C4;
		WebGLContext.TEXTURE5=0x84C5;
		WebGLContext.TEXTURE6=0x84C6;
		WebGLContext.TEXTURE7=0x84C7;
		WebGLContext.TEXTURE8=0x84C8;
		WebGLContext.TEXTURE9=0x84C9;
		WebGLContext.TEXTURE10=0x84CA;
		WebGLContext.TEXTURE11=0x84CB;
		WebGLContext.TEXTURE12=0x84CC;
		WebGLContext.TEXTURE13=0x84CD;
		WebGLContext.TEXTURE14=0x84CE;
		WebGLContext.TEXTURE15=0x84CF;
		WebGLContext.TEXTURE16=0x84D0;
		WebGLContext.TEXTURE17=0x84D1;
		WebGLContext.TEXTURE18=0x84D2;
		WebGLContext.TEXTURE19=0x84D3;
		WebGLContext.TEXTURE20=0x84D4;
		WebGLContext.TEXTURE21=0x84D5;
		WebGLContext.TEXTURE22=0x84D6;
		WebGLContext.TEXTURE23=0x84D7;
		WebGLContext.TEXTURE24=0x84D8;
		WebGLContext.TEXTURE25=0x84D9;
		WebGLContext.TEXTURE26=0x84DA;
		WebGLContext.TEXTURE27=0x84DB;
		WebGLContext.TEXTURE28=0x84DC;
		WebGLContext.TEXTURE29=0x84DD;
		WebGLContext.TEXTURE30=0x84DE;
		WebGLContext.TEXTURE31=0x84DF;
		WebGLContext.ACTIVE_TEXTURE=0x84E0;
		WebGLContext.REPEAT=0x2901;
		WebGLContext.CLAMP_TO_EDGE=0x812F;
		WebGLContext.MIRRORED_REPEAT=0x8370;
		WebGLContext.FLOAT_VEC2=0x8B50;
		WebGLContext.FLOAT_VEC3=0x8B51;
		WebGLContext.FLOAT_VEC4=0x8B52;
		WebGLContext.INT_VEC2=0x8B53;
		WebGLContext.INT_VEC3=0x8B54;
		WebGLContext.INT_VEC4=0x8B55;
		WebGLContext.BOOL=0x8B56;
		WebGLContext.BOOL_VEC2=0x8B57;
		WebGLContext.BOOL_VEC3=0x8B58;
		WebGLContext.BOOL_VEC4=0x8B59;
		WebGLContext.FLOAT_MAT2=0x8B5A;
		WebGLContext.FLOAT_MAT3=0x8B5B;
		WebGLContext.FLOAT_MAT4=0x8B5C;
		WebGLContext.SAMPLER_2D=0x8B5E;
		WebGLContext.SAMPLER_CUBE=0x8B60;
		WebGLContext.VERTEX_ATTRIB_ARRAY_ENABLED=0x8622;
		WebGLContext.VERTEX_ATTRIB_ARRAY_SIZE=0x8623;
		WebGLContext.VERTEX_ATTRIB_ARRAY_STRIDE=0x8624;
		WebGLContext.VERTEX_ATTRIB_ARRAY_TYPE=0x8625;
		WebGLContext.VERTEX_ATTRIB_ARRAY_NORMALIZED=0x886A;
		WebGLContext.VERTEX_ATTRIB_ARRAY_POINTER=0x8645;
		WebGLContext.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING=0x889F;
		WebGLContext.COMPILE_STATUS=0x8B81;
		WebGLContext.LOW_FLOAT=0x8DF0;
		WebGLContext.MEDIUM_FLOAT=0x8DF1;
		WebGLContext.HIGH_FLOAT=0x8DF2;
		WebGLContext.LOW_INT=0x8DF3;
		WebGLContext.MEDIUM_INT=0x8DF4;
		WebGLContext.HIGH_INT=0x8DF5;
		WebGLContext.FRAMEBUFFER=0x8D40;
		WebGLContext.RENDERBUFFER=0x8D41;
		WebGLContext.RGBA4=0x8056;
		WebGLContext.RGB5_A1=0x8057;
		WebGLContext.RGB565=0x8D62;
		WebGLContext.DEPTH_COMPONENT16=0x81A5;
		WebGLContext.STENCIL_INDEX=0x1901;
		WebGLContext.STENCIL_INDEX8=0x8D48;
		WebGLContext.DEPTH_STENCIL=0x84F9;
		WebGLContext.RENDERBUFFER_WIDTH=0x8D42;
		WebGLContext.RENDERBUFFER_HEIGHT=0x8D43;
		WebGLContext.RENDERBUFFER_INTERNAL_FORMAT=0x8D44;
		WebGLContext.RENDERBUFFER_RED_SIZE=0x8D50;
		WebGLContext.RENDERBUFFER_GREEN_SIZE=0x8D51;
		WebGLContext.RENDERBUFFER_BLUE_SIZE=0x8D52;
		WebGLContext.RENDERBUFFER_ALPHA_SIZE=0x8D53;
		WebGLContext.RENDERBUFFER_DEPTH_SIZE=0x8D54;
		WebGLContext.RENDERBUFFER_STENCIL_SIZE=0x8D55;
		WebGLContext.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE=0x8CD0;
		WebGLContext.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME=0x8CD1;
		WebGLContext.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL=0x8CD2;
		WebGLContext.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE=0x8CD3;
		WebGLContext.COLOR_ATTACHMENT0=0x8CE0;
		WebGLContext.DEPTH_ATTACHMENT=0x8D00;
		WebGLContext.STENCIL_ATTACHMENT=0x8D20;
		WebGLContext.DEPTH_STENCIL_ATTACHMENT=0x821A;
		WebGLContext.NONE=0;
		WebGLContext.FRAMEBUFFER_COMPLETE=0x8CD5;
		WebGLContext.FRAMEBUFFER_INCOMPLETE_ATTACHMENT=0x8CD6;
		WebGLContext.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT=0x8CD7;
		WebGLContext.FRAMEBUFFER_INCOMPLETE_DIMENSIONS=0x8CD9;
		WebGLContext.FRAMEBUFFER_UNSUPPORTED=0x8CDD;
		WebGLContext.FRAMEBUFFER_BINDING=0x8CA6;
		WebGLContext.RENDERBUFFER_BINDING=0x8CA7;
		WebGLContext.MAX_RENDERBUFFER_SIZE=0x84E8;
		WebGLContext.INVALID_FRAMEBUFFER_OPERATION=0x0506;
		WebGLContext.UNPACK_FLIP_Y_WEBGL=0x9240;
		WebGLContext.UNPACK_PREMULTIPLY_ALPHA_WEBGL=0x9241;
		WebGLContext.CONTEXT_LOST_WEBGL=0x9242;
		WebGLContext.UNPACK_COLORSPACE_CONVERSION_WEBGL=0x9243;
		WebGLContext.BROWSER_DEFAULT_WEBGL=0x9244;
		WebGLContext._useProgram=null;
		WebGLContext._depthTest=true;
		WebGLContext._depthMask=true;
		WebGLContext._depthFunc=0x0201;
		WebGLContext._blend=false;
		WebGLContext._sFactor=1;
		WebGLContext._dFactor=0;
		WebGLContext._cullFace=false;
		WebGLContext._frontFace=0x0901;
		WebGLContext.curBindTexTarget=null
		WebGLContext.curBindTexValue=null
		return WebGLContext;
	})()


	//class laya.wx.mini.MiniAdpter
	var MiniAdpter=(function(){
		function MiniAdpter(){};
		__class(MiniAdpter,'laya.wx.mini.MiniAdpter');
		MiniAdpter.getJson=function(data){
			return JSON.parse(data);
		}

		MiniAdpter.init=function(isPosMsg,isSon){
			(isPosMsg===void 0)&& (isPosMsg=false);
			(isSon===void 0)&& (isSon=false);
			if (MiniAdpter._inited)return;
			MiniAdpter._inited=true;
			MiniAdpter.window=window;
			if(MiniAdpter.window.navigator.userAgent.indexOf('MiniGame')<0)return;
			MiniAdpter.isZiYu=isSon;
			MiniAdpter.isPosMsgYu=isPosMsg;
			MiniAdpter.EnvConfig={};
			if(!MiniAdpter.isZiYu){
				MiniFileMgr.setNativeFileDir("/layaairGame");
				MiniFileMgr.existDir(MiniFileMgr.fileNativeDir,Handler.create(MiniAdpter,MiniAdpter.onMkdirCallBack));
			}
			MiniAdpter.systemInfo=wx.getSystemInfoSync();
			MiniAdpter.window.focus=function (){
			};
			Laya['getUrlPath']=function (){
			};
			MiniAdpter.window.logtime=function (str){
			};
			MiniAdpter.window.alertTimeLog=function (str){
			};
			MiniAdpter.window.resetShareInfo=function (){
			};
			MiniAdpter.window.CanvasRenderingContext2D=function (){
			};
			MiniAdpter.window.CanvasRenderingContext2D.prototype=MiniAdpter.window.wx.createCanvas().getContext('2d').__proto__;
			MiniAdpter.window.document.body.appendChild=function (){
			};
			MiniAdpter.EnvConfig.pixelRatioInt=0;
			RunDriver.getPixelRatio=MiniAdpter.pixelRatio;
			MiniAdpter._preCreateElement=Browser.createElement;
			Browser["createElement"]=MiniAdpter.createElement;
			RunDriver.createShaderCondition=MiniAdpter.createShaderCondition;
			Utils$2['parseXMLFromString']=MiniAdpter.parseXMLFromString;
			Input['_createInputElement']=MiniInput['_createInputElement'];
			MiniAdpter.EnvConfig.load=Loader.prototype.load;
			Loader.prototype.load=MiniLoader.prototype.load;
			Loader.prototype._loadImage=MiniImage.prototype._loadImage;
			MiniLocalStorage.__init__();
			LocalStorage._baseClass=MiniLocalStorage;
		}

		MiniAdpter.getUrlEncode=function(url,type){
			if(url.indexOf(".fnt")!=-1)
				return "utf8";
			else if(type=="arraybuffer")
			return "";
			return "ascii";
		}

		MiniAdpter.downLoadFile=function(fileUrl,fileType,callBack,encoding){
			(fileType===void 0)&& (fileType="");
			(encoding===void 0)&& (encoding="ascii");
			var fileObj=MiniFileMgr.getFileInfo(fileUrl);
			if(!fileObj)
				MiniFileMgr.downLoadFile(fileUrl,fileType,callBack,encoding);
			else{
				callBack !=null && callBack.runWith([0]);
			}
		}

		MiniAdpter.remove=function(fileUrl,callBack){
			MiniFileMgr.deleteFile("",fileUrl,callBack,"",0);
		}

		MiniAdpter.removeAll=function(){
			MiniFileMgr.deleteAll();
		}

		MiniAdpter.hasNativeFile=function(fileUrl){
			return MiniFileMgr.isLocalNativeFile(fileUrl);
		}

		MiniAdpter.getFileInfo=function(fileUrl){
			return MiniFileMgr.getFileInfo(fileUrl);
		}

		MiniAdpter.getFileList=function(){
			return MiniFileMgr.filesListObj;
		}

		MiniAdpter.exitMiniProgram=function(){
			MiniAdpter.window["wx"].exitMiniProgram();
		}

		MiniAdpter.onMkdirCallBack=function(errorCode,data){
			if (!errorCode)
				MiniFileMgr.filesListObj=JSON.parse(data.data);
		}

		MiniAdpter.pixelRatio=function(){
			if (!MiniAdpter.EnvConfig.pixelRatioInt){
				try {
					MiniAdpter.EnvConfig.pixelRatioInt=MiniAdpter.systemInfo.pixelRatio;
					return MiniAdpter.systemInfo.pixelRatio;
				}catch (error){}
			}
			return MiniAdpter.EnvConfig.pixelRatioInt;
		}

		MiniAdpter.createElement=function(type){
			if (type=="canvas"){
				var _source;
				if (MiniAdpter.idx==1){
					if(MiniAdpter.isZiYu){
						_source=sharedCanvas;
						_source.style={};
						}else{
						_source=window.canvas;
					}
					}else {
					_source=window.wx.createCanvas();
				}
				MiniAdpter.idx++;
				return _source;
				}else if (type=="textarea" || type=="input"){
				return MiniAdpter.onCreateInput(type);
				}else if (type=="div"){
				var node=MiniAdpter._preCreateElement(type);
				node.contains=function (value){
					return null
				};
				node.removeChild=function (value){
				};
				return node;
				}else {
				return MiniAdpter._preCreateElement(type);
			}
		}

		MiniAdpter.onCreateInput=function(type){
			var node=MiniAdpter._preCreateElement(type);
			node.focus=MiniInput.wxinputFocus;
			node.blur=MiniInput.wxinputblur;
			node.style={};
			node.value=0;
			node.parentElement={};
			node.placeholder={};
			node.type={};
			node.setColor=function (value){
			};
			node.setType=function (value){
			};
			node.setFontFace=function (value){
			};
			node.addEventListener=function (value){
			};
			node.contains=function (value){
				return null
			};
			node.removeChild=function (value){
			};
			return node;
		}

		MiniAdpter.createShaderCondition=function(conditionScript){
			var _$this=this;
			var func=function (){
				var abc=conditionScript;
				return _$this[conditionScript.replace("this.","")];
			}
			return func;
		}

		MiniAdpter.EnvConfig=null
		MiniAdpter.window=null
		MiniAdpter._preCreateElement=null
		MiniAdpter._inited=false;
		MiniAdpter.systemInfo=null
		MiniAdpter.isZiYu=false;
		MiniAdpter.isPosMsgYu=false;
		MiniAdpter.autoCacheFile=true;
		MiniAdpter.minClearSize=(5 *1024 *1024);
		MiniAdpter.AutoCacheDownFile=false;
		MiniAdpter.parseXMLFromString=function(value){
			var rst;
			var Parser;
			value=value.replace(/>\s+</g,'><');
			try {
				rst=(new window.Parser.DOMParser()).parseFromString(value,'text/xml');
				}catch (error){
				throw "需要引入xml解析库文件";
			}
			return rst;
		}

		MiniAdpter.idx=1;
		__static(MiniAdpter,
		['nativefiles',function(){return this.nativefiles=["layaNativeDir","wxlocal"];}
		]);
		return MiniAdpter;
	})()


	/**@private **/
	//class laya.wx.mini.MiniFileMgr
	var MiniFileMgr=(function(){
		function MiniFileMgr(){};
		__class(MiniFileMgr,'laya.wx.mini.MiniFileMgr');
		MiniFileMgr.isLocalNativeFile=function(url){
			for(var i=0,sz=MiniAdpter.nativefiles.length;i<sz;i++){
				if(url.indexOf(MiniAdpter.nativefiles[i])!=-1)
					return true;
			}
			return false;
		}

		MiniFileMgr.getFileInfo=function(fileUrl){
			var fileNativePath=fileUrl.split("?")[0];
			var fileObj=MiniFileMgr.filesListObj[fileNativePath];
			if (fileObj==null)
				return null;
			else
			return fileObj;
			return null;
		}

		MiniFileMgr.read=function(filePath,encoding,callBack,readyUrl,isSaveFile,fileType){
			(encoding===void 0)&& (encoding="ascill");
			(readyUrl===void 0)&& (readyUrl="");
			(isSaveFile===void 0)&& (isSaveFile=false);
			(fileType===void 0)&& (fileType="");
			var fileUrl;
			if(readyUrl!="" && (readyUrl.indexOf("http://")!=-1 || readyUrl.indexOf("https://")!=-1)){
				fileUrl=MiniFileMgr.getFileNativePath(filePath)
				}else{
				fileUrl=filePath;
			}
			MiniFileMgr.fs.readFile({filePath:fileUrl,encoding:encoding,success:function (data){
					callBack !=null && callBack.runWith([0,data]);
					},fail:function (data){
					if (data && readyUrl !="")
						MiniFileMgr.downFiles(readyUrl,encoding,callBack,readyUrl,isSaveFile,fileType);
					else
					callBack !=null && callBack.runWith([1]);
			}});
		}

		MiniFileMgr.downFiles=function(fileUrl,encoding,callBack,readyUrl,isSaveFile,fileType,isAutoClear){
			(encoding===void 0)&& (encoding="ascii");
			(readyUrl===void 0)&& (readyUrl="");
			(isSaveFile===void 0)&& (isSaveFile=false);
			(fileType===void 0)&& (fileType="");
			(isAutoClear===void 0)&& (isAutoClear=true);
			var downloadTask=MiniFileMgr.wxdown({url:fileUrl,success:function (data){
					if (data.statusCode===200)
						MiniFileMgr.readFile(data.tempFilePath,encoding,callBack,readyUrl,isSaveFile,fileType,isAutoClear);
					},fail:function (data){
					callBack !=null && callBack.runWith([1,data]);
			}});
			downloadTask.onProgressUpdate(function(data){
				callBack !=null && callBack.runWith([2,data.progress]);
			});
		}

		MiniFileMgr.readFile=function(filePath,encoding,callBack,readyUrl,isSaveFile,fileType,isAutoClear){
			(encoding===void 0)&& (encoding="ascill");
			(readyUrl===void 0)&& (readyUrl="");
			(isSaveFile===void 0)&& (isSaveFile=false);
			(fileType===void 0)&& (fileType="");
			(isAutoClear===void 0)&& (isAutoClear=true);
			MiniFileMgr.fs.readFile({filePath:filePath,encoding:encoding,success:function (data){
					if (filePath.indexOf("http://")!=-1 || filePath.indexOf("https://")!=-1){
						if(MiniAdpter.autoCacheFile || isSaveFile){
							MiniFileMgr.copyFile(filePath,readyUrl,callBack,encoding,isAutoClear);
						}
					}
					else
					callBack !=null && callBack.runWith([0,data]);
					},fail:function (data){
					if (data)
						callBack !=null && callBack.runWith([1,data]);
			}});
		}

		MiniFileMgr.downOtherFiles=function(fileUrl,callBack,readyUrl,isSaveFile,isAutoClear){
			(readyUrl===void 0)&& (readyUrl="");
			(isSaveFile===void 0)&& (isSaveFile=false);
			(isAutoClear===void 0)&& (isAutoClear=true);
			MiniFileMgr.wxdown({url:fileUrl,success:function (data){
					if (data.statusCode===200){
						if((MiniAdpter.autoCacheFile || isSaveFile)&& readyUrl.indexOf("wx.qlogo.cn")==-1)
							MiniFileMgr.copyFile(data.tempFilePath,readyUrl,callBack,"",isAutoClear);
						else
						callBack !=null && callBack.runWith([0,data.tempFilePath]);
					}
					},fail:function (data){
					callBack !=null && callBack.runWith([1,data]);
			}});
		}

		MiniFileMgr.downLoadFile=function(fileUrl,fileType,callBack,encoding){
			(fileType===void 0)&& (fileType="");
			(encoding===void 0)&& (encoding="ascii");
			if(fileType=="image" || fileType=="sound")
				MiniFileMgr.downOtherFiles(fileUrl,callBack,fileUrl,true,false);
			else
			MiniFileMgr.downFiles(fileUrl,encoding,callBack,fileUrl,true,fileType,false);
		}

		MiniFileMgr.copyFile=function(tempFilePath,readyUrl,callBack,encoding,isAutoClear){
			(encoding===void 0)&& (encoding="");
			(isAutoClear===void 0)&& (isAutoClear=true);
			var temp=tempFilePath.split("/");
			var tempFileName=temp[temp.length-1];
			var fileurlkey=readyUrl.split("?")[0];
			var fileObj=MiniFileMgr.getFileInfo(readyUrl);
			var saveFilePath=MiniFileMgr.getFileNativePath(tempFileName);
			var totalSize=50 *1024 *1024;
			var chaSize=4 *1024 *1024;
			var fileUseSize=MiniFileMgr.getCacheUseSize();
			if (fileObj){
				if (fileObj.readyUrl !=readyUrl){
					MiniFileMgr.fs.getFileInfo({
						filePath:tempFilePath,
						success:function (data){
							if((isAutoClear && (fileUseSize+chaSize+data.size)>=totalSize)){
								if(data.size > MiniAdpter.minClearSize)
									MiniAdpter.minClearSize=data.size;
								MiniFileMgr.onClearCacheRes();
							}
							MiniFileMgr.deleteFile(tempFileName,readyUrl,callBack,encoding,data.size);
						},
						fail:function (data){
							callBack !=null && callBack.runWith([1,data]);
						}
					});
				}
				else
				callBack !=null && callBack.runWith([0]);
				}else{
				MiniFileMgr.fs.getFileInfo({
					filePath:tempFilePath,
					success:function (data){
						if((isAutoClear && (fileUseSize+chaSize+data.size)>=totalSize)){
							if(data.size > MiniAdpter.minClearSize)
								MiniAdpter.minClearSize=data.size;
							MiniFileMgr.onClearCacheRes();
						}
						MiniFileMgr.fs.copyFile({srcPath:tempFilePath,destPath:saveFilePath,success:function (data2){
								MiniFileMgr.onSaveFile(readyUrl,tempFileName,true,encoding,callBack,data.size);
								},fail:function (data){
								callBack !=null && callBack.runWith([1,data]);
						}});
					},
					fail:function (data){
						callBack !=null && callBack.runWith([1,data]);
					}
				});
			}
		}

		MiniFileMgr.onClearCacheRes=function(){
			var memSize=MiniAdpter.minClearSize;
			var tempFileListArr=[];
			for(var key in MiniFileMgr.filesListObj){
				tempFileListArr.push(MiniFileMgr.filesListObj[key]);
			}
			MiniFileMgr.sortOn(tempFileListArr,"time",16);
			var clearSize=0;
			for(var i=1,sz=tempFileListArr.length;i<sz;i++){
				var fileObj=tempFileListArr[i];
				if(clearSize >=memSize)
					break ;
				clearSize+=fileObj.size;
				MiniFileMgr.deleteFile("",fileObj.readyUrl);
			}
		}

		MiniFileMgr.sortOn=function(array,name,options){
			(options===void 0)&& (options=0);
			if (options==16)return array.sort(function(a,b){return a[name]-b[name];});
			if (options==(16 | 2))return array.sort(function(a,b){return b[name]-a[name];});
			return array.sort(function(a,b){return a[name]-b[name] });
		}

		MiniFileMgr.getFileNativePath=function(fileName){
			return laya.wx.mini.MiniFileMgr.fileNativeDir+"/"+fileName;
		}

		MiniFileMgr.deleteFile=function(tempFileName,readyUrl,callBack,encoding,fileSize){
			(readyUrl===void 0)&& (readyUrl="");
			(encoding===void 0)&& (encoding="");
			(fileSize===void 0)&& (fileSize=0);
			var fileObj=MiniFileMgr.getFileInfo(readyUrl);
			var deleteFileUrl=MiniFileMgr.getFileNativePath(fileObj.md5);
			MiniFileMgr.fs.unlink({filePath:deleteFileUrl,success:function (data){
					var isAdd=tempFileName !="" ? true :false;
					if(tempFileName !=""){
						var saveFilePath=MiniFileMgr.getFileNativePath(tempFileName);
						MiniFileMgr.fs.copyFile({srcPath:tempFileName,destPath:saveFilePath,success:function (data){
								MiniFileMgr.onSaveFile(readyUrl,tempFileName,isAdd,encoding,callBack,data.size);
								},fail:function (data){
								callBack !=null && callBack.runWith([1,data]);
						}});
						}else{
						MiniFileMgr.onSaveFile(readyUrl,tempFileName,isAdd,encoding,callBack,fileSize);
					}
					},fail:function (data){
			}});
		}

		MiniFileMgr.deleteAll=function(){
			var tempFileListArr=[];
			for(var key in MiniFileMgr.filesListObj){
				tempFileListArr.push(MiniFileMgr.filesListObj[key]);
			}
			for(var i=1,sz=tempFileListArr.length;i<sz;i++){
				var fileObj=tempFileListArr[i];
				MiniFileMgr.deleteFile("",fileObj.readyUrl);
			}
		}

		MiniFileMgr.onSaveFile=function(readyUrl,md5Name,isAdd,encoding,callBack,fileSize){
			(isAdd===void 0)&& (isAdd=true);
			(encoding===void 0)&& (encoding="");
			(fileSize===void 0)&& (fileSize=0);
			var fileurlkey=readyUrl.split("?")[0];
			if(MiniFileMgr.filesListObj['fileUsedSize']==null)
				MiniFileMgr.filesListObj['fileUsedSize']=0;
			if(isAdd){
				var fileNativeName=MiniFileMgr.getFileNativePath(md5Name);
				MiniFileMgr.filesListObj[fileurlkey]={md5:md5Name,readyUrl:readyUrl,size:fileSize,times:Browser.now(),encoding:encoding};
				MiniFileMgr.filesListObj['fileUsedSize']=parseInt(MiniFileMgr.filesListObj['fileUsedSize'])+fileSize;
				MiniFileMgr.writeFilesList(fileurlkey,JSON.stringify(MiniFileMgr.filesListObj),true);
				callBack !=null && callBack.runWith([0]);
				}else{
				if(MiniFileMgr.filesListObj[fileurlkey]){
					var deletefileSize=parseInt(MiniFileMgr.filesListObj[fileurlkey].size);
					MiniFileMgr.filesListObj['fileUsedSize']=parseInt(MiniFileMgr.filesListObj['fileUsedSize'])-deletefileSize;
					delete MiniFileMgr.filesListObj[fileurlkey];
					MiniFileMgr.writeFilesList(fileurlkey,JSON.stringify(MiniFileMgr.filesListObj),false);
					callBack !=null && callBack.runWith([0]);
				}
			}
		}

		MiniFileMgr.writeFilesList=function(fileurlkey,filesListStr,isAdd){
			var listFilesPath=MiniFileMgr.fileNativeDir+"/"+MiniFileMgr.fileListName;
			MiniFileMgr.fs.writeFile({filePath:listFilesPath,encoding:'utf8',data:filesListStr,success:function (data){
					},fail:function (data){
			}});
			if(!MiniAdpter.isZiYu &&MiniAdpter.isPosMsgYu){
				wx.postMessage({url:fileurlkey,data:MiniFileMgr.filesListObj[fileurlkey],isLoad:"filenative",isAdd:isAdd});
			}
		}

		MiniFileMgr.getCacheUseSize=function(){
			if(MiniFileMgr.filesListObj && MiniFileMgr.filesListObj['fileUsedSize'])
				return MiniFileMgr.filesListObj['fileUsedSize'];
			return 0;
		}

		MiniFileMgr.existDir=function(dirPath,callBack){
			MiniFileMgr.fs.mkdir({dirPath:dirPath,success:function (data){
					callBack !=null && callBack.runWith([0,{data:JSON.stringify({})}]);
					},fail:function (data){
					if (data.errMsg.indexOf("file already exists")!=-1)
						MiniFileMgr.readSync(MiniFileMgr.fileListName,"utf8",callBack);
					else
					callBack !=null && callBack.runWith([1,data]);
			}});
		}

		MiniFileMgr.readSync=function(filePath,encoding,callBack,readyUrl){
			(encoding===void 0)&& (encoding="ascill");
			(readyUrl===void 0)&& (readyUrl="");
			var fileUrl=MiniFileMgr.getFileNativePath(filePath);
			var filesListStr
			try{
				filesListStr=MiniFileMgr.fs.readFileSync(fileUrl,encoding);
				callBack !=null && callBack.runWith([0,{data:filesListStr}]);
			}
			catch(error){
				callBack !=null && callBack.runWith([1]);
			}
		}

		MiniFileMgr.setNativeFileDir=function(value){
			MiniFileMgr.fileNativeDir=wx.env.USER_DATA_PATH+value;
		}

		MiniFileMgr.filesListObj={};
		MiniFileMgr.fileNativeDir=null
		MiniFileMgr.fileListName="layaairfiles.txt";
		MiniFileMgr.ziyuFileData={};
		MiniFileMgr.loadPath="";
		MiniFileMgr.DESCENDING=2;
		MiniFileMgr.NUMERIC=16;
		__static(MiniFileMgr,
		['fs',function(){return this.fs=wx.getFileSystemManager();},'wxdown',function(){return this.wxdown=wx.downloadFile;}
		]);
		return MiniFileMgr;
	})()


	/**@private **/
	//class laya.wx.mini.MiniImage
	var MiniImage=(function(){
		function MiniImage(){};
		__class(MiniImage,'laya.wx.mini.MiniImage');
		var __proto=MiniImage.prototype;
		/**@private **/
		__proto._loadImage=function(url){
			var thisLoader=this;
			if (MiniAdpter.isZiYu){
				MiniImage.onCreateImage(url,thisLoader,true);
				return;
			};
			var isTransformUrl=false;
			if (!MiniFileMgr.isLocalNativeFile(url)){
				isTransformUrl=true;
				url=URL.formatURL(url);
				}else{
				if (url.indexOf("http://")!=-1 || url.indexOf("https://")!=-1){
					if(MiniFileMgr.loadPath !=""){
						url=url.split(MiniFileMgr.loadPath)[1];
						}else{
						var tempStr=URL.rootPath !="" ? URL.rootPath :URL.basePath;
						if(tempStr !="")
							url=url.split(tempStr)[1];
					}
				}
			}
			if (!MiniFileMgr.getFileInfo(url)){
				if (url.indexOf("http://")!=-1 || url.indexOf("https://")!=-1){
					if(MiniAdpter.isZiYu){
						MiniImage.onCreateImage(url,thisLoader,true);
						}else{
						MiniFileMgr.downOtherFiles(url,new Handler(MiniImage,MiniImage.onDownImgCallBack,[url,thisLoader]),url);
					}
				}
				else
				MiniImage.onCreateImage(url,thisLoader,true);
				}else {
				MiniImage.onCreateImage(url,thisLoader,!isTransformUrl);
			}
		}

		MiniImage.onDownImgCallBack=function(sourceUrl,thisLoader,errorCode,tempFilePath){
			(tempFilePath===void 0)&& (tempFilePath="");
			if (!errorCode)
				MiniImage.onCreateImage(sourceUrl,thisLoader,false,tempFilePath);
			else {
				thisLoader.onError(null);
			}
		}

		MiniImage.onCreateImage=function(sourceUrl,thisLoader,isLocal,tempFilePath){
			(isLocal===void 0)&& (isLocal=false);
			(tempFilePath===void 0)&& (tempFilePath="");
			var fileNativeUrl;
			if(MiniAdpter.autoCacheFile){
				if (!isLocal){
					if(tempFilePath !=""){
						fileNativeUrl=tempFilePath;
						}else{
						var fileObj=MiniFileMgr.getFileInfo(sourceUrl);
						var fileMd5Name=fileObj.md5;
						fileNativeUrl=MiniFileMgr.getFileNativePath(fileMd5Name);
					}
				}else
				fileNativeUrl=sourceUrl;
				}else{
				if(!isLocal)
					fileNativeUrl=tempFilePath;
				else
				fileNativeUrl=sourceUrl;
			}
			if (thisLoader.imgCache==null)
				thisLoader.imgCache={};
			var image;
			function clear (){
				image.onload=null;
				image.onerror=null;
				delete thisLoader.imgCache[sourceUrl]
			};
			var onload=function (){
				clear();
				thisLoader._url=URL.formatURL(thisLoader._url);
				thisLoader.onLoaded(image);
			};
			var onerror=function (){
				clear();
				thisLoader.event("error","Load image failed");
			}
			if (thisLoader._type=="nativeimage"){
				image=new Browser.window.Image();
				image.crossOrigin="";
				image.onload=onload;
				image.onerror=onerror;
				image.src=fileNativeUrl;
				thisLoader.imgCache[sourceUrl]=image;
				}else {
				new HTMLImage.create(fileNativeUrl,{onload:onload,onerror:onerror,onCreate:function (img){
						image=img;
						thisLoader.imgCache[sourceUrl]=img;
				}});
			}
		}

		return MiniImage;
	})()


	/**@private **/
	//class laya.wx.mini.MiniInput
	var MiniInput=(function(){
		function MiniInput(){}
		__class(MiniInput,'laya.wx.mini.MiniInput');
		MiniInput._createInputElement=function(){
			Input['_initInput'](Input['area']=Browser.createElement("textarea"));
			Input['_initInput'](Input['input']=Browser.createElement("input"));
			Input['inputContainer']=Browser.createElement("div");
			Input['inputContainer'].style.position="absolute";
			Input['inputContainer'].style.zIndex=1E5;
			Browser.container.appendChild(Input['inputContainer']);
			Input['inputContainer'].setPos=function (x,y){Input['inputContainer'].style.left=x+'px';Input['inputContainer'].style.top=y+'px';};
			Laya.stage.on("resize",null,MiniInput._onStageResize);
			wx.onWindowResize && wx.onWindowResize(function(res){
				window.dispatchEvent && window.dispatchEvent("resize");
			});
			SoundManager._soundClass=MiniSound;
			SoundManager._musicClass=MiniSound;
			var model=MiniAdpter.systemInfo.model;
			var system=MiniAdpter.systemInfo.system;
			if(model.indexOf("iPhone")!=-1){
				Browser.onIPhone=true;
				Browser.onIOS=true;
				Browser.onIPad=true;
				Browser.onAndriod=false;
			}
			if(system.indexOf("Android")!=-1 || system.indexOf("Adr")!=-1){
				Browser.onAndriod=true;
				Browser.onIPhone=false;
				Browser.onIOS=false;
				Browser.onIPad=false;
			}
		}

		MiniInput._onStageResize=function(){
			var ts=Laya.stage._canvasTransform.identity();
			ts.scale((Browser.width / Render.canvas.width / RunDriver.getPixelRatio()),Browser.height / Render.canvas.height / RunDriver.getPixelRatio());
		}

		MiniInput.wxinputFocus=function(e){
			var _inputTarget=Input['inputElement'].target;
			if (_inputTarget && !_inputTarget.editable){
				return;
			}
			MiniAdpter.window.wx.offKeyboardConfirm();
			MiniAdpter.window.wx.offKeyboardInput();
			MiniAdpter.window.wx.showKeyboard({defaultValue:_inputTarget.text,maxLength:_inputTarget.maxChars,multiple:_inputTarget.multiline,confirmHold:true,confirmType:'done',success:function (res){
					},fail:function (res){
			}});
			MiniAdpter.window.wx.onKeyboardConfirm(function(res){
				var str=res ? res.value :"";
				_inputTarget.text=str;
				_inputTarget.event("input");
				laya.wx.mini.MiniInput.inputEnter();
			})
			MiniAdpter.window.wx.onKeyboardInput(function(res){
				var str=res ? res.value :"";
				if (!_inputTarget.multiline){
					if (str.indexOf("\n")!=-1){
						laya.wx.mini.MiniInput.inputEnter();
						return;
					}
				}
				_inputTarget.text=str;
				_inputTarget.event("input");
			});
		}

		MiniInput.inputEnter=function(){
			Input['inputElement'].target.focus=false;
		}

		MiniInput.wxinputblur=function(){
			MiniInput.hideKeyboard();
		}

		MiniInput.hideKeyboard=function(){
			MiniAdpter.window.wx.offKeyboardConfirm();
			MiniAdpter.window.wx.offKeyboardInput();
			MiniAdpter.window.wx.hideKeyboard({success:function (res){
					console.log('隐藏键盘')
					},fail:function (res){
					console.log("隐藏键盘出错:"+(res ? res.errMsg :""));
			}});
		}

		return MiniInput;
	})()


	/**@private **/
	//class laya.wx.mini.MiniLocalStorage
	var MiniLocalStorage=(function(){
		function MiniLocalStorage(){}
		__class(MiniLocalStorage,'laya.wx.mini.MiniLocalStorage');
		MiniLocalStorage.__init__=function(){
			MiniLocalStorage.items=MiniLocalStorage;
		}

		MiniLocalStorage.setItem=function(key,value){
			wx.setStorageSync(key,value);
		}

		MiniLocalStorage.getItem=function(key){
			return wx.getStorageSync(key);
		}

		MiniLocalStorage.setJSON=function(key,value){
			MiniLocalStorage.setItem(key,value);
		}

		MiniLocalStorage.getJSON=function(key){
			return MiniLocalStorage.getItem(key);
		}

		MiniLocalStorage.removeItem=function(key){
			wx.removeStorageSync(key);
		}

		MiniLocalStorage.clear=function(){
			wx.clearStorageSync();
		}

		MiniLocalStorage.getStorageInfoSync=function(){
			try {
				var res=wx.getStorageInfoSync()
				console.log(res.keys)
				console.log(res.currentSize)
				console.log(res.limitSize)
				return res;
			}catch (e){}
			return null;
		}

		MiniLocalStorage.support=true;
		MiniLocalStorage.items=null
		return MiniLocalStorage;
	})()


	/**全局配置*/
	//class UIConfig
	var UIConfig=(function(){
		function UIConfig(){};
		__class(UIConfig,'UIConfig');
		UIConfig.touchScrollEnable=true;
		UIConfig.mouseWheelEnable=true;
		UIConfig.showButtons=true;
		UIConfig.popupBgColor="#000000";
		UIConfig.popupBgAlpha=0.5;
		UIConfig.closeDialogOnSide=true;
		return UIConfig;
	})()


	/**
	*数据类
	*@author xiaosong
	*@date-2018-01-20
	*/
	//class Utils.ConfigMgr
	var ConfigMgr=(function(){
		function ConfigMgr(){}
		__class(ConfigMgr,'Utils.ConfigMgr');
		ConfigMgr.getSeasonNameByExp=function(exp){
			if(!exp)exp=0;
			var vod;
			if(Browser.onMiniGame){
				vod=ConfigMgr.duanweiCfgByStar [exp];
				}else{
				vod=ConfigData.duanweiCfgByStar [exp];
			}
			if(vod)
				return vod.id;
			return 1051;
		}

		ConfigMgr.getSeasonNameByID=function(exp){
			console.log("---------------------------exp:"+exp);
			var id=ConfigMgr.getSeasonNameByExp(exp);
			console.log("----------------------------duanweiId:"+id);
			var vod;
			if(Browser.onMiniGame){
				vod=Utils.ConfigMgr.segName[id];
				}else{
				vod=ConfigData.segName[id];
			};
			var name;
			if(Browser.onMiniGame)
				name=vod.cn;
			else
			name=vod.us;
			return name;
		}

		ConfigMgr.duanweiCfgByID={};
		ConfigMgr.duanweiCfgByStar={};
		ConfigMgr.segName={};
		return ConfigMgr;
	})()


	/**
	*...
	*@author laya
	*/
	//class Utils.SortOn
	var SortOn=(function(){
		function SortOn(){}
		__class(SortOn,'Utils.SortOn');
		SortOn._sortonNameArray2_=function(array,name,options){
			(options===void 0)&& (options=0);
			var name0=name[0];
			var name1=name[1];
			var type=1;
			if (options==(16 | 2))type=-1;
			return array.sort(function(a,b){
				if (b[name0]==a[name0]){
					return type *(a[name1]-b[name1]);
				}else
				return type *(a[name0]-b[name0]);
			});
		}

		SortOn._sortonNameArray_=function(array,name,options){
			(options===void 0)&& (options=0);
			var name0=name[0];
			var type=1;
			if (options==(16 | 2))type=-1;
			return array.sort(function(a,b){
				if (b[name0]==a[name0]){
					for (var i=1,sz=name.length;i < sz;i++){
						var tmp=name[i];
						if (b[tmp]!=a[tmp])return type *(a[tmp]-b[tmp]);
					}
					return 0;
				}else
				return type *(a[name0]-b[name0]);
			});
		}

		SortOn.sortOn=function(array,name,options){
			(options===void 0)&& (options=0);
			if ((name instanceof Array)){if(name.length==0)return array;if(name.length==2)return SortOn._sortonNameArray2_(array,name,options);if(name.length>2)return SortOn._sortonNameArray_(array,name,options);name=name[0];}
				if (options==16)return array.sort(function(a,b){return a[name]-b[name];});
			if (options==(16 | 2))return array.sort(function(a,b){return b[name]-a[name];});
			return array.sort(function(a,b){return a[name]-b[name];});
		}

		SortOn.CASEINSENSITIVE=1;
		SortOn.DESCENDING=2;
		SortOn.NUMERIC=16;
		SortOn.RETURNINDEXEDARRAY=8;
		SortOn.UNIQUESORT=4;
		return SortOn;
	})()


	/**
	*<code>Node</code> 类是可放在显示列表中的所有对象的基类。该显示列表管理 Laya 运行时中显示的所有对象。使用 Node 类排列显示列表中的显示对象。Node 对象可以有子显示对象。
	*/
	//class laya.display.Node extends laya.events.EventDispatcher
	var Node=(function(_super){
		function Node(){
			this._bits=0;
			this._displayedInStage=false;
			this._parent=null;
			this.conchModel=null;
			this.name="";
			this.destroyed=false;
			Node.__super.call(this);
			this._childs=Node.ARRAY_EMPTY;
			this._$P=Node.PROP_EMPTY;
			this.timer=Laya.timer;
			this.conchModel=Render.isConchNode ? this.createConchModel():null;
		}

		__class(Node,'laya.display.Node',_super);
		var __proto=Node.prototype;
		/**@private */
		__proto._setBit=function(type,value){
			if (type==0x1){
				var preValue=this._getBit(type);
				if (preValue !=value){
					this._updateDisplayedInstage();
				}
			}
			if (value){
				this._bits |=type;
				}else {
				this._bits &=~type;
			}
		}

		/**@private */
		__proto._getBit=function(type){
			return (this._bits & type)!=0;
		}

		/**@private */
		__proto._setUpNoticeChain=function(){
			if (this._getBit(0x1)){
				this._setUpNoticeType(0x1);
			}
		}

		/**@private */
		__proto._setUpNoticeType=function(type){
			var ele=this;
			ele._setBit(type,true);
			ele=ele.parent;
			while (ele){
				if (ele._getBit(type))return;
				ele._setBit(type,true);
				ele=ele.parent;
			}
		}

		/**
		*<p>增加事件侦听器，以使侦听器能够接收事件通知。</p>
		*<p>如果侦听鼠标事件，则会自动设置自己和父亲节点的属性 mouseEnabled 的值为 true(如果父节点mouseEnabled=false，则停止设置父节点mouseEnabled属性)。</p>
		*@param type 事件的类型。
		*@param caller 事件侦听函数的执行域。
		*@param listener 事件侦听函数。
		*@param args （可选）事件侦听函数的回调参数。
		*@return 此 EventDispatcher 对象。
		*/
		__proto.on=function(type,caller,listener,args){
			if (type==="display" || type==="undisplay"){
				if (!this._getBit(0x1)){
					this._setUpNoticeType(0x1);
				}
			}
			return this._createListener(type,caller,listener,args,false);
		}

		/**
		*<p>增加事件侦听器，以使侦听器能够接收事件通知，此侦听事件响应一次后则自动移除侦听。</p>
		*<p>如果侦听鼠标事件，则会自动设置自己和父亲节点的属性 mouseEnabled 的值为 true(如果父节点mouseEnabled=false，则停止设置父节点mouseEnabled属性)。</p>
		*@param type 事件的类型。
		*@param caller 事件侦听函数的执行域。
		*@param listener 事件侦听函数。
		*@param args （可选）事件侦听函数的回调参数。
		*@return 此 EventDispatcher 对象。
		*/
		__proto.once=function(type,caller,listener,args){
			if (type==="display" || type==="undisplay"){
				if (!this._getBit(0x1)){
					this._setUpNoticeType(0x1);
				}
			}
			return this._createListener(type,caller,listener,args,true);
		}

		/**@private */
		__proto.createConchModel=function(){
			return null;
		}

		/**
		*<p>销毁此对象。destroy对象默认会把自己从父节点移除，并且清理自身引用关系，等待js自动垃圾回收机制回收。destroy后不能再使用。</p>
		*<p>destroy时会移除自身的事情监听，自身的timer监听，移除子对象及从父节点移除自己。</p>
		*@param destroyChild （可选）是否同时销毁子节点，若值为true,则销毁子节点，否则不销毁子节点。
		*/
		__proto.destroy=function(destroyChild){
			(destroyChild===void 0)&& (destroyChild=true);
			this.destroyed=true;
			this._parent && this._parent.removeChild(this);
			if (this._childs){
				if (destroyChild)this.destroyChildren();
				else this.removeChildren();
			}
			this._childs=null;
			this._$P=null;
			this.offAll();
			this.timer.clearAll(this);
		}

		/**
		*销毁所有子对象，不销毁自己本身。
		*/
		__proto.destroyChildren=function(){
			if (this._childs){
				for (var i=this._childs.length-1;i >-1;i--){
					this._childs[i].destroy(true);
				}
			}
		}

		/**
		*添加子节点。
		*@param node 节点对象
		*@return 返回添加的节点
		*/
		__proto.addChild=function(node){
			if (!node || this.destroyed || node===this)return node;
			if ((node).zOrder)this._set$P("hasZorder",true);
			if (node._parent===this){
				var index=this.getChildIndex(node);
				if (index!==this._childs.length-1){
					this._childs.splice(index,1);
					this._childs.push(node);
					if (this.conchModel){
						this.conchModel.removeChild(node.conchModel);
						this.conchModel.addChildAt(node.conchModel,this._childs.length-1);
					}
					this._childChanged();
				}
				}else {
				node.parent && node.parent.removeChild(node);
				this._childs===Node.ARRAY_EMPTY && (this._childs=[]);
				this._childs.push(node);
				this.conchModel && this.conchModel.addChildAt(node.conchModel,this._childs.length-1);
				node.parent=this;
				this._childChanged();
			}
			return node;
		}

		/**
		*批量增加子节点
		*@param ...args 无数子节点。
		*/
		__proto.addChildren=function(__args){
			var args=arguments;
			var i=0,n=args.length;
			while (i < n){
				this.addChild(args[i++]);
			}
		}

		/**
		*添加子节点到指定的索引位置。
		*@param node 节点对象。
		*@param index 索引位置。
		*@return 返回添加的节点。
		*/
		__proto.addChildAt=function(node,index){
			if (!node || this.destroyed || node===this)return node;
			if ((node).zOrder)this._set$P("hasZorder",true);
			if (index >=0 && index <=this._childs.length){
				if (node._parent===this){
					var oldIndex=this.getChildIndex(node);
					this._childs.splice(oldIndex,1);
					this._childs.splice(index,0,node);
					if (this.conchModel){
						this.conchModel.removeChild(node.conchModel);
						this.conchModel.addChildAt(node.conchModel,index);
					}
					this._childChanged();
					}else {
					node.parent && node.parent.removeChild(node);
					this._childs===Node.ARRAY_EMPTY && (this._childs=[]);
					this._childs.splice(index,0,node);
					this.conchModel && this.conchModel.addChildAt(node.conchModel,index);
					node.parent=this;
				}
				return node;
				}else {
				throw new Error("appendChildAt:The index is out of bounds");
			}
		}

		/**
		*根据子节点对象，获取子节点的索引位置。
		*@param node 子节点。
		*@return 子节点所在的索引位置。
		*/
		__proto.getChildIndex=function(node){
			return this._childs.indexOf(node);
		}

		/**
		*根据子节点的名字，获取子节点对象。
		*@param name 子节点的名字。
		*@return 节点对象。
		*/
		__proto.getChildByName=function(name){
			var nodes=this._childs;
			if (nodes){
				for (var i=0,n=nodes.length;i < n;i++){
					var node=nodes[i];
					if (node.name===name)return node;
				}
			}
			return null;
		}

		/**@private */
		__proto._get$P=function(key){
			return this._$P[key];
		}

		/**@private */
		__proto._set$P=function(key,value){
			if (!this.destroyed){
				this._$P===Node.PROP_EMPTY && (this._$P={});
				this._$P[key]=value;
			}
			return value;
		}

		/**
		*根据子节点的索引位置，获取子节点对象。
		*@param index 索引位置
		*@return 子节点
		*/
		__proto.getChildAt=function(index){
			return this._childs[index];
		}

		/**
		*设置子节点的索引位置。
		*@param node 子节点。
		*@param index 新的索引。
		*@return 返回子节点本身。
		*/
		__proto.setChildIndex=function(node,index){
			var childs=this._childs;
			if (index < 0 || index >=childs.length){
				throw new Error("setChildIndex:The index is out of bounds.");
			};
			var oldIndex=this.getChildIndex(node);
			if (oldIndex < 0)throw new Error("setChildIndex:node is must child of this object.");
			childs.splice(oldIndex,1);
			childs.splice(index,0,node);
			if (this.conchModel){
				this.conchModel.removeChild(node.conchModel);
				this.conchModel.addChildAt(node.conchModel,index);
			}
			this._childChanged();
			return node;
		}

		/**
		*@private
		*子节点发生改变。
		*@param child 子节点。
		*/
		__proto._childChanged=function(child){}
		/**
		*删除子节点。
		*@param node 子节点
		*@return 被删除的节点
		*/
		__proto.removeChild=function(node){
			if (!this._childs)return node;
			var index=this._childs.indexOf(node);
			return this.removeChildAt(index);
		}

		/**
		*从父容器删除自己，如已经被删除不会抛出异常。
		*@return 当前节点（ Node ）对象。
		*/
		__proto.removeSelf=function(){
			this._parent && this._parent.removeChild(this);
			return this;
		}

		/**
		*根据子节点名字删除对应的子节点对象，如果找不到不会抛出异常。
		*@param name 对象名字。
		*@return 查找到的节点（ Node ）对象。
		*/
		__proto.removeChildByName=function(name){
			var node=this.getChildByName(name);
			node && this.removeChild(node);
			return node;
		}

		/**
		*根据子节点索引位置，删除对应的子节点对象。
		*@param index 节点索引位置。
		*@return 被删除的节点。
		*/
		__proto.removeChildAt=function(index){
			var node=this.getChildAt(index);
			if (node){
				this._childs.splice(index,1);
				this.conchModel && this.conchModel.removeChild(node.conchModel);
				node.parent=null;
			}
			return node;
		}

		/**
		*删除指定索引区间的所有子对象。
		*@param beginIndex 开始索引。
		*@param endIndex 结束索引。
		*@return 当前节点对象。
		*/
		__proto.removeChildren=function(beginIndex,endIndex){
			(beginIndex===void 0)&& (beginIndex=0);
			(endIndex===void 0)&& (endIndex=0x7fffffff);
			if (this._childs && this._childs.length > 0){
				var childs=this._childs;
				if (beginIndex===0 && endIndex >=n){
					var arr=childs;
					this._childs=Node.ARRAY_EMPTY;
					}else {
					arr=childs.splice(beginIndex,endIndex-beginIndex);
				}
				for (var i=0,n=arr.length;i < n;i++){
					arr[i].parent=null;
					this.conchModel && this.conchModel.removeChild(arr[i].conchModel);
				}
			}
			return this;
		}

		/**
		*替换子节点。
		*@internal 将传入的新节点对象替换到已有子节点索引位置处。
		*@param newNode 新节点。
		*@param oldNode 老节点。
		*@return 返回新节点。
		*/
		__proto.replaceChild=function(newNode,oldNode){
			var index=this._childs.indexOf(oldNode);
			if (index >-1){
				this._childs.splice(index,1,newNode);
				if (this.conchModel){
					this.conchModel.removeChild(oldNode.conchModel);
					this.conchModel.addChildAt(newNode.conchModel,index);
				}
				oldNode.parent=null;
				newNode.parent=this;
				return newNode;
			}
			return null;
		}

		/**@private */
		__proto._updateDisplayedInstage=function(){
			var ele;
			ele=this;
			var stage=Laya.stage;
			this._displayedInStage=false;
			while (ele){
				if (ele._getBit(0x1)){
					this._displayedInStage=ele._displayedInStage;
					break ;
				}
				if (ele==stage || ele._displayedInStage){
					this._displayedInStage=true;
					break ;
				}
				ele=ele.parent;
			}
		}

		/**@private */
		__proto._setDisplay=function(value){
			if (this._displayedInStage!==value){
				this._displayedInStage=value;
				if (value)this.event("display");
				else this.event("undisplay");
			}
		}

		/**
		*@private
		*设置指定节点对象是否可见(是否在渲染列表中)。
		*@param node 节点。
		*@param display 是否可见。
		*/
		__proto._displayChild=function(node,display){
			var childs=node._childs;
			if (childs){
				for (var i=0,n=childs.length;i < n;i++){
					var child=childs[i];
					if (!child._getBit(0x1))continue ;
					if (child._childs.length > 0){
						this._displayChild(child,display);
						}else {
						child._setDisplay(display);
					}
				}
			}
			node._setDisplay(display);
		}

		/**
		*当前容器是否包含指定的 <code>Node</code> 节点对象 。
		*@param node 指定的 <code>Node</code> 节点对象 。
		*@return 一个布尔值表示是否包含指定的 <code>Node</code> 节点对象 。
		*/
		__proto.contains=function(node){
			if (node===this)return true;
			while (node){
				if (node.parent===this)return true;
				node=node.parent;
			}
			return false;
		}

		/**
		*定时重复执行某函数。功能同Laya.timer.timerLoop()。
		*@param delay 间隔时间(单位毫秒)。
		*@param caller 执行域(this)。
		*@param method 结束时的回调方法。
		*@param args （可选）回调参数。
		*@param coverBefore （可选）是否覆盖之前的延迟执行，默认为true。
		*@param jumpFrame 时钟是否跳帧。基于时间的循环回调，单位时间间隔内，如能执行多次回调，出于性能考虑，引擎默认只执行一次，设置jumpFrame=true后，则回调会连续执行多次
		*/
		__proto.timerLoop=function(delay,caller,method,args,coverBefore,jumpFrame){
			(coverBefore===void 0)&& (coverBefore=true);
			(jumpFrame===void 0)&& (jumpFrame=false);
			this.timer.loop(delay,caller,method,args,coverBefore,jumpFrame);
		}

		/**
		*定时执行某函数一次。功能同Laya.timer.timerOnce()。
		*@param delay 延迟时间(单位毫秒)。
		*@param caller 执行域(this)。
		*@param method 结束时的回调方法。
		*@param args （可选）回调参数。
		*@param coverBefore （可选）是否覆盖之前的延迟执行，默认为true。
		*/
		__proto.timerOnce=function(delay,caller,method,args,coverBefore){
			(coverBefore===void 0)&& (coverBefore=true);
			this.timer._create(false,false,delay,caller,method,args,coverBefore);
		}

		/**
		*定时重复执行某函数(基于帧率)。功能同Laya.timer.frameLoop()。
		*@param delay 间隔几帧(单位为帧)。
		*@param caller 执行域(this)。
		*@param method 结束时的回调方法。
		*@param args （可选）回调参数。
		*@param coverBefore （可选）是否覆盖之前的延迟执行，默认为true。
		*/
		__proto.frameLoop=function(delay,caller,method,args,coverBefore){
			(coverBefore===void 0)&& (coverBefore=true);
			this.timer._create(true,true,delay,caller,method,args,coverBefore);
		}

		/**
		*定时执行一次某函数(基于帧率)。功能同Laya.timer.frameOnce()。
		*@param delay 延迟几帧(单位为帧)。
		*@param caller 执行域(this)
		*@param method 结束时的回调方法
		*@param args （可选）回调参数
		*@param coverBefore （可选）是否覆盖之前的延迟执行，默认为true
		*/
		__proto.frameOnce=function(delay,caller,method,args,coverBefore){
			(coverBefore===void 0)&& (coverBefore=true);
			this.timer._create(true,false,delay,caller,method,args,coverBefore);
		}

		/**
		*清理定时器。功能同Laya.timer.clearTimer()。
		*@param caller 执行域(this)。
		*@param method 结束时的回调方法。
		*/
		__proto.clearTimer=function(caller,method){
			this.timer.clear(caller,method);
		}

		/**
		*子对象数量。
		*/
		__getset(0,__proto,'numChildren',function(){
			return this._childs.length;
		});

		/**父节点。*/
		__getset(0,__proto,'parent',function(){
			return this._parent;
			},function(value){
			if (this._parent!==value){
				if (value){
					this._parent=value;
					this.event("added");
					if (this._getBit(0x1)){
						this._setUpNoticeChain();
						value.displayedInStage && this._displayChild(this,true);
					}
					value._childChanged(this);
					}else {
					this.event("removed");
					this._parent._childChanged();
					if (this._getBit(0x1))this._displayChild(this,false);
					this._parent=value;
				}
			}
		});

		/**表示是否在显示列表中显示。*/
		__getset(0,__proto,'displayedInStage',function(){
			if (this._getBit(0x1))return this._displayedInStage;
			this._setUpNoticeType(0x1);
			return this._displayedInStage;
		});

		Node.ARRAY_EMPTY=[];
		Node.PROP_EMPTY={};
		Node.NOTICE_DISPLAY=0x1;
		Node.MOUSEENABLE=0x2;
		return Node;
	})(EventDispatcher)


	/**
	*...
	*@author anling
	*/
	//class hall.NotifyCenter extends laya.events.EventDispatcher
	var NotifyCenter=(function(_super){
		function NotifyCenter(){
			this._userData={};
			this.Laya8ScoketStaus=1;
			this.gameData={};
			this.curGameEndCmd=null;
			this.isFirstCheck=false;
			this.___serverTime=0;
			this.___clientTime=0;
			this.fJsonITLObj={};
			this._fJsonITLArr=[];
			this.packetObj={};
			this._packetArr=[];
			this._packTykObj={};
			this.curHeroCount=0;
			this.curSkinCount=0;
			this.fansUnReadMsg={};
			this.isMyFriend={};
			this.guanzhuNum=0;
			this.notifyAchieveSize=0;
			this.notifyTaskSize=0;
			this.isMyFans={};
			this.relationData={};
			this.isGXLFriend={};
			NotifyCenter.__super.call(this);
		}

		__class(NotifyCenter,'hall.NotifyCenter',_super);
		var __proto=NotifyCenter.prototype;
		__proto.init=function(){
			new FriendNotifyCenter();
		}

		/**
		*存储数据
		*@param key 仅支持 String 和 int 类型的key
		*@param value 需要存储的数据
		*/
		__proto.SetData=function(key,value){
			this._userData[key]=value;
			this.upDataDate(key,value);
		}

		/**
		*获取数据
		*@param key 仅支持 String 和 int 类型的key
		*@return 返回存储的数据或者null
		*/
		__proto.Query=function(key){
			if (this._userData.hasOwnProperty(key)){
				return this._userData[key];
			}
			else return null;
		}

		//}
		__proto.clearGameData=function(){
			for (var key in this.gameData){
				this.gameData[key] && MsgTemplate.release(this.gameData[key]);
			}
			this.gameData={};
		}

		__proto.getStringKey=function(keyClass){
			if (!((typeof keyClass=='string'))){
				var arr=keyClass.prototype.__className.split('.');
				return arr[arr.length-1];
				}else{
				return keyClass;
			}
		}

		//-------------------------------------------------------------------------------------
		__proto.upDataDate=function(key,value){
			switch(key){
				case "on_GotRankList":
					this.addRankData(value);
					break ;
				case "on_BasicDataChg":
					this.wxReport(value);
					this.onChkNewUser();
					break ;
				case "on_GameDataChg":
					this.onChkNewUser();
					break ;
				case 'onFriendOnline':
					this.chgFriendDataForLine(value,true);
					hall.NotifyCenter.I.event('onFriendListResult');
					break ;
				case 'onFriendOffline':
					this.chgFriendDataForLine(value,false);
					hall.NotifyCenter.I.event('onFriendListResult');
					break ;
				case 'onFriendJoinRoom':
					this.chgFriendDataForRoom(value,true);
					hall.NotifyCenter.I.event('onFriendListResult');
					break ;
				case 'onFriendLeaveRoom':
					this.chgFriendDataForRoom(value,false);
					hall.NotifyCenter.I.event('onFriendListResult');
					break ;
				case 'onFriendListResult':
					this.setFriendData();
					this.upDataFriend();
					this.setFansMutual();
					hall.NotifyCenter.I.event('onFriendListResult');
					break ;
				case 'onListInvitingResult':
					this.onAddInvite(value);
					break ;
				case 'onFriendJoinTeam':
					this.chgFriendDataForTeam(value,true);
					hall.NotifyCenter.I.event('onFriendListResult');
					break ;
				case 'onFriendLeaveTeam':
					this.chgFriendDataForTeam(value,false);
					hall.NotifyCenter.I.event('onFriendListResult');
					break ;
				case 'onFriendInvited':
				case 'onFriendRejected':
				case 'onFriendBlocked':
				case 'onFriendUnblocked':
				case 'onFriendMoved':
					this.addSetDataForArr(key+"_arr",value);
					hall.NotifyCenter.I.event('onFriendListResult');
					break ;
				case 'onFriendAccepted':
					this.friendDataChg(value,'onFriendAccepted',true);
					this.upDataFriend();
					hall.NotifyCenter.I.event('onFriendListResult');
					break ;
				case 'onFriendAcceptResult':
					this.friendDataChg(value,'onFriendAcceptResult');
					this.upDataFriend();
					hall.NotifyCenter.I.event('onFriendListResult');
					break ;
				case 'onFriendRejectResult':
					this.deleteSysMsgData((value).targetId);
					hall.NotifyCenter.I.event('onFriendListResult');
					break ;
				case 'onFriendDeleteResult':
					this.friendDataChg(value,'onFriendDeleteResult');
					this.upDataFriend();
					hall.NotifyCenter.I.event('onFriendListResult');
					break ;
				case 'onFriendDeleted':
					this.friendDataChg(value,'onFriendDeleted',true);
					hall.NotifyCenter.I.event('onListBeInGroupResult');
					hall.NotifyCenter.I.event('onFriendListResult');
					break ;
				case 'attentioned':
					this.addfansData();
					SnowUtils.setDataInLocalStorage("haveNewFans"+RoleCenter.I.userId,"true");
					hall.NotifyCenter.I.event('onListBeInGroupResult');
					hall.NotifyCenter.I.event('onFriendListResult');
					break ;
				case 'onListBeInGroupResult':
					this.setFansData(value);
					this.upDataFriend();
					hall.NotifyCenter.I.event('onFriendListResult');
					break ;
				case 'onFriendInviteResult':
					this.onFriendInviteResult(value);
					this.upDataFriend();
					hall.NotifyCenter.I.event('onFriendListResult');
					break ;
				case "onGotRelation":
					this.setRelationData();
					hall.NotifyCenter.I.event('onFriendListResult');
					break ;
				case "queryByOpenIdResult":
					this.queryByOpenIdResult();
					hall.NotifyCenter.I.event('onFriendListResult');
					break ;
				case "attentionResult":
					this.userAttentionResult();
					hall.NotifyCenter.I.event('onFriendListResult');
					break ;
				case "on_GotHistoryResult":
					this.onWordChatHistory();
					break ;
				case "onSaid":
					this.onAddWordChatMsg();
					break ;
				case 'onToldToMe':
					this.onAddFriendChatMsg();
					break ;
				case 30002+"":
					this.updateAchieveRedPoint();
					break ;
				case 30001+"":
					this.updataDailyTask();
					break ;
				case 30011+"":
					this.updateAchieveData(value);
					break ;
				case 30008+"":
					this.updateAchieveRedPoint();
					break ;
				case 30009+"":
					this.chkSeasonAward(value);
					break ;
				case 30012+"":
					this.setStatusForSeasonAward(value);
					break ;
				case 30018+"":
					this.onServerTime();
					if (SnowUtils.checkFromDesk()){
						var tb=new statBase();
						tb.event="v2_loginfromdesktop";
						StatManager.I.addCustom(tb);
					}
					break ;
				case "on_GotGameDataResult":
					this.onGetGameData();
					break ;
				case "on_ListBackpacksResult":
					this.onUpdataPacket(1);
					break ;
				case 30016+"":
					this.chkBuyResult(value);
					break ;
				case "on_UseItemResult":
					this.chkUseResult(value);
					break ;
				case 30028+"":
					this.chkUnUseBack(value);
					break ;
				case 30054+"":
					this.onUpHeroSkill(value);
					break ;
				case 30044+'':
					this.onBoostResult(value)
					break ;
				case 30043+"":
					this.onUpdateHuodongType(value);
					break ;
				case 30056+'':
					break ;
				case 30085+'':
					NotifyCenter.isCheckingFlag=false;
					HallApp.getGameData({fjson:1});
					break ;
				case 30096+'':;
					var dt=value.ladderUserData;
					var uDt1=[];
					var uDt2=[];
					var dtObj={};
					dtObj[1]={};
					dtObj[2]={};
					for (var key in dt){
						if(key==RoleCenter.I.userId){
							FreeMatch.myTeamId=dt[key].team;
						}
						dtObj[dt[key].team][key]=dt[key].avtor;
						if(dt[key].team==1)
							uDt1.push(dt[key]);
						else
						uDt2.push(dt[key]);
					}
					SnowUtils.setDataInLocalStorage(RoleCenter.I.userId+"uAvtor"+1,dtObj[1]);
					SnowUtils.setDataInLocalStorage(RoleCenter.I.userId+"uAvtor"+2,dtObj[2]);
					TeamView.isPi=false;
					TeamView.t1Arr=uDt1;
					TeamView.t2Arr=uDt2;
					MyGameEventHandler.I.changeGame();
					SnowUtils.battleMsg.initServer(CrazySnowball.ip,CrazySnowball.port,new Handler(this,MyGameEventHandler.I.createLoginView));
					break ;
				case 30097+'':
					MenuList.I && MenuList.I.onReqEnd();
					var mdt=value;
					var arr=mdt.ladderTeamUids;
					var ld=arr.shift();
					if (ld==RoleCenter.I.userId){
						TeamView.bIsShow=false;
						TeamView.showMe(enumRoomType.ROOMTYPE_LADDER,true,arr);
					}
					if(!ld){
						UIMgr.closeUI(TeamView);
						Laya.timer.callLater(this,function(){
							MenuList.onShowMe();
						})
					}
					break ;
				}
		}

		/**英雄技能升级*/
		__proto.onUpHeroSkill=function(value){
			var data=value;
			var itemArr=this._packetArr;
			var i=0;
			var len=0;
			if (data.upgradeResult){
				for (i=0,len=itemArr.length;i < len;i++){
					if(itemArr[i].staticId==data.itemId){
						itemArr[i].amount+=1;
						break ;
					}
				};
				var itemCfg=ConfigData.itemUpByItemIDLv[data.itemId+"_"+(itemArr[i].amount-1>5?5:itemArr[i].amount-1)];
				if (!itemCfg)return;
				for (i=0,len=itemArr.length;i < len;i++){
					if(itemArr[i].staticId==itemCfg.currencyId[0]){
						itemArr[i].amount-=itemCfg.currencyNum[0];
						break ;
					}
				}
				TipsView.showMe("","技能升级成功！",1,false);
				hall.NotifyCenter.I.event("on_ListBackpacksResult");
				}else{
				TipsView.showMe("","技能升级失败！",1,false);
			}
		}

		/**
		*更新活动奖励任务状态
		*@param value
		*/
		__proto.onUpdateHuodongType=function(value){}
		// }
		__proto.onBoostResult=function(data){
			this.SetData('boost_update',data);
			this.event('boost_update',data);
		}

		/**
		*将数据存储到数组中
		*@param key
		*@param value
		*/
		__proto.addSetDataForArr=function(key,value){this._userData[key]=this._userData[key]|| [];
			(this._userData [key]).push(value);
		}

		/**根据排行榜id存储排行榜数据*/
		__proto.addRankData=function(data){
			this.SetData(data.RankListId,data);
		}

		__proto.onChkNewUser=function(){
			var userData=hall.NotifyCenter.I.Query("on_BasicDataChg");
			if (!userData){
				Log_Test.error("onChkNewUser is error. userData is null");
				return;
			};
			var data=hall.NotifyCenter.I.Query("on_GameDataChg");
			if(!data){
				return;
			};
			var step=SMethod.getPriorityGuide(data.F4);
			SnowTime.nuST&&SnowTime.nuST.removeTime();
			SnowTime.nuST=null;
			RoleCenter.I.nowStep=step;
			if(this.isFirstCheck)return;
			this.isFirstCheck=true;
			var fromType=SnowUtils.getQueryString("ft");
			var teamId=SnowUtils.getQueryString("td");
			if (!teamId)teamId=SnowUtils.getQueryString("rd");
			var info=SnowUtils.getQueryString("ic");
			var old=SnowUtils.getQueryString("old");
			var yq=SnowUtils.getQueryString("yq");
			if (info){
				if(fromType.indexOf("menuShare")!=-1){
					StatManager.I.v2_sharesucavg(parseInt(info));
					StatManager.I.v2_sharesucfriends(parseInt(info));
				}
			}
			if (fromType){
				SnowUtils.reportTlogReason(109,950);
				if(teamId&&step==enumUserEnterGameType.newUser){
					var array=teamId.split("_");
					if(array&&array.length>1){
						StatManager.I.v2_sharenewuser(fromType,array[1]);
					}
					else
					StatManager.I.v2_sharenewuser(fromType,-2);
				}
			}
			if (!SnowUtils.chkIsFB()&&(step==enumUserEnterGameType.newUser)&& !old && teamId==""){
				if (fromType){
					StatManager.I.v2_sharenewuser(fromType,parseInt(info));
					SnowUtils.reportTlogReason(109,951);
				}
				FriendRecentFight.clear();
				SnowTime.nuST=SnowTime.setTime(15000,3,Handler.create(CrazySnowball,CrazySnowball.showError,["new"]),new Handler(this,this.againTeach));
				if (SnowUtils.chkIsQQKJ()){
					Browser.window.reportRegister&&Browser.window.reportRegister();
				};
				var shareType=SnowUtils.getQueryString("sh");
				if(Browser.onMiniGame&&shareType){
					if(CrazySnowball.shareData.scene==1007){
						hall.NotifyCenter.I.event("onRenderPersonPk");
						}else if(CrazySnowball.shareData.scene==1044 || CrazySnowball.shareData.scene==1008){
						if(CrazySnowball.shareData.hasOwnProperty("shareTicket")|| CrazySnowball.shareData.scene==1008){
							hall.NotifyCenter.I.event("onRenderRanklist");
							}else{
							hall.NotifyCenter.I.event("onRenderPersonPk");
						}
					}
					RoleCenter.finalMusic=ConfigData.soundCfg[1];
					SoundManager.playMusic(RoleCenter.finalMusic);
					return;
				}
				this.onStartGuide();
				}else{
				shareType=SnowUtils.getQueryString("sh");
				if(Browser.onMiniGame&&shareType){
					if(CrazySnowball.shareData.scene==1007){
						hall.NotifyCenter.I.event("onRenderPersonPk");
						}else if(CrazySnowball.shareData.scene==1044 || CrazySnowball.shareData.scene==1008){
						if(CrazySnowball.shareData.hasOwnProperty("shareTicket")|| CrazySnowball.shareData.scene==1008){
							hall.NotifyCenter.I.event("onRenderRanklist");
							}else{
							hall.NotifyCenter.I.event("onRenderPersonPk");
						}
					}
					RoleCenter.finalMusic=ConfigData.soundCfg[1];
					SoundManager.playMusic(RoleCenter.finalMusic);
					return;
				}
				if (SnowUtils.chkIsQQKJ()){
					Browser.window.reportLogin&&Browser.window.reportLogin();
				}
				if (info){
					if (fromType.indexOf("zhFriend")!=-1){
						var req=new RequestReturnedPlayer();
						req.callbackUserId=parseInt(info);
						HallApp.notify(req);
					}
				}
				SoundManager.musicMuted=true;
				SoundManager.soundMuted=true;
				RoleCenter.finalMusic=ConfigData.soundCfg[1];
				SoundManager.playMusic(RoleCenter.finalMusic);
				SoundManager.musicMuted=true;
				SoundManager.soundMuted=true;
				SnowTime.nuST=SnowTime.setTime(15000,2,Handler.create(CrazySnowball,CrazySnowball.showError,["menu"]),new Handler(this,this.againShowMenulist));
				MenuList.onShowMe();
			}
		}

		/**开始新手引导**/
		__proto.onStartGuide=function(){
			var userData=hall.NotifyCenter.I.Query("on_BasicDataChg");
			var yq=SnowUtils.getQueryString("yq");
			RoleCenter.I.bIsNewPlayer=true;
			HallApp.updateBasicData(decodeURIComponent(userData.NkName),HallApp.userSex()?1:0);
			GuideMgr.instance.initGuide();
			SnowUtils.checkOutinvite();
			SnowUtils.shareBall("other",{});
			if(yq){
				var request=new RequestInviteNewUser;
				request.whoInviteMe=parseInt(yq);
				HallApp.notify(request);
			}
		}

		/**
		*是否是新手
		*@return
		*/
		__proto.isNewUser=function(){
			var data=hall.NotifyCenter.I.Query("on_GameDataChg");
			if(!data){
				return false;
			};
			var step=SMethod.getPriorityGuide(data.F4);
			if(step==enumUserEnterGameType.newUser){
				return true;
			}
			return false;
		}

		__proto.againTeach=function(){
			Log_Test.info("尝试重新初始化教学关");
		}

		__proto.againShowMenulist=function(){
			MenuList.onShowMe();
			Log_Test.info("尝试重新打开大厅");
		}

		__proto.onServerTime=function(){
			var newUserEnter=hall.NotifyCenter.I.Query(30018+"");
			if (!newUserEnter){
				Log_Test.error("onServerTime is error. newUserEnter is null");
				return;
			}
			this.___serverTime=newUserEnter.serverTime;
			this.___clientTime=Laya.timer.currTimer;
		}

		/**UI逻辑中获取服务器时间
		*<br>未收到服务器时间时，会返回客户端当前时间戳
		*<br>战斗逻辑不可用
		**/
		__proto.getServerTimer=function(){
			return this.___serverTime+(Laya.timer.currTimer-this.___clientTime);
		}

		__proto.getOnLineTime=function(){
			return Laya.timer.currTimer-this.___clientTime;
		}

		/**获取 fJson 中已使用的物品信息*/
		__proto.onGetGameData=function(){
			var data=hall.NotifyCenter.I.Query("on_GotGameDataResult");
			if (!data || !data.results || !data.results.fjson)return;
			var fj=data.results.fjson;
			this._fJsonITLArr=[];
			this.fJsonITLObj={};
			var obj;
			var checkFlag=false;
			for (var key in fj.itemExpireTime){
				if (fj.itemExpireTime[key] !=-1 && fj.itemExpireTime[key] < this.getServerTimer())
					checkFlag=true;
				obj={itemID:key,sTime:fj.itemExpireTime[key]};
				this.fJsonITLObj[key]=obj;
				this._fJsonITLArr.push(obj);
			}
			if (checkFlag){
				if (!NotifyCenter.isCheckingFlag){
					NotifyCenter.isCheckingFlag=true;
					NotifyCenter.checkTimeSpan=Laya.timer.currTimer
					HallApp.notify(new RequestItemsCheck());
				}
				else{
					if (Laya.timer.currTimer-NotifyCenter.checkTimeSpan > NotifyCenter.checkTimeOut){
						NotifyCenter.isCheckingFlag=true;
						NotifyCenter.checkTimeSpan=Laya.timer.currTimer
						HallApp.notify(new RequestItemsCheck());
					}
				}
			}
			this.onUpdataPacket(1);
		}

		/**
		*更新背包数据
		*@param type 1表示服务器数据推送，2表示客户端因其他消息而修改背包数据，同步数据时调用
		*/
		__proto.onUpdataPacket=function(type){
			var backpackData=SnowUtils.deepCopy(hall.NotifyCenter.I.Query("on_ListBackpacksResult"));
			if (!backpackData || !backpackData.backpacks ||!backpackData.backpacks[0])return;
			this._packetArr=(backpackData.backpacks[0] .items);
			this._packTykObj={};
			var packArr=this._packetArr;
			var i=0;
			var itemCfg;
			var packItem;
			var itemDt;
			for (var i=0,j=this._packetArr.length;i < j;i++){
				this.packetObj[this._packetArr[i].staticId]=this._packetArr[i];
			}
			RoleCenter.I.event("roleChangeEvent")
			for (i=0;i < packArr.length;i++){
				packItem=packArr [i];
				itemDt=ConfigData.itemData[packItem.staticId];
				if (itemDt.type==7 || itemDt.type==700){
					if(this._packTykObj[itemDt.originalId]){
						var itemHave=ConfigData.itemData[this._packTykObj[itemDt.originalId].itemId];
						if (itemHave.deadline <=itemDt.deadline)
							continue ;
					}
					itemCfg=new voBackpackCfg();
					itemCfg.itemId=itemDt.defId;
					itemCfg.itemNum=packItem.amount;
					this._packTykObj[itemDt.originalId]=itemCfg;
				}
			}
			MenuList.I&&MenuList.I.chkCanUnLockSkill();
			(type==1)&& this.chkPacketData();
		}

		/**客户端展示的时候自动减少已使用体验卡的数量-更新背包缓存数据*/
		__proto.chkPacketData=function(){
			if (!this.fJsonITLObj)return;
			var obj;
			var nowSz=0;
			for (var i=0,j=this._packetArr.length;i < j;i++){
				var iI=(this._packetArr [i]);
				if (!iI)continue ;
				obj=this.fJsonITLObj[iI.staticId];
				var itemData=ConfigData.itemData[iI.staticId];
				if(itemData.type==1){
					if (!obj || (obj["sTime"] && obj["sTime"] !=-1)){
						iI.amount--;
					}
				}
				if (iI.amount <=0){
					delete this.packetObj[iI.staticId];
					}else{
					(nowSz !=i)&& (this._packetArr[nowSz]=iI);
					nowSz++;
				}
			}
			(nowSz !=this._packetArr.length)&& (this._packetArr.length=nowSz);
		}

		/**检查购买结果-已经手动同步 "服务器发来的原始数据" 、 _packetArr 和 packetObj 三方数据*/
		__proto.chkBuyResult=function(dat){
			var itemSp=ConfigData.shopData[dat.itemID];
			var strVal="解锁"
			if(itemSp.currencyId[1] && itemSp.currencyId[1] !=90001 && itemSp.currencyId[1] !=90002){
				strVal="解锁";
				}else{
				if(NotifyCenter.uByType)
					strVal="兑换";
				else
				strVal="购买";
			}
			if(dat.useReuslt==1){
				var itemLv=NaN;
				var itemArr=this._packetArr;
				var isFind=false;
				for (var i=0,j=itemArr.length;i < j;i++){
					if (itemArr[i].staticId==dat.itemID){
						itemArr[i].amount+=dat.itemNum;
						itemLv=itemArr[i].amount;
						isFind=true;
						break ;
					}
				};
				var spID=0;
				if(itemSp.currencyId[1] && (itemSp.currencyId[1]==90001 || itemSp.currencyId[1]==90002)){
					spID=itemSp.currencyId[1];
					for (var x=0,y=itemArr.length;x < y;x++){
						if (itemArr[x].staticId==spID)
							itemArr[x].amount-=itemSp.currencyNum[1];
					}
				}
				if (!isFind){
					var iteminfo=new ItemInfo();
					iteminfo.staticId=dat.itemID;
					iteminfo.amount=dat.itemNum;
					itemArr.push(iteminfo);
					itemLv=iteminfo.amount;
					this.packetObj[iteminfo.staticId]=iteminfo;
				}
				itemSp=ConfigData.itemUpByItemIDLv[dat.itemID+"_"+itemLv];
				if (itemSp && itemSp.currencyId && itemSp.currencyId.length > 1){
					spID=itemSp.currencyId[1];
					for (var m=0,n=itemArr.length;m < n;m++){
						if (itemArr[m].staticId==spID)
							itemArr[m].amount-=itemSp.currencyNum[1];
					}
				}
				hall.NotifyCenter.I.event("on_ListBackpacksResult");
				var _voItemCfg=ConfigData.itemData[dat.itemID];
				if (itemSp && itemSp.currencyId && itemSp.currencyId.length > 1){
					if (this.packetObj[dat.itemID].amount==1){
						TipsView.showMe("",strVal+"成功！",1,false);
						if(_voItemCfg.type !=100)
							HallApp.useItem(dat.itemID,1);
					}
					else{
						TipsView.showMe("","升级成功！",1,false);
						MenuList.I.chkCanUnLockSkill();
					}
				}
				else{
					if(_voItemCfg && _voItemCfg.type !=1 && !NotifyCenter.isBuyAndUse)
						TipsView.showMe("","购买成功！",1,false);
				}
				if(_voItemCfg && (_voItemCfg.type==1 || _voItemCfg.type==100)){
					this.fJsonITLObj[_voItemCfg.defId]={"itemID":_voItemCfg.defId,"sTime":-1};
					this.curHeroCount=0;
					this.curSkinCount=0;
					for (var key in this.fJsonITLObj){
						if ((ConfigData.itemData [key]).type==1 && this.fJsonITLObj[key].sTime==-1){
							this.curHeroCount++;
						}
						if ((ConfigData.itemData [key]).type==100 && this.fJsonITLObj[key].sTime==-1){
							this.curSkinCount++;
						}
					}
					if (_voItemCfg.type==100 && SnowUtils.chkIsQQ()){
						TipsView.endCloseBack=Handler.create(this,function(){
						},[_voItemCfg]);
					}
				}
				return;
			}
			else if(dat.useReuslt==2){
				TipsView.showMe("",strVal+"失败，碎片不足！",1,false);
			}
			else if(dat.useReuslt==3){
				if (itemSp && itemSp.currencyId && itemSp.currencyId.length > 1)
					TipsView.showMe("",strVal+"失败，金币不足！",1,false);
				else
				TipsView.showMe("","购买失败，金币不足！",1,false);
			}
			else if(dat.useReuslt==4){
				if (itemSp && itemSp.currencyId && itemSp.currencyId.length > 1)
					TipsView.showMe("",strVal+"失败，钻石不足！",1,false);
				else
				TipsView.showMe("","购买失败，钻石不足！",1,false);
			}
			else if(dat.useReuslt==6){
				TipsView.showMe("",SnowUtils.chkIsFB()?"Purchase failed, the number of purchases exceeds the limit!":"购买失败，可购买的数量超过上限！",1,false);
			}
			else if(dat.useReuslt==5){
				TipsView.showMe("","购买失败，未知错误",1,false);
			}
			hall.NotifyCenter.isBuyAndUse=false;
			NotifyCenter.uByType=NaN;
		}

		/**检查使用结果*/
		__proto.chkUseResult=function(dat){
			var voItemCfg=ConfigData.itemData[dat.itemStaticId];
			var itemSp=ConfigData.shopData[dat.itemStaticId];
			var strVal="解锁";
			var tempStr="";
			if(itemSp.currencyId[1] && itemSp.currencyId[1] !=90001 && itemSp.currencyId[1] !=90002){
				strVal="解锁";
				}else{
				if(NotifyCenter.uByType)
					strVal=SnowUtils.chkIsFB()?"Exchange ":"兑换";
				else
				strVal=SnowUtils.chkIsFB()?"Buy ":"购买";
			}
			if (dat.isSuccess){
				if (dat.params[102])return;
				if (voItemCfg.type==4 || voItemCfg.type==1 || voItemCfg.type==100){
					if (hall.NotifyCenter.isBuyAndUse && voItemCfg.type==1){
						tempStr=SnowUtils.chkIsFB()?"and use successfully!":"并使用成功!";
						TipsView.showMe("",strVal+tempStr,1,false);
						if(SnowUtils.chkIsQQ()){
							TipsView.endCloseBack=Handler.create(this,function(){
							},[voItemCfg]);
						}
						hall.NotifyCenter.isBuyAndUse=false;
						NotifyCenter.uByType=NaN;
					}else TipsManager.instance.showText(SnowUtils.chkIsFB()?"Use successfully!":"使用成功!");
					return;
					var tcfg;
					var scfg;
					var tItemid=0;
					if (voItemCfg.type==1){
						for (var a=0,b=this._fJsonITLArr.length;a < b;a++){
							tItemid=this._fJsonITLArr[a]["itemID"];
							tcfg=ConfigData.itemData[tItemid];
							if (tcfg && tcfg.communalId[0]==dat.itemStaticId){
								delete this.fJsonITLObj[tItemid];
								this._fJsonITLArr.splice(a,1);
								scfg=ConfigData.shopData[tItemid];
								TipsManager.instance.showText("已经使用的"+voItemCfg.name+"体验卡转化为"+scfg.sellNum*dat.amount+"金币");
								this.delItemByBackpack(tItemid);
								break ;
							}
						}
					}
				}
				else if (voItemCfg.type==7 || voItemCfg.type==700){
					var strVal=voItemCfg.type==7 ? "英雄" :"皮肤";
					if (dat.params[100]){
						var voItemCfg1=ConfigData.itemData[voItemCfg.originalId];
						TipsView.showMe("","已有"+voItemCfg1.name+strVal+"，"+voItemCfg.name+"体验卡转化为"+dat.params[100]+"金币",1,false);
						}else{
						var obj={"itemID":voItemCfg.originalId,"sTime":this.getServerTimer()+voItemCfg.deadline *60 *60 *1000};this.fJsonITLObj=this.fJsonITLObj|| {};
						if(!this.fJsonITLObj[voItemCfg.originalId]){
							this._fJsonITLArr.push(obj);
							this.fJsonITLObj[voItemCfg.originalId]=obj;
							TipsManager.instance.showText(voItemCfg.name+strVal+"体验卡使用成功");
							}else{
							TipsManager.instance.showText(voItemCfg.name+strVal+"体验卡使用成功,体验时间已增加!");
							this.fJsonITLObj[voItemCfg.originalId].sTime=Math.floor(this.fJsonITLObj[voItemCfg.originalId].sTime)+voItemCfg.deadline *60 *60 *1000;
						}
						hall.NotifyCenter.I.event("on_GotGameDataResult");
					}
					this.delItemByBackpack(dat.itemStaticId,dat.amount);
				}
				}else{
				if(!voItemCfg)TipsManager.instance.showText("使用物品失败.");
				else if(voItemCfg.type !=1)TipsManager.instance.showText("使用 "+voItemCfg.name+" 失败.");
				hall.NotifyCenter.isBuyAndUse=false;
			}
		}

		/**使用物品后，删除背包数据*/
		__proto.delItemByBackpack=function(itemid,itemNum){
			(itemNum===void 0)&& (itemNum=1);
			var itemArr=this._packetArr;
			var isFind=false;
			for (var i=0,j=itemArr.length;i < j;i++){
				if (itemArr[i].staticId==itemid){
					itemArr[i].amount-=itemNum;
					if (itemArr[i].amount <=0){
						(itemArr).splice(i,1);
						delete this.packetObj[itemid];
					}
					break ;
				}
			}
			hall.NotifyCenter.I.event("on_ListBackpacksResult");
		}

		/**卸下物品回调*/
		__proto.chkUnUseBack=function(value){
			var itemID=value.itemID;
			var tempArr=hall.NotifyCenter.I.Query("activeItems");
			var obj={};
			for (var i in tempArr){
				if (tempArr[i] !=itemID)
					obj[i]=tempArr[i];
			}
			TipsManager.instance.showText("卸下成功!");
			hall.NotifyCenter.I.SetData("activeItems",obj);
		}

		/**获取世界聊天历史消息*/
		__proto.onWordChatHistory=function(){
			var dat=this.Query("on_GotHistoryResult");
			if (!dat){
				Log_Test.error("onWordChatHistory is error. 没有获取到聊天历史数据");
				return;
			}
			for (var i=0,j=dat.length;i < j;i++){
				this.addSetDataForArr('all_word_chat_msg',dat[i]);
			};
			var arr=this.Query('all_word_chat_msg');
			arr && arr.sort(paixu=function(a,b){
				return a.time-b.time;
			});
		}

		__proto.onAddWordChatMsg=function(){
			var dat=this.Query("onSaid");
			this.addSetDataForArr('all_word_chat_msg',dat);
		}

		__proto.onAddFriendChatMsg=function(){
			var dat=this.Query('onToldToMe');
			var friendUid=dat.userInfo.userId;
			this.addSetDataForArr(friendUid,dat);
			var hasUnreadMsg=false;
			var voGrGuanXILian=hall.NotifyCenter.I.Query("onGotRelation_arr");
			if (voGrGuanXILian){
				var frArr=voGrGuanXILian.friends;
				var vofr0;
				for (var lk=0,jk=frArr.length;lk < jk;lk++){
					vofr0=frArr [lk];
					if (vofr0.userInfo.userId==friendUid){
						voGrGuanXILian.hasUnreadMsg=true;
						vofr0.hasUnreadMsg=true;
						hasUnreadMsg=true;
						break ;
					}
				}
			}
			if (!hasUnreadMsg){
				var friendData=hall.NotifyCenter.I.Query('onFriendListResult');
				var friends;
				var frdInfo;
				if (friendData){
					var groups=friendData.groups;
					for (var i=0,a=groups.length;i < a;i++){
						friends=(groups [i]).friends;
						for (var j=0,k=friends.length;j < k;j++){
							frdInfo=friends [j];
							if (frdInfo && frdInfo.friendId==friendUid){
								(groups [i]).hasUnreadMsg=true;
								frdInfo.hasUnreadMsg=true;
								hasUnreadMsg=true;
								break ;
							}
						}
						if (hasUnreadMsg)break ;
					}
				}
			}
			if (!hasUnreadMsg){
				var fansGr=hall.NotifyCenter.I.Query('onListBeInGroupResult_arr');
				if (fansGr){
					fansGr.hasUnreadMsg=false;
					for (i=0,j=fansGr.friends.length;i < j;i++){
						frdInfo=fansGr.friends [i];
						if (frdInfo && frdInfo.friendId==friendUid){
							fansGr.hasUnreadMsg=true;
							frdInfo.hasUnreadMsg=true;
							hasUnreadMsg=true;
							this.fansUnReadMsg[friendUid]=true;
							break ;
						}
					}
				}
			}
			this.SetData('gam_unread_msg',hasUnreadMsg);
			hasUnreadMsg && this.event('gam_unread_msg');
			this.event("menu_list_friend");
			return hasUnreadMsg;
		}

		/**打开大厅界面时检查未读取消息*/
		__proto.chkFriendUnreadMsg=function(){
			var friendData=hall.NotifyCenter.I.Query('onFriendListResult');
			var friends;
			var frdInfo;
			var hasUnreadMsg=false;
			if (friendData){
				var groups=friendData.groups;
				for (var i=0,a=groups.length;i < a;i++){
					friends=(groups [i]).friends;
					for (var j=0,k=friends.length;j < k;j++){
						frdInfo=friends [j];
						if (frdInfo && frdInfo.hasUnreadMsg){
							hasUnreadMsg=true;
							break ;
						}
					}
					if (hasUnreadMsg)break ;
				}
			}
			if (!hasUnreadMsg){
				var fansGr=hall.NotifyCenter.I.Query('onListBeInGroupResult_arr');
				if (fansGr){
					for (i=0,j=fansGr.friends.length;i < j;i++){
						frdInfo=fansGr.friends [j];
						if (frdInfo && frdInfo.hasUnreadMsg){
							hasUnreadMsg=true;
							break ;
						}
					}
				}
			}
			this.SetData('gam_unread_msg',hasUnreadMsg);
			hasUnreadMsg && this.event('gam_unread_msg');
			this.event("menu_list_friend");
			return hasUnreadMsg;
		}

		/**
		*各种好友 上下 线数据改变
		*@param data 通信数据，带有好友id
		*@param isOnline true-表示上线，false-表示下线
		*/
		__proto.chgFriendDataForLine=function(data,isOnline){
			var isFinded=false;
			var voFrArr;
			var voFr;
			var voGrGuanXILian=hall.NotifyCenter.I.Query("onGotRelation_arr");
			if (voGrGuanXILian && voGrGuanXILian.friends){
				voFrArr=voGrGuanXILian.friends;
				for (var lk=0,jk=voFrArr.length;lk < jk;lk++){
					voFr=voFrArr [lk];
					if (voFr.userInfo.userId==data.friendId){
						voFr.online=isOnline;
						this.friendDataSort(voGrGuanXILian);
						isFinded=true
						break ;
					}
				}
				}else{
				Log_Test.error("chgFriendDataForLine is error. voGrGuanXILian is null");
			};
			var friendData=hall.NotifyCenter.I.Query('onFriendListResult');
			if (friendData){
				var __isFinded=false;
				var groups=friendData.groups;
				var a=groups ? groups.length :0;
				for (var i=0;i < a;i++){
					voFrArr=(groups [i]).friends;
					for (var j=0,k=voFrArr.length;j < k;j++){
						voFr=voFrArr [j];
						if (voFr.friendId==data.friendId){
							voFr.online=isOnline;
							this.friendDataSort((groups [i]));
							isFinded=true;
							__isFinded=true;
							break ;
						}
					}
					if (__isFinded)break ;
				}
				}else{
				Log_Test.error("chgFriendDataForLine is error. friendData is null");
			};
			var fansGr=hall.NotifyCenter.I.Query('onListBeInGroupResult_arr');
			if (fansGr && fansGr.friends){
				voFrArr=fansGr.friends;
				for (i=0,j=voFrArr.length;i < j;i++){
					voFr=voFrArr [i];
					if (voFr && voFr.userInfo.userId==data.friendId){
						voFr.online=isOnline;
						this.friendDataSort(fansGr);
						isFinded=true
						break ;
					}
				}
				}else{
				Log_Test.error("chgFriendDataForLine is error. fansGr is null");
			};
			var recentArr=FriendRecentFight.getData();
			if (recentArr && recentArr.length){
				var ___finded=false;
				for (i=0,j=recentArr.length;i < j;i++){
					voFr=recentArr [i];
					if (voFr && voFr.userInfo.userId==data.friendId){
						voFr.online=isOnline;
						this.friendDataSort(null,recentArr);
						isFinded=true;
						___finded=true;
						break ;
					}
				}
				___finded && FriendRecentFight.updataData(recentArr);
			}
			if(!isFinded)Log_Test.error("chgFriendDataForLine is not find friendId："+data.friendId);
		}

		/**
		*好友离开或者加入队伍
		*@param data
		*@param isInTeam
		*
		*/
		__proto.chgFriendDataForTeam=function(data,isInTeam){
			var isFinded=false;
			var voFrArr;
			var voFr;
			var voGrGuanXILian=hall.NotifyCenter.I.Query("onGotRelation_arr");
			if (voGrGuanXILian && voGrGuanXILian.friends){
				voFrArr=voGrGuanXILian.friends;
				for (var lk=0,jk=voFrArr.length;lk < jk;lk++){
					voFr=voFrArr [lk];
					if (voFr.userInfo.userId==data.friendId){
						voFr.teamId=isInTeam ? data.teamId :-1;
						isFinded=true;
						break ;
					}
				}
				}else{
				Log_Test.error("chgFriendDataForRoom is error. voGrGuanXILian is null");
			};
			var friendData=hall.NotifyCenter.I.Query('onFriendListResult');
			if (friendData){
				var __isFinded=false;
				var groups=friendData.groups;
				var a=groups ? groups.length :0;
				for (var i=0;i < a;i++){
					voFrArr=(groups [i]).friends;
					for (var j=0,k=voFrArr.length;j < k;j++){
						voFr=voFrArr [j];
						if (voFr.friendId==data.friendId){
							voFr.teamId=isInTeam ? data.teamId :-1;
							isFinded=true;
							__isFinded=true;
							break ;
						}
					}
					if (__isFinded)break ;
				}
				}else{
				Log_Test.error("chgFriendDataForRoom is error. friendData is null");
			};
			var fansGr=hall.NotifyCenter.I.Query('onListBeInGroupResult_arr');
			if (fansGr && fansGr.friends){
				voFrArr=fansGr.friends;
				for (i=0,j=voFrArr.length;i < j;i++){
					voFr=voFrArr [i];
					if (voFr && voFr.userInfo.userId==data.friendId){
						voFr.teamId=isInTeam ? data.teamId :-1;
						isFinded=true;
						break ;
					}
				}
				}else{
				Log_Test.error("chgFriendDataForRoom is error. fansGr is null");
			};
			var recentArr=FriendRecentFight.getData();
			if (recentArr && recentArr.length){
				var ___finded=false;
				for (i=0,j=recentArr.length;i < j;i++){
					voFr=recentArr [i];
					if (voFr && voFr.userInfo.userId==data.friendId){
						voFr.teamId=isInTeam ? data.teamId :-1;
						isFinded=true;
						___finded=true;
						break ;
					}
				}
				___finded && FriendRecentFight.updataData(recentArr);
			}
			if(!isFinded)Log_Test.error("chgFriendDataForRoom is not find friendId："+data.friendId);
		}

		/**
		*好友进出房间数据改变
		*@param dat 消息数据源
		*@param isInRoom true-表示进入房间，false-表示退出房间
		*/
		__proto.chgFriendDataForRoom=function(data,isInRoom){
			var isFinded=false;
			var voFrArr;
			var voFr;
			var voGrGuanXILian=hall.NotifyCenter.I.Query("onGotRelation_arr");
			if (voGrGuanXILian && voGrGuanXILian.friends){
				voFrArr=voGrGuanXILian.friends;
				for (var lk=0,jk=voFrArr.length;lk < jk;lk++){
					voFr=voFrArr [lk];
					if (voFr.userInfo.userId==data.friendId){
						voFr.roomId=isInRoom ? data.roomId :-1;
						voFr.roomType=isInRoom ? data.roomType :enumRoomType.ROOMTYPE_NONE;
						isFinded=true;
						break ;
					}
				}
				}else{
				Log_Test.error("chgFriendDataForRoom is error. voGrGuanXILian is null");
			};
			var friendData=hall.NotifyCenter.I.Query('onFriendListResult');
			if (friendData){
				var __isFinded=false;
				var groups=friendData.groups;
				var a=groups ? groups.length :0;
				for (var i=0;i < a;i++){
					voFrArr=(groups [i]).friends;
					for (var j=0,k=voFrArr.length;j < k;j++){
						voFr=voFrArr [j];
						if (voFr.friendId==data.friendId){
							voFr.roomId=isInRoom ? data.roomId :-1;
							voFr.roomType=isInRoom ? data.roomType :enumRoomType.ROOMTYPE_NONE;
							isFinded=true;
							__isFinded=true;
							break ;
						}
					}
					if (__isFinded)break ;
				}
				}else{
				Log_Test.error("chgFriendDataForRoom is error. friendData is null");
			};
			var fansGr=hall.NotifyCenter.I.Query('onListBeInGroupResult_arr');
			if (fansGr && fansGr.friends){
				voFrArr=fansGr.friends;
				for (i=0,j=voFrArr.length;i < j;i++){
					voFr=voFrArr [i];
					if (voFr && voFr.userInfo.userId==data.friendId){
						voFr.roomId=isInRoom ? data.roomId :-1;
						voFr.roomType=isInRoom ? data.roomType :enumRoomType.ROOMTYPE_NONE;
						isFinded=true;
						break ;
					}
				}
				}else{
				Log_Test.error("chgFriendDataForRoom is error. fansGr is null");
			};
			var recentArr=FriendRecentFight.getData();
			if (recentArr && recentArr.length){
				var ___finded=false;
				for (i=0,j=recentArr.length;i < j;i++){
					voFr=recentArr [i];
					if (voFr && voFr.userInfo.userId==data.friendId){
						voFr.roomId=isInRoom ? data.roomId :-1;
						voFr.roomType=isInRoom ? data.roomType :enumRoomType.ROOMTYPE_NONE;
						isFinded=true;
						___finded=true;
						break ;
					}
				}
				___finded && FriendRecentFight.updataData(recentArr);
			}
			if(!isFinded)Log_Test.error("chgFriendDataForRoom is not find friendId："+data.friendId);
		}

		//设置好友数据，对每个组进行相应排序
		__proto.setFriendData=function(){
			var friendData=hall.NotifyCenter.I.Query('onFriendListResult');
			if (!friendData){
				Log_Test.error("chgFriendDataForLine is error. friendData is null");
				return;
			};
			var groups=friendData.groups;
			var friends;
			var frdInfo;
			var attentionArr;
			for (var i=0,a=groups.length;i < a;i++){
				friends=(groups [i]).friends;
				attentionArr=[];
				for (var j=0,k=friends.length;j < k;j++){
					frdInfo=friends [j];
					if ((groups [i]).id==101)frdInfo.connection=1;
					else if ((groups [i]).id==102){
						frdInfo.connection=2;
					}
					attentionArr.push(frdInfo.userInfo.userId);
				}
				this.friendDataSort(groups [i]);
				attentionArr.length && HallApp.user_attention(attentionArr);
			}
			attentionArr=[];
			friends=FriendRecentFight.getData()|| [];
			for (j=0,k=friends.length;j < k;j++){
				frdInfo=friends [j];
				attentionArr.push(frdInfo.userInfo.userId);
			}
			attentionArr.length && HallApp.user_attention(attentionArr);
		}

		/**根据 userId 在 type 对应的好友关系组中是否有相同的自己 */
		__proto.chkMutualFans=function(userId,type){
			var friends;
			var frdInfo;
			if (type==3){
				var fansGr=hall.NotifyCenter.I.Query('onListBeInGroupResult_arr');
				if (fansGr){
					friends=fansGr.friends;
					for (i=0,j=friends.length;i < j;i++){
						frdInfo=friends[i];
						if (frdInfo.userInfo.userId==userId){
							return true;
						}
					}
				}
				return false;
				}else if(type==2){
				var friendData=hall.NotifyCenter.I.Query('onFriendListResult');
				if (!friendData)return false;
				var groups=friendData.groups;
				var isBreak=false;
				for (var i=0,j=groups.length;i < j;i++){
					var groupId=(groups [i]).id;
					if (groupId==102){
						friends=(groups [i]).friends;
						for (var k=0,l=friends.length;k < l;k++){
							frdInfo=friends[k];
							if (frdInfo.userInfo.userId==userId){
								return true;
							}
						}
					}
				}
				return false;
			}
			return false;
		}

		/**更新 isMyFriend 数据*/
		__proto.upDataFriend=function(){
			var friendData=hall.NotifyCenter.I.Query('onFriendListResult');
			if (!friendData){
				Log_Test.error("upDataFriend is error. friendData is null");
				return;
			}
			this.guanzhuNum=0;
			var groups=friendData.groups;
			var friends;
			var frdInfo;
			for (var i=0,a=groups.length;i < a;i++){
				friends=(groups [i]).friends;
				for (var j=0,k=friends.length;j < k;j++){
					frdInfo=friends [j];
					this.isMyFriend[frdInfo.friendId]=frdInfo;
					if ((groups [i]).id==102){
						frdInfo.isMutualFans=this.chkMutualFans(frdInfo.friendId,3);
						this.guanzhuNum++;
					}
					this.friendDataSort(groups [i]);
				}
			}
		}

		__proto.updataDailyTask=function(){
			Log_Test.debug(1,"每日任务更新");
			var dailyData=this.Query(30001);
			var allData=this.Query(30002);
			if (!dailyData || !allData)return;
			var db=allData.allTask [dailyData.dailyRequests.currentRequestId];
			if (!db){
				db=allData.weekRequests [dailyData.dailyRequests.currentRequestId];
				if(!db){
					Log_Test.error("每日任务更新失败，所有每日任务中没有找到需要更新的任务id:"+dailyData.dailyRequests.currentRequestId);
					return;
				}
			}
			db.status=dailyData.dailyRequests.status;
			db.count=dailyData.dailyRequests.count;
			this.updateAchieveRedPoint();
		}

		/**
		*更新成就数据
		*@param achieve
		*
		*/
		__proto.updateAchieveData=function(achieve){}
		/**
		*刷新成就/任务的红点数据
		*
		*/
		__proto.updateAchieveRedPoint=function(){
			this.SetData("menuListShowInfo",0);
			var allData=this.Query(30002);
			if(allData){
				this.notifyAchieveSize=0;
				this.notifyTaskSize=0;
				var obj=allData.allTask;
				for (var key in obj){
					if(obj[key].status==2){
						this.notifyTaskSize++;
						break ;
					}
				}
				this.SetData("menuListShowInfo",this.notifyAchieveSize+this.notifyTaskSize);
				this.event("menuListShowInfo");
			}
		}

		/**获取自己未处理的好友请求*/
		__proto.onAddInvite=function(data){
			if (data.code !=0)return;
			for (var i=0,j=data.invitings.length;i < j;i++){
				var fii=data.invitings[i];
				var fnri=new FriendNotifyResultInfo();
				fnri.friendId=fii.userInfo.userId;
				fnri.userInfo=fii.userInfo;
				this.addSetDataForArr('onFriendInvited_arr',fnri);
			}
		}

		/**
		*好友数据变化
		*@param dat 添加的好友数据
		*@param type 类型，主动添加/删除好友。被动添加/删除好友
		*@param isEd 是否是主动请求返回的结果
		*/
		__proto.friendDataChg=function(dat,type,isEd){
			(isEd===void 0)&& (isEd=false);
			if (!isEd && dat.code !=0)return;
			var friendid=0;
			var friends;
			var frdInfo;
			if (type=='onFriendDeleted'){
				friendid=(dat).friendId;
				if(this.isMyFans[friendid])this.setFansMutual(friendid);
				return;
			};
			var friendData=hall.NotifyCenter.I.Query('onFriendListResult');
			if (!friendData){
				Log_Test.error("friendDataChg is error. friendData is null");
				return;
			};
			var groups=friendData.groups;
			for (var i=0,j=groups.length;i < j;i++){
				if (type=='onFriendAcceptResult' || type=='onFriendAccepted' || type=='onFriendInviteResult'){
					var groupId=(groups [i]).id;
					if (groupId==dat.groupId){
						friends=(groups [i]).friends;
						frdInfo=dat.friendInfo;
						if (groupId==101)frdInfo.connection=1;
						else if (groupId==102 && type=='onFriendInviteResult'){
							frdInfo.connection=2;
						}
						friends.push(frdInfo);
						if (this.isMyFans[frdInfo.friendId]){
							if(!SnowUtils.isWxApp()){
								if(frdInfo.userInfo&&frdInfo.userInfo.UserNameIP){
									TipsView.myCallback=new Handler(this,this.addQQFriendHandle,[frdInfo.userInfo.UserNameIP])
									TipsView.showMe("","是否添加玩家为QQ好友",TipsView.SHOW_YES_NO,false);
								}
							}
							this.setFansMutual();
						}
						this.deleteSysMsgData(frdInfo.friendId);
						this.friendDataSort((groups [i]));
						return;
					}
				}
				else if (type=='onFriendDeleteResult' || type=='onFriendDeleted'){
					if (type=='onFriendDeleteResult')friendid=dat.targetId;
					else if (type=='onFriendDeleted'){
						friendid=(dat).friendId;
					}
					friends=(groups [i]).friends;
					for (var k=0,l=friends.length;k < l;k++){
						frdInfo=friends[k];
						if (frdInfo.userInfo.userId==friendid){
							friends.splice(k,1);
							delete this.isMyFriend[friendid];
							if (type=='onFriendDeleteResult' && this.isMyFans[friendid])this.setFansMutual();
							break ;
						}
					}
					this.friendDataSort((groups [i]));
				}
			}
		}

		/**
		*添加QQ好友
		*@param userId
		*
		*/
		__proto.addQQFriendHandle=function(openId){
			var dat=new AddQQFriendInfo();
			dat.msg="我是来自全民打雪球的"+RoleCenter.I.nickName+"，做个朋友吧!";
			dat.nickName=RoleCenter.I.nickName;
			dat.openId=openId;
			dat.sourceId="42";
			HallApp.addQQFriend(dat);
		}

		/**删除未处理的好友邀请*/
		__proto.deleteSysMsgData=function(friendid){
			var arr=hall.NotifyCenter.I.Query('onFriendInvited_arr')|| [];
			for (var i=0,j=arr.length;i < j;i++){
				if ((arr [i]).friendId==friendid){
					arr.splice(i,1);
					break ;
				}
			}
		}

		/**整理粉丝数据*/
		__proto.setFansData=function(fansData){
			if (!fansData || fansData.code !=0)return;
			var fansGr=new voGroupInfo();
			fansGr.friends=new Array;
			fansGr.id=fansData.groupId;
			var oneFans;
			var allFansArr=fansData.relations;
			var attentionArr=[];
			for (var i=0,j=allFansArr.length;i < j;i++){
				oneFans=allFansArr [i];
				if (!oneFans.userInfo)continue ;
				var vofr=new voFriendInfo();
				vofr.online=oneFans.online;
				vofr.userInfo=oneFans.userInfo;
				vofr.connection=3;
				vofr.friendId=oneFans.userInfo.userId;
				vofr.isMutualFans=this.chkMutualFans(oneFans.userInfo.userId,2);
				fansGr.friends.push(vofr);
				attentionArr.push(oneFans.userInfo.userId);
				this.isMyFans[vofr.friendId]=vofr;
			}
			this.friendDataSort(fansGr);
			this.SetData('onListBeInGroupResult_arr',fansGr);
			attentionArr.length && HallApp.user_attention(attentionArr);
		}

		__proto.addfansData=function(){
			var fai=hall.NotifyCenter.I.Query('attentioned');
			if (!fai || !fai.userInfo)return;
			var fansGr=hall.NotifyCenter.I.Query('onListBeInGroupResult_arr');
			if (!fansGr){
				fansGr=new voGroupInfo();
				fansGr.friends=new Array;
				fansGr.id=103;
			};
			var attentionArr=[];
			var vofr=new voFriendInfo();
			vofr.connection=3;
			vofr.online=true;
			vofr.friendId=fai.friendId;
			vofr.userInfo=fai.userInfo;
			vofr.isMutualFans=this.chkMutualFans(vofr.userInfo.userId,2);
			fansGr.friends.push(vofr);
			attentionArr.push(vofr.userInfo.userId);
			this.isMyFans[vofr.userInfo.userId]=vofr;
			this.friendDataSort(fansGr);
			this.SetData('onListBeInGroupResult_arr',fansGr);
			attentionArr.length && HallApp.user_attention(attentionArr);
		}

		/**
		*设置fans数据的互粉状态-兼删除fans数据
		*@param deleteFriendId 值不为-1时表示删除fans数据
		*/
		__proto.setFansMutual=function(deleteFriendId){
			(deleteFriendId===void 0)&& (deleteFriendId=-1);
			var fansGr=hall.NotifyCenter.I.Query('onListBeInGroupResult_arr');
			if (fansGr){
				var arr=fansGr.friends;
				var fr;
				for (var i=0,j=arr.length;i < j;i++){
					fr=arr [i];
					if (fr.friendId==deleteFriendId){
						arr.splice(i,1);
						delete this.isMyFans[deleteFriendId];
						break ;
						}else{
						fr.isMutualFans=this.chkMutualFans(fr.userInfo.userId,2);
					}
				}
			}
		}

		/**
		*对组内的好友进行排序
		*@param voGr 好友组
		*@param arr 冗余参数，表示如果没有好友组的数据结构则传入 [voFriendInfo] 结构的数组
		*/
		__proto.friendDataSort=function(voGr,arr){
			var _arr=voGr ? voGr.friends :arr;
			if (!_arr || !_arr.length)return;
			var len=_arr.length;
			for (var i=0;i < len;i++){
				for (var j=i;j < len;j++){
					if ((_arr [i]).online < (_arr [j]).online){
						var tempVoFr=(_arr [i]);
						_arr[i]=_arr[j];
						_arr[j]=tempVoFr;
					}
				}
			}
		}

		/**添加好友，关注成功的回调*/
		__proto.onFriendInviteResult=function(dat){
			if (dat.code !=0)return;
			if (!dat.userInfo){
				TipsManager.instance.showText("关注失败!");
				return;
			}
			if (this.isMyFriend[dat.targetId]){
				TipsManager.instance.showText("已经关注过了");
				return;
			}
			if (dat.groupId==102){
				TipsManager.instance.showText("关注对方成功");
				var resInfo=new AcceptFriendResultInfo();
				resInfo.code=dat.code;
				resInfo.groupId=dat.groupId;
				var frInfo=new FriendInfo();
				frInfo.friendId=dat.targetId;
				frInfo.userInfo=dat.userInfo;
				frInfo.online=dat.online;
				frInfo.creation=Laya.timer.currTimer;
				resInfo.friendInfo=frInfo;
				this.friendDataChg(resInfo,'onFriendInviteResult',true);
				HallApp.user_attention([dat.userInfo.userId]);
			}
		}

		/**获取到关系链数据-根据openID请求玩家基本数据*/
		__proto.setRelationData=function(){
			var dat=hall.NotifyCenter.I.Query("onGotRelation");
			if(SnowUtils.chkIsFB()){
				var info=hall.NotifyCenter.I.Query("on_GotLoginData");
				if (!info)return;
				var arr=[];
				var rui2;
				for (var i=0,j=dat.length;i < j;i++){
					rui2=dat[i];
					if (info.OpenId==rui2.id)continue ;
					if (this.relationData[rui2.id]){
						this.relationData[rui2.id]=rui2;
						continue ;
					}
					arr.push(rui2.id);
					this.relationData[rui2.id]=rui2;
				}
				arr.length && HallApp.queryByOpenId(arr);
				if (arr.length < j){
					hall.NotifyCenter.I.event('onFriendListResult');
				}
				return;
			}
			if (!dat || dat.iRet !=0)return;
			info=hall.NotifyCenter.I.Query("on_GotLoginData");
			if (!info)return;
			arr=[];
			var rui;
			for (i=0,j=dat.list.length;i < j;i++){
				rui=dat.list [i];
				if (info.OpenId==rui.openid)continue ;
				if (this.relationData[rui.openid]){
					this.relationData[rui.openid]=rui;
					continue ;
				}
				arr.push(rui.openid);
				this.relationData[rui.openid]=rui;
			}
			arr.length && HallApp.queryByOpenId(arr);
			if (arr.length < j){
				hall.NotifyCenter.I.event('onFriendListResult');
			}
		}

		/**根据openID返回角色基础信息*/
		__proto.queryByOpenIdResult=function(){
			var info=hall.NotifyCenter.I.Query("on_GotLoginData");
			if (!info)return;
			var dat=hall.NotifyCenter.I.Query("queryByOpenIdResult");
			var vogr=new voGroupInfo();
			var arr=vogr.friends || [];
			var qborui;
			var attentionArr=[];
			for (var i=0,j=dat.results.length;i < j;i++){
				qborui=dat.results [i];
				if (!qborui.userBasicData)continue ;
				if (info.UserId==qborui.userBasicData.userId)continue ;
				var vofr=new voFriendInfo();
				vofr.online=qborui.online;
				vofr.userInfo=qborui.userBasicData;
				vofr.friendId=qborui.userBasicData.userId;
				vofr.connection=5;
				vofr.openId=qborui.openId;
				arr.push(vofr);
				attentionArr.push(qborui.userBasicData.userId);
				this.isGXLFriend[vofr.friendId]=vofr;
				hall.NotifyCenter.I.on('onNotify',this,this.onGotNotify);
				var req=Pool.getItemByClass("RequestCUserData",RequestCUserData);
				req.uid=vofr.friendId;
				req.query=["fjson.lastLogoutTime"];
				HallApp.notify(req);
				Pool.recover("RequestCUserData",req);
			}
			vogr.friends=arr;
			this.friendDataSort(vogr);
			this.SetData("onGotRelation_arr",vogr);
			attentionArr.length && HallApp.user_attention(attentionArr);
		}

		__proto.onGotNotify=function(data){
			if(data.method==30063){
				if(this.isGXLFriend[data.uid] && data.userData["fjson.lastLogoutTime"]){
					this.isGXLFriend[data.uid].lastLogoutTime=data.userData["fjson.lastLogoutTime"];
				}
			}
		}

		/**根据userId返回监控的结果*/
		__proto.userAttentionResult=function(){
			var dat=hall.NotifyCenter.I.Query("attentionResult");
			if (!dat || !dat.results || !dat.results.length)return;
			var arr=dat.results;
			var arui;
			for (var i=0,j=arr.length;i < j;i++){
				arui=arr [i];
				var fnrbi=new FriendNotifyResultBaseInfo();
				fnrbi.friendId=arui.userId;
				this.chgFriendDataForLine(fnrbi,arui.online);
				var frnri=new FriendRoomNotifyResultInfo();
				frnri.friendId=arui.userId;
				frnri.roomId=arui.roomId;
				frnri.roomType=arui.roomType;
				this.chgFriendDataForRoom(frnri,(arui.roomId !=-1));
			}
		}

		/**
		*获取好友排行
		*@param handler 返回好友列表数据，已经排序好
		*<br> handler.runWith([rankFriendArr])
		*@param rankId 排行榜id-标识当前需要返回的是哪个排行的数据
		*/
		__proto.showFriendRank=function(handler,rankId,flag){
			(flag===void 0)&& (flag=true);
			var friendRankArr=[];
			var friendRankObj={};
			var tempArr=[];
			var voGrGuanXILian=hall.NotifyCenter.I.Query("onGotRelation_arr");
			if (voGrGuanXILian){
				for (var i=0 ,j=voGrGuanXILian.friends.length;i < j;i++){
					friendRankArr.push(voGrGuanXILian.friends[i]);
					tempArr.push(voGrGuanXILian.friends[i]);
				}
			};
			var friendData=hall.NotifyCenter.I.Query('onFriendListResult');
			if (friendData && flag){
				for (var k=0,l=friendData.groups.length;k < l;k++){
					if ((friendData.groups [k]).id !=102)continue ;
					var voFrArr=(friendData.groups [k]).friends;
					for (var m=0,n=voFrArr.length;m < n;m++){
						var voFr=voFrArr [m];
						if (this.quchong(tempArr,voFr.friendId)==false){
							friendRankArr.push(voFr);
						}
					}
				}
			};
			var rankFriendArr=[];
			var _myRankData=hall.NotifyCenter.I.Query("on_MyRanksChg");
			var _myBasicData=hall.NotifyCenter.I.Query("on_BasicDataChg");
			if (_myRankData && _myBasicData){
				for(var a=0;a < _myRankData.length;a++){
					if(_myRankData[a].RankListId==rankId && !_myRankData[a].rankType){
						var rkInfo=new RankInfo;
						rkInfo.RankValue=_myRankData[a].Value;
						rkInfo.userId=_myBasicData.userId;
						rkInfo.UserData=_myBasicData;
						rkInfo.Rank=1;
						rankFriendArr.push(rkInfo);
						break ;
					}
				}
			}
			if (friendRankArr.length==0){
				Log_Test.error("获取好友排行时，未找到关系链好友以及关注好友");
				handler.runWith([rankFriendArr,rankId]);
				return;
			};
			var uids=[];
			var agrs=[];
			agrs.push("s"+this.getSType(rankId));
			for (var o=0,p=friendRankArr.length;o < p;o++){
				var voFr1=friendRankArr [o];
				var userDataBack=new UserDataCallBack();
				userDataBack.uid=voFr1.userInfo.userId;
				uids.push(voFr1.userInfo.userId);
				friendRankObj[voFr1.userInfo.userId]=voFr1;
			}
			UserInfoMgr.callBackHd=handler;
			UserInfoMgr._rankFriendArr=rankFriendArr;
			UserInfoMgr.friendRankObj=friendRankObj;
			HallApp.queryCurrentData(uids,agrs);
		}

		__proto.quchong=function(arr,friendId){
			for (var i=0,j=arr.length;i < j;i++){
				if ((arr [i]).friendId==friendId){
					return true;
				}
			}
			return false;
		}

		/**根据排行榜id返回数据库取数据的key*/
		__proto.getSType=function(rankId){
			switch(rankId){
				case 10001:return 1;
				case 10011:return 2;
				case 10021:return 3;
				case 10031:return 4;
				case 10041:return 5;
				case 10051:return 6;
				}
			Log_Test.error("获取赛季数据错误，rankId不匹配；"+rankId);
			return-1;
		}

		/**检查是否有未领取的奖励，在大厅界面红点显示*/
		__proto.chkSeasonAward=function(dat){
			var num=0;
			var sa;
			for (var seasonId in dat.awardList){
				sa=dat.awardList [seasonId];
				if(sa.status==ServerSendAwardResult.REJECT)num++;
			}
			this.SetData("menu_list_notice",num);
			this.event("menu_list_notice");
		}

		/**赛季领奖结果返回*/
		__proto.setStatusForSeasonAward=function(value){
			if (value.result==ServerSendAwardResult.REJECT){
				TipsManager.instance.showText("奖励领取失败");
				return;
			}
			TipsManager.instance.showText("成功领取奖励");
			var dat=this.Query(30009+"");
			if (dat.awardList[value.key]){
				(dat.awardList [value.key]).status=ServerSendAwardResult.ACEEPT;
			}
			this.SetData(30009+"",dat);
			hall.NotifyCenter.I.event('onNotify',dat);
		}

		/**微信 上报 基础上报和登录上报*/
		__proto.wxReport=function(userInfo){
			var _$this=this;
			if (!NotifyCenter.isBoolWX){
				NotifyCenter.isBoolWX=true;
				var wxinfo=new WXBasicReportInfo();
				wxinfo.game_version=CrazySnowball.version;
				wxinfo.role_id=userInfo.userId+"";
				wxinfo.role_name=userInfo.NkName;
				wxinfo.server_id=1;
				wxinfo.user_level=1;
				wxinfo.zone_id=1;
				HallApp.setWXBasicReport(wxinfo);
				var loginInfo=new WXReportLoginInfo();
				HallApp.setWXReportLogin(loginInfo);
				Browser.window.onclose=function (){
					var logoutInfo=new WXReportLogoutInfo();
					logoutInfo.logout_reason=1;
					logoutInfo.online_time=_$this.getOnLineTime();
					HallApp.setWXReportLogout(logoutInfo);
				};
				var opts=new SendDesktopInfo();
				opts.icon=enumShareType.desctopIcon;
				opts.title="全民打雪球";
				opts.url=enumShareType.share_game_url+"&sd=true";
				HallApp.sendDesktop(opts);
				var backinfo=new CloseWindowConfirmDialogInfo();
				backinfo.Switch=true;
				backinfo.title_cn="是否确定退出";
				backinfo.title_eng="tips";
				backinfo.ok_cn="确定";
				backinfo.ok_eng="ok";
				backinfo.cancel_cn="取消";
				backinfo.cancel_eng="cancel";
				HallApp.setCloseWindowConfirmDialogInfo(backinfo);
			}
		}

		__getset(1,NotifyCenter,'I',function(){
			return NotifyCenter._instance=NotifyCenter._instance|| new NotifyCenter();
		},laya.events.EventDispatcher._$SET_I);

		NotifyCenter.applyOnceData=function(){
			if (NotifyCenter.isDataApplied)return;
			Log_Test.info("请求任务相关数据");
			HallApp.notify(new ClientRequestSeasonAward());
			HallApp.listBackpacks();
			NotifyCenter.isDataApplied=true;
		}

		NotifyCenter.ON_ACTIVITY_DATA="activityData";
		NotifyCenter.ON_ACTIVITY_REWARD_DATA="activityRewardData";
		NotifyCenter.ON_NOTICE_UPDATE_REDPOINT="noticeUpdateRedPoint";
		NotifyCenter.ON_ACTIVITY_UPDATE_STATUS="activityUpdateStatus";
		NotifyCenter.ON_DUIHUAN_REWARD_DATA="onDuihuanRewardData";
		NotifyCenter.ON_SHOWDIAOCHA="onShowDiaoCha";
		NotifyCenter.ON_LUNPAN_DATA="onLunPanData";
		NotifyCenter.ON_LUNPANYAOSHAIZI_DATA="onLunPanYaoShaiZiData";
		NotifyCenter.ON_LUNPANBUYCISHU_DATA="onLunPanBuyCiShuData";
		NotifyCenter.ON_LANPANRANDOMREWARD="onLanPanRandomReward";
		NotifyCenter.ON_LANPANZEROSHAREREWARD="onLanPanZeroShareReward";
		NotifyCenter.ON_ACHIEVE_USER_TITLE="onAchieveUserTitle";
		NotifyCenter.ON_GOTROOMTYPELIST="onGotRoomTypeList";
		NotifyCenter.ON_USERERROR="on_usererror";
		NotifyCenter.ON_BASICDATACHG="on_BasicDataChg";
		NotifyCenter.ON_GOTRANKLIST="on_GotRankList";
		NotifyCenter.ON_MYRANKSCHG="on_MyRanksChg";
		NotifyCenter.ON_GAMEDATACHG="on_GameDataChg";
		NotifyCenter.ON_LISTMALLSRESULT="on_ListMallsResult";
		NotifyCenter.ON_LISTGOODSRESULT="on_ListGoodsResult";
		NotifyCenter.ON_PURCHASERESULT="on_PurchaseResult";
		NotifyCenter.ON_LISTBACKPACKSRESULT="on_ListBackpacksResult";
		NotifyCenter.ON_USEITEMRESULT="on_UseItemResult";
		NotifyCenter.ON_RANDOMNAME="on_randomName";
		NotifyCenter.ON_GOTLOGINDATA="on_GotLoginData";
		NotifyCenter.ON_GETGUANGGAOREWARD="onGetGuangGaoReward";
		NotifyCenter.ON_GETCHAPINGREWARD="onGetChaPingReward";
		NotifyCenter.ON_GETSHAREDATA="onGetShareData";
		NotifyCenter.ON_GETRANKDATA="onGetRankData";
		NotifyCenter.ON_GETRANKLISTNUM="onGetRankListNum";
		NotifyCenter.ON_LOGINERROR="onLoginError";
		NotifyCenter.ON_SETSCORECALLBACK="onSetScoreCallBack";
		NotifyCenter.ON_GOTGAMEDATARESULT="on_GotGameDataResult";
		NotifyCenter.ON_GOTREWARDDATA="on_GotRewardData";
		NotifyCenter.ON_GOTHISTORYRESULT="on_GotHistoryResult";
		NotifyCenter.ON_SAID="onSaid";
		NotifyCenter.ON_GOTQRCODE='onGotQRCode';
		NotifyCenter.ON_GOTCLIENTOBJECTRESULT='onGotClientObjectResult';
		NotifyCenter.ON_GOTLASTROOM='onGotLastRoom';
		NotifyCenter.ON_NOTIFY='onNotify';
		NotifyCenter.ON_GUIDEUPDATE="onGuideUpdate";
		NotifyCenter.ON_FRIENDINVITERESULT='onFriendInviteResult';
		NotifyCenter.ON_FRIENDREJECTRESULT='onFriendRejectResult';
		NotifyCenter.ON_FRIENDACCEPTRESULT='onFriendAcceptResult';
		NotifyCenter.ON_FRIENDBLOCKRESULT='onFriendBlockResult';
		NotifyCenter.ON_FRIENDUNBLOCKRESULT='onFriendUnblockResult';
		NotifyCenter.ON_FRIENDDELETERESULT='onFriendDeleteResult';
		NotifyCenter.ON_FRIENDLISTRESULT='onFriendListResult';
		NotifyCenter.ON_FRIENDMOVERESULT='onFriendMoveResult';
		NotifyCenter.ON_FRIENDATTENTIONRESULT='onFriendAttentionResult';
		NotifyCenter.ON_FRIENDINATTENTIONRESULT='onFriendInattentionResult';
		NotifyCenter.ON_FRIENDONLINE='onFriendOnline';
		NotifyCenter.ON_FRIENDOFFLINE='onFriendOffline';
		NotifyCenter.ON_FRIENDJOINROOM='onFriendJoinRoom';
		NotifyCenter.ON_FRIENDLEAVEROOM='onFriendLeaveRoom';
		NotifyCenter.ON_FRIENDJOINTEAM='onFriendJoinTeam';
		NotifyCenter.ON_FRIENDLEAVETEAM='onFriendLeaveTeam';
		NotifyCenter.ON_FRIENDINVITED='onFriendInvited';
		NotifyCenter.ON_LISTINVITINGRESULT='onListInvitingResult';
		NotifyCenter.ON_FRIENDINVITED_ARR='onFriendInvited_arr';
		NotifyCenter.ON_FRIENDREJECTED='onFriendRejected';
		NotifyCenter.ON_FRIENDREJECTED_ARR='onFriendRejected_arr';
		NotifyCenter.ON_FRIENDACCEPTED='onFriendAccepted';
		NotifyCenter.ON_FRIENDACCEPTED_ARR='onFriendAccepted_arr';
		NotifyCenter.ON_FRIENDBLOCKED='onFriendBlocked';
		NotifyCenter.ON_FRIENDBLOCKED_ARR='onFriendBlocked_arr';
		NotifyCenter.ON_FRIENDUNBLOCKED='onFriendUnblocked';
		NotifyCenter.ON_FRIENDUNBLOCKED_ARR='onFriendUnblocked_arr';
		NotifyCenter.ON_FRIENDDELETED='onFriendDeleted';
		NotifyCenter.ON_FRIENDDELETED_ARR='onFriendDeleted_arr';
		NotifyCenter.ON_FRIENDMOVED='onFriendMoved';
		NotifyCenter.ON_FRIENDMOVED_ARR='onFriendMoved_arr';
		NotifyCenter.ON_ATTENTIONED='attentioned';
		NotifyCenter.ON_TOLD='onTold';
		NotifyCenter.ON_TOLD_TO_ME='onToldToMe';
		NotifyCenter.ON_SEARCHBYUIDRESULT='searchByUIdResult';
		NotifyCenter.ON_LISTBEINGROUPRESULT='onListBeInGroupResult';
		NotifyCenter.ON_LISTBEINGROUPRESULT_ARR='onListBeInGroupResult_arr';
		NotifyCenter.ASKUSERTOCHANGEPOSITION="askUserToChangePosition";
		NotifyCenter.USER_ENTER_CUSTOM_ROOM="userEnterCustomRoom";
		NotifyCenter.USER_LEFT_CUSTOM_ROOM="userLeftCustomRoom";
		NotifyCenter.ON_SMSG_BE_KICKED="smsgBeKicked";
		NotifyCenter.ON_SWITCH_POSITION_RESULT="switchPositionResult";
		NotifyCenter.ON_LOAD_CUSTOM_RESOURCE="onLoadCustomResource";
		NotifyCenter.ON_CHG_USER_STATE="onChgUserState";
		NotifyCenter.ON_USER_CHANGE_POSITION="userChangePosition";
		NotifyCenter.ON_TEAM_CREATED="onTeamCreated";
		NotifyCenter.ON_TEAM_JOINED="onTeamJoined";
		NotifyCenter.ON_TEAM_LEFT="onTeamLeft";
		NotifyCenter.ON_TEAM_INVITE="onTeamInvite";
		NotifyCenter.ON_RECEIVE_MESSAGE="onReceiveMessage";
		NotifyCenter.ON_SEND_MESSAGE_RESULT="onSendMessageResult";
		NotifyCenter.ON_GOTCURRENTSEASONDATARESULT='onGotCurrentSeasonDataResult';
		NotifyCenter.SEASONQUERYCURRENTDATARESULT='seasonQueryCurrentDataResult';
		NotifyCenter.GAME_VISIBILITY_CHANGE="gameVisibilityChange";
		NotifyCenter.ON_GOTNETWORKINFO="onGotNetworkInfo";
		NotifyCenter.ON_GOT_RELATION="onGotRelation";
		NotifyCenter.ON_GOT_RELATION_ARR="onGotRelation_arr";
		NotifyCenter.ON_SET_WXLISTSUBSCRIBERESULT="onSetWXListSubscribeResult";
		NotifyCenter.ON_GOT_WXLISTSUBSCRIBE="onGotWXListSubscribe";
		NotifyCenter.ON_SHAREFINISH="onShareFinish";
		NotifyCenter.QUERY_BY_OPENID_RESULT="queryByOpenIdResult";
		NotifyCenter.USER_ATTENTION_RESULT="attentionResult";
		NotifyCenter.MENU_LIST_SHOW_INFO="menuListShowInfo";
		NotifyCenter.MENU_LIST_NOTICE="menu_list_notice";
		NotifyCenter.MENU_LIST_FRIEND="menu_list_friend";
		NotifyCenter.ALLWORDCHATMSG='all_word_chat_msg';
		NotifyCenter.GAMUNREADMSG='gam_unread_msg';
		NotifyCenter.BOOST_UPDATE='boost_update';
		NotifyCenter.CLOSE_LOGIN="close_login";
		NotifyCenter.ACTIVE_ITEMS="activeItems";
		NotifyCenter.CLIENT_DATA="client_data";
		NotifyCenter.ON_MAILGOTATTACHMENT="onMailGotAttachment";
		NotifyCenter.ON_MAILGOTLIST="onMailGotList";
		NotifyCenter.ON_MAILGOTUNREADMAILCOUNT="onMailGotUnreadMailCount";
		NotifyCenter.ON_MAILDELETED="onMailDeleted";
		NotifyCenter.ON_MAILREAD="onRead";
		NotifyCenter.ON_TEAM_READY="onTeamReady";
		NotifyCenter.ONGOTWXSHAREPARAMS="onGotWxShareParams";
		NotifyCenter.ONSENTDESKTOP="onSentDesktop";
		NotifyCenter.ON_GOT_ANNOUNCEMENT_LIST="onGotAnnouncementList";
		NotifyCenter.ON_OTHER_USER_BASICDATA_CHANGE="onOtherUserBasicdataChange";
		NotifyCenter.ON_SHARE_DATA_UPDATE='onShareDataUpdate';
		NotifyCenter.ON_DIAMOND_UPDATE='onDiamondUpdate';
		NotifyCenter.ON_TEAM_A_CHG="onTeamAvtor";
		NotifyCenter.ON_RENDERPERSONPK="onRenderPersonPk";
		NotifyCenter.ON_RENDERRANKLIST="onRenderRanklist";
		NotifyCenter.isCheckingFlag=false;
		NotifyCenter.checkTimeOut=60000;
		NotifyCenter.checkTimeSpan=0;
		NotifyCenter.nrFriend=null;
		NotifyCenter._instance=null
		NotifyCenter.isDataApplied=false;
		NotifyCenter.isBuyAndUse=false;
		NotifyCenter.uByType=0;
		NotifyCenter.isBoolWX=false;
		return NotifyCenter;
	})(EventDispatcher)


	/**
	*...
	*@author
	*/
	//class laya8.client.player.buffer.BDBuffer extends laya8.client.player.buffer.BaseBuffer
	var BDBuffer=(function(_super){
		function BDBuffer(){
			BDBuffer.__super.call(this);
			this.type=0x40;
		}

		__class(BDBuffer,'laya8.client.player.buffer.BDBuffer',_super);
		var __proto=BDBuffer.prototype;
		__proto.add=function(actor,floors){
			_super.prototype.add.call(this,actor,floors);
			(actor).addBDEffect();
		}

		__proto.remove=function(actor){
			_super.prototype.remove.call(this,actor);
			(actor).removeBDEffect();
		}

		__proto.clear=function(actor){
			_super.prototype.clear.call(this,actor);
			(actor).removeBDEffect();
		}

		return BDBuffer;
	})(BaseBuffer)


	/**
	*...
	*@author
	*/
	//class laya8.client.player.buffer.BXBuffer extends laya8.client.player.buffer.BaseBuffer
	var BXBuffer=(function(_super){
		function BXBuffer(){
			BXBuffer.__super.call(this);
			this.type=0x20;
		}

		__class(BXBuffer,'laya8.client.player.buffer.BXBuffer',_super);
		var __proto=BXBuffer.prototype;
		__proto.add=function(actor,floors){
			_super.prototype.add.call(this,actor,floors);
			(actor).iceBox();
		}

		__proto.remove=function(actor){
			_super.prototype.remove.call(this,actor);
			(actor).clearIceBox();
		}

		__proto.clear=function(actor){
			_super.prototype.clear.call(this,actor);
			(actor).clearIceBox();
		}

		return BXBuffer;
	})(BaseBuffer)


	/**
	*...
	*@author
	*/
	//class laya8.client.player.buffer.CMBuffer extends laya8.client.player.buffer.BaseBuffer
	var CMBuffer=(function(_super){
		function CMBuffer(){
			CMBuffer.__super.call(this);
			this.type=0x2;
		}

		__class(CMBuffer,'laya8.client.player.buffer.CMBuffer',_super);
		var __proto=CMBuffer.prototype;
		/*INTERFACE laya8.client.player.buffer.IBuffer */
		__proto.add=function(actor,floors){
			_super.prototype.add.call(this,actor,floors);
			(actor).silent();
		}

		__proto.remove=function(actor){
			_super.prototype.remove.call(this,actor);
			(actor).unSilent();
		}

		return CMBuffer;
	})(BaseBuffer)


	/**
	*...
	*@author
	*/
	//class laya8.client.player.buffer.FakeDieBuffer extends laya8.client.player.buffer.BaseBuffer
	var FakeDieBuffer=(function(_super){
		function FakeDieBuffer(){
			FakeDieBuffer.__super.call(this);
			this.type=0x10;
		}

		__class(FakeDieBuffer,'laya8.client.player.buffer.FakeDieBuffer',_super);
		var __proto=FakeDieBuffer.prototype;
		__proto.add=function(actor,floors){
			_super.prototype.add.call(this,actor,floors);
			(actor).fakeDie();
		}

		__proto.remove=function(actor){
			_super.prototype.remove.call(this,actor);
			(actor).fakeRebir();
		}

		__proto.clear=function(actor){
			_super.prototype.clear.call(this,actor);
			(actor).fakeRebir();
		}

		return FakeDieBuffer;
	})(BaseBuffer)


	/**
	*...
	*@author
	*/
	//class laya8.client.player.buffer.FYBuffer extends laya8.client.player.buffer.BaseBuffer
	var FYBuffer=(function(_super){
		function FYBuffer(){
			this.sprite=null;
			this.listSp={};
			FYBuffer.__super.call(this);
			this.type=0x80;
		}

		__class(FYBuffer,'laya8.client.player.buffer.FYBuffer',_super);
		var __proto=FYBuffer.prototype;
		/*INTERFACE laya8.client.player.buffer.IBuffer */
		__proto.add=function(actor,floors){
			_super.prototype.add.call(this,actor,floors);
			var eff=this.listSp[actor.selfID]=EffectPool.I.createEffectAniByIDELoop("ailubig",actor.x+actor.displayWidth / 2,actor.y+actor.displayHeight / 2,Player.I.roleForeLayer,actor);
			eff.scale(floors / 100,floors / 100);
			(eff).ns=true;
			actor.addFollow(eff,0,0);
		}

		//trace(actor.shortName+"防御举证");
		__proto.remove=function(actor){
			_super.prototype.remove.call(this,actor);
			var sprite=this.listSp [actor.selfID];
			if (sprite){
				actor.removeFollow(sprite);
				sprite.reset();
			}
		}

		//trace(actor.shortName+"举证小时");
		__proto.clear=function(actor){
			_super.prototype.clear.call(this,actor);
			var sprite=this.listSp [actor.selfID];
			if (sprite){
				actor.removeFollow(sprite);
				sprite.reset();
			}
		}

		//trace(actor.shortName+"clear");
		__proto.createSP=function(){
			var result=Pool.getItem("FYBuffer");
			return result||new Sprite();
		}

		__proto.recover=function(sp){
			sp.removeSelf();
			sp.graphics.clear();
			Pool.recover("FYBuffer",sp);
		}

		return FYBuffer;
	})(BaseBuffer)


	/**
	*...
	*@author
	*/
	//class laya8.client.player.buffer.HBDBuffer extends laya8.client.player.buffer.BaseBuffer
	var HBDBuffer=(function(_super){
		function HBDBuffer(){
			HBDBuffer.__super.call(this);
			this.type=0x400;
		}

		__class(HBDBuffer,'laya8.client.player.buffer.HBDBuffer',_super);
		var __proto=HBDBuffer.prototype;
		__proto.add=function(actor,floors){
			_super.prototype.add.call(this,actor,floors);
			(actor).beginHuzhao();
		}

		__proto.remove=function(actor){
			_super.prototype.remove.call(this,actor);
			(actor).clearHuzhao();
		}

		__proto.clear=function(actor){
			_super.prototype.clear.call(this,actor);
			(actor).clearHuzhao();
		}

		return HBDBuffer;
	})(BaseBuffer)


	/**
	*...
	*@author
	*/
	//class laya8.client.player.buffer.JSBuffer extends laya8.client.player.buffer.BaseBuffer
	var JSBuffer=(function(_super){
		function JSBuffer(){
			JSBuffer.__super.call(this);
			this.type=0x8;
		}

		__class(JSBuffer,'laya8.client.player.buffer.JSBuffer',_super);
		var __proto=JSBuffer.prototype;
		/*INTERFACE laya8.client.player.buffer.IBuffer */
		__proto.add=function(actor,floors){
			_super.prototype.add.call(this,actor,floors);
			(actor).addBuff(12001);
		}

		__proto.remove=function(actor){
			_super.prototype.remove.call(this,actor);
			(actor).removeBuff(12001);
		}

		return JSBuffer;
	})(BaseBuffer)


	/**
	*...
	*@author
	*/
	//class laya8.client.player.buffer.QYBuffer extends laya8.client.player.buffer.BaseBuffer
	var QYBuffer=(function(_super){
		function QYBuffer(){
			QYBuffer.__super.call(this);
			this.type=0x100;
		}

		__class(QYBuffer,'laya8.client.player.buffer.QYBuffer',_super);
		var __proto=QYBuffer.prototype;
		/*INTERFACE laya8.client.player.buffer.IBuffer */
		__proto.add=function(actor,floors){
			_super.prototype.add.call(this,actor,floors);
			(actor).qianxing(true);
		}

		__proto.remove=function(actor){
			_super.prototype.remove.call(this,actor);
			(actor).qianxing(false);
		}

		__proto.clear=function(actor){
			_super.prototype.clear.call(this,actor);
			(actor).canQX=false;
		}

		return QYBuffer;
	})(BaseBuffer)


	/**
	*...
	*@author
	*/
	//class laya8.client.player.buffer.WZBuffer extends laya8.client.player.buffer.BaseBuffer
	var WZBuffer=(function(_super){
		function WZBuffer(){
			WZBuffer.__super.call(this);
			this.type=0x200;
		}

		__class(WZBuffer,'laya8.client.player.buffer.WZBuffer',_super);
		var __proto=WZBuffer.prototype;
		/*INTERFACE laya8.client.player.buffer.IBuffer */
		__proto.add=function(actor,floors){
			_super.prototype.add.call(this,actor,floors);
			BufferManager.removeBuffer(actor,0x800);
			(actor).turnSnows(WZBuffer.skin);
		}

		__proto.remove=function(actor){
			_super.prototype.remove.call(this,actor);
			(actor).reSnows();
		}

		__proto.clear=function(actor){
			_super.prototype.clear.call(this,actor);
			(actor).reSnows();
		}

		WZBuffer.skin="res/obj/snows.png";
		return WZBuffer;
	})(BaseBuffer)


	/**
	*...
	*@author
	*/
	//class laya8.client.player.buffer.WZTWOBuffer extends laya8.client.player.buffer.BaseBuffer
	var WZTWOBuffer=(function(_super){
		function WZTWOBuffer(){
			WZTWOBuffer.__super.call(this);
			this.type=0x800;
		}

		__class(WZTWOBuffer,'laya8.client.player.buffer.WZTWOBuffer',_super);
		var __proto=WZTWOBuffer.prototype;
		/*INTERFACE laya8.client.player.buffer.IBuffer */
		__proto.add=function(actor,floors){
			_super.prototype.add.call(this,actor,floors);
			BufferManager.removeBuffer(actor,0x200);
			WZTWOBuffer.skin=URL.formatURL(WZTWOBuffer.skin);
			console.log("----------------skin:"+WZTWOBuffer.skin);
			(actor).turnSnows(WZTWOBuffer.skin);
		}

		__proto.remove=function(actor){
			_super.prototype.remove.call(this,actor);
			(actor).reSnows();
		}

		__proto.clear=function(actor){
			_super.prototype.clear.call(this,actor);
			(actor).reSnows();
		}

		WZTWOBuffer.skin="res/skillIcon/s308.png";
		return WZTWOBuffer;
	})(BaseBuffer)


	/**
	*...
	*@author
	*/
	//class laya8.client.player.buffer.XYBuffer extends laya8.client.player.buffer.BaseBuffer
	var XYBuffer=(function(_super){
		function XYBuffer(){
			XYBuffer.__super.call(this);
			this.type=0x1;
		}

		__class(XYBuffer,'laya8.client.player.buffer.XYBuffer',_super);
		var __proto=XYBuffer.prototype;
		/*INTERFACE laya8.client.player.buffer.IBuffer */
		__proto.add=function(actor,floors){
			_super.prototype.add.call(this,actor,floors);
			actor.addYunEff(-1);
		}

		__proto.remove=function(actor){
			_super.prototype.remove.call(this,actor);
			actor.removeYunEff();
		}

		__proto.clear=function(actor){
			_super.prototype.clear.call(this,actor);
			actor.removeYunEff();
		}

		return XYBuffer;
	})(BaseBuffer)


	/**
	*...
	*@author dongketao
	*/
	//class laya8.client.player.net.GameSocket extends laya.events.EventDispatcher
	var GameSocket=(function(_super){
		function GameSocket(){
			this.ssl=false;
			this.autoFlush=true;
			this._socket=null;
			this._sendHeartBeatTm=0;
			this.heartMsg=null;
			this.eCode=0;
			this.chongLianMaxNum=5;
			this._sendData=false;
			GameSocket.__super.call(this);
		}

		__class(GameSocket,'laya8.client.player.net.GameSocket',_super);
		var __proto=GameSocket.prototype;
		Laya.imps(__proto,{"laya8.client.player.IActive":true})
		/**
		*当前是否是链接状态
		*@return
		*
		*/
		__proto.connected=function(){
			return this._socket && this._socket.connected;
		}

		/**
		*结束重连
		*
		*/
		__proto.onEnd=function(){
			this.close();
			this.removeChongLian();
		}

		/**
		*链接服务器
		*@param ip
		*@param port
		*
		*/
		__proto.connect=function(ip,port,isSSL){
			(ip===void 0)&& (ip="10.10.20.4");
			(port===void 0)&& (port=8011);
			(isSSL===void 0)&& (isSSL=false);
			this.ssl=isSSL;
			if(!this._socket){
				console.log("GameSocket :: try connect new+"+"ip："+ip+"port:"+port);
				this._socket=new Socket(ip,this.ssl?0:port,Byte);
				if (this.ssl){
					this._socket.connectByUrl('wss://'+ip+':'+port);
				}
				this._socket.on("open",this,this.onConnect);
				this._socket.on("message",this,this.onMessage);
				this._socket.on("error",this,this.onErr);
				this._socket.on("close",this,this.onClose);
			}
			else{
				console.log("GameSocket :: try connect old +"+"ip："+ip+"port:"+port);
				this._socket.close();
				if (this.ssl){
					this._socket.connectByUrl('wss://'+ip+':'+port);
				}
				else{
					this._socket.connect(ip,port);
				}
				this._socket.on("close",this,this.onClose);
			}
		}

		/**
		*连接成功的回调函数
		*/
		__proto.onConnect=function(){
			console.log("GameSocket :: socket onConnect。");
			GameSocket.closeByWhere=0;
			this.sendHeartBeat();
			Laya.timer.loop(1000,this,this.update);
			this.removeChongLian();
			GameSocket.chongLianNum=0;
			this.event("serverSucess");
			Player.I.onMe(this);
		}

		/**
		*客户端接SMsg
		*获取消息
		*/
		__proto.onMessage=function(){
			if (!this._socket || !this._socket.input)return;
			var input;
			var pos=this._socket.input.pos;
			while (pos < this._socket.input.length){
				input=this._socket.input;
				var t=MsgTemplate.clientRead(input);
				if (!t){
					HallApp.showErrorMsgBox("","客户端已更新 请刷新重试");
				};
				var si=this._socket && input;
				t && si && MsgManager.I.addStdMsg(t);
				if (si){
					pos=input.pos;
				}
				else{
					return;
				}
			}
		}

		__proto.onErr=function(e){
			console.log("GameSocket :: socket onErr！");
			this.event("serverErr");
			if (GameSocket.closeByWhere==0){
				this.eCode=e.code;
				this.showNetErrMsg();
				this.removeChongLian();
				Laya.timer.loop(5000,this,this.chonglian);
			}
		}

		__proto.onClose=function(e){
			console.log("GameSocket :: socket onClose");
			if(!this._socket)return;
			this.removeChongLian();
			Laya.timer.clear(this,this.sendHeartBeat);
			Laya.timer.clear(this,this.update);
			this.event("serverClose");
			if (GameSocket.closeByWhere==0){
				this.eCode=e.code;
				if (this.eCode==1000){
					this.showGoBack();
				}
				else{
					this.showNetErrMsg();
					Laya.timer.loop(5000,this,this.chonglian);
				}
			}
		}

		/**
		*关闭连接函数
		*/
		__proto.close=function(){
			if (!this._socket)return;
			console.log("GameSocket :: close Socket");
			this._socket.off("close",this,this.onClose);
			Laya.timer.clear(this,this.sendHeartBeat);
			this.removeChongLian();
			GameSocket.chongLianNum=0;
			Laya.timer.clear(this,this.update);
			this._socket.close();
		}

		__proto.sendHeartBeat=function(){
			if (!this._socket&&SnowUtils.battleMsg==RealServer.INSTANCE)return;this.heartMsg=this.heartMsg|| (MsgTemplate.createWithClass(CMsgHeartBeatRes));
			this._sendHeartBeatTm=Laya.timer.currTimer;
			this.heartMsg.timeClinet=Browser.now();
			SnowUtils.battleMsg.hearBeat(this.heartMsg);
			this.heartMsg.ref=999999;
		}

		/**清楚重连计时，连接成功和退出战斗*/
		__proto.removeChongLian=function(){
			Laya.timer.clear(this,this.chonglian);
			LoadUI.instance.onLoad(false);
		}

		__proto.showGoBack=function(){
			TipsView.myCallback=Handler.create(this,function(){
				MsgManager.I.backHome();
				LoadUI.instance.dispose();
				FreeMatch.onHide();
			});
			this.removeChongLian();
			TipsView.showMe("",SnowUtils.chkIsFB()?"The current network is abnormal, please click to return.":"当前网络异常，点击返回",1,true,false);
			Laya.timer.clear(this,this.update);
		}

		__proto.chonglian=function(){
			GameSocket.delayNetwork=520;
			if(!this._socket || GameSocket.roomInfo.type==enumRoomType.ROOMTYPE_NONE){
				Laya.timer.clear(this,this.chonglian);
				return;
			}
			if (LoadUI.isquit){
				this.removeChongLian();
				return;
			}
			GamingView.checkStop();
			if (NotifyCenter.I.Laya8ScoketStaus !=1){
				GameSocket.chongLianNum=0;
				return;
			}
			GameSocket.chongLianNum++;
			if (GameSocket.chongLianNum > this.chongLianMaxNum){
				this.showGoBack();
			}
			else{
				MyGameEventHandler.I.againStartGame();
				LoadUI.instance.onLoad(true,"("+GameSocket.chongLianNum+"/"+this.chongLianMaxNum+")Connecting..");
			}
		}

		__proto.update=function(tm){
			(tm===void 0)&& (tm=0);
			if (!this._socket || this._sendHeartBeatTm==0)return;
			if ((Laya.timer.currTimer-this._sendHeartBeatTm)> 10000){
				this.removeChongLian();
				Laya.timer.loop(5000,this,this.chonglian);
				this.chonglian();
				return;
			}
			if ((Laya.timer.currTimer-this._sendHeartBeatTm)> 5000){
				this.eCode=1;
				this.showNetErrMsg();
			}
			else{
				if (this.eCode !=-9527){
					LoadUI.instance.onLoad(false);
					this.eCode=-9527;
				}
			}
		}

		/**判断是否显示 网络异常 提示框*/
		__proto.showNetErrMsg=function(){
			if(NotifyCenter.I.Laya8ScoketStaus==1)
				LoadUI.instance.onLoad(true,SnowUtils.chkIsFB()?"Network Anomaly. Please wait..":"当前网络异常，请稍后重试！");
		}

		__proto.send=function(msg){
			if (!this._socket || !this._socket.output || !this._socket.connected)return;
			this._socket.output.writeArrayBuffer(msg.buffer,0,msg.length);
			this._sendData=true;
			this.autoFlush && this._socket.flush();
		}

		__proto.flush=function(){
			if (!this._socket || !this._socket.output || !this._socket.connected)return;
			if (this._sendData){
				this._sendData=false;
				this._socket.flush();
			}
		}

		/**
		*建立socket
		*
		*/
		__proto.initServer=function(ip,port,callback){
			laya8.client.player.net.GameSocket.I.connect(ip,port);
			laya8.client.player.net.GameSocket.I.once("serverSucess",this,this.open,[callback]);
		}

		__proto.open=function(callback){
			callback.run();
		}

		__getset(1,GameSocket,'I',function(){
			return GameSocket._i=GameSocket._i|| new GameSocket();
		},laya.events.EventDispatcher._$SET_I);

		GameSocket.sendClientMsg=function(_data){
			GameSocket._bufftmp.pos=0;
			_data.clientWrite(GameSocket._bufftmp);
			if (GameSocket._bufftmp.pos > 0){
				GameSocket._bufftmp.length=GameSocket._bufftmp.pos;
				GameSocket.I.send(GameSocket._bufftmp);
			}
		}

		GameSocket.ON_SEVER_MSG="OnSeverMsg";
		GameSocket.SERVER_SUCESS="serverSucess";
		GameSocket.SERVER_ERR="serverErr";
		GameSocket.SERVER_CLOSE="serverClose";
		GameSocket.REMOVE_GAMING="removeGaming";
		GameSocket.INIT_GAMETIME="initGameTime";
		GameSocket.PLAYER_RESTART="playerRestart";
		GameSocket.UPDATE_RANK="updateRank";
		GameSocket.UPDATE_MYRANK="updateMyRank";
		GameSocket.UPDATE_ENDLESSRANK="updateEndlessRank";
		GameSocket.UPDATA_LEVEL="updateLevel";
		GameSocket.UPDATA_CURUSERBULLETNUM="updateCurUserBulletNum";
		GameSocket.UPDATA_MINMAP="updateMinMap";
		GameSocket.closeByWhere=0;
		GameSocket.delayNetwork=0;
		GameSocket.isForcein=0;
		GameSocket.roomInfo=null
		GameSocket.voExt=null
		GameSocket.isAgainConnect=false;
		GameSocket._i=null
		GameSocket.chongLianNum=0;
		__static(GameSocket,
		['_bufftmp',function(){return this._bufftmp=new Byte();}
		]);
		return GameSocket;
	})(EventDispatcher)


	/**
	*...播放器
	*@author lisa
	*/
	//class laya8.client.player.Player extends laya.events.EventDispatcher
	var Player=(function(_super){
		function Player(){
			this.snowGroupLayer=null;
			this.snowLayer=null;
			this.foodBulletLayer=null;
			this.teachLayer=null;
			this.snowFlyLayer=null;
			this.roleBackLayer=null;
			this.roleForeLayer=null;
			this.userBaseInfoObjs={};
			this.curScene=null;
			this.mapWidth=0;
			this.mapHeight=0;
			this.mapTopBorder=0;
			this.mapDownBorder=0;
			this.mapLeftBorder=0;
			this.mapRightBorder=0;
			this._viewportRect=null;
			this._frameTime=0;
			this._filterUtil=null;
			this.tildMap=null;
			this.delNetObjs={};
			this.beginTime=0;
			this.beginFrame=0;
			this._updates=[];
			this._autoFind=[];
			this._ctrlObjPreX=0;
			this._ctrlObjPreY=0;
			this.curentCenterObj=null;
			this._preFameTm=0;
			this.pathFly=null;
			this._trembleSence=false;
			this._trembleSenceNum=0;
			this._trembleNumMax=0;
			this._trembleNumMin=0;
			this._mapScaleValues=[1.4];
			this.expandScreenNum=50;
			this.roleAngle=NaN;
			this.curIndex=0;
			this.speeds=[0.001,0.002,0.006];
			this._activeType=3;
			this.ACTIVETYPE_START=1;
			this.ACTIVETYPE_END=2;
			this.ACTIVETYPE_INROOM=3;
			this._keyDown=false;
			Player.__super.call(this);
			this.helpTips=new HelpTips();
			this.netObjects=new Object();
			this.roleObjectsBySelfId=new Object();
			this.roleTalkObjs=new Object();
			this.posidObj=new Object;
			this._curMapScale=1.4;
			Player.mapLayer=new Sprite();
			Player.mapLayer.mouseEnabled=false;
			this.preNewObject();
		}

		__class(Player,'laya8.client.player.Player',_super);
		var __proto=Player.prototype;
		//public static var curRocket:TreasureboxObject;
		__proto.preNewObject=function(){
			var poolDic=Pool._poolDic;
			var renderCtxs=poolDic["RenderContext"]||[];
			for (var i=0;i < 50;i++){
				renderCtxs.push(new RenderContext(0,0,HTMLCanvas.create("AUTO")));
			}
		}

		__proto.init=function(){
			if (!this._viewportRect){
				this._viewportRect=new Rectangle(0,0,Laya.stage.width,Laya.stage.height);
			}
			else{
				this._viewportRect.setTo(0,0,Laya.stage.width,Laya.stage.height);
			}
			this._filterUtil=this._filterUtil|| new FilterUtil();
			this._filterUtil.initTurnGray();
			Laya.stage.on("resize",this,this.onResize);
			this.onResize(null);
		}

		__proto.willStart=function(){
			this._activeType=0;
		}

		__proto.onResize=function(e){
			this._viewportRect.width=Laya.stage.width;
			this._viewportRect.height=Laya.stage.height;
		}

		/**预加载已知的皮肤-加载队列中的最前方*/
		__proto.loadAvatar=function(avatarArr){
			if(enumRoomType.nowType==100){
			}
			Log_Test.info(JSON.stringify(avatarArr));
			var sId=0;
			var arr=[];
			for (var i=0,j=avatarArr.length;i < j;i++){
				sId=avatarArr[i];
				if (sId <=1)continue ;
				arr.push({url:enumSourceViewType.getRoleUrl(sId+1000),type:"atlas"});
			}
			SnowLoad.I.load(arr,null,null,null,0);
		}

		/**
		*初始化地图数据
		*/
		__proto.loadMap=function(sourceID,force){
			Player.isMapInit=false;
			Log_Test.info("地图sourceID ： "+sourceID)
			var arr=ConfigData.getMapUrl(sourceID);
			SnowLoad.I.load(arr,Handler.create(this,this.onMapLoaded,[sourceID,force]));
		}

		__proto.onMapLoaded=function(sourceID,force,type){
			if (!type){
				MenuList.onShowMe();
				Loading.I.onEnd();
				LoadUI.instance.onShow();
				return;
			}
			StatManager.I.addTeach(StatManager.I.getStatData(StatID.s2_4_1[0]));
			var key="sceneBj:"+sourceID;
			AssetsConsts.IMG_SNOW=ConfigData.getMapSnowUrl(sourceID);
			AssetsConsts.IMG_SNOWGROUP=ConfigData.getMapSnowGroupUrl(sourceID);
			key="GameScene:"+sourceID;
			var scenePool=Pool.getItem(key);
			this.curScene=scenePool || SourceLib.newWithSceneLib(sourceID,4);
			this.curScene.init(ConfigData.getMapUrl(sourceID),Handler.create(this,this.onInitMap,[sourceID,force]));
			this.curScene.destroyed=false;
			this.curScene.poolID=key;
		}

		/**type-是否加载完成*/
		__proto.onInitMap=function(sourceID,force,type){
			console.log("----------------onInitMap-----------------");
			var _ww=0,_hh=0;
			_ww=this.curScene.width;
			_hh=this.curScene.height;
			this.tildMap=this.curScene.tiledMap;
			var mapData={};
			mapData.prop=this.curScene.getObjArray(force);
			ConfigData.setMapData(mapData);
			var arr=mapData.prop;
			for (var i=0,j=arr.length;i < j;i++){
				ItemMathed.beforehand(arr[i]);
			}
			Player.mapLayer.addChild(this.curScene.bGLayer);
			Player.mapLayer.mouseEnabled=false;
			Player.mapLayerObj=this.curScene.mapLayer;
			this.curScene.initMapdata(mapData);
			this.mapWidth=this.tildMap.width;
			this.mapHeight=this.tildMap.height;
			this.mapTopBorder=0;
			this.mapDownBorder=this.mapHeight-Laya.stage.height;
			this.mapLeftBorder=0;
			this.mapRightBorder=this.mapWidth-Laya.stage.width;
			Player.mapLayerObj.mouseEnabled=false;
			this.teachLayer && this.teachLayer.destroy();
			this.teachLayer=null;this.snowGroupLayer=this.snowGroupLayer|| new ViewImages();
			this.snowGroupLayer.size(_ww,_hh);
			AssetsConsts.IMG_SNOWGROUP && this.snowGroupLayer.init(AssetsConsts.IMG_SNOWGROUP);
			Player.mapLayerObj.addChild(this.snowGroupLayer);this.snowLayer=this.snowLayer|| new ViewImages();
			this.snowLayer.size(_ww,_hh);
			AssetsConsts.IMG_SNOW && this.snowLayer.init(AssetsConsts.IMG_SNOW);
			Player.mapLayerObj.addChild(this.snowLayer);this.foodBulletLayer=this.foodBulletLayer|| new ViewImages1();
			this.foodBulletLayer.size(_ww,_hh);
			this.foodBulletLayer.init();
			Player.mapLayerObj.addChild(this.foodBulletLayer);this.snowFlyLayer=this.snowFlyLayer|| new ViewFlySnow();
			this.snowFlyLayer.size(_ww,_hh);
			AssetsConsts.IMG_SNOW && this.snowFlyLayer.init(AssetsConsts.IMG_SNOW);
			Player.mapLayerObj.addChild(this.snowFlyLayer);this.roleBackLayer=this.roleBackLayer|| new Sprite();
			this.roleBackLayer.size(_ww,_hh);
			Player.mapLayerObj.addChild(this.roleBackLayer);
			this.curScene.objLayer.removeChildren();
			this.curScene.objLayer.size(_ww,_hh);
			Player.mapLayerObj.addChild(this.curScene.objLayer);this.roleForeLayer=this.roleForeLayer|| new Sprite();
			this.roleForeLayer.size(_ww,_hh);
			Player.mapLayerObj.addChild(this.roleForeLayer);
			this.snowGroupLayer.scrollRect=this._viewportRect;
			this.snowLayer.scrollRect=this._viewportRect;
			this.foodBulletLayer.scrollRect=this._viewportRect;
			this.snowFlyLayer.scrollRect=this._viewportRect;
			this.roleBackLayer.scrollRect=this._viewportRect;
			this.curScene.objLayer.scrollRect=this._viewportRect;
			this.roleForeLayer.scrollRect=this._viewportRect;
			this.curScene.topLayer.scrollRect=this._viewportRect;
			this.teachLayer && (this.teachLayer.scrollRect=this._viewportRect);
			this.setoSR1(true);
			Player.mapLayer.visible=false;
			Laya.timer.frameLoop(1,this,this.showMap);
			this.showMap();
			Player.isStartGame=true;
			Player.isMapInit=true;
			console.log("----------------onInitMap-----------------isMapInit:"+Player.isMapInit);
		}

		__proto.setoSR1=function(bool){
			this.snowGroupLayer.optimizeScrollRect=bool;
			this.snowLayer.optimizeScrollRect=bool;
			this.foodBulletLayer.optimizeScrollRect=bool;
			this.snowFlyLayer.optimizeScrollRect=bool;
			this.roleBackLayer.optimizeScrollRect=bool;
			this.curScene.objLayer.optimizeScrollRect=bool;
			this.roleForeLayer.optimizeScrollRect=bool;
			this.curScene.topLayer.optimizeScrollRect=bool;
			this.teachLayer && (this.teachLayer.optimizeScrollRect=bool);
		}

		__proto.grayScene=function(isGrey){
			if (!this.curScene || (!Render.isWebGL&&!Render.isConchNode))return;
			if (isGrey){
				Player.mapLayer.filters=[this._filterUtil.curFilter];
				this._filterUtil.turnToColor(Player.mapLayer);
			}
			else {
				this._filterUtil.turnToOrg(Player.mapLayer);
			}
		}

		__proto.showMap=function(){
			if (Loading.I.uiIsView())return;
			Player.mapLayer.visible=true;
			Laya.timer.clear(this,this.showMap);
		}

		/**
		*根据 selfID 存储角色数据
		*@param data GameUserInfo 结构
		*/
		__proto.setUserBaseInfo=function(data){
			var user=this.roleObjectsBySelfId [data.gameUID];
			this.userBaseInfoObjs[data.gameUID]=data;
			if (data.roleInfo&&data.roleInfo.uid){
				MsgManager.I._nameList[data.roleInfo.uid]=data.username;
			}
			if (user){
				var gender=(data.gender==0)?2:1;
				user.name=data.username;
				user.createNameText(data.username);
				user.gender=gender;
				var info=data.roleInfo;
				if (info && info.inReadyBullet){
					user.changeXuliState(1);
					user.curS=user.scaleX;
					user.scale(info.scale,info.scale,true);
					user.smaxSpeed=info.SmaxSpeed;
					info.inReadyBullet=0;
				}
				for (var i=0;i < info.activeSkill.length;i++){
					var item=info.activeSkill[i];
					user.setSkill(item.skillIndex,item.skillId,item.leftCount);
				}
				if (data.turnRabit !=0){
					user.changeSkin && user.changeSkin(16,false,true);
				}
				else if (data.turnSnowMan !=0){
					user.changeSkin && user.changeSkin(100011,true,true);
				}
				else if (data.hasOctopus !=0){
					if (user==laya8.client.player.Player.curUser)GamingView.I.showSnowOctopusEff();
				}
				else if (data.hasShield !=0){
					user.addShieldEff();
					if (user==laya8.client.player.Player.curUser)GamingView.I.showAttackButton(false,false);
				}
				if (data.wzStatus==1){
					BufferManager.addBuffer(user,0x200,1);
				}
				else if (data.wzStatus==2){
					BufferManager.addBuffer(user,0x800,1);
				}
				data.roleInfo=null;
			}
		}

		/**
		*根据 selfID 获取角色数据
		*@param id selfID
		*@return GameUserInfo 数据结构
		*/
		__proto.getUserBaseInfo=function(id){
			return this.userBaseInfoObjs [id];
		}

		/**保存角色被打、被杀时说的语句集合*/
		__proto.setRoleTalk=function(cmd){
			this.roleTalkObjs[cmd.selfID]=cmd;
		}

		/**获取角色被打、被杀时说的语句集合*/
		__proto.getRoleTalk=function(selfID){
			return this.roleTalkObjs[selfID];
		}

		//public function newNetObject(classid:int,uid:int,layerid:int):NetObject
		__proto.newNetObject=function(key,classid,uid,inPoolObj){
			if (!this.curScene || this.curScene.destroyed){
				console.log("newNetObject - 创建时没有场景，classid:"+classid);
				return null;
			}
			if (inPoolObj==null && key){
				for (var j=0;j < 10;j++){
					inPoolObj=(new (ClassLib.getClassByID(classid))(uid));
					Pool.recover(key,inPoolObj);
				}
				inPoolObj=Pool.getItem(key);
			};
			var o=inPoolObj || (new (ClassLib.getClassByID(classid))(uid));
			o._classid=classid;
			o.uid=uid;
			o.destroyed=false;
			switch(classid){
				case 4:
					this.snowLayer.addChild(o);
					break ;
				case 6:
					this.snowGroupLayer.addChild(o);
					break ;
				case 18:
				case 19:
					this.foodBulletLayer.addChild(o);
					break ;
				case 12:
					if (enumRoomType.nowType==enumRoomType.ROOMTYPE_LOLIPOP)
						this.curScene.objLayer.addChild(o);
					break ;
				case 2:
				case 11:
					this.roleForeLayer.addChild(o);
					break ;
				case 21:
					this.curScene.topLayer.addChild(o);
					break ;
				case 23:
					o.enableUpdate();
					this.curScene.objLayer.addChild(o);
					break ;
				case 25:
					o.enableUpdate();
					this.curScene.objLayer.addChild(o);
					break ;
				default :
					this.curScene.objLayer.addChild(o);
					break ;
				}
			this.netObjects[uid]=o;
			switch(classid){
				case 1:
					this._autoFind.push(o);
					Log_Test.info(">>>>>>>>>>>>>new  uid:"+o.uid+"  selfId："+(o).selfID+"   userName："+o.name);
					break ;
				case 26:
					this._autoFind.push(o);
					laya8.client.player.Player.curBear=o;
					GamingView.I.Showbear();
					break ;
				}
			return o;
		}

		/**
		*根据uid获得网络对象
		*@param uid id标识，唯一
		*@return
		*/
		__proto.getNetObjByID=function(uid){
			return this.netObjects[uid];
		}

		/**
		*删除对象 根据uid
		*@param uid
		*@param obj
		*@return
		*/
		__proto.removeNetObj=function(uid,obj){
			var nO=this.netObjects [uid];
			if (!nO){
				Log_Test.error("移除没有的角色:"+uid);
				return;
			}
			if (nO !=obj){
				Log_Test.error("removeNetObj err:"+uid);
			}
			if (nO.poolID && nO.type_ !="role"){
				if (nO._classid==24){
					laya8.client.player.Player.curMissile=null;
					this.changeViewCenter(Player.curUser);
				}
				(!nO.chkNoRemove())&& (this.netObjects[uid]=null);
				nO.destroy();
				nO=null;
				return;
			}
			if (nO.type_=="role"){
				this.delNetObjs[uid]=nO.name;
				(nO).die();
				this.roleObjectsBySelfId[(nO).selfID]=null;
				var index=this._autoFind.indexOf(nO);
				if (index !=-1)this._autoFind.splice(index,1);
			}
			else{
				nO.destroy();
			}
			nO=null;
			if (Player.curUID==uid){
				this.changeViewCenter(Player.curUser);
				this.viewportCenterWidthUser();
				this.curentCenterObj=null;
				Player.curUser=null;
			}
			this.netObjects[uid]=null;
		}

		__proto.posInView=function(x,y,sz){
			var rc=this._viewportRect;
			return !(x > (rc.right+sz)|| y > (rc.bottom+sz)|| x < (rc.x-sz)|| y < (rc.y-sz));
		}

		/**
		*根据uid获取角色姓名（包括已经死亡的角色）
		*@param uid
		*@return 返回角色姓名-没找到返回 "未知角色"
		*/
		__proto.getRoleNameByUid=function(uid){
			var role=this.netObjects [uid];
			if (role)return role.name;
			return this.delNetObjs[uid] ? this.delNetObjs[uid] :"未知角色";
		}

		__proto.onCompleteLoad=function(){
			this._trembleNumMax=ConfigData.gameCfg["trembleNumMax"];
			this._trembleNumMin=ConfigData.gameCfg["trembleNumMin"];
			var roleSourceId=enumSourceIDType.now[1];
			(!roleSourceId || roleSourceId==-1)&& (roleSourceId=enumSourceViewType.getSourceID(1036));
			var bulletSourceId=enumSourceIDType.now[3];
			(!bulletSourceId || bulletSourceId==-1)&& (bulletSourceId=enumSourceViewType.getSourceID(3000));
			var QuanSourceId=enumSourceIDType.now[2];
			var arr=[{url:"res/role/default.png",type:"image"}]
			if (!RoleCenter.I.bIsNewPlayer){
				arr.push({url:enumSourceViewType.getRoleUrl(roleSourceId),type:"atlas"});
			}
			if (GameSocket.roomInfo.type==enumRoomType.ROOMTYPE_GEM){
				arr.push({url:"res/obj/baoshi.atlas",type:"atlas"});
			};
			var voI=ConfigData.itemData[enumSourceIDType.now[4]];
			Log_Test.info("对比日志-游戏平台提供的性别："+enumGenderType.now
			+"\n对比日志-使用中的皮肤："+enumSourceViewType.getRoleUrl(roleSourceId)
			+"\n对比日志-使用中的枪械："+(voI ? voI.communalId[0] :"   未找到物品数据："+enumSourceIDType.now[4]));
			SnowLoad.I.load(arr,Handler.create(this,this.onInitEd));
		}

		//----------------------------------预加载角色相关资源end---------------------
		__proto.onInitEd=function(){
			StatManager.I.addTeach(StatManager.I.getStatData(StatID.s2_3_2[0]));
			Player.isDefaultInit=true;
		}

		__proto.startTime=function(){
			this.beginTime=Laya.timer.currTimer;
			this.beginFrame=Laya.timer.currFrame;
		}

		// 帧循环
		__proto.tick=function(){
			if (this._frameTime==0){
				this._frameTime=Laya.timer.currTimer;
				GameSocket.I.autoFlush || GameSocket.I.flush();
				return;
			};
			var curTime=Laya.timer.currTimer;
			var frameStep=curTime-this._frameTime;
			this.update(frameStep);
			this._frameTime=curTime;
		}

		__proto.addToUpdateArray=function(o){
			var sz=this._updates.length;
			for (var j=0;j < sz;j++)
			if (this._updates[j]==o)
				return;
			this._updates.push(o);
		}

		//}
		__proto.getAutoFindArray=function(){
			return this._autoFind;
		}

		__proto.changeViewCenter=function(centerObj){
			this.curentCenterObj=centerObj;
		}

		__proto._canUpdateAll=function(){
			if (Player.renderMode===2 || Stat.loopCount % 2===0)
				return true;
			return false;
		}

		__proto.update=function(frameStep){
			if (GameSocket.chongLianNum)return;
			if (!Player.isStartGame){
				return;
			}
			Player.loopCount++;
			if (Player.curUser){
				this._ctrlObjPreX=Player.curUser.x;
				this._ctrlObjPreY=Player.curUser.y;
			};
			var usesz=0,sz=this._updates.length,i=0;
			if (!this._canUpdateAll()){
				this._preFameTm=frameStep;
				if(Player.renderMode==1){
					for (i=0;i < sz;i++){
						var o=this._updates[i];
						if (o && !o.destroyed && o.pushUpdates){
							o.updatePath(frameStep);
							(usesz !=i)&& (this._updates[usesz]=o);
							usesz++;
						}
					}
					(sz !=this._updates.length)&& (usesz+=this._updates.length-sz);
					(usesz !=this._updates.length)&& (this._updates.length=usesz);
					if (!this.curentCenterObj||this.curentCenterObj.isDestroyed){
						this.curentCenterObj=laya8.client.player.Player.curUser;
					}
					EffectPool.I.update(frameStep);
				}
				if (this.curentCenterObj){
					if (Player.renderMode===0)
						this.curentCenterObj.updatePath(frameStep);
					this.viewportCenterWidthUser();
				}
				return;
			}
			if (Player.renderMode!==0)this._preFameTm=0;
			frameStep+=this._preFameTm;
			for (var i=0;i < sz;i++){
				var o=this._updates[i];
				if (!o.destroyed && o.pushUpdates){
					this.curentCenterObj!==o && o.update(frameStep);
					(usesz !=i)&& (this._updates[usesz]=o);
					usesz++;
				}
			}
			(sz !=this._updates.length)&& (usesz+=this._updates.length-sz);
			(usesz !=this._updates.length)&& (this._updates.length=usesz);
			if (this.curentCenterObj){
				this.curentCenterObj.update(frameStep-1);
			}
			if (!this.curentCenterObj||this.curentCenterObj.isDestroyed){
				this.curentCenterObj=Player.curUser;
			}
			EffectPool.I.update(frameStep);
			this.curentCenterObj && this.viewportCenterWidthUser();
			if (Player.loopCount % 5){
				this.helpTips.update();
				HotPanelItem.update();
				CheckAttackButton.onUpdate();
				GamingView.I.update(frameStep);
			}
			if (Player.loopCount % 10===0 && this.curScene && this.curScene.objLayer && this.curScene.objLayer.parent)this.curScene.objLayer.updateZOrder();
		}

		/*
		*取得视口位置
		*/
		__proto.getViewportX=function(){
			return this._viewportRect.x;
		}

		__proto.getViewportY=function(){
			return this._viewportRect.y;
		}

		//抖动场景
		__proto._trembleSence_once=function(){
			this._trembleSence=false;
		}

		__proto.trembleSence=function(){
			return;
			this._trembleSence=true;
			GamingView.I.changeShake(ConfigData.gameCfg["trembleTime"]);
			Laya.timer.once(ConfigData.gameCfg["trembleTime"],this,this._trembleSence_once);
		}

		__proto.clear_trembleSence=function(){
			this._trembleSence=false;
			this._trembleSenceNum=0;
		}

		/**
		*地图缩放--
		*@param sv
		*/
		__proto.mapScale=function(sv){
			this._mapScaleValues[0]=sv < 0.4 ? 0.4 :sv;
			this._curMapScale=0;
		}

		/**
		*设置新的缩放
		*@param sv 缩放值
		*@param index 0升级 1狙击
		*/
		__proto.setNewScale=function(sv,index){
			this._mapScaleValues[index]=sv;
		}

		//curIndex=index;
		__proto.setSpeed=function(speed,index){
			this.speeds[index]=speed;
		}

		__proto.setIndex=function(i){
			this.curIndex=i;
		}

		/**
		*传入场景的坐标得到屏幕坐标
		*@param x
		*@param y
		*@return 屏幕坐标
		*/
		__proto.getPoint=function(x,y){
			x=(x-laya8.client.player.Player._viewRect.x)*this._curMapScale;
			y=(y-laya8.client.player.Player._viewRect.y)*this._curMapScale;
			return Point.TEMP.setTo(x,y);
		}

		__proto.viewportCenterWidthUser=function(abc){
			(abc===void 0)&& (abc=0);
			if (!this.curentCenterObj || !this.curScene)return;
			var sv=this._mapScaleValues[this.curIndex];
			var speed=this.speeds[this.curIndex];
			var _viewportRect=this._viewportRect;
			if (Math.abs(this._curMapScale-sv)>=speed){
				if(this._curMapScale==0)
					this._curMapScale=sv;
				else{
					var d=sv-this._curMapScale;
					if (Math.abs(d)> speed)d=d > 0?speed:-speed;
					sv=this._curMapScale+=d;
				}
				this.curScene.bGLayer.scale(sv,sv);
			}
			else{
				if (this.curIndex==2){
					this.curIndex=0;
				}
			}
			this.roleAngle=this.curentCenterObj.bulletAngleInHurt;
			if (this._trembleSence){
				this._trembleSenceNum=0|(SnowUtils.randRange(this._trembleNumMax,this._trembleNumMin));
				if (this.roleAngle >=0 && this.roleAngle < 90){
					_viewportRect.x+=this._trembleSenceNum;
					_viewportRect.y+=this._trembleSenceNum;
					}else if (this.roleAngle >=90 && this.roleAngle < 180){
					_viewportRect.x-=this._trembleSenceNum;
					_viewportRect.y+=this._trembleSenceNum;
					}else if (this.roleAngle >=180 && this.roleAngle < 270){
					_viewportRect.x-=this._trembleSenceNum;
					_viewportRect.y-=this._trembleSenceNum;
					}else if (this.roleAngle >=270 && this.roleAngle < 360){
					_viewportRect.x+=this._trembleSenceNum;
					_viewportRect.y-=this._trembleSenceNum;
				}
			}else this._trembleSenceNum=0;
			var x=(this.curentCenterObj.x+5/4*this.curentCenterObj.displayWidth)-Laya.stage.width / sv / 2-this.expandScreenNum;
			var y=(this.curentCenterObj.y+this.curentCenterObj.displayHeight)-Laya.stage.height / sv / 2-this.expandScreenNum;
			_viewportRect.x=0|x;
			_viewportRect.y=0|y;
			Player._viewRect.copy(_viewportRect);
			_viewportRect.width=0|(Laya.stage.width / sv)+this.expandScreenNum;
			_viewportRect.height=0|(Laya.stage.height / sv)+this.expandScreenNum;
			_viewportRect.x+=this._trembleSenceNum;
			_viewportRect.y-=this._trembleSenceNum;
			this.tildMap.changeViewPort(0 | _viewportRect.x,0 | _viewportRect.y,0 | _viewportRect.width,0 | _viewportRect.height);
		}

		__proto.inView=function(x,y,w,h){
			var rc=this._viewportRect;
			return !(x > rc.right || y > rc.bottom || (x+w)< rc.x || (y+h)< rc.y);
		}

		__proto.onVisibleChange=function(e){
			if (Laya.stage.isVisibility){
				this.startTime();
			}
			else{
			}
		}

		__proto.start=function(){
			if (this._activeType !=this.ACTIVETYPE_START){
				this._activeType=this.ACTIVETYPE_START;
				this.delNetObjs={};
				this.event("PLAYERSTART");
				Laya.timer.frameLoop(1,this,this.tick);
				Laya.stage.on("visibilitychange",this,this.onVisibleChange);
				this.startTime();
				Laya.stage.on("keydown",this,this._onKeyDown);
				Laya.stage.on("keyup",this,this._onKeyUp);
			}
		}

		__proto.willEnd=function(){
			this.event("PLAYERWILLEND");
		}

		__proto._onKeyDown=function(e){
			if (!laya8.client.player.Player.curUser || !GamingView.I.gameCtrl || this._keyDown)return;
			var skillbox;
			switch(e.keyCode){
				case 74:
				case 32:;
					var mainBtn=GamingView.I.btnAttack;
					if (mainBtn.mouseEnabled && mainBtn.visible)
						mainBtn.clipAttack.event("mousedown",[e]);
					break ;
				case 75:
					skillbox=GamingView.I.skillbox2;
					if (skillbox.mouseEnabled && skillbox.visible){
						skillbox._checkxuli(false,e);
						skillbox.onButtonUp(e);
					}
					break ;
				case 76:
					skillbox=GamingView.I.skillbox1;
					if (skillbox.mouseEnabled && skillbox.visible)
						skillbox.btnskill.event("mousedown",[e]);
					break ;
				case 81:
					if(!CrazySnowball.isRelease)(GameSocket.I).chonglian();
					break ;
				case 87:
					GamingView.I.skillbox3.pickUpSnow(null);
					break ;
				}
			this._keyDown=true;
		}

		__proto._onKeyUp=function(e){
			this._keyDown=false;
			if (!laya8.client.player.Player.curUser || !GamingView.I.gameCtrl)return;
		}

		/**
		*停止播放
		*/
		__proto.end=function(){
			Player.curBeKillUid=0;
			this._keyDown=false;
			ItemMathed.clear();
			this.event("PLAYEREND");
			Laya.timer.clearAll(this);
			Laya.stage.off("visibilitychange",this,this.onVisibleChange);
			Laya.stage.off("keydown",this,this._onKeyDown);
			if (this._activeType !=this.ACTIVETYPE_START)return;
			this._activeType=this.ACTIVETYPE_END;
			Player.isDefaultInit=false;
			Player.isStartGame=false;
			Player.isMapInit=false;
			this.curIndex=0;
			this._end();
		}

		__proto._end=function(){
			this._filterUtil&&this._filterUtil.recover(Player.mapLayer);
			Grass.clearAll();
			this._trembleSence=false;
			this._trembleSenceNum=0;
			this.curentCenterObj=null;
			this._updates.length=0;
			this._autoFind.length=0;
			Player.mapLayerObj&&Player.mapLayerObj.removeSelf();
			if (this.curScene){
				this.curScene.bGLayer.removeSelf();
				this.curScene.objLayer.removeChildren();
				this.curScene.objLayer.removeSelf();
				this.curScene.topLayer.removeSelf();
				this.curScene.destroyed=true;
				this.curScene.clean();
				this.tildMap=null;
				Pool.recover(this.curScene.poolID,this.curScene);
			}
			else{
				return;
			}
			this.curScene=null;
			this.teachLayer && this.teachLayer.destroy();
			this.teachLayer=null;
			this.snowGroupLayer.removeChildren();
			this.snowGroupLayer.removeSelf();
			this.snowGroupLayer=null;
			this.snowLayer.removeChildren();
			this.snowLayer.removeSelf();
			this.snowLayer=null;
			this.snowFlyLayer.removeChildren();
			this.snowFlyLayer.removeSelf();
			this.snowFlyLayer=null;
			this.foodBulletLayer.removeChildren();
			this.foodBulletLayer.removeSelf();
			this.foodBulletLayer=null;
			this.roleBackLayer.removeChildren();
			this.roleBackLayer.removeSelf();
			this.roleForeLayer.removeChildren();
			this.roleForeLayer.removeSelf();
			for (var iis in this.posidObj){
				this.posidObj[iis] && this.posidObj[iis].spDestory();
			}
			this.posidObj={};
			this.delNetObjs={};
			this.roleTalkObjs={};
			this.userBaseInfoObjs={};
			this.roleObjectsBySelfId={};
			var obj;
			for (var i in this.netObjects){
				obj=this.netObjects[i];
				(obj && !obj.destroyed)&& obj.spDestory();
			}
			this.netObjects={};
			NotifyCenter.I.clearGameData();
			EffectPool.I.removeObj();
			ActorObject.releaseAll();
		}

		//Player.qTree=null;
		__proto.exit=function(){
			this.end();
			this.event("PLAYEREXIT");
			this.offAll("PLAYEREXIT");
			this.helpTips&&this.helpTips.clearAll();
			if (this._activeType !=this.ACTIVETYPE_INROOM){
				this._activeType=this.ACTIVETYPE_INROOM;
				CrazySnowball.showRoomList();
			}
			GameSocket.I.autoFlush=true;
		}

		__proto.readyToGo=function(){
			if (this._activeType !=this.ACTIVETYPE_INROOM){
				this._activeType=this.ACTIVETYPE_INROOM;
				CrazySnowball.showRoomList();
			}
		}

		__proto.onMe=function(i){
			this.on("PLAYEREND",i,i.onEnd);
		}

		__proto.setGhost=function(b){
			Player.isGhost=b;
			Collision.I.canGoNew=b?Collision.I._canGoNewGhost :Collision.I._canGoNewNormal;
			if(Player.isGhost)Laya.timer.clear(this,this.goAway);
			var user=Player.curUser;
			if (!Player.isGhost&&user){
				var c=Collision.I;
				var w=NaN,h=NaN;
				var scaleY=user._style._tf.scaleY;
				var dx=user.x;
				var dy=user.y;
				w=user.__WW *user._style._tf.scaleX;
				h=user.__HH *scaleY;
				var x=dx+1 / 2 *w;
				var y=dy+h;
				var d=c.getTilePostionByRect(dx+3,dy+2 / 3 *h+3,w-2 *3,1 / 3 *h-2 *3);
				if (!d){
					user.showQiPao(SnowLang.yl,3000);
					Laya.timer.once(3000,this,this.goAway);
				}
			}
		}

		__proto.goAway=function(){
			Laya.timer.clear(this,this.goAway);
			var cmd=MsgTemplate.createWithClass(CMsgStuck);
			SnowUtils.battleMsg.goAway(cmd);
			cmd.release();
		}

		/**
		*创建播放器静态实例
		*@return
		*/
		__getset(1,Player,'I',function(){
			if (!Player._instance)Player._instance=new Player();
			return Player._instance;
		},laya.events.EventDispatcher._$SET_I);

		Player.getObjByGid=function(id){
			var curScene=laya8.client.player.Player.I.curScene;
			if (!curScene){
				Log_Test.error("getObjByGid curScene is null");
				return null;
			};
			var obj=curScene.dynamicObjByGid;
			if (!obj){
				Log_Test.error("getObjByGid dynamicObjByGid is null");
				return null;
			}
			return obj[id];
		}

		Player.Start=function(){
			if (Player._instance){
				Player._instance.startTime();
			}
		}

		Player.getViewportRect=function(){
			return Player._instance._viewportRect;
		}

		Player.START="PLAYERSTART";
		Player.EXIT="PLAYEREXIT";
		Player.WILLEND="PLAYERWILLEND";
		Player.END="PLAYEREND";
		Player.BaseSceenScale=1.4;
		Player.DAOJU=true;
		Player.isStartGame=false;
		Player.isDefaultInit=false;
		Player.isMapInit=false;
		Player.curUID=1;
		Player.curBeKillUid=0;
		Player.teamID=0;
		Player.curUser=null
		Player.curBear=null
		Player.curMissile=null
		Player.nvshenPoArr=[];
		Player._instance=null
		Player.mapLayer=null
		Player.btnIndex=0;
		Player._curMapSourceId=0;
		Player._curForce=-1;
		Player.mapLayerObj=null
		Player.loopCount=0;
		Player.renderMode=1;
		Player.MINMAPSCALE=0.4;
		Player.MOVEVIEWSTEP=32;
		Player.isGhost=false;
		Player.delta=3;
		__static(Player,
		['_viewRect',function(){return this._viewRect=new ViewRect();}
		]);
		return Player;
	})(EventDispatcher)


	/**
	*...
	*@author
	*/
	//class laya8.client.player.game.fakeSV.CCreateObjData extends CreateObjData
	var CCreateObjData=(function(_super){
		var skillCount;
		function CCreateObjData(){
			this.qRect=null;
			this.ow=0;
			this.oh=0;
			this.colldata=null;
			this.curSkill=[];
			this.killnum=0;
			this.maxScore=0;
			this.bekillnum=0;
			this.skillBaseData=null;
			this.propBuffId=0;
			this.isInYanwu=false;
			this.thinkgap=2000;
			this.enableHit=false;
			this.lasthit=0;
			this.ownSkills=[];
			this.hasSkills={};
			this.curRandomSkills=[];
			this.skillLen=0;
			this._skillLen=0;
			this.baseMaxBloodVal=NaN;
			this.dieTime=0;
			this.readyState=0;
			this.readySkillid=0;
			this.xindex=0;
			this.curskillid=0;
			this.skillobjs={};
			this.moveSelfData=null;
			this._lastThinkTime=0;
			this.sunstate=0;
			this.dx=0;
			this.dy=0;
			this.suntime=0;
			this.ghostSpeed=1;
			this.customBuffer=0;
			this.inatt_damageScale=1;
			this._beatCollStop=false;
			this.beatBuffid=0;
			this._endBack=-1;
			this.skillLevel=[];
			this.userBuffer=new UserBuffer();
			CCreateObjData.__super.call(this);
			this.qRect=new QuadRect();
			this.qRect.obj=this;
			this.colldata=new CollData();
			this.skillBaseData=new SkillBaseData();
			this.skillBaseData.user=this;
		}

		__class(CCreateObjData,'laya8.client.player.game.fakeSV.CCreateObjData',_super);
		var __proto=CCreateObjData.prototype;
		Laya.imps(__proto,{"laya8.client.player.game.fakeSV.ICollision":true,"skill.ISkill":true})
		__proto.update=function(t,qtree){
			if (this !=FaceServer.INSTANCE.curUser && this.dieTime && t-this.dieTime > 4000){
				if (FaceServer.INSTANCE.roomType !=100)this.rebirth(true);
				return;
			};
			var user=Player.I.roleObjectsBySelfId[this.selfID];
			if (user && !user.isDie){
				var isInview=Player.I.inView(user.x,user.y,150,150);
				if (!isInview && Player.loopCount % 5 !=0)return;
				var w=NaN,h=NaN;
				var scaleY=user._style._tf.scaleY;
				var dx=user.x;
				var dy=user.y;
				this.x=user.x;
				this.y=user.y;
				w=user.__WW *user._style._tf.scaleX;
				h=user.__HH *scaleY;
				this.qRect.fillData(dx,dy,w,h,this.uid,"0",0);
				qtree.remove(this.qRect);
				qtree.put(this.qRect);
				FaceServer.showRect(this.qRect,0,this.uid,0,1);
				var result=qtree.getAreaObjList(this.qRect);
				this.isInYanwu=false;
				if (result.length > 0){
					{
						for (var i=0,len=result.length;i < len;i++){
							var item=result [i];
							(item.obj).hit(this);
						}
					}
				}
				if (!this.isInYanwu && this.propBuffId){
					this.addbuff(this.propBuffId);
					this.propBuffId=0;
				}
				if ((user.getPath())._isStop){
					if (this._endBack==0){
						this._endBack=-1;
						var itemLv=ConfigData.LvData[this.userlevel];
						this.speedScale=itemLv.speedS;
						this.skillChgSpeed(true);
					}
					if (this.sunstate==1){
						this.endhui();
					}
					else if (this.sunstate==2){
						this.sunstate=0;
						this.cango();
					}
					else if (this._beatCollStop){
						this._beatCollStop=false;
						this.beatBuffid=0;
						this.cango();
					}
				}
				this.selfID < 0 && this.aiUpdate(t,user,isInview);
				this.userBuffer.update(Laya.timer.currTimer);
			}
		}

		__proto.aiUpdate=function(t,user,isInview){
			if (!CCreateObjData.canMove)return;
			this.thinkgap=isInview ? 2000 :5000;
			if (t-this._lastThinkTime > this.thinkgap *(1-Math.random()*0.5)){
				var type=CCreateObjData.think.think();
				switch (type){
					case 2:
						if(FaceServer.INSTANCE.roomType==enumRoomType.ROOMTYPE_SOLO_NPC)this.aiuserSkill(0,0,user);
						break ;
					case 0:
						this._sendMove(user);
						break ;
					case 1:
						break ;
					case 3:
						this._sendMove(user);
						break ;
					}
				this._lastThinkTime=Laya.timer.currTimer;
			}
		}

		__proto.findNearEarmy=function(user){
			var objs=Player.I.getAutoFindArray();
			var self=user;
			var minSizeObj=null;
			var angle=NaN;
			var selfx=self.x;
			var selfy=self.y;
			var minSize=100000000;
			var minAngle=360;
			var minAngleObj=null;
			var dx=NaN,dy=NaN;
			var usesz=0;
			for (var i=0,sz=objs.length;i < sz;i++){
				var o=objs[i];
				if (o.isDie)continue ;
				(usesz !=i)&& (objs[usesz]=o);
				usesz++;
				if (o.isHide && !self.bIsInGlass || o.canQX)continue ;
				if (o.isSnow)continue ;
				if (o==self|| o.teamId===self.teamId)continue ;
				if (o.destroyed || o.isInvincible)continue ;
				dx=o.x-selfx;
				dy=o.y-selfy;
				var len=dx *dx+dy *dy;
				if (len < minSize){
					minSize=len;
					minSizeObj=o;
				}
			}
			return minSizeObj;
		}

		__proto.getAngle=function(user){
			var angle=NaN;
			if (!Player.curUser){
				angle=Math.random()*360;
			}
			else{
				if (!Player.I.inView(this.x,this.y,120,120)){
					angle=Math.random()*360;
				}
				else{
					var self=this.findNearEarmy(user);
					if (!self)return-99;
					var selfx=self.x;
					var selfy=self.y;
					var dx=selfx-this.x;
					var dy=selfy-this.y;
					angle=Math.atan2(dy,dx)*180 / Math.PI;
				}
			}
			return angle;
		}

		__proto.aiuserSkill=function(index,other,user){
			if (this.skillBaseData.isBd||this.skillBaseData.isXy)return;
			var angle=this.getAngle(user);
			if (angle==-99)return;
			var msg=MsgTemplate.createWithClass(CMsgUseSkill);
			msg.skillIndex=0;
			msg.dis=other;
			msg.angle=angle;
			msg.aiUID=this.selfID;
			msg.skillIndex=index;
			if (index==2){
				index=1;
			}
			else if (index==3){
				index=2;
			};
			var skillid=this.curSkill[index];
			this.useSkill(msg,skillid,index);
		}

		/*INTERFACE laya8.client.player.game.fakeSV.ICollision */
		__proto.hit=function(hitter){
			if (this.dieTime)return;
			if ((hitter instanceof laya8.client.player.game.fakeSV.CCreateObjData )){
				var user=hitter;
				if (user==this)return;
				var t=Laya.timer.currTimer;
				if (this.sunstate > 0 && t-user.lasthit > 200){
					Sbullet.attUserHitUser(this,user,this.colldata,90,0,null);
					user.lasthit=t;
				}
				if (this.beatBuffid !=0){
					user.addbuff(this.beatBuffid);
					this.beatBuffid=0;
				}
				if (this._beatCollStop&& t-user.lasthit > 1){
					this.stopMove();
					user.stopMove();
					Sbullet.attUserHitUser(this,user,this.colldata,90,0,null);
					user.lasthit=t;
					this._beatCollStop=false;
					this.cango();
				}
			}
		}

		__proto.stopMove=function(){
			var user=Player.I.netObjects [this.uid];
			if (user){
				user.realStop();
				user.getPath().stop();
			}
		}

		//}
		__proto.addBlood=function(b){
			if (b){
				this.addBloodVal(b);
			}
		}

		__proto.addScore=function(i){
			this.score+=i;
			if (this.score < 0)this.score=0;
			if (this.score > this.maxScore)this.maxScore=this.score;
			if (this.selfID > 0){
				FaceServer.INSTANCE.sendRank();
			};
			var j=0;
			var currentItem=ConfigData.LvData[this.userlevel];
			if (this.score >=currentItem.beforeExp && this.score < currentItem.exp){
			}
			else if (this.score >=currentItem.exp){
				for (j=this.userlevel+1;j <=15;j++){
					var item=ConfigData.LvData[j];
					if (this.score < item.exp){
						this.userlevel=j;
						this.upLevel(2,item);
						return;
					}
				}
			}
			else if (this.score < currentItem.beforeExp){
				for (j=this.userlevel-1;j >=1;j--){
					var item=ConfigData.LvData[j];
					if (this.score >=item.beforeExp){
						this.userlevel=j;
						this.upLevel(1,item);
						return;
					}
				}
			}
		}

		__proto.showPassive=function(){
			if (!FaceServer.INSTANCE.canPassive)return;
			if (this.userlevel < 3)return;
			if (this.curRandomSkills.length > 0)return;
			var _skills=ConfigData.gameCfg.randomSkillLevel;
			for (var j=0;j < _skills.length;j++){
				if (this.userlevel < _skills[j]){
					this._skillLen=j;
					break ;
				}
				else{
					this._skillLen=j+1;
				}
			}
			if (this._skillLen <=this.ownSkills.length)return;
			FakePassiveSkill.randomSkill(this.curRandomSkills,this.itemId,this.userlevel,this.hasSkills);
		}

		__proto.onChoose=function(select){
			var result=MsgTemplate.createWithClass(SMsgSelectSkillResult);
			var skillid=select.skillID;
			result.leftCount=-1;
			result.skillId=skillid;
			if (this.curRandomSkills.length > 0 && this.curRandomSkills.indexOf(skillid)!=-1){
				result.useResult=1;
				var item=new skillCount();
				this.hasSkills[0 | skillid / 1000]=item;
				item.count=skillid % 1000;
				item.lastUseTime=Laya.timer.currTimer;
				this.ownSkills.push(skillid);
				this.onrealPassiveSkill(skillid);
			}
			else{
				result.useResult=3;
			}
			this.curRandomSkills.length=0;
			MsgManager.I.addStdMsg(result);
			this.showPassive();
		}

		/**
		*
		*@param skillid
		*/
		__proto.onrealPassiveSkill=function(skillid){
			SkillProxy.userAddPassiveSkill(0 | skillid / 1000,this.skillBaseData);
		}

		__proto.upLevel=function(type,item){
			this.scale=item.bodyScale *CCreateObjData.baseScale;
			this.SmaxSpeed=0.235 *item.speedS;
			this.bloodVal=Math.ceil(this.bloodVal / this.baseMaxBloodVal *item.maxHp);
			this.baseMaxBloodVal=item.maxHp;
			var leveUp=MsgTemplate.createWithClass(SMsgLevelUp);
			leveUp.bloodVal=this.bloodVal;
			leveUp.level=this.userlevel;
			leveUp.maxBloodVal=this.skillBaseData.getBloodVal(this.baseMaxBloodVal)
			this.maxBloodVal=leveUp.maxBloodVal;
			leveUp.regain=this.regain;
			leveUp.scale=this.scale;
			leveUp.uid=this.uid;
			leveUp.smaxSpeed=this.getRoleMoveSpeed();
			leveUp.score=this.score;
			leveUp.behitChgLevel=type;
			MsgManager.I.addStdMsg(leveUp);
			if (this.selfID > 0 && type==2)this.showPassive();
			var item=ConfigData.LvData[this.userlevel];
			this.colldata.attackVal=item.bulletAckScore;
			this.colldata.attackValScale=item.bulletAckScore2;
		}

		__proto.die=function(){
			FaceServer.showRect(this.qRect,0,this.uid,0,0);
			Laya.timer.clear(this,this.xuliupdate);
			this.bloodVal=0;
			this.hasSkills={};
			this.clearStatus();
			this.dieTime=Laya.timer.currTimer;
			FaceServer.qTree.remove(this.qRect);
			this.selfID > 0 && FakePassiveSkill.lostSkill(this.ownSkills,this.userlevel);
		}

		__proto.clearStatus=function(){
			this._endBack=-1;
			this.inatt_damageScale=1;
			this.beatBuffid=0;
			this._beatCollStop=false;
			this.sunstate=0;
			this.readyState=0;
			this._lastThinkTime=0;
			this.speedScale=1;
			this.ghostSpeed=1;
			this.propBuffId=1;
			this.isInYanwu=false;
			this.customBuffer=0;
		}

		__proto.xuli=function(skillid){
			var data=MsgTemplate.createWithClass(SMsgReadyBullet);
			this.readyState=1;
			data.readyState=this.readyState;
			this.readySkillid=skillid;
			data.skillId=skillid;
			data.uid=this.uid;
			MsgManager.I.addStdMsg(data);
			this.xindex=0;
			this.xuliupdate();
			Laya.timer.loop(1000,this,this.xuliupdate);
		}

		__proto.xuliupdate=function(){
			this.xindex++;
			if (this.xindex < 6){
				this.addScore(-7);
			}
			else if (this.xindex==6){
				this.xuliMax();
			}
		}

		__proto.xuliMax=function(){
			var data=MsgTemplate.createWithClass(SMsgReadyBullet);
			this.readyState=2;
			data.readyState=this.readyState;
			data.skillId=this.readySkillid;
			data.uid=this.uid;
			MsgManager.I.addStdMsg(data);
		}

		__proto.endXuli=function(){
			Laya.timer.clear(this,this.xuliupdate);
			var data=MsgTemplate.createWithClass(SMsgReadyBullet);
			this.readyState=0;
			data.readyState=this.readyState;
			data.skillId=this.readySkillid;
			data.uid=this.uid;
			MsgManager.I.addStdMsg(data);
		}

		//private var bufferVal:int;
		__proto.getUserData=function(){
			return DataPool.getItemByClass(UseSkillData);
		}

		__proto.useSkill=function(msg,skillid,index){
			if (this.readyState)this.endXuli();
			var b=null;
			var actor=Player.I.netObjects [this.uid];
			var userBase=this.getUserData();
			userBase.angle=msg.angle;
			userBase.dis=msg.dis;
			userBase.skillId=skillid;
			userBase.attCollData=this.colldata;
			SkillProxy.useActiveSkill(skillid,1,this.skillBaseData,userBase);
			return null;
		}

		__proto.sendPetBullet=function(angle,dis,skillid){
			var actor=Player.I.netObjects [this.uid];
			if (!actor)return null;
			var bcfg=ConfigData.stoneBullet[skillid];
			if (!bcfg){
				console.log(">>>>>>>>>>>>>>has no this bullet"+skillid);
				return null;
			};
			var speed=bcfg.speed;
			var bid=bcfg.bid;
			var bomArea=bcfg.bomArea;
			var time=bcfg.time;
			var r=bcfg.shootOffset;
			var fx=0 | this.x+Math.cos(angle *0.017453292519943295)*r;
			var fy=0 | this.y+Math.sin(angle *0.017453292519943295)*r;
			var _bullet=MsgTemplate.createWithClass(SMsgCBullet);
			_bullet.ownerID=actor.uid;
			_bullet.uid=FaceServer.ID++;
			_bullet.targetId=0;
			_bullet.x=fx;
			_bullet.y=fy;
			_bullet.angle=angle;
			_bullet.speed=speed;
			_bullet.time=time;
			_bullet.scale=1.06;
			_bullet.hitNum=1;
			_bullet.prefixId=1;
			_bullet.delayMoveTime=0;
			_bullet.msgSendTm=FaceServer.INSTANCE.getSerNow();
			_bullet.useScore=0;
			_bullet.bulletNum=this.score;
			_bullet.itemId=bid;
			_bullet.bombArea=bomArea;
			var bullet=Sbullet.getData();
			bullet.uid=_bullet.uid;
			bullet.owerid=_bullet.ownerID;
			bullet.owersid=actor.selfID;
			bullet.time=_bullet.time;
			bullet.skillid=_bullet.skillId;
			bullet.angle=_bullet.angle;
			bullet.begin();
			bullet.dis=dis;
			bullet.delayTime=bcfg.delay;
			bullet.interval=bcfg.interval;
			var cfg=ConfigData.elementData[bid];
			if (cfg){
				if (cfg.sourceID==0){
					bullet.qRect.w=cfg.explodeW;
					bullet.qRect.h=cfg.explodeH;
				}
				else{
					bullet.qRect.w=cfg.sw;
					bullet.qRect.h=cfg.sh;
				}
			};
			var val=ConfigData.LvData[this.userlevel];
			bullet.colldata.attackVal=0| (val.bulletAckScore*bcfg.singleAckScale[0]);
			bullet.colldata.attackValScale=val.bulletAckScore2;
			MsgManager.I.addStdMsg(_bullet);
			bullet.update(Laya.timer.currTimer,FaceServer.qTree);
			return bullet;
		}

		__proto.rebirth=function(cover){
			(cover===void 0)&& (cover=false);
			this.dieTime=0;
			this.clearStatus();
			var user=MsgTemplate.createWithClass(SMsgUserAddView);
			user.userData=this;
			if (cover){
				this.bloodVal=this.maxBloodVal;
			}
			else
			{this.bloodVal=this.bloodVal|| this.maxBloodVal;
			};
			var obj=FaceServer.INSTANCE.getBirthOne();
			if (!this.ow){
				var cfg=ConfigData.roleData[this.itemId];
				this.ow=cfg.sw;
				this.oh=cfg.sh;
			}
			this.x=obj.x-this.originWidth / 2;
			this.y=obj.y-this.originHeight;
			MsgManager.I.addStdMsg(user);
			this.qRect.id=this.uid;
			FaceServer.qTree.put(this.qRect);
			FaceServer.showRect(this.qRect,0,this.uid,0,1);
			this.initSKill();
		}

		__proto.initSkillSlotData=function(skillslot,skillIndex,canLost,lefcount,skillid){
			var cfgDt=ConfigData.skillCfg[skillid];
			skillslot.canLost=canLost;
			skillslot.cd=cfgDt.cd;
			skillslot.skillIndex=skillIndex;
			skillslot.leftCount=lefcount;
			skillslot.skillId=skillid;
			this.skillobjs[skillIndex]=skillslot;
			SkillProxy.getActiveSkill(skillid,1,this.skillBaseData,0);
		}

		__proto.initSKill=function(){
			if (this.selfID > 0){
				var active=MsgTemplate.createWithClass(SMsgSelectActiveSkills);
				var curSkill=this.curSkill;
				active.isEat=0;
				active.userGameUID=this.selfID;
				var skills=active.activeSkill;
				skills.length=0;
				if (!this.skillobjs[0]){
					this.initSkillSlotData(new SkillSlotData(),0,false,-1,curSkill[0]);
					this.initSkillSlotData(new SkillSlotData(),2,false,-1,curSkill[1]);
					this.initSkillSlotData(new SkillSlotData(),3,false,-1,curSkill[2]);
				}
				skills.push(this.skillobjs[0]);
				skills.push(this.skillobjs[2]);
				skills.push(this.skillobjs[3]);
				if (FaceServer.INSTANCE.curGun){
					var gunData=ConfigData.itemData[FaceServer.INSTANCE.curGun];
					if (gunData && gunData.communalId[0]){this.skillobjs[1]=this.skillobjs[1]|| new SkillSlotData();
						this.initSkillSlotData(this.skillobjs[1],1,false,3,gunData.communalId[0]);
						skills.push(this.skillobjs[1]);
					}
				}
				MsgManager.I.addStdMsg(active);
			}
		}

		__proto._sendMove=function(user){
			if (this.skillBaseData.isBd||this.skillBaseData.isXy)return false;
			if (user && user.selfID < 0){
				var angle=Math.random()*360;
				if (!this.moveSelfData){
					this.moveSelfData=MsgTemplate.createWithClass(SMsgUserDeltaMove);
					this.moveSelfData.ref++;
				}
				this.moveSelfData.angle=0 | angle;
				this.moveSelfData.x=user.x;
				this.moveSelfData.y=user.y;
				this.moveSelfData.baseTime=CMsgHeartBeatRes.getServerTime(Browser.now())-MsgManager.enterRoomTime;
				var roledy=Math.round(2 / 3 *user.__HH *user.scaleY);
				var time=Collision.I.checkinBox2(this.moveSelfData.x,this.moveSelfData.y,this.moveSelfData.angle,roledy,this.moveSelfData);
				if (time !=0){
					var dir=MsgManager.calcDirByDelta(this.moveSelfData.deltax,this.moveSelfData.deltay);
					user.animeMove(dir);
					ActionPlayer.move(user);
					user.path(this.moveSelfData);
				}
				else{
					this._lastThinkTime=0;
				}
			}
			return true;
		}

		__proto.moveTo=function(msg){
			var actor=Player.I.roleObjectsBySelfId [msg.aiUID];
			if (!actor)return;
			if (!this.moveSelfData){
				this.moveSelfData=MsgTemplate.createWithClass(SMsgUserDeltaMove);
				this.moveSelfData.ref++;
			}
			this.moveSelfData.x=msg.x;
			this.moveSelfData.y=msg.y;
			this.moveSelfData.deltax=msg.deltax;
			this.moveSelfData.deltay=msg.deltay;
			this.moveSelfData.baseTime=FaceServer.INSTANCE.getSerNow();
			var dir=MsgManager.calcDirByDelta(this.moveSelfData.deltax,this.moveSelfData.deltay);
			actor.animeMove(dir);
			ActionPlayer.move(actor);
			actor.path(this.moveSelfData);
		}

		__proto.laihui=function(angle,length){
			this.suntime=Laya.timer.currTimer;
			var user=Player.I.netObjects [this.uid];
			if (!user)return;
			user.isMove=true;
			var roledy=Math.round(2 / 3 *user.__HH *user.scaleY);
			var temp=MsgTemplate.createWithClass(SMsgUserStartHitMove);
			temp.x=user.x;
			temp.y=user.y;
			temp.uid=this.uid;
			temp.angle=angle;
			temp.baseTime=Browser.now()-MsgManager.enterRoomTime-GameSocket.delayNetwork;
			var roledy=Math.round(2 / 3 *this.oh);
			CCreateObjData.gaoto(this.x,this.y,length,angle *0.017453292519943295,Point.TEMP,roledy,null);
			temp.deltax=Point.TEMP.x-user.x;
			temp.deltay=Point.TEMP.y-user.y;
			this.dx=-temp.deltax;
			this.dy=-temp.deltay;
			if (this.dx==0 && this.dy==0){
				this.sunstate=0;
				this.cango();
				return;
				}{
				temp.moveSpeed=this.getRoleMoveSpeed();
				MsgManager.I.addStdMsg(temp);
			}
		}

		__proto.endhui=function(){
			this.sunstate=2;
			var user=Player.I.netObjects [this.uid];
			if (!user)return;
			var temp=MsgTemplate.createWithClass(SMsgUserStartHitMove);
			user.isMove=true;
			temp.x=user.x;
			temp.y=user.y;
			temp.uid=this.uid;
			temp.baseTime=Browser.now()-MsgManager.enterRoomTime-GameSocket.delayNetwork;
			temp.deltax=this.dx;
			temp.deltay=this.dy;
			temp.moveSpeed=this.speedScale *this.SmaxSpeed;
			MsgManager.I.addStdMsg(temp);
		}

		__proto.changeSpeed=function(){
			var _propertyChg=MsgTemplate.createWithClass(SMsgChgProperty);
			_propertyChg.uid=this.uid;
			var _propertyData1=PropertyData.getData();
			_propertyData1.propertyType=4;
			_propertyData1.propertyValue=this.SmaxSpeed *this.speedScale;
			_propertyChg.itemList.push(_propertyData1);
			_propertyChg.itemNum=_propertyChg.itemList.length;
			MsgManager.I.addStdMsg(_propertyChg);
		}

		__proto.cango=function(){
			var user=Player.I.netObjects [this.uid];
			if (!user)return;
			var svrMsgMove=MsgTemplate.createWithClass(SMsgUserHitMove);
			var item=ConfigData.LvData[this.userlevel];
			this.speedScale=item.speedS;
			svrMsgMove.hitUid=this.uid;
			svrMsgMove.hitx=0 | user.x;
			svrMsgMove.hity=0 | user.y;
			this.skillChgSpeed();
			MsgManager.I.addStdMsg(svrMsgMove);
		}

		__proto.initObj=function(itemid,sourId,selfId,uid,x,y,hp,tid){
			var level=1;
			this.userlevel=1;
			this.maxScore=0;
			this.bekillnum=0;
			var item=ConfigData.LvData[level];
			this.speedScale=item.speedS;
			this.SmaxSpeed=0.235;
			this.maxBloodVal=this.baseMaxBloodVal=item.maxHp;
			this.scale=item.bodyScale *CCreateObjData.baseScale;
			this.itemId=itemid;
			this.teamName=tid;
			this.curSkill=ConfigData.roleData[itemid].defaultSkill;
			this.sourceID=sourId;
			this.selfID=selfId;
			this.uid=uid;
			this.score=60;
			this.teamId=tid;
			this.killnum=0;
			x=x;
			y=y;
			this.bloodVal=hp || item.maxHp;
			this.regain=0;
		}

		/*INTERFACE skill.ISkill */
		__proto.skillChgBlood=function(_sendClinet,exMaxBloodVal){
			(_sendClinet===void 0)&& (_sendClinet=true);
			(exMaxBloodVal===void 0)&& (exMaxBloodVal=1);
			if (this.dieTime)return;
			if(exMaxBloodVal==1){
				exMaxBloodVal=this.maxBloodVal;
			}
			this.maxBloodVal=0 | this.skillBaseData.getBloodVal(this.baseMaxBloodVal);
			this.bloodVal=0 | (this.bloodVal *(this.maxBloodVal / exMaxBloodVal));
			if (this.bloodVal > this.maxBloodVal){
				this.bloodVal=this.maxBloodVal;
			}
			if (!_sendClinet)return;
			var _propertyChg=MsgTemplate.createWithClass(SMsgChgProperty);
			_propertyChg.uid=this.uid;
			var _propertyData2=PropertyData.getData();
			_propertyData2.propertyType=2;
			_propertyData2.propertyValue=this.maxBloodVal;
			_propertyChg.itemList.push(_propertyData2);
			var _propertyData1=PropertyData.getData();
			_propertyData1.propertyType=1;
			_propertyData1.propertyValue=this.bloodVal;
			_propertyChg.itemList.push(_propertyData1);
			_propertyChg.itemNum=_propertyChg.itemList.length;
			MsgManager.I.addStdMsg(_propertyChg);
		}

		__proto.chgEmitter=function(_emitterIndex,_emitterId,_skillId,_sendAndRefresh,_forceCount){
			(_sendAndRefresh===void 0)&& (_sendAndRefresh=0);
			(_forceCount===void 0)&& (_forceCount=NaN);
			var _skillSlot=this.skillobjs [_emitterIndex];
			var _skill=MsgTemplate.createWithClass(SMsgSelectActiveSkills);
			_skill.userGameUID=this.selfID;
			if (!_skill.activeSkill){
				_skill.activeSkill=[];
			}
			if (!_skillSlot){
				_skillSlot=new SkillSlotData();
			}
			if (_emitterIndex==1){
				_skillSlot.leftCount=3;
			}
			else{
				_skillSlot.leftCount=-1;
			}
			_skillSlot.skillId=_skillId;
			_skillSlot.skillIndex=_emitterIndex;
			_skillSlot.skillLevel=1;
			this.skillobjs[_emitterIndex]=_skillSlot;
			var skillobj=ConfigData.skillCfg[_skillId]
			_skillSlot.cd=skillobj.cd;
			_skill.activeSkill.push(_skillSlot);
			if ((_sendAndRefresh & 4)==4)_skill.isEat=1;
			MsgManager.I.addStdMsg(_skill);
		}

		__proto.skillEmitter=function(_emitterIndex,_sData){
			var result=1;
			var user=Player.I.netObjects [this.uid];
			if (!user)return result;
			var b;
			var skillid=_sData.skillId;
			b=SkillBase.sendBullet(_sData.angle,_sData.dis,skillid,user,this);
			if (skillid==280001){
				this.chgEmitter(0,0,this.curSkill[0],0);
			}
			if (b){
				b.colldata.isXuli=(_emitterIndex==3);
				user.stopMove();
				user.getPath().stop();
				FaceServer.INSTANCE.bullets.push(b);
			}
			this.colldata.skillId=skillid;
			return result;
		}

		__proto.flashTo=function(_emitterIndex,_long,eleId,eleNum,_sData){
			if (this.selfID > 0){
				var user=Player.I.netObjects [this.uid];
				if (user){
					var angle=_sData.angle;
					var userMoveAngle=0.017453292519943295 *angle;
					var dx=Math.cos(userMoveAngle)*_long;
					var dy=Math.sin(userMoveAngle)*_long;
					var roledy=Math.round(2 / 3 *user.displayHeight);
					var result=Collision.I.flashGoTo(this.x,this.y+roledy,dx,dy);
					var rx=result[0];
					var ry=result[1]-roledy;
					var svrMsgMove=MsgTemplate.createWithClass(SMsgUserFlashMove);
					svrMsgMove.baseTime=FaceServer.INSTANCE.getSerNow();
					svrMsgMove.uid=this.uid;
					svrMsgMove.x=0 | rx;
					svrMsgMove.y=0 | ry;
					svrMsgMove.deltax=0;
					svrMsgMove.deltay=0;
					MsgManager.I.addStdMsg(svrMsgMove);
				}
			}
		}

		__proto.startBeatBack=function(_emitterIndex,_beatDistance,_speedScale,_buffId,_beatCollStop,_endBack,_damage,_sData){
			(_beatCollStop===void 0)&& (_beatCollStop=1);
			(_endBack===void 0)&& (_endBack=0);
			(_damage===void 0)&& (_damage=0);
			if (_emitterIndex==3){
				this.colldata.isXuli=true;
			}
			this.colldata.skillId=_sData.skillId;
			this.moveBeatBack(_beatDistance,_speedScale,_buffId,_beatCollStop,_endBack,_damage,_sData.angle);
			this.curskillid=_sData.skillId;
		}

		__proto.endBeatBack=function(collision){
			(collision===void 0)&& (collision=false);
			this.beatBuffid=0;
			if (!collision){
				this.cango();
			}
		}

		__proto.findAndAtt=function(value,floors,valueChg){}
		__proto.startGhost=function(_emitterIndex,_ghostSpeed){
			(_ghostSpeed===void 0)&& (_ghostSpeed=1.01);
			this.customBuffer |=0x2;
			var _msg1=MsgTemplate.createWithClass(SMsgGhostChange);
			_msg1.gameUID=this.selfID;
			_msg1.state=1;
			MsgManager.I.addStdMsg(_msg1);
			this.ghostSpeed=_ghostSpeed;
			this.skillChgSpeed(true);
			return true;
		}

		__proto.endGhost=function(){
			this.customBuffer &=~0x2;
			var _msg1=MsgTemplate.createWithClass(SMsgGhostChange);
			_msg1.gameUID=this.selfID;
			_msg1.state=0;
			MsgManager.I.addStdMsg(_msg1);
			return true;
		}

		__proto.startRabit=function(_emitterIndex){
			return true;
		}

		__proto.endRabit=function(){
			return true;
		}

		__proto.startSnowMan=function(_emitterIndex){
			return true;
		}

		__proto.endSnowMan=function(){
			return true;
		}

		__proto.startOctopus=function(_emitterIndex){
			return true;
		}

		__proto.endOctopus=function(){
			return true;
		}

		__proto.startShield=function(_emitterIndex){
			this.customBuffer |=0x1;
			var _msg1=MsgTemplate.createWithClass(SMsgBroadcastSkillStatus);
			_msg1.userUid=this.uid;
			_msg1.state=1;
			_msg1.skillId=3;
			MsgManager.I.addStdMsg(_msg1);
			return true;
		}

		__proto.endShield=function(){
			this.customBuffer &=~0x1;
			var _msg1=MsgTemplate.createWithClass(SMsgBroadcastSkillStatus);
			_msg1.userUid=this.uid;
			_msg1.state=0;
			_msg1.skillId=3;
			MsgManager.I.addStdMsg(_msg1);
			return true;
		}

		__proto.startPet=function(_emitterIndex){
			var _msg1=MsgTemplate.createWithClass(SMsgBroadcastSkillStatus);
			_msg1.userUid=this.uid;
			_msg1.state=1;
			_msg1.skillId=7;
			MsgManager.I.addStdMsg(_msg1);
			return true;
		}

		__proto.endPet=function(){
			var _msg1=MsgTemplate.createWithClass(SMsgBroadcastSkillStatus);
			_msg1.userUid=this.uid;
			_msg1.state=0;
			_msg1.skillId=7;
			MsgManager.I.addStdMsg(_msg1);
			return true;
		}

		//public var inatt_emitterIndex:int=-1;
		__proto.startAddAtt=function(_emitterIndex,_damageScale,_prefixId){
			if (this.customBuffer & 0x8)return false;
			this.customBuffer |=0x8;
			this.inatt_damageScale=_damageScale;
			return true;
		}

		__proto.endAddAtt=function(){
			if ((this.customBuffer & 0x8)==0)return false;
			this.customBuffer &=~0x8;
			this.inatt_damageScale=1;
			return true;
		}

		__proto.createFood=function(foodId,foodNum,staticScore,angle,distance,useSnowGroundScale,destroyTime){
			(angle===void 0)&& (angle=0);
			(distance===void 0)&& (distance=50);
			(useSnowGroundScale===void 0)&& (useSnowGroundScale=1);
			(destroyTime===void 0)&& (destroyTime=0);
		}

		__proto.createFoodPos=function(foodId,foodNum,staticScore,angle,distance,useSnowGroundScale,destroyTime){
			(angle===void 0)&& (angle=0);
			(distance===void 0)&& (distance=50);
			(useSnowGroundScale===void 0)&& (useSnowGroundScale=1);
			(destroyTime===void 0)&& (destroyTime=0);
		}

		/**
		*自动回血量
		*@return
		*/
		__proto.getAutoAddBlood=function(){
			return this.skillBaseData.n_autoAddBlood;
		}

		__proto.skillChgRegain=function(_sendClinet){
			(_sendClinet===void 0)&& (_sendClinet=true);
			if (!_sendClinet)return;
			var _propertyChg=MsgTemplate.createWithClass(SMsgChgProperty);
			_propertyChg.uid=this.uid;
			var _propertyData1=PropertyData.getData();
			_propertyData1.propertyType=28;
			_propertyData1.propertyValue=this.getAutoAddBlood();
			_propertyChg.itemList.push(_propertyData1);
			_propertyChg.itemNum=_propertyChg.itemList.length;
			MsgManager.I.addStdMsg(_propertyChg);
		}

		__proto.checkBuffCDAndAdd=function(buffid){
			if (this.checkBufferCD(buffid)){
				this.addbuff(buffid);
			}
		}

		__proto.addbuff=function(buffid,extendTime,_sData){
			(extendTime===void 0)&& (extendTime=0);
			var obj=ConfigData.buff[buffid];
			if (extendTime==0){
				extendTime=0 | this.skillBaseData.buffTypeExtendTime[obj.buffType];
			}
			this.userBuffer.addBuffer(Laya.timer.currTimer+extendTime,obj.buffType,obj.duration,obj.value,obj.intervalTime,this.chgbuff.bind(this,obj.chgTrigger,obj.intervalTime,_sData),this.endbuff.bind(this,obj.endTrigger));
			var startBuffId=this.skillBaseData.buffTypeStartBuff[obj.buffType];
			if (!isNaN(startBuffId)){
				this.addbuff(startBuffId);
			}
		}

		/**
		*buff状态改变
		*@param funcName
		*@param intervalTime
		*@param value
		*/
		__proto.chgbuff=function(funcName,intervalTime,_sData,value,floors,valueChg,buffType){
			console.log(">>>>>>>>>>>>chgbuff"+funcName);
			this[funcName] && this[funcName](value,floors,valueChg,_sData);
		}

		/**
		*buff结束
		*@param funcName
		*@param intervalTime
		*@param value
		*/
		__proto.endbuff=function(funcName,value,buffType){
			console.log(">>>>>>>>>>>>endbuff"+funcName);
			this[funcName] && this[funcName](value);
			var endBuffId=this.skillBaseData.buffTypeEndBuff[buffType];
			if (!isNaN(endBuffId)){
				this.addbuff(endBuffId);
			}
		}

		/**
		*防御矩阵状态变化
		*@param value
		*@param floors
		*@param valueChg
		*/
		__proto.fyChg=function(value,floors,valueChg){
			this.skillBaseData.fyRange=value;
			this.skillBaseData.fyTimaStap=Laya.timer.currTimer;
			var _msg1=MsgTemplate.createWithClass(SMsgBroadcastBuffStatus);
			_msg1.userUid=this.uid;
			_msg1.state=value;
			_msg1.buffType=0x80;
			MsgManager.I.addStdMsg(_msg1);
		}

		__proto.inviclebalChg=function(value,floors,valueChg){
			if (floors > 0){
			}
			else{
			}
		}

		//this.buffdamageReduction=0;
		__proto.notInAndAddBuff=function(buffid,_sData){
			if (this.checkBufferIn(buffid)){
				this.addbuff(buffid,0,_sData);
			}
		}

		__proto.delAndAddBuff=function(buffid,_sData){
			this.delbuff(buffid);
			this.addbuff(buffid,0,_sData);
		}

		__proto.delbuff=function(buffid){
			var obj=ConfigData.buff[buffid];
			if (!obj)return;
			this.userBuffer.clearByType(obj.buffType);
		}

		__proto.findAreaAndAtt=function(value,floors,valueChg,_sData){
			if (floors > 0){
				var _x=this.x+1 / 2 *this.ow;
				var _y=this.y+1 / 2 *this.oh;
				var w=value;
				var h=value;
				var trs=QuadRect.TEMP;
				trs.x=_x-w / 2;
				trs.y=_y-h / 2;
				trs.w=w;
				trs.h=h;
				trs.id=FaceServer.ID++;
				var behitList=[];
				var behitPropList=[];
				var sceneGraph=FaceServer.qTree;
				var tlist=sceneGraph.getAreaObjList(trs);
				var collobj;
				if (tlist && tlist.length >=1){
					for (var i=0;i < tlist.length;i++){
						collobj=tlist[i];
						if ((collobj.obj instanceof laya8.client.player.game.fakeSV.CCreateObjData )){
							if (collobj.obj.uid==this.uid||this.bloodVal<=0)continue ;
							Sbullet.attUserHitUser(this,collobj.obj,this.colldata,90,0,null);
						}
					}
				}
			}
			else{
				var _skillSlot=this.skillobjs[3];
				_skillSlot && this.toClientSkillEffect(_skillSlot.skillId,-1);
			}
		}

		__proto.checkBufferCD=function(buffid){
			var obj=ConfigData.buff[buffid];
			if (!obj)return false;
			var checkResult=this.userBuffer.checkBuffer(obj.buffType,Laya.timer.currTimer,0);
			return checkResult;
		}

		__proto.decreaseCD=function(value){
			var skillSlot=this.skillobjs[2];
			if (skillSlot && !this.checkCanCDUse(skillSlot)){
				skillSlot.lastUseTime-=value;
				var _propertyChg=MsgTemplate.createWithClass(SMsgChgProperty);
				_propertyChg.uid=this.uid;
				var _propertyData1=PropertyData.getData();
				_propertyData1.propertyType=30;
				_propertyData1.propertyValue=value;
				_propertyChg.itemList.push(_propertyData1);
				_propertyChg.itemNum=_propertyChg.itemList.length;
				_propertyChg.x=this.x;
				_propertyChg.y=this.y;
				MsgManager.I.addStdMsg(_propertyChg);
			}
		}

		__proto.checkCanCDUse=function(_skillSlot){
			if (_skillSlot.leftCount !=-1 && _skillSlot.leftCount <=0){
				return false;
			};
			var etime=Laya.timer.currTimer-_skillSlot.lastUseTime;
			var ecount=0 | (etime / _skillSlot.cd);
			_skillSlot.curChargedCount+=ecount;
			if (_skillSlot.curChargedCount > _skillSlot.maxChargedCount){
				_skillSlot.curChargedCount=_skillSlot.maxChargedCount;
			}
			if (_skillSlot.curChargedCount > 0){
				_skillSlot.curChargedCount--;
				return true;
			}
			return etime >=_skillSlot.cd;
		}

		__proto.checkBufferFloors=function(buffid,floors){
			var obj=ConfigData.buff[buffid];
			if (!obj)return false;
			var curFloors=this.userBuffer.getBufferFloors(obj.buffType);
			var checkBufferFloorsResult=curFloors >=floors;
			return checkBufferFloorsResult;
		}

		__proto.toClientShields=function(){
			var _msg1=MsgTemplate.createWithClass(SMsgBroadcastBuffStatus);
			_msg1.userUid=this.uid;
			_msg1.state=this.skillBaseData.shieldValue > 0 ? 1 :0;
			_msg1.buffType=0x400;
			MsgManager.I.addStdMsg(_msg1);
		}

		__proto.addAreaBuff=function(_range,_targetType,_buffId){
			if (_range <=0)return;
			this.addAreaBuffByParams(this.x+1 / 2 *this.ow,this.y+1 / 2 *this.oh,_range,_targetType,_buffId);
		}

		__proto.addAreaBuffByParams=function(_x,_y,_range,_targetType,_buffId){
			var trs=QuadRect.TEMP;
			trs.x=_x-_range / 2;
			trs.y=_y-_range / 2;
			trs.w=_range;
			trs.h=_range;
			trs.id=FaceServer.ID++;
			var behitList=[];
			var behitPropList=[];
			var sceneGraph=FaceServer.qTree;
			var tlist=sceneGraph.getAreaObjList(trs);
			var collobj;
			if (tlist && tlist.length >=1){
				for (var i=0,len=tlist.length;i < len;i++){
					collobj=tlist[i];
					if ((collobj.obj instanceof laya8.client.player.game.fakeSV.CCreateObjData )){
						if (collobj.obj.uid==this.uid || this.bloodVal <=0)continue ;
						if (_targetType==1 && this.teamId==collobj.obj.teamId){
							(collobj.obj).addbuff(_buffId);
						}
						else if (_targetType==0&&this.teamId!=collobj.obj.teamId){
							(collobj.obj).addbuff(_buffId);
						}
						if (_buffId==25){}
							}
				}
			}
		}

		/**
		*技能创建的物品
		*@param foodId
		*@param destroyTime
		*/
		__proto.skillCreateFood=function(foodId,destroyTime){
			this.createFoodDetail(foodId,destroyTime);
		}

		__proto.createFoodDetail=function(foodId,destroyTime){
			var itemobj=new CSelfItemData();
			var actor=Player.I.netObjects [this.uid];
			if (!actor)return;
			var itemP=DynamicItemData.getData();
			itemP.uid=FaceServer.ID++;
			var obj=ConfigData.elementData[foodId];
			itemP.itemID=foodId;
			itemP.gid=0;
			itemP.x=actor.x-obj.sw / 2+actor.width / 2 *actor.scaleX;
			itemP.y=actor.y-obj.sh / 4+actor.height / 2 *actor.scaleY;
			itemP.bloodVal=1;
			itemP.scale=1;
			itemobj.x=itemP.x;
			itemobj.y=itemP.y;
			itemobj.uid=itemP.uid;
			itemobj.itemId=itemP.itemID;
			itemobj.sid=this.selfID;
			itemobj.buffid=obj.collBuff;
			var _itemMsg=MsgTemplate.createWithClass(SMsgAddJumpItem);
			_itemMsg.uid=this.uid;
			_itemMsg.itemList.push(itemP);
			if (destroyTime){
				Laya.timer.once(destroyTime,this,this.destoryFood,[itemobj]);
			}
			MsgManager.I.addStdMsg(_itemMsg);
			itemobj.setSize(obj.sw,obj.sh);
			itemobj.addView();
		}

		__proto.destoryFood=function(itemobj){
			var itemUid=itemobj.uid;
			itemobj.remove();
			var smg=MsgTemplate.createWithClass(SMsgItemDisappear);
			smg.itemList.length=0;
			smg.itemList.push(itemUid);
			smg.itemNum=smg.itemList.length;
			MsgManager.I.addStdMsg(smg);
		}

		/**
		*潜行
		*@param value
		*@param floors
		*@param valueChg
		*/
		__proto.qxChg=function(value,floors,valueChg){
			if (valueChg){
				var _msg1=MsgTemplate.createWithClass(SMsgBroadcastBuffStatus);
				_msg1.userUid=this.uid;
				_msg1.state=value;
				_msg1.buffType=0x100;
				MsgManager.I.addStdMsg(_msg1);
			}
		}

		/**
		*隼伪装
		*/
		__proto.inSnow=function(){
			var _msg1=MsgTemplate.createWithClass(SMsgBroadcastBuffStatus);
			_msg1.userUid=this.uid;
			_msg1.state=1;
			_msg1.buffType=Math.random()> 0.5 ? 0x200 :0x800;
			this.customBuffer |=0x4;
			MsgManager.I.addStdMsg(_msg1);
		}

		__proto.findAndDelayDamage=function(_range,_count,_uData){}
		__proto.getPullDistance=function(_distance,_sData){
			if (_sData.attCollData.x){
				var _bombCenterX=_sData.attCollData.x-this.originWidth;
				var _bombCenterY=_sData.attCollData.y-this.originHeight;
				var _roleX=this.x;
				var _roleY=this.y;
				var dis2=Math.pow((_bombCenterX-_roleX),2)+Math.pow((_bombCenterY-_roleY),2);
				if (Math.pow(_distance,2)> dis2){
					_distance=_distance > 0 ? Math.sqrt(dis2):-Math.sqrt(dis2);
				}
			}
			return _distance;
		}

		__proto.moveBeatBack=function(_beatDistance,_speedScale,_buffId,_beatCollStop,_endBack,_damage,_angle){
			(_buffId===void 0)&& (_buffId=0);
			(_beatCollStop===void 0)&& (_beatCollStop=0);
			(_endBack===void 0)&& (_endBack=0);
			(_damage===void 0)&& (_damage=0);
			(_angle===void 0)&& (_angle=0);
			this.speedScale=_speedScale;
			this._endBack=_endBack;
			if (_endBack){
				this.sunstate=1;
			}
			this.beatBuffid=_buffId;
			this._beatCollStop=_beatCollStop;
			this.laihui(_angle,_beatDistance);
		}

		//this.getGroup().broadcast(svrMsgMove1);
		__proto.checkAddBuff=function(buffid,_sData){
			var obj=ConfigData.buff[buffid];
			if (!obj)return;
			if (!this.userBuffer.hasAddBuff(obj.buffType)){
				this.addbuff(buffid,0,_sData);
			}
		}

		__proto.checkBufferIn=function(buffid){
			var obj=ConfigData.buff[buffid];
			if (!obj)return false;
			var checkResult=this.userBuffer.checkBufferIn(obj.buffType,Laya.timer.currTimer);
			return checkResult;
		}

		__proto.chgChargedCount=function(_skillIndex,_chargedCount){
			var _skillSlot=this.skillobjs[_skillIndex];
			if (_skillSlot){
				_skillSlot.maxChargedCount=_chargedCount;
				var _propertyChg=MsgTemplate.createWithClass(SMsgChgProperty);
				_propertyChg.uid=this.uid;
				var _propertyData1=PropertyData.getData();
				_propertyData1.propertyType=31;
				_propertyData1.propertyValue=_chargedCount;
				_propertyChg.itemList.push(_propertyData1);
				_propertyChg.itemNum=_propertyChg.itemList.length;
				MsgManager.I.addStdMsg(_propertyChg);
			}
		}

		__proto.toClientSkillEffect=function(skillId,angle){
			var actor=Player.I.netObjects [this.uid];
			if (!actor)return;
			var eff=MsgTemplate.createWithClass(SMsgSkillEffect);
			eff.angle=angle;
			eff.skillId=skillId
			eff.uid=actor.uid;
			eff.x=actor.x+1 / 2 *actor.displayWidth;
			eff.y=actor.y+1 / 2 *actor.displayHeight;
			MsgManager.I.addStdMsg(eff);
		}

		__proto.getMaxBloodVal=function(){
			return this.maxBloodVal;
		}

		__proto.onUserSkill=function(){}
		/*INTERFACE skill.ISkill */
		__proto.inGhost=function(){
			return this.customBuffer&0x2;
		}

		__proto.isInShield=function(){
			return this.customBuffer & 0x1;
		}

		__proto.addPblood=function(value){
			this.addBloodVal(this.maxBloodVal *value);
			this.skillChgBlood();
		}

		__proto.addBloodVal=function(_value){
			if (this.dieTime){
				return;
			}
			if (_value > 0){
				_value *=(1-this.skillBaseData.hfScale);
			}
			_value=0 | _value;
			if (_value < 0){
				if (this.selfID > 0)
					this._lastThinkTime=0;
			}
			this.bloodVal+=_value;
			if (this.bloodVal > this.maxBloodVal){
				this.bloodVal=this.maxBloodVal;
			}
			if (this.bloodVal < 0){
				this.bloodVal=0;
			}
		}

		//_value !=0 && trace(this.loginData.username+"=========addBloodVal.current: "+battleData.bloodVal+",max: "+battleData.maxBloodVal);
		__proto.playDead=function(value,floors,valueChg){}
		__proto.endPlayDead=function(){}
		__proto.shiwenChg=function(value){}
		/**
		*改变移动速度
		*@param _sendClinet
		*/
		__proto.skillChgSpeed=function(_sendClinet){
			(_sendClinet===void 0)&& (_sendClinet=true);
			if (this.dieTime)return;
			if (!_sendClinet)return;
			var _propertyChg=MsgTemplate.createWithClass(SMsgChgProperty);
			_propertyChg.uid=this.uid;
			var _propertyData1=PropertyData.getData();
			_propertyData1.propertyType=4;
			_propertyData1.propertyValue=this.getRoleMoveSpeed();
			_propertyChg.itemList.push(_propertyData1);
			_propertyChg.itemNum=_propertyChg.itemList.length;
			_propertyChg.x=this.x
			_propertyChg.y=this.y;
			MsgManager.I.addStdMsg(_propertyChg);
		}

		/**
		*角色移动速度，包括技能加成和房间加成
		*@return
		*/
		__proto.getRoleMoveSpeed=function(_currLevel){
			(_currLevel===void 0)&& (_currLevel=false);
			var _extraScale=this.speedScale;
			_extraScale *=this.ghostSpeed;
			_extraScale *=(1+this.skillBaseData.qxMoveScale);
			_extraScale *=(1-this.skillBaseData.behitMovespeedDis);
			return this.skillBaseData.getSpeedS(this.SmaxSpeed)*_extraScale;
		}

		__proto.dcChg=function(value,floors,valueChg){
			if (valueChg){
				this.skillBaseData.behitMovespeedDis=value;
				this.skillChgSpeed();
				var _msg1=MsgTemplate.createWithClass(SMsgBroadcastBuffStatus);
				_msg1.userUid=this.uid;
				_msg1.state=floors;
				_msg1.buffType=0x8;
				MsgManager.I.addStdMsg(_msg1);
			}
		}

		__proto.xyChg=function(value,floors,valueChg){
			this.skillBaseData.isXy=value;
			var _msg1=MsgTemplate.createWithClass(SMsgBroadcastBuffStatus);
			_msg1.userUid=this.uid;
			_msg1.state=floors;
			_msg1.buffType=0x1;
			MsgManager.I.addStdMsg(_msg1);
			if (value)this.stopMove();
		}

		//this.endBeatBack();
		__proto.cxChg=function(value,valueChg){
			this.addBlood(-this.skillBaseData.cxDamage *value);
			this.skillChgBlood();
		}

		__proto.cmChg=function(value,floors,valueChg){
			this.skillBaseData.isCm=value;
			var _msg1=MsgTemplate.createWithClass(SMsgBroadcastBuffStatus);
			_msg1.userUid=this.uid;
			_msg1.state=floors;
			_msg1.buffType=0x2;
			MsgManager.I.addStdMsg(_msg1);
		}

		__proto.hfChg=function(value,floors,valueChg){
			this.skillBaseData.hfScale=value;
		}

		__proto.bingXiang=function(value,floors,valueChg){}
		__proto.bdChg=function(value,floors,valueChg){
			this.skillBaseData.isBd=value;
			var _msg1=MsgTemplate.createWithClass(SMsgBroadcastBuffStatus);
			_msg1.userUid=this.uid;
			_msg1.state=floors;
			_msg1.buffType=0x40;
			MsgManager.I.addStdMsg(_msg1);
			value&&this.stopMove();
		}

		//this.endBeatBack();
		__proto.speedChg=function(value,floors,valueChg){
			if (valueChg){
				this.skillBaseData.qxMoveScale=value;
				this.skillChgSpeed();
			}
		}

		__proto.damageChg=function(value,floors,valueChg){
			if (valueChg){
				this.skillBaseData.yanwuDamageScale=value;
			}
		}

		/**
		*0不发消息不使用剩余次数，1发消息不使用剩余次数，10不发消息使用剩余次数，11发消息使用剩余次数
		*@param _chgSKill
		*@param _sendAndRefresh
		*/
		__proto.chgSkill=function(_chgSKill,_sendAndRefresh){
			(_sendAndRefresh===void 0)&& (_sendAndRefresh=0);
			var skillWithLevel=_chgSKill;
		}

		/**
		*得到用户这个技能的技能等级
		*@param _skillId
		*@return
		*/
		__proto.getSkillLevel=function(_skillId){
			var level=this.skillLevel[_skillId];
			if (isNaN(level)){
				level=1;
			}
			return level;
		}

		__proto.exchangeState=function(_buffId,_skill1,_skill2){
			var _skill=MsgTemplate.createWithClass(SMsgSelectActiveSkills);
			_skill.userGameUID=this.selfID;
			if(!this.checkBufferFloors(_buffId,1)){
				this.chgSkill(_skill1);
				this.chgSkill(_skill2);
				this.addbuff(_buffId);
			}
		}

		__getset(0,__proto,'originWidth',function(){
			return this.scale *this.ow;
		});

		__getset(0,__proto,'originHeight',function(){
			return this.scale *this.oh;
		});

		__getset(0,__proto,'skillData',function(){
			return this.skillBaseData;
		});

		CCreateObjData.gaoto=function(x,y,long,angle,point,roledy,bounRect){
			var collision=Collision.I;
			var dx=Math.cos(angle)*long;
			var dy=Math.sin(angle)*long;
			var count=0;
			var adx=Math.abs(dx);
			var ady=Math.abs(dy);
			count=Math.floor(Math.max(adx,ady)/ 8);
			var result=collision.walkGoTo(x,y+roledy,dx /count,dy / count,count,bounRect);
			var rx=result[0];
			var ry=result[1]-roledy;
			point.x=rx;
			point.y=ry;
			return !result.isBoom;
		}

		CCreateObjData.attUserHitUser=function(){}
		CCreateObjData.REBIRTHTIME=4000;
		CCreateObjData.BASESPEED=0.235;
		CCreateObjData.canMove=false;
		CCreateObjData.baseScale=1.2;
		CCreateObjData.SHIELD=0x1;
		CCreateObjData.GHOST=0x2;
		CCreateObjData.WEIZHUANG=0x4;
		CCreateObjData.ADDATT=0x8;
		__static(CCreateObjData,
		['think',function(){return this.think=new Think([1,0.2,1,1]);},'skillcfg',function(){return this.skillcfg={"61001":{bid:320,time:504,speed:0.576,bomArea:0},"62001":{bid:332,time:106,speed:0,bomArea:169},"43001":{bid:322,time:434,speed:0.552,bomArea:0}};}
		]);
		CCreateObjData.__init$=function(){
			//this.skillChgRegain();
			//class skillCount
			skillCount=(function(){
				function skillCount(){
					this.count=0;
					this.lastUseTime=0;
				}
				__class(skillCount,'');
				return skillCount;
			})()
		}

		return CCreateObjData;
	})(CreateObjData)


	/**
	*...
	*@author
	*/
	//class laya8.client.player.game.fakeSV.CItemData extends ItemData
	var CItemData=(function(_super){
		function CItemData(){
			this.qrect=null;
			this.refreshTime=0;
			this.run=null;
			this.reshowTime=NaN;
			this.rebirthTime=NaN;
			CItemData.__super.call(this);
			this.qrect=new QuadRect();
			this.qrect.obj=this;
		}

		__class(CItemData,'laya8.client.player.game.fakeSV.CItemData',_super);
		var __proto=CItemData.prototype;
		Laya.imps(__proto,{"laya8.client.player.game.fakeSV.ICollision":true})
		__proto.clear=function(){
			return _super.prototype.clear.call(this);
		}

		/**
		*初始化碰撞盒子
		*@param x
		*@param y
		*@param w
		*@param h
		*/
		__proto.setSize=function(w,h){
			this.qrect.fillData(this.x,this.y,w,h,this.uid,"0",0);
		}

		__proto.addView=function(){
			FaceServer.qTree.put(this.qrect);
			FaceServer.showRect(this.qrect,0,this.uid,0,1);
		}

		/*INTERFACE laya8.client.player.game.fakeSV.ICollision */
		__proto.hit=function(hitter){
			if ((hitter instanceof CreateObjData )){
				this.run && this.run(hitter);
			}
		}

		__proto.delSnows=function(hitter){
			this.delObj(hitter);
			FaceServer.showRect(this.qrect,0,this.uid,0,0);
			this.showPosData();
		}

		__proto.showPosData=function(){
			var ss=ItemPosData.getData();
			ss.uid=this.uid;
			ss.gid=this.gid;
			ss.posId=this.posId;
			(ss).reshowTime=Laya.timer.currTimer+(this.refreshTime || this.rebirthTime);
			if (this.rebirthTime){
				this.reshowTime=Laya.timer.currTimer+this.rebirthTime;
				FaceServer.cookedList.push(this);
			}
			else{
				FaceServer.posDisapplear.push(ss);
			}
		}

		//}
		__proto.delObj=function(hitter){
			var a=DelFoodData.getData();
			a.uidBeHit=this.uid;
			a.uidHit=(hitter).uid;
			a.x=this.x;
			a.y=this.y;
			var itemObj=ConfigData.elementData[this.itemId];
			var user=hitter;
			if (itemObj.addLife){
				if (user.selfID > 0){
					var sresult=MsgTemplate.createWithClass(SMsgBombAttackResult);
					sresult.bloodVal=itemObj.addLife;
					sresult.curScore=0;
					MsgManager.I.addStdMsg(sresult);
				}
				user.addBloodVal(itemObj.addLife);
			}
			user.addScore(itemObj.score);
			a.bloodVal=user.bloodVal;
			FaceServer.delSnows.push(a);
			this.remove();
		}

		__proto.beEat=function(hitter){
			if (hitter.selfID < 0)return;
			var itemObj=ConfigData.elementData[this.itemId];
			var boxType=7;
			var _openBoxMsg=MsgTemplate.createWithClass(SMsgOpenBattleBox);
			_openBoxMsg.OwnerUid=hitter.uid;
			_openBoxMsg.boxType=boxType;
			_openBoxMsg.uid=this.uid;
			switch (boxType){
				case 5:
					SkillProxy.useActiveSkill(5,1,(hitter).skillBaseData,(hitter).getUserData());
					break ;
				case 6:
					SkillProxy.useActiveSkill(6,1,(hitter).skillBaseData,(hitter).getUserData());
					break ;
				case 7:
					SkillProxy.useActiveSkill(7,1,(hitter).skillBaseData,(hitter).getUserData());
					break ;
				default :
				}
			MsgManager.I.addStdMsg(_openBoxMsg);
			this.delObj(hitter);
		}

		__proto.getSkill=function(hitter){
			if (hitter.selfID < 0)return;
			var itemObj=ConfigData.elementData[this.itemId];
			SkillProxy.getActiveSkill(itemObj.chgSkill,1,(hitter).skillBaseData,4);
			this.delObj(hitter);
			this.reshowTime=Laya.timer.currTimer+this.rebirthTime;
			FaceServer.cookedList.push(this);
		}

		__proto.remove=function(){
			FaceServer.qTree.remove(this.qrect);
		}

		CItemData.getData=function(){
			return CItemData._dataPool.length>0? CItemData._dataPool.pop():new CItemData();
		}

		CItemData.release=function(_data){
			if (!_data)return;
			if (CItemData._dataPool.indexOf(_data)!=-1)return;
			_data.clear();
			CItemData._dataPool.push(_data);
		}

		CItemData._dataPool=[];
		return CItemData;
	})(ItemData)


	/**
	*
	*@author lisa
	*/
	//class laya8.client.player.game.scence.GameScene extends tiledui.scene.Scene1UI
	var GameScene=(function(_super){
		function GameScene(){
			this.poolID=null;
			GameScene.__super.call(this);
		}

		__class(GameScene,'laya8.client.player.game.scence.GameScene',_super);
		return GameScene;
	})(Scene1UI)


	/**
	*...
	*@author luohuantao
	*/
	//class MyGameEventHandler extends hall.GameEventHandler
	var MyGameEventHandler=(function(_super){
		function MyGameEventHandler(){
			MyGameEventHandler.__super.call(this);
		}

		__class(MyGameEventHandler,'MyGameEventHandler',_super);
		var __proto=MyGameEventHandler.prototype;
		__proto.changeGame=function(){
			Player.I.willStart();
			Loading.I.showLoad();
			if (CrazySnowball.normalLog){
				LoadingPage.getInstance().hide();
				CrazySnowball.removeRoomList();
			}
			Loading.I.readyGame();
		}

		__proto.startGame=function(dat){
			if (MsgManager.isInRoom){
				MsgManager.isInRoom=false;
				MsgManager.I.endGame(3);
			}
			_super.prototype.startGame.call(this,dat);
			GameSocket.roomInfo=dat;
			if (GameSocket.roomInfo.type==enumRoomType.ROOMTYPE_CUSTOM_FREE || GameSocket.roomInfo.type==enumRoomType.ROOMTYPE_CUSTOM_TEAM){
				RoleCenter.I.myRoomId=parseInt(dat.id);
				if(MenuList.inRoomByWhere==-2)this.changeGame();
				}else if(GameSocket.roomInfo.type==enumRoomType.ROOMTYPE_LADDER){
				TeamView.isPi=true;
			}
			else{
				this.changeGame();
			}
			RoleCenter.I.event("battleUpdateRankTask");
			if (CrazySnowball.normalLog){
				var items=NotifyCenter.I.Query("activeItems");
				var basic=NotifyCenter.I.Query("on_BasicDataChg");
				var userInfo=NotifyCenter.I.Query("on_GotLoginData");
				enumGenderType.now=(basic&&basic.Gender==0)?2:1;
				enumSourceIDType.now=items || {};
				}else{
				enumGenderType.now=Math.round(Math.random()+1);
			}
			GameSocket.isAgainConnect=false;
			var isSSL=Method.isSSL();
			var ip=isSSL?dat.sslip:dat.ip;
			var i=CrazySnowball.isSelf?ip.split(":")[0]:CrazySnowball.ip;
			var p=CrazySnowball.isSelf?parseInt(ip.split(":")[1]+""):CrazySnowball.port;
			if (!CrazySnowball.isRelease){
				var ni=SnowUtils.getQueryString("ip");
				if (ni){
					i=ni;
				};
				var np=SnowUtils.getQueryString("port");
				if (np){
					p=parseInt(np);
				}
			}
			if (GameSocket.roomInfo.type !=enumRoomType.ROOMTYPE_LADDER)
				SnowUtils.battleMsg.initServer(i,p,new Handler(this,this.createLoginView));
			CrazySnowball.ip=i;
			CrazySnowball.port=p;
			Log_Test.debug(1,"最新的ip跟端口："+CrazySnowball.ip+":"+CrazySnowball.port);
		}

		/**断线重连，进入战斗*/
		__proto.againStartGame=function(){
			GameSocket.isAgainConnect=true;
			Player.isMapInit=false;
			if((GameSocket.roomInfo.type==enumRoomType.ROOMTYPE_CUSTOM_FREE || GameSocket.roomInfo.type==enumRoomType.ROOMTYPE_CUSTOM_TEAM)&& MenuList.inRoomByWhere==88){
				GameSocket.isAgainConnect=false;
				}else{
				Loading.I.readyGame();
			}
			SnowUtils.battleMsg.initServer(CrazySnowball.ip,CrazySnowball.port,new Handler(this,this.createLoginView));
		}

		__proto.createLoginView=function(){
			var login=MsgTemplate.createWithClass(CMsgLoginGS);
			login.username=decodeURIComponent(RoleCenter.I.nickName);
			login.userGameUID=RoleCenter.I.userId || 0;
			login.isForcein=GameSocket.isForcein;
			login.key=GameSocket.roomInfo.key ? parseInt(GameSocket.roomInfo.key):0;
			login.forceinTeamID=GameSocket.voExt ? GameSocket.voExt.teamId :0;
			login.reconnection=GameSocket.isAgainConnect ? 1 :0;
			SnowUtils.battleMsg.loginGS(login);
			login.release();
			if((GameSocket.roomInfo.type==enumRoomType.ROOMTYPE_CUSTOM_FREE || GameSocket.roomInfo.type==enumRoomType.ROOMTYPE_CUSTOM_TEAM)&&MenuList.inRoomByWhere!=-2){
				var readStart=MsgTemplate.createWithClass(CMsgReadyStart);
				readStart.userRoomId=parseInt(GameSocket.roomInfo.id);
				readStart.userRoomType=GameSocket.roomInfo.roomType;
				SnowUtils.battleMsg.readyStart(readStart);
				readStart.release();
			}
		}

		__getset(1,MyGameEventHandler,'I',function(){
			return MyGameEventHandler._i=MyGameEventHandler._i|| new MyGameEventHandler();
		},hall.GameEventHandler._$SET_I);

		MyGameEventHandler._i=null
		return MyGameEventHandler;
	})(GameEventHandler)


	/**
	*加速度轨迹
	*@author anling
	*/
	//class laya8.client.player.path.PathAcc extends laya8.client.player.path.PathBase
	var PathAcc=(function(_super){
		function PathAcc(){
			this.rmms=0;
			this._enableKissMove=false;
			this.__xx=NaN;
			this.__yy=NaN;
			this.loopCount=0;
			this.preLoopCount=0;
			this._path=new PathAngle();
			PathAcc.__super.call(this);
		}

		__class(PathAcc,'laya8.client.player.path.PathAcc',_super);
		var __proto=PathAcc.prototype;
		__proto.resetData=function(data){
			this.rmms=ConfigData.gameCfg["roleMoveMaxSynchronous"];
			data.ref++;
			if (this._serverData && this._serverData.msgID){
				if(Stat.loopCount!=this.preLoopCount){
					this._serverData.release();
					this.preLoopCount=Stat.loopCount;
				}
			}
			this._serverData=data;
			switch (data.msgID){
				case SMsgUserHitMove.MSGID:
				case SMsgUserDeltaMove.MSGID:
				case SMsgUserStartHitMove.MSGID:
				case SMsgUserFlashMove.MSGID:
				case SMsgStuckMove.MSGID:
					if (isNaN(data.angle)){
						data.angle=PathBase.getAngleByVector2D((data).deltax,(data).deltay);
						if ((data).deltax==0 && (data).deltay==0){
							this._serverData.angle=-1;
						}
					}
					break ;
				default :
					this._serverData.angle=-1;
					return;
				}
			this.resetAccData(data);
		}

		/**在角色重新赋值 acceS， Sresistance，smaxSpeed 后调用，更新速度*/
		__proto.setSpeed=function(){
			if (isNaN((this._serverData).angle))(this._serverData).angle=-1;
			this._path.init(this._netObj.x,this._netObj.y,(this._serverData).angle,(this._netObj).smaxSpeed,Laya.timer.currTimer,(this._serverData).deltax,(this._serverData).deltay,false);
		}

		__proto.onHurt=function(){
			this._isStop=false;
			if (!this._serverData)return;
			(this._serverData).x=this._netObj.x;
			(this._serverData).y=this._netObj.y;
			(this._serverData).baseTime=CMsgHeartBeatRes.getServerTime(Browser.now())-MsgManager.enterRoomTime;
			this.resetAccData(this._serverData);
		}

		__proto.stopWalk=function(){
			this._serverData.angle=-1;
		}

		__proto.resetAccData=function(data){
			this._isStop=false;
			this._enableKissMove=false;
			this._serverPos[0]=this.__xx=data.x;
			this._serverPos[1]=this.__yy=data.y;
			if (data.angle==-1){
				this._setNetObjPos(-1);
				return;
			};
			var serverTT=NaN;
			serverTT=CMsgHeartBeatRes.getServerTime(Browser.now())-(MsgManager.enterRoomTime+data.baseTime);
			var currTimer=Laya.timer.currTimer;
			var angle=(this._serverData).angle;
			var aaa=1;
			var bbb=1;
			var speed=(this._netObj).smaxSpeed *(aaa ? aaa :1)*(bbb ? bbb :1);
			var point=Point.TEMP;
			this._path.init(this._serverPos[0],this._serverPos[1],angle,speed,currTimer-serverTT,data.deltax,data.deltay,true);
			this._path.moveUpdate(point,currTimer);
			if ((Math.abs(this._netObj.x-point.x)< 2 && Math.abs(this._netObj.y-point.y)< 2)|| (Math.abs(this._netObj.x-point.x)> this.rmms && Math.abs(this._netObj.y-point.y)> this.rmms)){
				this.__xx=point.x;
				this.__yy=point.y;
				this._setNetObjPos(-1);
				this._path.init(point.x,point.y,angle,speed,currTimer,data.deltax,data.deltay,false);
			}
			else this._enableKissMove=true;
		}

		__proto.moveStep=function(frameStep){
			this.loopCount++;
			if (this._isStop || this._serverData.angle==-1)return false;
			var point=Point.TEMP;
			var o=this._netObj;
			var b=this._path.moveUpdate(point,Laya.timer.currTimer);
			var posx=point.x;
			var posy=point.y;
			if (this._enableKissMove && !PathAcc._moveWithPoint(point,o["_x"],o["_y"],posx,posy,this._path.getSpeed()*(frameStep+1))){
				this._enableKissMove=false;
			}
			switch (b){
				case 0:
					break ;
				case 1:
					if(!(o).nNotCanMove)
						o.moveRightNow(point);
					break ;
				default :
					this._isStop=true;
					o.isMove=false;
					break ;
				}
			this.__xx=posx;
			this.__yy=posy;
			return false;
		}

		__proto.setNetObjPosMax=function(){
			var o=this._netObj;
			var c=Collision.I;
			var w=NaN,h=NaN;
			var scaleY=o._style._tf.scaleY;
			var dx=0 | this.__xx;
			var dy=0 | this.__yy;
			w=o.__WW *o._style._tf.scaleX;
			h=o.__HH *scaleY;
			var x=dx+1 / 2 *w;
			var y=dy+h;
			var d=c.getTilePostionByRect(dx+3,dy+2 / 3 *h+3,w-2 *3,1 / 3 *h-2 *3);
			if (!d){
				PathAcc.kaNum++;
				if (PathAcc.kaNum >=5){
					PathAcc.kaNum=0;
					Player.I.goAway();
				}
				return false;
			}
			(o._zOrder=o._y+o._height *scaleY);
			return true;
		}

		__proto._setNetObjPos=function(frameStep){
			var o=this._netObj;
			o._x=0 | this.__xx;
			o._y=0 | this.__yy;
			if (this.loopCount % 5==0 || frameStep==-1){
				(o._zOrder=o._y+o._height *o._style._tf.scaleY);
			}
		}

		__proto.setTo=function(_x,_y){
			this.__xx=_x;
			this.__yy=_y;
		}

		PathAcc._moveWithPoint=function(r,bx,by,tx,ty,len){r=r|| new Point();
			var dx=tx-bx;
			var dy=ty-by;
			var myLen2=(dx *dx+dy *dy);
			if (myLen2 <=(len *len+2))
				return false;
			len *=Math.sqrt(myLen2 / (len *len));
			var angle=Math.atan2(dy,dx);
			r.x=Math.round(bx+Math.cos(angle)*len);
			r.y=Math.round(by+Math.sin(angle)*len);
			return true;
		}

		PathAcc.delta=3;
		PathAcc.kaNum=0;
		return PathAcc;
	})(PathBase)


	/**
	*...
	*@author luohuantao
	*/
	//class laya8.client.player.path.PathFly extends laya8.client.player.path.PathBase
	var PathFly=(function(_super){
		function PathFly(){
			this.enableRotation=false;
			this._topTime=NaN;
			this._limitTime=NaN;
			this._flyTime=NaN;
			this._startV=new Point();
			this._startPos=new Point();
			this._targetPos=new Point();
			this._topPos=new Point();
			this._pos=new Point();
			PathFly.__super.call(this);
		}

		__class(PathFly,'laya8.client.player.path.PathFly',_super);
		var __proto=PathFly.prototype;
		/**data as voFly*/
		__proto.resetData=function(data){
			_super.prototype.resetData.call(this,data);
			this._serverData=data;
			var angle=((data).angle % 360)*0.017453292519943295;
			var time=(data).time;
			var _speedX=Math.cos(angle)*(data).speed;
			var _speedY=Math.sin(angle)*(data).speed;
			var posX=this._netObj["_x"]+_speedX *time;
			var posY=this._netObj["_y"]+_speedY *time;
			this.moveBy2(posX,posY,time);
		}

		__proto.moveStep=function(frameStep){
			if (this._isStop)return false;
			if (!this._netObj)return false;
			if (!Laya.timer)return false;
			var delta=Laya.timer.delta;
			this._flyTime+=delta;
			if (this._flyTime >=this._limitTime){
				this.getPosByTime(this._limitTime);
				if (this._netObj["ownerID"]==Player.curUID)
					console.log("A::",this._pos.x,this._pos.y);
				this._netObj.pos(this._pos.x,this._pos.y);
				if (this.enableRotation){
					this._netObj.rotation=this.getRadian(this._limitTime);
				}
			}
			else {
				this.getPosByTime(this._flyTime);
				if (this.enableRotation){
					this._netObj.rotation=this.getRadian(this._flyTime);
				}
				if (this._netObj["ownerID"]==Player.curUID)
					console.log("B::",this._pos.x,this._pos.y);
				this._netObj.pos(this._pos.x,this._pos.y);
			}
			return false;
		}

		/**
		*根据指定的速度或者时间，抛物线飞行某个点
		*@param target 目标对象
		*@param x 距离x
		*@param y 距离y
		*@param speed 飞行速度，speed和time参数二选一
		*@param time 飞行时间，speed和time参数二选一
		*/
		__proto.moveTo=function(x,y,speed,time){
			(time===void 0)&& (time=-1);
			if (x==0)
				x=1;
			this._startV.setTo(x,y);
			if (time==-1)
				time=this._startV.distance(0,0)/ speed;
			this._startPos.setTo(this._netObj.x,this._netObj.y);
			this._targetPos.setTo(this._netObj.x+x,this._netObj.y+y);
			this._startV.y=(y-0.5 *PathFly.g *time *time)/ time;
			this._startV.x=this._startV.x / time;
			this._topTime=Math.abs(this._startV.y / PathFly.g);
			this.getPosByTime(this._topTime);
			this._topPos.setTo(this._pos.x,this._pos.y);
			this._flyTime=0;
			this._limitTime=time;
		}

		/**
		*根据指定的角度，抛物线飞行一段距离
		*@param target 目标对象
		*@param radian 方向弧度
		*@param speed 飞行速度
		*@param len 飞行距离
		*/
		__proto.moveBy=function(radian,speed,len){
			this.moveTo(len *Math.cos(radian),len *Math.sin(radian),speed,len / speed);
		}

		/**
		*根据指定初始点和目标点，在指定的时间内，抛物线飞行过去
		*@param target 目标对象
		*@param x 起始坐标x
		*@param y 起始坐标y
		*@param eX 目标x
		*@param eY 目标y
		*@param time 飞行时间
		*@param offTime 时间偏移
		*/
		__proto.moveBy2=function(eX,eY,time,offTime){
			(offTime===void 0)&& (offTime=0);
			this.moveTo(eX-this._netObj["_x"],eY-this._netObj["_y"],100,time);
			this._flyTime=offTime;
		}

		__proto.getPosByTime=function(time){
			this._pos.x=this._startV.x *time+this._startPos.x;
			this._pos.y=0.5 *PathFly.g *time *time+this._startV.y *time+this._startPos.y;
			return this._pos;
		}

		__proto.getYPercentByTime=function(time){
			if (!time)time=this._flyTime;
			if (time < this._topTime){
				return (this._pos.y-this._startPos.y)/(this._topPos.y-this._startPos.y);
				}else{
				return 1-(this._pos.y-this._topPos.y)/(this._targetPos.y-this._topPos.y);
			}
		}

		__proto.getRadian=function(time){
			var dxy=(PathFly.g *time+this._startV.y)/ this._startV.x;
			var radian=Math.atan(dxy)*57.29577951308232;
			if (this._startV.x < 0)
				radian+=180;
			return radian;
		}

		PathFly.g=0.001;
		PathFly.TransRate=57.29577951308232;
		return PathFly;
	})(PathBase)


	/**
	*...
	*@author
	*/
	//class laya8.client.player.path.Pathfollow extends laya8.client.player.path.PathBase
	var Pathfollow=(function(_super){
		function Pathfollow(){
			this.targetID=0;
			this._curTime=NaN;
			this._durationTime=NaN;
			this._speedX=NaN;
			this._speedY=NaN;
			this.prex=NaN;
			this.prey=NaN;
			Pathfollow.__super.call(this);
		}

		__class(Pathfollow,'laya8.client.player.path.Pathfollow',_super);
		var __proto=Pathfollow.prototype;
		__proto.resetData=function(data){
			data.ref++;
			if (this._serverData){
				this._serverData.release();
			}
			this._serverData=data;
			this._curTime=data._curTime||0;
			this._durationTime=data.time;
			this.targetID=data.targetId;
			var a=0.017453292519943295 *data.angle;
			this._speedX=Math.cos(a)*data.speed;
			this._speedY=Math.sin(a)*data.speed;
			this.prex=this._netObj.x;
			this.prey=this._netObj.y;
			if(this._curTime>0)this._netObj.pos(this.prex+this._curTime*this._speedX,this.prey+this._curTime*this._speedY,true);
		}

		//_speedY=_serverData.deltay *_serverData.speed;
		__proto.changeTarget=function(id){
			this.targetID=id;
		}

		__proto.updateSpeed=function(){
			var actor=Player.I.netObjects [this.targetID];
			var data=this._serverData;
			if (actor&&data){
				var bullet=this._netObj;
				var dx=actor.x+actor.displayWidth / 2-bullet._x;
				var dy=actor.y+actor.displayHeight / 2-bullet._y;
				var r=Math.sqrt(dx*dx+dy*dy);
				this._speedX=dx/r *data.speed;
				this._speedY=dy / r *data.speed;
			}
		}

		__proto.moveStep=function(frameStep){
			if (this._isStop)return true;
			this.updateSpeed();
			if (this._curTime < 0){
				this._curTime+=frameStep;
				return (this._curTime >=this._durationTime &&!this.targetID);
			}
			if (this._curTime+frameStep >=this._durationTime){
				frameStep=this._durationTime-this._curTime;
			};
			var o=this._netObj;
			o._x+=this._speedX *frameStep;
			o._y+=this._speedY *frameStep;
			o.conchModel && o.conchModel.pos(o._x,o._y);
			this._curTime=this._curTime+frameStep;
			return (this._curTime >=this._durationTime&&!this.targetID);
		}

		return Pathfollow;
	})(PathBase)


	/**
	*子弹 的 path
	*...
	*@author anling
	*/
	//class laya8.client.player.path.PathSimple extends laya8.client.player.path.PathBase
	var PathSimple=(function(_super){
		function PathSimple(){
			this._durationTime=NaN;
			this._curTime=NaN;
			this.topdistance=NaN;
			this.parabola=null;
			this._speedX=NaN;
			this._speedY=NaN;
			this.prex=NaN;
			this.prey=NaN;
			PathSimple.__super.call(this);
		}

		__class(PathSimple,'laya8.client.player.path.PathSimple',_super);
		var __proto=PathSimple.prototype;
		/**更新子弹方向*/
		__proto.upData=function(data){
			if (!this._serverData)return;
			var v2d=PathBase.getVector2DByAngle(data.angle);
			var a=v2d.y;
			var b=v2d.x;
			var c=Math.sqrt(a *a+b *b);
			this._speedX=b / c *this._serverData.speed;
			this._speedY=a / c *this._serverData.speed;
			this._serverData.angle=data.angle;
		}

		__proto.resetData=function(data){
			data.ref++;
			if (this._serverData){
				this._serverData.release();
			}
			this._serverData=data;
			this._curTime=data._curTime||0;
			this._durationTime=data.time;
			var a=0.017453292519943295 *data.angle;
			this._speedX=Math.cos(a)*data.speed;
			this._speedY=Math.sin(a)*data.speed;
			this.topdistance=data.topDistance;
			this.prex=this._netObj.x;
			this.prey=this._netObj.y;
			if(this._curTime>0)this._netObj.pos(this.prex+this._curTime*this._speedX,this.prey+this._curTime*this._speedY,true);
			if (this.topdistance){
				var len=data.speed *this._durationTime;
				this.parabola=Parabola.getParabola(len,this.topdistance);
			}
		}

		//_speedY=_serverData.deltay *_serverData.speed;
		__proto.moveStep=function(frameStep){
			if (this._isStop)return true;
			if (this._curTime < 0){
				this._curTime+=frameStep;
				return (this._curTime >=this._durationTime);
			}
			if (this._curTime+frameStep >=this._durationTime){
				frameStep=this._durationTime-this._curTime;
			};
			var o=this._netObj;
			o._x+=this._speedX *frameStep;
			o._y+=this._speedY *frameStep;
			this._curTime=this._curTime+frameStep;
			return (this._curTime >=this._durationTime);
		}

		__static(PathSimple,
		['TEMPPoint',function(){return this.TEMPPoint=new Point();}
		]);
		return PathSimple;
	})(PathBase)


	/**
	*2017-3-25
	*人物数据中心，数据都存到这里面在这里获取
	*可以监听数据中心发出的事件 ROLE_CHANGE_EVENT
	*@ zcc
	*/
	//class Utils.RoleCenter extends laya.events.EventDispatcher
	var RoleCenter=(function(_super){
		function RoleCenter(){
			this.myBasicData=null;
			this.money=0;
			this.diamond=0;
			this.level=0;
			this.rank=0;
			this.userId=0;
			this.nickName=null;
			this.Gender=0;
			this.openId=null;
			this.nowStep=-1;
			this.battled=false;
			this.fashions=null;
			this.attackType=0;
			this.bIsNewPlayer=false;
			this.joinRoomId=-1;
			this.netState=true;
			this.isClickRed=false;
			this.shareType=0;
			this.inviteGameUID=-1;
			this.myRoomId=0;
			this.battTask=null;
			this.curHeroID=NaN;
			this.buyType=null;
			this.buyNum=0;
			this.bIsFirstOpen=false;
			this.checking=false;
			RoleCenter.__super.call(this);
			this.preLeiji=NaN;
			this.fashions=[];
			NotifyCenter.I.on("on_BasicDataChg",this,this.onUserBasicDataChg);
			NotifyCenter.I.on("on_GameDataChg",this,this.onGamedatachg);
			NotifyCenter.I.on("on_usererror",this,this.onGameError);
			NotifyCenter.I.on('onNotify',this,this.onGotNotify);
			NotifyCenter.I.on('onGotLastRoom',this,this.onGotLastRoom);
			this.myBasicData=NotifyCenter.I.Query("on_BasicDataChg");
			UserInfoMgr.I.init();
			NotifyCenter.I.on("gameVisibilityChange",this,this.onGameVisibilityChange);
			NotifyCenter.I.on("onGotAnnouncementList",this,this.onGotAnnouncementList);
			NotifyCenter.I.on("onShareFinish",this,this.onShareFinish);
			NotifyCenter.I.on('onDiamondUpdate',this,this.onDiamondUpdate);
			this.myBasicData&&this.onUserBasicDataChg(this.myBasicData);
			if(!SnowUtils.isWxApp()){
				NotifyCenter.I.on("onGotNetworkInfo",this,this.onGotnetworkinfo);
				HallApp.getNetworkInfo();
			}
		}

		__class(RoleCenter,'Utils.RoleCenter',_super);
		var __proto=RoleCenter.prototype;
		/**
		*更新F1-F7数据
		*
		*/
		__proto.onGamedatachg=function(dat){
			window.f2=dat.F2;
			if(this.money==dat.F7 || !dat.F7)return;
			this.money=dat.F7;
			this.event("roleChangeEvent");
		}

		/**
		*分享结果返回
		*
		*/
		__proto.onShareFinish=function(dat){
			console.log("-------------返回分享的数据信息------------------dat:"+JSON.stringify(dat));
			if(SnowUtils.chkIsFB()){
				LoadingPage.getInstance().hide();
				MouseManager.enabled=true;
				return;
			}
			if (dat.code==0){
				if(Utils.RoleCenter.I.shareType==23){
					var data=NotifyCenter.I.Query("on_GotGameDataResult");
					if(!data || !data.results){
						return;
					};
					var fjson=data.results.fjson;
					if(fjson && fjson.shareAward && fjson.shareAward.lastShareTime && new Date(fjson.shareAward.lastShareTime).toLocaleDateString()===new Date().toLocaleDateString()){
						return;
						}else{
						debugger
						ShareReword.onShow();
					}
					}else if (Utils.RoleCenter.I.shareType==1000){
					var req=Pool.getItemByClass("RequestOpenSTBox",RequestOpenSTBox);
					req.isShare=true;
					HallApp.notify(req);
					Pool.recover("RequestOpenSTBox",req);
				}
				else if(Utils.RoleCenter.I.shareType==1001){}
				else{
				}
				Utils.RoleCenter.I.shareType=0;
			}
		}

		/**
		*获取推送的公告
		*@param dat
		*
		*/
		__proto.onGotAnnouncementList=function(dat){
			if(dat.list&&dat.list.length>0){
				var localStat=LocalStorage.getJSON("_tdGonggao");
				var msg=dat.list[dat.list.length-1];
				if (localStat){
					if (localStat.anoDate==this.getDateStr())return;
				};
				var announceStatus={};
				announceStatus.id=msg.mailid;
				announceStatus.anoDate=this.getDateStr();
				LocalStorage.setJSON("_tdGonggao",announceStatus);
				}else {
				LocalStorage.removeItem("_tdGonggao");
			}
		}

		__proto.getDateStr=function(){
			var td=new Date();
			var tdstr="";
			tdstr+=(td.getMonth()+1);
			tdstr+=td.getDate();
			return tdstr;
		}

		/**
		*监听网络状态
		*
		*/
		__proto.onGotnetworkinfo=function(dat){
			var type=dat.type;
			if(type > 0){
				this.netState=true;
				}else{
				this.netState=false;
			}
			Laya.timer.once(6000,this,function(){
				HallApp.getNetworkInfo();
			});
		}

		// 处理游戏异常
		__proto.onGameError=function(error){
			if (error.errorCode==0)return;
			if (error.errorCode==-10005)return;
			Loading.I.onEnd();
			switch(parseInt(error.errorCode+"")){
				case-40001:
				case-40002:
					TipsView.showMe("","服务器断开，请稍后再试...",1,true,false);
					Loading.friendGameUID=-1;
					break ;
				case-40003:
					TipsView.showMe("","网络异常,请重试.("+-40003+")",1,true,false);
					Loading.friendGameUID=-1;
					break ;
				case-80001:
				case-80002:
					GameSocket.isForcein=0;
					GameSocket.voExt=null;
					TipsView.myCallback=Handler.create(this,function(){
						if (MenuList.inRoomByWhere==1){
							return;
						}
						MenuList.onShowMe()
					});
					TipsView.showMe("",SnowUtils.chkIsFB()?"The current game is over, please reenter the game...":"本局游戏已结束，请重新进入...",1,true,false);
					Loading.friendGameUID=-1;
					break ;
				case-80003:
				case-80004:
					GameSocket.isForcein=0;
					GameSocket.voExt=null;
					TipsView.myCallback=Handler.create(this,function(){
						if (MenuList.inRoomByWhere==1){
							return;
						}
						MenuList.onShowMe()
					});
					TipsView.showMe("","本局游戏人数已满，请重新选择...",1,true,false);
					Loading.friendGameUID=-1;
					break ;
				case-80005:
					Loading.friendGameUID=-1;
					break ;
				case 80005:this.onJoinRoom(this.joinRoomId);
					break ;
				}
		}

		__proto.onGotLastRoom=function(roomId){
			this.joinRoomId=parseInt(roomId+"");
			if (this.joinRoomId==-1){
				HallApp.getRewardData([2,3]);
				return;
			}
			TipsView.myCallback=Handler.create(this,this.onJoinRoom,[roomId]);
			TipsView.myCloseBack=Handler.create(this,this.onShowMe_1,[1]);
			TipsView.showMe("",SnowUtils.chkIsFB()? "You have a game still in progress, whether to continue the game?" :"你还有一场战斗在进行，是否继续游戏？",1,true,true);
		}

		/**
		*@param value 0-默认，1-透传清除未打完的房间数据
		*/
		__proto.onShowMe_1=function(value){
			(value===void 0)&& (value=0);
			if (value==1)this.cleanRoomId();
			MenuList.onShowMe();
		}

		__proto.cleanRoomId=function(){
			var userInfo=NotifyCenter.I.Query("on_GotLoginData");
			var vo=new ExitClick();
			vo.roomid=this.joinRoomId;
			vo.userid=userInfo.UserId;
			HallApp.notify(vo);
		}

		__proto.onJoinRoom=function(roomId){
			Loading.I.showLoad();
			UIMgr.closeUI(MenuList);
			MenuList.inRoomByWhere=-2;
			HallApp.joinRoom(roomId,false);
		}

		/**
		*监听设备恢复
		*@param isShow
		*
		*/
		__proto.onGameVisibilityChange=function(isShow){
			Laya.stage.renderingEnabled=isShow;
			if(isShow){
				SoundManager.playMusic(RoleCenter.finalMusic);
				}else{
				SoundManager.stopAll();
			}
		}

		/**钻石数据 **/
		__proto.onUserBasicDataChg=function(dat){
			this.myBasicData=dat;
			var info=NotifyCenter.I.Query("on_GotLoginData");
			if (!this.isInChannel(info.UnionId)|| SnowUtils.chkIsQQKJ())
				this.diamond=dat.Money;
			this.nickName=dat.NkName;
			this.userId=dat.userId;
			this.Gender=dat.Gender;
			this.level=dat.Level;
			this.fashions=SnowUtils.deComposeAvatar(dat.Avtor);
			SnowUtils.updateDayInfo();
			this.event("roleChangeEvent");
			var _lbSt=LocalStorage.getJSON("_lbSt");
			if (_lbSt){
				var lkArr=_lbSt.lok;
				var timeLimits=SnowUtils.getTimeSpanAt0();
				for (var i=0,sz=lkArr.length;i < sz;i++){
					if ((lkArr[i].tl-timeLimits)> 0 && RoleCenter.lockArr.indexOf(lkArr[i].ct)==-1){
						RoleCenter.lockArr.push(lkArr[i].ct);
					}
				}
			}
		}

		/**
		*是否在渠道内
		*case "-5"://腾讯安卓手Q
		*case "-8"://腾讯安卓微信
		*case "-9"://腾讯IOS手Q
		*case "-10"://腾讯IOS微信
		*@param unionId
		*@return
		*/
		__proto.isInChannel=function(unionId){
			return unionId=="-5" || unionId=="-8" || unionId=="-9" || unionId=="-10" || unionId=="-107"|| unionId=="-108"|| unionId=="-106"|| unionId=="-109";
		}

		/**渠道内钻石数据更新**/
		__proto.onDiamondUpdate=function(count){
			if (count==60)this.onSetLock(count);
			StatManager.I.v2_timedbag();
			RoleCenter.reQueCount=5;
			this.checkMidashi();
			MenuList.I.onReqEnd();
		}

		__proto.onSetLock=function(count){
			RoleCenter.lockArr.push(count);
			var _lbSt={};
			_lbSt.lok=[];
			for (var i=0,sz=RoleCenter.lockArr.length;i < sz;i++){
				var item={};
				item.ct=RoleCenter.lockArr[i];
				item.tl=NotifyCenter.I.getServerTimer();
				_lbSt.lok.push(item);
			}
			LocalStorage.setJSON("_lbSt",_lbSt);
		}

		__proto.checkMidashi=function(){
			if (RoleCenter.reQueCount==-1){this.diamond=this.diamond|| 0;
				RoleCenter.reQueCount=5;
				return;
			}
			else{
				var t=RoleCenter.timeLs[RoleCenter.reQueCount];
				if (this.checking)return;
				Laya.timer.clear(this,this._realCheck);
				Laya.timer.once(t,this,this._realCheck);
				RoleCenter.reQueCount--;
			}
		}

		__proto._realCheck=function(){
			this.checking=true;
			HallApp.notify(new RequestMidasMoney());
		}

		__proto.onGotNotify=function(dat){
			switch(dat.method){
				case 30027:
					this.money=dat.basicData[12];
					this.event("roleChangeEvent");
					break ;
				case 30029:
					this.bIsFirstOpen=true;
					break ;
				case 30088:
					if(SnowUtils.chkIsFB())return;
					var info=NotifyCenter.I.Query("on_GotLoginData");
					if (!this.isInChannel(info.UnionId))return;
					this.checking=false;
					if ((dat.money).money==undefined){
						console.log(">>>>>>>>>>>>>>>>>>>>>>>>>>error");
						this.checkMidashi();
						return;
					}
					if (isNaN(this.preLeiji))this.preLeiji=(dat.money).save_amt;
					if (!SnowUtils.chkIsQQKJ()){
						this.diamond=(dat.money).money;
					}
					if (this.preLeiji !=(dat.money).save_amt){
						this.preLeiji=(dat.money).save_amt;
					}
					if ((dat.money).save_amt < 10){
						RoleCenter.scType=1;
						}else if ((dat.money).save_amt < 60){
						RoleCenter.scType=6;
					}
					this.event("roleChangeEvent");
					console.log("Midas Money=",this.diamond);
					break ;
				}
		}

		__proto.removeAllEvent=function(){
			NotifyCenter.I.off("on_GameDataChg",this,this.onGamedatachg);
			NotifyCenter.I.off("on_BasicDataChg",this,this.onUserBasicDataChg);
			NotifyCenter.I.off('onNotify',this,this.onGotNotify);
			NotifyCenter.I.off("onShareFinish",this,this.onShareFinish);
			NotifyCenter.I.off('onDiamondUpdate',this,this.onDiamondUpdate);
		}

		__getset(1,RoleCenter,'I',function(){
			return RoleCenter._i || (RoleCenter._i=new RoleCenter());
		},laya.events.EventDispatcher._$SET_I);

		RoleCenter.DEFAULTATTACKTYPE=0x1;
		RoleCenter.bIsNewDay=false;
		RoleCenter.ROLE_CHANGE_EVENT="roleChangeEvent";
		RoleCenter.ON_GOT_LOGIN_DATA="onMyGotLoginData";
		RoleCenter.finalMusic=null
		RoleCenter.bIsShowSingnBtn=false;
		RoleCenter.bIsShowFirst=false;
		RoleCenter.teamOrMatch=null
		RoleCenter.rebid=false;
		RoleCenter._i=null
		RoleCenter.buyItems=null
		RoleCenter.buySwitchOff=false;
		RoleCenter.bIsShowSCh=false;
		RoleCenter.lockArr=[];
		RoleCenter.scType=1;
		RoleCenter.reQueCount=5;
		__static(RoleCenter,
		['timeLs',function(){return this.timeLs=[25000,15000,10000,4000,2000,1000];}
		]);
		return RoleCenter;
	})(EventDispatcher)


	/**
	*新手引导总出事类(根据用uid的%类型判断进入新手引导1还是新手引导2)
	*@author xiaosong
	*@date-2017-06-20
	*/
	//class view.page.guide.GuideMgr extends laya.events.EventDispatcher
	var GuideMgr=(function(_super){
		function GuideMgr(){
			GuideMgr.__super.call(this);
		}

		__class(GuideMgr,'view.page.guide.GuideMgr',_super);
		var __proto=GuideMgr.prototype;
		/**初始化引导**/
		__proto.initGuide=function(){
			var userAgent=Browser.userAgent;
			var statTbs=new StatTbs();
			statTbs.event="v2_tbs";
			statTbs.tbs=userAgent;
			StatManager.I.addCustom(statTbs);
			StatManager.I.addTeach(StatManager.I.getStatData(StatID.s2_1_1[0]));
			Loading.bIsTeach=true;
			GuideMgr.isTeach=true;
			MenuList.inRoomByWhere=-1;
			HallApp.match(100,999);
		}

		__getset(1,GuideMgr,'instance',function(){
			return GuideMgr._instance=GuideMgr._instance|| new GuideMgr;
		},laya.events.EventDispatcher._$SET_instance);

		GuideMgr.isTeach=false;
		GuideMgr._instance=null
		return GuideMgr;
	})(EventDispatcher)


	/**
	*新手引导A版本(不进入孤岛)
	*@author xiaosong
	*@date-2017-2017-06-20
	*/
	//class view.page.guide.GuideMgrI extends laya.events.EventDispatcher
	var GuideMgrI=(function(_super){
		function GuideMgrI(){
			this.isMove=false;
			this.isAttack=false;
			this._guideMove=null;
			this._guideHeadTipsUI=null;
			this._traceOtherNode=null;
			this._attact_clip=null;
			this._guideAttackUI=null;
			this.guideLink=null;
			this.canRemoveTime=0;
			this.bShowMove=false;
			this._tipsArr=[
			"击中玩家可获取更多积分",
			"使用技能可造成更高伤害",
			"积分决定名次，名次越高奖励越高",
			"长按攻击或技能按键可进入蓄力模式",
			"每次攻击都会消耗积分，一定要瞄准哦！",
			"升级会变胖哦！移动速度和攻击速度会下降"];
			this._index=0;
			this.isStart=false;
			this._isActionType=0;
			this.totalNum=15;
			this.moveNum=0;
			this.attackNum=0;
			this.isInitAttackBtn=false;
			GuideMgrI.__super.call(this);
			this.guideLink=new GuideLink();
		}

		__class(GuideMgrI,'view.page.guide.GuideMgrI',_super);
		var __proto=GuideMgrI.prototype;
		/**初始化引导事件监听**/
		__proto.init=function(){
			view.page.guide.GuideMgrI.instance.on("step_guide",this,this.onStepGuide);
			var gv=GamingView.I;
			gv.viewRank.title.visible=false;
			gv.timeFont.visible=false;
		}

		/**
		*引导事件监听
		*@param stepType
		*@param data
		*/
		__proto.onStepGuide=function(stepType,data){
			GuideMgrI.currentGuideType=stepType;
			switch(stepType){
				case "step_start":{
						this.onStepStart();
						break ;
					}
				case "step_move":{
						this.onStepMove();
						break ;
					}
				}
		}

		/**移动英雄吃雪花**/
		__proto.onStepMove=function(){}
		/**开始显示引导**/
		__proto.onStepStart=function(){
			SnowTime.nuST && SnowTime.nuST.removeTime();
			SnowTime.nuST=null;
			this.onStartGuide();
			if(Browser.onMiniGame){
				LoadingSplash.I.dispose();
			}
		}

		/**开始新手引导**/
		__proto.onStartGuide=function(){
			if (!Player.curUser || !Player.isMapInit)return;
			Laya.timer.clear(this,this.onStartGuide);
			if(this._traceOtherNode==null)
				this._traceOtherNode=new TraceOtherNode();
			this.guideLink.start();
			this.onUpdate();
			Laya.timer.once(10000,this,function(){
				var resArr=[
				{url:"res/atlas/gameResultN.atlas",type:"atlas" },
				{url:"res/atlas/common.atlas",type:"atlas"},
				{url:"res/atlas/newhall.atlas",type:"atlas"},
				{url:"res/atlas/login2.atlas",type:"atlas"},
				{url:"res/atlas/ani/snow.atlas",type:"atlas" }];
				if(SnowUtils.chkIsFB()){
					resArr.push({url:"res/atlas/layacommon.atlas",type:"atlas"});
				}
				SnowLoad.I.load(resArr);
			});
			Laya.timer.frameLoop(1,this,this.onUpdate);
		}

		/**
		*移动
		*/
		__proto.starMove=function(tipsStr,duration,soundId){
			this.onCreateMoiveAni();
			SoundManager.playMusic(ConfigData.soundCfg[2]);
		}

		//
		__proto.onInitAttackTiShi2=function(tipsStr,duration,soundType){
			this.isInitAttackBtn=true;
			this.onTishiAttack(tipsStr,duration,soundType);
		}

		/**创建尖头指引UI**/
		__proto.onCreateMoiveAni=function(){
			this.bShowMove=true;
			this._guideMove=new GuideMoveUI();
			this.canRemoveTime=Laya.timer.currTimer+500;
			GamingView.I.addChild(this._guideMove);
			this._guideMove.bottom=80;
			this._guideMove.left=80;
			Laya.timer.once(500,this,function(){
				GamingView.I.gameCtrl.getMoveRocker().setStoped(false);
			});
			Laya.timer.frameLoop(1,this,this.removeGuideMove);
		}

		__proto.realRemveGuide=function(){
			this._guideMove.moveAni.stop();
			this._guideMove.moveAni.clear();
			this._guideMove.removeSelf();
			this._guideMove=null;
			this.bShowMove=false;
			GuideMgrI.fuckComplete(5,null);
		}

		/**移除指引尖头UI**/
		__proto.removeGuideMove=function(){
			if (Player.curUser && Player.curUser.isMove){
				Laya.timer.clear(this,this.removeGuideMove);
				var t=this.canRemoveTime-Laya.timer.currTimer;
				if (t < 0){
					this.realRemveGuide();
				}
				else{
					Laya.timer.once(t,this,this.realRemveGuide);
				}
				GamingView.I.gameCtrl.getMoveRocker().visible=true;
			}
		}

		/**tips循环播放tips方法**/
		__proto.onLoopTiShi=function(){
			if(this._index >=this._tipsArr.length){
				this._index=0;
			}
			Player.curUser && Player.curUser.showQiPao(this._tipsArr[this._index],9000);
			this._index++;
		}

		/**记录移动时间**/
		__proto.onJiluMoveTime=function(){
			if(this.moveNum==this.totalNum && !this.isMove && !this._isActionType && this._guideAttackUI && !this._guideAttackUI.visible){
				Laya.timer.loop(1000,this,this.onJiluAttackTime);
				this._isActionType=1;
				this.moveNum=0;
				Laya.timer.clear(this,this.onJiluMoveTime);
				this.onCreateMoiveAni();
				this.attackNum=0;
				}else{
				this.moveNum+=1;
			}
		}

		/**按钮按动的动画*/
		__proto.addAttactAni=function(){
			if (!this._attact_clip){
				this._attact_clip=new Clip();
				this._attact_clip.scale(GamingView.I.btnAttack.scaleX,GamingView.I.btnAttack.scaleY);
				GamingView.I.addChild(this._attact_clip);
			}
			if(!this._guideAttackUI){
				this._guideAttackUI=new GuideAttackViewUI();
				var skillbox1=GamingView.I.skillbox1;
				GamingView.I.addChild(this._guideAttackUI);
			};
			var clipAttack=GamingView.I.btnAttack.clipAttack;
			this._attact_clip.skin=clipAttack.skin;
			var po=new Point(0,0);
			clipAttack.localToGlobal(po);
			this._attact_clip.size(clipAttack.width,clipAttack.height);
			this._attact_clip.pos(po.x,po.y,true);
			this._attact_clip.clipY=2;
			this._attact_clip.interval=180;
			this._attact_clip.play();
			this._attact_clip.visible=true;
			this._guideAttackUI.visible=true;
			this._guideAttackUI.x=this._attact_clip.x-this._guideAttackUI.width+90;
			this._guideAttackUI.y=this._attact_clip.y-70;
		}

		/**移除进攻按钮动画**/
		__proto.removeAttactAni=function(){
			if (!this._attact_clip)return;
			this._attact_clip && (this._attact_clip.visible=false);
			this._attact_clip && (this._attact_clip.stop());
			if(this._guideAttackUI){
				var skillbox1=GamingView.I.skillbox1;
				if (!(skillbox1.btnskill).isEmpty){
					GamingView.I.a1.play();
				}
				this._guideAttackUI.jiantou.stop();
				this._guideAttackUI.visible=false;
			}
		}

		/**记录进攻的时间**/
		__proto.onJiluAttackTime=function(){
			if(this.attackNum==this.totalNum && !this.isAttack && !this._guideMove && (this._isActionType||!this._guideAttackUI.visible)){
				this.isStart=true;
				this.attackNum=0;
				Laya.timer.clear(this,this.onJiluAttackTime);
				this.addAttactAni();
				this.moveNum=0;
				this._isActionType=0;
				}else{
				this.attackNum+=1;
			}
		}

		/**按攻击按钮提示**/
		__proto.onTishiAttack=function(tipsStr,duration,soundType){
			StatManager.I.addTeach(StatManager.I.getStatData(StatID.s4_1_2[0]));
			if (!Player.curUser)return;
			this.isStart=true;
			this.addAttactAni();
			GamingView.I.btnAttack.visible=true;
			GamingView.I.skillbox2.visible=true;
			GamingView.I.skillbox1.visible=true;
			GamingView.I.skillbox3.visible=true;
			StatManager.I.addTeach(StatManager.I.getStatData(StatID.s4_2_1[0]));
			Laya.timer.once(6000,this,function(){
				StatManager.I.addTeach(StatManager.I.getStatData(StatID.s4_2_2[0]));
			});
		}

		/**
		*只设置内容
		*@param context
		*/
		__proto.onSetGuideMsgTxt=function(content){
			this._guideHeadTipsUI.content.text=content;
			this._guideHeadTipsUI.content.width=this._guideHeadTipsUI.content.textField.textWidth+8;
			this._guideHeadTipsUI.bg.width=this._guideHeadTipsUI.content.width+20;
			this._guideHeadTipsUI.paotouImg.x=this._guideHeadTipsUI.bg.width/2-10;
		}

		/**跟随气泡位置信息**/
		__proto.onUpdate=function(){
			this._traceOtherNode.update();
			this.guideLink.run(Laya.timer.currTimer);
		}

		/**清理三个倒计时**/
		__proto.clearTime=function(){
			var gv=GamingView.I;
			gv.gameCtrl.getMoveRocker().visible=true;
			gv.btnAttack.visible=true;
			gv.skillbox2.visible=true;
			gv.skillbox1.visible=true;
			gv.timeFont.visible=true;
			this.guideLink.clearAll();
			this.isMove=false;
			this.isAttack=false;
			this.bShowMove=false;
			this.moveNum=0;
			this.attackNum=0;
			Laya.timer.clear(this,this.onLoopTiShi);
			Laya.timer.clear(this,this.onJiluAttackTime);
			Laya.timer.clear(this,this.onJiluMoveTime);
			Laya.timer.clear(this,this.removeGuideMove);
			if(this._guideMove){
				this._guideMove.moveAni.stop();
				this._guideMove.moveAni.clear();
				this._guideMove.removeSelf();
				this._guideMove=null;
			}
			if (!this._attact_clip)return;
			this._attact_clip && (this._attact_clip.visible=false);
			this._attact_clip && (this._attact_clip.stop());
			if(this._attact_clip){
				this._attact_clip && (this._attact_clip.stop());
				this._attact_clip.removeSelf();
				this._attact_clip=null;
			}
			if(this._guideAttackUI){
				this._guideAttackUI.jiantou.stop();
				this._guideAttackUI.removeSelf();
				this._guideAttackUI=null;
			}
			Loader.clearRes("res/atlas/newguide.atlas");
			Loader.clearRes("newguide/0.jpg");
		}

		__getset(1,GuideMgrI,'instance',function(){
			return GuideMgrI._instance=GuideMgrI._instance|| new GuideMgrI();
		},laya.events.EventDispatcher._$SET_instance);

		GuideMgrI.clearAllTime=function(){
			if (GuideMgrI._instance){
				GuideMgrI._instance.clearTime();
			}
		}

		GuideMgrI.reconnect=function(){
			if (GuideMgrI._instance){
				GuideMgrI._instance.guideLink.start();
			}
		}

		GuideMgrI.fuckComplete=function(taskType,data){
			if (enumRoomType.nowType==100){
				GuideMgrI.instance.guideLink.complete(taskType,data);
			}
		}

		GuideMgrI.STEP_START="step_start";
		GuideMgrI.STEP_GUIDE="step_guide";
		GuideMgrI.STEP_MOVE="step_move";
		GuideMgrI.currentGuideType=null
		GuideMgrI._instance=null;
		__static(GuideMgrI,
		['skillTimes',function(){return this.skillTimes=[0,0];}
		]);
		return GuideMgrI;
	})(EventDispatcher)


	/**
	*...
	*@author luohuantao
	*/
	//class view.page.chat.vo.voFriendInfo extends laya8.core.social.FriendInfo
	var voFriendInfo=(function(_super){
		function voFriendInfo(){
			this.connection=0;
			this.hasUnreadMsg=false;
			this.isMutualFans=false;
			this.roomId=-1;
			this.teamId=-1;
			this.openId=null;
			this.index=0;
			this.lastLogoutTime=0;
			this.roomType=enumRoomType.ROOMTYPE_NONE;
			voFriendInfo.__super.call(this);
			this.userInfo=new UserBasicDataInfo();
		}

		__class(voFriendInfo,'view.page.chat.vo.voFriendInfo',_super);
		return voFriendInfo;
	})(FriendInfo)


	/**
	*...
	*@author luohuantao
	*/
	//class view.page.chat.vo.voGroupInfo extends laya8.core.social.GroupInfo
	var voGroupInfo=(function(_super){
		function voGroupInfo(){
			this.onlineNum=0;
			this.allNum=0;
			this.hasUnreadMsg=false;
			voGroupInfo.__super.call(this);
		}

		__class(voGroupInfo,'view.page.chat.vo.voGroupInfo',_super);
		return voGroupInfo;
	})(GroupInfo)


	/**
	*...
	*@author
	*/
	//class view.page.guide.GuideAIWalk extends view.page.guide.GuideNode
	var GuideAIWalk=(function(_super){
		function GuideAIWalk(){
			this.gantan=null;
			this.x=0;
			this.y=0;
			this.dir=1;
			this.step=0.02;
			this.minAlpha=0;
			this.maxAlpha=1;
			GuideAIWalk.__super.call(this);
		}

		__class(GuideAIWalk,'view.page.guide.GuideAIWalk',_super);
		var __proto=GuideAIWalk.prototype;
		__proto.begin=function(){
			this.addGantan();
			_super.prototype.begin.call(this);
		}

		__proto.run=function(t){
			if (this.beginTime){
				if ((t-this.beginTime)>2500){
					this.removeGanTan();
				}
				else if(this.gantan && this.gantan.alpha){
					var a=this.gantan.alpha+this.dir *this.step;
					if (a >=this.maxAlpha){
						a=this.maxAlpha;
						this.dir=-1;
					}
					else if (a <=this.minAlpha){
						a=this.minAlpha;
						this.dir=1;
					}
					this.gantan.alpha=a;
				}
			}
			return _super.prototype.run.call(this,t);
		}

		__proto.setRect=function(arr){
			this.x=arr[0];
			this.y=arr[1];
			_super.prototype.setRect.call(this,arr);
		}

		__proto.end=function(){
			this.removeGanTan();
			_super.prototype.end.call(this);
		}

		__proto.addGantan=function(){this.gantan=this.gantan|| Pool.getItemByClass("img_gantan",Image);
			this.gantan.removeSelf();
			this.gantan.skin="gaming/gantan.png";
			this.gantan.pivot(1 / 2 *this.gantan.width,1 / 2 *this.gantan.height);
			this.gantan.pos(this.x,this.y,true);
			Player.I.roleForeLayer.addChild(this.gantan);
		}

		__proto.removeGanTan=function(){
			if (this.gantan){
				this.gantan.alpha=1;
				this.gantan.removeSelf();
				Pool.recover("img_gantan",this.gantan);
				this.gantan=null;
			}
		}

		return GuideAIWalk;
	})(GuideNode)


	/**
	*...
	*@author
	*/
	//class view.page.guide.GuideAttack extends view.page.guide.GuideNode
	var GuideAttack=(function(_super){
		//public var gameContainer:Sprite;
		function GuideAttack(){
			GuideAttack.__super.call(this);
		}

		__class(GuideAttack,'view.page.guide.GuideAttack',_super);
		var __proto=GuideAttack.prototype;
		__proto.isFinish=function(dt,allt){
			return this.isended;
		}

		__proto.start=function(){
			if (!this.isplay){
				this._startFun();
				CheckAttackButton.enableXULI=false;
				var gv=GamingView.I;
				var btn=gv.btnAttack;
				GuideMask.getInstance().maskCircle(gv,gv.getChildIndex(gv.tipsObj),btn.x+1 / 2 *btn.width *btn.scaleX,btn.y+1 / 2 *btn.width *btn.scaleY,80,this.tipsStr,this.tipsy,this.tipsx,this.soundType);
			}
		}

		//GuideMgrI.instance.onInitAttackTiShi2(tipsStr,duration,soundType);
		__proto._attck=function(evt){
			evt.currentTarget.off("click",this,this._attck);
			GuideMask.getInstance().clear();
		}

		//}
		__proto.endFun=function(){}
		//})
		__proto.completeFun=function(data){
			this.isended=true;
			GuideMask.getInstance().clear();
		}

		//super.completeFun(data);
		__proto.clear=function(){
			_super.prototype.clear.call(this);
		}

		__proto.reconnect=function(){
			CheckAttackButton.enableXULI=false;
			_super.prototype.reconnect.call(this);
		}

		return GuideAttack;
	})(GuideNode)


	/**
	*...
	*@author
	*/
	//class view.page.guide.GuideKillPeople extends view.page.guide.GuideNode
	var GuideKillPeople=(function(_super){
		function GuideKillPeople(){
			this.count=0;
			this.killCount=0;
			GuideKillPeople.__super.call(this);
		}

		__class(GuideKillPeople,'view.page.guide.GuideKillPeople',_super);
		var __proto=GuideKillPeople.prototype;
		__proto.isFinish=function(dt,allt){
			return this.isended;
		}

		__proto.start=function(){
			if (!this.isplay){
				if(this.count==3)GamingView.I.timeFont.visible=true;
				this.isended=false;
				this.killCount=0;
				_super.prototype.start.call(this);
			}
		}

		__proto.completeFun=function(data){
			if (!this.isplay){
				this.start();
			}
			this.killCount++;
			if (this.killCount >=this.count){
				this.isended=true;
			}
		}

		return GuideKillPeople;
	})(GuideNode)


	/**
	*...
	*@author
	*/
	//class view.page.guide.GuideMove extends view.page.guide.GuideNode
	var GuideMove=(function(_super){
		function GuideMove(){
			this.jiantou=null;
			GuideMove.__super.call(this);
		}

		__class(GuideMove,'view.page.guide.GuideMove',_super);
		var __proto=GuideMove.prototype;
		__proto.isFinish=function(dt,allt){
			return this.isended;
		}

		__proto.begin=function(){
			_super.prototype.begin.call(this);
		}

		__proto.run=function(t){
			var result=_super.prototype.run.call(this,t);
			return result;
		}

		__proto.start=function(){
			if (!this.isplay){
				this._startFun();
				GuideMgrI.instance.starMove(this.tipsStr,this.duration,this.soundType);
				if (this.tipsType==0){
					this.tipsStr && Player.curUser.showQiPao(this.tipsStr,this.tipsDuration,this.soundType);
				}
				else{
					var gv=GamingView.I;
					var user=Player.curUser;
					var mx=gv.width / 2;
					var my=gv.height / 2;
					this.tipsStr && GuideMask.getInstance().maskCircle(gv,gv.getChildIndex(gv.tipsObj),176,gv.height-176,100,this.tipsStr,this.tipsy,this.tipsx,this.soundType);
				}
				if (this.actionReqs){
					GuideLink.actionrestrain(GuideLink.RESTACTION);
					this.actionReqs=null;
				}
			}
		}

		__proto.reconnect=function(){
			if(this.isplay &&!this.isended){
			}
			_super.prototype.reconnect.call(this);
		}

		return GuideMove;
	})(GuideNode)


	/**
	*...
	*@author
	*/
	//class view.page.guide.GuideMoveTarget extends view.page.guide.GuideNode
	var GuideMoveTarget=(function(_super){
		function GuideMoveTarget(){
			this.x=0;
			this.y=0;
			this.w=0;
			this.h=0;
			this.n=1;
			this.preStandTime=0;
			GuideMoveTarget.__super.call(this);
		}

		__class(GuideMoveTarget,'view.page.guide.GuideMoveTarget',_super);
		var __proto=GuideMoveTarget.prototype;
		__proto.isFinish=function(dt,allt){
			return this.isended;
		}

		__proto.setRect=function(arr){
			this.x=arr[0];
			this.y=arr[1];
			this.w=arr[2];
			this.h=arr[3];
		}

		__proto.begin=function(){
			_super.prototype.begin.call(this);
		}

		__proto.run=function(t){
			var gd=GuideMgrI._instance;
			if (gd&&this.preStandTime&&!gd.bShowMove){
				if (gd.isMove){
					this.preStandTime=Laya.timer.currTimer;
				}
				else if (t-this.preStandTime > 15000){
					gd.onCreateMoiveAni();
				}
			}
			return _super.prototype.run.call(this,t);
		}

		__proto.start=function(){
			if (!this.isplay){
				_super.prototype.start.call(this);
				GuideArrow.getInstance().onCreateStaticJianTou(this.x,this.y,Handler.create(this,this.endFun),this.w,this.h,this.n);
				this.preStandTime=Laya.timer.currTimer;
			}
		}

		__proto.endFun=function(){
			this.isended=true;
		}

		__proto.reconnect=function(){
			GuideArrow.getInstance().onCreateStaticJianTou(this.x,this.y,Handler.create(this,this.endFun),this.w,this.h,this.n);
			_super.prototype.reconnect.call(this);
		}

		return GuideMoveTarget;
	})(GuideNode)


	/**
	*...
	*@author
	*/
	//class view.page.guide.GuideSkill extends view.page.guide.GuideNode
	var GuideSkill=(function(_super){
		function GuideSkill(){
			GuideSkill.__super.call(this);
		}

		__class(GuideSkill,'view.page.guide.GuideSkill',_super);
		var __proto=GuideSkill.prototype;
		__proto.isFinish=function(dt,allt){
			return this.isended;
		}

		__proto.start=function(){
			if (!this.isplay){
				this._startFun();
				var gv=GamingView.I;
				var btn=gv.skillbox1;
				btn.on("click",this,this._attck);
				GuideMask.getInstance().maskCircle(gv,gv.getChildIndex(gv.tipsObj),btn.x+1 / 2 *btn.width *btn.scaleX,btn.y+1 / 2 *btn.width *btn.scaleY,80,this.tipsStr,this.tipsy,this.tipsx,this.soundType);
			}
		}

		//GuideMgrI.instance.onInitAttackTiShi2(tipsStr,duration,soundType);
		__proto._attck=function(){
			var gv=GamingView.I;
			var btn=gv.skillbox1;
			this.isended=true;
			btn.off("click",this,this._attck);
		}

		__proto.clear=function(){
			_super.prototype.clear.call(this);
			var gv=GamingView.I;
			var btn=gv.skillbox1;
			btn.off("click",this,this._attck);
		}

		return GuideSkill;
	})(GuideNode)


	/**
	*...
	*@author
	*/
	//class view.page.guide.GuideXuliAttack extends view.page.guide.GuideNode
	var GuideXuliAttack=(function(_super){
		//public var gameContainer:Sprite;
		function GuideXuliAttack(){
			GuideXuliAttack.__super.call(this);
		}

		__class(GuideXuliAttack,'view.page.guide.GuideXuliAttack',_super);
		var __proto=GuideXuliAttack.prototype;
		__proto.isFinish=function(dt,allt){
			return this.isended;
		}

		__proto.start=function(){
			if (!this.isplay){
				this._startFun();
				CheckAttackButton.onlyXuli=true;
				CheckAttackButton.enableXULI=true;
				var gv=GamingView.I;
				gv.gameCtrl.attackCtrl.setStoped(true);
				var btn=gv.btnAttack;
				GuideMask.getInstance().maskCircle(gv,gv.getChildIndex(gv.tipsObj),btn.x+1 / 2 *btn.width *btn.scaleX,btn.y+1 / 2 *btn.width *btn.scaleY,80,this.tipsStr,this.tipsy,this.tipsx,this.soundType);
				btn.on("xuli",this,this.xuli);
			}
		}

		//super.start();
		__proto.xuli=function(index){
			var gv=GamingView.I;
			var btn=gv.btnAttack;
			GuideMask.getInstance().clear();
			gv.gameCtrl.attackCtrl.setStoped(false);
			this.isended=true;
			CheckAttackButton.onlyXuli=false;
			btn.off("xuli",this,this.xuli);
		}

		__proto.clear=function(){
			_super.prototype.clear.call(this);
			var gv=GamingView.I;
			gv.gameCtrl.attackCtrl.setStoped(false);
			CheckAttackButton.onlyXuli=false;
		}

		return GuideXuliAttack;
	})(GuideNode)


	/**
	*...
	*@author 贾艳昭
	*/
	//class laya8.core.io.HallMessage extends laya.events.EventDispatcher
	var HallMessage=(function(_super){
		function HallMessage(hallWindow){
			this._hallWin=null;
			HallMessage.__super.call(this);
			var _$this=this;
			if (Browser.window.onHallReceiveMessage){
				hallWindow=Browser.window;
			}
			this._hallWin=hallWindow;
			if (Browser.window.runtime || this._hallWin!=hallWindow){
				Browser.window.addEventListener('message',function(e){
					_$this.onMessage(e);
				},false);
				}else{
				Browser.window.onSDKReceiveMessage=function (e){
					_$this.onMessage(e);
				}
			}
		}

		__class(HallMessage,'laya8.core.io.HallMessage',_super);
		var __proto=HallMessage.prototype;
		__proto.send=function(url,param,cache){
			(cache===void 0)&& (cache=true);
			var msg=new MsgInfo(url,param);
			msg.target='hall';
			if (!cache){
				msg.cache=false;
			}
			if (Browser.window.runtime){
				Browser.window.postRuntimeMessage(msg,'*');
				}else {
				if (this._hallWin!=Browser.window){
					this._hallWin.postMessage(JSON.stringify(msg),'*');
					}else{
					if (this._hallWin.onHallReceiveMessage){
						this._hallWin.onHallReceiveMessage({
							data:msg,
							origin:Browser.window.location.origin
						});
					}
				}
			}
		}

		__proto.onMessage=function(e){
			this.event("message",e);
		}

		return HallMessage;
	})(EventDispatcher)


	/**
	*...
	*@author 贾艳昭
	*/
	//class io.HallMessage extends laya.events.EventDispatcher
	var HallMessage$1=(function(_super){
		function HallMessage(hallWindow){
			this._hallWin=null;
			HallMessage.__super.call(this);
			var _$this=this;
			this._hallWin=hallWindow;
			if (Browser.window.runtime || this._hallWin!=hallWindow){
				Browser.window.addEventListener('message',function(e){
					_$this.onMessage(e);
				},false);
				}else{
				Browser.window.onHallReceiveMessage=function (e){
					_$this.onMessage(e);
				}
			}
		}

		__class(HallMessage,'io.HallMessage',_super,'HallMessage$1');
		var __proto=HallMessage.prototype;
		__proto.send=function(url,param){
			var msg=new MsgInfo$1(url,param);
			msg.target='sdk';
			if (Browser.window.runtime){
				Browser.window.postRuntimeMessage(msg,'*');
				}else {
				if (this._hallWin!=Browser.window){
					this._hallWin.postMessage(JSON.stringify(msg),'*');
					}else{
					if (this._hallWin.onSDKReceiveMessage){
						this._hallWin.onSDKReceiveMessage({
							data:msg,
							origin:'*'
						});
					}
				}
			}
		}

		__proto.onMessage=function(e){
			this.event("message",e);
		}

		return HallMessage;
	})(EventDispatcher)


	/**
	*...
	*@author 贾艳昭
	*/
	//class io.Laya8Socket extends laya.events.EventDispatcher
	var Laya8Socket=(function(_super){
		function Laya8Socket(host,port,ssl,maxRetryTime){
			this.maxRetryTime=-1;
			this.retryTimeSpan=30000;
			this._socket=null;
			this.host=null;
			this.port=0;
			this.ssl=false;
			this.retryCount=0;
			Laya8Socket.__super.call(this);
			(ssl===void 0)&& (ssl=false);
			(maxRetryTime===void 0)&& (maxRetryTime=-1);
			this.maxRetryTime=maxRetryTime;
			this.host=host;
			this.port=port;
			this.ssl=ssl;
			Method.log('发起WebSocket连接:'+host+':'+port+',ssl='+ssl);
			this._createSocket();
			Laya.timer.once(this.retryTimeSpan,this,this._retry);
		}

		__class(Laya8Socket,'io.Laya8Socket',_super);
		var __proto=Laya8Socket.prototype;
		__proto._retry=function(){
			if (this.retryCount > this.maxRetryTime){
				Method.log('重试次数已超过'+this.maxRetryTime+'次, 不再尝试');
				this.onError(null);
				return;
			}
			this.retryCount++;
			Method.log('正在进行第 '+this.retryCount+' 次重试, WebSocket'+this.host+':'+this.port+',ssl='+this.ssl);
			if (this._socket!=null){
				this._socket.offAll();
				this._socket.close();
				this._socket=null;
			}
			this._createSocket();
			Laya.timer.once(this.retryTimeSpan,this,this._retry);
		}

		__proto._cancelRetry=function(){
			Method.log('停止超时重连机制 WebSocket:'+this.host+':'+this.port+',ssl='+this.ssl);
			Laya.timer.clear(this,this._retry);
			this.retryCount=0;
		}

		__proto._createSocket=function(){
			if (this._socket!=null){
				this._socket.offAll();
				this._socket.close();
			}
			this._socket=new Socket(this.host,this.ssl?0:this.port);
			if (this.ssl){
				this._socket.connectByUrl('wss://'+this.host+':'+this.port);
			}
			this._socket.on("open",this,this.onOpen);
			this._socket.on("message",this,this.onMessage);
			this._socket.on("error",this,this.onError);
			this._socket.on("close",this,this.onClose);
		}

		__proto.isConnected=function(){
			return this._socket.connected;
		}

		__proto.onOpen=function(e){
			this._cancelRetry();
			this.event("open",e);
		}

		__proto.onMessage=function(e){
			this.event("message",e);
		}

		__proto.onError=function(e){
			this._cancelRetry();
			this.event("error",e);
		}

		__proto.onClose=function(e){
			this._cancelRetry();
			this.event("close",e);
		}

		__proto.send=function(cmd,params){
			var msgObj=new MsgInfo$1(cmd,params);
			delete msgObj['target'];
			delete msgObj['cache'];
			var json=JSON.stringify(msgObj);
			if (this._socket.connected){
				Method.log('[Socket Send]'+json);
				this._socket.send(json);
				}else{
				this.close();
			}
		}

		__proto.close=function(){
			if (this._socket !=null && this._socket.connected){
				this._socket.offAll();
				this._socket.close();
				this.onClose(null);
			}
		}

		return Laya8Socket;
	})(EventDispatcher)


	/**
	*...
	*@author dongketao
	*/
	//class msgCln.CGMCommand extends MsgTemplate
	var CGMCommand=(function(_super){
		function CGMCommand(){
			this.roomID=0;
			CGMCommand.__super.call(this);
		}

		__class(CGMCommand,'msgCln.CGMCommand',_super);
		CGMCommand.MSGID=0;
		return CGMCommand;
	})(MsgTemplate)


	/**
	*...
	*@author luohuantao
	*/
	//class msgCln.CGMSelectSkill extends MsgTemplate
	var CGMSelectSkill=(function(_super){
		function CGMSelectSkill(){
			this.skillID=0;
			CGMSelectSkill.__super.call(this);
		}

		__class(CGMSelectSkill,'msgCln.CGMSelectSkill',_super);
		var __proto=CGMSelectSkill.prototype;
		__proto.clientWriteBody=function(msg){
			msg.writeUint16(this.skillID);
			return true;
		}

		__proto.serverReadBody=function(msg,msgLen){
			this.skillID=msg.getUint16();
			return true;
		}

		CGMSelectSkill.MSGID=0;
		return CGMSelectSkill;
	})(MsgTemplate)


	/**
	*...
	*@author ...
	*/
	//class msgCln.CMsgAddTrainingAi extends MsgTemplate
	var CMsgAddTrainingAi=(function(_super){
		function CMsgAddTrainingAi(){
			CMsgAddTrainingAi.__super.call(this);
		}

		__class(CMsgAddTrainingAi,'msgCln.CMsgAddTrainingAi',_super);
		var __proto=CMsgAddTrainingAi.prototype;
		__proto.clientWriteBody=function(msg){
			return true;
		}

		__proto.serverReadBody=function(msg,msgLen){
			return true;
		}

		__proto.clear=function(){
			return _super.prototype.clear.call(this);
		}

		CMsgAddTrainingAi.MSGID=0;
		return CMsgAddTrainingAi;
	})(MsgTemplate)


	/**
	*...
	*@author Chen Gong
	*/
	//class msgCln.CMsgCancelRabitChange extends MsgTemplate
	var CMsgCancelRabitChange=(function(_super){
		function CMsgCancelRabitChange(){
			CMsgCancelRabitChange.__super.call(this);
		}

		__class(CMsgCancelRabitChange,'msgCln.CMsgCancelRabitChange',_super);
		var __proto=CMsgCancelRabitChange.prototype;
		__proto.clientWriteBody=function(msg){
			return true;
		}

		__proto.serverReadBody=function(msg,msgLen){
			return true;
		}

		CMsgCancelRabitChange.MSGID=0;
		return CMsgCancelRabitChange;
	})(MsgTemplate)


	/**
	*...
	*@author dongketao
	*/
	//class msgCln.CMsgCBullet extends MsgTemplate
	var CMsgCBullet=(function(_super){
		function CMsgCBullet(){
			this.aiUID=0;
			this.angle=NaN;
			this.coefficient=NaN;
			CMsgCBullet.__super.call(this);
		}

		__class(CMsgCBullet,'msgCln.CMsgCBullet',_super);
		var __proto=CMsgCBullet.prototype;
		__proto.clientWriteBody=function(msg){
			msg.writeInt32(this.aiUID);
			msg.writeUint8(Math.floor(this.angle/2));
			msg.writeUint8(Math.floor(this.coefficient*100));
			return true;
		}

		__proto.serverReadBody=function(msg,msgLen){
			this.aiUID=msg.getInt32();
			this.angle=msg.getUint8()*2;
			this.coefficient=msg.getUint8()/ 100;
			return true;
		}

		CMsgCBullet.MSGID=0;
		return CMsgCBullet;
	})(MsgTemplate)


	/**
	*...
	*@author rivetr
	*/
	//class msgCln.CMsgChat extends MsgTemplate
	var CMsgChat=(function(_super){
		function CMsgChat(){
			this.chatMsgType=0;
			this.chatMsgData=null;
			CMsgChat.__super.call(this);
		}

		__class(CMsgChat,'msgCln.CMsgChat',_super);
		CMsgChat.MSGID=0;
		return CMsgChat;
	})(MsgTemplate)


	/**
	*...
	*@author dongketao
	*/
	//class msgCln.CMsgChgRank extends MsgTemplate
	var CMsgChgRank=(function(_super){
		function CMsgChgRank(){
			this.rankSwitch=0;
			CMsgChgRank.__super.call(this);
		}

		__class(CMsgChgRank,'msgCln.CMsgChgRank',_super);
		var __proto=CMsgChgRank.prototype;
		__proto.clientWriteBody=function(msg){
			msg.writeUint8(this.rankSwitch);
			return true;
		}

		__proto.serverReadBody=function(msg,msgLen){
			this.rankSwitch=msg.getUint8();
			return true;
		}

		CMsgChgRank.MSGID=0;
		return CMsgChgRank;
	})(MsgTemplate)


	//class msgCln.CMsgChgUserState extends MsgTemplate
	var CMsgChgUserState=(function(_super){
		function CMsgChgUserState(){
			this.stateMark=0;
			this.stateValue=0;
			CMsgChgUserState.__super.call(this);
		}

		__class(CMsgChgUserState,'msgCln.CMsgChgUserState',_super);
		var __proto=CMsgChgUserState.prototype;
		__proto.clientWriteBody=function(msg){
			msg.writeUint8(this.stateMark);
			msg.writeUint8(this.stateValue);
			return true;
		}

		__proto.serverReadBody=function(msg,msgLen){
			this.stateMark=msg.getUint8();
			this.stateValue=msg.getUint8();
			return true;
		}

		__proto.clear=function(){
			this.stateMark=this.stateValue=0;
			return _super.prototype.clear.call(this);
		}

		CMsgChgUserState.MSGID=0;
		return CMsgChgUserState;
	})(MsgTemplate)


	/**
	*...
	*@author ...
	*/
	//class msgCln.CMsgContinueTime extends MsgTemplate
	var CMsgContinueTime=(function(_super){
		function CMsgContinueTime(){
			CMsgContinueTime.__super.call(this);
		}

		__class(CMsgContinueTime,'msgCln.CMsgContinueTime',_super);
		var __proto=CMsgContinueTime.prototype;
		__proto.clientWriteBody=function(msg){
			return true;
		}

		__proto.serverReadBody=function(msg,msgLen){
			return true;
		}

		CMsgContinueTime.MSGID=0;
		return CMsgContinueTime;
	})(MsgTemplate)


	/**
	*...
	*@author Chen Gong
	*/
	//class msgCln.CMsgControlBullet extends MsgTemplate
	var CMsgControlBullet=(function(_super){
		function CMsgControlBullet(){
			this.angle=0;
			CMsgControlBullet.__super.call(this);
		}

		__class(CMsgControlBullet,'msgCln.CMsgControlBullet',_super);
		var __proto=CMsgControlBullet.prototype;
		__proto.clientWriteBody=function(msg){
			msg.writeUint8(this.angle==-1?0xFF:Math.floor(this.angle / 2));
			return true;
		}

		__proto.serverReadBody=function(msg,msgLen){
			this.angle=msg.getUint8();
			if (this.angle==0xFF)this.angle=-1;
			else this.angle *=2;
			return true;
		}

		CMsgControlBullet.MSGID=0;
		return CMsgControlBullet;
	})(MsgTemplate)


	/**
	*...
	*@author Chen Gong
	*/
	//class msgCln.CMsgEatLolipop extends MsgTemplate
	var CMsgEatLolipop=(function(_super){
		function CMsgEatLolipop(){
			CMsgEatLolipop.__super.call(this);
		}

		__class(CMsgEatLolipop,'msgCln.CMsgEatLolipop',_super);
		CMsgEatLolipop.MSGID=0;
		return CMsgEatLolipop;
	})(MsgTemplate)


	/**
	*...
	*@author anling
	*/
	//class msgCln.CMsgExClose extends MsgTemplate
	var CMsgExClose=(function(_super){
		function CMsgExClose(){CMsgExClose.__super.call(this);;
		};

		__class(CMsgExClose,'msgCln.CMsgExClose',_super);
		CMsgExClose.MSGID=0;
		return CMsgExClose;
	})(MsgTemplate)


	/**
	*dkt
	*@author ...
	*/
	//class msgCln.CMsgFightExpression extends MsgTemplate
	var CMsgFightExpression=(function(_super){
		function CMsgFightExpression(){
			this.expressionId=0;
			CMsgFightExpression.__super.call(this);
		}

		__class(CMsgFightExpression,'msgCln.CMsgFightExpression',_super);
		var __proto=CMsgFightExpression.prototype;
		__proto.clientWriteBody=function(msg){
			msg.writeUint16(this.expressionId);
			return true;
		}

		__proto.serverReadBody=function(msg,msgLen){
			this.expressionId=msg.getUint16();
			return true;
		}

		__proto.clear=function(){
			this.expressionId=0;
			return _super.prototype.clear.call(this);
		}

		CMsgFightExpression.MSGID=0;
		return CMsgFightExpression;
	})(MsgTemplate)


	/**
	*...
	*@author dongketao
	*/
	//class msgCln.CMsgHeartBeatRes extends MsgTemplate
	var CMsgHeartBeatRes=(function(_super){
		function CMsgHeartBeatRes(){
			this.timeClinet=NaN;
			this.timeServer=NaN;
			CMsgHeartBeatRes.__super.call(this);
		}

		__class(CMsgHeartBeatRes,'msgCln.CMsgHeartBeatRes',_super);
		var __proto=CMsgHeartBeatRes.prototype;
		__proto.clientWriteBody=function(msg){
			msg.writeFloat64(this.timeClinet);
			return true;
		}

		__proto.clientReadBody=function(msg,msgLen){
			this.timeClinet=msg.getFloat64();
			this.timeServer=msg.getFloat64();
			return true;
		}

		__proto.serverReadBody=function(msg,msgLen){
			this.timeClinet=msg.getFloat64();
			return true;
		}

		__proto.serverWriteBody=function(msg){
			msg.writeFloat64(this.timeClinet);
			msg.writeFloat64(this.timeServer);
			return true;
		}

		//客服端接到心跳回答后做，得到服务器与客服端最小差值
		__proto._calServerTime=function(curTime){
			var ping=curTime-this.timeClinet;
			if (CMsgHeartBeatRes._minPing > ping){
				CMsgHeartBeatRes._minPing=ping;
			}
			CMsgHeartBeatRes._dtimeOfServer=this.timeServer+Math.floor(ping/2)-curTime;
		}

		CMsgHeartBeatRes.getServerTime=function(curTime){
			return curTime+CMsgHeartBeatRes._dtimeOfServer;
		}

		CMsgHeartBeatRes.MSGID=0;
		CMsgHeartBeatRes._dtimeOfServer=0xDFFFFFFF;
		CMsgHeartBeatRes._minPing=0xDFFFFFFF;
		return CMsgHeartBeatRes;
	})(MsgTemplate)


	/**
	*...
	*@author anling
	*/
	//class msgCln.CMsgLeaveGame extends MsgTemplate
	var CMsgLeaveGame=(function(_super){
		function CMsgLeaveGame(){CMsgLeaveGame.__super.call(this);;
		};

		__class(CMsgLeaveGame,'msgCln.CMsgLeaveGame',_super);
		CMsgLeaveGame.MSGID=0;
		return CMsgLeaveGame;
	})(MsgTemplate)


	/**
	*所有客户端进入到服务器，都使用相同的LoginSvr消息
	*...
	*@author rivetr
	*/
	//class msgCln.CMsgLoginGS extends MsgTemplate
	var CMsgLoginGS=(function(_super){
		function CMsgLoginGS(){
			this.username=null;
			this.userUID=0;
			this.userGameUID=0;
			this.userLoginTokenId=0;
			this.channelId=0;
			this.isLunpanIn=0;
			this.userRoomId=0;
			this.key=0;
			this.reconnection=0;
			this.isForcein=0;
			this.forceinTeamID=0;
			this.trainLevelId=1;
			this.talkAuthority=0;
			this.talkOnBeAttack="";
			this.talkOnDead="";
			this.useravator=0;
			this.userquan=0;
			this.userbullet=0;
			this.userlevel=1;
			this.usergender=1;
			this.isBear=false;
			this.isRabit=false;
			this.birthScoreScale=1;
			this.birthX=0;
			this.birthY=0;
			CMsgLoginGS.__super.call(this);
		}

		__class(CMsgLoginGS,'msgCln.CMsgLoginGS',_super);
		var __proto=CMsgLoginGS.prototype;
		__proto.clientWriteBody=function(msg){
			msg.writeInt32(this.userGameUID);
			msg.writeUint16(this.key);
			msg.writeUint8(this.isForcein);
			msg.writeUint8(this.forceinTeamID);
			msg.writeUint16(this.trainLevelId);
			msg.writeUint8(this.reconnection);
			return true;
		}

		__proto.serverReadBody=function(msg,msgLen){
			this.userGameUID=msg.getInt32();
			this.key=msg.getUint16();
			this.isForcein=msg.getUint8();
			this.forceinTeamID=msg.getUint8();
			this.trainLevelId=msg.getUint16();
			this.reconnection=msg.getUint8();
			return true;
		}

		__proto.clear=function(){
			this.isBear=false;
			this.isRabit=false;
			this.username="";
			this.userUID=0;
			this.userGameUID=0;
			this.userLoginTokenId=0;
			this.channelId=0;
			this.isLunpanIn=0;
			this.userRoomId=0;
			this.key=0;
			this.reconnection=0;
			this.isForcein=0;
			this.forceinTeamID=0;
			this.trainLevelId=1;
			return _super.prototype.clear.call(this);
		}

		CMsgLoginGS.MSGID=0;
		return CMsgLoginGS;
	})(MsgTemplate)


	/**
	*...
	*@author Chen Gong
	*/
	//class msgCln.CMsgMeeleAttack extends MsgTemplate
	var CMsgMeeleAttack=(function(_super){
		function CMsgMeeleAttack(){
			this.targetUid=0;
			this.angle=NaN;
			CMsgMeeleAttack.__super.call(this);
		}

		__class(CMsgMeeleAttack,'msgCln.CMsgMeeleAttack',_super);
		var __proto=CMsgMeeleAttack.prototype;
		__proto.clientWriteBody=function(msg){
			msg.writeInt32(this.targetUid);
			msg.writeUint8(Math.floor(this.angle/2));
			return true;
		}

		__proto.serverReadBody=function(msg,msgLen){
			this.targetUid=msg.getInt32();
			this.angle=msg.getUint8()*2;
			return true;
		}

		CMsgMeeleAttack.MSGID=0;
		return CMsgMeeleAttack;
	})(MsgTemplate)


	/**
	*新手关主动结算
	*...
	*@author
	*/
	//class msgCln.CMsgNewBieEnd extends MsgTemplate
	var CMsgNewBieEnd=(function(_super){
		function CMsgNewBieEnd(){CMsgNewBieEnd.__super.call(this);;
		};

		__class(CMsgNewBieEnd,'msgCln.CMsgNewBieEnd',_super);
		CMsgNewBieEnd.MSGID=0;
		return CMsgNewBieEnd;
	})(MsgTemplate)


	/**
	*...
	*@author Chen Gong
	*/
	//class msgCln.CMsgNewbieInfo extends MsgTemplate
	var CMsgNewbieInfo=(function(_super){
		function CMsgNewbieInfo(){
			this.score=NaN;
			CMsgNewbieInfo.__super.call(this);
		}

		__class(CMsgNewbieInfo,'msgCln.CMsgNewbieInfo',_super);
		var __proto=CMsgNewbieInfo.prototype;
		__proto.clientWriteBody=function(msg){
			msg.writeInt32(this.score);
			return true;
		}

		__proto.serverReadBody=function(msg,msgLen){
			this.score=msg.getInt32();
			return true;
		}

		CMsgNewbieInfo.MSGID=0;
		return CMsgNewbieInfo;
	})(MsgTemplate)


	/**
	*...
	*@author dkt
	*/
	//class msgCln.CMsgNewbieStep extends MsgTemplate
	var CMsgNewbieStep=(function(_super){
		function CMsgNewbieStep(){
			this.step=NaN;
			CMsgNewbieStep.__super.call(this);
		}

		__class(CMsgNewbieStep,'msgCln.CMsgNewbieStep',_super);
		var __proto=CMsgNewbieStep.prototype;
		__proto.clientWriteBody=function(msg){
			msg.writeInt32(this.step);
			return true;
		}

		__proto.serverReadBody=function(msg,msgLen){
			this.step=msg.getInt32();
			return true;
		}

		CMsgNewbieStep.MSGID=0;
		return CMsgNewbieStep;
	})(MsgTemplate)


	/**
	*...
	*@author anling
	*/
	//class msgCln.CMsgNextRound extends MsgTemplate
	var CMsgNextRound=(function(_super){
		function CMsgNextRound(){CMsgNextRound.__super.call(this);;
		};

		__class(CMsgNextRound,'msgCln.CMsgNextRound',_super);
		CMsgNextRound.MSGID=0;
		return CMsgNextRound;
	})(MsgTemplate)


	/**
	*...
	*@author ...
	*/
	//class msgCln.CMsgPauseTime extends MsgTemplate
	var CMsgPauseTime=(function(_super){
		function CMsgPauseTime(){
			CMsgPauseTime.__super.call(this);
		}

		__class(CMsgPauseTime,'msgCln.CMsgPauseTime',_super);
		var __proto=CMsgPauseTime.prototype;
		__proto.clientWriteBody=function(msg){
			return true;
		}

		__proto.serverReadBody=function(msg,msgLen){
			return true;
		}

		CMsgPauseTime.MSGID=0;
		return CMsgPauseTime;
	})(MsgTemplate)


	/**
	*...
	*@author Chen Gong
	*/
	//class msgCln.CMsgPetAttack extends MsgTemplate
	var CMsgPetAttack=(function(_super){
		function CMsgPetAttack(){
			this.angle=NaN;
			CMsgPetAttack.__super.call(this);
		}

		__class(CMsgPetAttack,'msgCln.CMsgPetAttack',_super);
		var __proto=CMsgPetAttack.prototype;
		__proto.clientWriteBody=function(msg){
			msg.writeUint8(this.angle==-1?0xFF:Math.floor(this.angle / 2));
			return true;
		}

		__proto.serverReadBody=function(msg,msgLen){
			this.angle=msg.getUint8();
			if (this.angle==0xFF)this.angle=-1;
			else this.angle *=2;
			return true;
		}

		CMsgPetAttack.MSGID=0;
		return CMsgPetAttack;
	})(MsgTemplate)


	/**
	*拾取雪堆
	*@author ...
	*/
	//class msgCln.CMsgPickUpSnow extends MsgTemplate
	var CMsgPickUpSnow=(function(_super){
		function CMsgPickUpSnow(){
			CMsgPickUpSnow.__super.call(this);
		}

		__class(CMsgPickUpSnow,'msgCln.CMsgPickUpSnow',_super);
		var __proto=CMsgPickUpSnow.prototype;
		__proto.clientWriteBody=function(msg){
			return true;
		}

		__proto.serverReadBody=function(msg,msgLen){
			return true;
		}

		CMsgPickUpSnow.MSGID=0;
		return CMsgPickUpSnow;
	})(MsgTemplate)


	/**
	*...
	*@author ...
	*/
	//class msgCln.CMsgReadyBullet extends MsgTemplate
	var CMsgReadyBullet=(function(_super){
		function CMsgReadyBullet(){
			this.readyState=0;
			this.skillIndex=0;
			CMsgReadyBullet.__super.call(this);
		}

		__class(CMsgReadyBullet,'msgCln.CMsgReadyBullet',_super);
		var __proto=CMsgReadyBullet.prototype;
		__proto.clientWriteBody=function(msg){
			msg.writeUint8(this.readyState);
			msg.writeUint8(this.skillIndex);
			return true;
		}

		__proto.serverReadBody=function(msg,msgLen){
			this.readyState=msg.getUint8();
			this.skillIndex=msg.getUint8();
			return true;
		}

		CMsgReadyBullet.MSGID=0;
		return CMsgReadyBullet;
	})(MsgTemplate)


	/**
	*...
	*@author dongketao
	*/
	//class msgCln.CMsgReadyStart extends MsgTemplate
	var CMsgReadyStart=(function(_super){
		function CMsgReadyStart(){
			this.userRoomId=0;
			this.userRoomType=1;
			this.inviteGameUID=-1;
			this.friendGameUID=-1;
			CMsgReadyStart.__super.call(this);
		}

		__class(CMsgReadyStart,'msgCln.CMsgReadyStart',_super);
		var __proto=CMsgReadyStart.prototype;
		__proto.clientWriteBody=function(msg){
			msg.writeInt32(this.userRoomId);
			msg.writeInt32(this.inviteGameUID);
			msg.writeInt32(this.friendGameUID);
			msg.writeUint8(this.userRoomType);
			return true;
		}

		__proto.serverReadBody=function(msg,msgLen){
			this.userRoomId=msg.getInt32();
			this.inviteGameUID=msg.getInt32();
			this.friendGameUID=msg.getInt32();
			this.userRoomType=msg.getUint8();
			return true;
		}

		__proto.clear=function(){
			this.userRoomId=0;
			this.userRoomType=1;
			this.inviteGameUID=-1;
			this.friendGameUID=-1;
			return _super.prototype.clear.call(this);
		}

		CMsgReadyStart.MSGID=0;
		return CMsgReadyStart;
	})(MsgTemplate)


	/**
	*...
	*@author anling
	*/
	//class msgCln.CMsgRebirth extends MsgTemplate
	var CMsgRebirth=(function(_super){
		function CMsgRebirth(){
			this.rebirthScoreScale=NaN;
			CMsgRebirth.__super.call(this);
		}

		__class(CMsgRebirth,'msgCln.CMsgRebirth',_super);
		CMsgRebirth.MSGID=0;
		return CMsgRebirth;
	})(MsgTemplate)


	/**
	*...
	*@author dongketao
	*/
	//class msgCln.CMsgRegister extends MsgTemplate
	var CMsgRegister=(function(_super){
		function CMsgRegister(){
			this.username=null;
			this.password=null;
			this.userUID=0;
			this.userGameUID=0;
			this.userLoginTokenId=0;
			this.userRoomId=0;
			CMsgRegister.__super.call(this);
		}

		__class(CMsgRegister,'msgCln.CMsgRegister',_super);
		CMsgRegister.MSGID=0;
		return CMsgRegister;
	})(MsgTemplate)


	/**
	*请求房间剩余时间消息
	*...
	*@author
	*/
	//class msgCln.CMsgRoomResidualTime extends MsgTemplate
	var CMsgRoomResidualTime=(function(_super){
		function CMsgRoomResidualTime(){CMsgRoomResidualTime.__super.call(this);;
		};

		__class(CMsgRoomResidualTime,'msgCln.CMsgRoomResidualTime',_super);
		CMsgRoomResidualTime.MSGID=0;
		return CMsgRoomResidualTime;
	})(MsgTemplate)


	/**
	*...
	*@author ...
	*/
	//class msgCln.CMsgSelectSkill extends MsgTemplate
	var CMsgSelectSkill=(function(_super){
		function CMsgSelectSkill(){
			this.skillID=0;
			CMsgSelectSkill.__super.call(this);
		}

		__class(CMsgSelectSkill,'msgCln.CMsgSelectSkill',_super);
		var __proto=CMsgSelectSkill.prototype;
		__proto.clientWriteBody=function(msg){
			msg.writeUint32(this.skillID);
			return true;
		}

		__proto.serverReadBody=function(msg,msgLen){
			this.skillID=msg.getUint32();
			return true;
		}

		CMsgSelectSkill.MSGID=0;
		return CMsgSelectSkill;
	})(MsgTemplate)


	/**
	*显示狙击感叹号
	*...
	*@author
	*/
	//class msgCln.CMsgShowTan extends MsgTemplate
	var CMsgShowTan=(function(_super){
		function CMsgShowTan(){CMsgShowTan.__super.call(this);;
		};

		__class(CMsgShowTan,'msgCln.CMsgShowTan',_super);
		CMsgShowTan.MSGID=0;
		return CMsgShowTan;
	})(MsgTemplate)


	/**
	*...
	*@author dkt
	*/
	//class msgCln.CMsgSkillSlot extends MsgTemplate
	var CMsgSkillSlot=(function(_super){
		function CMsgSkillSlot(){
			this.skillIndex=0;
			CMsgSkillSlot.__super.call(this);
		}

		__class(CMsgSkillSlot,'msgCln.CMsgSkillSlot',_super);
		var __proto=CMsgSkillSlot.prototype;
		__proto.clientWriteBody=function(msg){
			msg.writeByte(this.skillIndex);
			return true;
		}

		__proto.serverReadBody=function(msg,msgLen){
			this.skillIndex=msg.readByte();
			return true;
		}

		__proto.clear=function(){
			this.skillIndex=0;
			return _super.prototype.clear.call(this);
		}

		CMsgSkillSlot.MSGID=0;
		return CMsgSkillSlot;
	})(MsgTemplate)


	/**
	*李飞
	*@author ...
	*/
	//class msgCln.CMsgSpeak extends MsgTemplate
	var CMsgSpeak=(function(_super){
		function CMsgSpeak(){
			this.worldKey=0;
			this.type=0;
			CMsgSpeak.__super.call(this);
		}

		__class(CMsgSpeak,'msgCln.CMsgSpeak',_super);
		var __proto=CMsgSpeak.prototype;
		__proto.clientWriteBody=function(msg){
			msg.writeUint8(this.worldKey);
			msg.writeUint8(this.type);
			return true;
		}

		__proto.serverReadBody=function(msg,msgLen){
			this.worldKey=msg.getUint8();
			this.type=msg.getUint8();
			return true;
		}

		CMsgSpeak.MSGID=0;
		return CMsgSpeak;
	})(MsgTemplate)


	/**
	*卡墙了
	*...
	*@author
	*/
	//class msgCln.CMsgStuck extends MsgTemplate
	var CMsgStuck=(function(_super){
		function CMsgStuck(){CMsgStuck.__super.call(this);;
		};

		__class(CMsgStuck,'msgCln.CMsgStuck',_super);
		CMsgStuck.MSGID=0;
		return CMsgStuck;
	})(MsgTemplate)


	//class msgCln.CMsgTeamAvatar extends MsgTemplate
	var CMsgTeamAvatar=(function(_super){
		function CMsgTeamAvatar(){CMsgTeamAvatar.__super.call(this);;
		};

		__class(CMsgTeamAvatar,'msgCln.CMsgTeamAvatar',_super);
		CMsgTeamAvatar.MSGID=0;
		return CMsgTeamAvatar;
	})(MsgTemplate)


	/**
	*暂时先有这么一个数据结构，接下来再确认哪些数据必需，哪些可以去掉
	*...
	*@author rivetr
	*/
	//class msgCln.CMsgUserDeltaMove extends MsgTemplate
	var CMsgUserDeltaMove=(function(_super){
		function CMsgUserDeltaMove(){
			this.aiUID=0;
			this.angle=0;
			this.x=0;
			this.y=0;
			this.lastTime=0;
			this.deltax=NaN;
			this.deltay=NaN;
			this.baseTime=0;
			CMsgUserDeltaMove.__super.call(this);
		}

		__class(CMsgUserDeltaMove,'msgCln.CMsgUserDeltaMove',_super);
		var __proto=CMsgUserDeltaMove.prototype;
		__proto.clientWriteBody=function(msg){
			msg.writeFloat64(this.baseTime);
			msg.writeInt32(this.aiUID);
			msg.writeInt16(this.x);
			msg.writeInt16(this.y);
			msg.writeInt16(0 | (this.deltax / 4));
			msg.writeInt16(0 | (this.deltay / 4));
			return true;
		}

		__proto.serverReadBody=function(msg,msgLen){
			this.baseTime=msg.getFloat64();
			this.aiUID=msg.getInt32();
			this.x=msg.getInt16();
			this.y=msg.getInt16();
			this.deltax=msg.getInt16()*4;
			this.deltay=msg.getInt16()*4;
			return true;
		}

		CMsgUserDeltaMove.MSGID=0;
		return CMsgUserDeltaMove;
	})(MsgTemplate)


	/**
	*暂时先有这么一个数据结构，接下来再确认哪些数据必需，哪些可以去掉
	*...
	*@author rivetr
	*/
	//class msgCln.CMsgUserMove extends MsgTemplate
	var CMsgUserMove=(function(_super){
		function CMsgUserMove(){
			this.uid=0;
			this.angle=0;
			this.x=0;
			this.y=0;
			this.baseTime=0;
			CMsgUserMove.__super.call(this);
		}

		__class(CMsgUserMove,'msgCln.CMsgUserMove',_super);
		var __proto=CMsgUserMove.prototype;
		__proto.clientWriteBody=function(msg){
			msg.writeInt32(this.uid);
			msg.writeUint8(this.angle==-1?0xFF:Math.floor(this.angle / 5));
			msg.writeInt16(this.x);
			msg.writeInt16(this.y);
			msg.writeFloat64(this.baseTime);
			return true;
		}

		__proto.serverReadBody=function(msg,msgLen){
			this.uid=msg.getInt32();
			this.angle=msg.getUint8();
			if (this.angle==0xFF)this.angle=-1;
			else this.angle *=5;
			this.x=msg.getInt16();
			this.y=msg.getInt16();
			this.baseTime=msg.getFloat64();
			return true;
		}

		CMsgUserMove.MSGID=0;
		return CMsgUserMove;
	})(MsgTemplate)


	/**
	*...
	*@author dongketao
	*/
	//class msgCln.CMsgUseSkill extends MsgTemplate
	var CMsgUseSkill=(function(_super){
		function CMsgUseSkill(){
			this.aiUID=0;
			this.angle=NaN;
			this.skillIndex=0;
			this.dis=NaN;
			CMsgUseSkill.__super.call(this);
		}

		__class(CMsgUseSkill,'msgCln.CMsgUseSkill',_super);
		var __proto=CMsgUseSkill.prototype;
		__proto.clientWriteBody=function(msg){
			msg.writeInt32(this.aiUID);
			msg.writeInt16(0 | this.dis);
			msg.writeUint8(this.angle==-1?0xFF:Math.floor(this.angle / 2));
			msg.writeUint8(this.skillIndex);
			return true;
		}

		__proto.serverReadBody=function(msg,msgLen){
			this.aiUID=msg.getInt32();
			this.dis=msg.getInt16();
			this.angle=msg.getUint8();
			if (this.angle==0xFF)this.angle=-1;
			else this.angle *=2;
			this.skillIndex=msg.getUint8();
			return true;
		}

		CMsgUseSkill.MSGID=0;
		return CMsgUseSkill;
	})(MsgTemplate)


	/**
	*...
	*@author Chen Gong
	*/
	//class msgCln.customGame.CMsgAcceptSwitchRequest extends MsgTemplate
	var CMsgAcceptSwitchRequest=(function(_super){
		function CMsgAcceptSwitchRequest(){
			this.myTeamId=NaN;
			this.myIndex=NaN;
			this.changeTeamId=NaN;
			this.changeIndex=NaN;
			this.accept=NaN;
			CMsgAcceptSwitchRequest.__super.call(this);
		}

		__class(CMsgAcceptSwitchRequest,'msgCln.customGame.CMsgAcceptSwitchRequest',_super);
		var __proto=CMsgAcceptSwitchRequest.prototype;
		__proto.clientWriteBody=function(msg){
			msg.writeInt16(this.myIndex);
			msg.writeByte(this.myTeamId);
			msg.writeInt16(this.changeIndex);
			msg.writeByte(this.changeTeamId);
			msg.writeByte(this.accept);
			return true;
		}

		__proto.serverReadBody=function(msg,msgLen){
			this.myIndex=msg.getInt16();
			this.myTeamId=msg.readByte();
			this.changeIndex=msg.getInt16();
			this.changeTeamId=msg.readByte();
			this.accept=msg.readByte();
			return true;
		}

		CMsgAcceptSwitchRequest.MSGID=0;
		return CMsgAcceptSwitchRequest;
	})(MsgTemplate)


	/**
	*...
	*@author Chen Gong
	*/
	//class msgCln.customGame.CMsgAddRobot extends MsgTemplate
	var CMsgAddRobot=(function(_super){
		function CMsgAddRobot(){
			this.userTeamId=NaN;
			this.index=NaN;
			CMsgAddRobot.__super.call(this);
		}

		__class(CMsgAddRobot,'msgCln.customGame.CMsgAddRobot',_super);
		var __proto=CMsgAddRobot.prototype;
		__proto.clientWriteBody=function(msg){
			msg.writeInt16(this.index);
			msg.writeByte(this.userTeamId);
			return true;
		}

		__proto.serverReadBody=function(msg,msgLen){
			this.index=msg.getInt16();
			this.userTeamId=msg.readByte();
			return true;
		}

		CMsgAddRobot.MSGID=0;
		return CMsgAddRobot;
	})(MsgTemplate)


	/**
	*...
	*@author Chen Gong
	*/
	//class msgCln.customGame.CMsgChangeCustomRoomPosition extends MsgTemplate
	var CMsgChangeCustomRoomPosition=(function(_super){
		function CMsgChangeCustomRoomPosition(){
			this.userTeamId=NaN;
			this.index=NaN;
			CMsgChangeCustomRoomPosition.__super.call(this);
		}

		__class(CMsgChangeCustomRoomPosition,'msgCln.customGame.CMsgChangeCustomRoomPosition',_super);
		var __proto=CMsgChangeCustomRoomPosition.prototype;
		__proto.clientWriteBody=function(msg){
			msg.writeInt16(this.index);
			msg.writeByte(this.userTeamId);
			return true;
		}

		__proto.serverReadBody=function(msg,msgLen){
			this.index=msg.getInt16();
			this.userTeamId=msg.readByte();
			return true;
		}

		CMsgChangeCustomRoomPosition.MSGID=0;
		return CMsgChangeCustomRoomPosition;
	})(MsgTemplate)


	/**
	*...
	*@author Chen Gong
	*/
	//class msgCln.customGame.CMsgEnterCustomRoom extends MsgTemplate
	var CMsgEnterCustomRoom=(function(_super){
		function CMsgEnterCustomRoom(){
			this.userTeamId=NaN;
			CMsgEnterCustomRoom.__super.call(this);
		}

		__class(CMsgEnterCustomRoom,'msgCln.customGame.CMsgEnterCustomRoom',_super);
		var __proto=CMsgEnterCustomRoom.prototype;
		__proto.clientWriteBody=function(msg){
			msg.writeByte(this.userTeamId);
			return true;
		}

		__proto.serverReadBody=function(msg,msgLen){
			this.userTeamId=msg.readByte();
			return true;
		}

		CMsgEnterCustomRoom.MSGID=0;
		return CMsgEnterCustomRoom;
	})(MsgTemplate)


	/**
	*...
	*@author Chen Gong
	*/
	//class msgCln.customGame.CMsgKickPlayerByOwner extends MsgTemplate
	var CMsgKickPlayerByOwner=(function(_super){
		function CMsgKickPlayerByOwner(){
			this.userTeamId=NaN;
			this.index=NaN;
			CMsgKickPlayerByOwner.__super.call(this);
		}

		__class(CMsgKickPlayerByOwner,'msgCln.customGame.CMsgKickPlayerByOwner',_super);
		var __proto=CMsgKickPlayerByOwner.prototype;
		__proto.clientWriteBody=function(msg){
			msg.writeInt16(this.index);
			msg.writeByte(this.userTeamId);
			return true;
		}

		__proto.serverReadBody=function(msg,msgLen){
			this.index=msg.getInt16();
			this.userTeamId=msg.readByte();
			return true;
		}

		CMsgKickPlayerByOwner.MSGID=0;
		return CMsgKickPlayerByOwner;
	})(MsgTemplate)


	/**
	*...
	*@author Chen Gong
	*/
	//class msgCln.customGame.CMsgLeaveCustomRoom extends MsgTemplate
	var CMsgLeaveCustomRoom=(function(_super){
		function CMsgLeaveCustomRoom(){
			this.userTeamId=NaN;
			this.index=NaN;
			CMsgLeaveCustomRoom.__super.call(this);
		}

		__class(CMsgLeaveCustomRoom,'msgCln.customGame.CMsgLeaveCustomRoom',_super);
		var __proto=CMsgLeaveCustomRoom.prototype;
		__proto.clientWriteBody=function(msg){
			msg.writeInt16(this.index);
			msg.writeByte(this.userTeamId);
			return true;
		}

		__proto.serverReadBody=function(msg,msgLen){
			this.index=msg.getInt16();
			this.userTeamId=msg.readByte();
			return true;
		}

		CMsgLeaveCustomRoom.MSGID=0;
		return CMsgLeaveCustomRoom;
	})(MsgTemplate)


	/**
	*...
	*@author Chen Gong
	*/
	//class msgCln.customGame.CMsgLoadCustomResource extends MsgTemplate
	var CMsgLoadCustomResource=(function(_super){
		function CMsgLoadCustomResource(){
			CMsgLoadCustomResource.__super.call(this);
		}

		__class(CMsgLoadCustomResource,'msgCln.customGame.CMsgLoadCustomResource',_super);
		var __proto=CMsgLoadCustomResource.prototype;
		__proto.clientWriteBody=function(msg){
			return true;
		}

		__proto.serverReadBody=function(msg,msgLen){
			return true;
		}

		CMsgLoadCustomResource.MSGID=0;
		return CMsgLoadCustomResource;
	})(MsgTemplate)


	/**
	*...
	*@author Chen Gong
	*/
	//class msgCln.customGame.CMsgStartCustomGame extends MsgTemplate
	var CMsgStartCustomGame=(function(_super){
		function CMsgStartCustomGame(){
			CMsgStartCustomGame.__super.call(this);
		}

		__class(CMsgStartCustomGame,'msgCln.customGame.CMsgStartCustomGame',_super);
		var __proto=CMsgStartCustomGame.prototype;
		__proto.clientWriteBody=function(msg){
			return true;
		}

		__proto.serverReadBody=function(msg,msgLen){
			return true;
		}

		CMsgStartCustomGame.MSGID=0;
		return CMsgStartCustomGame;
	})(MsgTemplate)


	/**
	*...
	*@author Chen Gong
	*/
	//class msgCln.customGame.CMsgSwitchCustomRoomPosition extends MsgTemplate
	var CMsgSwitchCustomRoomPosition=(function(_super){
		function CMsgSwitchCustomRoomPosition(){
			this.myTeamId=NaN;
			this.myIndex=NaN;
			this.changeTeamId=NaN;
			this.changeIndex=NaN;
			CMsgSwitchCustomRoomPosition.__super.call(this);
		}

		__class(CMsgSwitchCustomRoomPosition,'msgCln.customGame.CMsgSwitchCustomRoomPosition',_super);
		var __proto=CMsgSwitchCustomRoomPosition.prototype;
		__proto.clientWriteBody=function(msg){
			msg.writeInt16(this.myIndex);
			msg.writeByte(this.myTeamId);
			msg.writeInt16(this.changeIndex);
			msg.writeByte(this.changeTeamId);
			return true;
		}

		__proto.serverReadBody=function(msg,msgLen){
			this.myIndex=msg.getInt16();
			this.myTeamId=msg.readByte();
			this.changeIndex=msg.getInt16();
			this.changeTeamId=msg.readByte();
			return true;
		}

		CMsgSwitchCustomRoomPosition.MSGID=0;
		return CMsgSwitchCustomRoomPosition;
	})(MsgTemplate)


	/**
	*...
	*@author Chen Gong
	*/
	//class msgSvr.attackSnowHouse.SMsgAttackSnowHouseModeEnd extends MsgTemplate
	var SMsgAttackSnowHouseModeEnd=(function(_super){
		function SMsgAttackSnowHouseModeEnd(){
			this.hp1=0;
			this.hp2=0;
			this.hp3=0;
			this.id1=0;
			this.id2=0;
			this.id3=0;
			this.awardId=null;
			this.awardNum=null;
			SMsgAttackSnowHouseModeEnd.__super.call(this);
		}

		__class(SMsgAttackSnowHouseModeEnd,'msgSvr.attackSnowHouse.SMsgAttackSnowHouseModeEnd',_super);
		var __proto=SMsgAttackSnowHouseModeEnd.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			this.hp1=msg.getFloat32();
			this.hp2=msg.getFloat32();
			this.hp3=msg.getFloat32();
			this.id1=msg.getInt16();
			this.id2=msg.getInt16();
			this.id3=msg.getInt16();
			var awardIdLen=msg.readByte();
			this.awardId=[];
			for (var i=0,len=awardIdLen;i < len;i++){
				this.awardId.push(msg.getInt16());
			};
			var awardNumLen=msg.readByte();
			this.awardNum=[];
			for (var j=0;j < awardNumLen;j++){
				this.awardNum.push(msg.getInt16());
			}
			_super.prototype.clientReadBody.call(this,msg,msgLen);
			return true;
		}

		__proto.serverWriteBody=function(msg){
			msg.writeFloat32(this.hp1);
			msg.writeFloat32(this.hp2);
			msg.writeFloat32(this.hp3);
			msg.writeInt16(this.id1);
			msg.writeInt16(this.id2);
			msg.writeInt16(this.id3);
			msg.writeByte(this.awardId.length);
			for (var j=0;j < this.awardId.length;j++){
				msg.writeInt16(this.awardId[j]);
			}
			msg.writeByte(this.awardNum.length);
			for (var i=0;i < this.awardNum.length;i++){
				msg.writeInt16(this.awardNum[i]);
			}
			_super.prototype.serverWriteBody.call(this,msg);
			return true;
		}

		__proto.getMsgBodySize=function(){
			return 1024;
		}

		__proto.clear=function(){
			this.hp1=0;
			this.hp2=0;
			this.hp3=0;
			this.id1=0;
			this.id2=0;
			this.id3=0;
			return _super.prototype.clear.call(this);
		}

		SMsgAttackSnowHouseModeEnd.MSGID=0;
		return SMsgAttackSnowHouseModeEnd;
	})(MsgTemplate)


	/**
	*...
	*@author Chen Gong
	*/
	//class msgSvr.baoxiangSkill.SMsgBroadcastBuffStatus extends MsgTemplate
	var SMsgBroadcastBuffStatus=(function(_super){
		function SMsgBroadcastBuffStatus(){
			this.userUid=0;
			this.buffType=0;
			this.state=0;
			SMsgBroadcastBuffStatus.__super.call(this);
		}

		__class(SMsgBroadcastBuffStatus,'msgSvr.baoxiangSkill.SMsgBroadcastBuffStatus',_super);
		var __proto=SMsgBroadcastBuffStatus.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			_super.prototype.clientReadBody.call(this,msg,msgLen);
			this.userUid=msg.getInt32();
			this.state=msg.getFloat32();
			this.buffType=msg.getInt32();
			return true;
		}

		__proto.serverWriteBody=function(msg){
			_super.prototype.serverWriteBody.call(this,msg);
			msg.writeInt32(this.userUid);
			msg.writeFloat32(this.state);
			msg.writeInt32(this.buffType);
			return true;
		}

		__proto.clear=function(){
			this.userUid=0;
			this.state=0;
			this.buffType=0;
			return _super.prototype.clear.call(this);
		}

		SMsgBroadcastBuffStatus.MSGID=0;
		return SMsgBroadcastBuffStatus;
	})(MsgTemplate)


	/**
	*...
	*@author Chen Gong
	*/
	//class msgSvr.baoxiangSkill.SMsgBroadcastSkillStatus extends MsgTemplate
	var SMsgBroadcastSkillStatus=(function(_super){
		function SMsgBroadcastSkillStatus(){
			this.skillId=0;
			this.userUid=0;
			this.state=0;
			SMsgBroadcastSkillStatus.__super.call(this);
		}

		__class(SMsgBroadcastSkillStatus,'msgSvr.baoxiangSkill.SMsgBroadcastSkillStatus',_super);
		var __proto=SMsgBroadcastSkillStatus.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			_super.prototype.clientReadBody.call(this,msg,msgLen);
			this.userUid=msg.getInt32();
			this.state=msg.readByte();
			this.skillId=msg.getInt32();
			return true;
		}

		__proto.serverWriteBody=function(msg){
			_super.prototype.serverWriteBody.call(this,msg);
			msg.writeInt32(this.userUid);
			msg.writeByte(this.state);
			msg.writeInt32(this.skillId);
			return true;
		}

		__proto.clear=function(){
			this.userUid=0;
			this.state=0;
			this.skillId=0;
			return _super.prototype.clear.call(this);
		}

		SMsgBroadcastSkillStatus.MSGID=0;
		return SMsgBroadcastSkillStatus;
	})(MsgTemplate)


	/**
	*...
	*@author dkt
	*/
	//class msgSvr.baoxiangSkill.SMsgSkillSlot extends MsgTemplate
	var SMsgSkillSlot=(function(_super){
		function SMsgSkillSlot(){
			this.activeSkill=[];
			SMsgSkillSlot.__super.call(this);
		}

		__class(SMsgSkillSlot,'msgSvr.baoxiangSkill.SMsgSkillSlot',_super);
		var __proto=SMsgSkillSlot.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			var skillsLen=msg.readByte();
			this.activeSkill=[];
			var tem;
			for (var i=0,len=skillsLen;i < len;i++){
				tem=new SkillSlotData();
				tem.clientReadBody(msg,msgLen);
				this.activeSkill.push(tem);
			}
			return true;
		}

		__proto.serverWriteBody=function(msg){
			if (this.activeSkill==null){
				msg.writeByte(0);
			}
			else{
				msg.writeByte(this.activeSkill.length);
				for (var i=0,len=this.activeSkill.length;i < len;i++){
					this.activeSkill[i] && (this.activeSkill [i]).serverWriteBody(msg);
				}
			}
			return true;
		}

		__proto.clear=function(){
			this.activeSkill=null;
			return _super.prototype.clear.call(this);
		}

		SMsgSkillSlot.MSGID=0;
		return SMsgSkillSlot;
	})(MsgTemplate)


	/**
	*...
	*@author Chen Gong
	*/
	//class msgSvr.battleTask.SMsgBattleTaskUpdate extends MsgTemplate
	var SMsgBattleTaskUpdate=(function(_super){
		function SMsgBattleTaskUpdate(){
			this.countUpdate=0;
			SMsgBattleTaskUpdate.__super.call(this);
		}

		__class(SMsgBattleTaskUpdate,'msgSvr.battleTask.SMsgBattleTaskUpdate',_super);
		var __proto=SMsgBattleTaskUpdate.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			this.countUpdate=msg.getInt32();
			return true;
		}

		__proto.serverWriteBody=function(msg){
			msg.writeInt32(this.countUpdate);
			return true;
		}

		__proto.clear=function(){
			this.countUpdate=0;
			return _super.prototype.clear.call(this);
		}

		SMsgBattleTaskUpdate.MSGID=0;
		return SMsgBattleTaskUpdate;
	})(MsgTemplate)


	/**
	*...
	*@author Chen Gong
	*/
	//class msgSvr.battleTask.SMsgInitBattleTask extends MsgTemplate
	var SMsgInitBattleTask=(function(_super){
		function SMsgInitBattleTask(){
			this.taskid=0;
			this.taskCount=0;
			SMsgInitBattleTask.__super.call(this);
		}

		__class(SMsgInitBattleTask,'msgSvr.battleTask.SMsgInitBattleTask',_super);
		var __proto=SMsgInitBattleTask.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			this.taskid=msg.getUint16();
			this.taskCount=msg.getInt32();
			return true;
		}

		__proto.serverWriteBody=function(msg){
			msg.writeUint16(this.taskid);
			msg.writeInt32(this.taskCount);
			return true;
		}

		__proto.clear=function(){
			this.taskid=0;
			this.taskCount=0;
			return _super.prototype.clear.call(this);
		}

		SMsgInitBattleTask.MSGID=0;
		return SMsgInitBattleTask;
	})(MsgTemplate)


	/**
	*...
	*@author Chen Gong
	*/
	//class msgSvr.customGame.SMsgAskUserToChangePosition extends MsgTemplate
	var SMsgAskUserToChangePosition=(function(_super){
		function SMsgAskUserToChangePosition(){
			this.myTeamId=NaN;
			this.myIndex=NaN;
			this.changeTeamId=NaN;
			this.changeIndex=NaN;
			SMsgAskUserToChangePosition.__super.call(this);
		}

		__class(SMsgAskUserToChangePosition,'msgSvr.customGame.SMsgAskUserToChangePosition',_super);
		var __proto=SMsgAskUserToChangePosition.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			this.myTeamId=msg.readByte();
			this.myIndex=msg.getInt16();
			this.changeTeamId=msg.readByte();
			this.changeIndex=msg.getInt16();
			return true;
		}

		__proto.serverWriteBody=function(msg){
			msg.writeByte(this.myTeamId);
			msg.writeInt16(this.myIndex);
			msg.writeByte(this.changeTeamId);
			msg.writeInt16(this.changeIndex);
			return true;
		}

		/**
		*消息发送出去之前的size处理.每一个从MsgTemplate派生的类必须override这个函数，计算自己的size
		*/
		__proto.getMsgSize=function(){
			return 6;
		}

		__proto.clear=function(){
			this.myTeamId=1;
			this.myIndex=0;
			this.changeTeamId=1;
			this.changeIndex=0;
			return _super.prototype.clear.call(this);
		}

		SMsgAskUserToChangePosition.MSGID=0;
		return SMsgAskUserToChangePosition;
	})(MsgTemplate)


	/**
	*...
	*@author Chen Gong
	*/
	//class msgSvr.customGame.SMsgBeKicked extends MsgTemplate
	var SMsgBeKicked=(function(_super){
		function SMsgBeKicked(){
			SMsgBeKicked.__super.call(this);
		}

		__class(SMsgBeKicked,'msgSvr.customGame.SMsgBeKicked',_super);
		var __proto=SMsgBeKicked.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			return true;
		}

		__proto.serverWriteBody=function(msg){
			return true;
		}

		/**
		*消息发送出去之前的size处理.每一个从MsgTemplate派生的类必须override这个函数，计算自己的size
		*/
		__proto.getMsgSize=function(){
			return 2;
		}

		/*+getStrByteSize(type)*/
		__proto.clear=function(){
			return _super.prototype.clear.call(this);
		}

		SMsgBeKicked.MSGID=0;
		return SMsgBeKicked;
	})(MsgTemplate)


	/**
	*...
	*@author Chen Gong
	*/
	//class msgSvr.customGame.SMsgLoadCustomResource extends MsgTemplate
	var SMsgLoadCustomResource=(function(_super){
		function SMsgLoadCustomResource(){
			SMsgLoadCustomResource.__super.call(this);
		}

		__class(SMsgLoadCustomResource,'msgSvr.customGame.SMsgLoadCustomResource',_super);
		var __proto=SMsgLoadCustomResource.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			return true;
		}

		__proto.serverWriteBody=function(msg){
			return true;
		}

		/**
		*消息发送出去之前的size处理.每一个从MsgTemplate派生的类必须override这个函数，计算自己的size
		*/
		__proto.getMsgSize=function(){
			return 2;
		}

		/*+getStrByteSize(type)*/
		__proto.clear=function(){
			return _super.prototype.clear.call(this);
		}

		SMsgLoadCustomResource.MSGID=0;
		return SMsgLoadCustomResource;
	})(MsgTemplate)


	/**
	*...
	*@author Chen Gong
	*/
	//class msgSvr.customGame.SMsgShowCustomGamePanel extends MsgTemplate
	var SMsgShowCustomGamePanel=(function(_super){
		function SMsgShowCustomGamePanel(){
			this.userList_1=[];
			this.userList_2=[];
			this.userList_3=[];
			this.userState={};
			this.type=1;
			this.owner_id=NaN;
			this.allUsers=null;
			SMsgShowCustomGamePanel.__super.call(this);
		}

		__class(SMsgShowCustomGamePanel,'msgSvr.customGame.SMsgShowCustomGamePanel',_super);
		var __proto=SMsgShowCustomGamePanel.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			this.type=msg.getInt16();
			this.owner_id=msg.getInt32();
			var usersLen_1=msg.getInt16();
			this.userList_1=[];
			for (var i1=0,len=usersLen_1;i1 < len;i1++){
				var userid1=msg.getInt32();
				this.userList_1.push(userid1);this.userState[userid1]=this.userState[userid1]||{};
				this.userState[userid1].state1=msg.getUint8();
			};
			var usersLen_2=msg.getInt16();
			this.userList_2=[];
			for (var i2=0,len2=usersLen_2;i2 < len2;i2++){
				var userid2=msg.getInt32();
				this.userList_2.push(userid2);this.userState[userid2]=this.userState[userid2]||{};
				this.userState[userid2].state1=msg.getUint8();
			};
			var usersLen_3=msg.getInt16();
			this.userList_3=[];
			for (var i3=0,len3=usersLen_3;i3 < len3;i3++){
				var userid3=msg.getInt32();
				this.userList_3.push(userid3);this.userState[userid3]=this.userState[userid3]||{};
				this.userState[userid3].state1=msg.getUint8();
			}
			return true;
		}

		__proto.serverWriteBody=function(msg){
			msg.writeInt16(this.type);
			msg.writeInt32(this.owner_id);
			msg.writeInt16(this.userList_1.length);
			var _snowUser;
			for (var i1=0,len=this.userList_1.length;i1 < len;i1++){
				msg.writeInt32(this.userList_1[i1]);
				_snowUser=this.allUsers[this.userList_1[i1]];
				msg.writeUint8(_snowUser?_snowUser.userRoomState[1]:0);
			}
			msg.writeInt16(this.userList_2.length);
			for (var i2=0,len2=this.userList_2.length;i2 < len2;i2++){
				msg.writeInt32(this.userList_2[i2]);
				_snowUser=this.allUsers[this.userList_2[i2]];
				msg.writeUint8(_snowUser?_snowUser.userRoomState[1]:0);
			}
			msg.writeInt16(this.userList_3.length);
			for (var i3=0,len3=this.userList_3.length;i3 < len3;i3++){
				msg.writeInt32(this.userList_3[i3]);
				_snowUser=this.allUsers[this.userList_3[i3]];
				msg.writeUint8(_snowUser?_snowUser.userRoomState[1]:0);
			}
			return true;
		}

		/**
		*消息发送出去之前的size处理.每一个从MsgTemplate派生的类必须override这个函数，计算自己的size
		*/
		__proto.getMsgBodySize=function(){
			return 11+4 *(this.userList_1.length+this.userList_2.length+this.userList_3.length);
		}

		__proto.clear=function(){
			this.userList_1.length=0;
			this.userList_2.length=0;
			this.userList_3.length=0;
			this.owner_id=0;
			this.type=1;
			return _super.prototype.clear.call(this);
		}

		SMsgShowCustomGamePanel.MSGID=0;
		return SMsgShowCustomGamePanel;
	})(MsgTemplate)


	/**
	*...
	*@author Chen Gong
	*/
	//class msgSvr.customGame.SMsgSwitchPositionResult extends MsgTemplate
	var SMsgSwitchPositionResult=(function(_super){
		function SMsgSwitchPositionResult(){
			this.teamId_1=NaN;
			this.index_1=NaN;
			this.teamId_2=NaN;
			this.index_2=NaN;
			SMsgSwitchPositionResult.__super.call(this);
		}

		__class(SMsgSwitchPositionResult,'msgSvr.customGame.SMsgSwitchPositionResult',_super);
		var __proto=SMsgSwitchPositionResult.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			this.teamId_1=msg.readByte();
			this.index_1=msg.getInt16();
			this.teamId_2=msg.readByte();
			this.index_2=msg.getInt16();
			return true;
		}

		__proto.serverWriteBody=function(msg){
			msg.writeByte(this.teamId_1);
			msg.writeInt16(this.index_1);
			msg.writeByte(this.teamId_2);
			msg.writeInt16(this.index_2);
			return true;
		}

		/**
		*消息发送出去之前的size处理.每一个从MsgTemplate派生的类必须override这个函数，计算自己的size
		*/
		__proto.getMsgSize=function(){
			return 6;
		}

		__proto.clear=function(){
			this.teamId_1=1;
			this.index_1=0;
			this.teamId_2=1;
			this.index_2=0;
			return _super.prototype.clear.call(this);
		}

		SMsgSwitchPositionResult.MSGID=0;
		return SMsgSwitchPositionResult;
	})(MsgTemplate)


	/**
	*...
	*@author Chen Gong
	*/
	//class msgSvr.customGame.SMsgUserChangePosition extends MsgTemplate
	var SMsgUserChangePosition=(function(_super){
		function SMsgUserChangePosition(){
			this.index=0;
			this.userid=0;
			this.userTeamId=1;
			SMsgUserChangePosition.__super.call(this);
		}

		__class(SMsgUserChangePosition,'msgSvr.customGame.SMsgUserChangePosition',_super);
		var __proto=SMsgUserChangePosition.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			this.index=msg.getInt16();
			this.userid=msg.getInt32();
			this.userTeamId=msg.readByte();
			return true;
		}

		__proto.serverWriteBody=function(msg){
			msg.writeInt16(this.index)
			msg.writeInt32(this.userid);
			msg.writeByte(this.userTeamId);
			return true;
		}

		/**
		*消息发送出去之前的size处理.每一个从MsgTemplate派生的类必须override这个函数，计算自己的size
		*/
		__proto.getMsgBodySize=function(){
			return 7;
		}

		__proto.clear=function(){
			this.index=0;
			this.userid=0;
			this.userTeamId=1;
			return _super.prototype.clear.call(this);
		}

		SMsgUserChangePosition.MSGID=0;
		return SMsgUserChangePosition;
	})(MsgTemplate)


	/**
	*...
	*@author Chen Gong
	*/
	//class msgSvr.customGame.SMsgUserEnterCustomRoom extends MsgTemplate
	var SMsgUserEnterCustomRoom=(function(_super){
		function SMsgUserEnterCustomRoom(){
			this.userTeamId=0;
			this.index=0;
			this.userid=0;
			this.success=0;
			SMsgUserEnterCustomRoom.__super.call(this);
		}

		__class(SMsgUserEnterCustomRoom,'msgSvr.customGame.SMsgUserEnterCustomRoom',_super);
		var __proto=SMsgUserEnterCustomRoom.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			this.userTeamId=msg.readByte();
			this.success=msg.readByte();
			this.index=msg.getInt16();
			this.userid=msg.getInt32();
			return true;
		}

		__proto.serverWriteBody=function(msg){
			msg.writeByte(this.userTeamId);
			msg.writeByte(this.success);
			msg.writeInt16(this.index);
			msg.writeInt32(this.userid);
			return true;
		}

		/**
		*消息发送出去之前的size处理.每一个从MsgTemplate派生的类必须override这个函数，计算自己的size
		*/
		__proto.getMsgSize=function(){
			return 8;
		}

		/*+getStrByteSize(type)*/
		__proto.clear=function(){
			this.userTeamId=0;
			this.index=0;
			this.userid=0;
			this.success=0;
			return _super.prototype.clear.call(this);
		}

		SMsgUserEnterCustomRoom.MSGID=0;
		return SMsgUserEnterCustomRoom;
	})(MsgTemplate)


	/**
	*...
	*@author Chen Gong
	*/
	//class msgSvr.customGame.SMsgUserLeftCustomRoom extends MsgTemplate
	var SMsgUserLeftCustomRoom=(function(_super){
		function SMsgUserLeftCustomRoom(){
			this.userTeamId=0;
			this.index=0;
			this.owner_id=0;
			SMsgUserLeftCustomRoom.__super.call(this);
		}

		__class(SMsgUserLeftCustomRoom,'msgSvr.customGame.SMsgUserLeftCustomRoom',_super);
		var __proto=SMsgUserLeftCustomRoom.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			this.userTeamId=msg.readByte();
			this.index=msg.getInt16();
			this.owner_id=msg.getInt32();
			return true;
		}

		__proto.serverWriteBody=function(msg){
			msg.writeByte(this.userTeamId);
			msg.writeInt16(this.index);
			msg.writeInt32(this.owner_id);
			return true;
		}

		/**
		*消息发送出去之前的size处理.每一个从MsgTemplate派生的类必须override这个函数，计算自己的size
		*/
		__proto.getMsgSize=function(){
			return 7;
		}

		/*+getStrByteSize(type)*/
		__proto.clear=function(){
			this.userTeamId=0;
			this.index=0;
			this.owner_id=0;
			return _super.prototype.clear.call(this);
		}

		SMsgUserLeftCustomRoom.MSGID=0;
		return SMsgUserLeftCustomRoom;
	})(MsgTemplate)


	/**
	*@private
	*<code>Resource</code> 资源存取类。
	*/
	//class laya.resource.Resource extends laya.events.EventDispatcher
	var Resource=(function(_super){
		function Resource(){
			//this._id=0;
			//this._lastUseFrameCount=0;
			//this._memorySize=0;
			//this._name=null;
			//this._url=null;
			//this.__loaded=false;
			//this._released=false;
			//this._disposed=false;
			//this._resourceManager=null;
			//this.lock=false;
			Resource.__super.call(this);
			this._$1__id=++Resource._uniqueIDCounter;
			this.__loaded=true;
			this._disposed=false;
			Resource._loadedResources.push(this);
			Resource._isLoadedResourcesSorted=false;
			this._released=true;
			this.lock=false;
			this._memorySize=0;
			this._lastUseFrameCount=-1;
			(ResourceManager.currentResourceManager)&& (ResourceManager.currentResourceManager.addResource(this));
		}

		__class(Resource,'laya.resource.Resource',_super);
		var __proto=Resource.prototype;
		Laya.imps(__proto,{"laya.resource.ICreateResource":true,"laya.resource.IDispose":true})
		/**
		*@private
		*/
		__proto._endLoaded=function(){
			this.__loaded=true;
			this.event("loaded",this);
		}

		/**重新创建资源,override it，同时修改memorySize属性、处理startCreate()和compoleteCreate()方法。*/
		__proto.recreateResource=function(){
			this.startCreate();
			this.completeCreate();
		}

		/**销毁资源，override it,同时修改memorySize属性。*/
		__proto.detoryResource=function(){}
		/**
		*激活资源，使用资源前应先调用此函数激活。
		*@param force 是否强制创建。
		*/
		__proto.activeResource=function(force){
			(force===void 0)&& (force=false);
			this._lastUseFrameCount=Stat.loopCount;
			if (this._released || force){
				this.recreateResource();
			}
		}

		/**
		*释放资源。
		*@param force 是否强制释放。
		*@return 是否成功释放。
		*/
		__proto.releaseResource=function(force){
			(force===void 0)&& (force=false);
			if (!force && this.lock)
				return false;
			if (!this._released || force){
				this.detoryResource();
				this._released=true;
				this._lastUseFrameCount=-1;
				this.event("released",this);
				return true;
				}else {
				return false;
			}
		}

		/**
		*设置唯一名字,如果名字重复则自动加上“-copy”。
		*@param newName 名字。
		*/
		__proto.setUniqueName=function(newName){
			var isUnique=true;
			for (var i=0;i < Resource._loadedResources.length;i++){
				if (Resource._loadedResources[i]._name!==newName || Resource._loadedResources[i]===this)
					continue ;
				isUnique=false;
				return;
			}
			if (isUnique){
				if (this.name !=newName){
					this.name=newName;
					Resource._isLoadedResourcesSorted=false;
				}
				}else{
				this.setUniqueName(newName.concat("-copy"));
			}
		}

		/**
		*@private
		*/
		__proto.onAsynLoaded=function(url,data,params){
			throw new Error("Resource: must override this function!");
		}

		/**
		*<p>彻底处理资源，处理后不能恢复。</p>
		*<p><b>注意：</b>会强制解锁清理。</p>
		*/
		__proto.dispose=function(){
			if (this._resourceManager!==null)
				throw new Error("附属于resourceManager的资源不能独立释放！");
			this._disposed=true;
			this.lock=false;
			this.releaseResource();
			var index=Resource._loadedResources.indexOf(this);
			if (index!==-1){
				Resource._loadedResources.splice(index,1);
				Resource._isLoadedResourcesSorted=false;
			}
			Loader.clearRes(this.url);
		}

		/**开始资源激活。*/
		__proto.startCreate=function(){
			this.event("recovering",this);
		}

		/**完成资源激活。*/
		__proto.completeCreate=function(){
			this._released=false;
			this.event("recovered",this);
		}

		/**
		*占用内存尺寸。
		*/
		__getset(0,__proto,'memorySize',function(){
			return this._memorySize;
			},function(value){
			var offsetValue=value-this._memorySize;
			this._memorySize=value;
			this.resourceManager && this.resourceManager.addSize(offsetValue);
		});

		/**
		*@private
		*/
		__getset(0,__proto,'_loaded',null,function(value){
			this.__loaded=value;
		});

		/**
		*获取是否已加载完成。
		*/
		__getset(0,__proto,'loaded',function(){
			return this.__loaded;
		});

		/**
		*获取唯一标识ID,通常用于识别。
		*/
		__getset(0,__proto,'id',function(){
			return this._$1__id;
		});

		/**
		*设置名字
		*/
		/**
		*获取名字。
		*/
		__getset(0,__proto,'name',function(){
			return this._name;
			},function(value){
			if ((value || value!=="")&& this.name!==value){
				this._name=value;
				Resource._isLoadedResourcesSorted=false;
			}
		});

		/**
		*是否已处理。
		*/
		__getset(0,__proto,'disposed',function(){
			return this._disposed;
		});

		/**
		*是否已释放。
		*/
		__getset(0,__proto,'released',function(){
			return this._released;
		});

		/**
		*资源管理员。
		*/
		__getset(0,__proto,'resourceManager',function(){
			return this._resourceManager;
		});

		/**
		*距离上次使用帧率。
		*/
		__getset(0,__proto,'lastUseFrameCount',function(){
			return this._lastUseFrameCount;
		});

		/**
		*色湖之资源的URL地址。
		*@param value URL地址。
		*/
		/**
		*获取资源的URL地址。
		*@return URL地址。
		*/
		__getset(0,__proto,'url',function(){
			return this._url;
			},function(value){
			this._url=value;
		});

		/**
		*本类型排序后的已载入资源。
		*/
		__getset(1,Resource,'sortedLoadedResourcesByName',function(){
			if (!Resource._isLoadedResourcesSorted){
				Resource._isLoadedResourcesSorted=true;
				Resource._loadedResources.sort(Resource.compareResourcesByName);
			}
			return Resource._loadedResources;
		},laya.events.EventDispatcher._$SET_sortedLoadedResourcesByName);

		Resource.getLoadedResourceByIndex=function(index){
			return Resource._loadedResources[index];
		}

		Resource.getLoadedResourcesCount=function(){
			return Resource._loadedResources.length;
		}

		Resource.compareResourcesByName=function(left,right){
			if (left===right)
				return 0;
			var x=left.name;
			var y=right.name;
			if (x===null){
				if (y===null)
					return 0;
				else
				return-1;
				}else {
				if (y==null)
					return 1;
				else {
					var retval=x.localeCompare(y);
					if (retval !=0)
						return retval;
					else {
						right.setUniqueName(y);
						y=right.name;
						return x.localeCompare(y);
					}
				}
			}
		}

		Resource._uniqueIDCounter=0;
		Resource._loadedResources=[];
		Resource._isLoadedResourcesSorted=false;
		return Resource;
	})(EventDispatcher)


	/**
	*...
	*@author dongketao
	*/
	//class msgSvr.SMsgGameEnd extends MsgTemplate
	var SMsgGameEnd=(function(_super){
		function SMsgGameEnd(){
			this.evaluation=0;
			this.boxes=[];
			this.prestigeTasks=[];
			this.prevStar=0;
			this.currentStar=0;
			this.userid=0;
			this.money=0;
			this.diamond=0;
			this.levelBeforeAndAfter=null;
			this.duanweiAward=0;
			this.teamupBonusGold=0;
			this.boostBonusGold=0;
			this.had_share_or_save=0;
			this.hasGetGold=0;
			this.hasGetDiamond=0;
			this.hasGetFragment=0;
			this.fragmentID=[];
			this.fragmentNum=[];
			this.actAwardID=[];
			this.actAwardNum=[];
			this.getAttP=0;
			this.gainDouble=0;
			this.newAchieveList=[];
			SMsgGameEnd.__super.call(this);
		}

		__class(SMsgGameEnd,'msgSvr.SMsgGameEnd',_super);
		var __proto=SMsgGameEnd.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			this.boxes=[];
			var boxesLength=msg.readByte();
			for (var k=0;k < boxesLength;k++){
				var _model=new itemModel();
				_model.itemId=msg.getUint32();
				_model.itemNum=msg.getUint32();
				this.boxes.push(_model);
			}
			this.prestigeTasks=[];
			var prestigeTasksLength=msg.readByte();
			for (var l=0;l < prestigeTasksLength;l++){
				var _data=new AchieveData();
				_data.id=msg.getInt32();
				_data.status=msg.getUint32();
				_data.curCount=msg.getUint32();
				this.prestigeTasks.push(_data);
			}
			this.levelBeforeAndAfter=[];
			for (var i=0;i < 2;i++){
				var levelDs=new levelDataset();
				levelDs.level=msg.getUint16();
				levelDs.exp=msg.getUint32();
				levelDs.expRequired=msg.getUint32();
				levelDs.heroExp=msg.getInt32();
				this.levelBeforeAndAfter.push(levelDs);
			}
			this.evaluation=msg.readByte();
			this.duanweiAward=msg.readByte();
			this.prevStar=msg.getUint32();
			this.currentStar=msg.getUint32();
			this.userid=msg.getUint32();
			this.money=msg.getInt16();
			this.diamond=msg.getInt16();
			this.teamupBonusGold=msg.getInt16();
			this.boostBonusGold=msg.getInt16();
			this.had_share_or_save=msg.readByte();
			this.hasGetGold=msg.getInt16();
			this.hasGetDiamond=msg.getInt16();
			this.hasGetFragment=msg.getInt16();
			this.fragmentID=[];
			this.fragmentNum=[];
			var fragmentLength=msg.getUint16();
			for (var j=0;j < fragmentLength;j++){
				this.fragmentID.push(msg.getInt32());
				this.fragmentNum.push(msg.getInt32());
			}
			this.actAwardID=[];
			this.actAwardNum=[];
			var actAwardLength=msg.getUint16();
			for (var o=0;o < actAwardLength;o++){
				this.actAwardID.push(msg.getInt32());
				this.actAwardNum.push(msg.getInt32());
			}
			this.getAttP=msg.readByte();
			this.gainDouble=msg.readByte();
			this.newAchieveList=[];
			var newAchieveLength=msg.getUint16();
			for (var m=0;m < newAchieveLength;m++){
				var nObj={};
				var length=msg.getInt16();
				nObj.key=msg.readUTFBytes(length);
				nObj.level=msg.getUint16();
				this.newAchieveList.push(nObj);
			}
			return true;
		}

		__proto.serverWriteBody=function(msg){
			msg.writeByte(this.boxes.length);
			for (var m=0;m < this.boxes.length;m++){
				var _model=this.boxes[m];
				msg.writeUint32(_model.itemId);
				msg.writeUint32(_model.itemNum);
			}
			msg.writeByte(this.prestigeTasks.length);
			for (var n=0;n < this.prestigeTasks.length;n++){
				var _data=this.prestigeTasks[n];
				msg.writeInt32(_data.id);
				msg.writeUint32(_data.status);
				msg.writeUint32(_data.curCount);
			}
			for (var i=0;i < 2;i++){
				var levelDs=this.levelBeforeAndAfter[i];
				msg.writeUint16(levelDs.level);
				msg.writeUint32(levelDs.exp);
				msg.writeUint32(levelDs.expRequired);
				msg.writeInt32(levelDs.heroExp);
			}
			msg.writeByte(this.evaluation);
			msg.writeByte(this.duanweiAward);
			msg.writeUint32(this.prevStar);
			msg.writeUint32(this.currentStar);
			msg.writeUint32(this.userid);
			msg.writeInt16(this.money);
			msg.writeInt16(this.diamond);
			msg.writeInt16(this.teamupBonusGold);
			msg.writeInt16(this.boostBonusGold);
			msg.writeByte(this.had_share_or_save);
			msg.writeInt16(this.hasGetGold);
			msg.writeInt16(this.hasGetDiamond);
			msg.writeInt16(this.hasGetFragment);
			msg.writeUint16(this.fragmentID.length);
			for (var j=0;j < this.fragmentID.length;j++){
				msg.writeInt32(this.fragmentID[j]);
				msg.writeInt32(this.fragmentNum[j]);
			}
			msg.writeUint16(this.actAwardID.length);
			for (var o=0;o < this.actAwardID.length;o++){
				msg.writeInt32(this.actAwardID[o]);
				msg.writeInt32(this.actAwardNum[o]);
			}
			msg.writeByte(this.getAttP);
			msg.writeByte(this.gainDouble);
			msg.writeUint16(this.newAchieveList.length);
			for (var k=0;k < this.newAchieveList.length;k++){
				var nObj=this.newAchieveList[k];
				msg.writeUTFBytes(nObj.key);
				msg.writeUint16(nObj.level);
			}
			return true;
		}

		__proto.getMsgBodySize=function(){
			return 1024;
		}

		__proto.clear=function(){
			this.evaluation=0;
			this.boxes=[];
			this.prestigeTasks=[];
			this.prevStar=0;
			this.currentStar=0;
			this.userid=0;
			this.money=0;
			this.diamond=0;
			this.teamupBonusGold=0;
			this.boostBonusGold=0;
			this.duanweiAward=0;
			this.had_share_or_save=0;
			this.hasGetGold=0;
			this.hasGetDiamond=0;
			this.hasGetFragment=0;
			this.getAttP=0;
			this.gainDouble=0;
			this.actAwardID=[];
			this.actAwardNum=[];
			this.fragmentID=[];
			this.fragmentNum=[];
			return _super.prototype.clear.call(this);
		}

		SMsgGameEnd.MSGID=0;
		return SMsgGameEnd;
	})(MsgTemplate)


	/**
	*...
	*@author Chen Gong
	*/
	//class msgSvr.gemGame.SMsgRankListGem extends MsgTemplate
	var SMsgRankListGem=(function(_super){
		function SMsgRankListGem(){
			this.rankList=null;
			this.teamRankList=null;
			this.myGem=NaN;
			this.rankSwitch=0;
			SMsgRankListGem.__super.call(this);
		}

		__class(SMsgRankListGem,'msgSvr.gemGame.SMsgRankListGem',_super);
		var __proto=SMsgRankListGem.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			var rankListLen=msg.readByte();
			var i=0;
			for (i=0;i < rankListLen;i++){
				var tem=new GemUserRankData();
				tem.clientReadBody(msg,msgLen);
				this.rankList.push(tem);
			};
			var teamrankListLen=msg.readByte();
			for (i=0;i < teamrankListLen;i++){
				var tem1=new GemTeamRankData();
				tem1.clientReadBody(msg,msgLen);
				this.teamRankList.push(tem1);
			}
			this.myGem=msg.getInt32();
			return true;
		}

		__proto.serverWriteBody=function(msg){
			if (this.rankSwitch==0){
				msg.writeByte(0);
				msg.writeByte(0);
			}
			else{
				msg.writeByte(this.rankList.length);
				var i=0,len=0;
				for (i=0,len=this.rankList.length;i < len;i++){
					var tem=this.rankList[i];
					tem.serverWriteBody(msg);
				}
				msg.writeByte(this.teamRankList.length);
				for (i=0,len=this.teamRankList.length;i < len;i++){
					var tem1=this.teamRankList[i];
					tem1.serverWriteBody(msg);
				}
			}
			msg.writeInt32(this.myGem);
			return true;
		}

		__proto.getMsgBodySize=function(){
			return 1024;
		}

		__proto.clear=function(){
			this.rankList=[];
			this.teamRankList=[];
			this.myGem=0;
			this.rankSwitch=0;
			return _super.prototype.clear.call(this);
		}

		SMsgRankListGem.MSGID=0;
		return SMsgRankListGem;
	})(MsgTemplate)


	/**
	*...
	*@author dongketao
	*/
	//class msgSvr.queenGame.SMsgQueenChg extends MsgTemplate
	var SMsgQueenChg=(function(_super){
		function SMsgQueenChg(){
			this.teamQueen=[];
			SMsgQueenChg.__super.call(this);
		}

		__class(SMsgQueenChg,'msgSvr.queenGame.SMsgQueenChg',_super);
		var __proto=SMsgQueenChg.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			var rankListLen=msg.readByte();
			this.teamQueen=[];
			for (var i=0;i < rankListLen;i++){
				var tem=new QueenChgData();
				tem.clientReadBody(msg,msgLen);
				this.teamQueen.push(tem);
			}
			return true;
		}

		__proto.serverWriteBody=function(msg){
			if (this.teamQueen==null)this.teamQueen=[];
			msg.writeByte(this.teamQueen.length);
			for (var i=0,len=this.teamQueen.length;i < len;i++){
				var tem=this.teamQueen[i];
				if (!tem)continue ;
				tem.serverWriteBody(msg);
			}
			return true;
		}

		__proto.getMsgBodySize=function(){
			return 1024;
		}

		__proto.clear=function(){
			this.teamQueen=null;
			return _super.prototype.clear.call(this);
		}

		SMsgQueenChg.MSGID=0;
		return SMsgQueenChg;
	})(MsgTemplate)


	/**
	*...
	*@author Chen Gong
	*/
	//class msgSvr.queenGame.SMsgRankListQueen extends MsgTemplate
	var SMsgRankListQueen=(function(_super){
		function SMsgRankListQueen(){
			this.rankList=null;
			this.teamRankList=null;
			this.myQueenScore=NaN;
			SMsgRankListQueen.__super.call(this);
		}

		__class(SMsgRankListQueen,'msgSvr.queenGame.SMsgRankListQueen',_super);
		var __proto=SMsgRankListQueen.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			var rankListLen=msg.readByte();
			var i=0;
			for (i=0;i < rankListLen;i++){
				var tem=new QueenUserRankData();
				tem.id=msg.getInt32();
				tem.score=msg.getInt32();
				this.rankList.push(tem);
			};
			var teamrankListLen=msg.readByte();
			for (i=0;i < teamrankListLen;i++){
				var tem1=new QueenTeamRankData();
				tem1.id=msg.getUint32();
				tem1.teammatesNum=msg.getUint8();
				tem1.queenScore=msg.getInt32();
				this.teamRankList.push(tem1);
			}
			this.myQueenScore=msg.getInt32();
			return true;
		}

		__proto.serverWriteBody=function(msg){
			msg.writeByte(this.rankList.length);
			var i=0,len=0;
			for (i=0,len=this.rankList.length;i < len;i++){
				var tem=this.rankList[i];
				msg.writeInt32(tem.id);
				msg.writeInt32(tem.score);
			}
			msg.writeByte(this.teamRankList.length);
			for (i=0,len=this.teamRankList.length;i < len;i++){
				var tem1=this.teamRankList[i];
				msg.writeUint32(tem1.id);
				msg.writeUint8(tem1.teammatesNum);
				msg.writeInt32(tem1.queenScore);
			}
			msg.writeInt32(this.myQueenScore);
			return true;
		}

		__proto.getMsgBodySize=function(){
			return 1024;
		}

		__proto.clear=function(){
			this.rankList=[];
			this.teamRankList=[];
			this.myQueenScore=0;
			return _super.prototype.clear.call(this);
		}

		SMsgRankListQueen.MSGID=0;
		return SMsgRankListQueen;
	})(MsgTemplate)


	/**
	*...
	*@author Chen Gong
	*/
	//class msgSvr.SMsgAchieveChg extends MsgTemplate
	var SMsgAchieveChg=(function(_super){
		function SMsgAchieveChg(){
			this.msgType=NaN;
			this.getOrLost=NaN;
			this.uid=0;
			SMsgAchieveChg.__super.call(this);
		}

		__class(SMsgAchieveChg,'msgSvr.SMsgAchieveChg',_super);
		var __proto=SMsgAchieveChg.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			_super.prototype.clientReadBody.call(this,msg,msgLen);
			this.msgType=msg.readByte();
			this.getOrLost=msg.readByte();
			this.uid=msg.getInt32();
			return true;
		}

		__proto.serverWriteBody=function(msg){
			_super.prototype.serverWriteBody.call(this,msg);
			msg.writeByte(this.msgType);
			msg.writeByte(this.getOrLost);
			msg.writeInt32(this.uid);
			return true;
		}

		__proto.clear=function(){
			this.msgType=0;
			this.getOrLost=0;
			this.uid=0;
			return _super.prototype.clear.call(this);
		}

		SMsgAchieveChg.MSGID=0;
		return SMsgAchieveChg;
	})(MsgTemplate)


	/**
	*...
	*@author Chen Gong
	*/
	//class msgSvr.SMsgAddDynamicItem extends MsgTemplate
	var SMsgAddDynamicItem=(function(_super){
		function SMsgAddDynamicItem(){
			this.itemNum=0;
			this.deadX=0;
			this.deadY=0;
			this.itemList=new Array;
			SMsgAddDynamicItem.__super.call(this);
			this.msgViewCal=true;
		}

		__class(SMsgAddDynamicItem,'msgSvr.SMsgAddDynamicItem',_super);
		var __proto=SMsgAddDynamicItem.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			this.itemNum=msg.getUint16();
			this.deadX=msg.getInt16();
			this.deadY=msg.getInt16();
			for (var i=0;i < this.itemNum;i++)
			{this.itemList[i]=this.itemList[i]|| DynamicItemData.getData();
				this.itemList[i].clientReadBody(msg,msgLen);
			}
			return true;
		}

		__proto.serverWriteBody=function(msg){
			msg.writeUint16(this.itemNum);
			msg.writeInt16(this.deadX);
			msg.writeInt16(this.deadY);
			for (var i=0,sz=this.itemList.length;i<sz;i++){
				this.itemList[i].serverWriteBody(msg);
			}
			return true;
		}

		__proto.getMsgBodySize=function(){
			return this.itemNum *14+15;
		}

		//}
		__proto.clear=function(){
			for (var ti=0;ti < this.itemList.length;ti++){
				DynamicItemData.release(this.itemList[ti]);
			}
			this.itemList.length=0;
			this.itemNum=0;
			this.deadX=0;
			this.deadY=0;
			this.msgViewCal=true;
			return _super.prototype.clear.call(this);
		}

		SMsgAddDynamicItem.MSGID=0;
		return SMsgAddDynamicItem;
	})(MsgTemplate)


	/**
	*...
	*@author ...
	*/
	//class msgSvr.SMsgAllProperty extends MsgTemplate
	var SMsgAllProperty=(function(_super){
		function SMsgAllProperty(){
			this.attackVal=0;
			this.chargeAttackVal=0;
			this.bloodVal=0;
			this.maxBloodVal=0;
			this.critRatio=NaN;
			this.critValue=NaN;
			this.bulletNum=NaN;
			this.maxbulletNum=NaN;
			this.speedS=NaN;
			this.collisionGetBulletPercent=NaN;
			this.killGetBulletPercent=NaN;
			this.collisionGetScorePercent=NaN;
			SMsgAllProperty.__super.call(this);
		}

		__class(SMsgAllProperty,'msgSvr.SMsgAllProperty',_super);
		var __proto=SMsgAllProperty.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			this.attackVal=msg.getUint16();
			this.chargeAttackVal=msg.getUint16();
			this.bloodVal=msg.getUint16();
			this.maxBloodVal=msg.getUint16();
			this.critRatio=msg.getFloat32()/ 100;
			this.critValue=msg.getFloat32();
			this.bulletNum=msg.getUint16();
			this.maxbulletNum=msg.getUint16();
			this.speedS=msg.getFloat32()/ 1000;
			this.collisionGetBulletPercent=msg.getFloat32()/ 100;
			this.killGetBulletPercent=msg.getFloat32()/ 100;
			this.collisionGetScorePercent=msg.getFloat32()/ 100;
			return true;
		}

		__proto.serverWriteBody=function(msg){
			msg.writeUint16(this.attackVal);
			msg.writeUint16(this.chargeAttackVal);
			msg.writeUint16(this.bloodVal);
			msg.writeUint16(this.maxBloodVal);
			msg.writeFloat32(0 | this.critRatio *100);
			msg.writeFloat32(this.critValue);
			msg.writeUint16(this.bulletNum);
			msg.writeUint16(this.maxbulletNum);
			msg.writeFloat32(0 | this.speedS *1000);
			msg.writeFloat32(0 | this.collisionGetBulletPercent *100);
			msg.writeFloat32(0 | this.killGetBulletPercent *100);
			msg.writeFloat32(0 | this.collisionGetScorePercent *100);
			return true;
		}

		/**
		*消息发送出去之前的size处理.每一个从MsgTemplate派生的类必须override这个函数，计算自己的size
		*/
		__proto.getMsgBodySize=function(){
			return 24;
		}

		__proto.clear=function(){
			this.attackVal=0;
			this.chargeAttackVal=0;
			this.bloodVal=0;
			this.maxBloodVal=0;
			this.critRatio=0;
			this.critValue=0;
			this.bulletNum=0;
			this.maxbulletNum=0;
			this.speedS=0;
			this.collisionGetBulletPercent=0;
			this.killGetBulletPercent=0;
			this.collisionGetScorePercent=0;
			return _super.prototype.clear.call(this);
		}

		SMsgAllProperty.MSGID=0;
		return SMsgAllProperty;
	})(MsgTemplate)


	/**
	*...
	*@author Chen Gong
	*/
	//class msgSvr.SMsgAreaCollision extends MsgTemplate
	var SMsgAreaCollision=(function(_super){
		function SMsgAreaCollision(){
			this.uidHitOwner=0;
			this.uidHit=0;
			this.hitSkillId=0;
			this.hitScore=0;
			this.hitBloodVal=0;
			this.behitList=[];
			SMsgAreaCollision.__super.call(this);
		}

		__class(SMsgAreaCollision,'msgSvr.SMsgAreaCollision',_super);
		var __proto=SMsgAreaCollision.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			this.uidHitOwner=msg.getUint16();
			this.uidHit=msg.getUint16();
			this.hitSkillId=msg.getInt32();
			this.hitScore=msg.getInt32();
			this.hitBloodVal=msg.getInt32();
			var behitListItemLen=msg.readByte();
			this.behitList=[];
			for (var i=0,len=behitListItemLen;i < len;i++){
				var behitListItem=BehitListItem.getData();
				behitListItem.uidBeHit=msg.getUint16();
				behitListItem.beHitScore=msg.getInt32();
				behitListItem.beHitBloodVal=msg.getInt32();
				behitListItem.angle=msg.getInt16();
				behitListItem.isCrit=msg.getInt16();
				this.behitList.push(behitListItem);
			}
			return true;
		}

		__proto.serverWriteBody=function(msg){
			msg.writeUint16(this.uidHitOwner);
			msg.writeUint16(this.uidHit);
			msg.writeInt32(this.hitSkillId);
			msg.writeInt32(this.hitScore);
			msg.writeInt32(this.hitBloodVal);
			msg.writeByte(this.behitList.length)
			var behitListItem;
			for (var i=0,len=this.behitList.length;i < len;i++){
				behitListItem=this.behitList[i];
				msg.writeUint16(behitListItem.uidBeHit);
				msg.writeInt32(behitListItem.beHitScore);
				msg.writeInt32(behitListItem.beHitBloodVal);
				msg.writeInt16(behitListItem.angle);
				msg.writeInt16(behitListItem.isCrit);
			}
			return true;
		}

		/**
		*消息发送出去之前的size处理.每一个从MsgTemplate派生的类必须override这个函数，计算自己的size
		*/
		__proto.getMsgBodySize=function(){
			return 1024;
		}

		__proto.clear=function(){
			this.uidHitOwner=0;
			this.uidHit=0;
			this.hitSkillId=0;
			this.hitScore=0;
			this.hitBloodVal=0;
			for (var i=0;i < this.behitList.length;i++){
				BehitListItem.release(this.behitList[i]);
			}
			this.behitList.length=0;
			return _super.prototype.clear.call(this);
		}

		SMsgAreaCollision.MSGID=0;
		return SMsgAreaCollision;
	})(MsgTemplate)


	/**
	*角色战斗内成就的变化，丢失与获得
	*@author dongketao
	*/
	//class msgSvr.SMsgBattleAchieveChg extends MsgTemplate
	var SMsgBattleAchieveChg=(function(_super){
		function SMsgBattleAchieveChg(){
			this.getBattleAchieve=[];
			this.lostBattleAchieve=[];
			SMsgBattleAchieveChg.__super.call(this);
		}

		__class(SMsgBattleAchieveChg,'msgSvr.SMsgBattleAchieveChg',_super);
		var __proto=SMsgBattleAchieveChg.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			var achieveLen=msg.readByte();
			this.getBattleAchieve=[];
			var tem1=0;
			for (var j=0,len1=achieveLen;j < len1;j++){
				tem1=msg.getUint32();
				this.getBattleAchieve.push(tem1);
			};
			var achieveLen1=msg.readByte();
			this.lostBattleAchieve=[];
			var tem2=0;
			for (var k=0,len2=achieveLen1;k < len2;k++){
				tem2=msg.getUint32();
				this.lostBattleAchieve.push(tem2);
			}
			return true;
		}

		__proto.serverWriteBody=function(msg){
			if (this.getBattleAchieve==null){
				msg.writeByte(0);
			}
			else{
				msg.writeByte(this.getBattleAchieve.length);
				for (var j=0,len1=this.getBattleAchieve.length;j < len1;j++){
					msg.writeUint32(this.getBattleAchieve[j]);
				}
			}
			if (this.lostBattleAchieve==null){
				msg.writeByte(0);
			}
			else{
				msg.writeByte(this.lostBattleAchieve.length);
				for (var k=0,len2=this.lostBattleAchieve.length;k < len2;k++){
					msg.writeUint32(this.lostBattleAchieve[k]);
				}
			}
			return true;
		}

		/**
		*消息发送出去之前的size处理.每一个从MsgTemplate派生的类必须override这个函数，计算自己的size
		*/
		__proto.getMsgBodySize=function(){
			return this.getBattleAchieve.length *4+this.lostBattleAchieve.length *4;
		}

		__proto.clear=function(){
			this.getBattleAchieve.length=0;
			this.lostBattleAchieve.length=0;
			return _super.prototype.clear.call(this);
		}

		SMsgBattleAchieveChg.MSGID=0;
		return SMsgBattleAchieveChg;
	})(MsgTemplate)


	/**
	*...
	*@author Chen Gong
	*/
	//class msgSvr.SMsgBattleInfo extends MsgTemplate
	var SMsgBattleInfo=(function(_super){
		function SMsgBattleInfo(){
			this.msgType=NaN;
			this.count=0;
			this.hitUid=0;
			this.behitUid=0;
			this.teamID=0;
			SMsgBattleInfo.__super.call(this);
		}

		__class(SMsgBattleInfo,'msgSvr.SMsgBattleInfo',_super);
		var __proto=SMsgBattleInfo.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			_super.prototype.clientReadBody.call(this,msg,msgLen);
			this.msgType=msg.readByte();
			this.count=msg.getUint32();
			this.hitUid=msg.getUint32();
			this.behitUid=msg.getUint32();
			this.teamID=msg.readByte();
			return true;
		}

		__proto.serverWriteBody=function(msg){
			_super.prototype.serverWriteBody.call(this,msg);
			msg.writeByte(this.msgType);
			msg.writeUint32(this.count);
			msg.writeUint32(this.hitUid);
			msg.writeUint32(this.behitUid);
			msg.writeByte(this.teamID);
			return true;
		}

		__proto.clear=function(){
			this.count=0;
			this.msgType=0;
			this.behitUid=0;
			this.hitUid=0;
			this.teamID=0;
			return _super.prototype.clear.call(this);
		}

		SMsgBattleInfo.MSGID=0;
		return SMsgBattleInfo;
	})(MsgTemplate)


	/**
	*...
	*@author Chen Gong
	*/
	//class msgSvr.SMsgBearAttack extends MsgTemplate
	var SMsgBearAttack=(function(_super){
		function SMsgBearAttack(){
			this.bearUid=NaN;
			this.playerUid=NaN;
			this.angle=NaN;
			SMsgBearAttack.__super.call(this);
		}

		__class(SMsgBearAttack,'msgSvr.SMsgBearAttack',_super);
		var __proto=SMsgBearAttack.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			this.bearUid=msg.getInt32();
			this.playerUid=msg.getInt32();
			this.angle=msg.getUint8()*2;
			return true;
		}

		__proto.serverWriteBody=function(msg){
			msg.writeInt32(this.bearUid);
			msg.writeInt32(this.playerUid);
			msg.writeUint8(Math.floor(this.angle / 2));
			return true;
		}

		__proto.getMsgBodySize=function(){
			return 10;
		}

		__proto.clear=function(){
			this.playerUid=0;
			this.bearUid=0;
			this.angle=0;
			return _super.prototype.clear.call(this);
		}

		SMsgBearAttack.MSGID=0;
		return SMsgBearAttack;
	})(MsgTemplate)


	/**
	*...
	*@author Chen Gong
	*/
	//class msgSvr.SMsgBombAttackResult extends MsgTemplate
	var SMsgBombAttackResult=(function(_super){
		function SMsgBombAttackResult(){
			this.bloodVal=0;
			this.curScore=0;
			this.bulletNum=0;
			this.kills=0;
			SMsgBombAttackResult.__super.call(this);
		}

		__class(SMsgBombAttackResult,'msgSvr.SMsgBombAttackResult',_super);
		var __proto=SMsgBombAttackResult.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			_super.prototype.clientReadBody.call(this,msg,msgLen);
			this.bloodVal=msg.getInt16();
			this.curScore=msg.getInt16();
			this.bulletNum=msg.getUint8();
			this.kills=msg.getUint8();
			return true;
		}

		__proto.serverWriteBody=function(msg){
			_super.prototype.serverWriteBody.call(this,msg);
			msg.writeInt16(this.bloodVal);
			msg.writeInt16(this.curScore);
			msg.writeUint8(this.bulletNum);
			msg.writeUint8(this.kills);
			return true;
		}

		__proto.clear=function(){
			this.bloodVal=0;
			this.curScore=0;
			this.bulletNum=0;
			this.kills=0;
			return _super.prototype.clear.call(this);
		}

		SMsgBombAttackResult.MSGID=0;
		return SMsgBombAttackResult;
	})(MsgTemplate)


	/**
	*...
	*@author Chen Gong
	*/
	//class msgSvr.SMsgCarryFlag extends MsgTemplate
	var SMsgCarryFlag=(function(_super){
		function SMsgCarryFlag(){
			this.userUID=0;
			SMsgCarryFlag.__super.call(this);
		}

		__class(SMsgCarryFlag,'msgSvr.SMsgCarryFlag',_super);
		var __proto=SMsgCarryFlag.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			this.userUID=msg.getUint32();
			return true;
		}

		__proto.serverWriteBody=function(msg){
			msg.writeUint32(this.userUID);
			return true;
		}

		__proto.clear=function(){
			this.userUID=0;
			return _super.prototype.clear.call(this);
		}

		SMsgCarryFlag.MSGID=0;
		return SMsgCarryFlag;
	})(MsgTemplate)


	/**
	*...
	*@author dongketao
	*/
	//class msgSvr.SMsgCBullet extends MsgTemplate
	var SMsgCBullet=(function(_super){
		function SMsgCBullet(){
			this.itemId=0;
			this.ownerID=0;
			this.uid=0;
			this.targetId=0;
			this.x=0;
			this.y=0;
			this.angle=NaN;
			this.speed=0;
			this.time=0;
			this.topDistance=0;
			this.baseTime=0;
			this.bulletNum=0;
			this.useScore=0;
			this.coefficient=NaN;
			this.scale=NaN;
			this.hitNum=NaN;
			this.skillId=0;
			this.prefixId=0;
			this.isBomb=0;
			this.bombArea=NaN;
			this.downTime=NaN;
			this.delayMoveTime=NaN;
			SMsgCBullet.__super.call(this);
			this.msgViewCal=true;
		}

		__class(SMsgCBullet,'msgSvr.SMsgCBullet',_super);
		var __proto=SMsgCBullet.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			this.itemId=msg.getUint16();
			this.ownerID=msg.getUint16();
			this.uid=msg.getUint16();
			this.targetId=msg.getUint16();
			this.x=msg.getInt16();
			this.y=msg.getInt16();
			this.angle=msg.getUint8()*2;
			this.speed=msg.getUint16()/ 1000;
			this.time=msg.getUint16();
			this.topDistance=msg.getInt16();
			this.useScore=msg.getUint16();
			this.bulletNum=msg.getUint32()/100;
			this.coefficient=msg.getUint8()/100;
			this.scale=msg.getUint16()/100;
			this.baseTime=msg.getFloat64();
			this.hitNum=msg.readByte();
			this.skillId=msg.getUint32();
			this.prefixId=msg.getUint8();
			this.msgSendTm=msg.getUint32();
			this.isBomb=msg.readByte();
			if (this.isBomb==1){
				this.bombArea=msg.getUint16();
				this.downTime=msg.getInt16();
			}
			this.delayMoveTime=msg.getInt16();
			return true;
		}

		__proto.serverWriteBody=function(msg){
			msg.writeUint16(this.itemId);
			msg.writeUint16(this.ownerID);
			msg.writeUint16(this.uid);
			msg.writeUint16(this.targetId);
			msg.writeInt16(this.x);
			msg.writeInt16(this.y);
			msg.writeUint8(Math.floor(this.angle / 2));
			msg.writeUint16(Math.floor(this.speed *1000));
			msg.writeUint16(this.time);
			msg.writeInt16(this.topDistance);
			msg.writeUint16(this.useScore);
			msg.writeUint32(this.bulletNum*100);
			msg.writeUint8(this.coefficient*100);
			msg.writeUint16(this.scale*100);
			msg.writeFloat64(this.baseTime);
			msg.writeByte(this.hitNum);
			msg.writeUint32(this.skillId);
			msg.writeUint8(this.prefixId);
			msg.writeUint32(this.msgSendTm);
			msg.writeByte(this.isBomb);
			if (this.isBomb==1){
				msg.writeUint16(this.bombArea);
				msg.writeInt16(this.downTime);
			}
			msg.writeInt16(this.delayMoveTime);
			return true;
		}

		/**
		*消息发送出去之前的size处理.每一个从MsgTemplate派生的类必须override这个函数，计算自己的size
		*/
		__proto.getMsgSize=function(){
			return 50;
		}

		/*+getStrByteSize(type)*/
		__proto.clear=function(){
			this.itemId=0;
			this.ownerID=0;
			this.uid=0;
			this.targetId=0;
			this.x=0;
			this.y=0;
			this.angle=0;
			this.speed=0;
			this.time=0;
			this.topDistance=0;
			this.useScore=0;
			this.bulletNum=0;
			this.baseTime=0;
			this.hitNum=0;
			this.skillId=0;
			this.prefixId=0;
			this.isBomb=0;
			this.bombArea=0;
			this.downTime=0;
			this.delayMoveTime=0;
			return _super.prototype.clear.call(this);
		}

		SMsgCBullet.MSGID=0;
		return SMsgCBullet;
	})(MsgTemplate)


	/**
	*...
	*@author rivetr
	*/
	//class msgSvr.SMsgChat extends MsgTemplate
	var SMsgChat=(function(_super){
		function SMsgChat(){
			this.uid=0;
			this.msgChatID=0;
			this.chatMsgData='';
			SMsgChat.__super.call(this);
			this.clear();
		}

		__class(SMsgChat,'msgSvr.SMsgChat',_super);
		var __proto=SMsgChat.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			this.uid=msg.getUint16();
			this.msgChatID=msg.getUint16();
			switch(this.msgChatID){
				case 1:
					this.chatMsgData='发呆';
					break ;
				case 2:
					this.chatMsgData='寻敌';
					break ;
				case 3:
					this.chatMsgData='追击';
					break ;
				case 4:
					this.chatMsgData='攻击';
					break ;
				case 5:
					this.chatMsgData='吃雪花';
					break ;
				case 6:
					this.chatMsgData='逃跑';
					break ;
				case 7:
					this.chatMsgData='持续';
					break ;
				case 8:
					this.chatMsgData='游走';
					break ;
				default :
					this.chatMsgData='未知';
				}
			return true;
		}

		__proto.serverWriteBody=function(msg){
			msg.writeUint16(this.uid);
			msg.writeUint16(this.msgChatID);
			return true;
		}

		/**
		*消息发送出去之前的size处理.每一个从MsgTemplate派生的类必须override这个函数，计算自己的size
		*/
		__proto.getMsgBodySize=function(){
			return 64;
		}

		__proto.clear=function(){
			this.uid=0;
			this.msgChatID=0;
			return _super.prototype.clear.call(this);
		}

		SMsgChat.MSGID=0;
		return SMsgChat;
	})(MsgTemplate)


	/**
	*...
	*@author dongketao
	*/
	//class msgSvr.SMsgChgBulletTarget extends MsgTemplate
	var SMsgChgBulletTarget=(function(_super){
		function SMsgChgBulletTarget(){
			this.uid=0;
			this.targetId=0;
			SMsgChgBulletTarget.__super.call(this);
			this.msgViewCal=true;
		}

		__class(SMsgChgBulletTarget,'msgSvr.SMsgChgBulletTarget',_super);
		var __proto=SMsgChgBulletTarget.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			this.uid=msg.getUint16();
			this.targetId=msg.getUint16();
			return true;
		}

		__proto.serverWriteBody=function(msg){
			msg.writeUint16(this.uid);
			msg.writeUint16(this.targetId);
			return true;
		}

		/**
		*消息发送出去之前的size处理.每一个从MsgTemplate派生的类必须override这个函数，计算自己的size
		*/
		__proto.getMsgSize=function(){
			return 50;
		}

		/*+getStrByteSize(type)*/
		__proto.clear=function(){
			this.uid=0;
			this.targetId=0;
			return _super.prototype.clear.call(this);
		}

		SMsgChgBulletTarget.MSGID=0;
		return SMsgChgBulletTarget;
	})(MsgTemplate)


	/**
	*...
	*@author ...
	*/
	//class msgSvr.SMsgChgProperty extends MsgTemplate
	var SMsgChgProperty=(function(_super){
		function SMsgChgProperty(){
			this.uid=0;
			this.itemNum=0;
			this.x=NaN;
			this.y=NaN;
			this.itemList=new Array;
			SMsgChgProperty.__super.call(this);
			this.msgViewCal=true;
		}

		__class(SMsgChgProperty,'msgSvr.SMsgChgProperty',_super);
		var __proto=SMsgChgProperty.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			this.uid=msg.getUint16();
			this.itemNum=msg.getUint16();
			for (var i=0;i < this.itemNum;i++)
			{this.itemList[i]=this.itemList[i]|| PropertyData.getData();
				this.itemList[i].clientReadBody(msg,msgLen);
			}
			return true;
		}

		__proto.serverWriteBody=function(msg){
			msg.writeUint16(this.uid);
			msg.writeUint16(this.itemNum);
			for (var i=0,sz=this.itemList.length;i<sz;i++){
				this.itemList[i].serverWriteBody(msg);
			}
			return true;
		}

		__proto.getMsgBodySize=function(){
			return this.itemNum *6+4;
		}

		/**
		*超过64个的item需要发送客户端，则使用大缓冲区.
		*@return
		*/
		__proto.isBigMsg=function(){
			if (this.itemNum > 64)return true;
			return false;
		}

		__proto.clear=function(){
			for (var ti=0;ti < this.itemNum;ti++){
				PropertyData.release(this.itemList[ti]);
			}
			this.uid=0;
			this.itemNum=0;
			this.itemList.length=0;
			this.msgViewCal=true;
			return _super.prototype.clear.call(this);
		}

		SMsgChgProperty.MSGID=0;
		return SMsgChgProperty;
	})(MsgTemplate)


	//class msgSvr.SMsgChgUserState extends MsgTemplate
	var SMsgChgUserState=(function(_super){
		function SMsgChgUserState(){
			this.stateMark=0;
			this.stateValue=0;
			this.playerUid=0;
			SMsgChgUserState.__super.call(this);
		}

		__class(SMsgChgUserState,'msgSvr.SMsgChgUserState',_super);
		var __proto=SMsgChgUserState.prototype;
		__proto.serverWriteBody=function(msg){
			msg.writeInt32(this.playerUid);
			msg.writeUint8(this.stateMark);
			msg.writeUint8(this.stateValue);
			return true;
		}

		__proto.clientReadBody=function(msg,msgLen){
			this.playerUid=msg.getInt32();
			this.stateMark=msg.getUint8();
			this.stateValue=msg.getUint8();
			return true;
		}

		__proto.clear=function(){
			this.stateMark=this.stateValue=0;
			return _super.prototype.clear.call(this);
		}

		SMsgChgUserState.MSGID=0;
		return SMsgChgUserState;
	})(MsgTemplate)


	/**
	*...
	*@author dongketao
	*/
	//class msgSvr.SMsgCloud extends MsgTemplate
	var SMsgCloud=(function(_super){
		function SMsgCloud(){
			this.itemId=0;
			this.uid=0;
			this.x=0;
			this.y=0;
			this.angle=NaN;
			this.speed=0;
			SMsgCloud.__super.call(this);
		}

		__class(SMsgCloud,'msgSvr.SMsgCloud',_super);
		var __proto=SMsgCloud.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			this.itemId=msg.getUint16();
			this.uid=msg.getUint16();
			this.x=msg.getInt16();
			this.y=msg.getInt16();
			this.angle=msg.readByte()*5;
			this.speed=msg.getUint16()/ 1000;
			return true;
		}

		__proto.serverWriteBody=function(msg){
			msg.writeUint16(this.itemId);
			msg.writeUint16(this.uid);
			msg.writeInt16(this.x);
			msg.writeInt16(this.y);
			msg.writeByte(Math.floor(this.angle / 5));
			msg.writeUint16(Math.floor(this.speed *1000));
			return true;
		}

		/**
		*消息发送出去之前的size处理.每一个从MsgTemplate派生的类必须override这个函数，计算自己的size
		*/
		__proto.getMsgSize=function(){
			return 25;
		}

		/*+getStrByteSize(type)*/
		__proto.clear=function(){
			this.itemId=0;
			this.uid=0;
			this.x=0;
			this.y=0;
			this.angle=0;
			this.speed=0;
			return _super.prototype.clear.call(this);
		}

		SMsgCloud.MSGID=0;
		return SMsgCloud;
	})(MsgTemplate)


	/**
	*...
	*@author dongketao
	*/
	//class msgSvr.SMsgCollision extends MsgTemplate
	var SMsgCollision=(function(_super){
		function SMsgCollision(){
			this.uidHitOwner=0;
			this.uidHit=0;
			this.uidBeHit=0;
			this.beHitBloodVal=0;
			this.beHitScore=0;
			SMsgCollision.__super.call(this);
			this.clear();
		}

		__class(SMsgCollision,'msgSvr.SMsgCollision',_super);
		var __proto=SMsgCollision.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			this.uidHitOwner=msg.getUint16();
			this.uidHit=msg.getUint16();
			this.uidBeHit=msg.getUint16();
			this.beHitBloodVal=msg.getInt32();
			this.beHitScore=msg.getInt32();
			return true;
		}

		__proto.serverWriteBody=function(msg){
			msg.writeUint16(this.uidHitOwner);
			msg.writeUint16(this.uidHit);
			msg.writeUint16(this.uidBeHit);
			msg.writeInt32(this.beHitBloodVal);
			msg.writeInt32(this.beHitScore);
			return true;
		}

		/**
		*消息发送出去之前的size处理.每一个从MsgTemplate派生的类必须override这个函数，计算自己的size
		*/
		__proto.getMsgBodySize=function(){
			return 15;
		}

		__proto.clear=function(){
			this.uidHitOwner=0;
			this.uidHit=0;
			this.uidBeHit=0;
			this.beHitBloodVal=0;
			this.beHitScore=0;
			return _super.prototype.clear.call(this);
		}

		SMsgCollision.MSGID=0;
		return SMsgCollision;
	})(MsgTemplate)


	/**
	*...
	*@author Chen Gong
	*/
	//class msgSvr.SMsgCollisionResult extends MsgTemplate
	var SMsgCollisionResult=(function(_super){
		function SMsgCollisionResult(){
			this.uidHitOwner=0;
			this.uidHitScoreChg=0;
			this.uidBeHitOwner=0;
			this.uidBeHitScoreChg=0;
			this.angle=NaN;
			this.isCrit=NaN;
			SMsgCollisionResult.__super.call(this);
		}

		__class(SMsgCollisionResult,'msgSvr.SMsgCollisionResult',_super);
		var __proto=SMsgCollisionResult.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			_super.prototype.clientReadBody.call(this,msg,msgLen);
			this.uidHitOwner=msg.getInt16();
			this.uidHitScoreChg=msg.getInt16();
			this.uidBeHitOwner=msg.getInt16();
			this.uidBeHitScoreChg=msg.getInt16();
			this.angle=msg.getUint8()*2;
			this.isCrit=msg.getUint8();
			return true;
		}

		__proto.serverWriteBody=function(msg){
			_super.prototype.serverWriteBody.call(this,msg);
			msg.writeInt16(this.uidHitOwner);
			msg.writeInt16(this.uidHitScoreChg);
			msg.writeInt16(this.uidBeHitOwner);
			msg.writeInt16(this.uidBeHitScoreChg);
			msg.writeUint8(Math.floor(this.angle / 2));
			msg.writeUint8(this.isCrit);
			return true;
		}

		__proto.clear=function(){
			this.uidHitOwner=0;
			this.uidHitScoreChg=0;
			this.uidBeHitOwner=0;
			this.uidBeHitScoreChg=0;
			this.angle=0;
			this.isCrit=0;
			return _super.prototype.clear.call(this);
		}

		SMsgCollisionResult.MSGID=0;
		return SMsgCollisionResult;
	})(MsgTemplate)


	/**
	*...
	*@author Chen Gong
	*/
	//class msgSvr.SMsgCombinedMsg extends MsgTemplate
	var SMsgCombinedMsg=(function(_super){
		function SMsgCombinedMsg(){
			this.msgCombine=[];
			this.msgClassID=NaN;
			SMsgCombinedMsg.__super.call(this);
			this.msgViewCal=true;
		}

		__class(SMsgCombinedMsg,'msgSvr.SMsgCombinedMsg',_super);
		var __proto=SMsgCombinedMsg.prototype;
		__proto.init=function(id){
			this.msgClassID=id;
		}

		__proto.clientReadBody=function(msg,msgLen){
			var msgCombineLen=msg.getInt16();
			this.msgClassID=msg.getInt16();
			var className=MsgTemplate.getMsgTemplate()[this.msgClassID];
			this.msgCombine=[];
			for (var i=0;i < msgCombineLen;i++){
				var singleMsg=MsgTemplate.createWithClass(className);
				singleMsg.ref++;
				singleMsg.clientReadBody(msg,msgLen);
				this.msgCombine.push(singleMsg);
			}
			return true;
		}

		__proto.serverWriteBody=function(msg){
			msg.writeInt16(this.msgCombine.length);
			msg.writeInt16(this.msgClassID);
			for (var i=0;i < this.msgCombine.length;i++){
				var singleMsg=this.msgCombine[i];
				singleMsg.serverWriteBody(msg);
			}
			return true;
		}

		__proto.getMsgBodySize=function(){
			return 1024;
		}

		__proto.clear=function(){
			if (this.msgCombine){
				for (var ti=0;ti < this.msgCombine.length;ti++){
					MsgTemplate.release(this.msgCombine[ti]);
				}
			}
			this.msgClassID=0;
			this.msgCombine=[];
			this.msgViewCal=true;
			return _super.prototype.clear.call(this);
		}

		SMsgCombinedMsg.MSGID=0;
		return SMsgCombinedMsg;
	})(MsgTemplate)


	/**
	*...
	*@author ...
	*/
	//class msgSvr.SMsgContinueTime extends MsgTemplate
	var SMsgContinueTime=(function(_super){
		function SMsgContinueTime(){
			this.roomTimeLeft=0;
			SMsgContinueTime.__super.call(this);
		}

		__class(SMsgContinueTime,'msgSvr.SMsgContinueTime',_super);
		var __proto=SMsgContinueTime.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			this.roomTimeLeft=msg.getUint32();
			return true;
		}

		__proto.serverWriteBody=function(msg){
			msg.writeUint32(this.roomTimeLeft);
			return true;
		}

		__proto.clear=function(){
			this.roomTimeLeft=0;
			return _super.prototype.clear.call(this);
		}

		SMsgContinueTime.MSGID=0;
		return SMsgContinueTime;
	})(MsgTemplate)


	/**
	*...
	*@author Chen Gong
	*/
	//class msgSvr.SMsgControlBullet extends MsgTemplate
	var SMsgControlBullet=(function(_super){
		function SMsgControlBullet(){
			this.uid=0;
			this.angle=0;
			SMsgControlBullet.__super.call(this);
			this.uid=0;
			this.angle=0;
		}

		__class(SMsgControlBullet,'msgSvr.SMsgControlBullet',_super);
		var __proto=SMsgControlBullet.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			this.uid=msg.getUint16();
			this.angle=msg.getUint8();
			if (this.angle !=-1)this.angle *=2;
			return true;
		}

		__proto.serverWriteBody=function(msg){
			msg.writeUint16(this.uid);
			msg.writeUint8(this.angle==-1?-1:Math.floor(this.angle / 2));
			return true;
		}

		__proto.fillData=function(msg){
			this.angle=msg.angle;
		}

		__proto.clear=function(){
			this.uid=0;
			this.angle=0;
			return _super.prototype.clear.call(this);
		}

		SMsgControlBullet.MSGID=0;
		return SMsgControlBullet;
	})(MsgTemplate)


	/**
	*狂欢开始消息
	*@author dongketao
	*/
	//class msgSvr.SMsgCrazyStart extends MsgTemplate
	var SMsgCrazyStart=(function(_super){
		function SMsgCrazyStart(){
			SMsgCrazyStart.__super.call(this);
			this.clear();
		}

		__class(SMsgCrazyStart,'msgSvr.SMsgCrazyStart',_super);
		var __proto=SMsgCrazyStart.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			return true;
		}

		__proto.serverWriteBody=function(msg){
			return true;
		}

		/**
		*消息发送出去之前的size处理.每一个从MsgTemplate派生的类必须override这个函数，计算自己的size
		*/
		__proto.getMsgBodySize=function(){
			return 4;
		}

		__proto.clear=function(){
			return _super.prototype.clear.call(this);
		}

		SMsgCrazyStart.MSGID=0;
		return SMsgCrazyStart;
	})(MsgTemplate)


	/**
	*...
	*@author Chen Gong
	*/
	//class msgSvr.SMsgCrit extends MsgTemplate
	var SMsgCrit=(function(_super){
		function SMsgCrit(){
			this.behitStateList=[];
			SMsgCrit.__super.call(this);
		}

		__class(SMsgCrit,'msgSvr.SMsgCrit',_super);
		var __proto=SMsgCrit.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			var behitListItemLen=msg.readByte();
			for (var i=0,len=behitListItemLen;i < len;i++){
				this.behitStateList.push(msg.getUint16());
			}
			return true;
		}

		__proto.serverWriteBody=function(msg){
			msg.writeByte(this.behitStateList.length);
			for (var i=0,len=this.behitStateList.length;i < len;i++){
				msg.writeUint16(this.behitStateList[i]);
			}
			return true;
		}

		/**
		*消息发送出去之前的size处理.每一个从MsgTemplate派生的类必须override这个函数，计算自己的size
		*/
		__proto.getMsgBodySize=function(){
			return this.behitStateList.length *2;
		}

		__proto.clear=function(){
			this.behitStateList.length=0;
			return _super.prototype.clear.call(this);
		}

		SMsgCrit.MSGID=0;
		return SMsgCrit;
	})(MsgTemplate)


	/**
	*...
	*@author dongketao
	*/
	//class msgSvr.SMsgDelSnorw extends MsgTemplate
	var SMsgDelSnorw=(function(_super){
		function SMsgDelSnorw(){
			this.itemNum=0;
			this.itemList=new Array;
			SMsgDelSnorw.__super.call(this);
			this.msgViewCal=true;
		}

		__class(SMsgDelSnorw,'msgSvr.SMsgDelSnorw',_super);
		var __proto=SMsgDelSnorw.prototype;
		__proto.clear=function(){
			for (var ti=0;ti < this.itemNum;ti++){
				DelFoodData.release(this.itemList[ti]);
			}
			this.itemNum=0;
			this.itemList.length=0;
			this.msgViewCal=true;
			return _super.prototype.clear.call(this);
		}

		__proto.clientReadBody=function(msg,msgLen){
			this.itemNum=msg.getUint16();
			for (var i=0;i < this.itemNum;i++)
			{this.itemList[i]=this.itemList[i]|| DelFoodData.getData();
				this.itemList[i].clientReadBody(msg,msgLen);
			}
			return true;
		}

		__proto.serverWriteBody=function(msg){
			msg.writeUint16(this.itemNum);
			for (var i=0,sz=this.itemList.length;i<sz;i++){
				this.itemList[i].serverWriteBody(msg);
			}
			return true;
		}

		__proto.getMsgBodySize=function(){
			return this.itemNum *6+15;
		}

		/**
		*超过64个的item需要发送客户端，则使用大缓冲区.
		*@return
		*/
		__proto.isBigMsg=function(){
			if (this.itemNum > 64)return true;
			return false;
		}

		SMsgDelSnorw.MSGID=0;
		return SMsgDelSnorw;
	})(MsgTemplate)


	/**
	*濒死消息
	*@author dongketao
	*/
	//class msgSvr.SMsgDying extends MsgTemplate
	var SMsgDying=(function(_super){
		function SMsgDying(){
			this.deadUserGameUID=0;
			this.deadLostScore=0;
			SMsgDying.__super.call(this);
			this.clear();
		}

		__class(SMsgDying,'msgSvr.SMsgDying',_super);
		var __proto=SMsgDying.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			this.deadUserGameUID=msg.getInt32();
			this.deadLostScore=msg.getInt16();
			return true;
		}

		__proto.serverWriteBody=function(msg){
			msg.writeInt32(this.deadUserGameUID);
			msg.writeInt16(this.deadLostScore);
			return true;
		}

		/**
		*消息发送出去之前的size处理.每一个从MsgTemplate派生的类必须override这个函数，计算自己的size
		*/
		__proto.getMsgBodySize=function(){
			return 6;
		}

		__proto.clear=function(){
			this.deadUserGameUID=0;
			this.deadLostScore=0;
			return _super.prototype.clear.call(this);
		}

		SMsgDying.MSGID=0;
		return SMsgDying;
	})(MsgTemplate)


	/**
	*...
	*@author Chen Gong
	*/
	//class msgSvr.SMsgEndRabitChange extends MsgTemplate
	var SMsgEndRabitChange=(function(_super){
		function SMsgEndRabitChange(){
			this.uid=0;
			SMsgEndRabitChange.__super.call(this);
		}

		__class(SMsgEndRabitChange,'msgSvr.SMsgEndRabitChange',_super);
		var __proto=SMsgEndRabitChange.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			_super.prototype.clientReadBody.call(this,msg,msgLen);
			this.uid=msg.getInt32();
			return true;
		}

		__proto.serverWriteBody=function(msg){
			_super.prototype.serverWriteBody.call(this,msg);
			msg.writeInt32(this.uid);
			return true;
		}

		__proto.clear=function(){
			this.uid=0;
			return _super.prototype.clear.call(this);
		}

		SMsgEndRabitChange.MSGID=0;
		return SMsgEndRabitChange;
	})(MsgTemplate)


	/**
	*...
	*@author rivetr
	*/
	//class msgSvr.SMsgEnterRoom extends MsgTemplate
	var SMsgEnterRoom=(function(_super){
		function SMsgEnterRoom(ed){
			this.erData=null;
			this.roomStartTime=0;
			SMsgEnterRoom.__super.call(this);
			this.erData=ed;
		}

		__class(SMsgEnterRoom,'msgSvr.SMsgEnterRoom',_super);
		var __proto=SMsgEnterRoom.prototype;
		__proto.clientReadBody=function(msg,msgLen){this.erData=this.erData|| new EnterRoomData();
			this.erData.clientReadBody(msg,msgLen);
			this.roomStartTime=msg.getFloat64();
			return true;
		}

		__proto.serverWriteBody=function(msg){
			this.erData.serverWriteBody(msg);
			msg.writeFloat64(this.roomStartTime);
			return true;
		}

		/**
		*消息发送出去之前的size处理.每一个从MsgTemplate派生的类必须override这个函数，计算自己的size
		*/
		__proto.getMsgSize=function(){
			return 120;
		}

		/*+getStrByteSize(erData.teamName)*/
		__proto.clear=function(){
			return _super.prototype.clear.call(this);
		}

		SMsgEnterRoom.MSGID=0;
		return SMsgEnterRoom;
	})(MsgTemplate)


	/**
	*dkt
	*@author ...
	*/
	//class msgSvr.SMsgFightExpression extends MsgTemplate
	var SMsgFightExpression=(function(_super){
		function SMsgFightExpression(){
			this.expressionId=0;
			this.gameUID=0;
			SMsgFightExpression.__super.call(this);
		}

		__class(SMsgFightExpression,'msgSvr.SMsgFightExpression',_super);
		var __proto=SMsgFightExpression.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			_super.prototype.clientReadBody.call(this,msg,msgLen);
			this.expressionId=msg.getUint16();
			this.gameUID=msg.getInt32();
			return true;
		}

		__proto.serverWriteBody=function(msg){
			_super.prototype.serverWriteBody.call(this,msg);
			msg.writeUint16(this.expressionId);
			msg.writeInt32(this.gameUID);
			return true;
		}

		__proto.clear=function(){
			this.expressionId=0;
			this.gameUID=0;
			return _super.prototype.clear.call(this);
		}

		SMsgFightExpression.MSGID=0;
		return SMsgFightExpression;
	})(MsgTemplate)


	/**
	*李飞
	*@author ...
	*/
	//class msgSvr.SMsgFightSpeak extends MsgTemplate
	var SMsgFightSpeak=(function(_super){
		function SMsgFightSpeak(){
			this.worldKey=0;
			this.type=0;
			this.uid=0;
			SMsgFightSpeak.__super.call(this);
		}

		__class(SMsgFightSpeak,'msgSvr.SMsgFightSpeak',_super);
		var __proto=SMsgFightSpeak.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			_super.prototype.clientReadBody.call(this,msg,msgLen);
			this.worldKey=msg.getUint16();
			this.type=msg.getUint16();
			this.uid=msg.getUint16();
			return true;
		}

		__proto.serverWriteBody=function(msg){
			_super.prototype.serverWriteBody.call(this,msg);
			msg.writeUint16(this.worldKey);
			msg.writeUint16(this.type);
			msg.writeUint16(this.uid);
			return true;
		}

		__proto.clear=function(){
			this.worldKey=0;
			return _super.prototype.clear.call(this);
		}

		SMsgFightSpeak.MSGID=0;
		return SMsgFightSpeak;
	})(MsgTemplate)


	/**
	*...
	*@author Chen Gong
	*/
	//class msgSvr.SMsgFlagsPlaced extends MsgTemplate
	var SMsgFlagsPlaced=(function(_super){
		function SMsgFlagsPlaced(){
			this.flagNum=0;
			this.flags=null;
			this.flagTeamIDs=null;
			SMsgFlagsPlaced.__super.call(this);
		}

		__class(SMsgFlagsPlaced,'msgSvr.SMsgFlagsPlaced',_super);
		var __proto=SMsgFlagsPlaced.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			this.flagNum=msg.readByte();
			this.flags=[];
			for (var i=0;i < this.flagNum;i++){
				this.flags[i]=msg.getUint16();
			}
			this.flagTeamIDs=[];
			for (var j=0;j < this.flagNum;j++){
				this.flagTeamIDs[j]=msg.readByte();
			}
			return true;
		}

		__proto.serverWriteBody=function(msg){
			msg.writeByte(this.flagNum);
			for (var i=0,sz=this.flags.length;i<sz;i++){
				msg.writeUint16(this.flags[i]);
			}
			for (var j=0,sz2=this.flagTeamIDs.length;j<sz2;j++){
				msg.writeByte(this.flagTeamIDs[j]);
			}
			return true;
		}

		__proto.clear=function(){
			this.flagNum=0;
			this.flags=[];
			this.flagTeamIDs=[];
			return _super.prototype.clear.call(this);
		}

		SMsgFlagsPlaced.MSGID=0;
		return SMsgFlagsPlaced;
	})(MsgTemplate)


	/**
	*...
	*@author dongketao
	*/
	//class msgSvr.SMsgFoodCooked extends MsgTemplate
	var SMsgFoodCooked=(function(_super){
		function SMsgFoodCooked(){
			this.uid=0;
			SMsgFoodCooked.__super.call(this);
		}

		__class(SMsgFoodCooked,'msgSvr.SMsgFoodCooked',_super);
		var __proto=SMsgFoodCooked.prototype;
		__proto.clear=function(){
			this.uid=0;
			return _super.prototype.clear.call(this);
		}

		__proto.clientReadBody=function(msg,msgLen){
			this.uid=msg.getInt16();
			return true;
		}

		__proto.serverWriteBody=function(msg){
			msg.writeInt16(this.uid);
			return true;
		}

		SMsgFoodCooked.MSGID=0;
		return SMsgFoodCooked;
	})(MsgTemplate)


	/**
	*好友进入消息
	*@author ...
	*/
	//class msgSvr.SMsgFriendJoin extends MsgTemplate
	var SMsgFriendJoin=(function(_super){
		function SMsgFriendJoin(){
			this.gameUID=0;
			SMsgFriendJoin.__super.call(this);
		}

		__class(SMsgFriendJoin,'msgSvr.SMsgFriendJoin',_super);
		var __proto=SMsgFriendJoin.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			_super.prototype.clientReadBody.call(this,msg,msgLen);
			this.gameUID=msg.getInt32();
			return true;
		}

		__proto.serverWriteBody=function(msg){
			_super.prototype.serverWriteBody.call(this,msg);
			msg.writeInt32(this.gameUID);
			return true;
		}

		__proto.clear=function(){
			this.gameUID=0;
			return _super.prototype.clear.call(this);
		}

		SMsgFriendJoin.MSGID=0;
		return SMsgFriendJoin;
	})(MsgTemplate)


	/**
	*...
	*@author dkt
	*/
	//class msgSvr.SMsgGhostChange extends MsgTemplate
	var SMsgGhostChange=(function(_super){
		function SMsgGhostChange(){
			this.gameUID=0;
			this.state=0;
			SMsgGhostChange.__super.call(this);
		}

		__class(SMsgGhostChange,'msgSvr.SMsgGhostChange',_super);
		var __proto=SMsgGhostChange.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			_super.prototype.clientReadBody.call(this,msg,msgLen);
			this.gameUID=msg.getInt32();
			this.state=msg.readByte();
			return true;
		}

		__proto.serverWriteBody=function(msg){
			_super.prototype.serverWriteBody.call(this,msg);
			msg.writeInt32(this.gameUID);
			msg.writeByte(this.state);
			return true;
		}

		__proto.clear=function(){
			this.gameUID=0;
			this.state=0;
			return _super.prototype.clear.call(this);
		}

		SMsgGhostChange.MSGID=0;
		return SMsgGhostChange;
	})(MsgTemplate)


	/**
	*...
	*@author dongketao
	*/
	//class msgSvr.SMsgHostedRobot extends MsgTemplate
	var SMsgHostedRobot=(function(_super){
		function SMsgHostedRobot(){
			this.currAiGameUIDs=[];
			SMsgHostedRobot.__super.call(this);
		}

		__class(SMsgHostedRobot,'msgSvr.SMsgHostedRobot',_super);
		var __proto=SMsgHostedRobot.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			var skillsLen=msg.readByte();
			this.currAiGameUIDs=[];
			var tem=0;
			var i=0;
			var len=0;
			for (i=0,len=skillsLen;i < len;i++){
				tem=msg.getInt32();
				this.currAiGameUIDs.push(tem);
			}
			return true;
		}

		__proto.serverWriteBody=function(msg){
			msg.writeByte(this.currAiGameUIDs.length);
			var i=0;
			var len=0;
			for (i=0,len=this.currAiGameUIDs.length;i < len;i++){
				msg.writeInt32(this.currAiGameUIDs[i]);
			}
			return true;
		}

		/**
		*消息发送出去之前的size处理.每一个从MsgTemplate派生的类必须override这个函数，计算自己的size
		*/
		__proto.getMsgBodySize=function(){
			return this.currAiGameUIDs.length *4;
		}

		/*+delAiGameUIDs.length *4*/
		__proto.clear=function(){
			this.currAiGameUIDs.length=0;
			return _super.prototype.clear.call(this);
		}

		SMsgHostedRobot.MSGID=0;
		return SMsgHostedRobot;
	})(MsgTemplate)


	/**
	*...
	*@author dongketao
	*/
	//class msgSvr.SMsgItemAppear extends MsgTemplate
	var SMsgItemAppear=(function(_super){
		function SMsgItemAppear(){
			this.itemNum=0;
			this.itemList=new Array;
			SMsgItemAppear.__super.call(this);
		}

		__class(SMsgItemAppear,'msgSvr.SMsgItemAppear',_super);
		var __proto=SMsgItemAppear.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			this.itemNum=msg.getUint16();
			for (var i=0;i < this.itemNum;i++)
			{this.itemList[i]=this.itemList[i]|| ItemData.getData();
				this.itemList[i].clientReadBody(msg,msgLen);
			}
			return true;
		}

		__proto.serverWriteBody=function(msg){
			msg.writeUint16(this.itemNum);
			for (var i=0,sz=this.itemList.length;i<sz;i++){
				this.itemList[i] && this.itemList[i].serverWriteBody(msg);
			}
			return true;
		}

		__proto.getMsgBodySize=function(){
			return this.itemNum *18+2;
		}

		/**
		*超过64个的item需要发送客户端，则使用大缓冲区.
		*@return
		*/
		__proto.isBigMsg=function(){
			if (this.itemNum > 64)return true;
			return false;
		}

		__proto.clear=function(){
			for (var ti=0;ti < this.itemNum;ti++){
				ItemData.release(this.itemList[ti]);
			}
			this.itemNum=0;
			this.itemList.length=0;
			return _super.prototype.clear.call(this);
		}

		SMsgItemAppear.MSGID=0;
		return SMsgItemAppear;
	})(MsgTemplate)


	/**
	*...
	*@author dongketao
	*/
	//class msgSvr.SMsgItemDisappear extends MsgTemplate
	var SMsgItemDisappear=(function(_super){
		function SMsgItemDisappear(){
			this.itemNum=0;
			this.itemList=new Array;
			SMsgItemDisappear.__super.call(this);
		}

		__class(SMsgItemDisappear,'msgSvr.SMsgItemDisappear',_super);
		var __proto=SMsgItemDisappear.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			this.itemNum=msg.getUint16();
			for (var i=0;i < this.itemNum;i++){
				this.itemList.push(msg.getUint16());
			}
			return true;
		}

		__proto.serverWriteBody=function(msg){
			msg.writeUint16(this.itemNum);
			for (var i=0;i < this.itemList.length;i++){
				msg.writeUint16(this.itemList[i]);
			}
			return true;
		}

		__proto.getMsgBodySize=function(){
			return 2+this.itemList.length *4;
		}

		__proto.clear=function(){
			this.itemNum=0;
			this.itemList.length=0;
			return _super.prototype.clear.call(this);
		}

		SMsgItemDisappear.MSGID=0;
		return SMsgItemDisappear;
	})(MsgTemplate)


	/**
	*...
	*@author dongketao
	*/
	//class msgSvr.SMsgItemPosAppear extends MsgTemplate
	var SMsgItemPosAppear=(function(_super){
		function SMsgItemPosAppear(){
			this.itemNum=0;
			this.itemList=new Array;
			SMsgItemPosAppear.__super.call(this);
		}

		__class(SMsgItemPosAppear,'msgSvr.SMsgItemPosAppear',_super);
		var __proto=SMsgItemPosAppear.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			this.itemNum=msg.getUint16();
			for (var i=0;i < this.itemNum;i++)
			{this.itemList[i]=this.itemList[i]|| ItemPosData.getData();
				this.itemList[i].clientReadBody(msg,msgLen);
			}
			return true;
		}

		__proto.serverWriteBody=function(msg){
			msg.writeUint16(this.itemNum);
			for (var i=0,sz=this.itemList.length;i<sz;i++){
				this.itemList[i].serverWriteBody(msg);
			}
			return true;
		}

		__proto.getMsgBodySize=function(){
			return 1024;
		}

		/**
		*超过64个的item需要发送客户端，则使用大缓冲区.
		*@return
		*/
		__proto.isBigMsg=function(){
			if (this.itemNum > 64)return true;
			return false;
		}

		__proto.clear=function(){
			for (var ti=0;ti < this.itemNum;ti++){
				ItemPosData.release(this.itemList[ti]);
			}
			this.itemNum=0;
			this.itemList.length=0;
			return _super.prototype.clear.call(this);
		}

		SMsgItemPosAppear.MSGID=0;
		return SMsgItemPosAppear;
	})(MsgTemplate)


	/**
	*...
	*@author dkt
	*/
	//class msgSvr.SMsgKillChg extends MsgTemplate
	var SMsgKillChg=(function(_super){
		function SMsgKillChg(){
			this.deaths=NaN;
			this.kills=NaN;
			SMsgKillChg.__super.call(this);
		}

		__class(SMsgKillChg,'msgSvr.SMsgKillChg',_super);
		var __proto=SMsgKillChg.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			_super.prototype.clientReadBody.call(this,msg,msgLen);
			this.deaths=msg.getUint16();
			this.kills=msg.getUint16();
			return true;
		}

		__proto.serverWriteBody=function(msg){
			_super.prototype.serverWriteBody.call(this,msg);
			msg.writeUint16(this.deaths);
			msg.writeUint16(this.kills);
			return true;
		}

		__proto.clear=function(){
			this.deaths=0;
			this.kills=0;
			return _super.prototype.clear.call(this);
		}

		SMsgKillChg.MSGID=0;
		return SMsgKillChg;
	})(MsgTemplate)


	/**
	*...
	*@author dongketao
	*/
	//class msgSvr.SMsgLevelUp extends MsgTemplate
	var SMsgLevelUp=(function(_super){
		function SMsgLevelUp(){
			this.uid=0;
			this.level=0;
			this.score=0;
			this.bloodVal=0;
			this.maxBloodVal=0;
			this.regain=0;
			this.scale=NaN;
			this.smaxSpeed=NaN;
			this.behitChgLevel=NaN;
			this.x=NaN;
			this.y=NaN;
			SMsgLevelUp.__super.call(this);
			this.msgViewCal=true;
		}

		__class(SMsgLevelUp,'msgSvr.SMsgLevelUp',_super);
		var __proto=SMsgLevelUp.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			this.uid=msg.getUint16();
			this.level=msg.getUint8();
			this.score=msg.getInt16();
			this.bloodVal=msg.getInt16();
			this.maxBloodVal=msg.getInt16();
			this.scale=msg.getFloat32();
			this.smaxSpeed=msg.getFloat32();
			this.behitChgLevel=msg.readByte();
			return true;
		}

		__proto.serverWriteBody=function(msg){
			msg.writeUint16(this.uid);
			msg.writeUint8(this.level);
			msg.writeInt16(this.score);
			msg.writeInt16(this.bloodVal);
			msg.writeInt16(this.maxBloodVal);
			msg.writeFloat32(this.scale);
			msg.writeFloat32(this.smaxSpeed);
			msg.writeByte(this.behitChgLevel);
			return true;
		}

		/**
		*消息发送出去之前的size处理.每一个从MsgTemplate派生的类必须override这个函数，计算自己的size
		*/
		__proto.getMsgBodySize=function(){
			return 15;
		}

		__proto.clear=function(){
			this.uid=-1;
			this.level=0;
			this.score=0;
			this.scale=1;
			this.smaxSpeed=0;
			this.behitChgLevel=0;
			this.msgViewCal=true;
			this.bloodVal=0;
			this.maxBloodVal=0;
			return _super.prototype.clear.call(this);
		}

		SMsgLevelUp.MSGID=0;
		return SMsgLevelUp;
	})(MsgTemplate)


	/**
	*...
	*@author dongketao
	*/
	//class msgSvr.SMsgLoginRes extends MsgTemplate
	var SMsgLoginRes=(function(_super){
		function SMsgLoginRes(){
			this.loginStatus=0;
			this.userGameUID=0;
			this.userUID=0;
			this.userRoomId=0;
			this.username=null;
			this.usergender=0;
			this.useravator=0;
			this.userquan=0;
			this.userbullet=0;
			this.usergun=0;
			this.userlevel=1;
			this.accountLevel=1;
			this.initTotalRank=0;
			this.initDailyRank=0;
			this.userPreHighestScore=0;
			this.firstTime=false;
			this.reconnection=0;
			this.customReconnection=0;
			this.sourceID=0;
			this.force=0;
			this.hidePoints=0;
			this.talkAuthority=0;
			this.talkOnBeAttack="";
			this.talkOnDead="";
			this.isForcein=0;
			this.forceinTeamID=0;
			this.headPortrait=null;
			this.isBear=false;
			this.isRabit=false;
			this.isQueen=false;
			this.currStars=0;
			this.birthScoreScale=1.0;
			this.birthX=0;
			this.birthY=0;
			this.channelId=0;
			this.hasPlayedCount=0;
			this.hasEnteredCount={};
			this.currRank=0;
			this.battleTask=0;
			this.isLunpanIn=0;
			SMsgLoginRes.__super.call(this);
		}

		__class(SMsgLoginRes,'msgSvr.SMsgLoginRes',_super);
		var __proto=SMsgLoginRes.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			this.loginStatus=msg.getUint8();
			this.sourceID=msg.getUint8();
			this.force=msg.getUint8();
			return true;
		}

		__proto.serverWriteBody=function(msg){
			msg.writeUint8(this.loginStatus);
			msg.writeUint8(this.sourceID);
			msg.writeUint8(this.force);
			return true;
		}

		__proto.fillData=function(msg){
			this.loginStatus=msg.loginStatus;
			this.userGameUID=msg.userGameUID;
			this.userUID=msg.userUID;
			this.userRoomId=msg.userRoomId;
			this.username=msg.username;
			this.usergender=msg.usergender;
			this.useravator=msg.useravator;
			this.userquan=msg.userquan;
			this.userbullet=msg.userbullet;
			this.usergun=msg.usergun;
			this.userlevel=msg.userlevel;
			this.accountLevel=msg.accountLevel;
			this.channelId=msg.channelId;
			this.hasPlayedCount=msg.hasPlayedCount;
			this.hasEnteredCount=msg.hasEnteredCount;
			this.currRank=msg.currRank;
			this.battleTask=msg.battleTask;
			this.isLunpanIn=msg.isLunpanIn;
			this.initDailyRank=(msg.initDailyRank)?(msg.initDailyRank):1;
			this.initTotalRank=(msg.initTotalRank)?(msg.initTotalRank):1;
			this.userPreHighestScore=(msg.userPreHighestScore)?(msg.userPreHighestScore):0;
			this.firstTime=(msg.firstTime)?(msg.firstTime):false;
			this.reconnection=msg.reconnection;
			this.customReconnection=msg.customReconnection;
			this.sourceID=msg.sourceID;
			this.force=msg.force;
			this.hidePoints=msg.hidePoints;
			this.talkAuthority=msg.talkAuthority;
			this.talkOnBeAttack=msg.talkOnBeAttack;
			this.talkOnDead=msg.talkOnDead;
			this.isForcein=msg.isForcein;
			this.forceinTeamID=msg.forceinTeamID;
			this.headPortrait=msg.headPortrait;
			this.isBear=msg.isBear;
			this.isRabit=msg.isRabit;
			this.isQueen=msg.isQueen;
			this.currStars=msg.currStars;
			this.birthScoreScale=msg.birthScoreScale;
			this.birthX=msg.birthX;
			this.birthY=msg.birthY;
		}

		/**
		*消息发送出去之前的size处理.每一个从MsgTemplate派生的类必须override这个函数，计算自己的size
		*/
		__proto.getMsgSize=function(){
			return 82+MsgTemplate.getStrByteSize(this.username);
		}

		__proto.clear=function(){
			this.loginStatus=0;
			this.userGameUID=0;
			this.userUID=0;
			this.userRoomId=0;
			this.username="";
			this.usergender=0;
			this.useravator=0;
			this.userquan=0;
			this.userbullet=0;
			this.usergun=0;
			this.userlevel=1;
			this.accountLevel=1;
			this.battleTask=0;
			this.isLunpanIn=0;
			this.initDailyRank=0;
			this.initTotalRank=0;
			this.userPreHighestScore=0;
			this.firstTime=false;
			this.reconnection=0;
			this.customReconnection=0;
			this.sourceID=0;
			this.force=0;
			this.hidePoints=0;
			this.channelId=0;
			this.hasPlayedCount=0;
			this.hasEnteredCount={};
			this.currRank=0;
			this.talkAuthority=0;
			this.talkOnBeAttack=null;
			this.talkOnDead=null;
			this.isForcein=0;
			this.forceinTeamID=0;
			this.headPortrait="";
			this.isBear=false;
			this.isRabit=false;
			this.isQueen=false;
			this.currStars=0;
			this.birthScoreScale=1.0;
			this.birthX=0;
			this.birthY=0;
			return _super.prototype.clear.call(this);
		}

		SMsgLoginRes.MSGID=0;
		return SMsgLoginRes;
	})(MsgTemplate)


	/**
	*...
	*@author Chen Gong
	*/
	//class msgSvr.SMsgLolipopScoreMax extends MsgTemplate
	var SMsgLolipopScoreMax=(function(_super){
		function SMsgLolipopScoreMax(){
			this.type=0;
			SMsgLolipopScoreMax.__super.call(this);
		}

		__class(SMsgLolipopScoreMax,'msgSvr.SMsgLolipopScoreMax',_super);
		var __proto=SMsgLolipopScoreMax.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			this.type=msg.readByte();
			return true;
		}

		__proto.serverWriteBody=function(msg){
			msg.writeByte(this.type);
			return true;
		}

		__proto.clear=function(){
			this.type=0;
			return _super.prototype.clear.call(this);
		}

		SMsgLolipopScoreMax.MSGID=0;
		return SMsgLolipopScoreMax;
	})(MsgTemplate)


	/**
	*...
	*@author Chen Gong
	*/
	//class msgSvr.SMsgModePlayTimes extends MsgTemplate
	var SMsgModePlayTimes=(function(_super){
		function SMsgModePlayTimes(){
			this.free=NaN;
			this.team=NaN;
			this.customfree=NaN;
			this.customteam=NaN;
			this.unlockSkill=NaN;
			SMsgModePlayTimes.__super.call(this);
		}

		__class(SMsgModePlayTimes,'msgSvr.SMsgModePlayTimes',_super);
		var __proto=SMsgModePlayTimes.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			_super.prototype.clientReadBody.call(this,msg,msgLen);
			this.free=msg.getUint32();
			this.team=msg.getUint32();
			this.customfree=msg.getUint32();
			this.customteam=msg.getUint32();
			this.unlockSkill=msg.getUint8();
			return true;
		}

		__proto.serverWriteBody=function(msg){
			_super.prototype.serverWriteBody.call(this,msg);
			msg.writeUint32(this.free);
			msg.writeUint32(this.team);
			msg.writeUint32(this.customfree);
			msg.writeUint32(this.customteam);
			msg.writeUint8(this.unlockSkill);
			return true;
		}

		__proto.clear=function(){
			this.free=0;
			this.team=0;
			this.customfree=0;
			this.customteam=0;
			this.unlockSkill=0;
			return _super.prototype.clear.call(this);
		}

		SMsgModePlayTimes.MSGID=0;
		return SMsgModePlayTimes;
	})(MsgTemplate)


	/**
	*...
	*@author dongketao
	*/
	//class msgSvr.SMsgMoveRight extends MsgTemplate
	var SMsgMoveRight=(function(_super){
		function SMsgMoveRight(){
			this.uid=0;
			SMsgMoveRight.__super.call(this);
			this.clear();
		}

		__class(SMsgMoveRight,'msgSvr.SMsgMoveRight',_super);
		var __proto=SMsgMoveRight.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			this.uid=msg.getUint16();
			return true;
		}

		__proto.serverWriteBody=function(msg){
			msg.writeUint16(this.uid);
			return true;
		}

		/**
		*消息发送出去之前的size处理.每一个从MsgTemplate派生的类必须override这个函数，计算自己的size
		*/
		__proto.getMsgBodySize=function(){
			return 12;
		}

		__proto.clear=function(){
			this.uid=0;
			return _super.prototype.clear.call(this);
		}

		SMsgMoveRight.MSGID=0;
		return SMsgMoveRight;
	})(MsgTemplate)


	/**
	*...
	*@author dongketao
	*/
	//class msgSvr.SMsgMyDie extends MsgTemplate
	var SMsgMyDie=(function(_super){
		function SMsgMyDie(){
			this.uidHit=0;
			this.curScore1=0;
			SMsgMyDie.__super.call(this);
		}

		__class(SMsgMyDie,'msgSvr.SMsgMyDie',_super);
		var __proto=SMsgMyDie.prototype;
		__proto.clientWriteBody=function(msg){
			msg.writeUint16(this.uidHit);
			msg.writeUint16(this.curScore1);
			return true;
		}

		__proto.serverReadBody=function(msg,msgLen){
			this.uidHit=msg.getUint16();
			this.curScore1=msg.getUint16();
			return true;
		}

		return SMsgMyDie;
	})(MsgTemplate)


	/**
	*...
	*@author Chen Gong
	*/
	//class msgSvr.SMsgNewbieRoomInfo extends MsgTemplate
	var SMsgNewbieRoomInfo=(function(_super){
		function SMsgNewbieRoomInfo(){
			this.step=NaN;
			this.x=NaN;
			this.y=NaN;
			SMsgNewbieRoomInfo.__super.call(this);
		}

		__class(SMsgNewbieRoomInfo,'msgSvr.SMsgNewbieRoomInfo',_super);
		var __proto=SMsgNewbieRoomInfo.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			this.step=msg.readByte();
			this.x=msg.getInt32();
			this.y=msg.getInt32();
			return true;
		}

		__proto.serverWriteBody=function(msg){
			msg.writeByte(this.step);
			msg.writeInt32(this.x);
			msg.writeInt32(this.y);
			return true;
		}

		__proto.clear=function(){
			this.step=2;
			this.x=0;
			this.y=0;
			return _super.prototype.clear.call(this);
		}

		SMsgNewbieRoomInfo.MSGID=0;
		return SMsgNewbieRoomInfo;
	})(MsgTemplate)


	/**
	*...
	*@author Chen Gong
	*/
	//class msgSvr.SMsgOpenBattleBox extends MsgTemplate
	var SMsgOpenBattleBox=(function(_super){
		function SMsgOpenBattleBox(){
			this.boxType=NaN;
			this.OwnerUid=NaN;
			this.uid=NaN;
			this.awardScore=NaN;
			SMsgOpenBattleBox.__super.call(this);
		}

		__class(SMsgOpenBattleBox,'msgSvr.SMsgOpenBattleBox',_super);
		var __proto=SMsgOpenBattleBox.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			this.boxType=msg.getInt32();
			this.uid=msg.getUint16();
			this.OwnerUid=msg.getUint16();
			this.awardScore=msg.getInt16();
			return true;
		}

		__proto.serverWriteBody=function(msg){
			msg.writeInt32(this.boxType);
			msg.writeUint16(this.uid);
			msg.writeUint16(this.OwnerUid);
			msg.writeInt16(this.awardScore);
			return true;
		}

		__proto.clear=function(){
			this.boxType=0;
			this.uid=0;
			this.OwnerUid=0;
			this.awardScore=0;
			return _super.prototype.clear.call(this);
		}

		SMsgOpenBattleBox.MSGID=0;
		return SMsgOpenBattleBox;
	})(MsgTemplate)


	/**
	*...
	*@author dongketao
	*/
	//class msgSvr.SMsgOwnPassiveSkill extends MsgTemplate
	var SMsgOwnPassiveSkill=(function(_super){
		function SMsgOwnPassiveSkill(){
			this.skills=[];
			SMsgOwnPassiveSkill.__super.call(this);
		}

		__class(SMsgOwnPassiveSkill,'msgSvr.SMsgOwnPassiveSkill',_super);
		var __proto=SMsgOwnPassiveSkill.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			var skillsLen=msg.readByte();
			this.skills=[];
			var tem=0;
			for (var i=0,len=skillsLen;i < len;i++){
				tem=msg.getUint32();
				this.skills.push(tem);
			}
			return true;
		}

		__proto.serverWriteBody=function(msg){
			msg.writeByte(this.skills.length);
			for (var i=0,len=this.skills.length;i < len;i++){
				msg.writeUint32(this.skills[i]);
			}
			return true;
		}

		/**
		*消息发送出去之前的size处理.每一个从MsgTemplate派生的类必须override这个函数，计算自己的size
		*/
		__proto.getMsgBodySize=function(){
			return this.skills.length *4;
		}

		__proto.clear=function(){
			this.skills.length=0;
			return _super.prototype.clear.call(this);
		}

		SMsgOwnPassiveSkill.MSGID=0;
		return SMsgOwnPassiveSkill;
	})(MsgTemplate)


	/**
	*...
	*@author dongketao
	*/
	//class msgSvr.SMsgRandomSkill extends MsgTemplate
	var SMsgRandomSkill=(function(_super){
		function SMsgRandomSkill(){
			this.skills=[];
			SMsgRandomSkill.__super.call(this);
		}

		__class(SMsgRandomSkill,'msgSvr.SMsgRandomSkill',_super);
		var __proto=SMsgRandomSkill.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			var skillsLen=msg.readByte();
			this.skills=[];
			var tem=0;
			for (var i=0,len=skillsLen;i < len;i++){
				tem=msg.getUint32();
				this.skills.push(tem);
			}
			return true;
		}

		__proto.serverWriteBody=function(msg){
			msg.writeByte(this.skills.length);
			for (var i=0,len=this.skills.length;i < len;i++){
				msg.writeUint32(this.skills[i]);
			}
			return true;
		}

		/**
		*消息发送出去之前的size处理.每一个从MsgTemplate派生的类必须override这个函数，计算自己的size
		*/
		__proto.getMsgBodySize=function(){
			return this.skills.length *4;
		}

		__proto.clear=function(){
			this.skills.length=0;
			return _super.prototype.clear.call(this);
		}

		SMsgRandomSkill.MSGID=0;
		return SMsgRandomSkill;
	})(MsgTemplate)


	/**
	*...
	*@author Chen Gong
	*/
	//class msgSvr.SMsgRankListFlag extends MsgTemplate
	var SMsgRankListFlag=(function(_super){
		function SMsgRankListFlag(){
			this.teamRankList=null;
			this.firstTenUsers=null;
			this.flagCarrierUid=0;
			this.score=NaN;
			this.isLast=NaN;
			SMsgRankListFlag.__super.call(this);
		}

		__class(SMsgRankListFlag,'msgSvr.SMsgRankListFlag',_super);
		var __proto=SMsgRankListFlag.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			var teamrankListLen=msg.readByte();
			this.teamRankList=[];
			for (var i=0;i < teamrankListLen;i++){
				var tem=new rankFlagData();
				tem.teammatesNum=msg.getUint8();
				tem.id=msg.getUint32();
				tem.score=msg.getInt32();
				this.teamRankList.push(tem);
			};
			var firstTenUsersLen=msg.readByte();
			this.firstTenUsers=[];
			for (var j=0;j < firstTenUsersLen;j++){
				this.firstTenUsers.push(msg.getInt16());
			}
			this.score=msg.getInt32();
			this.flagCarrierUid=msg.getInt16();
			this.isLast=msg.readByte();
			return true;
		}

		__proto.serverWriteBody=function(msg){
			msg.writeByte(this.teamRankList.length);
			for (var i=0,len=this.teamRankList.length;i < len;i++){
				var tem=this.teamRankList[i];
				msg.writeUint8(tem.teammatesNum);
				msg.writeUint32(tem.id);
				msg.writeInt32(tem.score);
			}
			msg.writeByte(this.firstTenUsers.length);
			for (var j=0,len1=this.firstTenUsers.length;j < len1;j++){
				msg.writeInt16(this.firstTenUsers[j]);
			}
			msg.writeInt32(this.score);
			msg.writeInt16(this.flagCarrierUid);
			msg.writeByte(this.isLast);
			return true;
		}

		__proto.getMsgBodySize=function(){
			return 1024;
		}

		__proto.clear=function(){
			this.teamRankList=[];
			this.firstTenUsers=[];
			this.score=0;
			this.flagCarrierUid=0;
			this.isLast=0;
			return _super.prototype.clear.call(this);
		}

		SMsgRankListFlag.MSGID=0;
		return SMsgRankListFlag;
	})(MsgTemplate)


	/**
	*...
	*@author Chen Gong
	*/
	//class msgSvr.SMsgRankListLolipop extends MsgTemplate
	var SMsgRankListLolipop=(function(_super){
		function SMsgRankListLolipop(){
			this.teamRankList=null;
			this.firstTenUsers=null;
			this.battleInfo=null;
			this.score=NaN;
			this.isLast=NaN;
			SMsgRankListLolipop.__super.call(this);
		}

		__class(SMsgRankListLolipop,'msgSvr.SMsgRankListLolipop',_super);
		var __proto=SMsgRankListLolipop.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			var teamrankListLen=msg.readByte();
			this.teamRankList=[];
			for (var i=0;i < teamrankListLen;i++){
				var tem=new rankLolipopData();
				tem.teammatesNum=msg.getUint8();
				tem.id=msg.getUint32();
				tem.score=msg.getInt32();
				this.teamRankList.push(tem);
			};
			var firstTenUsersLen=msg.readByte();
			this.firstTenUsers=[];
			for (var j=0;j < firstTenUsersLen;j++){
				this.firstTenUsers.push(msg.getInt16());
			}
			this.battleInfo=new LolipopBattleData();
			this.battleInfo.scoreNow=msg.getInt32();
			this.battleInfo.scoreGiven=msg.getInt32();
			this.score=msg.getInt32();
			this.isLast=msg.readByte();
			return true;
		}

		__proto.serverWriteBody=function(msg){
			msg.writeByte(this.teamRankList.length);
			for (var i=0,len=this.teamRankList.length;i < len;i++){
				var tem=this.teamRankList[i];
				msg.writeUint8(tem.teammatesNum);
				msg.writeUint32(tem.id);
				msg.writeInt32(tem.score);
			}
			msg.writeByte(this.firstTenUsers.length);
			for (var j=0,len1=this.firstTenUsers.length;j < len1;j++){
				msg.writeInt16(this.firstTenUsers[j]);
			}
			msg.writeInt32(this.battleInfo.scoreNow);
			msg.writeInt32(this.battleInfo.scoreGiven);
			msg.writeInt32(this.score);
			msg.writeByte(this.isLast);
			return true;
		}

		__proto.getMsgBodySize=function(){
			return 1024;
		}

		__proto.clear=function(){
			this.teamRankList=[];
			this.firstTenUsers=[];
			this.battleInfo=null;
			this.score=0;
			this.isLast=0;
			return _super.prototype.clear.call(this);
		}

		SMsgRankListLolipop.MSGID=0;
		return SMsgRankListLolipop;
	})(MsgTemplate)


	/**
	*...
	*@author ...
	*/
	//class msgSvr.SMsgReadyBullet extends MsgTemplate
	var SMsgReadyBullet=(function(_super){
		function SMsgReadyBullet(){
			this.uid=0;
			this.readyState=0;
			this.xuliStiffTime=0;
			this.skillId=0;
			SMsgReadyBullet.__super.call(this);
		}

		__class(SMsgReadyBullet,'msgSvr.SMsgReadyBullet',_super);
		var __proto=SMsgReadyBullet.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			this.uid=msg.getUint16();
			this.readyState=msg.getUint8();
			if (this.readyState==0){
				this.xuliStiffTime=msg.getUint16();
			}
			this.skillId=msg.getUint32();
			return true;
		}

		__proto.serverWriteBody=function(msg){
			msg.writeUint16(this.uid);
			msg.writeUint8(this.readyState);
			if (this.readyState==0){
				msg.writeUint16(this.xuliStiffTime);
			}
			msg.writeUint32(this.skillId);
			return true;
		}

		__proto.getMsgSize=function(){
			return 9;
		}

		__proto.clear=function(){
			this.uid=0;
			this.readyState=0;
			this.xuliStiffTime=0;
			this.skillId=0;
			return _super.prototype.clear.call(this);
		}

		SMsgReadyBullet.MSGID=0;
		return SMsgReadyBullet;
	})(MsgTemplate)


	/**
	*...
	*@author dongketao
	*/
	//class msgSvr.SMsgRegisterRes extends MsgTemplate
	var SMsgRegisterRes=(function(_super){
		function SMsgRegisterRes(){SMsgRegisterRes.__super.call(this);;
		};

		__class(SMsgRegisterRes,'msgSvr.SMsgRegisterRes',_super);
		return SMsgRegisterRes;
	})(MsgTemplate)


	/**
	*...
	*@author Chen Gong
	*/
	//class msgSvr.SMsgRemoveProp extends MsgTemplate
	var SMsgRemoveProp=(function(_super){
		function SMsgRemoveProp(){
			this.hitUid=0;
			this.deleteUid=0;
			this.teamScore=0;
			SMsgRemoveProp.__super.call(this);
		}

		__class(SMsgRemoveProp,'msgSvr.SMsgRemoveProp',_super);
		var __proto=SMsgRemoveProp.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			this.hitUid=msg.getUint16();
			this.deleteUid=msg.getUint16();
			this.teamScore=msg.getUint16();
			return true;
		}

		__proto.serverWriteBody=function(msg){
			msg.writeUint16(this.hitUid);
			msg.writeUint16(this.deleteUid);
			msg.writeUint16(this.teamScore);
			return true;
		}

		__proto.clear=function(){
			this.hitUid=0;
			this.deleteUid=0;
			this.teamScore=0;
			return _super.prototype.clear.call(this);
		}

		SMsgRemoveProp.MSGID=0;
		return SMsgRemoveProp;
	})(MsgTemplate)


	/**
	*营救消息
	*@author dongketao
	*/
	//class msgSvr.SMsgRoomResidualTime extends MsgTemplate
	var SMsgRoomResidualTime=(function(_super){
		function SMsgRoomResidualTime(){
			this.maxLifeTime=0;
			SMsgRoomResidualTime.__super.call(this);
			this.clear();
		}

		__class(SMsgRoomResidualTime,'msgSvr.SMsgRoomResidualTime',_super);
		var __proto=SMsgRoomResidualTime.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			this.maxLifeTime=msg.getUint32();
			return true;
		}

		__proto.serverWriteBody=function(msg){
			msg.writeUint32(this.maxLifeTime);
			return true;
		}

		/**
		*消息发送出去之前的size处理.每一个从MsgTemplate派生的类必须override这个函数，计算自己的size
		*/
		__proto.getMsgBodySize=function(){
			return 4;
		}

		__proto.clear=function(){
			this.maxLifeTime=0;
			return _super.prototype.clear.call(this);
		}

		SMsgRoomResidualTime.MSGID=0;
		return SMsgRoomResidualTime;
	})(MsgTemplate)


	/**
	*...
	*@author rivetr
	*/
	//class msgSvr.SMsgRoomUserList extends MsgTemplate
	var SMsgRoomUserList=(function(_super){
		function SMsgRoomUserList(){
			this.userInfos=[];
			SMsgRoomUserList.__super.call(this);
		}

		__class(SMsgRoomUserList,'msgSvr.SMsgRoomUserList',_super);
		var __proto=SMsgRoomUserList.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			var teamrankListLen=msg.readByte();
			this.userInfos=[];
			for (var i=0;i < teamrankListLen;i++){
				var tem=new GameUserInfo();
				tem.clientReadBody(msg,msgLen);
				this.userInfos.push(tem);
			}
			return true;
		}

		__proto.serverWriteBody=function(msg){
			msg.writeByte(this.userInfos.length);
			for (var i=0,len=this.userInfos.length;i < len;i++){
				var tem=this.userInfos[i];
				tem.serverWriteBody(msg);
			}
			return true;
		}

		__proto.getMsgBodySize=function(){
			return 1024;
		}

		__proto.clear=function(){
			for (var i=0;i < this.userInfos.length;i++){
				DataPool.recover(this.userInfos[i]);
			}
			this.userInfos.length=0;
			return _super.prototype.clear.call(this);
		}

		SMsgRoomUserList.MSGID=0;
		return SMsgRoomUserList;
	})(MsgTemplate)


	/**
	*...
	*@author Chen Gong
	*/
	//class msgSvr.SMsgRoundEnd extends MsgTemplate
	var SMsgRoundEnd=(function(_super){
		function SMsgRoundEnd(){
			this.currentRoundInfo=new RoundInfo();
			this.allRoundInfo=new RoundInfo();
			SMsgRoundEnd.__super.call(this);
		}

		__class(SMsgRoundEnd,'msgSvr.SMsgRoundEnd',_super);
		var __proto=SMsgRoundEnd.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			this.currentRoundInfo.coin=msg.readByte();
			this.currentRoundInfo.exp=msg.readByte();
			this.currentRoundInfo.kills=msg.getUint16();
			this.allRoundInfo.coin=msg.readByte();
			this.allRoundInfo.exp=msg.readByte();
			this.allRoundInfo.kills=msg.getUint16();
			return true;
		}

		__proto.serverWriteBody=function(msg){
			msg.writeByte(this.currentRoundInfo.coin);
			msg.writeByte(this.currentRoundInfo.exp);
			msg.writeUint16(this.currentRoundInfo.kills);
			msg.writeByte(this.allRoundInfo.coin);
			msg.writeByte(this.allRoundInfo.exp);
			msg.writeUint16(this.allRoundInfo.kills);
			return true;
		}

		/**
		*消息发送出去之前的size处理.每一个从MsgTemplate派生的类必须override这个函数，计算自己的size
		*/
		__proto.getMsgBodySize=function(){
			return 8;
		}

		__proto.clear=function(){
			return _super.prototype.clear.call(this);
		}

		__proto.setCurrentRoundInfo=function(coin,exp,kills){
			this.currentRoundInfo.kills=kills;
			this.currentRoundInfo.exp=exp;
			this.currentRoundInfo.coin=coin;
		}

		__proto.setAllRoundInfo=function(coin,exp,kills){
			this.allRoundInfo.kills=kills;
			this.allRoundInfo.exp=exp;
			this.allRoundInfo.coin=coin;
		}

		SMsgRoundEnd.MSGID=0;
		return SMsgRoundEnd;
	})(MsgTemplate)


	/**
	*<p> <code>LoaderManager</code> 类用于用于批量加载资源。此类是单例，不要手动实例化此类，请通过Laya.loader访问。</p>
	*<p>全部队列加载完成，会派发 Event.COMPLETE 事件；如果队列中任意一个加载失败，会派发 Event.ERROR 事件，事件回调参数值为加载出错的资源地址。</p>
	*<p> <code>LoaderManager</code> 类提供了以下几种功能：<br/>
	*多线程：默认5个加载线程，可以通过maxLoader属性修改线程数量；<br/>
	*多优先级：有0-4共5个优先级，优先级高的优先加载。0最高，4最低；<br/>
	*重复过滤：自动过滤重复加载（不会有多个相同地址的资源同时加载）以及复用缓存资源，防止重复加载；<br/>
	*错误重试：资源加载失败后，会重试加载（以最低优先级插入加载队列），retryNum设定加载失败后重试次数，retryDelay设定加载重试的时间间隔。</p>
	*@see laya.net.Loader
	*/
	//class laya.net.LoaderManager extends laya.events.EventDispatcher
	var LoaderManager=(function(_super){
		var ResInfo;
		function LoaderManager(){
			this.retryNum=1;
			this.retryDelay=0;
			this.maxLoader=5;
			this._loaders=[];
			this._loaderCount=0;
			this._resInfos=[];
			this._infoPool=[];
			this._maxPriority=5;
			this._failRes={};
			LoaderManager.__super.call(this);
			for (var i=0;i < this._maxPriority;i++)this._resInfos[i]=[];
		}

		__class(LoaderManager,'laya.net.LoaderManager',_super);
		var __proto=LoaderManager.prototype;
		/**
		*<p>根据clas类型创建一个未初始化资源的对象，随后进行异步加载，资源加载完成后，初始化对象的资源，并通过此对象派发 Event.LOADED 事件，事件回调参数值为此对象本身。套嵌资源的子资源会保留资源路径"?"后的部分。</p>
		*<p>如果url为数组，返回true；否则返回指定的资源类对象，可以通过侦听此对象的 Event.LOADED 事件来判断资源是否已经加载完毕。</p>
		*<p><b>注意：</b>cache参数只能对文件后缀为atlas的资源进行缓存控制，其他资源会忽略缓存，强制重新加载。</p>
		*@param url 资源地址或者数组。如果url和clas同时指定了资源类型，优先使用url指定的资源类型。参数形如：[{url:xx,clas:xx,priority:xx,params:xx},{url:xx,clas:xx,priority:xx,params:xx}]。
		*@param progress 资源加载进度回调，回调参数值为当前资源加载的进度信息(0-1)。
		*@param clas 资源类名。如果url和clas同时指定了资源类型，优先使用url指定的资源类型。参数形如：Texture。
		*@param type 资源类型。参数形如：Loader.IMAGE。
		*@param priority (default=1)加载的优先级，优先级高的优先加载。有0-4共5个优先级，0最高，4最低。
		*@param cache 是否缓存加载的资源。
		*@return 如果url为数组，返回true；否则返回指定的资源类对象。
		*/
		__proto.create=function(url,complete,progress,clas,params,priority,cache){
			(priority===void 0)&& (priority=1);
			(cache===void 0)&& (cache=true);
			if ((url instanceof Array)){
				var items=url;
				var itemCount=items.length;
				var loadedCount=0;
				if (progress){
					var progress2=Handler.create(progress.caller,progress.method,progress.args,false);
				}
				for (var i=0;i < itemCount;i++){
					var item=items[i];
					if ((typeof item=='string'))item=items[i]={url:item};
					item.progress=0;
					var progressHandler=progress ? Handler.create(null,onProgress,[item],false):null;
					var completeHandler=(progress || complete)? Handler.create(null,onComplete,[item]):null;
					this._create(item.url,completeHandler,progressHandler,item.clas || clas,item.params || params,item.priority || priority,cache);
				}
				function onComplete (item,content){
					loadedCount++;
					item.progress=1;
					if (loadedCount===itemCount && complete){
						complete.run();
					}
				}
				function onProgress (item,value){
					item.progress=value;
					var num=0;
					for (var j=0;j < itemCount;j++){
						var item1=items[j];
						num+=item1.progress;
					};
					var v=num / itemCount;
					progress2.runWith(v);
				}
				return true;
			}else return this._create(url,complete,progress,clas,params,priority,cache);
		}

		__proto._create=function(url,complete,progress,clas,params,priority,cache){
			(priority===void 0)&& (priority=1);
			(cache===void 0)&& (cache=true);
			url=URL.formatURL(url)
			var item=this.getRes(url);
			if (!item){
				var extension=Utils$2.getFileExtension(url);
				var creatItem=LoaderManager.createMap[extension];
				if (!clas)clas=creatItem[0];
				var type=creatItem[1];
				if (extension=="atlas"){
					this.load(url,complete,progress,type,priority,cache);
					}else {
					if (clas===Texture)type="htmlimage";
					item=clas ? new clas():null;
					if (item.hasOwnProperty("_loaded"))
						item._loaded=false;
					this.load(url,Handler.create(null,onLoaded),progress,type,priority,false,null,true);
					function onLoaded (data){
						item && item.onAsynLoaded.call(item,url,data,params);
						if (complete)complete.run();
						Laya.loader.event(url);
					}
					if (cache){
						this.cacheRes(url,item);
						item.url=url;
					}
				}
				}else {
				if (!item.hasOwnProperty("loaded")|| item.loaded){
					progress && progress.runWith(1);
					complete && complete.run();
					}else if (complete){
					Laya.loader._createListener(url,complete.caller,complete.method,complete.args,true,false);
				}
			}
			return item;
		}

		/**
		*<p>加载资源。资源加载错误时，本对象会派发 Event.ERROR 事件，事件回调参数值为加载出错的资源地址。</p>
		*<p>因为返回值为 LoaderManager 对象本身，所以可以使用如下语法：loaderManager.load(...).load(...);</p>
		*@param url 要加载的单个资源地址或资源信息数组。比如：简单数组：["a.png","b.png"]；复杂数组[{url:"a.png",type:Loader.IMAGE,size:100,priority:1},{url:"b.json",type:Loader.JSON,size:50,priority:1}]。
		*@param complete 加载结束回调。根据url类型不同分为2种情况：1. url为String类型，也就是单个资源地址，如果加载成功，则回调参数值为加载完成的资源，否则为null；2. url为数组类型，指定了一组要加载的资源，如果全部加载成功，则回调参数值为true，否则为false。
		*@param progress 加载进度回调。回调参数值为当前资源的加载进度信息(0-1)。
		*@param type 资源类型。比如：Loader.IMAGE。
		*@param priority (default=1)加载的优先级，优先级高的优先加载。有0-4共5个优先级，0最高，4最低。
		*@param cache 是否缓存加载结果。
		*@param group 分组，方便对资源进行管理。
		*@param ignoreCache 是否忽略缓存，强制重新加载。
		*@return 此 LoaderManager 对象本身。
		*/
		__proto.load=function(url,complete,progress,type,priority,cache,group,ignoreCache){
			(priority===void 0)&& (priority=1);
			(cache===void 0)&& (cache=true);
			(ignoreCache===void 0)&& (ignoreCache=false);
			if ((url instanceof Array))return this._loadAssets(url,complete,progress,type,priority,cache,group);
			var content=Loader.getRes(url);
			if (content !=null){
				progress && progress.runWith(1);
				complete && complete.runWith(content);
				this._loaderCount || this.event("complete");
				}else {
				var info=LoaderManager._resMap[url];
				if (!info){
					info=this._infoPool.length ? this._infoPool.pop():new ResInfo();
					info.url=url;
					info.type=type;
					info.cache=cache;
					info.group=group;
					info.ignoreCache=ignoreCache;
					complete && info.on("complete",complete.caller,complete.method,complete.args);
					progress && info.on("progress",progress.caller,progress.method,progress.args);
					LoaderManager._resMap[url]=info;
					priority=priority < this._maxPriority ? priority :this._maxPriority-1;
					this._resInfos[priority].push(info);
					this._next();
					}else {
					complete && info._createListener("complete",complete.caller,complete.method,complete.args,false,false);
					progress && info._createListener("progress",progress.caller,progress.method,progress.args,false,false);
				}
			}
			return this;
		}

		__proto._next=function(){
			if (this._loaderCount >=this.maxLoader)return;
			for (var i=0;i < this._maxPriority;i++){
				var infos=this._resInfos[i];
				if (infos.length > 0){
					var info=infos.shift();
					if (info)return this._doLoad(info);
				}
			}
			this._loaderCount || this.event("complete");
		}

		__proto._doLoad=function(resInfo){
			this._loaderCount++;
			var loader=this._loaders.length ? this._loaders.pop():new Loader();
			loader.on("complete",null,onLoaded);
			loader.on("progress",null,function(num){
				resInfo.event("progress",num);
			});
			loader.on("error",null,function(msg){
				onLoaded(null);
			});
			var _this=this;
			function onLoaded (data){
				loader.offAll();
				loader._data=null;
				_this._loaders.push(loader);
				_this._endLoad(resInfo,(data instanceof Array)? [data] :data);
				_this._loaderCount--;
				_this._next();
			}
			loader.load(resInfo.url,resInfo.type,resInfo.cache,resInfo.group,resInfo.ignoreCache);
		}

		__proto._endLoad=function(resInfo,content){
			var url=resInfo.url;
			if (content==null){
				var errorCount=this._failRes[url] || 0;
				if (errorCount < this.retryNum){
					console.warn("[warn]Retry to load:",url);
					this._failRes[url]=errorCount+1;
					Laya.timer.once(this.retryDelay,this,this._addReTry,[resInfo],false);
					return;
					}else {
					console.warn("[error]Failed to load:",url);
					this.event("error",url);
				}
			}
			if (this._failRes[url])this._failRes[url]=0;
			delete LoaderManager._resMap[url];
			resInfo.event("complete",content);
			resInfo.offAll();
			this._infoPool.push(resInfo);
		}

		__proto._addReTry=function(resInfo){
			this._resInfos[this._maxPriority-1].push(resInfo);
			this._next();
		}

		/**
		*清理指定资源地址缓存。
		*@param url 资源地址。
		*@param forceDispose 是否强制销毁，有些资源是采用引用计数方式销毁，如果forceDispose=true，则忽略引用计数，直接销毁，比如Texture，默认为false
		*/
		__proto.clearRes=function(url,forceDispose){
			(forceDispose===void 0)&& (forceDispose=false);
			Loader.clearRes(url,forceDispose);
		}

		/**
		*获取指定资源地址的资源。
		*@param url 资源地址。
		*@return 返回资源。
		*/
		__proto.getRes=function(url){
			return Loader.getRes(url);
		}

		/**
		*缓存资源。
		*@param url 资源地址。
		*@param data 要缓存的内容。
		*/
		__proto.cacheRes=function(url,data){
			Loader.cacheRes(url,data);
		}

		/**
		*设置资源分组。
		*@param url 资源地址。
		*@param group 分组名
		*/
		__proto.setGroup=function(url,group){
			Loader.setGroup(url,group);
		}

		/**
		*根据分组清理资源。
		*@param group 分组名
		*/
		__proto.clearResByGroup=function(group){
			Loader.clearResByGroup(group);
		}

		/**清理当前未完成的加载，所有未加载的内容全部停止加载。*/
		__proto.clearUnLoaded=function(){
			for (var i=0;i < this._maxPriority;i++){
				var infos=this._resInfos[i];
				for (var j=infos.length-1;j >-1;j--){
					var info=infos[j];
					if (info){
						info.offAll();
						this._infoPool.push(info);
					}
				}
				infos.length=0;
			}
			this._loaderCount=0;
			LoaderManager._resMap={};
		}

		/**
		*根据地址集合清理掉未加载的内容
		*@param urls 资源地址集合
		*/
		__proto.cancelLoadByUrls=function(urls){
			if (!urls)return;
			for (var i=0,n=urls.length;i < n;i++){
				this.cancelLoadByUrl(urls[i]);
			}
		}

		/**
		*根据地址清理掉未加载的内容
		*@param url 资源地址
		*/
		__proto.cancelLoadByUrl=function(url){
			for (var i=0;i < this._maxPriority;i++){
				var infos=this._resInfos[i];
				for (var j=infos.length-1;j >-1;j--){
					var info=infos[j];
					if (info && info.url===url){
						infos[j]=null;
						info.offAll();
						this._infoPool.push(info);
					}
				}
			}
			if (LoaderManager._resMap[url])delete LoaderManager._resMap[url];
		}

		/**
		*@private
		*加载数组里面的资源。
		*@param arr 简单：["a.png","b.png"]，复杂[{url:"a.png",type:Loader.IMAGE,size:100,priority:1},{url:"b.json",type:Loader.JSON,size:50,priority:1}]*/
		__proto._loadAssets=function(arr,complete,progress,type,priority,cache,group){
			(priority===void 0)&& (priority=1);
			(cache===void 0)&& (cache=true);
			var itemCount=arr.length;
			var loadedCount=0;
			var totalSize=0;
			var items=[];
			var success=true;
			for (var i=0;i < itemCount;i++){
				var item=arr[i];
				if ((typeof item=='string'))item={url:item,type:type,size:1,priority:priority};
				if (!item.size)item.size=1;
				item.progress=0;
				totalSize+=item.size;
				items.push(item);
				var progressHandler=progress ? Handler.create(null,loadProgress,[item],false):null;
				var completeHandler=(complete || progress)? Handler.create(null,loadComplete,[item]):null;
				this.load(item.url,completeHandler,progressHandler,item.type,item.priority || 1,cache,item.group || group);
			}
			function loadComplete (item,content){
				loadedCount++;
				item.progress=1;
				if (!content)success=false;
				if (loadedCount===itemCount && complete){
					complete.runWith(success);
				}
			}
			function loadProgress (item,value){
				if (progress !=null){
					item.progress=value;
					var num=0;
					for (var j=0;j < items.length;j++){
						var item1=items[j];
						num+=item1.size *item1.progress;
					};
					var v=num / totalSize;
					progress.runWith(v);
				}
			}
			return this;
		}

		LoaderManager.cacheRes=function(url,data){
			Loader.cacheRes(url,data);
		}

		LoaderManager._resMap={};
		__static(LoaderManager,
		['createMap',function(){return this.createMap={atlas:[null,"atlas"]};}
		]);
		LoaderManager.__init$=function(){
			//class ResInfo extends laya.events.EventDispatcher
			ResInfo=(function(_super){
				function ResInfo(){
					this.url=null;
					this.type=null;
					this.cache=false;
					this.group=null;
					this.ignoreCache=false;
					ResInfo.__super.call(this);
				}
				__class(ResInfo,'',_super);
				return ResInfo;
			})(EventDispatcher)
		}

		return LoaderManager;
	})(EventDispatcher)


	/**
	*营救消息
	*@author dongketao
	*/
	//class msgSvr.SMsgSave extends MsgTemplate
	var SMsgSave=(function(_super){
		function SMsgSave(){
			this.uidDying=0;
			this.bloodVal=0;
			SMsgSave.__super.call(this);
			this.clear();
		}

		__class(SMsgSave,'msgSvr.SMsgSave',_super);
		var __proto=SMsgSave.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			this.uidDying=msg.getUint16();
			this.bloodVal=msg.getUint16();
			return true;
		}

		__proto.serverWriteBody=function(msg){
			msg.writeUint16(this.uidDying);
			msg.writeUint16(this.bloodVal);
			return true;
		}

		/**
		*消息发送出去之前的size处理.每一个从MsgTemplate派生的类必须override这个函数，计算自己的size
		*/
		__proto.getMsgBodySize=function(){
			return 4;
		}

		__proto.clear=function(){
			this.uidDying=0;
			this.bloodVal=0;
			return _super.prototype.clear.call(this);
		}

		SMsgSave.MSGID=0;
		return SMsgSave;
	})(MsgTemplate)


	/**
	*角色战斗内的主动技能
	*@author dongketao
	*/
	//class msgSvr.SMsgSelectActiveSkills extends MsgTemplate
	var SMsgSelectActiveSkills=(function(_super){
		function SMsgSelectActiveSkills(){
			this.userGameUID=0;
			this.activeSkill=[];
			this.bulletSkill=[];
			this.isEat=NaN;
			SMsgSelectActiveSkills.__super.call(this);
		}

		__class(SMsgSelectActiveSkills,'msgSvr.SMsgSelectActiveSkills',_super);
		var __proto=SMsgSelectActiveSkills.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			this.userGameUID=msg.getInt32();
			var skillsLen=msg.readByte();
			this.activeSkill=[];
			var tem;
			for (var i=0,len=skillsLen;i < len;i++){
				tem=new SkillSlotData();
				tem.clientReadBody(msg,msgLen);
				this.activeSkill.push(tem);
			};
			var skillsLen1=msg.readByte();
			this.bulletSkill=[];
			var tem1;
			for (var i1=0,len1=skillsLen1;i1 < len1;i1++){
				tem1=new SkillSlotData();
				tem1.clientReadBody(msg,msgLen);
				this.bulletSkill.push(tem1);
			}
			this.isEat=msg.readByte();
			return true;
		}

		__proto.serverWriteBody=function(msg){
			msg.writeInt32(this.userGameUID);
			if (this.activeSkill==null){
				msg.writeByte(0);
			}
			else{
				msg.writeByte(this.activeSkill.length);
				for (var i=0,len=this.activeSkill.length;i < len;i++){
					this.activeSkill[i] && (this.activeSkill [i]).serverWriteBody(msg);
				}
			}
			if (this.bulletSkill==null){
				msg.writeByte(0);
			}
			else{
				msg.writeByte(this.bulletSkill.length);
				for (var i1=0,len1=this.bulletSkill.length;i1 < len1;i1++){
					this.bulletSkill[i1] && (this.bulletSkill [i1]).serverWriteBody(msg);
				}
			}
			msg.writeByte(this.isEat);
			return true;
		}

		/**
		*消息发送出去之前的size处理.每一个从MsgTemplate派生的类必须override这个函数，计算自己的size
		*/
		__proto.getMsgBodySize=function(){
			return 1024;
		}

		__proto.clear=function(){
			this.userGameUID=0;
			this.activeSkill=null;
			this.bulletSkill=null;
			this.isEat=0;
			return _super.prototype.clear.call(this);
		}

		SMsgSelectActiveSkills.MSGID=0;
		return SMsgSelectActiveSkills;
	})(MsgTemplate)


	/**
	*...
	*@author ...
	*/
	//class msgSvr.SMsgSelectSkillResult extends MsgTemplate
	var SMsgSelectSkillResult=(function(_super){
		function SMsgSelectSkillResult(){
			this.skillId=0;
			this.useResult=0;
			this.leftCount=0;
			SMsgSelectSkillResult.__super.call(this);
		}

		__class(SMsgSelectSkillResult,'msgSvr.SMsgSelectSkillResult',_super);
		var __proto=SMsgSelectSkillResult.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			this.skillId=msg.getUint32();
			this.useResult=msg.getUint8();
			return true;
		}

		__proto.serverWriteBody=function(msg){
			msg.writeUint32(this.skillId);
			msg.writeUint8(this.useResult);
			return true;
		}

		__proto.getMsgSize=function(){
			return 6;
		}

		__proto.clear=function(){
			this.skillId=0;
			this.useResult=0;
			return _super.prototype.clear.call(this);
		}

		SMsgSelectSkillResult.MSGID=0;
		return SMsgSelectSkillResult;
	})(MsgTemplate)


	/**
	*...
	*@author ...
	*/
	//class msgSvr.SMsgSelfChgProperty extends MsgTemplate
	var SMsgSelfChgProperty=(function(_super){
		function SMsgSelfChgProperty(){
			this.uid=0;
			this.itemNum=0;
			this.itemList=new Array;
			SMsgSelfChgProperty.__super.call(this);
		}

		__class(SMsgSelfChgProperty,'msgSvr.SMsgSelfChgProperty',_super);
		var __proto=SMsgSelfChgProperty.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			this.uid=msg.getUint16();
			this.itemNum=msg.getUint16();
			for (var i=0;i < this.itemNum;i++)
			{this.itemList[i]=this.itemList[i]|| PropertyData.getData();
				this.itemList[i].clientReadBody(msg,msgLen);
			}
			return true;
		}

		__proto.serverWriteBody=function(msg){
			msg.writeUint16(this.uid);
			msg.writeUint16(this.itemNum);
			for (var i=0,sz=this.itemList.length;i<sz;i++){
				this.itemList[i].serverWriteBody(msg);
			}
			return true;
		}

		__proto.getMsgBodySize=function(){
			return this.itemNum *6+4;
		}

		/**
		*超过64个的item需要发送客户端，则使用大缓冲区.
		*@return
		*/
		__proto.isBigMsg=function(){
			if (this.itemNum > 64)return true;
			return false;
		}

		__proto.clear=function(){
			for (var ti=0;ti < this.itemNum;ti++){
				PropertyData.release(this.itemList[ti]);
			}
			this.uid=0;
			this.itemNum=0;
			this.itemList.length=0;
			return _super.prototype.clear.call(this);
		}

		SMsgSelfChgProperty.MSGID=0;
		return SMsgSelfChgProperty;
	})(MsgTemplate)


	/**
	*...
	*@author dongketao
	*/
	//class msgSvr.SMsgSelfDelSnorw extends MsgTemplate
	var SMsgSelfDelSnorw=(function(_super){
		function SMsgSelfDelSnorw(){
			this.uidHit=0;
			this.uidBeHit=0;
			this.bloodVal=0;
			this.bulletNum=0;
			SMsgSelfDelSnorw.__super.call(this);
		}

		__class(SMsgSelfDelSnorw,'msgSvr.SMsgSelfDelSnorw',_super);
		var __proto=SMsgSelfDelSnorw.prototype;
		__proto.clear=function(){
			this.uidHit=0;
			this.uidBeHit=0;
			this.bloodVal=0;
			this.bulletNum=0;
			return _super.prototype.clear.call(this);
		}

		__proto.clientReadBody=function(msg,msgLen){
			this.uidHit=msg.getUint16();
			this.uidBeHit=msg.getUint16();
			this.bloodVal=msg.getInt16();
			this.bulletNum=msg.getUint16();
			return true;
		}

		__proto.serverWriteBody=function(msg){
			msg.writeUint16(this.uidHit);
			msg.writeUint16(this.uidBeHit);
			msg.writeInt16(this.bloodVal);
			msg.writeUint16(this.bulletNum);
			return true;
		}

		SMsgSelfDelSnorw.MSGID=0;
		return SMsgSelfDelSnorw;
	})(MsgTemplate)


	/**
	*...
	*@author Chen Gong
	*/
	//class msgSvr.SMsgSelfExplode extends MsgTemplate
	var SMsgSelfExplode=(function(_super){
		function SMsgSelfExplode(){
			this.success=NaN;
			this.uid=NaN;
			this.time=NaN;
			SMsgSelfExplode.__super.call(this);
		}

		__class(SMsgSelfExplode,'msgSvr.SMsgSelfExplode',_super);
		var __proto=SMsgSelfExplode.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			this.success=msg.readByte();
			this.uid=msg.getInt32();
			this.time=msg.getInt16();
			return true;
		}

		__proto.serverWriteBody=function(msg){
			msg.writeByte(this.success);
			msg.writeInt32(this.uid);
			msg.writeInt16(this.time);
			return true;
		}

		__proto.clear=function(){
			this.success=0;
			this.uid=0;
			this.time=0;
			return _super.prototype.clear.call(this);
		}

		SMsgSelfExplode.MSGID=0;
		return SMsgSelfExplode;
	})(MsgTemplate)


	/**
	*...
	*@author dongketao
	*/
	//class msgSvr.SMsgServerTime extends MsgTemplate
	var SMsgServerTime=(function(_super){
		function SMsgServerTime(){
			this.serverTime=0;
			SMsgServerTime.__super.call(this);
		}

		__class(SMsgServerTime,'msgSvr.SMsgServerTime',_super);
		var __proto=SMsgServerTime.prototype;
		/**
		*
		*@param msg
		*@return
		*/
		__proto.serverWriteBody=function(msg){
			msg.writeFloat64(this.serverTime);
			return true;
		}

		/**
		*消息发送出去之前的size处理.每一个从MsgTemplate派生的类必须override这个函数，计算自己的size
		*/
		__proto.getMsgSize=function(){
			return 8;
		}

		/**
		*每一个消息都必须要override这个函数
		*@return
		*/
		__proto.getMsgBodySize=function(){
			return 8;
		}

		__proto.clear=function(){
			this.serverTime=0;
			return _super.prototype.clear.call(this);
		}

		SMsgServerTime.MSGID=0;
		return SMsgServerTime;
	})(MsgTemplate)


	/**
	*...
	*@author Chen Gong
	*/
	//class msgSvr.SMsgShowLolipopScore extends MsgTemplate
	var SMsgShowLolipopScore=(function(_super){
		function SMsgShowLolipopScore(){
			this.itemNum=NaN;
			this.itemList=null;
			SMsgShowLolipopScore.__super.call(this);
		}

		__class(SMsgShowLolipopScore,'msgSvr.SMsgShowLolipopScore',_super);
		var __proto=SMsgShowLolipopScore.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			this.itemNum=msg.getInt16();
			this.itemList=[];
			for (var i=0;i < this.itemNum;i++){
				var tem={};
				tem.uid=msg.getInt16();
				tem.score=msg.readByte();
				this.itemList.push(tem);
			}
			return true;
		}

		__proto.serverWriteBody=function(msg){
			msg.writeInt16(this.itemNum);
			for (var i=0;i < this.itemNum;i++){
				var tem=this.itemList[i];
				msg.writeInt16(tem.uid);
				msg.writeByte(tem.score);
			}
			return true;
		}

		__proto.clear=function(){
			this.itemNum=0;
			this.itemList=[];
			return _super.prototype.clear.call(this);
		}

		SMsgShowLolipopScore.MSGID=0;
		return SMsgShowLolipopScore;
	})(MsgTemplate)


	/**
	*濒死消息
	*@author dongketao
	*/
	//class msgSvr.SMsgShowTan extends MsgTemplate
	var SMsgShowTan=(function(_super){
		function SMsgShowTan(){
			this.uid=0;
			SMsgShowTan.__super.call(this);
			this.clear();
		}

		__class(SMsgShowTan,'msgSvr.SMsgShowTan',_super);
		var __proto=SMsgShowTan.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			this.uid=msg.getInt32();
			return true;
		}

		__proto.serverWriteBody=function(msg){
			msg.writeInt32(this.uid);
			return true;
		}

		/**
		*消息发送出去之前的size处理.每一个从MsgTemplate派生的类必须override这个函数，计算自己的size
		*/
		__proto.getMsgBodySize=function(){
			return 4;
		}

		__proto.clear=function(){
			this.uid=0;
			return _super.prototype.clear.call(this);
		}

		SMsgShowTan.MSGID=0;
		return SMsgShowTan;
	})(MsgTemplate)


	/**
	*...
	*@author Chen Gong
	*/
	//class msgSvr.SMsgSimpleBattleInfo extends MsgTemplate
	var SMsgSimpleBattleInfo=(function(_super){
		function SMsgSimpleBattleInfo(){
			this.msgType=NaN;
			this.hitUid=0;
			this.behitUid=0;
			SMsgSimpleBattleInfo.__super.call(this);
		}

		__class(SMsgSimpleBattleInfo,'msgSvr.SMsgSimpleBattleInfo',_super);
		var __proto=SMsgSimpleBattleInfo.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			_super.prototype.clientReadBody.call(this,msg,msgLen);
			this.msgType=msg.readByte();
			this.hitUid=msg.getUint32();
			this.behitUid=msg.getUint32();
			return true;
		}

		__proto.serverWriteBody=function(msg){
			_super.prototype.serverWriteBody.call(this,msg);
			msg.writeByte(this.msgType);
			msg.writeUint32(this.hitUid);
			msg.writeUint32(this.behitUid);
			return true;
		}

		__proto.clear=function(){
			this.msgType=0;
			this.behitUid=0;
			this.hitUid=0;
			return _super.prototype.clear.call(this);
		}

		SMsgSimpleBattleInfo.MSGID=0;
		return SMsgSimpleBattleInfo;
	})(MsgTemplate)


	/**
	*...
	*@author ...
	*/
	//class msgSvr.SMsgSkillEffect extends MsgTemplate
	var SMsgSkillEffect=(function(_super){
		function SMsgSkillEffect(){
			this.uid=0;
			this.x=NaN;
			this.y=NaN;
			this.skillId=0;
			this.angle=0;
			SMsgSkillEffect.__super.call(this);
		}

		__class(SMsgSkillEffect,'msgSvr.SMsgSkillEffect',_super);
		var __proto=SMsgSkillEffect.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			this.uid=msg.getUint16();
			this.x=msg.getInt16();
			this.y=msg.getInt16();
			this.skillId=msg.getUint32();
			this.angle=msg.getInt16();
			return true;
		}

		__proto.serverWriteBody=function(msg){
			msg.writeUint16(this.uid);
			msg.writeInt16(0 | this.x);
			msg.writeInt16(0 | this.y);
			msg.writeUint32(this.skillId);
			msg.writeInt16(this.angle);
			return true;
		}

		__proto.getMsgSize=function(){
			return 6;
		}

		__proto.clear=function(){
			this.uid=0;
			this.x=0;
			this.y=0;
			this.skillId=0;
			this.angle=0;
			return _super.prototype.clear.call(this);
		}

		SMsgSkillEffect.MSGID=0;
		return SMsgSkillEffect;
	})(MsgTemplate)


	/**
	*开始钻石倒计时
	*@author dongketao
	*/
	//class msgSvr.SMsgStartGemDown extends MsgTemplate
	var SMsgStartGemDown=(function(_super){
		function SMsgStartGemDown(){
			SMsgStartGemDown.__super.call(this);
			this.clear();
		}

		__class(SMsgStartGemDown,'msgSvr.SMsgStartGemDown',_super);
		var __proto=SMsgStartGemDown.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			return true;
		}

		__proto.serverWriteBody=function(msg){
			return true;
		}

		/**
		*消息发送出去之前的size处理.每一个从MsgTemplate派生的类必须override这个函数，计算自己的size
		*/
		__proto.getMsgBodySize=function(){
			return 6;
		}

		__proto.clear=function(){
			return _super.prototype.clear.call(this);
		}

		SMsgStartGemDown.MSGID=0;
		return SMsgStartGemDown;
	})(MsgTemplate)


	/**
	*...
	*@author rivetr
	*/
	//class msgSvr.SMsgUserDeltaMove extends MsgTemplate
	var SMsgUserDeltaMove=(function(_super){
		function SMsgUserDeltaMove(){
			this.uid=0;
			this.x=NaN;
			this.y=NaN;
			this.deltax=NaN;
			this.deltay=NaN;
			this.angle=NaN;
			this.baseTime=0;
			this.deltaPtArr=null;
			SMsgUserDeltaMove.__super.call(this);
			this.clear();
		}

		__class(SMsgUserDeltaMove,'msgSvr.SMsgUserDeltaMove',_super);
		var __proto=SMsgUserDeltaMove.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			this.uid=msg.getUint16();
			this.x=msg.getInt16();
			this.y=msg.getInt16();
			this.deltax=msg.getInt16();
			this.deltay=msg.getInt16();
			this.baseTime=msg.getUint32();
			if(SMsgUserDeltaMove.USEDELTA_ARR){
				var len=msg.getUint8();
				this.deltaPtArr=[];
				for (var ti=0;ti < len;ti++)
				this.deltaPtArr[ti]=msg.getInt16();
			}
			return true;
		}

		__proto.serverWriteBody=function(msg){
			msg.writeUint16(this.uid);
			msg.writeInt16(0 | this.x);
			msg.writeInt16(0 | this.y);
			msg.writeInt16(0 | this.deltax);
			msg.writeInt16(0 | this.deltay);
			msg.writeUint32(this.baseTime);
			if(SMsgUserDeltaMove.USEDELTA_ARR){
				var tlen=this.deltaPtArr.length;
				if (tlen > 254)tlen=254;
				msg.writeUint8(tlen);
				for (var ti=0;ti < tlen;ti++)
				msg.writeInt16(0 | this.deltaPtArr[ti]);
			}
			return true;
		}

		__proto.clear=function(){
			this.uid=0;
			this.x=0;
			this.y=0;
			this.deltax=0;
			this.deltay=0;
			this.baseTime=0;
			if (this.deltaPtArr){
				this.deltaPtArr.length=0;
			}
			else{
				this.deltaPtArr=[];
			}
			this.msgViewCal=true;
			return _super.prototype.clear.call(this);
		}

		SMsgUserDeltaMove.USEDELTA_ARR=false;
		SMsgUserDeltaMove.MSGID=0;
		return SMsgUserDeltaMove;
	})(MsgTemplate)


	/**
	*...
	*@author dongketao
	*/
	//class msgSvr.SMsgSynBullet extends MsgTemplate
	var SMsgSynBullet=(function(_super){
		function SMsgSynBullet(){
			this.bulletNum=0;
			SMsgSynBullet.__super.call(this);
			this.clear();
		}

		__class(SMsgSynBullet,'msgSvr.SMsgSynBullet',_super);
		var __proto=SMsgSynBullet.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			this.bulletNum=msg.getUint16();
			return true;
		}

		__proto.serverWriteBody=function(msg){
			msg.writeUint16(this.bulletNum);
			return true;
		}

		__proto.clear=function(){
			this.bulletNum=0;
			return _super.prototype.clear.call(this);
		}

		SMsgSynBullet.MSGID=0;
		return SMsgSynBullet;
	})(MsgTemplate)


	/**
	*...
	*@author ...
	*/
	//class msgSvr.SMsgTalkAuthority extends MsgTemplate
	var SMsgTalkAuthority=(function(_super){
		function SMsgTalkAuthority(){
			this.selfID=0;
			this.talkAuthority=0;
			this.talkOnBeAttack=null;
			this.talkOnDead=null;
			SMsgTalkAuthority.__super.call(this);
		}

		__class(SMsgTalkAuthority,'msgSvr.SMsgTalkAuthority',_super);
		var __proto=SMsgTalkAuthority.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			this.selfID=msg.getInt32();
			this.talkAuthority=msg.readByte();
			if (this.talkAuthority > 0){
				var len=msg.getInt16();
				this.talkOnBeAttack=msg.readUTFBytes(len);
				len=msg.getInt16();
				this.talkOnDead=msg.readUTFBytes(len);
			}
			return true;
		}

		__proto.serverWriteBody=function(msg){
			msg.writeInt32(this.selfID);
			msg.writeByte(this.talkAuthority);
			if (this.talkAuthority > 0){
				msg.writeUTFBytes(this.talkOnBeAttack);
				msg.writeUTFBytes(this.talkOnDead);
			}
			return true;
		}

		SMsgTalkAuthority.MSGID=0;
		return SMsgTalkAuthority;
	})(MsgTemplate)


	//class msgSvr.SMsgTeamAvatar extends MsgTemplate
	var SMsgTeamAvatar=(function(_super){
		function SMsgTeamAvatar(){
			this.playerUid=NaN;
			this.avatarId=NaN;
			SMsgTeamAvatar.__super.call(this);
		}

		__class(SMsgTeamAvatar,'msgSvr.SMsgTeamAvatar',_super);
		var __proto=SMsgTeamAvatar.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			this.playerUid=msg.getInt32();
			this.avatarId=msg.getInt32();
			return true;
		}

		__proto.serverWriteBody=function(msg){
			msg.writeInt32(this.playerUid);
			msg.writeInt32(this.avatarId);
			return true;
		}

		__proto.clear=function(){
			this.playerUid=this.avatarId=0;
			return _super.prototype.clear.call(this);
		}

		SMsgTeamAvatar.MSGID=0;
		return SMsgTeamAvatar;
	})(MsgTemplate)


	/**
	*...
	*@author dongketao
	*/
	//class msgSvr.SMsgTest extends MsgTemplate
	var SMsgTest=(function(_super){
		function SMsgTest(){
			this._uid=0;
			this._uindex=0;
			this._x=NaN;
			this._y=NaN;
			this._w=NaN;
			this._h=NaN;
			this._r=NaN;
			SMsgTest.__super.call(this);
			this.clear()
		}

		__class(SMsgTest,'msgSvr.SMsgTest',_super);
		var __proto=SMsgTest.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			this._uid=msg.getUint16();
			this._uindex=msg.readByte();
			this._x=msg.getInt16();
			this._y=msg.getInt16();
			this._w=msg.getInt16();
			this._h=msg.getInt16();
			this._r=msg.getInt16();
			return true;
		}

		__proto.serverWriteBody=function(msg){
			msg.writeUint16(this._uid);
			msg.writeByte(this._uindex);
			msg.writeInt16(this._x);
			msg.writeInt16(this._y);
			msg.writeInt16(this._w);
			msg.writeInt16(this._h);
			msg.writeInt16(this._r);
			return true;
		}

		/**
		*消息发送出去之前的size处理.每一个从MsgTemplate派生的类必须override这个函数，计算自己的size
		*/
		__proto.getMsgSize=function(){
			return-1;
		}

		__proto.clear=function(){
			this._uid=-1;
			this._uindex=-1;
			this._x=-1;
			this._y=-1;
			this._w=-1;
			this._h=-1;
			this._r=0;
			return _super.prototype.clear.call(this);
		}

		SMsgTest.MSGID=0;
		return SMsgTest;
	})(MsgTemplate)


	/**
	*...
	*@author Chen Gong
	*/
	//class msgSvr.SMsgTimeRatio extends MsgTemplate
	var SMsgTimeRatio=(function(_super){
		function SMsgTimeRatio(){
			this.speed=NaN;
			this.scale=NaN;
			SMsgTimeRatio.__super.call(this);
		}

		__class(SMsgTimeRatio,'msgSvr.SMsgTimeRatio',_super);
		var __proto=SMsgTimeRatio.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			this.speed=msg.getFloat32();
			this.scale=msg.getFloat32();
			return true;
		}

		__proto.serverWriteBody=function(msg){
			msg.writeFloat32(this.speed);
			msg.writeFloat32(this.scale);
			return true;
		}

		__proto.getMsgBodySize=function(){
			return 4;
		}

		__proto.clear=function(){
			this.speed=0;
			this.scale=0;
			return _super.prototype.clear.call(this);
		}

		SMsgTimeRatio.MSGID=0;
		return SMsgTimeRatio;
	})(MsgTemplate)


	/**
	*...
	*@author dongketao
	*/
	//class msgSvr.SMsgTimerDown extends MsgTemplate
	var SMsgTimerDown=(function(_super){
		function SMsgTimerDown(){
			this.bombuid=0;
			this.downTime=0;
			SMsgTimerDown.__super.call(this);
		}

		__class(SMsgTimerDown,'msgSvr.SMsgTimerDown',_super);
		var __proto=SMsgTimerDown.prototype;
		__proto.serverWriteBody=function(msg){
			msg.writeUint16(this.bombuid);
			msg.writeUint16(this.downTime);
			return true;
		}

		__proto.clientReadBody=function(msg,msgLen){
			this.bombuid=msg.getUint16();
			this.downTime=msg.getUint16();
			return true;
		}

		__proto.clear=function(){
			this.bombuid=0;
			this.downTime=0;
			return _super.prototype.clear.call(this);
		}

		SMsgTimerDown.MSGID=0;
		return SMsgTimerDown;
	})(MsgTemplate)


	/**
	*进入战斗只发一次的消息，角色名字，性别，皮肤，称号等等。。
	*@author dongketao
	*/
	//class msgSvr.SMsgTitle extends MsgTemplate
	var SMsgTitle=(function(_super){
		function SMsgTitle(){
			this.gameUID=0;
			this.title=0;
			SMsgTitle.__super.call(this);
			this.clear();
		}

		__class(SMsgTitle,'msgSvr.SMsgTitle',_super);
		var __proto=SMsgTitle.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			this.gameUID=msg.getUint32();
			this.title=msg.getUint16();
			return true;
		}

		__proto.serverWriteBody=function(msg){
			msg.writeUint32(this.gameUID);
			msg.writeUint16(this.title);
			return true;
		}

		/**
		*消息发送出去之前的size处理.每一个从MsgTemplate派生的类必须override这个函数，计算自己的size
		*/
		__proto.getMsgBodySize=function(){
			return 6;
		}

		__proto.clear=function(){
			this.gameUID=0;
			this.title=0;
			return _super.prototype.clear.call(this);
		}

		SMsgTitle.MSGID=0;
		return SMsgTitle;
	})(MsgTemplate)


	/**
	*...
	*@author ...
	*/
	//class msgSvr.SMsgUlimitedRound extends MsgTemplate
	var SMsgUlimitedRound=(function(_super){
		function SMsgUlimitedRound(){
			this.round=0;
			this.maxNum=0;
			SMsgUlimitedRound.__super.call(this);
		}

		__class(SMsgUlimitedRound,'msgSvr.SMsgUlimitedRound',_super);
		var __proto=SMsgUlimitedRound.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			this.round=msg.getUint8();
			this.maxNum=msg.getUint8();
			return true;
		}

		__proto.serverWriteBody=function(msg){
			msg.writeUint8(this.round);
			msg.writeUint8(this.maxNum);
			return true;
		}

		/**
		*消息发送出去之前的size处理.每一个从MsgTemplate派生的类必须override这个函数，计算自己的size
		*/
		__proto.getMsgBodySize=function(){
			return 2;
		}

		__proto.clear=function(){
			this.round=0;
			this.maxNum=0;
			return _super.prototype.clear.call(this);
		}

		SMsgUlimitedRound.MSGID=0;
		return SMsgUlimitedRound;
	})(MsgTemplate)


	/**
	*...
	*@author rivetr
	*/
	//class msgSvr.SMsgUserAdd extends MsgTemplate
	var SMsgUserAdd=(function(_super){
		function SMsgUserAdd(){
			this.userData=null;
			SMsgUserAdd.__super.call(this);
		}

		__class(SMsgUserAdd,'msgSvr.SMsgUserAdd',_super);
		var __proto=SMsgUserAdd.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			this.userData={};
			this.userData.gameUID=msg.getUint32();
			var nameLen=msg.getInt16();
			this.userData.name=msg.readUTFBytes(nameLen);
			var colorLen=msg.getInt16();
			this.userData.color=msg.readUTFBytes(colorLen);
			return true;
		}

		__proto.serverReadBody=function(msg,msgLen){
			msg.writeUint32(this.userData.gameUID);
			msg.writeUTFBytes(this.userData.name);
			msg.writeUTFBytes(this.userData.color);
			return true;
		}

		SMsgUserAdd.MSGID=0;
		return SMsgUserAdd;
	})(MsgTemplate)


	/**
	*...
	*@author dongketao
	*/
	//class msgSvr.SMsgUserAddView extends MsgTemplate
	var SMsgUserAddView=(function(_super){
		function SMsgUserAddView(){
			this.userData=null;
			SMsgUserAddView.__super.call(this);
		}

		__class(SMsgUserAddView,'msgSvr.SMsgUserAddView',_super);
		var __proto=SMsgUserAddView.prototype;
		__proto.clientReadBody=function(msg,msgLen){this.userData=this.userData|| new CreateObjData();
			this.userData.clientReadBody(msg,msgLen);
			return true;
		}

		__proto.serverWriteBody=function(msg){
			this.userData.serverWriteBody(msg);
			return true;
		}

		/**
		*消息发送出去之前的size处理.每一个从MsgTemplate派生的类必须override这个函数，计算自己的size
		*/
		__proto.getMsgSize=function(){
			return 200;
		}

		/*+getStrByteSize(userData.type)*/
		__proto.clear=function(){
			return _super.prototype.clear.call(this);
		}

		SMsgUserAddView.MSGID=0;
		return SMsgUserAddView;
	})(MsgTemplate)


	/**
	*...
	*@author rivetr
	*/
	//class msgSvr.SMsgUserHitMove extends MsgTemplate
	var SMsgUserHitMove=(function(_super){
		function SMsgUserHitMove(){
			this.hitUid=0;
			this.hitx=NaN;
			this.hity=NaN;
			this.behitUid=0;
			this.behitx=NaN;
			this.behity=NaN;
			SMsgUserHitMove.__super.call(this);
			this.clear();
		}

		__class(SMsgUserHitMove,'msgSvr.SMsgUserHitMove',_super);
		var __proto=SMsgUserHitMove.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			this.hitUid=msg.getInt16();
			this.hitx=msg.getInt16();
			this.hity=msg.getInt16();
			this.behitUid=msg.getInt16();
			this.behitx=msg.getInt16();
			this.behity=msg.getInt16();
			return true;
		}

		__proto.serverWriteBody=function(msg){
			msg.writeInt16(this.hitUid);
			msg.writeInt16(0 | this.hitx);
			msg.writeInt16(0 | this.hity);
			msg.writeInt16(this.behitUid);
			msg.writeInt16(0 | this.behitx);
			msg.writeInt16(0 | this.behity);
			return true;
		}

		__proto.clear=function(){
			this.hitUid=0;
			this.hitx=0;
			this.hity=0;
			this.behitUid=0;
			this.behitx=0;
			this.behity=0;
			return _super.prototype.clear.call(this);
		}

		SMsgUserHitMove.MSGID=0;
		return SMsgUserHitMove;
	})(MsgTemplate)


	/**
	*...
	*@author rivetr
	*/
	//class msgSvr.SMsgUserMove extends MsgTemplate
	var SMsgUserMove=(function(_super){
		function SMsgUserMove(){
			this.uid=0;
			this.angle=0;
			this.x=NaN;
			this.y=NaN;
			this.baseTime=0;
			SMsgUserMove.__super.call(this);
			this.uid=0;
			this.angle=0;
			this.x=0;
			this.y=0;
			this.baseTime=0;
			this.msgViewCal=true;
		}

		__class(SMsgUserMove,'msgSvr.SMsgUserMove',_super);
		var __proto=SMsgUserMove.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			this.uid=msg.getUint16();
			this.angle=msg.readByte();
			if (this.angle !=-1)this.angle *=5;
			this.x=msg.getInt16();
			this.y=msg.getInt16();
			this.baseTime=msg.getUint32();
			return true;
		}

		__proto.serverWriteBody=function(msg){
			msg.writeUint16(this.uid);
			msg.writeByte(this.angle==-1?-1:Math.floor(this.angle / 5));
			msg.writeInt16(0 | this.x);
			msg.writeInt16(0 | this.y);
			msg.writeUint32(this.baseTime);
			return true;
		}

		__proto.fillData=function(msg){
			this.angle=msg.angle;
		}

		__proto.clear=function(){
			this.uid=0;
			this.angle=0;
			this.x=0;
			this.y=0;
			return _super.prototype.clear.call(this);
		}

		SMsgUserMove.MSGID=0;
		return SMsgUserMove;
	})(MsgTemplate)


	/**
	*...
	*@author dongketao
	*/
	//class msgSvr.SMsgUserOffline extends MsgTemplate
	var SMsgUserOffline=(function(_super){
		function SMsgUserOffline(){
			this.uid=0;
			SMsgUserOffline.__super.call(this);
		}

		__class(SMsgUserOffline,'msgSvr.SMsgUserOffline',_super);
		var __proto=SMsgUserOffline.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			this.uid=msg.getUint16();
			return true;
		}

		__proto.serverReadBody=function(msg,msgLen){
			msg.writeUint16(this.uid);
			return true;
		}

		/**
		*消息发送出去之前的size处理.每一个从MsgTemplate派生的类必须override这个函数，计算自己的size
		*/
		__proto.getMsgSize=function(){
			return 37;
		}

		__proto.clear=function(){
			this.uid=-1;
			return _super.prototype.clear.call(this);
		}

		SMsgUserOffline.MSGID=0;
		return SMsgUserOffline;
	})(MsgTemplate)


	/**
	*...
	*@author Chen Gong
	*/
	//class msgSvr.SMsgUserPutLolipop extends MsgTemplate
	var SMsgUserPutLolipop=(function(_super){
		function SMsgUserPutLolipop(){
			this.teamID=NaN;
			this.teamScore=NaN;
			this.userUID=NaN;
			SMsgUserPutLolipop.__super.call(this);
		}

		__class(SMsgUserPutLolipop,'msgSvr.SMsgUserPutLolipop',_super);
		var __proto=SMsgUserPutLolipop.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			this.teamID=msg.readByte();
			this.teamScore=msg.getInt16();
			this.userUID=msg.getUint32();
			return true;
		}

		__proto.serverWriteBody=function(msg){
			msg.writeByte(this.teamID);
			msg.writeInt16(this.teamScore);
			msg.writeUint32(this.userUID);
			return true;
		}

		__proto.clear=function(){
			this.teamID=0;
			this.teamScore=0;
			this.userUID=0;
			return _super.prototype.clear.call(this);
		}

		SMsgUserPutLolipop.MSGID=0;
		return SMsgUserPutLolipop;
	})(MsgTemplate)


	/**
	*...
	*@author Chen Gong
	*/
	//class msgSvr.SMsgUserSkillEffect extends MsgTemplate
	var SMsgUserSkillEffect=(function(_super){
		function SMsgUserSkillEffect(){
			this.userDebuffArr=[];
			SMsgUserSkillEffect.__super.call(this);
		}

		__class(SMsgUserSkillEffect,'msgSvr.SMsgUserSkillEffect',_super);
		var __proto=SMsgUserSkillEffect.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			var userDebuffArrLen=msg.readByte();
			this.userDebuffArr=[];
			for (var i=0,len=userDebuffArrLen;i < len;i++){
				var userDebuff=new UserDebuff();
				userDebuff.uid=msg.getUint16();
				userDebuff.debuffArr=[];
				var debuffArrLen=msg.readByte();
				for (var j=0,len2=debuffArrLen;j < len2;j++){
					userDebuff.debuffArr.push(msg.getUint32());
				}
				this.userDebuffArr.push(userDebuff);
			}
			return true;
		}

		__proto.serverWriteBody=function(msg){
			msg.writeByte(this.userDebuffArr.length)
			var userDebuff;
			for (var i=0,len=this.userDebuffArr.length;i < len;i++){
				userDebuff=this.userDebuffArr[i];
				msg.writeUint16(userDebuff.uid);
				msg.writeByte(userDebuff.debuffArr.length);
				for (var j=0;j < userDebuff.debuffArr.length;j++){
					msg.writeUint32(userDebuff.debuffArr[j]);
				}
			}
			return true;
		}

		__proto.clear=function(){
			this.userDebuffArr && (this.userDebuffArr.length=0);
			return _super.prototype.clear.call(this);
		}

		SMsgUserSkillEffect.MSGID=0;
		return SMsgUserSkillEffect;
	})(MsgTemplate)


	/**
	*...
	*@author ...
	*/
	//class msgSvr.SMsgUseSkillResult extends MsgTemplate
	var SMsgUseSkillResult=(function(_super){
		function SMsgUseSkillResult(){
			this.skillIndex=0;
			this.useResult=0;
			this.leftCount=0;
			SMsgUseSkillResult.__super.call(this);
		}

		__class(SMsgUseSkillResult,'msgSvr.SMsgUseSkillResult',_super);
		var __proto=SMsgUseSkillResult.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			this.skillIndex=msg.getUint32();
			this.useResult=msg.getUint8();
			if (this.useResult==1){
				this.leftCount=msg.readByte();
			}
			return true;
		}

		__proto.serverWriteBody=function(msg){
			msg.writeUint32(this.skillIndex);
			msg.writeUint8(this.useResult);
			if (this.useResult==1){
				msg.writeByte(this.leftCount);
			}
			return true;
		}

		__proto.getMsgSize=function(){
			return 6;
		}

		__proto.clear=function(){
			this.skillIndex=0;
			this.useResult=0;
			this.leftCount=0;
			return _super.prototype.clear.call(this);
		}

		SMsgUseSkillResult.MSGID=0;
		return SMsgUseSkillResult;
	})(MsgTemplate)


	/**
	*...
	*@author dongketao
	*/
	//class msgSvr.SMsgViolent extends MsgTemplate
	var SMsgViolent=(function(_super){
		function SMsgViolent(){
			this.uid=0;
			this.beforeTm=NaN;
			this.lattTm=NaN;
			this.SmaxSpeed=NaN;
			this.scale=NaN;
			SMsgViolent.__super.call(this);
		}

		__class(SMsgViolent,'msgSvr.SMsgViolent',_super);
		var __proto=SMsgViolent.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			this.uid=msg.getUint16();
			this.beforeTm=msg.getInt32();
			this.lattTm=msg.getInt32();
			this.SmaxSpeed=msg.getFloat32();
			this.scale=msg.getFloat32();
			return true;
		}

		__proto.serverWriteBody=function(msg){
			msg.writeUint16(this.uid);
			msg.writeInt32(this.beforeTm);
			msg.writeInt32(this.lattTm);
			msg.writeFloat32(this.SmaxSpeed);
			msg.writeFloat32(this.scale);
			return true;
		}

		/**
		*消息发送出去之前的size处理.每一个从MsgTemplate派生的类必须override这个函数，计算自己的size
		*/
		__proto.getMsgSize=function(){
			return-1;
		}

		__proto.clear=function(){
			return _super.prototype.clear.call(this);
		}

		SMsgViolent.MSGID=0;
		return SMsgViolent;
	})(MsgTemplate)


	/**
	*...
	*@author dongketao
	*/
	//class msgSvr.SMyRankListRes extends MsgTemplate
	var SMyRankListRes=(function(_super){
		function SMyRankListRes(){
			this.rankData=new gameRkData();
			SMyRankListRes.__super.call(this);
		}

		__class(SMyRankListRes,'msgSvr.SMyRankListRes',_super);
		var __proto=SMyRankListRes.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			var usernameLen=msg.getInt16();
			this.rankData.name=msg.readUTFBytes(usernameLen);
			this.rankData.score=msg.getInt32();
			this.rankData.userScore=msg.getInt32();
			this.rankData.teammatesNum=msg.getUint8();
			this.rankData.rank=msg.readByte();
			return true;
		}

		__proto.serverWriteBody=function(msg){
			msg.writeUTFBytes(this.rankData.name);
			msg.writeInt32(this.rankData.score);
			msg.writeInt32(this.rankData.userScore);
			msg.writeUint8(this.rankData.teammatesNum);
			msg.writeByte(this.rankData.rank);
			return true;
		}

		SMyRankListRes.MSGID=0;
		return SMyRankListRes;
	})(MsgTemplate)


	/**
	*...
	*@author dongketao
	*/
	//class msgSvr.SRankListRes extends MsgTemplate
	var SRankListRes=(function(_super){
		function SRankListRes(){
			this.rankList=[];
			this.teamRankList=[];
			this.rankSwitch=0;
			this.myRank=new gameRkData();
			SRankListRes.__super.call(this);
			this.clear();
		}

		__class(SRankListRes,'msgSvr.SRankListRes',_super);
		var __proto=SRankListRes.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			this.myRank.id=msg.getInt16();
			this.myRank.score=msg.getInt32();
			this.myRank.kills=msg.getInt16();
			this.myRank.userScore=msg.getInt16();
			this.myRank.teammatesNum=msg.getUint8();
			this.myRank.rank=msg.readByte();
			var rankListLen=msg.readByte();
			this.rankList.length=0;
			for (var i=0;i < rankListLen;i++){
				var tem=new gameRkData();
				tem.teammatesNum=msg.getUint8();
				tem.id=msg.getInt32();
				tem.score=msg.getInt32();
				tem.kills=msg.getInt16();
				tem.firstUserUID=msg.getInt16();
				this.rankList.push(tem);
			};
			var teamrankListLen=msg.readByte();
			this.teamRankList.length=0;
			for (var j=0;j < teamrankListLen;j++){
				var tem1=new gameRkData();
				tem1.teammatesNum=msg.getUint8();
				tem1.id=msg.getInt32();
				tem1.score=msg.getInt32();
				tem1.firstUserUID=msg.getInt16();
				this.teamRankList.push(tem1);
			}
			return true;
		}

		__proto.serverWriteBody=function(msg){
			msg.writeInt16(this.myRank.id);
			msg.writeInt32(this.myRank.score);
			msg.writeInt16(this.myRank.kills);
			msg.writeInt16(this.myRank.userScore);
			msg.writeUint8(this.myRank.teammatesNum);
			msg.writeByte(this.myRank.rank);
			if (this.rankSwitch==0){
				msg.writeByte(0);
				msg.writeByte(0);
			}
			else{
				msg.writeByte(this.rankList.length);
				for (var i=0,len=this.rankList.length;i < len;i++){
					var tem=this.rankList[i];
					msg.writeUint8(tem.teammatesNum);
					msg.writeInt32(tem.id);
					msg.writeInt32(tem.score);
					msg.writeInt16(tem.kills);
					msg.writeInt16(tem.firstUserUID);
				}
				msg.writeByte(this.teamRankList.length);
				for (var j=0,len1=this.teamRankList.length;j < len1;j++){
					var tem1=this.teamRankList[j];
					msg.writeUint8(tem1.teammatesNum);
					msg.writeInt32(tem1.id);
					msg.writeInt32(tem1.score);
					msg.writeInt16(tem1.firstUserUID);
				}
			}
			return true;
		}

		__proto.getMsgBodySize=function(){
			return 1024;
		}

		__proto.clear=function(){
			this.teamRankList.length=0;
			this.rankList.length=0;
			this.rankSwitch=0;
			return _super.prototype.clear.call(this);
		}

		SRankListRes.MSGID=0;
		return SRankListRes;
	})(MsgTemplate)


	/**
	*...
	*@author ...
	*/
	//class msgSvr.trainGame.SMsgTrainingModeEnd extends MsgTemplate
	var SMsgTrainingModeEnd=(function(_super){
		function SMsgTrainingModeEnd(){
			this.isSuccess=0;
			SMsgTrainingModeEnd.__super.call(this);
		}

		__class(SMsgTrainingModeEnd,'msgSvr.trainGame.SMsgTrainingModeEnd',_super);
		var __proto=SMsgTrainingModeEnd.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			this.isSuccess=msg.readByte();
			_super.prototype.clientReadBody.call(this,msg,msgLen);
			return true;
		}

		__proto.serverWriteBody=function(msg){
			msg.writeByte(this.isSuccess);
			_super.prototype.serverWriteBody.call(this,msg);
			return true;
		}

		__proto.clear=function(){
			this.isSuccess=0;
			return _super.prototype.clear.call(this);
		}

		SMsgTrainingModeEnd.MSGID=0;
		return SMsgTrainingModeEnd;
	})(MsgTemplate)


	/**
	*...
	*@author ...
	*/
	//class msgSvr.trainGame.SMsgUpdateTrainProgress extends MsgTemplate
	var SMsgUpdateTrainProgress=(function(_super){
		function SMsgUpdateTrainProgress(){
			this.progress=null;
			SMsgUpdateTrainProgress.__super.call(this);
		}

		__class(SMsgUpdateTrainProgress,'msgSvr.trainGame.SMsgUpdateTrainProgress',_super);
		var __proto=SMsgUpdateTrainProgress.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			var progressLen=msg.readByte();
			this.progress=[];
			for (var i=0,len=progressLen;i < len;i++){
				this.progress.push(msg.getInt16());
			}
			_super.prototype.clientReadBody.call(this,msg,msgLen);
			return true;
		}

		__proto.serverWriteBody=function(msg){
			msg.writeByte(this.progress.length);
			for (var j=0;j < this.progress.length;j++){
				msg.writeInt16(this.progress[j]);
			}
			_super.prototype.serverWriteBody.call(this,msg);
			return true;
		}

		__proto.getMsgBodySize=function(){
			return 1024;
		}

		__proto.clear=function(){
			return _super.prototype.clear.call(this);
		}

		SMsgUpdateTrainProgress.MSGID=0;
		return SMsgUpdateTrainProgress;
	})(MsgTemplate)


	/**
	*@private
	*使用Audio标签播放声音
	*/
	//class laya.media.h5audio.AudioSound extends laya.events.EventDispatcher
	var AudioSound=(function(_super){
		function AudioSound(){
			this.url=null;
			this.audio=null;
			this.loaded=false;
			AudioSound.__super.call(this);
		}

		__class(AudioSound,'laya.media.h5audio.AudioSound',_super);
		var __proto=AudioSound.prototype;
		/**
		*释放声音
		*
		*/
		__proto.dispose=function(){
			var ad=AudioSound._audioCache[this.url];
			if (ad){
				ad.src="";
				delete AudioSound._audioCache[this.url];
			}
		}

		/**
		*加载声音
		*@param url
		*
		*/
		__proto.load=function(url){
			url=URL.formatURL(url);
			this.url=url;
			var ad;
			if (url==SoundManager._tMusic){
				AudioSound._initMusicAudio();
				ad=AudioSound._musicAudio;
				if (ad.src !=url){
					AudioSound._audioCache[ad.src]=null;
					ad=null;
				}
				}else{
				ad=AudioSound._audioCache[url];
			}
			if (ad && ad.readyState >=2){
				this.event("complete");
				return;
			}
			if (!ad){
				if (url==SoundManager._tMusic){
					AudioSound._initMusicAudio();
					ad=AudioSound._musicAudio;
					}else{
					ad=Browser.createElement("audio");
				}
				AudioSound._audioCache[url]=ad;
				ad.src=url;
			}
			ad.addEventListener("canplaythrough",onLoaded);
			ad.addEventListener("error",onErr);
			var me=this;
			function onLoaded (){
				offs();
				me.loaded=true;
				me.event("complete");
			}
			function onErr (){
				ad.load=null;
				offs();
				me.event("error");
			}
			function offs (){
				ad.removeEventListener("canplaythrough",onLoaded);
				ad.removeEventListener("error",onErr);
			}
			this.audio=ad;
			if (ad.load){
				ad.load();
				}else {
				onErr();
			}
		}

		/**
		*播放声音
		*@param startTime 起始时间
		*@param loops 循环次数
		*@return
		*
		*/
		__proto.play=function(startTime,loops){
			(startTime===void 0)&& (startTime=0);
			(loops===void 0)&& (loops=0);
			if (!this.url)return null;
			var ad;
			if (this.url==SoundManager._tMusic){
				ad=AudioSound._musicAudio;
				}else{
				ad=AudioSound._audioCache[this.url];
			}
			if (!ad)return null;
			var tAd;
			tAd=Pool.getItem("audio:"+this.url);
			if (Render.isConchApp){
				if (!tAd){
					tAd=Browser.createElement("audio");
					tAd.src=ad.src;
				}
			}
			else {
				if (this.url==SoundManager._tMusic){
					AudioSound._initMusicAudio();
					tAd=AudioSound._musicAudio;
					tAd.src=this.url;
					}else{
					tAd=tAd ? tAd :ad.cloneNode(true);
				}
			};
			var channel=new AudioSoundChannel(tAd);
			channel.url=this.url;
			channel.loops=loops;
			channel.startTime=startTime;
			channel.play();
			SoundManager.addChannel(channel);
			return channel;
		}

		/**
		*获取总时间。
		*/
		__getset(0,__proto,'duration',function(){
			var ad;
			ad=AudioSound._audioCache[this.url];
			if (!ad)
				return 0;
			return ad.duration;
		});

		AudioSound._initMusicAudio=function(){
			if (AudioSound._musicAudio)return;
			if (!AudioSound._musicAudio)AudioSound._musicAudio=Browser.createElement("audio");
			Browser.document.addEventListener("touchstart",AudioSound._makeMusicOK);
		}

		AudioSound._makeMusicOK=function(){
			Browser.document.removeEventListener("touchstart",AudioSound._makeMusicOK);
			if (!AudioSound._musicAudio.src){
				AudioSound._musicAudio.src="";
				AudioSound._musicAudio.load();
				}else{
				AudioSound._musicAudio.play();
			}
		}

		AudioSound._audioCache={};
		AudioSound._musicAudio=null
		return AudioSound;
	})(EventDispatcher)


	/**
	*<p> <code>SoundChannel</code> 用来控制程序中的声音。每个声音均分配给一个声道，而且应用程序可以具有混合在一起的多个声道。</p>
	*<p> <code>SoundChannel</code> 类包含控制声音的播放、暂停、停止、音量的方法，以及获取声音的播放状态、总时间、当前播放时间、总循环次数、播放地址等信息的方法。</p>
	*/
	//class laya.media.SoundChannel extends laya.events.EventDispatcher
	var SoundChannel=(function(_super){
		function SoundChannel(){
			this.url=null;
			this.loops=0;
			this.startTime=NaN;
			this.isStopped=false;
			this.completeHandler=null;
			SoundChannel.__super.call(this);
		}

		__class(SoundChannel,'laya.media.SoundChannel',_super);
		var __proto=SoundChannel.prototype;
		/**
		*播放。
		*/
		__proto.play=function(){}
		/**
		*停止。
		*/
		__proto.stop=function(){}
		/**
		*暂停。
		*/
		__proto.pause=function(){}
		/**
		*继续播放。
		*/
		__proto.resume=function(){}
		/**
		*private
		*/
		__proto.__runComplete=function(handler){
			if (handler){
				handler.run();
			}
		}

		/**
		*音量范围从 0（静音）至 1（最大音量）。
		*/
		__getset(0,__proto,'volume',function(){
			return 1;
			},function(v){
		});

		/**
		*获取当前播放时间。
		*/
		__getset(0,__proto,'position',function(){
			return 0;
		});

		/**
		*获取总时间。
		*/
		__getset(0,__proto,'duration',function(){
			return 0;
		});

		return SoundChannel;
	})(EventDispatcher)


	/**
	*<code>Sound</code> 类是用来播放控制声音的类。
	*/
	//class laya.media.Sound extends laya.events.EventDispatcher
	var Sound=(function(_super){
		function Sound(){Sound.__super.call(this);;
		};

		__class(Sound,'laya.media.Sound',_super);
		var __proto=Sound.prototype;
		/**
		*加载声音。
		*@param url 地址。
		*
		*/
		__proto.load=function(url){}
		/**
		*播放声音。
		*@param startTime 开始时间,单位秒
		*@param loops 循环次数,0表示一直循环
		*@return 声道 SoundChannel 对象。
		*
		*/
		__proto.play=function(startTime,loops){
			(startTime===void 0)&& (startTime=0);
			(loops===void 0)&& (loops=0);
			return null;
		}

		/**
		*释放声音资源。
		*
		*/
		__proto.dispose=function(){}
		/**
		*获取总时间。
		*/
		__getset(0,__proto,'duration',function(){
			return 0;
		});

		return Sound;
	})(EventDispatcher)


	/**
	*@private
	*web audio api方式播放声音
	*/
	//class laya.media.webaudio.WebAudioSound extends laya.events.EventDispatcher
	var WebAudioSound=(function(_super){
		function WebAudioSound(){
			this.url=null;
			this.loaded=false;
			this.data=null;
			this.audioBuffer=null;
			this.__toPlays=null;
			WebAudioSound.__super.call(this);
		}

		__class(WebAudioSound,'laya.media.webaudio.WebAudioSound',_super);
		var __proto=WebAudioSound.prototype;
		/**
		*加载声音
		*@param url
		*
		*/
		__proto.load=function(url){
			var me=this;
			url=URL.formatURL(url);
			this.url=url;
			this.audioBuffer=WebAudioSound._dataCache[url];
			if (this.audioBuffer){
				this._loaded(this.audioBuffer);
				return;
			}
			WebAudioSound.e.on("loaded:"+url,this,this._loaded);
			WebAudioSound.e.on("err:"+url,this,this._err);
			if (WebAudioSound.__loadingSound[url]){
				return;
			}
			WebAudioSound.__loadingSound[url]=true;
			var request=new Browser.window.XMLHttpRequest();
			request.open("GET",url,true);
			request.responseType="arraybuffer";
			request.onload=function (){
				me.data=request.response;
				WebAudioSound.buffs.push({"buffer":me.data,"url":me.url});
				WebAudioSound.decode();
			};
			request.onerror=function (e){
				me._err();
			}
			request.send();
		}

		__proto._err=function(){
			this._removeLoadEvents();
			WebAudioSound.__loadingSound[this.url]=false;
			this.event("error");
		}

		__proto._loaded=function(audioBuffer){
			this._removeLoadEvents();
			this.audioBuffer=audioBuffer;
			WebAudioSound._dataCache[this.url]=this.audioBuffer;
			this.loaded=true;
			this.event("complete");
		}

		__proto._removeLoadEvents=function(){
			WebAudioSound.e.off("loaded:"+this.url,this,this._loaded);
			WebAudioSound.e.off("err:"+this.url,this,this._err);
		}

		__proto.__playAfterLoaded=function(){
			if (!this.__toPlays)return;
			var i=0,len=0;
			var toPlays;
			toPlays=this.__toPlays;
			len=toPlays.length;
			var tParams;
			for (i=0;i < len;i++){
				tParams=toPlays[i];
				if (tParams[2] && !(tParams [2]).isStopped){
					this.play(tParams[0],tParams[1],tParams[2]);
				}
			}
			this.__toPlays.length=0;
		}

		/**
		*播放声音
		*@param startTime 起始时间
		*@param loops 循环次数
		*@return
		*
		*/
		__proto.play=function(startTime,loops,channel){
			(startTime===void 0)&& (startTime=0);
			(loops===void 0)&& (loops=0);
			channel=channel ? channel :new WebAudioSoundChannel();
			if (!this.audioBuffer){
				if (this.url){
					if (!this.__toPlays)this.__toPlays=[];
					this.__toPlays.push([startTime,loops,channel]);
					this.once("complete",this,this.__playAfterLoaded);
					this.load(this.url);
				}
			}
			channel.url=this.url;
			channel.loops=loops;
			channel["audioBuffer"]=this.audioBuffer;
			channel.startTime=startTime;
			channel.play();
			SoundManager.addChannel(channel);
			return channel;
		}

		__proto.dispose=function(){
			delete WebAudioSound._dataCache[this.url];
			delete WebAudioSound.__loadingSound[this.url];
		}

		__getset(0,__proto,'duration',function(){
			if (this.audioBuffer){
				return this.audioBuffer.duration;
			}
			return 0;
		});

		WebAudioSound.decode=function(){
			if (WebAudioSound.buffs.length <=0 || WebAudioSound.isDecoding){
				return;
			}
			WebAudioSound.isDecoding=true;
			WebAudioSound.tInfo=WebAudioSound.buffs.shift();
			WebAudioSound.ctx.decodeAudioData(WebAudioSound.tInfo["buffer"],WebAudioSound._done,WebAudioSound._fail);
		}

		WebAudioSound._done=function(audioBuffer){
			WebAudioSound.e.event("loaded:"+WebAudioSound.tInfo.url,audioBuffer);
			WebAudioSound.isDecoding=false;
			WebAudioSound.decode();
		}

		WebAudioSound._fail=function(){
			WebAudioSound.e.event("err:"+WebAudioSound.tInfo.url,null);
			WebAudioSound.isDecoding=false;
			WebAudioSound.decode();
		}

		WebAudioSound._playEmptySound=function(){
			if (WebAudioSound.ctx==null){
				return;
			};
			var source=WebAudioSound.ctx.createBufferSource();
			source.buffer=WebAudioSound._miniBuffer;
			source.connect(WebAudioSound.ctx.destination);
			source.start(0,0,0);
		}

		WebAudioSound._unlock=function(){
			if (WebAudioSound._unlocked){
				return;
			}
			WebAudioSound._playEmptySound();
			if (WebAudioSound.ctx.state=="running"){
				Browser.document.removeEventListener("mousedown",WebAudioSound._unlock,true);
				Browser.document.removeEventListener("touchend",WebAudioSound._unlock,true);
				WebAudioSound._unlocked=true;
			}
		}

		WebAudioSound.initWebAudio=function(){
			if (WebAudioSound.ctx.state !="running"){
				WebAudioSound._unlock();
				Browser.document.addEventListener("mousedown",WebAudioSound._unlock,true);
				Browser.document.addEventListener("touchend",WebAudioSound._unlock,true);
			}
		}

		WebAudioSound._dataCache={};
		WebAudioSound.buffs=[];
		WebAudioSound.isDecoding=false;
		WebAudioSound._unlocked=false;
		WebAudioSound.tInfo=null
		WebAudioSound.__loadingSound={};
		__static(WebAudioSound,
		['window',function(){return this.window=Browser.window;},'webAudioEnabled',function(){return this.webAudioEnabled=WebAudioSound.window["AudioContext"] || WebAudioSound.window["webkitAudioContext"] || WebAudioSound.window["mozAudioContext"];},'ctx',function(){return this.ctx=WebAudioSound.webAudioEnabled ? new (WebAudioSound.window["AudioContext"] || WebAudioSound.window["webkitAudioContext"] || WebAudioSound.window["mozAudioContext"])():undefined;},'_miniBuffer',function(){return this._miniBuffer=WebAudioSound.ctx.createBuffer(1,1,22050);},'e',function(){return this.e=new EventDispatcher();}
		]);
		return WebAudioSound;
	})(EventDispatcher)


	/**
	*<p> <code>HttpRequest</code> 通过封装 HTML <code>XMLHttpRequest</code> 对象提供了对 HTTP 协议的完全的访问，包括做出 POST 和 HEAD 请求以及普通的 GET 请求的能力。 <code>HttpRequest</code> 只提供以异步的形式返回 Web 服务器的响应，并且能够以文本或者二进制的形式返回内容。</p>
	*<p><b>注意：</b>建议每次请求都使用新的 <code>HttpRequest</code> 对象，因为每次调用该对象的send方法时，都会清空之前设置的数据，并重置 HTTP 请求的状态，这会导致之前还未返回响应的请求被重置，从而得不到之前请求的响应结果。
	*/
	//class laya.net.HttpRequest extends laya.events.EventDispatcher
	var HttpRequest=(function(_super){
		function HttpRequest(){
			this._responseType=null;
			this._data=null;
			HttpRequest.__super.call(this);
			this._http=new Browser.window.XMLHttpRequest();
		}

		__class(HttpRequest,'laya.net.HttpRequest',_super);
		var __proto=HttpRequest.prototype;
		/**
		*发送 HTTP 请求。
		*@param url 请求的地址。大多数浏览器实施了一个同源安全策略，并且要求这个 URL 与包含脚本的文本具有相同的主机名和端口。
		*@param data (default=null)发送的数据。
		*@param method (default="get")用于请求的 HTTP 方法。值包括 "get"、"post"、"head"。
		*@param responseType (default="text")Web 服务器的响应类型，可设置为 "text"、"json"、"xml"、"arraybuffer"。
		*@param headers (default=null)HTTP 请求的头部信息。参数形如key-value数组：key是头部的名称，不应该包括空白、冒号或换行；value是头部的值，不应该包括换行。比如["Content-Type","application/json"]。
		*/
		__proto.send=function(url,data,method,responseType,headers){
			(method===void 0)&& (method="get");
			(responseType===void 0)&& (responseType="text");
			this._responseType=responseType;
			this._data=null;
			var _this=this;
			var http=this._http;
			http.open(method,url,true);
			if (headers){
				for (var i=0;i < headers.length;i++){
					http.setRequestHeader(headers[i++],headers[i]);
				}
				}else if (!Render.isConchApp){
				if (!data || (typeof data=='string'))http.setRequestHeader("Content-Type","application/x-www-form-urlencoded");
				else http.setRequestHeader("Content-Type","application/json");
			}
			http.responseType=responseType!=="arraybuffer" ? "text" :"arraybuffer";
			http.onerror=function (e){
				_this._onError(e);
			}
			http.onabort=function (e){
				_this._onAbort(e);
			}
			http.onprogress=function (e){
				_this._onProgress(e);
			}
			http.onload=function (e){
				_this._onLoad(e);
			}
			http.send(data);
		}

		/**
		*@private
		*请求进度的侦听处理函数。
		*@param e 事件对象。
		*/
		__proto._onProgress=function(e){
			if (e && e.lengthComputable)this.event("progress",e.loaded / e.total);
		}

		/**
		*@private
		*请求中断的侦听处理函数。
		*@param e 事件对象。
		*/
		__proto._onAbort=function(e){
			this.error("Request was aborted by user");
		}

		/**
		*@private
		*请求出错侦的听处理函数。
		*@param e 事件对象。
		*/
		__proto._onError=function(e){
			this.error("Request failed Status:"+this._http.status+" text:"+this._http.statusText);
		}

		/**
		*@private
		*请求消息返回的侦听处理函数。
		*@param e 事件对象。
		*/
		__proto._onLoad=function(e){
			var http=this._http;
			var status=http.status!==undefined ? http.status :200;
			if (status===200 || status===204 || status===0){
				this.complete();
				}else {
				this.error("["+http.status+"]"+http.statusText+":"+http.responseURL);
			}
		}

		/**
		*@private
		*请求错误的处理函数。
		*@param message 错误信息。
		*/
		__proto.error=function(message){
			this.clear();
			this.event("error",message);
		}

		/**
		*@private
		*请求成功完成的处理函数。
		*/
		__proto.complete=function(){
			this.clear();
			var flag=true;
			try {
				if (this._responseType==="json"){
					this._data=JSON.parse(this._http.responseText);
					}else if (this._responseType==="xml"){
					this._data=Utils$2.parseXMLFromString(this._http.responseText);
					}else {
					this._data=this._http.response || this._http.responseText;
				}
				}catch (e){
				flag=false;
				this.error(e.message);
			}
			flag && this.event("complete",(this._data instanceof Array)? [this._data] :this._data);
		}

		/**
		*@private
		*清除当前请求。
		*/
		__proto.clear=function(){
			var http=this._http;
			http.onerror=http.onabort=http.onprogress=http.onload=null;
		}

		/**请求的地址。*/
		__getset(0,__proto,'url',function(){
			return this._http.responseURL;
		});

		/**
		*本对象所封装的原生 XMLHttpRequest 引用。
		*/
		__getset(0,__proto,'http',function(){
			return this._http;
		});

		/**返回的数据。*/
		__getset(0,__proto,'data',function(){
			return this._data;
		});

		return HttpRequest;
	})(EventDispatcher)


	/**
	*<code>Loader</code> 类可用来加载文本、JSON、XML、二进制、图像等资源。
	*/
	//class laya.net.Loader extends laya.events.EventDispatcher
	var Loader=(function(_super){
		function Loader(){
			this._data=null;
			this._url=null;
			this._type=null;
			this._cache=false;
			this._http=null;
			this._customParse=false;
			Loader.__super.call(this);
		}

		__class(Loader,'laya.net.Loader',_super);
		var __proto=Loader.prototype;
		/**
		*加载资源。加载错误会派发 Event.ERROR 事件，参数为错误信息。
		*@param url 资源地址。
		*@param type (default=null)资源类型。可选值为：Loader.TEXT、Loader.JSON、Loader.XML、Loader.BUFFER、Loader.IMAGE、Loader.SOUND、Loader.ATLAS、Loader.FONT。如果为null，则根据文件后缀分析类型。
		*@param cache (default=true)是否缓存数据。
		*@param group (default=null)分组名称。
		*@param ignoreCache (default=false)是否忽略缓存，强制重新加载。
		*/
		__proto.load=function(url,type,cache,group,ignoreCache){
			(cache===void 0)&& (cache=true);
			(ignoreCache===void 0)&& (ignoreCache=false);
			this._url=url;
			if (url.indexOf("data:image")===0)type="image";
			else url=URL.formatURL(url);
			this._type=type || (type=this.getTypeFromUrl(url));
			this._cache=cache;
			this._data=null;
			if (!ignoreCache && Loader.loadedMap[url]){
				this._data=Loader.loadedMap[url];
				this.event("progress",1);
				this.event("complete",this._data);
				return;
			}
			if (group)Loader.setGroup(url,group);
			if (Loader.parserMap[type] !=null){
				this._customParse=true;
				if (((Loader.parserMap[type])instanceof laya.utils.Handler ))Loader.parserMap[type].runWith(this);
				else Loader.parserMap[type].call(null,this);
				return;
			}
			if (type==="image" || type==="htmlimage" || type==="nativeimage")return this._loadImage(url);
			if (type==="sound")return this._loadSound(url);
			if (!this._http){
				this._http=new HttpRequest();
				this._http.on("progress",this,this.onProgress);
				this._http.on("error",this,this.onError);
				this._http.on("complete",this,this.onLoaded);
			};
			var contentType;
			switch (type){
				case "atlas":
					contentType="json";
					break ;
				case "font":
					contentType="xml";
					break ;
				default :
					contentType=type;
				}
			this._http.send(url,null,"get",contentType);
		}

		/**
		*获取指定资源地址的数据类型。
		*@param url 资源地址。
		*@return 数据类型。
		*/
		__proto.getTypeFromUrl=function(url){
			var type=Utils$2.getFileExtension(url);
			if (type)return Loader.typeMap[type];
			console.warn("Not recognize the resources suffix",url);
			return "text";
		}

		/**
		*@private
		*加载图片资源。
		*@param url 资源地址。
		*/
		__proto._loadImage=function(url){
			url=URL.formatURL(url);
			var _this=this;
			var image;
			function clear (){
				image.onload=null;
				image.onerror=null;
			};
			var onload=function (){
				clear();
				_this.onLoaded(image);
			};
			var onerror=function (){
				clear();
				_this.event("error","Load image failed");
			}
			if (this._type==="nativeimage"){
				image=new Browser.window.Image();
				image.crossOrigin="";
				image.onload=onload;
				image.onerror=onerror;
				image.src=url;
				}else {
				new HTMLImage.create(url,{onload:onload,onerror:onerror,onCreate:function (img){
						image=img;
				}});
			}
		}

		/**
		*@private
		*加载声音资源。
		*@param url 资源地址。
		*/
		__proto._loadSound=function(url){
			var sound=(new SoundManager._soundClass());
			var _this=this;
			sound.on("complete",this,soundOnload);
			sound.on("error",this,soundOnErr);
			sound.load(url);
			function soundOnload (){
				clear();
				_this.onLoaded(sound);
			}
			function soundOnErr (){
				clear();
				sound.dispose();
				_this.event("error","Load sound failed");
			}
			function clear (){
				sound.offAll();
			}
		}

		/**@private */
		__proto.onProgress=function(value){
			if (this._type==="atlas")this.event("progress",value *0.3);
			else this.event("progress",value);
		}

		/**@private */
		__proto.onError=function(message){
			this.event("error",message);
		}

		/**
		*资源加载完成的处理函数。
		*@param data 数据。
		*/
		__proto.onLoaded=function(data){
			var type=this._type;
			if (type==="image"){
				var tex=new Texture(data);
				tex.url=this._url;
				this.complete(tex);
				}else if (type==="sound" || type==="htmlimage" || type==="nativeimage"){
				this.complete(data);
				}else if (type==="atlas"){
				if (!data.src && !data._setContext){
					if (!this._data){
						this._data=data;
						if (data.meta && data.meta.image){
							var toloadPics=data.meta.image.split(",");
							var split=this._url.indexOf("/")>=0 ? "/" :"\\";
							var idx=this._url.lastIndexOf(split);
							var folderPath=idx >=0 ? this._url.substr(0,idx+1):"";
							for (var i=0,len=toloadPics.length;i < len;i++){
								toloadPics[i]=folderPath+toloadPics[i];
							}
							}else {
							toloadPics=[this._url.replace(".json",".png")];
						}
						toloadPics.reverse();
						data.toLoads=toloadPics;
						data.pics=[];
					}
					this.event("progress",0.3+1 / toloadPics.length *0.6);
					return this._loadImage(toloadPics.pop());
					}else {
					this._data.pics.push(data);
					if (this._data.toLoads.length > 0){
						this.event("progress",0.3+1 / this._data.toLoads.length *0.6);
						return this._loadImage(this._data.toLoads.pop());
					};
					var frames=this._data.frames;
					var cleanUrl=this._url.split("?")[0];
					var directory=(this._data.meta && this._data.meta.prefix)? this._data.meta.prefix :cleanUrl.substring(0,cleanUrl.lastIndexOf("."))+"/";
					var pics=this._data.pics;
					var atlasURL=URL.formatURL(this._url);
					var map=Loader.atlasMap[atlasURL] || (Loader.atlasMap[atlasURL]=[]);
					map.dir=directory;
					for (var name in frames){
						var obj=frames[name];
						var tPic=pics[obj.frame.idx ? obj.frame.idx :0];
						var url=URL.formatURL(directory+name);
						Loader.cacheRes(url,Texture.create(tPic,obj.frame.x,obj.frame.y,obj.frame.w,obj.frame.h,obj.spriteSourceSize.x,obj.spriteSourceSize.y,obj.sourceSize.w,obj.sourceSize.h));
						Loader.loadedMap[url].url=url;
						map.push(url);
					}
					this.complete(this._data);
				}
				}else if (type=="font"){
				if (!data.src){
					this._data=data;
					this.event("progress",0.5);
					return this._loadImage(this._url.replace(".fnt",".png"));
					}else {
					var bFont=new BitmapFont();
					bFont.parseFont(this._data,data);
					var tArr=this._url.split(".fnt")[0].split("/");
					var fontName=tArr[tArr.length-1];
					Text.registerBitmapFont(fontName,bFont);
					this._data=bFont;
					this.complete(this._data);
				}
				}else {
				this.complete(data);
			}
		}

		/**
		*加载完成。
		*@param data 加载的数据。
		*/
		__proto.complete=function(data){
			this._data=data;
			Loader._loaders.push(this);
			if (!Loader._isWorking)Loader.checkNext();
		}

		/**
		*结束加载，处理是否缓存及派发完成事件 <code>Event.COMPLETE</code> 。
		*@param content 加载后的数据
		*/
		__proto.endLoad=function(content){
			content && (this._data=content);
			if (this._cache)Loader.cacheRes(this._url,this._data);
			this.event("progress",1);
			this.event("complete",(this.data instanceof Array)? [this.data] :this.data);
		}

		/**加载地址。*/
		__getset(0,__proto,'url',function(){
			return this._url;
		});

		/**返回的数据。*/
		__getset(0,__proto,'data',function(){
			return this._data;
		});

		/**是否缓存。*/
		__getset(0,__proto,'cache',function(){
			return this._cache;
		});

		/**加载类型。*/
		__getset(0,__proto,'type',function(){
			return this._type;
		});

		Loader.checkNext=function(){
			if (Loader.completeCallbackPause){
				Laya.timer.frameOnce(1,null,Loader.checkNext);
				return;
			}
			Loader._isWorking=true;
			var startTimer=Browser.now();
			var thisTimer=startTimer;
			while (Loader._startIndex < Loader._loaders.length){
				thisTimer=Browser.now();
				Loader._loaders[Loader._startIndex].endLoad();
				Loader._startIndex++;
				if (Browser.now()-startTimer > Loader.maxTimeOut){
					console.warn("loader callback cost a long time:"+(Browser.now()-startTimer)+" url="+Loader._loaders[Loader._startIndex-1].url);
					Laya.timer.frameOnce(1,null,Loader.checkNext);
					return;
				}
			}
			Loader._loaders.length=0;
			Loader._startIndex=0;
			Loader._isWorking=false;
		}

		Loader.clearRes=function(url,forceDispose){
			(forceDispose===void 0)&& (forceDispose=false);
			url=URL.formatURL(url);
			var arr=Loader.getAtlas(url);
			if (arr){
				for (var i=0,n=arr.length;i < n;i++){
					var resUrl=arr[i];
					var tex=Loader.getRes(resUrl);
					if (tex)tex.destroy(forceDispose);
					delete Loader.loadedMap[resUrl];
				}
				arr.length=0;
				delete Loader.atlasMap[url];
				delete Loader.loadedMap[url];
				}else {
				var res=Loader.loadedMap[url];
				if (res){
					if ((res instanceof laya.resource.Texture )&& res.bitmap)(res).destroy(forceDispose);
					delete Loader.loadedMap[url];
				}
			}
		}

		Loader.getRes=function(url){
			return Loader.loadedMap[URL.formatURL(url)];
		}

		Loader.getAtlas=function(url){
			return Loader.atlasMap[URL.formatURL(url)];
		}

		Loader.cacheRes=function(url,data){
			url=URL.formatURL(url);
			if (Loader.loadedMap[url] !=null){
				console.warn("Resources already exist,is repeated loading:",url);
				}else {
				Loader.loadedMap[url]=data;
			}
		}

		Loader.setGroup=function(url,group){
			if (!Loader.groupMap[group])Loader.groupMap[group]=[];
			Loader.groupMap[group].push(url);
		}

		Loader.clearResByGroup=function(group){
			if (!Loader.groupMap[group])return;
			var arr=Loader.groupMap[group],i=0,len=arr.length;
			for (i=0;i < len;i++){
				Loader.clearRes(arr[i]);
			}
			arr.length=0;
		}

		Loader.TEXT="text";
		Loader.JSON="json";
		Loader.XML="xml";
		Loader.BUFFER="arraybuffer";
		Loader.IMAGE="image";
		Loader.SOUND="sound";
		Loader.ATLAS="atlas";
		Loader.FONT="font";
		Loader.completeCallbackPause=false;
		Loader.typeMap={"png":"image","jpg":"image","jpeg":"image","txt":"text","json":"json","xml":"xml","als":"atlas","atlas":"atlas","mp3":"sound","ogg":"sound","wav":"sound","part":"json","fnt":"font"};
		Loader.parserMap={};
		Loader.groupMap={};
		Loader.maxTimeOut=100;
		Loader.loadedMap={};
		Loader.atlasMap={};
		Loader._loaders=[];
		Loader._isWorking=false;
		Loader._startIndex=0;
		return Loader;
	})(EventDispatcher)


	/**
	*<p> <code>Socket</code> 封装了 HTML5 WebSocket ，允许服务器端与客户端进行全双工（full-duplex）的实时通信，并且允许跨域通信。在建立连接后，服务器和 Browser/Client Agent 都能主动的向对方发送或接收文本和二进制数据。</p>
	*<p>要使用 <code>Socket</code> 类的方法，请先使用构造函数 <code>new Socket</code> 创建一个 <code>Socket</code> 对象。 <code>Socket</code> 以异步方式传输和接收数据。</p>
	*/
	//class laya.net.Socket extends laya.events.EventDispatcher
	var Socket=(function(_super){
		function Socket(host,port,byteClass){
			this._endian=null;
			this._stamp=NaN;
			this._socket=null;
			this._connected=false;
			this._addInputPosition=0;
			this._input=null;
			this._output=null;
			this._msgCache=[];
			this.timeout=0;
			this.objectEncoding=0;
			this.disableInput=false;
			this._byteClass=null;
			this.protocols=[];
			(port===void 0)&& (port=0);
			Socket.__super.call(this);
			this._byteClass=byteClass ? byteClass :Byte;
			this.endian="bigEndian";
			this.timeout=20000;
			this._addInputPosition=0;
			if (host && port > 0 && port < 65535)
				this.connect(host,port);
		}

		__class(Socket,'laya.net.Socket',_super);
		var __proto=Socket.prototype;
		/**
		*<p>连接到指定的主机和端口。</p>
		*<p>连接成功派发 Event.OPEN 事件；连接失败派发 Event.ERROR 事件；连接被关闭派发 Event.CLOSE 事件；接收到数据派发 Event.MESSAGE 事件； 除了 Event.MESSAGE 事件参数为数据内容，其他事件参数都是原生的 HTML DOM Event 对象。</p>
		*@param host 服务器地址。
		*@param port 服务器端口。
		*/
		__proto.connect=function(host,port){
			var url;
			if (Browser.window.location.protocol=="https:"){
				url="wss://"+host+":"+port;
			}
			else{
				url="ws://"+host+":"+port;
			}
			this.connectByUrl(url);
		}

		/**
		*<p>连接到指定的服务端 WebSocket URL。 URL 类似 ws://yourdomain:port。</p>
		*<p>连接成功派发 Event.OPEN 事件；连接失败派发 Event.ERROR 事件；连接被关闭派发 Event.CLOSE 事件；接收到数据派发 Event.MESSAGE 事件； 除了 Event.MESSAGE 事件参数为数据内容，其他事件参数都是原生的 HTML DOM Event 对象。</p>
		*@param url 要连接的服务端 WebSocket URL。 URL 类似 ws://yourdomain:port。
		*/
		__proto.connectByUrl=function(url){
			var _$this=this;
			if (this._socket !=null)
				this.close();
			this._socket && this.cleanSocket();
			if (!this.protocols || this.protocols.length==0){
				this._socket=new Browser.window.WebSocket(url);
				}else {
				this._socket=new Browser.window.WebSocket(url,this.protocols);
			}
			this._socket.binaryType="arraybuffer";
			this._output=new this._byteClass();
			this._output.endian=this.endian;
			this._input=new this._byteClass();
			this._input.endian=this.endian;
			this._addInputPosition=0;
			this._socket.onopen=function (e){
				_$this._onOpen(e);
			};
			this._socket.onmessage=function (msg){
				_$this._onMessage(msg);
			};
			this._socket.onclose=function (e){
				_$this._onClose(e);
			};
			this._socket.onerror=function (e){
				_$this._onError(e);
			};
		}

		/**
		*清理socket。
		*/
		__proto.cleanSocket=function(){
			try {
				this._socket.close();
			}catch (e){}
			this._connected=false;
			this._socket.onopen=null;
			this._socket.onmessage=null;
			this._socket.onclose=null;
			this._socket.onerror=null;
			this._socket=null;
		}

		/**
		*关闭连接。
		*/
		__proto.close=function(){
			if (this._socket !=null){
				try {
					this._socket.close();
				}catch (e){}
			}
			this._msgCache.length=0;
		}

		/**
		*@private
		*连接建立成功 。
		*/
		__proto._onOpen=function(e){
			this._connected=true;
			this.event("open",e);
		}

		__proto._onAcceptMsg=function(msg){
			if (!msg || !msg.data)return;
			if (Socket.onMessagePause){
				this._msgCache.push(msg);
				Laya.timer.frameOnce(1,this,this._onMessage);
				return;
			}
			if (this._msgCache.length){
				for (var i=0,s=this._msgCache.length;i < s;i++){
					this._onMessage(this._msgCache[i]);
				}
			}
			this._onMessage(msg);
		}

		/**
		*@private
		*接收到数据处理方法。
		*@param msg 数据。
		*/
		__proto._onMessage=function(msg){
			if (!msg || !msg.data)return;
			var data=msg.data;
			if (this.disableInput && data){
				this.event("message",data);
				return;
			}
			if (this._input.length > 0 && this._input.bytesAvailable < 1){
				this._input.clear();
				this._addInputPosition=0;
			};
			var pre=this._input.pos;
			!this._addInputPosition && (this._addInputPosition=0);
			this._input.pos=this._addInputPosition;
			if (data){
				if ((typeof data=='string')){
					this._input.writeUTFBytes(data);
					}else {
					this._input.writeArrayBuffer(data);
				}
				this._addInputPosition=this._input.pos;
				this._input.pos=pre;
			}
			this.event("message",data);
		}

		/**
		*@private
		*连接被关闭处理方法。
		*/
		__proto._onClose=function(e){
			this._connected=false;
			this.event("close",e)
		}

		/**
		*@private
		*出现异常处理方法。
		*/
		__proto._onError=function(e){
			this.event("error",e)
		}

		/**
		*发送数据到服务器。
		*@param data 需要发送的数据，可以是String或者ArrayBuffer。
		*/
		__proto.send=function(data){
			this._socket.send(data);
		}

		/**
		*发送缓冲区中的数据到服务器。
		*/
		__proto.flush=function(){
			if (this._output && this._output.length > 0){
				var evt;
				try {
					this._socket && this._socket.send(this._output.__getBuffer().slice(0,this._output.length));
					}catch (e){
					evt=e;
				}
				this._output.endian=this.endian;
				this._output.clear();
				if (evt)this.event("error",evt);
			}
		}

		/**
		*缓存的服务端发来的数据。
		*/
		__getset(0,__proto,'input',function(){
			return this._input;
		});

		/**
		*表示需要发送至服务端的缓冲区中的数据。
		*/
		__getset(0,__proto,'output',function(){
			return this._output;
		});

		/**
		*表示此 Socket 对象目前是否已连接。
		*/
		__getset(0,__proto,'connected',function(){
			return this._connected;
		});

		/**
		*<p>主机字节序，是 CPU 存放数据的两种不同顺序，包括小端字节序和大端字节序。</p>
		*<p> LITTLE_ENDIAN ：小端字节序，地址低位存储值的低位，地址高位存储值的高位。</p>
		*<p> BIG_ENDIAN ：大端字节序，地址低位存储值的高位，地址高位存储值的低位。</p>
		*/
		__getset(0,__proto,'endian',function(){
			return this._endian;
			},function(value){
			this._endian=value;
			if (this._input !=null)this._input.endian=value;
			if (this._output !=null)this._output.endian=value;
		});

		Socket.LITTLE_ENDIAN="littleEndian";
		Socket.BIG_ENDIAN="bigEndian";
		Socket.onMessagePause=false;
		return Socket;
	})(EventDispatcher)


	/**
	*请求用户数据
	*@author ...
	*/
	//class notifyMsgs.achieveMsgs.RequestCUserData extends notifyMsgs.NotifyObject
	var RequestCUserData=(function(_super){
		function RequestCUserData(){
			this.uid=NaN;
			this.query=null;
			RequestCUserData.__super.call(this);
			this.method=3075;
		}

		__class(RequestCUserData,'notifyMsgs.achieveMsgs.RequestCUserData',_super);
		var __proto=RequestCUserData.prototype;
		__proto.clear=function(){
			this.uid=0;
			this.query=null;
			return _super.prototype.clear.call(this);
		}

		return RequestCUserData;
	})(NotifyObject)


	/**
	*...
	*@author ...
	*/
	//class notifyMsgs.achieveMsgs.RequestUserData extends notifyMsgs.NotifyObject
	var RequestUserData=(function(_super){
		function RequestUserData(){
			this.uid=NaN;
			RequestUserData.__super.call(this);
			this.method=3073;
		}

		__class(RequestUserData,'notifyMsgs.achieveMsgs.RequestUserData',_super);
		var __proto=RequestUserData.prototype;
		__proto.clear=function(){
			this.uid=0;
			return _super.prototype.clear.call(this);
		}

		return RequestUserData;
	})(NotifyObject)


	/**
	*<code>Texture</code> 是一个纹理处理类。
	*/
	//class laya.resource.Texture extends laya.events.EventDispatcher
	var Texture=(function(_super){
		function Texture(bitmap,uv){
			//this.bitmap=null;
			//this.uv=null;
			this.offsetX=0;
			this.offsetY=0;
			this.sourceWidth=0;
			this.sourceHeight=0;
			//this._loaded=false;
			this._w=0;
			this._h=0;
			//this.$_GID=NaN;
			//this.url=null;
			this._uvID=0;
			Texture.__super.call(this);
			if (bitmap){
				bitmap.useNum++;
			}
			this.setTo(bitmap,uv);
		}

		__class(Texture,'laya.resource.Texture',_super);
		var __proto=Texture.prototype;
		/**
		*设置此对象的位图资源、UV数据信息。
		*@param bitmap 位图资源
		*@param uv UV数据信息
		*/
		__proto.setTo=function(bitmap,uv){
			if (bitmap instanceof window.HTMLElement){
				var canvas=HTMLCanvas.create("2D",bitmap);
				this.bitmap=canvas;
				}else{
				this.bitmap=bitmap;
			}
			this.uv=uv || Texture.DEF_UV;
			if (bitmap){
				this._w=bitmap.width;
				this._h=bitmap.height;
				this.sourceWidth=this.sourceWidth || this._w;
				this.sourceHeight=this.sourceHeight || this._h
				this._loaded=this._w > 0;
				var _this=this;
				if (this._loaded){
					RunDriver.addToAtlas && RunDriver.addToAtlas(_this);
					}else {
					var bm=bitmap;
					if ((bm instanceof laya.resource.HTMLImage )&& bm.image)
						bm.image.addEventListener('load',function(e){
						RunDriver.addToAtlas && RunDriver.addToAtlas(_this);
					},false);
				}
			}
		}

		/**@private 激活资源。*/
		__proto.active=function(){
			if(this.bitmap)this.bitmap.activeResource();
		}

		/**
		*销毁纹理（分直接销毁，跟计数销毁两种）。
		*@param forceDispose (default=false)true为强制销毁主纹理，false是通过计数销毁纹理。
		*/
		__proto.destroy=function(forceDispose){
			(forceDispose===void 0)&& (forceDispose=false);
			if (this.bitmap && (this.bitmap).useNum > 0){
				if (forceDispose){
					this.bitmap.dispose();
					(this.bitmap).useNum=0;
					}else {
					(this.bitmap).useNum--;
					if ((this.bitmap).useNum==0){
						this.bitmap.dispose();
					}
				}
				this.bitmap=null;
				if (this.url && this===Laya.loader.getRes(this.url))Laya.loader.clearRes(this.url,forceDispose);
				this._loaded=false;
			}
		}

		/**
		*加载指定地址的图片。
		*@param url 图片地址。
		*/
		__proto.load=function(url){
			var _$this=this;
			this._loaded=false;
			url=URL.customFormat(url);
			var fileBitmap=(this.bitmap || (this.bitmap=HTMLImage.create(url)));
			if (fileBitmap)fileBitmap.useNum++;
			var _this=this;
			fileBitmap.onload=function (){
				fileBitmap.onload=null;
				_this._loaded=true;
				_$this.sourceWidth=_$this._w=fileBitmap.width;
				_$this.sourceHeight=_$this._h=fileBitmap.height;
				_this.event("loaded",this);
				(RunDriver.addToAtlas)&& (RunDriver.addToAtlas(_this));
			};
		}

		/**@private */
		__proto.addTextureToAtlas=function(e){
			RunDriver.addTextureToAtlas(this);
		}

		/**
		*获取Texture上的某个区域的像素点
		*@param x
		*@param y
		*@param width
		*@param height
		*@return 返回像素点集合
		*/
		__proto.getPixels=function(x,y,width,height){
			if (Render.isWebGL){
				return RunDriver.getTexturePixels(this,x,y,width,height);
				}else {
				Browser.canvas.size(width,height);
				Browser.canvas.clear();
				Browser.context.drawTexture(this,-x,-y,this.width,this.height,0,0);
				var info=Browser.context.getImageData(0,0,width,height);
			}
			return info.data;
		}

		/**@private */
		__proto.onAsynLoaded=function(url,bitmap){
			if (bitmap)bitmap.useNum++;
			this.setTo(bitmap,this.uv);
		}

		/**激活并获取资源。*/
		__getset(0,__proto,'source',function(){
			if (!this.bitmap)return null;
			this.bitmap.activeResource();
			return this.bitmap.source;
		});

		/**
		*表示是否加载成功，只能表示初次载入成功（通常包含下载和载入）,并不能完全表示资源是否可立即使用（资源管理机制释放影响等）。
		*/
		__getset(0,__proto,'loaded',function(){
			return this._loaded;
		});

		/**
		*表示资源是否已释放。
		*/
		__getset(0,__proto,'released',function(){
			if (!this.bitmap)return true;
			return this.bitmap.released;
		});

		/**实际宽度。*/
		__getset(0,__proto,'width',function(){
			if (this._w)return this._w;
			return (this.uv && this.uv!==Texture.DEF_UV)? (this.uv[2]-this.uv[0])*this.bitmap.width :this.bitmap.width;
			},function(value){
			this._w=value;
			this.sourceWidth || (this.sourceWidth=value);
		});

		/**
		*通过外部设置是否启用纹理平铺(后面要改成在着色器里计算)
		*/
		/**
		*获取当前纹理是否启用了纹理平铺
		*/
		__getset(0,__proto,'repeat',function(){
			if (Render.isWebGL && this.bitmap){
				return this.bitmap.repeat;
			}
			return true;
			},function(value){
			if (value){
				if (Render.isWebGL && this.bitmap){
					this.bitmap.repeat=value;
					if (value){
						this.bitmap.enableMerageInAtlas=false;
					}
				}
			}
		});

		/**实际高度。*/
		__getset(0,__proto,'height',function(){
			if (this._h)return this._h;
			return (this.uv && this.uv!==Texture.DEF_UV)? (this.uv[5]-this.uv[1])*this.bitmap.height :this.bitmap.height;
			},function(value){
			this._h=value;
			this.sourceHeight || (this.sourceHeight=value);
		});

		/**
		*设置线性采样的状态（目前只能第一次绘制前设置false生效,来关闭线性采样）。
		*/
		/**
		*获取当前纹理是否启用了线性采样。
		*/
		__getset(0,__proto,'isLinearSampling',function(){
			return Render.isWebGL ? (this.bitmap.minFifter !=0x2600):true;
			},function(value){
			if (!value && Render.isWebGL){
				if (!value && (this.bitmap.minFifter==-1)&& (this.bitmap.magFifter==-1)){
					this.bitmap.minFifter=0x2600;
					this.bitmap.magFifter=0x2600;
					this.bitmap.enableMerageInAtlas=false;
				}
			}
		});

		Texture.moveUV=function(offsetX,offsetY,uv){
			for (var i=0;i < 8;i+=2){
				uv[i]+=offsetX;
				uv[i+1]+=offsetY;
			}
			return uv;
		}

		Texture.create=function(source,x,y,width,height,offsetX,offsetY,sourceWidth,sourceHeight){
			(offsetX===void 0)&& (offsetX=0);
			(offsetY===void 0)&& (offsetY=0);
			(sourceWidth===void 0)&& (sourceWidth=0);
			(sourceHeight===void 0)&& (sourceHeight=0);
			var btex=(source instanceof laya.resource.Texture );
			var uv=btex ? source.uv :Texture.DEF_UV;
			var bitmap=btex ? source.bitmap :source;
			var tex=new Texture(bitmap,null);
			if (bitmap.width && (x+width)> bitmap.width)width=bitmap.width-x;
			if (bitmap.height && (y+height)> bitmap.height)height=bitmap.height-y;
			tex.width=width;
			tex.height=height;
			tex.offsetX=offsetX;
			tex.offsetY=offsetY;
			tex.sourceWidth=sourceWidth || width;
			tex.sourceHeight=sourceHeight || height;
			var dwidth=1 / bitmap.width;
			var dheight=1 / bitmap.height;
			x *=dwidth;
			y *=dheight;
			width *=dwidth;
			height *=dheight;
			var u1=tex.uv[0],v1=tex.uv[1],u2=tex.uv[4],v2=tex.uv[5];
			var inAltasUVWidth=(u2-u1),inAltasUVHeight=(v2-v1);
			var oriUV=Texture.moveUV(uv[0],uv[1],[x,y,x+width,y,x+width,y+height,x,y+height]);
			tex.uv=[u1+oriUV[0] *inAltasUVWidth,v1+oriUV[1] *inAltasUVHeight,u2-(1-oriUV[2])*inAltasUVWidth,v1+oriUV[3] *inAltasUVHeight,u2-(1-oriUV[4])*inAltasUVWidth,v2-(1-oriUV[5])*inAltasUVHeight,u1+oriUV[6] *inAltasUVWidth,v2-(1-oriUV[7])*inAltasUVHeight];
			return tex;
		}

		Texture.createFromTexture=function(texture,x,y,width,height){
			var rect=Rectangle.TEMP.setTo(x-texture.offsetX,y-texture.offsetY,width,height);
			var result=rect.intersection(Texture._rect1.setTo(0,0,texture.width,texture.height),Texture._rect2);
			if (result)
				var tex=Texture.create(texture,result.x,result.y,result.width,result.height,result.x-rect.x,result.y-rect.y,width,height);
			else return null;
			tex.bitmap.useNum--;
			return tex;
		}

		Texture.DEF_UV=[0,0,1.0,0,1.0,1.0,0,1.0];
		Texture.INV_UV=[0,1,1.0,1,1.0,0.0,0,0.0];
		Texture._rect1=new Rectangle();
		Texture._rect2=new Rectangle();
		return Texture;
	})(EventDispatcher)


	/**
	*...
	*@author ...
	*/
	//class notifyMsgs.achieveMsgs.RequsetLevelUp extends notifyMsgs.NotifyObject
	var RequsetLevelUp=(function(_super){
		function RequsetLevelUp(){
			RequsetLevelUp.__super.call(this);
			this.method=3069;
		}

		__class(RequsetLevelUp,'notifyMsgs.achieveMsgs.RequsetLevelUp',_super);
		return RequsetLevelUp;
	})(NotifyObject)


	/**
	*...
	*@author ...
	*/
	//class notifyMsgs.achieveMsgs.ResponseAchievements extends notifyMsgs.NotifyObject
	var ResponseAchievements=(function(_super){
		function ResponseAchievements(){
			this.allAchievements=null;
			ResponseAchievements.__super.call(this);
			this.method=30008;
		}

		__class(ResponseAchievements,'notifyMsgs.achieveMsgs.ResponseAchievements',_super);
		var __proto=ResponseAchievements.prototype;
		__proto.clear=function(){
			this.allAchievements=null;
			return _super.prototype.clear.call(this);
		}

		return ResponseAchievements;
	})(NotifyObject)


	/**
	*...
	*@author ...
	*/
	//class notifyMsgs.achieveMsgs.ResponseCUserData extends notifyMsgs.NotifyObject
	var ResponseCUserData=(function(_super){
		function ResponseCUserData(){
			this.uid=NaN;
			this.userData=null;
			ResponseCUserData.__super.call(this);
			this.method=30063;
		}

		__class(ResponseCUserData,'notifyMsgs.achieveMsgs.ResponseCUserData',_super);
		var __proto=ResponseCUserData.prototype;
		__proto.clear=function(){
			this.uid=0;
			this.userData=null;
			return _super.prototype.clear.call(this);
		}

		return ResponseCUserData;
	})(NotifyObject)


	/**
	*...
	*@author ...
	*/
	//class notifyMsgs.achieveMsgs.ResponseUserData extends notifyMsgs.NotifyObject
	var ResponseUserData=(function(_super){
		function ResponseUserData(){
			this.userData=null;
			this.seasonData
			ResponseUserData.__super.call(this);
			this.method=30062;
		}

		__class(ResponseUserData,'notifyMsgs.achieveMsgs.ResponseUserData',_super);
		var __proto=ResponseUserData.prototype;
		__proto.clear=function(){
			this.userData=null;
			this.seasonData=null;
			return _super.prototype.clear.call(this);
		}

		return ResponseUserData;
	})(NotifyObject)


	/**
	*...
	*@author ...
	*/
	//class notifyMsgs.achieveMsgs.ResponseUsingResult extends notifyMsgs.NotifyObject
	var ResponseUsingResult=(function(_super){
		function ResponseUsingResult(){
			this.resultArr=null;
			this.code=0;
			ResponseUsingResult.__super.call(this);
			this.method=30057;
		}

		__class(ResponseUsingResult,'notifyMsgs.achieveMsgs.ResponseUsingResult',_super);
		var __proto=ResponseUsingResult.prototype;
		__proto.clear=function(){
			this.resultArr=[];
			this.code=0;
			return _super.prototype.clear.call(this);
		}

		return ResponseUsingResult;
	})(NotifyObject)


	/**
	*...
	*@author Chen Gong
	*/
	//class notifyMsgs.activityMsgs.RequestUpdateClientTask extends notifyMsgs.NotifyObject
	var RequestUpdateClientTask=(function(_super){
		function RequestUpdateClientTask(){
			this.share_type=NaN;
			RequestUpdateClientTask.__super.call(this);
			this.method=3050;
		}

		__class(RequestUpdateClientTask,'notifyMsgs.activityMsgs.RequestUpdateClientTask',_super);
		var __proto=RequestUpdateClientTask.prototype;
		__proto.clear=function(){
			return _super.prototype.clear.call(this);
		}

		return RequestUpdateClientTask;
	})(NotifyObject)


	/**
	*...
	*@author Chen Gong
	*/
	//class notifyMsgs.activityMsgs.ResponseActivityFinish extends notifyMsgs.NotifyObject
	var ResponseActivityFinish=(function(_super){
		function ResponseActivityFinish(){
			this.activity_task=null;
			ResponseActivityFinish.__super.call(this);
			this.method=30043;
		}

		__class(ResponseActivityFinish,'notifyMsgs.activityMsgs.ResponseActivityFinish',_super);
		var __proto=ResponseActivityFinish.prototype;
		__proto.clear=function(){
			this.activity_task=null;
			return _super.prototype.clear.call(this);
		}

		return ResponseActivityFinish;
	})(NotifyObject)


	/**
	*请求使用属性点
	*@author dongketao
	*/
	//class notifyMsgs.attributeMsgs.RequestUseAttPoint extends notifyMsgs.NotifyObject
	var RequestUseAttPoint=(function(_super){
		function RequestUseAttPoint(){
			this.addAttPoint=null;
			RequestUseAttPoint.__super.call(this);
			this.method=3061;
		}

		__class(RequestUseAttPoint,'notifyMsgs.attributeMsgs.RequestUseAttPoint',_super);
		var __proto=RequestUseAttPoint.prototype;
		__proto.clear=function(){
			this.addAttPoint=null;
			return _super.prototype.clear.call(this);
		}

		return RequestUseAttPoint;
	})(NotifyObject)


	/**
	*请求重置属性点
	*@author dongketao
	*/
	//class notifyMsgs.attributeMsgs.RequestUseReset extends notifyMsgs.NotifyObject
	var RequestUseReset=(function(_super){
		function RequestUseReset(){
			this.resetType=NaN;
			RequestUseReset.__super.call(this);
			this.method=3062;
		}

		__class(RequestUseReset,'notifyMsgs.attributeMsgs.RequestUseReset',_super);
		var __proto=RequestUseReset.prototype;
		__proto.clear=function(){
			this.resetType=0;
			return _super.prototype.clear.call(this);
		}

		return RequestUseReset;
	})(NotifyObject)


	/**
	*当前属性点
	*@author dongketao
	*/
	//class notifyMsgs.attributeMsgs.ResponseAttPoint extends notifyMsgs.NotifyObject
	var ResponseAttPoint=(function(_super){
		function ResponseAttPoint(){
			this.useResult=NaN;
			this.attpData=null;
			ResponseAttPoint.__super.call(this);
			this.method=30053;
		}

		__class(ResponseAttPoint,'notifyMsgs.attributeMsgs.ResponseAttPoint',_super);
		var __proto=ResponseAttPoint.prototype;
		__proto.clear=function(){
			this.useResult=0;
			this.attpData=null;
			return _super.prototype.clear.call(this);
		}

		return ResponseAttPoint;
	})(NotifyObject)


	/**
	*升级英雄结果
	*@author dongketao
	*/
	//class notifyMsgs.attributeMsgs.ResponseUpgradeHero extends notifyMsgs.NotifyObject
	var ResponseUpgradeHero=(function(_super){
		function ResponseUpgradeHero(){
			this.itemId=NaN;
			this.upgradeResult=false;
			ResponseUpgradeHero.__super.call(this);
			this.method=30054;
		}

		__class(ResponseUpgradeHero,'notifyMsgs.attributeMsgs.ResponseUpgradeHero',_super);
		var __proto=ResponseUpgradeHero.prototype;
		__proto.clear=function(){
			this.itemId=0;
			this.upgradeResult=false;
			return _super.prototype.clear.call(this);
		}

		return ResponseUpgradeHero;
	})(NotifyObject)


	/**
	*...
	*@author Chen Gong
	*/
	//class notifyMsgs.ClientRequestFragmentExchange extends notifyMsgs.NotifyObject
	var ClientRequestFragmentExchange=(function(_super){
		function ClientRequestFragmentExchange(){
			this.fragmentID=NaN;
			this.itemID=NaN;
			this.itemNum=0;
			this.buyChannel=0;
			ClientRequestFragmentExchange.__super.call(this);
			this.method=3025;
		}

		__class(ClientRequestFragmentExchange,'notifyMsgs.ClientRequestFragmentExchange',_super);
		ClientRequestFragmentExchange.BUYCHANNEL_0=0;
		ClientRequestFragmentExchange.BUYCHANNEL_1=1;
		ClientRequestFragmentExchange.BUYCHANNEL_2=2;
		ClientRequestFragmentExchange.BUYCHANNEL_3=3;
		return ClientRequestFragmentExchange;
	})(NotifyObject)


	/**
	*...
	*@author ...
	*/
	//class notifyMsgs.ExitClick extends notifyMsgs.NotifyObject
	var ExitClick=(function(_super){
		function ExitClick(){
			this.userid=NaN;
			this.roomid=NaN;
			ExitClick.__super.call(this);
			this.method=3005;
		}

		__class(ExitClick,'notifyMsgs.ExitClick',_super);
		return ExitClick;
	})(NotifyObject)


	/**
	*...
	*@author ...
	*/
	//class notifyMsgs.fbAdsMsgs.RequestFbAds extends notifyMsgs.NotifyObject
	var RequestFbAds=(function(_super){
		function RequestFbAds(){
			RequestFbAds.__super.call(this);
			this.method=3113;
		}

		__class(RequestFbAds,'notifyMsgs.fbAdsMsgs.RequestFbAds',_super);
		return RequestFbAds;
	})(NotifyObject)


	/**
	*...
	*@author Chen Gong
	*/
	//class notifyMsgs.jackpot.request.RequestJackpot extends notifyMsgs.NotifyObject
	var RequestJackpot=(function(_super){
		function RequestJackpot(){
			this.buyType=0;
			RequestJackpot.__super.call(this);
			this.method=3095;
		}

		__class(RequestJackpot,'notifyMsgs.jackpot.request.RequestJackpot',_super);
		return RequestJackpot;
	})(NotifyObject)


	/**
	*...
	*@author Chen Gong
	*/
	//class notifyMsgs.jackpot.response.ResponseJackpot extends notifyMsgs.NotifyObject
	var ResponseJackpot=(function(_super){
		function ResponseJackpot(){
			this.index=null;
			this.response=0;
			this.luckyPoint=0;
			this.buyTimes=0;
			ResponseJackpot.__super.call(this);
			this.method=30083;
		}

		__class(ResponseJackpot,'notifyMsgs.jackpot.response.ResponseJackpot',_super);
		ResponseJackpot.SUCCESS=1;
		ResponseJackpot.NOT_ENOUGH_DIAMOND=-1;
		ResponseJackpot.INVALID_BUYTYPE=-2;
		return ResponseJackpot;
	})(NotifyObject)


	/**
	*<code>TimeLine</code> 是一个用来创建时间轴动画的类。
	*/
	//class laya.utils.TimeLine extends laya.events.EventDispatcher
	var TimeLine=(function(_super){
		var tweenData;
		function TimeLine(){
			this._labelDic=null;
			this._tweenDic={};
			this._tweenDataList=[];
			this._endTweenDataList=null;
			this._currTime=0;
			this._lastTime=0;
			this._startTime=0;
			this._index=0;
			this._gidIndex=0;
			this._firstTweenDic={};
			this._startTimeSort=false;
			this._endTimeSort=false;
			this._loopKey=false;
			this.scale=1;
			this._frameRate=60;
			this._frameIndex=0;
			this._total=0;
			TimeLine.__super.call(this);
		}

		__class(TimeLine,'laya.utils.TimeLine',_super);
		var __proto=TimeLine.prototype;
		/**
		*控制一个对象，从当前点移动到目标点。
		*@param target 要控制的对象。
		*@param props 要控制对象的属性。
		*@param duration 对象TWEEN的时间。
		*@param ease 缓动类型
		*@param offset 相对于上一个对象，偏移多长时间（单位：毫秒）。
		*/
		__proto.to=function(target,props,duration,ease,offset){
			(offset===void 0)&& (offset=0);
			return this._create(target,props,duration,ease,offset,true);
		}

		/**
		*从 props 属性，缓动到当前状态。
		*@param target target 目标对象(即将更改属性值的对象)
		*@param props 要控制对象的属性
		*@param duration 对象TWEEN的时间
		*@param ease 缓动类型
		*@param offset 相对于上一个对象，偏移多长时间（单位：毫秒）
		*/
		__proto.from=function(target,props,duration,ease,offset){
			(offset===void 0)&& (offset=0);
			return this._create(target,props,duration,ease,offset,false);
		}

		/**@private */
		__proto._create=function(target,props,duration,ease,offset,isTo){
			var tTweenData=new tweenData();
			tTweenData.isTo=isTo;
			tTweenData.type=0;
			tTweenData.target=target;
			tTweenData.duration=duration;
			tTweenData.data=props;
			tTweenData.startTime=this._startTime+offset;
			tTweenData.endTime=tTweenData.startTime+tTweenData.duration;
			tTweenData.ease=ease;
			this._startTime=Math.max(tTweenData.endTime,this._startTime);
			this._tweenDataList.push(tTweenData);
			this._startTimeSort=true;
			this._endTimeSort=true;
			return this;
		}

		/**
		*在时间队列中加入一个标签。
		*@param label 标签名称。
		*@param offset 标签相对于上个动画的偏移时间(单位：毫秒)。
		*/
		__proto.addLabel=function(label,offset){
			var tTweenData=new tweenData();
			tTweenData.type=1;
			tTweenData.data=label;
			tTweenData.endTime=tTweenData.startTime=this._startTime+offset;
			this._labelDic || (this._labelDic={});
			this._labelDic[label]=tTweenData;
			this._tweenDataList.push(tTweenData);
			return this;
		}

		/**
		*移除指定的标签
		*@param label
		*/
		__proto.removeLabel=function(label){
			if (this._labelDic && this._labelDic[label]){
				var tTweenData=this._labelDic[label];
				if (tTweenData){
					var tIndex=this._tweenDataList.indexOf(tTweenData);
					if (tIndex >-1){
						this._tweenDataList.splice(tIndex,1);
					}
				}
				delete this._labelDic[label];
			}
		}

		/**
		*动画从整个动画的某一时间开始。
		*@param time(单位：毫秒)。
		*/
		__proto.gotoTime=function(time){
			if (this._tweenDataList==null || this._tweenDataList.length==0)return;
			var tTween;
			var tObject;
			for (var p in this._firstTweenDic){
				tObject=this._firstTweenDic[p];
				if (tObject){
					for (var tDataP in tObject){
						if (tObject.diyTarget.hasOwnProperty(tDataP)){
							tObject.diyTarget[tDataP]=tObject[tDataP];
						}
					}
				}
			}
			for (p in this._tweenDic){
				tTween=this._tweenDic[p];
				tTween.clear();
				delete this._tweenDic[p];
			}
			this._index=0;
			this._gidIndex=0;
			this._currTime=time;
			this._lastTime=Browser.now();
			var tTweenDataCopyList;
			if (this._endTweenDataList==null || this._endTimeSort){
				this._endTimeSort=false;
				this._endTweenDataList=tTweenDataCopyList=this._tweenDataList.concat();
				function Compare (paraA,paraB){
					if (paraA.endTime > paraB.endTime){
						return 1;
						}else if (paraA.endTime < paraB.endTime){
						return-1;
						}else {
						return 0;
					}
				}
				tTweenDataCopyList.sort(Compare);
				}else {
				tTweenDataCopyList=this._endTweenDataList
			};
			var tTweenData;
			for (var i=0,n=tTweenDataCopyList.length;i < n;i++){
				tTweenData=tTweenDataCopyList[i];
				if (tTweenData.type==0){
					if (time >=tTweenData.endTime){
						this._index=Math.max(this._index,i+1);
						var props=tTweenData.data;
						for (var tP in props){
							if (tTweenData.isTo){
								tTweenData.target[tP]=props[tP];
							}
						}
						}else {
						break ;
					}
				}
			}
			for (i=0,n=this._tweenDataList.length;i < n;i++){
				tTweenData=this._tweenDataList[i];
				if (tTweenData.type==0){
					if (time >=tTweenData.startTime && time < tTweenData.endTime){
						this._index=Math.max(this._index,i+1);
						this._gidIndex++;
						tTween=Pool.getItemByClass("tween",Tween);
						tTween._create(tTweenData.target,tTweenData.data,tTweenData.duration,tTweenData.ease,Handler.create(this,this._animComplete,[this._gidIndex]),0,false,tTweenData.isTo,true,false);
						tTween.setStartTime(this._currTime-(time-tTweenData.startTime));
						tTween._updateEase(this._currTime);
						tTween.gid=this._gidIndex;
						this._tweenDic[this._gidIndex]=tTween;
					}
				}
			}
		}

		/**
		*从指定的标签开始播。
		*@param Label 标签名。
		*/
		__proto.gotoLabel=function(Label){
			if (this._labelDic==null)return;
			var tLabelData=this._labelDic[Label];
			if (tLabelData)this.gotoTime(tLabelData.startTime);
		}

		/**
		*暂停整个动画。
		*/
		__proto.pause=function(){
			Laya.timer.clear(this,this._update);
		}

		/**
		*恢复暂停动画的播放。
		*/
		__proto.resume=function(){
			this.play(this._currTime,this._loopKey);
		}

		/**
		*播放动画。
		*@param timeOrLabel 开启播放的时间点或标签名。
		*@param loop 是否循环播放。
		*/
		__proto.play=function(timeOrLabel,loop){
			(timeOrLabel===void 0)&& (timeOrLabel=0);
			(loop===void 0)&& (loop=false);
			if (!this._tweenDataList)return;
			if (this._startTimeSort){
				this._startTimeSort=false;
				function Compare (paraA,paraB){
					if (paraA.startTime > paraB.startTime){
						return 1;
						}else if (paraA.startTime < paraB.startTime){
						return-1;
						}else {
						return 0;
					}
				}
				this._tweenDataList.sort(Compare);
				for (var i=0,n=this._tweenDataList.length;i < n;i++){
					var tTweenData=this._tweenDataList[i];
					if (tTweenData !=null && tTweenData.type==0){
						var tTarget=tTweenData.target;
						var gid=(tTarget.$_GID || (tTarget.$_GID=Utils$2.getGID()));
						var tSrcData=null;
						if (this._firstTweenDic[gid]==null){
							tSrcData={};
							tSrcData.diyTarget=tTarget;
							this._firstTweenDic[gid]=tSrcData;
							}else {
							tSrcData=this._firstTweenDic[gid];
						}
						for (var p in tTweenData.data){
							if (tSrcData[p]==null){
								tSrcData[p]=tTarget[p];
							}
						}
					}
				}
			}
			if ((typeof timeOrLabel=='string')){
				this.gotoLabel(timeOrLabel);
				}else {
				this.gotoTime(timeOrLabel);
			}
			this._loopKey=loop;
			this._lastTime=Browser.now();
			Laya.timer.frameLoop(1,this,this._update);
		}

		/**
		*更新当前动画。
		*/
		__proto._update=function(){
			if (this._currTime >=this._startTime){
				if (this._loopKey){
					this._complete();
					if (!this._tweenDataList)return;
					this.gotoTime(0);
					}else {
					for (var p in this._tweenDic){
						tTween=this._tweenDic[p];
						tTween.complete();
					}
					this._complete();
					this.pause();
					return;
				}
			};
			var tNow=Browser.now();
			var tFrameTime=tNow-this._lastTime;
			var tCurrTime=this._currTime+=tFrameTime *this.scale;
			this._lastTime=tNow;
			for (p in this._tweenDic){
				tTween=this._tweenDic[p];
				tTween._updateEase(tCurrTime);
			};
			var tTween;
			if (this._tweenDataList.length !=0 && this._index < this._tweenDataList.length){
				var tTweenData=this._tweenDataList[this._index];
				if (tCurrTime >=tTweenData.startTime){
					this._index++;
					if (tTweenData.type==0){
						this._gidIndex++;
						tTween=Pool.getItemByClass("tween",Tween);
						tTween._create(tTweenData.target,tTweenData.data,tTweenData.duration,tTweenData.ease,new Handler(this,this._animComplete,[this._gidIndex]),0,false,tTweenData.isTo,true,false);
						tTween.setStartTime(tCurrTime);
						tTween.gid=this._gidIndex;
						this._tweenDic[this._gidIndex]=tTween;
						tTween._updateEase(tCurrTime);
						}else {
						this.event("label",tTweenData.data);
					}
				}
			}
		}

		/**
		*指定的动画索引处的动画播放完成后，把此动画从列表中删除。
		*@param index
		*/
		__proto._animComplete=function(index){
			var tTween=this._tweenDic[index];
			if (tTween)delete this._tweenDic[index];
		}

		/**@private */
		__proto._complete=function(){
			this.event("complete");
		}

		/**
		*重置所有对象，复用对象的时候使用。
		*/
		__proto.reset=function(){
			var p;
			if (this._labelDic){
				for (p in this._labelDic){
					delete this._labelDic[p];
				}
			};
			var tTween;
			for (p in this._tweenDic){
				tTween=this._tweenDic[p];
				tTween.clear();
				delete this._tweenDic[p];
			}
			for (p in this._firstTweenDic){
				delete this._firstTweenDic[p];
			}
			this._endTweenDataList=null;
			this._tweenDataList.length=0;
			this._currTime=0;
			this._lastTime=0;
			this._startTime=0;
			this._index=0;
			this._gidIndex=0;
			this.scale=1;
			Laya.timer.clear(this,this._update);
		}

		/**
		*彻底销毁此对象。
		*/
		__proto.destroy=function(){
			this.reset();
			this._labelDic=null;
			this._tweenDic=null;
			this._tweenDataList=null;
			this._firstTweenDic=null;
		}

		/**
		*@private
		*设置帧索引
		*/
		/**
		*@private
		*得到帧索引
		*/
		__getset(0,__proto,'index',function(){
			return this._frameIndex;
			},function(value){
			this._frameIndex=value;
			this.gotoTime(this._frameIndex / this._frameRate *1000);
		});

		/**
		*得到总帧数。
		*/
		__getset(0,__proto,'total',function(){
			this._total=Math.floor(this._startTime / 1000 *this._frameRate);
			return this._total;
		});

		TimeLine.to=function(target,props,duration,ease,offset){
			(offset===void 0)&& (offset=0);
			return (new TimeLine()).to(target,props,duration,ease,offset);
		}

		TimeLine.from=function(target,props,duration,ease,offset){
			(offset===void 0)&& (offset=0);
			return (new TimeLine()).from(target,props,duration,ease,offset);
		}

		TimeLine.__init$=function(){
			//class tweenData
			tweenData=(function(){
				function tweenData(){
					this.type=0;
					this.isTo=true;
					this.startTime=NaN;
					this.endTime=NaN;
					this.target=null;
					this.duration=NaN;
					this.ease=null;
					this.data=null;
				}
				__class(tweenData,'');
				return tweenData;
			})()
		}

		return TimeLine;
	})(EventDispatcher)


	/**
	*...
	*@author ...
	*/
	//class notifyMsgs.ladderMsgs.RequestCancelLadderMatch extends notifyMsgs.NotifyObject
	var RequestCancelLadderMatch=(function(_super){
		function RequestCancelLadderMatch(){
			RequestCancelLadderMatch.__super.call(this);
			this.method=3111;
		}

		__class(RequestCancelLadderMatch,'notifyMsgs.ladderMsgs.RequestCancelLadderMatch',_super);
		return RequestCancelLadderMatch;
	})(NotifyObject)


	/**
	*...
	*@author ...
	*/
	//class notifyMsgs.ladderMsgs.ResponseLadderReTeam extends notifyMsgs.NotifyObject
	var ResponseLadderReTeam=(function(_super){
		function ResponseLadderReTeam(){
			this.ladderTeamUids=[];
			ResponseLadderReTeam.__super.call(this);
			this.method=30097;
		}

		__class(ResponseLadderReTeam,'notifyMsgs.ladderMsgs.ResponseLadderReTeam',_super);
		var __proto=ResponseLadderReTeam.prototype;
		__proto.clear=function(){
			this.ladderTeamUids.length=0;
			return _super.prototype.clear.call(this);
		}

		return ResponseLadderReTeam;
	})(NotifyObject)


	/**
	*...
	*@author ...
	*/
	//class notifyMsgs.libaoMsgs.RequestOpenLibao extends notifyMsgs.NotifyObject
	var RequestOpenLibao=(function(_super){
		function RequestOpenLibao(){
			this.libaoId=0;
			RequestOpenLibao.__super.call(this);
			this.method=3109;
		}

		__class(RequestOpenLibao,'notifyMsgs.libaoMsgs.RequestOpenLibao',_super);
		return RequestOpenLibao;
	})(NotifyObject)


	/**
	*请求点赞
	*@author dongketao
	*/
	//class notifyMsgs.likeMsgs.RequestLikeUser extends notifyMsgs.NotifyObject
	var RequestLikeUser=(function(_super){
		function RequestLikeUser(){
			this.beLikeUserId=0;
			RequestLikeUser.__super.call(this);
			this.method=3057;
		}

		__class(RequestLikeUser,'notifyMsgs.likeMsgs.RequestLikeUser',_super);
		var __proto=RequestLikeUser.prototype;
		__proto.clear=function(){
			this.beLikeUserId=0;
			return _super.prototype.clear.call(this);
		}

		return RequestLikeUser;
	})(NotifyObject)


	/**
	*...
	*@author dkt
	*/
	//class notifyMsgs.matchMsgs.RequestMatch extends notifyMsgs.NotifyObject
	var RequestMatch=(function(_super){
		function RequestMatch(){
			this.roomtype=NaN;
			RequestMatch.__super.call(this);
			this.method=3099;
		}

		__class(RequestMatch,'notifyMsgs.matchMsgs.RequestMatch',_super);
		var __proto=RequestMatch.prototype;
		__proto.clear=function(){
			this.roomtype=0;
			return _super.prototype.clear.call(this);
		}

		return RequestMatch;
	})(NotifyObject)


	/**
	*请求
	*...
	*@author dkt
	*/
	//class notifyMsgs.midasMsgs.RequestMidasMoney extends notifyMsgs.NotifyObject
	var RequestMidasMoney=(function(_super){
		function RequestMidasMoney(){
			RequestMidasMoney.__super.call(this);
			this.method=3103;
		}

		__class(RequestMidasMoney,'notifyMsgs.midasMsgs.RequestMidasMoney',_super);
		var __proto=RequestMidasMoney.prototype;
		__proto.clear=function(){
			return _super.prototype.clear.call(this);
		}

		return RequestMidasMoney;
	})(NotifyObject)


	/**
	*...
	*@author ...
	*/
	//class notifyMsgs.RequestItemsCheck extends notifyMsgs.NotifyObject
	var RequestItemsCheck=(function(_super){
		function RequestItemsCheck(){
			RequestItemsCheck.__super.call(this);
			this.method=3014;
		}

		__class(RequestItemsCheck,'notifyMsgs.RequestItemsCheck',_super);
		return RequestItemsCheck;
	})(NotifyObject)


	/**
	*...
	*@author Chen Gong
	*/
	//class notifyMsgs.RequestNewBieEnd extends notifyMsgs.NotifyObject
	var RequestNewBieEnd=(function(_super){
		function RequestNewBieEnd(){
			RequestNewBieEnd.__super.call(this);
			this.method=3034;
		}

		__class(RequestNewBieEnd,'notifyMsgs.RequestNewBieEnd',_super);
		return RequestNewBieEnd;
	})(NotifyObject)


	/**
	*...
	*@author Chen Gong
	*/
	//class notifyMsgs.RequestNewUserEnter extends notifyMsgs.NotifyObject
	var RequestNewUserEnter=(function(_super){
		function RequestNewUserEnter(){
			RequestNewUserEnter.__super.call(this);
			this.method=3029;
		}

		__class(RequestNewUserEnter,'notifyMsgs.RequestNewUserEnter',_super);
		return RequestNewUserEnter;
	})(NotifyObject)


	/**
	*通用的请求消息，数据结构不确定
	*...
	*@author ...
	*/
	//class notifyMsgs.RequestNormal extends notifyMsgs.NotifyObject
	var RequestNormal=(function(_super){
		function RequestNormal(){
			this.data=null;
			RequestNormal.__super.call(this);
		}

		__class(RequestNormal,'notifyMsgs.RequestNormal',_super);
		return RequestNormal;
	})(NotifyObject)


	/**
	*...
	*@author ...
	*/
	//class notifyMsgs.RequestSaveHistory extends notifyMsgs.NotifyObject
	var RequestSaveHistory=(function(_super){
		function RequestSaveHistory(){
			this.matchHistory=null;
			RequestSaveHistory.__super.call(this);
			this.method=3112;
		}

		__class(RequestSaveHistory,'notifyMsgs.RequestSaveHistory',_super);
		var __proto=RequestSaveHistory.prototype;
		__proto.clear=function(){
			this.matchHistory=null;
			return _super.prototype.clear.call(this);
		}

		return RequestSaveHistory;
	})(NotifyObject)


	/**
	*...
	*@author Chen Gong
	*/
	//class notifyMsgs.ResponseDailyRequestsData extends notifyMsgs.NotifyObject
	var ResponseDailyRequestsData=(function(_super){
		function ResponseDailyRequestsData(){
			this.activeDayNum=0;
			this.activeWeekNum=0;
			this.dailyRequests=null;
			this.award=[];
			ResponseDailyRequestsData.__super.call(this);
			this.method=30001;
		}

		__class(ResponseDailyRequestsData,'notifyMsgs.ResponseDailyRequestsData',_super);
		var __proto=ResponseDailyRequestsData.prototype;
		__proto.clear=function(){
			this.dailyRequests=null;
			return _super.prototype.clear.call(this);
		}

		return ResponseDailyRequestsData;
	})(NotifyObject)


	/**
	*每日任务所有任务
	*@author ...
	*/
	//class notifyMsgs.ResponseUpdateAllTask extends notifyMsgs.NotifyObject
	var ResponseUpdateAllTask=(function(_super){
		function ResponseUpdateAllTask(){
			this.activeDayNum=0;
			this.activeWeekNum=0;
			this.allTask=null;
			this.weekRequests=null;
			ResponseUpdateAllTask.__super.call(this);
			this.method=30002;
		}

		__class(ResponseUpdateAllTask,'notifyMsgs.ResponseUpdateAllTask',_super);
		var __proto=ResponseUpdateAllTask.prototype;
		__proto.clear=function(){
			this.allTask=null;
			return _super.prototype.clear.call(this);
		}

		return ResponseUpdateAllTask;
	})(NotifyObject)


	/**
	*...
	*@author Chen Gong
	*/
	//class notifyMsgs.returnPlayerMsgs.RequestReturnedPlayer extends notifyMsgs.NotifyObject
	var RequestReturnedPlayer=(function(_super){
		function RequestReturnedPlayer(){
			this.callbackUserId=0;
			RequestReturnedPlayer.__super.call(this);
			this.method=3091;
		}

		__class(RequestReturnedPlayer,'notifyMsgs.returnPlayerMsgs.RequestReturnedPlayer',_super);
		return RequestReturnedPlayer;
	})(NotifyObject)


	/**
	*...
	*@author Chen Gong
	*/
	//class notifyMsgs.ServerNotifyNewUserEnter extends notifyMsgs.NotifyObject
	var ServerNotifyNewUserEnter=(function(_super){
		function ServerNotifyNewUserEnter(){
			this.step=0;
			this.serverTime=0;
			this.hasInGame=0;
			ServerNotifyNewUserEnter.__super.call(this);
			this.method=30018;
		}

		__class(ServerNotifyNewUserEnter,'notifyMsgs.ServerNotifyNewUserEnter',_super);
		var __proto=ServerNotifyNewUserEnter.prototype;
		__proto.clear=function(){
			this.step=0;
			this.serverTime=0;
			this.hasInGame=0;
			return _super.prototype.clear.call(this);
		}

		return ServerNotifyNewUserEnter;
	})(NotifyObject)


	/**
	*...
	*@author Chen Gong
	*/
	//class notifyMsgs.shareMsgs.RequestAddToDesktop extends notifyMsgs.NotifyObject
	var RequestAddToDesktop=(function(_super){
		function RequestAddToDesktop(){
			RequestAddToDesktop.__super.call(this);
			this.method=3054;
		}

		__class(RequestAddToDesktop,'notifyMsgs.shareMsgs.RequestAddToDesktop',_super);
		return RequestAddToDesktop;
	})(NotifyObject)


	/**
	*...
	*@author ...
	*/
	//class notifyMsgs.shareMsgs.RequestDailyShareAward extends notifyMsgs.NotifyObject
	var RequestDailyShareAward=(function(_super){
		function RequestDailyShareAward(){
			RequestDailyShareAward.__super.call(this);
			this.method=3102;
		}

		__class(RequestDailyShareAward,'notifyMsgs.shareMsgs.RequestDailyShareAward',_super);
		return RequestDailyShareAward;
	})(NotifyObject)


	/**
	*分享得奖励
	*...
	*@author ...
	*/
	//class notifyMsgs.shareMsgs.RequestReceiveShare extends notifyMsgs.NotifyObject
	var RequestReceiveShare=(function(_super){
		function RequestReceiveShare(){
			RequestReceiveShare.__super.call(this);
			this.method=3039;
		}

		__class(RequestReceiveShare,'notifyMsgs.shareMsgs.RequestReceiveShare',_super);
		return RequestReceiveShare;
	})(NotifyObject)


	/**
	*分享得奖励
	*...
	*@author ...
	*/
	//class notifyMsgs.shareMsgs.RequestShare extends notifyMsgs.NotifyObject
	var RequestShare=(function(_super){
		function RequestShare(){
			this.shareUserId=NaN;
			this.shareType=NaN;
			this.awardIndex=0;
			RequestShare.__super.call(this);
			this.method=3037;
		}

		__class(RequestShare,'notifyMsgs.shareMsgs.RequestShare',_super);
		RequestShare.SHARETYPE_SHARE=1;
		RequestShare.SHARETYPE_CLICK=2;
		return RequestShare;
	})(NotifyObject)


	/**
	*请求分享数据
	*...
	*@author ...
	*/
	//class notifyMsgs.shareMsgs.RequestShareData extends notifyMsgs.NotifyObject
	var RequestShareData=(function(_super){
		function RequestShareData(){
			RequestShareData.__super.call(this);
			this.method=3038;
		}

		__class(RequestShareData,'notifyMsgs.shareMsgs.RequestShareData',_super);
		return RequestShareData;
	})(NotifyObject)


	/**
	*...
	*@author ...
	*/
	//class notifyMsgs.shareMsgs.ResponseDailyShareAward extends notifyMsgs.NotifyObject
	var ResponseDailyShareAward=(function(_super){
		function ResponseDailyShareAward(){
			this.ids=[];
			this.nums=[];
			ResponseDailyShareAward.__super.call(this);
			this.method=30087;
		}

		__class(ResponseDailyShareAward,'notifyMsgs.shareMsgs.ResponseDailyShareAward',_super);
		var __proto=ResponseDailyShareAward.prototype;
		__proto.clear=function(){
			this.ids=[];
			this.nums=[];
			return _super.prototype.clear.call(this);
		}

		return ResponseDailyShareAward;
	})(NotifyObject)


	/**
	*回复分享数据
	*...
	*@author ...
	*/
	//class notifyMsgs.shareMsgs.ResponseShareData extends notifyMsgs.NotifyObject
	var ResponseShareData=(function(_super){
		function ResponseShareData(){
			this.todayGet=0;
			this.everGet=NaN;
			this.nowCanGet=NaN;
			this.whoClicksTheLink=[];
			ResponseShareData.__super.call(this);
			this.method=30031;
		}

		__class(ResponseShareData,'notifyMsgs.shareMsgs.ResponseShareData',_super);
		var __proto=ResponseShareData.prototype;
		__proto.clear=function(){
			this.todayGet=0;
			this.everGet=0;
			this.nowCanGet=0;
			this.whoClicksTheLink=[];
			return _super.prototype.clear.call(this);
		}

		return ResponseShareData;
	})(NotifyObject)


	/**
	*...
	*@author Chen Gong
	*/
	//class notifyMsgs.shopMsgs.ServerResponseFragmentUse extends notifyMsgs.NotifyObject
	var ServerResponseFragmentUse=(function(_super){
		function ServerResponseFragmentUse(){
			this.useReuslt=NaN;
			this.itemID=NaN;
			this.itemNum=0;
			ServerResponseFragmentUse.__super.call(this);
			this.method=30016;
			this.itemNum=1;
		}

		__class(ServerResponseFragmentUse,'notifyMsgs.shopMsgs.ServerResponseFragmentUse',_super);
		return ServerResponseFragmentUse;
	})(NotifyObject)


	/**
	*客户端签到
	*@author dongketao
	*/
	//class notifyMsgs.SignMsgs.RequestSign extends notifyMsgs.NotifyObject
	var RequestSign=(function(_super){
		function RequestSign(){
			this.signId=0;
			RequestSign.__super.call(this);
			this.method=3036;
		}

		__class(RequestSign,'notifyMsgs.SignMsgs.RequestSign',_super);
		var __proto=RequestSign.prototype;
		__proto.clear=function(){
			this.signId=0;
			return _super.prototype.clear.call(this);
		}

		return RequestSign;
	})(NotifyObject)


	/**
	*签到数据请求
	*@author dongketao
	*/
	//class notifyMsgs.SignMsgs.RequestSignData extends notifyMsgs.NotifyObject
	var RequestSignData=(function(_super){
		function RequestSignData(){
			RequestSignData.__super.call(this);
			this.method=3040;
		}

		__class(RequestSignData,'notifyMsgs.SignMsgs.RequestSignData',_super);
		var __proto=RequestSignData.prototype;
		__proto.clear=function(){
			return _super.prototype.clear.call(this);
		}

		return RequestSignData;
	})(NotifyObject)


	/**
	*玩家签到数据
	*@author dongketao
	*/
	//class notifyMsgs.SignMsgs.ResponseSignData extends notifyMsgs.NotifyObject
	var ResponseSignData=(function(_super){
		function ResponseSignData(){
			this.signDatas=null;
			this.popUps=false;
			this.redDot=false;
			this.toUrl="";
			ResponseSignData.__super.call(this);
			this.method=30029;
		}

		__class(ResponseSignData,'notifyMsgs.SignMsgs.ResponseSignData',_super);
		var __proto=ResponseSignData.prototype;
		__proto.clear=function(){
			var _signData;
			for(var $each__signData in this.signDatas){
				_signData=this.signDatas[$each__signData];
				DataPool.recover(_signData);
			}
			this.signDatas=null;
			this.popUps=false;
			this.redDot=false;
			this.toUrl="";
			return _super.prototype.clear.call(this);
		}

		return ResponseSignData;
	})(NotifyObject)


	/**
	*签到结果
	*@author dongketao
	*/
	//class notifyMsgs.SignMsgs.ResponseSignResult extends notifyMsgs.NotifyObject
	var ResponseSignResult=(function(_super){
		function ResponseSignResult(){
			this.signResult=false;
			this.curDay=NaN;
			this.nextHero=null;
			ResponseSignResult.__super.call(this);
			this.method=30030;
		}

		__class(ResponseSignResult,'notifyMsgs.SignMsgs.ResponseSignResult',_super);
		var __proto=ResponseSignResult.prototype;
		__proto.clear=function(){
			this.signResult=false;
			this.curDay=0;
			this.nextHero && DataPool.recover(this.nextHero);
			return _super.prototype.clear.call(this);
		}

		return ResponseSignResult;
	})(NotifyObject)


	/**
	*客户端打开技能界面请求技能数据
	*@author dongketao
	*/
	//class notifyMsgs.skillMsgs.RequestSkillData extends notifyMsgs.NotifyObject
	var RequestSkillData=(function(_super){
		function RequestSkillData(){
			RequestSkillData.__super.call(this);
			this.method=3031;
		}

		__class(RequestSkillData,'notifyMsgs.skillMsgs.RequestSkillData',_super);
		return RequestSkillData;
	})(NotifyObject)


	/**@private **/
	//class laya.wx.mini.MiniLoader extends laya.events.EventDispatcher
	var MiniLoader=(function(_super){
		function MiniLoader(){
			MiniLoader.__super.call(this);
		}

		__class(MiniLoader,'laya.wx.mini.MiniLoader',_super);
		var __proto=MiniLoader.prototype;
		/**
		*@private
		*@param url
		*@param type
		*@param cache
		*@param group
		*@param ignoreCache
		*/
		__proto.load=function(url,type,cache,group,ignoreCache){
			(cache===void 0)&& (cache=true);
			(ignoreCache===void 0)&& (ignoreCache=false);
			var thisLoader=this;
			thisLoader._url=url;
			if (url.indexOf("data:image")===0)thisLoader._type=type="image";
			else {
				thisLoader._type=type || (type=thisLoader.getTypeFromUrl(url));
			}
			thisLoader._cache=cache;
			thisLoader._data=null;
			if (!ignoreCache && Loader.loadedMap[URL.formatURL(url)]){
				thisLoader._data=Loader.loadedMap[URL.formatURL(url)];
				this.event("progress",1);
				this.event("complete",thisLoader._data);
				return;
			}
			if (Loader.parserMap[type] !=null){
				thisLoader._customParse=true;
				if (((Loader.parserMap[type])instanceof laya.utils.Handler ))Loader.parserMap[type].runWith(this);
				else Loader.parserMap[type].call(null,this);
				return;
			};
			var encoding=MiniAdpter.getUrlEncode(url,type);
			var urlType=Utils$2.getFileExtension(url);
			if ((MiniLoader._fileTypeArr.indexOf(urlType)!=-1)){
				MiniAdpter.EnvConfig.load.call(this,url,type,cache,group,ignoreCache);
				}else {
				if(MiniAdpter.isZiYu && MiniFileMgr.ziyuFileData[url]){
					var tempData=MiniFileMgr.ziyuFileData[url];
					thisLoader.onLoaded(tempData);
					return;
				}
				if (!MiniFileMgr.getFileInfo(url)){
					if (MiniFileMgr.isLocalNativeFile(url)){
						MiniFileMgr.read(url,encoding,new Handler(MiniLoader,MiniLoader.onReadNativeCallBack,[encoding,url,type,cache,group,ignoreCache,thisLoader]));
						return;
					}
					url=URL.formatURL(url);
					if (url.indexOf("http://")!=-1 || url.indexOf("https://")!=-1 && !MiniAdpter.AutoCacheDownFile){
						MiniAdpter.EnvConfig.load.call(thisLoader,url,type,cache,group,ignoreCache);
						}else {
						MiniFileMgr.readFile(url,encoding,new Handler(MiniLoader,MiniLoader.onReadNativeCallBack,[encoding,url,type,cache,group,ignoreCache,thisLoader]),url);
					}
					}else {
					var fileObj=MiniFileMgr.getFileInfo(url);
					fileObj.encoding=fileObj.encoding==null ? "ascii" :fileObj.encoding;
					MiniFileMgr.readFile(url,fileObj.encoding,new Handler(MiniLoader,MiniLoader.onReadNativeCallBack,[encoding,url,type,cache,group,ignoreCache,thisLoader]),url);
				}
			}
		}

		MiniLoader.onReadNativeCallBack=function(encoding,url,type,cache,group,ignoreCache,thisLoader,errorCode,data){
			(cache===void 0)&& (cache=true);
			(ignoreCache===void 0)&& (ignoreCache=false);
			(errorCode===void 0)&& (errorCode=0);
			if (!errorCode){
				var tempData;
				if (type=="json" || type=="atlas"){
					tempData=MiniAdpter.getJson(data.data);
					}else if (type=="xml"){
					tempData=Utils$2.parseXMLFromString(data.data);
					}else {
					tempData=data.data;
				}
				if(!MiniAdpter.isZiYu &&MiniAdpter.isPosMsgYu && type !="arraybuffer"){
					wx.postMessage({url:url,data:tempData,isLoad:"filedata"});
				}
				thisLoader.onLoaded(tempData);
				}else if (errorCode==1){
				MiniAdpter.EnvConfig.load.call(thisLoader,url,type,cache,group,ignoreCache);
			}
		}

		__static(MiniLoader,
		['_fileTypeArr',function(){return this._fileTypeArr=['png','jpg','bmp','jpeg','gif'];}
		]);
		return MiniLoader;
	})(EventDispatcher)


	/**@private **/
	//class laya.wx.mini.MiniSound extends laya.events.EventDispatcher
	var MiniSound=(function(_super){
		function MiniSound(){
			this._sound=null;
			this.url=null;
			this.loaded=false;
			this.readyUrl=null;
			MiniSound.__super.call(this);
		}

		__class(MiniSound,'laya.wx.mini.MiniSound',_super);
		var __proto=MiniSound.prototype;
		/**
		*@private
		*加载声音。
		*@param url 地址。
		*
		*/
		__proto.load=function(url){
			url=URL.formatURL(url);
			this.url=url;
			this.readyUrl=url;
			if (MiniSound._audioCache[this.readyUrl]){
				this.event("complete");
				return;
			}
			if(MiniAdpter.autoCacheFile&&MiniFileMgr.getFileInfo(url)){
				this.onDownLoadCallBack(url,0);
				}else{
				if(!MiniAdpter.autoCacheFile){
					this.onDownLoadCallBack(url,0);
					}else{
					MiniFileMgr.downOtherFiles(url,Handler.create(this,this.onDownLoadCallBack,[url]),url);
				}
			}
		}

		/**@private **/
		__proto.onDownLoadCallBack=function(sourceUrl,errorCode){
			if (!errorCode){
				var fileNativeUrl;
				if(MiniAdpter.autoCacheFile){
					var fileObj=MiniFileMgr.getFileInfo(sourceUrl);
					var fileMd5Name=fileObj.md5;
					fileNativeUrl=MiniFileMgr.getFileNativePath(fileMd5Name);
					this._sound=MiniSound._createSound();
					this._sound.src=this.url=fileNativeUrl;
					}else{
					this._sound=MiniSound._createSound();
					this._sound.src=sourceUrl;
				}
				this._sound.onCanplay(MiniSound.bindToThis(this.onCanPlay,this));
				this._sound.onError(MiniSound.bindToThis(this.onError,this));
				}else{
				this.event("error");
			}
		}

		/**@private **/
		__proto.onError=function(error){
			try{
				console.log("-----1---------------minisound-----id:"+MiniSound._id);
				console.log(error);
			}
			catch(error){
				console.log("-----2---------------minisound-----id:"+MiniSound._id);
				console.log(error);
			}
			this.event("error");
			this._sound.offError(null);
		}

		/**@private **/
		__proto.onCanPlay=function(){
			this.loaded=true;
			this.event("complete");
			MiniSound._audioCache[this.readyUrl]=this;
			this._sound.offCanplay(null);
		}

		/**
		*@private
		*播放声音。
		*@param startTime 开始时间,单位秒
		*@param loops 循环次数,0表示一直循环
		*@return 声道 SoundChannel 对象。
		*
		*/
		__proto.play=function(startTime,loops){
			(startTime===void 0)&& (startTime=0);
			(loops===void 0)&& (loops=0);
			var tSound;
			if (this.url==SoundManager._tMusic){
				if (!MiniSound._musicAudio)MiniSound._musicAudio=MiniSound._createSound();
				tSound=MiniSound._musicAudio;
				}else {
				if(MiniSound._audioCache[this.readyUrl]){
					tSound=MiniSound._audioCache[this.readyUrl]._sound;
					}else{
					tSound=MiniSound._createSound();
				}
			}
			if(MiniAdpter.autoCacheFile&&MiniFileMgr.getFileInfo(this.url)){
				var fileNativeUrl;
				var fileObj=MiniFileMgr.getFileInfo(this.url);
				var fileMd5Name=fileObj.md5;
				tSound.src=this.url=MiniFileMgr.getFileNativePath(fileMd5Name);
				}else{
				tSound.src=this.url;
			};
			var channel=new MiniSoundChannel(tSound,this);
			channel.url=this.url;
			channel.loops=loops;
			channel.loop=(loops===0 ? true :false);
			channel.startTime=startTime;
			channel.play();
			SoundManager.addChannel(channel);
			return channel;
		}

		/**
		*@private
		*释放声音资源。
		*
		*/
		__proto.dispose=function(){
			var ad=MiniSound._audioCache[this.readyUrl];
			if (ad){
				ad.src="";
				if(ad._sound){
					ad._sound.destroy();
					ad._sound=null;
					ad=null;
				}
				delete MiniSound._audioCache[this.readyUrl];
			}
		}

		/**
		*@private
		*获取总时间。
		*/
		__getset(0,__proto,'duration',function(){
			return this._sound.duration;
		});

		MiniSound._createSound=function(){
			MiniSound._id++;
			return MiniAdpter.window.wx.createInnerAudioContext();
		}

		MiniSound.bindToThis=function(fun,scope){
			var rst=fun;
			rst=fun.bind(scope);;
			return rst;
		}

		MiniSound._musicAudio=null
		MiniSound._id=0;
		MiniSound._audioCache={};
		return MiniSound;
	})(EventDispatcher)


	/**
	*...
	*@author Chen Gong
	*/
	//class notifyMsgs.snowHouseMsgs.request.RequestOpenSTBox extends notifyMsgs.NotifyObject
	var RequestOpenSTBox=(function(_super){
		function RequestOpenSTBox(){
			this.isShare=false;
			RequestOpenSTBox.__super.call(this);
			this.method=3078;
		}

		__class(RequestOpenSTBox,'notifyMsgs.snowHouseMsgs.request.RequestOpenSTBox',_super);
		return RequestOpenSTBox;
	})(NotifyObject)


	/**
	*事件派发监听管理类
	*author xiaosong
	*@date 2017-02-26
	*/
	//class Utils.MsgMgr extends laya.events.EventDispatcher
	var MsgMgr=(function(_super){
		function MsgMgr(){
			this._currentRank1UI=null;
			this._currentRank2UI=null;
			this._currentQunRankUI=null;
			MsgMgr.__super.call(this);
		}

		__class(MsgMgr,'Utils.MsgMgr',_super);
		var __proto=MsgMgr.prototype;
		/**初始化消息监听**/
		__proto.init=function(){
			if(MiniAdpter.isZiYu && MiniAdpter.isPosMsgYu){
				wx.onMessage(function(message){
					if(message['isLoad']=="filedata"){
						MiniFileMgr.ziyuFileData[message.url]=message.data;
						}else if(message['isLoad']=="filenative"){
						if(message.isAdd)
							MiniFileMgr.filesListObj[message.url]=message.data;
						else
						delete MiniFileMgr.filesListObj[message.url];
						}else{
						Utils.MsgMgr.instance.receiveData(message);
					}
				});
			}
		}

		/**
		*初始化消息派发监听
		*/
		__proto.receiveData=function(data){
			console.log("--------------------receiveData------------------------------");
			var type=data.type;
			console.log(data);
			switch(type){
				case MsgMgr.DUANWEI:{
						this.onRenderQunRankList(data);
						break ;
					}
				case MsgMgr.SHAREDRESIZE:{
						sharedCanvas.width=data.width;
						sharedCanvas.height=data.height;
						console.log("-----------------sharedresize----------------------------");
						console.log(data.matrix);
						Laya.stage._canvasTransform=data.matrix;
						break ;
					}
				case MsgMgr.CONFIGDATA:{
						ConfigMgr.segName=data.segName;
						ConfigMgr.duanweiCfgByStar=data.duanweiCfgByStar;
						console.log("--------------------ConfigMgr.segName----------------------");
						console.log(ConfigMgr.segName);
						console.log("--------------------ConfigMgr.duanweiCfgByStar----------------------");
						console.log(ConfigMgr.duanweiCfgByStar);
						break ;
					}
				case MsgMgr.RANK_LIST1:
					console.log("-----------------------RANK_LIST1------------------------------");
					this.onRenderRankList1(data.data);
					break ;
				case MsgMgr.RANK_LIST2:
					console.log("-----------------------RANK_LIST2------------------------------");
					this.onRenderRankList2(data.data);
					break ;
				default :{
						break ;
					}
				}
		}

		/**
		*大排行数据
		*@param openId
		*/
		__proto.onRenderRankList1=function(data){
			if(this._currentQunRankUI){
				this._currentQunRankUI.visible=false;
			}
			if(this._currentRank2UI){
				this._currentRank2UI.visible=false;
			}
			if(this._currentRank1UI){
				this._currentRank1UI.dispose();
				this._currentRank1UI=null;
			}
			this._currentRank1UI=new RankList1View();
			Laya.stage.addChild(this._currentRank1UI);
			this._currentRank1UI.initData(data);
		}

		/**小排行**/
		__proto.onRenderRankList2=function(data){
			if(this._currentQunRankUI){
				this._currentQunRankUI.visible=false;
			}
			if(this._currentRank1UI){
				this._currentRank1UI.visible=false;
			}
			console.log("----------------onRenderRankList2----------------------------");
			if(this._currentRank2UI){
				this._currentRank2UI.dispose();
				this._currentRank2UI=null;
			}
			this._currentRank2UI=new RankList2View();
			Laya.stage.addChild(this._currentRank2UI);
			this._currentRank2UI.initData(data);
		}

		/**
		*群排行
		*@param data
		*/
		__proto.onRenderQunRankList=function(data){
			if(this._currentRank1UI){
				this._currentRank1UI.visible=false;
			}
			if(this._currentRank2UI){
				this._currentRank2UI.visible=false;
			}
			if(this._currentQunRankUI){
				this._currentQunRankUI.dispose();
				this._currentQunRankUI=null;
			}
			console.log("-------------------onRenderQunRankList-------------------------");
			this._currentQunRankUI=new RankListView();
			Laya.stage.addChild(this._currentQunRankUI);
			this._currentQunRankUI.initData(data);
		}

		__getset(1,MsgMgr,'instance',function(){
			return MsgMgr._i=MsgMgr._i|| new MsgMgr();
		},laya.events.EventDispatcher._$SET_instance);

		MsgMgr.postMessage=function(data){
			wx.postMessage(data);
		}

		MsgMgr.addEvent=function(type,caller,listener,arg){
			MsgMgr._i.on(type,caller,listener,arg);
		}

		MsgMgr.removeEvent=function(type,caller,listener){
			MsgMgr._i.off(type,caller,listener);
		}

		MsgMgr.emit=function(type,arg){
			MsgMgr._i.event(type,arg);
		}

		MsgMgr.getNkName=function(names,length,isAll){
			(length===void 0)&& (length=12);
			(isAll===void 0)&& (isAll=false);
			if (!isAll){
				var name="";
				try{
					name=decodeURIComponent(names);
				}
				catch(error){
					name=names;
				}
				return MsgMgr.cutString(name,length);
				}else{
				return "显示组合名字";
			}
		}

		MsgMgr.cutString=function(str,length,type){
			(type===void 0)&& (type=1);
			if(!str)return "";
			var count=0;
			var len=str.length;
			for (var i=0;i < len;i++){
				var code=str.charCodeAt(i);
				count+=(code >=0x4E00 && code <=0x9FA5)?2:1;
				if (count > length)break ;
			}
			if (count <=length)
				return str;
			else {
				if(type==1)return str.substring(0,i-1)+"..";
				else if(type==2)return str.substring(0,i-1);
			}
			return str;
		}

		MsgMgr.PERSONPK="personpk";
		MsgMgr.DUANWEI="duanwei";
		MsgMgr.SHAREDRESIZE="sharedresize";
		MsgMgr.CONFIGDATA="configdata";
		MsgMgr.RANK_LIST1="ranklist1";
		MsgMgr.RANK_LIST2="ranklist2";
		MsgMgr._i=null;
		return MsgMgr;
	})(EventDispatcher)


	/**
	*...
	*@author Chen Gong
	*/
	//class notifyMsgs.systemMsgs.ClientRequestSeasonAward extends notifyMsgs.NotifyObject
	var ClientRequestSeasonAward=(function(_super){
		//可和其它消息合并
		function ClientRequestSeasonAward(){
			ClientRequestSeasonAward.__super.call(this);
			this.method=3020;
		}

		__class(ClientRequestSeasonAward,'notifyMsgs.systemMsgs.ClientRequestSeasonAward',_super);
		return ClientRequestSeasonAward;
	})(NotifyObject)


	/**
	*...
	*@author Chen Gong
	*/
	//class notifyMsgs.systemMsgs.ServerSendAwardList extends notifyMsgs.NotifyObject
	var ServerSendAwardList=(function(_super){
		function ServerSendAwardList(){
			this.awardList=new Object();
			ServerSendAwardList.__super.call(this);
			this.method=30009;
		}

		__class(ServerSendAwardList,'notifyMsgs.systemMsgs.ServerSendAwardList',_super);
		var __proto=ServerSendAwardList.prototype;
		__proto.clear=function(){
			return _super.prototype.clear.call(this);
		}

		return ServerSendAwardList;
	})(NotifyObject)


	/**
	*...
	*@author Chen Gong
	*/
	//class notifyMsgs.systemMsgs.ServerSendAwardResult extends notifyMsgs.NotifyObject
	var ServerSendAwardResult=(function(_super){
		function ServerSendAwardResult(){
			this.key=null;
			this.result=NaN;
			ServerSendAwardResult.__super.call(this);
			this.method=30012;
		}

		__class(ServerSendAwardResult,'notifyMsgs.systemMsgs.ServerSendAwardResult',_super);
		var __proto=ServerSendAwardResult.prototype;
		__proto.clear=function(){
			return _super.prototype.clear.call(this);
		}

		ServerSendAwardResult.ACEEPT=1;
		ServerSendAwardResult.REJECT=0;
		return ServerSendAwardResult;
	})(NotifyObject)


	/**
	*引导相关
	*@author dongketao
	*/
	//class notifyMsgs.tlogMsgs.RequestGuideFlow extends notifyMsgs.NotifyObject
	var RequestGuideFlow=(function(_super){
		function RequestGuideFlow(){
			this.iGuideID=0;
			RequestGuideFlow.__super.call(this);
			this.method=3066;
		}

		__class(RequestGuideFlow,'notifyMsgs.tlogMsgs.RequestGuideFlow',_super);
		var __proto=RequestGuideFlow.prototype;
		__proto.clear=function(){
			this.iGuideID=0;
			return _super.prototype.clear.call(this);
		}

		return RequestGuideFlow;
	})(NotifyObject)


	/**
	*社交相关
	*@author dongketao
	*/
	//class notifyMsgs.tlogMsgs.RequestSnsFlow extends notifyMsgs.NotifyObject
	var RequestSnsFlow=(function(_super){
		function RequestSnsFlow(){
			this.RecNum=NaN;
			this.Count=NaN;
			this.SNSType=NaN;
			this.SNSSubType=NaN;
			RequestSnsFlow.__super.call(this);
			this.method=3065;
		}

		__class(RequestSnsFlow,'notifyMsgs.tlogMsgs.RequestSnsFlow',_super);
		var __proto=RequestSnsFlow.prototype;
		__proto.clear=function(){
			this.RecNum=0;
			this.Count=0;
			this.SNSType=0;
			this.SNSSubType=0;
			return _super.prototype.clear.call(this);
		}

		return RequestSnsFlow;
	})(NotifyObject)


	/**
	*...
	*@author ...
	*/
	//class notifyMsgs.unregisteredUserMsgs.RequestInviteNewUser extends notifyMsgs.NotifyObject
	var RequestInviteNewUser=(function(_super){
		function RequestInviteNewUser(){
			this.whoInviteMe=0;
			RequestInviteNewUser.__super.call(this);
			this.method=3105;
		}

		__class(RequestInviteNewUser,'notifyMsgs.unregisteredUserMsgs.RequestInviteNewUser',_super);
		return RequestInviteNewUser;
	})(NotifyObject)


	/**
	*...
	*@author
	*/
	//class utils.BufferIntervalItem extends utils.BufferItem
	var BufferIntervalItem=(function(_super){
		function BufferIntervalItem(){
			this.interval=0;
			this.preTime=0;
			BufferIntervalItem.__super.call(this);
		}

		__class(BufferIntervalItem,'utils.BufferIntervalItem',_super);
		var __proto=BufferIntervalItem.prototype;
		__proto.update=function(now,callbacks){
			var rs=now >=this.endTime;
			if (now-this.preTime>=this.interval){
				callbacks[this.type] && callbacks[this.type](this.bufferValue,rs?0:1,true,this.type);
				this.preTime=now;
			}
			if (rs && this.preTime !=now){
				callbacks[this.type] && callbacks[this.type](this.bufferValue,0,true,this.type);
				this.preTime=now;
			}
			return rs;
		}

		__proto.recover=function(){
			this.preTime=0;
			_super.prototype.recover.call(this);
		}

		BufferIntervalItem.createBufferItem=function(now,type,d,v,interval){
			var rs=DataPool.getItemByClass(BufferIntervalItem);
			rs.type=type;
			rs.duration=d;
			rs.bufferValue=v;
			rs.interval=interval;
			rs.endTime=now+d;
			rs.preTime=now;
			return rs;
		}

		return BufferIntervalItem;
	})(BufferItem)


	/**
	*...
	*@author 贾艳昭
	*/
	//class laya8.core.backpack.BackpackMessageHandler extends laya8.core.MessageHandlerBase
	var BackpackMessageHandler=(function(_super){
		function BackpackMessageHandler(game){
			BackpackMessageHandler.__super.call(this,game);
		}

		__class(BackpackMessageHandler,'laya8.core.backpack.BackpackMessageHandler',_super);
		var __proto=BackpackMessageHandler.prototype;
		__proto.listBackpacksResult=function(dat){
			this.game.backpack.onListBackpacksResult(dat);
		}

		__proto.unlockCellsResult=function(dat){
			this.game.backpack.onUnlockCellsResult(dat);
		}

		__proto.moveItemResult=function(dat){
			this.game.backpack.onMoveItemResult(dat);
		}

		__proto.useItemResult=function(dat){
			this.game.backpack.onUseItemResult(dat);
		}

		return BackpackMessageHandler;
	})(MessageHandlerBase)


	/**
	*...
	*@author 贾艳昭
	*/
	//class laya8.core.backpack.BackpackMessageSender extends laya8.core.MessageSenderBase
	var BackpackMessageSender=(function(_super){
		function BackpackMessageSender(game){
			BackpackMessageSender.__super.call(this,game);
		}

		__class(BackpackMessageSender,'laya8.core.backpack.BackpackMessageSender',_super);
		var __proto=BackpackMessageSender.prototype;
		__proto.listBackpacks=function(){
			this.game.socket.send(BackpackMessageSender._urlPrefix+'listBackpacks',{});
		}

		__proto.unlockCells=function(backpackId,unlockTo){
			this.game.socket.send(BackpackMessageSender._urlPrefix+'unlockCells',{
				backpackId:backpackId,
				unlockTo:unlockTo
			});
		}

		__proto.moveItem=function(fromBackpackId,toBackpackId,itemStaticId,amount){
			this.game.socket.send(BackpackMessageSender._urlPrefix+'moveItem',{
				fromBackpackId:fromBackpackId,
				toBackpackId:toBackpackId,
				itemStaticId:itemStaticId,
				amount:amount
			});
		}

		__proto.useItem=function(backpackId,itemStaticId,amount){
			this.game.socket.send(BackpackMessageSender._urlPrefix+'useItem',{
				backpackId:backpackId,
				itemStaticId:itemStaticId,
				amount:amount
			});
		}

		BackpackMessageSender._urlPrefix='backpack.';
		return BackpackMessageSender;
	})(MessageSenderBase)


	/**
	*...
	*@author 贾艳昭
	*/
	//class laya8.core.chat.ChatMessageHandler extends laya8.core.MessageHandlerBase
	var ChatMessageHandler=(function(_super){
		function ChatMessageHandler(game){
			ChatMessageHandler.__super.call(this,game);
		}

		__class(ChatMessageHandler,'laya8.core.chat.ChatMessageHandler',_super);
		var __proto=ChatMessageHandler.prototype;
		__proto.said=function(dat){
			this.game.chat.onSaid(dat);
		}

		__proto.getHistoryResult=function(dat){
			this.game.chat.onGotHistoryResult(dat);
		}

		__proto.told=function(dat){
			this.game.chat.onTold(dat);
		}

		__proto.toldToMe=function(dat){
			this.game.chat.onToldToMe(dat);
		}

		return ChatMessageHandler;
	})(MessageHandlerBase)


	/**
	*...
	*@author 贾艳昭
	*/
	//class laya8.core.chat.ChatMessageSender extends laya8.core.MessageSenderBase
	var ChatMessageSender=(function(_super){
		function ChatMessageSender(game){
			ChatMessageSender.__super.call(this,game);
		}

		__class(ChatMessageSender,'laya8.core.chat.ChatMessageSender',_super);
		var __proto=ChatMessageSender.prototype;
		__proto.say=function(msg,channelId){
			this.game.socket.send(ChatMessageSender._urlPrefix+'say',{
				message:msg,
				channelId:channelId
			});
		}

		__proto.getHistory=function(){
			this.game.socket.send(ChatMessageSender._urlPrefix+'getHistory',{
			});
		}

		__proto.tell=function(targetId,message){
			this.game.socket.send(ChatMessageSender._urlPrefix+'tell',{
				targetId:targetId,
				message:message
			});
		}

		ChatMessageSender._urlPrefix='chat.';
		return ChatMessageSender;
	})(MessageSenderBase)


	/**
	*...
	*@author 贾艳昭
	*/
	//class laya8.core.game.GameMessageHandler extends laya8.core.MessageHandlerBase
	var GameMessageHandler=(function(_super){
		function GameMessageHandler(game){
			GameMessageHandler.__super.call(this,game);
		}

		__class(GameMessageHandler,'laya8.core.game.GameMessageHandler',_super);
		var __proto=GameMessageHandler.prototype;
		__proto.onGotRoomTypeList=function(list){
			this.game.onGotRoomTypeList(list);
		}

		__proto.startGame=function(data){
			this.game.startGame(data);
		}

		__proto.onGotRankList=function(data){
			this.game.onGotRankList(data);
		}

		__proto.roomSocketStatus=function(isConnected){
			this.game.roomSocketStatus(isConnected);
		}

		__proto.onGotQRCode=function(data){
			this.game.onGotQRCode(data);
		}

		__proto.onNotify=function(data){
			this.game.onNotify(data);
		}

		__proto.onGotCurrentSeasonDataResult=function(dat){
			this.game.onGotCurrentSeasonDataResult(dat);
		}

		__proto.seasonQueryCurrentDataResult=function(dat){
			this.game.seasonQueryCurrentDataResult(dat);
		}

		__proto.onGameVisibilityChange=function(dat){
			this.game.onGameVisibilityChange(dat.flag,dat.state);
		}

		__proto.basicDataQueried=function(dat){
			this.game.onBasicDataQueried(dat);
		}

		__proto.onReconnect=function(dat){
			this.game.onReconnect(dat);
		}

		__proto.onGotNetworkInfo=function(dat){
			this.game.onGotNetworkInfo(dat);
		}

		__proto.onGotRelation=function(dat){
			this.game.onGotRelation(dat);
		}

		__proto.onSetWXListSubscribeResult=function(dat){
			this.game.onSetWXListSubscribeResult(dat);
		}

		__proto.onGotWXListSubscribe=function(dat){
			this.game.onGotWXListSubscribe(dat);
		}

		__proto.onShareFinish=function(dat){
			this.game.onShareFinish(dat);
		}

		__proto.onError=function(err){
			this.game.onError(err);
		}

		__proto.onPreloadQQBrowserResource=function(rsp){
			this.game.onPreloadQQBrowserResource(rsp);
		}

		__proto.onGotAvailableLoginType=function(dat){
			this.game.onGotAvailableLoginType(dat);
		}

		__proto.onGotWXShareParams=function(dat){
			this.game.onGotWXShareParams(dat);
		}

		__proto.onGotShareOpenid=function(dat){
			this.game.onGotShareOpenid(dat);
		}

		__proto.onGotShareChannel=function(dat){
			this.game.onGotShareChannel(dat);
		}

		__proto.onSentDesktop=function(dat){
			this.game.onSentDesktop(dat);
		}

		__proto.onAddedQQFriend=function(dat){
			this.game.onAddedQQFriend(dat);
		}

		__proto.onShareScreenshot=function(dat){
			this.game.onShareScreenshot(dat);
		}

		__proto.onSwitchToMsgList=function(dat){
			this.game.onSwitchToMsgList(dat);
		}

		__proto.onGotShareInfo=function(dat){
			this.game.onGotShareInfo(dat);
		}

		__proto.onGotInterstitialAdAsync=function(dat){
			this.game.onGotInterstitialAdAsync(dat);
		}

		__proto.onGotRewardedVideoAsync=function(dat){
			this.game.onGotRewardedVideoAsync(dat);
		}

		__proto.onLoginError=function(){
			this.game.onLoginError();
		}

		return GameMessageHandler;
	})(MessageHandlerBase)


	/**
	*...
	*@author 贾艳昭
	*/
	//class laya8.core.game.GameMessageSender extends laya8.core.MessageSenderBase
	var GameMessageSender=(function(_super){
		function GameMessageSender(game){
			this.urlPrefix='game.';
			GameMessageSender.__super.call(this,game);
		}

		__class(GameMessageSender,'laya8.core.game.GameMessageSender',_super);
		var __proto=GameMessageSender.prototype;
		__proto.ready=function(clientVersion){
			this.socket.send(this.urlPrefix+'ready',{
				gameId:this.game.gameId,
				clientVersion:clientVersion
			},false);
		}

		__proto.getRoomTypeList=function(){
			this.socket.send(this.urlPrefix+'getRoomTypeList',{
				gameId:this.game.gameId
			});
		}

		__proto.match=function(roomTypeId,mustNew){
			this.socket.send(this.urlPrefix+'match',{
				gameId:this.game.gameId,
				roomType:roomTypeId,
				mustNew:mustNew
			});
		}

		__proto.getRankList=function(rankListId,cacheTime){
			this.socket.send(this.urlPrefix+'getRankList',{
				gameId:this.game.gameId,
				rankListId:rankListId,
				cacheTime:cacheTime
			});
		}

		__proto.getRoomSocketStatus=function(){
			this.socket.send(this.urlPrefix+'getRoomSocketStatus',{});
		}

		__proto.getQRCode=function(url){
			this.socket.send(this.urlPrefix+'getQRCode',{
				url:url
			});
		}

		__proto.joinRoom=function(roomId,force){
			this.socket.send(this.urlPrefix+'joinRoom',{
				roomId:roomId,
				force:force
			});
		}

		__proto.canJoinRoom=function(roomId,force){
			this.socket.send(this.urlPrefix+'canJoinRoom',{
				roomId:roomId,
				force:force
			});
		}

		__proto.notify=function(obj){
			this.socket.send(this.urlPrefix+'notify',obj);
		}

		__proto.removeSplash=function(){
			this.socket.send(this.urlPrefix+'removeSplash',{});
		}

		__proto.getCurrentSeasonData=function(userId,args){
			var param={};
			for (var i=0;i < args.length;i++){
				param['s'+args[i]]=1;
			}
			this.socket.send(this.urlPrefix+'getCurrentSeasonData',{
				userId:userId,
				query:param
			});
		}

		__proto.queryCurrentData=function(userIds,args){
			this.socket.send(this.urlPrefix+'queryCurrentData',{
				userIds:userIds,
				query:args
			});
		}

		__proto.setWXBasicReport=function(info){
			this.socket.send(this.urlPrefix+'setWXBasicReport',info);
		}

		__proto.setWXReport=function(info){
			this.socket.send(this.urlPrefix+'setWXReport',info);
		}

		__proto.initShareConfig=function(cfg){
			this.socket.send(this.urlPrefix+'initShareConfig',cfg);
		}

		__proto.sendMessageToFriend=function(opts){
			this.socket.send(this.urlPrefix+'sendMessageToFriend',opts);
		}

		__proto.shareMessage=function(info){
			this.socket.send(this.urlPrefix+'shareMessage',info);
		}

		__proto.openUrlWithExtraWebview=function(opts){
			this.socket.send(this.urlPrefix+'openUrlWithExtraWebview',opts);
		}

		__proto.closeWindow=function(){
			this.socket.send(this.urlPrefix+'closeWindow',{},false);
		}

		__proto.sendDesktop=function(opts){
			this.socket.send(this.urlPrefix+'sendDesktop',opts);
		}

		__proto.setCloseWindowConfirmDialogInfo=function(opts){
			this.socket.send(this.urlPrefix+'setCloseWindowConfirmDialogInfo',opts);
		}

		__proto.basicQuery=function(userIds,fields){
			this.socket.send(this.urlPrefix+'basicQuery',{
				userIds:userIds,
				query:fields
			});
		}

		__proto.showErrorMsgBox=function(title,msg){
			this.socket.send(this.urlPrefix+'showErrorMsgBox',{
				title:title,
				msg:msg
			});
		}

		__proto.getNetworkInfo=function(){
			this.socket.send(this.urlPrefix+'getNetworkInfo',{});
		}

		__proto.relation=function(){
			this.socket.send(this.urlPrefix+'relation',{});
		}

		__proto.setWXListSubscribe=function(subscribeId,subscribeType){
			this.socket.send(this.urlPrefix+'setWXListSubscribe',{
				subscribeId:subscribeId,
				subscribeType:subscribeType
			});
		}

		__proto.getWXListSubscribe=function(){
			this.socket.send(this.urlPrefix+'getWXListSubscribe',{});
		}

		__proto.openTopicCircle=function(){
			this.socket.send(this.urlPrefix+'openTopicCircle',{});
		}

		__proto.preloadQQBrowserResource=function(resName,targetResVersion){
			(targetResVersion===void 0)&& (targetResVersion=NaN);
			var options={
				resName:resName
			};
			if (!isNaN(targetResVersion)){
				options.targetResVersion=targetResVersion;
			}
			this.socket.send(this.urlPrefix+'preloadQQBrowserResource',options);
		}

		__proto.getAvailableLoginType=function(){
			this.socket.send(this.urlPrefix+'getAvailableLoginType',{});
		}

		__proto.getWXShareParams=function(){
			this.socket.send(this.urlPrefix+'getWXShareParams',{});
		}

		__proto.getShareOpenid=function(){
			this.socket.send(this.urlPrefix+'getShareOpenid',{});
		}

		__proto.getShareChannel=function(){
			this.socket.send(this.urlPrefix+'getShareChannel',{});
		}

		__proto.addQQGameShortcut=function(opts){
			this.socket.send(this.urlPrefix+'addQQGameShortcut',opts);
		}

		__proto.addQQFriend=function(dat){
			this.socket.send(this.urlPrefix+'addQQFriend',dat);
		}

		__proto.shareScreenshot=function(dat){
			this.socket.send(this.urlPrefix+'shareScreenshot',dat);
		}

		__proto.switchToMsgList=function(dat){
			this.socket.send(this.urlPrefix+'switchToMsgList',dat);
		}

		__proto.getInterstitialAdAsync=function(placement_id){
			this.socket.send(this.urlPrefix+'getInterstitialAdAsync',{
				placement_id:placement_id
			});
		}

		__proto.getRewardedVideoAsync=function(placement_id){
			this.socket.send(this.urlPrefix+'getRewardedVideoAsync',{
				placement_id:placement_id
			});
		}

		__proto.setLoadingProgress=function(progress){
			this.socket.send(this.urlPrefix+'setLoadingProgress',{
				progress:progress
			},false);
		}

		__proto.onLoginError=function(){
			this.socket.send(this.urlPrefix+'onLoginError',[]);
		}

		return GameMessageSender;
	})(MessageSenderBase)


	/**
	*...
	*@author ...
	*/
	//class laya8.core.game.WechatMessageHandler extends laya8.core.MessageHandlerBase
	var WechatMessageHandler=(function(_super){
		function WechatMessageHandler(game){
			WechatMessageHandler.__super.call(this,game);
		}

		__class(WechatMessageHandler,'laya8.core.game.WechatMessageHandler',_super);
		var __proto=WechatMessageHandler.prototype;
		__proto.onDecrypted=function(dat){
			this.game.wechat.onDecrypted(dat);
		}

		__proto.onSentGroupMessage=function(dat){
			this.game.wechat.onSentGroupMessage(dat);
		}

		return WechatMessageHandler;
	})(MessageHandlerBase)


	/**
	*...
	*@author ...
	*/
	//class laya8.core.game.WechatMessageSender extends laya8.core.MessageSenderBase
	var WechatMessageSender=(function(_super){
		function WechatMessageSender(game){
			WechatMessageSender.__super.call(this,game);
		}

		__class(WechatMessageSender,'laya8.core.game.WechatMessageSender',_super);
		var __proto=WechatMessageSender.prototype;
		__proto.sendGroupMessage=function(dat){
			this.game.socket.send('wechat.sendGroupMessage',dat)
		}

		__proto.decrypt=function(encryptedData,iv){
			this.game.socket.send('wechat.decrypt',{
				encryptedData:encryptedData,
				iv:iv
			});
		}

		return WechatMessageSender;
	})(MessageSenderBase)


	/**
	*...
	*@author luohuantao
	*/
	//class laya8.core.game.SeasonDataResult extends laya8.core.game.Result
	var SeasonDataResult=(function(_super){
		function SeasonDataResult(){
			this.userId=0;
			this.result=null;
			SeasonDataResult.__super.call(this);
		}

		__class(SeasonDataResult,'laya8.core.game.SeasonDataResult',_super);
		return SeasonDataResult;
	})(Result)


	/**
	*...
	*@author 贾艳昭
	*/
	//class laya8.core.mail.MailMessageHandler extends laya8.core.MessageHandlerBase
	var MailMessageHandler=(function(_super){
		function MailMessageHandler(game){
			MailMessageHandler.__super.call(this,game);
		}

		__class(MailMessageHandler,'laya8.core.mail.MailMessageHandler',_super);
		var __proto=MailMessageHandler.prototype;
		__proto.onGotAttachment=function(dat){
			this.game.mail.onGotAttachment(dat);
		}

		__proto.onGotList=function(dat){
			this.game.mail.onGotList(dat);
		}

		__proto.onGotUnreadMailCount=function(dat){
			this.game.mail.onGotUnreadMailCount(dat);
		}

		__proto.onDeleted=function(dat){
			this.game.mail.onDeleted(dat);
		}

		__proto.onRead=function(dat){
			this.game.mail.onRead(dat);
		}

		__proto.onGotAnnouncementList=function(dat){
			this.game.mail.onGotAnnouncementList(dat);
		}

		return MailMessageHandler;
	})(MessageHandlerBase)


	/**
	*...
	*@author 贾艳昭
	*/
	//class laya8.core.mail.MailMessageSender extends laya8.core.MessageSenderBase
	var MailMessageSender=(function(_super){
		function MailMessageSender(game){
			MailMessageSender.__super.call(this,game);
		}

		__class(MailMessageSender,'laya8.core.mail.MailMessageSender',_super);
		var __proto=MailMessageSender.prototype;
		__proto.getAttachment=function(mailIds){
			this.game.socket.send(MailMessageSender._urlPrefix+'getAttachment',{
				id:mailIds
			});
		}

		__proto.getList=function(list){
			this.game.socket.send(MailMessageSender._urlPrefix+'getList',{
				list:list
			});
		}

		__proto.getUnreadMailCount=function(types){
			this.game.socket.send(MailMessageSender._urlPrefix+'getUnreadMailCount',{
				type:types
			});
		}

		__proto.del=function(mailids){
			this.game.socket.send(MailMessageSender._urlPrefix+'del',{
				id:mailids
			});
		}

		__proto.read=function(mailids){
			this.game.socket.send(MailMessageSender._urlPrefix+'read',{
				id:mailids
			});
		}

		MailMessageSender._urlPrefix='mail.';
		return MailMessageSender;
	})(MessageSenderBase)


	/**
	*...
	*@author 贾艳昭
	*/
	//class laya8.core.mall.MallMessageHandler extends laya8.core.MessageHandlerBase
	var MallMessageHandler=(function(_super){
		function MallMessageHandler(game){
			MallMessageHandler.__super.call(this,game);
		}

		__class(MallMessageHandler,'laya8.core.mall.MallMessageHandler',_super);
		var __proto=MallMessageHandler.prototype;
		__proto.listMallsResult=function(dat){
			this.game.mall.onListMallsResult(dat);
		}

		__proto.listGoodsResult=function(dat){
			this.game.mall.onListGoodsResult(dat);
		}

		__proto.purchaseResult=function(dat){
			this.game.mall.onPurchaseResult(dat);
		}

		return MallMessageHandler;
	})(MessageHandlerBase)


	/**
	*...
	*@author 贾艳昭
	*/
	//class laya8.core.mall.MallMessageSender extends laya8.core.MessageSenderBase
	var MallMessageSender=(function(_super){
		function MallMessageSender(game){
			MallMessageSender.__super.call(this,game);
		}

		__class(MallMessageSender,'laya8.core.mall.MallMessageSender',_super);
		var __proto=MallMessageSender.prototype;
		__proto.listMalls=function(){
			this.game.socket.send(MallMessageSender._urlPrefix+'listMalls',{});
		}

		__proto.listGoods=function(mallId){
			this.game.socket.send(MallMessageSender._urlPrefix+'listGoods',{
				'mallId':mallId
			});
		}

		__proto.purchase=function(mallId,goodsId,itemInGoodsId,backpackId,amount){
			this.game.socket.send(MallMessageSender._urlPrefix+'purchase',{
				mallId:mallId,
				goodsId:goodsId,
				itemInGoodsId:itemInGoodsId,
				backpackId:backpackId,
				amount:amount
			});
		}

		MallMessageSender._urlPrefix='mall.';
		return MallMessageSender;
	})(MessageSenderBase)


	/**
	*...
	*@author 贾艳昭
	*/
	//class laya8.core.pay.PayMessageHandler extends laya8.core.MessageHandlerBase
	var PayMessageHandler=(function(_super){
		function PayMessageHandler(game){
			PayMessageHandler.__super.call(this,game);
		}

		__class(PayMessageHandler,'laya8.core.pay.PayMessageHandler',_super);
		var __proto=PayMessageHandler.prototype;
		__proto.onPayError=function(err){
			this.game.pay.onPayError(err);
		}

		__proto.onGotDirectPayItems=function(dat){
			this.game.pay.onGotDirectPayItems(dat);
		}

		__proto.onMidasPayResult=function(dat){
			this.game.pay.onMidasPayResult(dat);
		}

		__proto.onPayFinish=function(code){
			this.game.pay.onPayFinish(code);
		}

		return PayMessageHandler;
	})(MessageHandlerBase)


	/**
	*...
	*@author 贾艳昭
	*/
	//class laya8.core.pay.PayMessageSender extends laya8.core.MessageSenderBase
	var PayMessageSender=(function(_super){
		function PayMessageSender(game){
			PayMessageSender.__super.call(this,game);
		}

		__class(PayMessageSender,'laya8.core.pay.PayMessageSender',_super);
		var __proto=PayMessageSender.prototype;
		/**
		*获取平台币购买游戏币的支付配置
		*/
		__proto.getPayItems=function(){
			this.game.socket.send(PayMessageSender._urlPrefix+'getPayItems',{});
		}

		/**
		*使用平台币购买游戏币
		*@param id 支付档位Id
		*@param count 数量(注意此数量不是游戏币数量,游戏币数量在档位中配置)
		*/
		__proto.buyPayItem=function(id,count){
			this.game.socket.send(PayMessageSender._urlPrefix+'buyPayItem',{
				id:id,
				count:count
			});
		}

		/**
		*获取充值平台币的档位
		*/
		__proto.getCoinsPayItems=function(){
			this.game.socket.send(PayMessageSender._urlPrefix+'getCoinsPayItems',{});
		}

		__proto.buyCoins=function(id){
			this.game.socket.send(PayMessageSender._urlPrefix+'buyCoins',{
				id:id
			});
		}

		__proto.getDirectPayItems=function(){
			this.game.socket.send(PayMessageSender._urlPrefix+'getDirectPayItems',{});
		}

		__proto.buyDirectPayItem=function(id){
			this.game.socket.send(PayMessageSender._urlPrefix+'buyDirectPayItem',{
				id:id
			});
		}

		__proto.midasPay=function(count,env){
			this.game.socket.send(PayMessageSender._urlPrefix+'midasPay',{
				count:count,
				env:env
			});
		}

		PayMessageSender._urlPrefix='pay.';
		return PayMessageSender;
	})(MessageSenderBase)


	/**
	*...
	*@author 贾艳昭
	*/
	//class laya8.core.social.FriendMessageHandler extends laya8.core.MessageHandlerBase
	var FriendMessageHandler=(function(_super){
		function FriendMessageHandler(game){
			FriendMessageHandler.__super.call(this,game);
		}

		__class(FriendMessageHandler,'laya8.core.social.FriendMessageHandler',_super);
		var __proto=FriendMessageHandler.prototype;
		__proto.inviteResult=function(dat){
			this.game.friend.inviteResult(dat);
		}

		__proto.rejectResult=function(dat){
			this.game.friend.rejectResult(dat);
		}

		__proto.acceptResult=function(dat){
			this.game.friend.acceptResult(dat);
		}

		__proto.blockResult=function(dat){
			this.game.friend.blockResult(dat);
		}

		__proto.unblockResult=function(dat){
			this.game.friend.unblockResult(dat);
		}

		__proto.deleteResult=function(dat){
			this.game.friend.deleteResult(dat);
		}

		__proto.listResult=function(dat){
			this.game.friend.listResult(dat);
		}

		__proto.moveResult=function(dat){
			this.game.friend.moveResult(dat);
		}

		__proto.online=function(dat){
			this.game.friend.online(dat);
		}

		__proto.offline=function(dat){
			this.game.friend.offline(dat);
		}

		__proto.joinRoom=function(dat){
			this.game.friend.joinRoom(dat);
		}

		__proto.leaveRoom=function(dat){
			this.game.friend.leaveRoom(dat);
		}

		__proto.invited=function(dat){
			this.game.friend.invited(dat);
		}

		__proto.rejected=function(dat){
			this.game.friend.rejected(dat);
		}

		__proto.accepted=function(dat){
			this.game.friend.accepted(dat);
		}

		__proto.blocked=function(dat){
			this.game.friend.blocked(dat);
		}

		__proto.unblocked=function(dat){
			this.game.friend.unblocked(dat);
		}

		__proto.deleted=function(dat){
			this.game.friend.deleted(dat);
		}

		__proto.moved=function(dat){
			this.game.friend.moved(dat);
		}

		__proto.attentionResult=function(dat){
			this.game.friend.attentionResult(dat);
		}

		__proto.inattentionResult=function(dat){
			this.game.friend.inattentionResult(dat);
		}

		__proto.listInvitingResult=function(dat){
			this.game.friend.listInvitingResult(dat);
		}

		__proto.listBeInGroupResult=function(dat){
			this.game.friend.listBeInGroupResult(dat);
		}

		__proto.attentioned=function(dat){
			this.game.friend.attentioned(dat);
		}

		__proto.joinTeam=function(dat){
			this.game.friend.joinTeam(dat);
		}

		__proto.leaveTeam=function(dat){
			this.game.friend.leaveTeam(dat);
		}

		return FriendMessageHandler;
	})(MessageHandlerBase)


	/**
	*...
	*@author 贾艳昭
	*/
	//class laya8.core.social.FriendMessageSender extends laya8.core.MessageSenderBase
	var FriendMessageSender=(function(_super){
		function FriendMessageSender(game){
			FriendMessageSender.__super.call(this,game);
		}

		__class(FriendMessageSender,'laya8.core.social.FriendMessageSender',_super);
		var __proto=FriendMessageSender.prototype;
		__proto.invite=function(targetId,groupId,params){
			this.game.socket.send(FriendMessageSender._urlPrefix+'invite',{
				targetId:targetId,
				groupId:groupId,
				params:params
			});
		}

		__proto.reject=function(targetId){
			this.game.socket.send(FriendMessageSender._urlPrefix+'reject',{
				targetId:targetId
			});
		}

		__proto.accept=function(targetId,groupId,params){
			this.game.socket.send(FriendMessageSender._urlPrefix+'accept',{
				targetId:targetId,
				groupId:groupId,
				params:params
			});
		}

		__proto.block=function(targetId){
			this.game.socket.send(FriendMessageSender._urlPrefix+'block',{
				targetId:targetId
			});
		}

		__proto.unblock=function(targetId){
			this.game.socket.send(FriendMessageSender._urlPrefix+'unblock',{
				targetId:targetId
			});
		}

		__proto.Delete=function(targetId){
			this.game.socket.send(FriendMessageSender._urlPrefix+'Delete',{
				targetId:targetId
			});
		}

		__proto.list=function(){
			this.game.socket.send(FriendMessageSender._urlPrefix+'list',{
			});
		}

		__proto.move=function(friendId,groupId){
			this.game.socket.send(FriendMessageSender._urlPrefix+'move',{
				friendId:friendId,
				groupId:groupId
			});
		}

		__proto.attention=function(friendId){
			this.game.socket.send(FriendMessageSender._urlPrefix+'attention',{
				friendId:friendId
			});
		}

		__proto.inattention=function(friendId){
			this.game.socket.send(FriendMessageSender._urlPrefix+'inattention',{
				friendId:friendId
			});
		}

		__proto.listInviting=function(){
			this.game.socket.send(FriendMessageSender._urlPrefix+'listInviting',{});
		}

		__proto.listBeInGroup=function(groupId){
			this.game.socket.send(FriendMessageSender._urlPrefix+'listBeInGroup',{
				groupId:groupId
			});
		}

		FriendMessageSender._urlPrefix='friend.';
		return FriendMessageSender;
	})(MessageSenderBase)


	/**
	*...
	*@author 贾艳昭
	*/
	//class laya8.core.game.WXReportLoginInfo extends laya8.core.game.WXReportInfoBase
	var WXReportLoginInfo=(function(_super){
		function WXReportLoginInfo(){
			WXReportLoginInfo.__super.call(this);
			this.type='login';
		}

		__class(WXReportLoginInfo,'laya8.core.game.WXReportLoginInfo',_super);
		return WXReportLoginInfo;
	})(WXReportInfoBase)


	/**
	*...
	*@author 贾艳昭
	*/
	//class laya8.core.game.WXReportLogoutInfo extends laya8.core.game.WXReportInfoBase
	var WXReportLogoutInfo=(function(_super){
		function WXReportLogoutInfo(){
			this.online_time=NaN;
			this.logout_reason=NaN;
			WXReportLogoutInfo.__super.call(this);
			this.type='logout';
		}

		__class(WXReportLogoutInfo,'laya8.core.game.WXReportLogoutInfo',_super);
		return WXReportLogoutInfo;
	})(WXReportInfoBase)


	/**
	*...
	*@author 贾艳昭
	*/
	//class laya8.core.game.WXReportShareInfo extends laya8.core.game.WXReportInfoBase
	var WXReportShareInfo=(function(_super){
		function WXReportShareInfo(){
			this.share_type=NaN;
			this.msg_type=NaN;
			this.custtom_json=null;
			WXReportShareInfo.__super.call(this);
			this.type='share';
		}

		__class(WXReportShareInfo,'laya8.core.game.WXReportShareInfo',_super);
		return WXReportShareInfo;
	})(WXReportInfoBase)


	/**
	*...
	*@author 贾艳昭
	*/
	//class laya8.core.user.UserMessageHandler extends laya8.core.MessageHandlerBase
	var UserMessageHandler=(function(_super){
		function UserMessageHandler(game){
			UserMessageHandler.__super.call(this,game);
		}

		__class(UserMessageHandler,'laya8.core.user.UserMessageHandler',_super);
		var __proto=UserMessageHandler.prototype;
		__proto.basicDataChg=function(data){
			this.game.user.onBasicDataChg(data);
		}

		__proto.gameDataChg=function(data){
			this.game.user.onGameDataChg(data);
		}

		__proto.error=function(err){
			this.game.user.onError(err);
		}

		__proto.randomname=function(nkname){
			this.game.user.onGotRandomName(nkname);
		}

		__proto.onMyRanksChg=function(list){
			this.game.user.onMyRanksChg(list);
		}

		__proto.onLoginDataChg=function(user){
			this.game.user.setLoginData(user);
		}

		__proto.getGameDataResult=function(dat){
			this.game.user.getGameDataResult(dat);
		}

		__proto.onGotRewardData=function(dat){
			this.game.user.onGotRewardData(dat);
		}

		__proto.onGotClientObjectResult=function(dat){
			this.game.user.onGotClientObjectResult(dat);
		}

		__proto.onGotLastRoom=function(dat){
			this.game.user.onGotLastRoom(dat);
		}

		__proto.searchByUIdResult=function(dat){
			this.game.user.searchByUIdResult(dat);
		}

		__proto.teamCreated=function(dat){
			this.game.user.onTeamCreated(dat);
		}

		__proto.onTeamJoined=function(dat){
			this.game.user.onTeamJoined(dat);
		}

		__proto.onTeamLeft=function(dat){
			this.game.user.onTeamLeft(dat);
		}

		__proto.onTeamInvite=function(dat){
			this.game.user.onTeamInvite(dat);
		}

		__proto.queryByOpenIdResult=function(dat){
			this.game.user.queryByOpenIdResult(dat);
		}

		__proto.attentionResult=function(dat){
			this.game.user.attentionResult(dat);
		}

		__proto.inattentionResult=function(dat){
			this.game.user.inattentionResult(dat);
		}

		__proto.sendMessageResult=function(dat){
			this.game.user.sendMessageResult(dat);
		}

		__proto.receiveMessage=function(dat){
			this.game.user.receiveMessage(dat);
		}

		__proto.onTeamReady=function(dat){
			this.game.user.onTeamReady(dat);
		}

		__proto.onOtherUserBasicDataChange=function(dat){
			this.game.user.onOtherUserBasicDataChange(dat);
		}

		__proto.onGotRandomTeamList=function(dat){
			this.game.user.onGotRandomTeamList(dat);
		}

		__proto.onGotExtraTeamList=function(dat){
			this.game.user.onGotExtraTeamList(dat);
		}

		__proto.onTeamUpdated=function(dat){
			this.game.user.onTeamUpdated(dat);
		}

		__proto.onTeamInfoRefreshed=function(dat){
			this.game.user.onTeamInfoRefreshed(dat);
		}

		return UserMessageHandler;
	})(MessageHandlerBase)


	/**
	*...
	*@author 贾艳昭
	*/
	//class laya8.core.user.UserMessageSender extends laya8.core.MessageSenderBase
	var UserMessageSender=(function(_super){
		function UserMessageSender(game){
			UserMessageSender.__super.call(this,game);
		}

		__class(UserMessageSender,'laya8.core.user.UserMessageSender',_super);
		var __proto=UserMessageSender.prototype;
		__proto.updateBasicData=function(nkname,gender,avtor){
			this.game.socket.send(UserMessageSender._urlPrefix+'updateBasicData',{
				nkname:nkname,
				gender:gender,
				avtor:avtor
			});
		}

		__proto.getRandomName=function(){
			this.game.socket.send(UserMessageSender._urlPrefix+'getRandomName',{
			});
		}

		__proto.getReward=function(rewardIdArray){
			this.game.socket.send(UserMessageSender._urlPrefix+'getReward',rewardIdArray);
		}

		__proto.getRewardData=function(rewardIdArray){
			this.game.socket.send(UserMessageSender._urlPrefix+'getRewardData',rewardIdArray);
		}

		__proto.getGameData=function(obj){
			this.game.socket.send(UserMessageSender._urlPrefix+'getGameData',obj);
		}

		__proto.setClientObject=function(dat){
			this.game.socket.send(UserMessageSender._urlPrefix+'setClientObject',dat);
		}

		__proto.getLastRoom=function(){
			this.game.socket.send(UserMessageSender._urlPrefix+'getLastRoom',{});
		}

		__proto.searchByUId=function(targetId){
			this.game.socket.send(UserMessageSender._urlPrefix+'searchByUId',{
				targetId:targetId
			});
		}

		__proto.createTeam=function(roomType,displayInList){
			this.game.socket.send(UserMessageSender._urlPrefix+'createTeam',{
				type:roomType,
				displayInList:displayInList
			});
		}

		__proto.leaveTeam=function(){
			this.game.socket.send(UserMessageSender._urlPrefix+'leaveTeam',{
			});
		}

		__proto.joinTeam=function(team,payload){
			this.game.socket.send(UserMessageSender._urlPrefix+'joinTeam',{
				team:team,
				payload:payload
			});
		}

		__proto.inviteTeam=function(userId,payload){
			this.game.socket.send(UserMessageSender._urlPrefix+'inviteTeam',{
				to:userId,
				payload:payload
			});
		}

		__proto.kickTeam=function(userId){
			this.game.socket.send(UserMessageSender._urlPrefix+'kickTeam',{
				to:userId
			});
		}

		__proto.sendMessage=function(id,msg){
			this.game.socket.send(UserMessageSender._urlPrefix+'sendMessage',{
				targetId:id,
				message:msg
			});
		}

		__proto.teamPlay=function(){
			this.game.socket.send(UserMessageSender._urlPrefix+'teamPlay',{});
		}

		__proto.queryByOpenId=function(openIds){
			this.game.socket.send(UserMessageSender._urlPrefix+'queryByOpenId',openIds);
		}

		__proto.attention=function(userIds){
			this.game.socket.send(UserMessageSender._urlPrefix+'attention',userIds);
		}

		__proto.inattention=function(userIds){
			this.game.socket.send(UserMessageSender._urlPrefix+'inattention',userIds);
		}

		__proto.teamReady=function(ready){
			this.game.socket.send(UserMessageSender._urlPrefix+'teamReady',{
				ready:ready
			});
		}

		__proto.getRandomTeamList=function(type,count){
			this.game.socket.send(UserMessageSender._urlPrefix+'getRandomTeamList',{
				type:type,
				count:count
			});
		}

		__proto.getExtraTeamList=function(type,count,exclude){
			this.game.socket.send(UserMessageSender._urlPrefix+'getExtraTeamList',{
				type:type,
				count:count,
				exclude:exclude
			});
		}

		__proto.updateTeam=function(displayInList,payload){
			var params={};
			if (displayInList >=0){
				params['displayInList']=displayInList;
			}
			if (payload !=null){
				params['payload']=payload;
			}
			this.game.socket.send(UserMessageSender._urlPrefix+'updateTeam',params);
		}

		__proto.refreshTeamInfo=function(teamIdList){
			this.game.socket.send(UserMessageSender._urlPrefix+'refreshTeamInfo',{
				teamIdList:teamIdList
			});
		}

		__proto.Login=function(){
			this.game.socket.send(UserMessageSender._urlPrefix+'Login',{},false);
		}

		__proto.Logout=function(){
			this.game.socket.send(UserMessageSender._urlPrefix+'Logout',{},false);
		}

		UserMessageSender._urlPrefix='user.';
		return UserMessageSender;
	})(MessageSenderBase)


	/**
	*...
	*@author 贾艳昭
	*/
	//class laya8.core.social.AcceptFriendResultInfo extends laya8.core.social.FriendResultBaseInfo
	var AcceptFriendResultInfo=(function(_super){
		function AcceptFriendResultInfo(){
			this.groupId=0;
			AcceptFriendResultInfo.__super.call(this);
		}

		__class(AcceptFriendResultInfo,'laya8.core.social.AcceptFriendResultInfo',_super);
		return AcceptFriendResultInfo;
	})(FriendResultBaseInfo)


	/**
	*...
	*@author 贾艳昭
	*/
	//class laya8.core.social.FriendInviteResultInfo extends laya8.core.social.FriendResultBaseInfo
	var FriendInviteResultInfo=(function(_super){
		function FriendInviteResultInfo(){
			this.groupId=0;
			this.online=false;
			this.userInfo=null;
			FriendInviteResultInfo.__super.call(this);
		}

		__class(FriendInviteResultInfo,'laya8.core.social.FriendInviteResultInfo',_super);
		return FriendInviteResultInfo;
	})(FriendResultBaseInfo)


	/**
	*...
	*@author 贾艳昭
	*/
	//class laya8.core.social.FriendNotifyResultInfo extends laya8.core.social.FriendNotifyResultBaseInfo
	var FriendNotifyResultInfo=(function(_super){
		function FriendNotifyResultInfo(){
			this.userInfo=null;
			this.groupId=0;
			this.frInfo=null;
			FriendNotifyResultInfo.__super.call(this);
		}

		__class(FriendNotifyResultInfo,'laya8.core.social.FriendNotifyResultInfo',_super);
		return FriendNotifyResultInfo;
	})(FriendNotifyResultBaseInfo)


	/**
	*...
	*@author 贾艳昭
	*/
	//class laya8.core.social.FriendRoomNotifyResultInfo extends laya8.core.social.FriendNotifyResultBaseInfo
	var FriendRoomNotifyResultInfo=(function(_super){
		function FriendRoomNotifyResultInfo(){
			this.roomId=0;
			this.roomType=0;
			FriendRoomNotifyResultInfo.__super.call(this);
		}

		__class(FriendRoomNotifyResultInfo,'laya8.core.social.FriendRoomNotifyResultInfo',_super);
		return FriendRoomNotifyResultInfo;
	})(FriendNotifyResultBaseInfo)


	/**
	*...
	*@author 贾艳昭
	*/
	//class laya8.core.user.UserBasicDataInfo extends laya8.core.user.UserShortDataInfo
	var UserBasicDataInfo=(function(_super){
		function UserBasicDataInfo(){
			this.Money=0;
			this.MemberExpireTime=0;
			this.userId=0;
			this.ready=false;
			UserBasicDataInfo.__super.call(this);
		}

		__class(UserBasicDataInfo,'laya8.core.user.UserBasicDataInfo',_super);
		return UserBasicDataInfo;
	})(UserShortDataInfo)


	/**
	*...
	*@author 贾艳昭
	*/
	//class logic.backpack.BackpackMessageHandler extends logic.MessageHandlerBase
	var BackpackMessageHandler$1=(function(_super){
		function BackpackMessageHandler(game){
			this.sender=null;
			BackpackMessageHandler.__super.call(this,game);
			this.sender=new BackpackMessageSender$1(game);
		}

		__class(BackpackMessageHandler,'logic.backpack.BackpackMessageHandler',_super,'BackpackMessageHandler$1');
		var __proto=BackpackMessageHandler.prototype;
		__proto.listBackpacks=function(){
			this.sender.listBackpacks();
		}

		__proto.unlockCells=function(dat){
			this.sender.unlockCells(dat.backpackId,dat.unlockTo);
		}

		__proto.moveItem=function(dat){
			this.sender.moveItem(dat.fromBackpackId,dat.toBackpackId,dat.itemStaticId,dat.amount);
		}

		__proto.useItem=function(dat){
			this.sender.useItem(dat.backpackId,dat.itemStaticId,dat.amount);
		}

		//下面的来自服务器的消息
		__proto.listBackpacksResult=function(dat){
			this.sender.listBackpacksResult(dat);
		}

		__proto.unlockCellsResult=function(dat){
			this.sender.unlockCellsResult(dat);
		}

		__proto.moveItemResult=function(dat){
			this.sender.moveItemResult(dat);
		}

		__proto.useItemResult=function(dat){
			this.sender.useItemResult(dat);
		}

		return BackpackMessageHandler;
	})(MessageHandlerBase$1)


	/**
	*...
	*@author 贾艳昭
	*/
	//class logic.backpack.BackpackMessageSender extends logic.MessageSenderBase
	var BackpackMessageSender$1=(function(_super){
		function BackpackMessageSender(game){
			BackpackMessageSender.__super.call(this,game);
		}

		__class(BackpackMessageSender,'logic.backpack.BackpackMessageSender',_super,'BackpackMessageSender$1');
		var __proto=BackpackMessageSender.prototype;
		__proto.listBackpacks=function(){
			this.game.socket.send(BackpackMessageSender._urlPrefix+'listBackpacks',{});
		}

		__proto.unlockCells=function(backpackId,unlockTo){
			this.game.socket.send(BackpackMessageSender._urlPrefix+'unlockCells',{
				backpackId:backpackId,
				unlockTo:unlockTo
			});
		}

		__proto.moveItem=function(fromBackpackId,toBackpackId,itemStaticId,amount){
			this.game.socket.send(BackpackMessageSender._urlPrefix+'moveItem',{
				fromBackpackId:fromBackpackId,
				toBackpackId:toBackpackId,
				itemStaticId:itemStaticId,
				amount:amount
			});
		}

		__proto.useItem=function(backpackId,itemStaticId,amount){
			this.game.socket.send(BackpackMessageSender._urlPrefix+'useItem',{
				backpackId:backpackId,
				itemStaticId:itemStaticId,
				amount:amount
			});
		}

		//下面的消息派发给游戏客户端
		__proto.listBackpacksResult=function(dat){
			this.game.hallMessager.send(BackpackMessageSender._gameClientUrlPrefix+'listBackpacksResult',dat);
		}

		__proto.unlockCellsResult=function(dat){
			this.game.hallMessager.send(BackpackMessageSender._gameClientUrlPrefix+'unlockCellsResult',dat);
		}

		__proto.moveItemResult=function(dat){
			this.game.hallMessager.send(BackpackMessageSender._gameClientUrlPrefix+'moveItemResult',dat);
		}

		__proto.useItemResult=function(dat){
			this.game.hallMessager.send(BackpackMessageSender._gameClientUrlPrefix+'useItemResult',dat);
		}

		BackpackMessageSender._urlPrefix='room.backpack.';
		BackpackMessageSender._gameClientUrlPrefix='backpack.';
		return BackpackMessageSender;
	})(MessageSenderBase$1)


	/**
	*...
	*@author 贾艳昭
	*/
	//class logic.chat.ChatMessageHandler extends logic.MessageHandlerBase
	var ChatMessageHandler$1=(function(_super){
		function ChatMessageHandler(game){
			this.sender=null;
			ChatMessageHandler.__super.call(this,game);
			this.sender=new ChatMessageSender$1(game);
		}

		__class(ChatMessageHandler,'logic.chat.ChatMessageHandler',_super,'ChatMessageHandler$1');
		var __proto=ChatMessageHandler.prototype;
		__proto.say=function(dat){
			this.sender.say(dat);
		}

		__proto.said=function(dat){
			this.sender.said(dat);
		}

		__proto.getHistory=function(){
			this.sender.getHistory();
		}

		__proto.getHistoryResult=function(dat){
			this.sender.getHistoryResult(dat);
		}

		__proto.tell=function(dat){
			this.sender.tell(dat);
		}

		__proto.told=function(dat){
			this.sender.told(dat);
		}

		__proto.toldToMe=function(dat){
			this.sender.toldToMe(dat);
		}

		return ChatMessageHandler;
	})(MessageHandlerBase$1)


	/**
	*...
	*@author 贾艳昭
	*/
	//class logic.chat.ChatMessageSender extends logic.MessageSenderBase
	var ChatMessageSender$1=(function(_super){
		function ChatMessageSender(game){
			ChatMessageSender.__super.call(this,game);
		}

		__class(ChatMessageSender,'logic.chat.ChatMessageSender',_super,'ChatMessageSender$1');
		var __proto=ChatMessageSender.prototype;
		__proto.say=function(dat){
			this.game.socket.send(ChatMessageSender._urlPrefix+'say',dat);
		}

		__proto.said=function(dat){
			this.game.hallMessager.send(ChatMessageSender._gameClientUrlPrefix+'said',dat);
		}

		__proto.getHistory=function(){
			this.game.socket.send(ChatMessageSender._urlPrefix+'getHistory',{});
		}

		__proto.getHistoryResult=function(dat){
			this.game.hallMessager.send(ChatMessageSender._gameClientUrlPrefix+'getHistoryResult',dat);
		}

		__proto.told=function(dat){
			this.game.hallMessager.send(ChatMessageSender._gameClientUrlPrefix+'told',dat);
		}

		__proto.toldToMe=function(dat){
			this.game.hallMessager.send(ChatMessageSender._gameClientUrlPrefix+'toldToMe',dat);
		}

		__proto.tell=function(dat){
			this.game.socket.send('social.chat.tell',dat);
		}

		ChatMessageSender._urlPrefix='room.chat.';
		ChatMessageSender._gameClientUrlPrefix='chat.';
		return ChatMessageSender;
	})(MessageSenderBase$1)


	/**
	*...
	*@author 贾艳昭
	*/
	//class logic.game.GameMessageHandler extends logic.MessageHandlerBase
	var GameMessageHandler$1=(function(_super){
		function GameMessageHandler(game){
			GameMessageHandler.__super.call(this,game);
		}

		__class(GameMessageHandler,'logic.game.GameMessageHandler',_super,'GameMessageHandler$1');
		var __proto=GameMessageHandler.prototype;
		__proto.onRoomListRefresh=function(list){
			this.game.onRoomListRefresh(list);
		}

		__proto.error=function(code){
			var err=new ErrorInfo$1();
			err.errorCode=code;
			err.errorMessage=ErrorMsg.GetMsg(code);
			this.game.onError(err);
		}

		__proto.getRoomTypeList=function(){
			this.game.getRoomTypeList();
		}

		__proto.match=function(dat){
			this.game.Match(dat.roomType,dat.mustNew);
		}

		__proto.ready=function(dat){
			Method.log('game ready:',dat);
			this.game.clientVersion=dat.clientVersion;
			this.game.clientIsReady();
		}

		__proto.getRankList=function(dat){
			this.game.getRankList(dat.rankListId,dat.cacheTime);
		}

		__proto.getRankResult=function(dat){
			this.game.onGotRankList(dat);
		}

		__proto.getRoomSocketStatus=function(){
			this.game.sendRoomSocketStatus(this.game.socket.isConnected());
		}

		__proto.getQRCode=function(dat){
			this.game.getQRCode(dat.url);
		}

		__proto.joinRoom=function(dat){
			this.game.joinRoom(dat.roomId,dat.force);
		}

		__proto.canJoinRoom=function(dat){
			this.game.canJoinRoom(dat.roomId,dat.force);
		}

		__proto.removeSplash=function(){
			this.game.removeSplash();
		}

		__proto.notify=function(dat){
			this.game.notify(dat);
		}

		__proto.onNotify=function(dat){
			this.game.onNotify(dat);
		}

		__proto.getCurrentSeasonData=function(dat){
			this.game.getCurrentSeasonData(dat);
		}

		__proto.queryCurrentData=function(dat){
			this.game.queryCurrentData(dat);
		}

		__proto.seasonGetCurrentDataResult=function(dat){
			this.game.onGotCurrentSeasonDataResult(dat);
		}

		__proto.seasonQueryCurrentDataResult=function(dat){
			this.game.seasonQueryCurrentDataResult(dat);
		}

		__proto.setWXBasicReport=function(dat){
			this.game.setWXBasicReport(dat);
		}

		__proto.setWXReport=function(dat){
			this.game.setWXReport(dat);
		}

		__proto.initShareConfig=function(dat){
			this.game.initShareConfig(dat);
		}

		__proto.sendMessageToFriend=function(dat){
			this.game.sendMessageToFriend(dat)
		}

		__proto.shareMessage=function(dat){
			this.game.share(dat);
		}

		__proto.openUrlWithExtraWebview=function(opts){
			this.game.openUrlWithExtraWebview(opts);
		}

		__proto.closeWindow=function(){
			this.game.closeWindow();
		}

		__proto.sendDesktop=function(opts){
			this.game.sendDesktop(opts);
		}

		__proto.setCloseWindowConfirmDialogInfo=function(opts){
			this.game.setCloseWindowConfirmDialogInfo(opts);
		}

		__proto.basicQuery=function(dat){
			this.game.basicQuery(dat);
		}

		__proto.basicDataQueried=function(dat){
			this.game.onBasicDataQueried(dat);
		}

		__proto.showErrorMsgBox=function(dat){
			this.game.showErrorMsgBox(dat.title,dat.msg);
		}

		__proto.getNetworkInfo=function(){
			this.game.getNetworkInfo();
		}

		__proto.relation=function(){
			this.game.relation();
		}

		__proto.setWXListSubscribe=function(dat){
			this.game.setWXListSubscribe(dat);
		}

		__proto.getWXListSubscribe=function(){
			this.game.getWXListSubscribe();
		}

		__proto.openTopicCircle=function(){
			this.game.openTopicCircle();
		}

		__proto.preloadQQBrowserResource=function(options){
			this.game.preloadQQBrowserResource(options);
		}

		__proto.getAvailableLoginType=function(){
			this.game.getAvailableLoginType();
		}

		__proto.getWXShareParams=function(){
			this.game.getWXShareParams();
		}

		__proto.getShareOpenid=function(){
			this.game.getShareOpenid();
		}

		__proto.getShareChannel=function(){
			this.game.getShareChannel();
		}

		__proto.addQQGameShortcut=function(opts){
			this.game.addQQGameShortcut(opts);
		}

		__proto.addQQFriend=function(opts){
			this.game.addQQFriend(opts);
		}

		__proto.shareScreenshot=function(opts){
			this.game.shareScreenshot(opts);
		}

		__proto.switchToMsgList=function(opts){
			this.game.switchToMsgList(opts);
		}

		__proto.getInterstitialAdAsync=function(dat){
			this.game.getInterstitialAdAsync(dat.placement_id);
		}

		__proto.getRewardedVideoAsync=function(dat){
			this.game.getRewardedVideoAsync(dat.placement_id);
		}

		__proto.getShareInfo=function(dat){
			this.game.getShareInfo(dat);
		}

		__proto.setScoreAsync=function(dat){
			this.game.setScoreAsync(dat);
		}

		__proto.getLeaderboardAsync=function(dat){
			this.game.getLeaderboardAsync(dat);
		}

		__proto.getEntriesAsync=function(dat){
			this.game.getEntriesAsync(dat);
		}

		__proto.setLoadingProgress=function(dat){
			this.game.setLoadingProgress(dat.progress);
		}

		__proto.onLoginError=function(){
			this.game.onLoginError();
		}

		return GameMessageHandler;
	})(MessageHandlerBase$1)


	/**
	*...
	*@author ...
	*/
	//class logic.game.WechatMessageHandler extends logic.MessageHandlerBase
	var WechatMessageHandler$1=(function(_super){
		function WechatMessageHandler(game){
			this.sender=null;
			WechatMessageHandler.__super.call(this,game);
			this.sender=new WechatMessageSender$1(game);
		}

		__class(WechatMessageHandler,'logic.game.WechatMessageHandler',_super,'WechatMessageHandler$1');
		var __proto=WechatMessageHandler.prototype;
		__proto.decrypt=function(dat){
			this.sender.decrypt(dat);
		}

		__proto.onDecrypted=function(dat){
			this.game.hallMessager.send('wechat.onDecrypted',dat);
		}

		__proto.sendGroupMessage=function(dat){
			this.sender.sendGroupMessage(dat);
		}

		__proto.onSentGroupMessage=function(dat){
			this.game.hallMessager.send('wechat.onSentGroupMessage',dat);
		}

		return WechatMessageHandler;
	})(MessageHandlerBase$1)


	/**
	*...
	*@author ...
	*/
	//class logic.game.WechatMessageSender extends logic.MessageSenderBase
	var WechatMessageSender$1=(function(_super){
		function WechatMessageSender(game){
			WechatMessageSender.__super.call(this,game);
		}

		__class(WechatMessageSender,'logic.game.WechatMessageSender',_super,'WechatMessageSender$1');
		var __proto=WechatMessageSender.prototype;
		__proto.decrypt=function(dat){
			this.game.socket.send('room.wechat.decrypt',dat);
		}

		__proto.sendGroupMessage=function(dat){
			this.game.socket.send('room.wechat.sendGroupMessage',dat);
		}

		return WechatMessageSender;
	})(MessageSenderBase$1)


	/**
	*...
	*@author 贾艳昭
	*/
	//class logic.mail.MailMessageHandler extends logic.MessageHandlerBase
	var MailMessageHandler$1=(function(_super){
		function MailMessageHandler(game){
			this.sender=null;
			MailMessageHandler.__super.call(this,game);
			this.sender=new MailMessageSender$1(game);
		}

		__class(MailMessageHandler,'logic.mail.MailMessageHandler',_super,'MailMessageHandler$1');
		var __proto=MailMessageHandler.prototype;
		__proto.onGotAttachment=function(dat){
			this.sender.onGotAttachment(dat);
		}

		__proto.onGotList=function(dat){
			this.sender.onGotList(dat);
		}

		__proto.onGotUnreadMailCount=function(dat){
			this.sender.onGotUnreadMailCount(dat);
		}

		__proto.onDeleted=function(dat){
			this.sender.onDeleted(dat);
		}

		__proto.onRead=function(dat){
			this.sender.onRead(dat);
		}

		__proto.onGotAnnouncementList=function(dat){
			this.sender.onGotAnnouncementList(dat);
		}

		//以下是sdk消息
		__proto.getAttachment=function(mailids){
			this.sender.getAttachment(mailids);
		}

		__proto.getList=function(dat){
			this.sender.getList(dat);
		}

		__proto.getUnreadMailCount=function(types){
			this.sender.getUnreadMailCount(types);
		}

		__proto.del=function(mailids){
			this.sender.del(mailids);
		}

		__proto.read=function(mailids){
			this.sender.read(mailids);
		}

		return MailMessageHandler;
	})(MessageHandlerBase$1)


	/**
	*...
	*@author 贾艳昭
	*/
	//class logic.mall.MallMessageHandler extends logic.MessageHandlerBase
	var MallMessageHandler$1=(function(_super){
		function MallMessageHandler(game){
			this.sender=null;
			MallMessageHandler.__super.call(this,game);
			this.sender=new MallMessageSender$1(game);
		}

		__class(MallMessageHandler,'logic.mall.MallMessageHandler',_super,'MallMessageHandler$1');
		var __proto=MallMessageHandler.prototype;
		__proto.listMalls=function(){
			this.sender.listMalls();
		}

		__proto.listGoods=function(dat){
			this.sender.listGoods(dat.mallId);
		}

		__proto.purchase=function(dat){
			this.sender.purchase(dat.mallId,dat.goodsId,dat.itemInGoodsId,dat.backpackId,dat.amount);
		}

		//下面的消息都是从server来的
		__proto.listMallsResult=function(dat){
			this.sender.listMallsResult(dat);
		}

		__proto.listGoodsResult=function(dat){
			this.sender.listGoodsResult(dat);
		}

		__proto.purchaseResult=function(dat){
			this.sender.purchaseResult(dat);
		}

		return MallMessageHandler;
	})(MessageHandlerBase$1)


	/**
	*...
	*@author 贾艳昭
	*/
	//class logic.mail.MailMessageSender extends logic.MessageSenderBase
	var MailMessageSender$1=(function(_super){
		function MailMessageSender(game){
			MailMessageSender.__super.call(this,game);
		}

		__class(MailMessageSender,'logic.mail.MailMessageSender',_super,'MailMessageSender$1');
		var __proto=MailMessageSender.prototype;
		__proto.onGotAttachment=function(dat){
			this.game.hallMessager.send(MailMessageSender._hallMsgUrlPrefix+'onGotAttachment',dat);
		}

		__proto.onGotList=function(dat){
			this.game.hallMessager.send(MailMessageSender._hallMsgUrlPrefix+'onGotList',dat);
		}

		__proto.onGotUnreadMailCount=function(dat){
			this.game.hallMessager.send(MailMessageSender._hallMsgUrlPrefix+'onGotUnreadMailCount',dat);
		}

		__proto.onDeleted=function(dat){
			this.game.hallMessager.send(MailMessageSender._hallMsgUrlPrefix+'onDeleted',dat);
		}

		__proto.onRead=function(dat){
			this.game.hallMessager.send(MailMessageSender._hallMsgUrlPrefix+'onRead',dat);
		}

		__proto.onGotAnnouncementList=function(dat){
			this.game.hallMessager.send(MailMessageSender._hallMsgUrlPrefix+'onGotAnnouncementList',dat);
		}

		//以下发往服务器
		__proto.getAttachment=function(dat){
			this.game.socket.send(MailMessageSender._urlPrefix+'getAttachment',dat);
		}

		__proto.getList=function(dat){
			this.game.socket.send(MailMessageSender._urlPrefix+'getList',dat);
		}

		__proto.getUnreadMailCount=function(dat){
			this.game.socket.send(MailMessageSender._urlPrefix+'getUnreadMailCount',dat);
		}

		__proto.del=function(dat){
			this.game.socket.send(MailMessageSender._urlPrefix+'del',dat);
		}

		__proto.read=function(dat){
			this.game.socket.send(MailMessageSender._urlPrefix+'read',dat);
		}

		MailMessageSender._urlPrefix='room.mail.';
		MailMessageSender._hallMsgUrlPrefix='mail.';
		return MailMessageSender;
	})(MessageSenderBase$1)


	/**
	*...
	*@author 贾艳昭
	*/
	//class logic.mall.MallMessageSender extends logic.MessageSenderBase
	var MallMessageSender$1=(function(_super){
		function MallMessageSender(game){
			MallMessageSender.__super.call(this,game);
		}

		__class(MallMessageSender,'logic.mall.MallMessageSender',_super,'MallMessageSender$1');
		var __proto=MallMessageSender.prototype;
		__proto.listMalls=function(){
			this.game.socket.send(MallMessageSender._urlPrefix+'listMalls',{});
		}

		__proto.listGoods=function(mallId){
			this.game.socket.send(MallMessageSender._urlPrefix+'listGoods',{
				mallId:mallId
			});
		}

		__proto.purchase=function(mallId,goodsId,itemInGoodsId,backpackId,amount){
			this.game.socket.send(MallMessageSender._urlPrefix+'purchase',{
				mallId:mallId,
				goodsId:goodsId,
				itemInGoodsId:itemInGoodsId,
				backpackId:backpackId,
				amount:amount
			});
		}

		//下面是发送给游戏客户端的消息
		__proto.listMallsResult=function(dat){
			this.game.hallMessager.send(MallMessageSender._gameClientUrlPrefix+'listMallsResult',dat);
		}

		__proto.listGoodsResult=function(dat){
			this.game.hallMessager.send(MallMessageSender._gameClientUrlPrefix+'listGoodsResult',dat);
		}

		__proto.purchaseResult=function(dat){
			this.game.hallMessager.send(MallMessageSender._gameClientUrlPrefix+'purchaseResult',dat);
		}

		MallMessageSender._urlPrefix='room.mall.';
		MallMessageSender._gameClientUrlPrefix='mall.';
		return MallMessageSender;
	})(MessageSenderBase$1)


	/**
	*...
	*@author 贾艳昭
	*/
	//class logic.pay.PayMessageHandler extends logic.MessageHandlerBase
	var PayMessageHandler$1=(function(_super){
		function PayMessageHandler(game){
			this.sender=null;
			this._coinsPayItems=null;
			this._directPayItems=null;
			PayMessageHandler.__super.call(this,game);
			this.sender=new PayMessageSender$1(game);
		}

		__class(PayMessageHandler,'logic.pay.PayMessageHandler',_super,'PayMessageHandler$1');
		var __proto=PayMessageHandler.prototype;
		__proto.getPayItems=function(){
			Method.httpRequest(this.game.config.configcenter+'index.php?m=pay&a=getpayitems',{
				gameid:this.game.gameId
			},Handler.create(this,this.onGotPayItems));
		}

		__proto.buyPayItem=function(dat){
			Method.httpRequest(this.game.config.paycenter+'index.php?m=order&a=create',{
				gameid:this.game.gameId,
				payitemid:dat.id,
				payitemcount:dat.count,
				userid:this.game.user.getUserId()
			},Handler.create(this,this.onBoughtPayItems));
		}

		__proto.getCoinsPayItems=function(){
			Method.httpRequest(this.game.config.configcenter+'index.php?m=pay&a=getcoinspayitems',{
				gameid:this.game.gameId,
				unionid:Method.getUnionId()
			},Handler.create(this,this.onGotCoinsPayItems));
		}

		__proto.buyCoins=function(dat){
			Method.httpRequest(this.game.config.paycenter+'index.php?m=payorder&a=create',{
				gameid:this.game.gameId,
				userid:this.game.user.getUserId(),
				itemid:dat.id,
				unionid:Method.getUnionId(),
				itemcount:1,
				other:''
			},Handler.create(this,this.onPayOrderCreated));
		}

		__proto.getDirectPayItems=function(){
			this.sender.getDirectPayItems();
		}

		__proto.onGotDirectPayItems=function(dat){
			if (dat.code!=0){
				Method.log("onGotDirectPayItems 获取支付项失败:"+dat.code);
				}else{
				this._directPayItems={};
				for (var i=0;i < dat.list.length;i++){
					this._directPayItems[dat.list[i]['id']]=dat.list[i];
				}
				this.sender.onGotDirectPayItems(this._directPayItems);
			}
		}

		__proto.buyDirectPayItem=function(dat){
			this.sender.buyDirectPayItem(dat.id,1,'');
		}

		//},Handler.create(this,onDirectPayOrderCreated));
		__proto.onGotPayItems=function(dat){
			this.sender.onGotPayItems(dat);
		}

		__proto.onBoughtPayItems=function(dat){
			this.sender.onBoughtPayItems(dat);
		}

		__proto.onGotCoinsPayItems=function(dat){
			var tmp=JSON.parse(dat);
			this._coinsPayItems={};
			for (var i=0;i < tmp.length;i++){
				this._coinsPayItems[tmp[i]['id']]=tmp[i];
			}
			this.sender.onGotCoinsPayItems(this._coinsPayItems);
		}

		__proto.onPayOrderCreated=function(dat){
			dat=JSON.parse(dat);
			if (dat.code==0){
				if (!this._coinsPayItems){
					Method.log('需要先调用 getCoinsPayItems 方法 获得支付档位表');
					return;
				}
				this.game.user.Union.Pay(dat.data,this._coinsPayItems[dat.data.good_id]);
				}else {
				var err=new ErrorInfo$1();
				err.errorCode=dat.code;
				err.errorMessage=ErrorMsg.GetMsg(dat.code);
				this.sender.sendError(err);
			}
		}

		__proto.onDirectPayOrderCreated=function(dat){
			Method.log('直购订单创建完成',dat);
			if (dat.code==0){
				if (!this._directPayItems){
					Method.log('需要先调用 getDirectPayItems 方法 获得直购商品表');
					return;
				}
				this.game.user.Union.Pay(dat,this._directPayItems[dat.itemId]);
				}else {
				var err=new ErrorInfo$1();
				err.errorCode=dat.code;
				err.errorMessage=ErrorMsg.GetMsg(dat.code);
				this.sender.sendError(err);
			}
		}

		__proto.midasPay=function(dat){
			this.game.user.Union.midasPay(dat.count,dat.env);
		}

		__proto.onMidasPayResult=function(code,count){
			this.sender.onMidasPayResult(code,count);
		}

		__proto.getPlayZoneUserInfo=function(){
			this.sender.getPlayZoneUserInfo();
		}

		__proto.buyPlayZoneItem=function(orderId,itemId,itemCount){
			this.sender.buyPlayZoneItem(orderId,itemId,itemCount);
		}

		__proto.onPayFinish=function(code,count){
			this.sender.onPayFinish(code,count);
		}

		__proto.onGotPlayZoneUserInfo=function(dat){
			this.game.user.GetUnion().onGotPlayZoneUserInfo(dat);
		}

		__proto.onBuyPlayZoneItem=function(dat){
			this.game.user.GetUnion().onBuyPlayZoneItem(dat);
		}

		return PayMessageHandler;
	})(MessageHandlerBase$1)


	/**
	*...
	*@author 贾艳昭
	*/
	//class logic.pay.PayMessageSender extends logic.MessageSenderBase
	var PayMessageSender$1=(function(_super){
		function PayMessageSender(game){
			this._urlPrefix='pay.';
			PayMessageSender.__super.call(this,game);
		}

		__class(PayMessageSender,'logic.pay.PayMessageSender',_super,'PayMessageSender$1');
		var __proto=PayMessageSender.prototype;
		__proto.onGotPayItems=function(dat){
			Method.log('payitems:',dat);
		}

		__proto.onBoughtPayItems=function(dat){}
		__proto.onGotCoinsPayItems=function(dat){
			Method.log('coins payitems:',dat);
		}

		__proto.sendError=function(err){
			this.game.hallMessager.send(this._urlPrefix+'onPayError',err);
		}

		__proto.onGotDirectPayItems=function(dat){
			this.game.hallMessager.send(this._urlPrefix+'onGotDirectPayItems',dat);
		}

		__proto.buyDirectPayItem=function(itemId,count,other){
			this.game.socket.send('room.pay.buyDirectPayItem',{
				itemId:itemId,
				count:count,
				other:other
			});
		}

		__proto.getDirectPayItems=function(){
			this.game.socket.send('room.pay.getDirectPayItems',{});
		}

		__proto.onMidasPayResult=function(code,count){
			this.game.hallMessager.send(this._urlPrefix+'onMidasPayResult',{code:code,count:count});
		}

		__proto.getPlayZoneUserInfo=function(){
			this.game.socket.send('room.pay.getPlayZoneUserInfo',{
			});
		}

		__proto.buyPlayZoneItem=function(orderId,itemId,itemCount){
			this.game.socket.send('room.pay.buyPlayZoneItem',{
				billno:orderId,
				itemid:itemId,
				count:itemCount
			});
		}

		__proto.onPayFinish=function(code,count){
			this.game.hallMessager.send(this._urlPrefix+'onPayFinish',{code:code,count:count});
		}

		return PayMessageSender;
	})(MessageSenderBase$1)


	/**
	*...
	*@author 贾艳昭
	*/
	//class logic.room.RoomMessageHandler extends logic.MessageHandlerBase
	var RoomMessageHandler=(function(_super){
		function RoomMessageHandler(game){
			RoomMessageHandler.__super.call(this,game);
		}

		__class(RoomMessageHandler,'logic.room.RoomMessageHandler',_super);
		var __proto=RoomMessageHandler.prototype;
		__proto.onCreated=function(roomInfo){
			Room.onCreated(roomInfo);
		}

		__proto.onJoin=function(roomId,user){
			Method.log('用户',user,'加入了房间[',roomId,']');
		}

		return RoomMessageHandler;
	})(MessageHandlerBase$1)


	/**
	*...
	*@author 贾艳昭
	*/
	//class logic.social.FriendMessageHandler extends logic.MessageHandlerBase
	var FriendMessageHandler$1=(function(_super){
		function FriendMessageHandler(game){
			this.sender=null;
			FriendMessageHandler.__super.call(this,game);
			this.sender=new FriendMessageSender$1(game);
		}

		__class(FriendMessageHandler,'logic.social.FriendMessageHandler',_super,'FriendMessageHandler$1');
		var __proto=FriendMessageHandler.prototype;
		__proto.invite=function(dat){
			this.sender.invite(dat.targetId,dat.groupId,dat.params);
		}

		__proto.reject=function(dat){
			this.sender.reject(dat.targetId);
		}

		__proto.accept=function(dat){
			this.sender.accept(dat.targetId,dat.groupId,dat.params);
		}

		__proto.block=function(dat){
			this.sender.block(dat.targetId);
		}

		__proto.unblock=function(dat){
			this.sender.unblock(dat.targetId);
		}

		__proto.Delete=function(dat){
			this.sender.Delete(dat.targetId);
		}

		__proto.list=function(dat){
			this.sender.list();
		}

		__proto.move=function(dat){
			this.sender.move(dat.friendId,dat.groupId);
		}

		__proto.attention=function(dat){
			this.sender.attention(dat.friendId);
		}

		__proto.inattention=function(dat){
			this.sender.inattention(dat.friendId);
		}

		__proto.listInviting=function(){
			this.sender.listInviting();
		}

		__proto.listBeInGroup=function(dat){
			this.sender.listBeInGroup(dat.groupId);
		}

		//以下消息接收自服务器，发送至sdk
		__proto.inviteResult=function(dat){
			this.sender.inviteResult(dat);
		}

		__proto.rejectResult=function(dat){
			this.sender.rejectResult(dat);
		}

		__proto.acceptResult=function(dat){
			this.sender.acceptResult(dat);
		}

		__proto.blockResult=function(dat){
			this.sender.blockResult(dat);
		}

		__proto.unblockResult=function(dat){
			this.sender.unblockResult(dat);
		}

		__proto.deleteResult=function(dat){
			this.sender.deleteResult(dat);
		}

		__proto.listResult=function(dat){
			this.sender.listResult(dat);
		}

		__proto.moveResult=function(dat){
			this.sender.moveResult(dat);
		}

		__proto.online=function(dat){
			this.sender.online(dat);
		}

		__proto.offline=function(dat){
			this.sender.offline(dat);
		}

		__proto.joinRoom=function(dat){
			this.sender.joinRoom(dat);
		}

		__proto.leaveRoom=function(dat){
			this.sender.leaveRoom(dat);
		}

		__proto.invited=function(dat){
			this.sender.invited(dat);
		}

		__proto.rejected=function(dat){
			this.sender.rejected(dat);
		}

		__proto.accepted=function(dat){
			this.sender.accepted(dat);
		}

		__proto.blocked=function(dat){
			this.sender.blocked(dat);
		}

		__proto.unblocked=function(dat){
			this.sender.unblocked(dat);
		}

		__proto.deleted=function(dat){
			this.sender.deleted(dat);
		}

		__proto.moved=function(dat){
			this.sender.moved(dat);
		}

		__proto.attentionResult=function(dat){
			this.sender.attentionResult(dat);
		}

		__proto.inattentionResult=function(dat){
			this.sender.inattentionResult(dat);
		}

		__proto.listInvitingResult=function(dat){
			this.sender.listInvitingResult(dat);
		}

		__proto.listBeInGroupResult=function(dat){
			this.sender.listBeInGroupResult(dat);
		}

		__proto.attentioned=function(dat){
			this.sender.attentioned(dat);
		}

		__proto.joinTeam=function(dat){
			this.sender.joinTeam(dat);
		}

		__proto.leaveTeam=function(dat){
			this.sender.leaveTeam(dat);
		}

		return FriendMessageHandler;
	})(MessageHandlerBase$1)


	/**
	*...
	*@author 贾艳昭
	*/
	//class logic.social.FriendMessageSender extends logic.MessageSenderBase
	var FriendMessageSender$1=(function(_super){
		function FriendMessageSender(game){
			FriendMessageSender.__super.call(this,game);
		}

		__class(FriendMessageSender,'logic.social.FriendMessageSender',_super,'FriendMessageSender$1');
		var __proto=FriendMessageSender.prototype;
		__proto.invite=function(targetId,groupId,params){
			this.game.socket.send(FriendMessageSender._urlPrefix+'invite',{
				targetId:targetId,
				groupId:groupId,
				params:params
			});
		}

		__proto.reject=function(targetId){
			this.game.socket.send(FriendMessageSender._urlPrefix+'reject',{
				targetId:targetId
			});
		}

		__proto.accept=function(targetId,groupId,params){
			this.game.socket.send(FriendMessageSender._urlPrefix+'accept',{
				targetId:targetId,
				groupId:groupId,
				params:params
			});
		}

		__proto.block=function(targetId){
			this.game.socket.send(FriendMessageSender._urlPrefix+'block',{
				targetId:targetId
			});
		}

		__proto.unblock=function(targetId){
			this.game.socket.send(FriendMessageSender._urlPrefix+'unblock',{
				targetId:targetId
			});
		}

		__proto.Delete=function(targetId){
			this.game.socket.send(FriendMessageSender._urlPrefix+'delete',{
				targetId:targetId
			});
		}

		__proto.list=function(){
			this.game.socket.send(FriendMessageSender._urlPrefix+'list',{
			});
		}

		__proto.move=function(friendId,groupId){
			this.game.socket.send(FriendMessageSender._urlPrefix+'move',{
				friendId:friendId,
				groupId:groupId
			});
		}

		__proto.attention=function(friendId){
			this.game.socket.send(FriendMessageSender._urlPrefix+'attention',{
				friendId:friendId
			});
		}

		__proto.inattention=function(friendId){
			this.game.socket.send(FriendMessageSender._urlPrefix+'inattention',{
				friendId:friendId
			});
		}

		__proto.listInviting=function(){
			this.game.socket.send(FriendMessageSender._urlPrefix+'listInviting',{
			});
		}

		__proto.listBeInGroup=function(groupId){
			this.game.socket.send(FriendMessageSender._urlPrefix+'listBeInGroup',{
				groupId:groupId
			});
		}

		//以下消息发往sdk
		__proto.inviteResult=function(dat){
			this.game.hallMessager.send(FriendMessageSender._hallMsgUrlPrefix+'inviteResult',dat);
		}

		__proto.rejectResult=function(dat){
			this.game.hallMessager.send(FriendMessageSender._hallMsgUrlPrefix+'rejectResult',dat);
		}

		__proto.acceptResult=function(dat){
			this.game.hallMessager.send(FriendMessageSender._hallMsgUrlPrefix+'acceptResult',dat);
		}

		__proto.blockResult=function(dat){
			this.game.hallMessager.send(FriendMessageSender._hallMsgUrlPrefix+'blockResult',dat);
		}

		__proto.unblockResult=function(dat){
			this.game.hallMessager.send(FriendMessageSender._hallMsgUrlPrefix+'unblockResult',dat);
		}

		__proto.deleteResult=function(dat){
			this.game.hallMessager.send(FriendMessageSender._hallMsgUrlPrefix+'deleteResult',dat);
		}

		__proto.listResult=function(dat){
			this.game.hallMessager.send(FriendMessageSender._hallMsgUrlPrefix+'listResult',dat);
		}

		__proto.moveResult=function(dat){
			this.game.hallMessager.send(FriendMessageSender._hallMsgUrlPrefix+'moveResult',dat);
		}

		__proto.online=function(dat){
			this.game.hallMessager.send(FriendMessageSender._hallMsgUrlPrefix+'online',dat);
		}

		__proto.offline=function(dat){
			this.game.hallMessager.send(FriendMessageSender._hallMsgUrlPrefix+'offline',dat);
		}

		__proto.joinRoom=function(dat){
			this.game.hallMessager.send(FriendMessageSender._hallMsgUrlPrefix+'joinRoom',dat);
		}

		__proto.leaveRoom=function(dat){
			this.game.hallMessager.send(FriendMessageSender._hallMsgUrlPrefix+'leaveRoom',dat);
		}

		__proto.invited=function(dat){
			this.game.hallMessager.send(FriendMessageSender._hallMsgUrlPrefix+'invited',dat);
		}

		__proto.rejected=function(dat){
			this.game.hallMessager.send(FriendMessageSender._hallMsgUrlPrefix+'rejected',dat);
		}

		__proto.accepted=function(dat){
			this.game.hallMessager.send(FriendMessageSender._hallMsgUrlPrefix+'accepted',dat);
		}

		__proto.blocked=function(dat){
			this.game.hallMessager.send(FriendMessageSender._hallMsgUrlPrefix+'blocked',dat);
		}

		__proto.unblocked=function(dat){
			this.game.hallMessager.send(FriendMessageSender._hallMsgUrlPrefix+'unblocked',dat);
		}

		__proto.deleted=function(dat){
			this.game.hallMessager.send(FriendMessageSender._hallMsgUrlPrefix+'deleted',dat);
		}

		__proto.moved=function(dat){
			this.game.hallMessager.send(FriendMessageSender._hallMsgUrlPrefix+'moved',dat);
		}

		__proto.attentionResult=function(dat){
			this.game.hallMessager.send(FriendMessageSender._hallMsgUrlPrefix+'attentionResult',dat);
		}

		__proto.inattentionResult=function(dat){
			this.game.hallMessager.send(FriendMessageSender._hallMsgUrlPrefix+'inattentionResult',dat);
		}

		__proto.listInvitingResult=function(dat){
			this.game.hallMessager.send(FriendMessageSender._hallMsgUrlPrefix+'listInvitingResult',dat);
		}

		__proto.listBeInGroupResult=function(dat){
			this.game.hallMessager.send(FriendMessageSender._hallMsgUrlPrefix+'listBeInGroupResult',dat);
		}

		__proto.attentioned=function(dat){
			this.game.hallMessager.send(FriendMessageSender._hallMsgUrlPrefix+'attentioned',dat);
		}

		__proto.joinTeam=function(dat){
			this.game.hallMessager.send(FriendMessageSender._hallMsgUrlPrefix+'joinTeam',dat);
		}

		__proto.leaveTeam=function(dat){
			this.game.hallMessager.send(FriendMessageSender._hallMsgUrlPrefix+'leaveTeam',dat);
		}

		FriendMessageSender._urlPrefix='social.friend.';
		FriendMessageSender._hallMsgUrlPrefix='friend.';
		return FriendMessageSender;
	})(MessageSenderBase$1)


	/**
	*...
	*@author 贾艳昭
	*/
	//class logic.user.UserMessageHandler extends logic.MessageHandlerBase
	var UserMessageHandler$1=(function(_super){
		function UserMessageHandler(game){
			UserMessageHandler.__super.call(this,game);
		}

		__class(UserMessageHandler,'logic.user.UserMessageHandler',_super,'UserMessageHandler$1');
		var __proto=UserMessageHandler.prototype;
		__proto.Login=function(){
			this.game.user.Login2Union();
		}

		__proto.onLogined=function(user){
			var u=new UserInfo$1(user);
			this.game.user.onLogin2Router(u);
		}

		__proto.togame=function(data){
			this.game.onStartFight(data);
		}

		//this.game.openClient(data);
		__proto.datachg=function(data){
			this.game.user.onDataChg(data);
		}

		__proto.error=function(code){
			this.game.user.onUserError(code);
		}

		__proto.updateBasicData=function(data){
			this.game.user.updateBasicData(data.nkname,data.gender,data.avtor);
		}

		__proto.getRandomName=function(){
			this.game.user.getRandomName();
		}

		__proto.randomname=function(nknames){
			this.game.user.addRandomNamePool(nknames);
		}

		__proto.money=function(money){
			this.game.user.chgMoney(money);
		}

		__proto.getUserRankResult=function(dat){
			this.game.user.onGotMyRanks(dat.UserRanks);
		}

		__proto.getReward=function(dat){
			this.game.user.getReward(dat);
		}

		__proto.getRewardData=function(dat){
			this.game.user.getRewardData(dat);
		}

		__proto.getGameData=function(dat){
			this.game.user.getGameData(dat);
		}

		__proto.getGameDataResult=function(dat){
			this.game.user.getGameDataResult(dat);
		}

		__proto.rewarddata=function(dat){
			this.game.user.onGotRewardData(dat);
		}

		__proto.setClientObject=function(dat){
			this.game.user.setClientObject(dat);
		}

		__proto.setClientObjectResult=function(dat){
			this.game.user.onGotClientObjectResult(dat);
		}

		__proto.getLastRoom=function(){
			this.game.user.getLastRoom();
		}

		__proto.onGotLastRoom=function(roomId){
			this.game.user.onGotLastRoom(roomId);
		}

		__proto.searchByUId=function(dat){
			this.game.user.searchByUId(dat.targetId);
		}

		__proto.searchByUIdResult=function(dat){
			this.game.user.searchByUIdResult(dat);
		}

		__proto.createTeam=function(dat){
			this.game.user.createTeam(dat.type,dat.displayInList);
		}

		__proto.leaveTeam=function(dat){
			this.game.user.leaveTeam();
		}

		__proto.joinTeam=function(dat){
			this.game.user.joinTeam(dat.team,dat.payload);
		}

		__proto.inviteTeam=function(dat){
			this.game.user.inviteTeam(dat.to,dat.payload);
		}

		__proto.kickTeam=function(dat){
			this.game.user.kickTeam(dat.to);
		}

		__proto.teamPlay=function(dat){
			this.game.user.teamPlay();
		}

		__proto.teamReady=function(dat){
			this.game.user.teamReady(dat.ready);
		}

		__proto.onTeamReady=function(dat){
			this.game.user.onTeamReady(dat);
		}

		__proto.teamCreated=function(dat){
			this.game.user.teamCreated(dat);
		}

		__proto.teamInvite=function(dat){
			this.game.user.teamInvite(dat);
		}

		__proto.teamJoined=function(dat){
			this.game.user.teamJoined(dat);
		}

		__proto.teamLeft=function(dat){
			this.game.user.teamLeft(dat);
		}

		__proto.getRandomTeamList=function(dat){
			this.game.user.getRandomTeamList(dat.type,dat.count);
		}

		__proto.getExtraTeamList=function(dat){
			this.game.user.getExtraTeamList(dat.type,dat.count,dat.exclude);
		}

		/**
		*更新队伍信息
		*@param displayInList 设置是否在列表中出现,1=出现,0=不出现,-1=不修改
		*@param payload 队伍自定义扩展信息,null=不修改
		*/
		__proto.updateTeam=function(dat){
			this.game.user.updateTeam(dat.displayInList,dat.payload);
		}

		__proto.refreshTeamInfo=function(dat){
			this.game.user.refreshTeamInfo(dat.teamIdList);
		}

		__proto.onGotRandomTeamList=function(dat){
			this.game.user.onGotRandomTeamList(dat);
		}

		__proto.onGotExtraTeamList=function(dat){
			this.game.user.onGotExtraTeamList(dat);
		}

		__proto.onTeamUpdated=function(dat){
			this.game.user.onTeamUpdated(dat);
		}

		__proto.onTeamInfoRefreshed=function(dat){
			this.game.user.onTeamInfoRefreshed(dat);
		}

		__proto.queryByOpenId=function(openIds){
			this.game.user.queryByOpenId(openIds);
		}

		__proto.queryByOpenIdResult=function(dat){
			this.game.user.queryByOpenIdResult(dat);
		}

		__proto.attention=function(userIds){
			this.game.user.attention(userIds);
		}

		__proto.attentionResult=function(dat){
			this.game.user.attentionResult(dat);
		}

		__proto.inattention=function(userIds){
			this.game.user.inattention(userIds);
		}

		__proto.inattentionResult=function(dat){
			this.game.user.inattentionResult(dat);
		}

		__proto.sendMessage=function(dat){
			this.game.user.sendMessage(dat);
		}

		__proto.sendMessageResult=function(dat){
			this.game.user.sendMessageResult(dat);
		}

		__proto.receiveMessage=function(dat){
			this.game.user.receiveMessage(dat);
		}

		__proto.onOtherUserBasicDataChange=function(dat){
			this.game.user.onOtherUserBasicDataChange(dat);
		}

		__proto.onAuthCodeResult=function(dat){
			this.game.user.GetUnion().onAuthCodeResult(dat);
		}

		return UserMessageHandler;
	})(MessageHandlerBase$1)


	/**
	*...
	*@author 贾艳昭
	*/
	//class logic.user.UserBasicDataInfo extends logic.user.UserShortDataInfo
	var UserBasicDataInfo$1=(function(_super){
		function UserBasicDataInfo(){
			this.Money=0;
			this.MemberExpireTime=0;
			this.userId=0;
			this.NKNameIP=null;
			this.AvtorIP=null;
			UserBasicDataInfo.__super.call(this);
		}

		__class(UserBasicDataInfo,'logic.user.UserBasicDataInfo',_super,'UserBasicDataInfo$1');
		var __proto=UserBasicDataInfo.prototype;
		__proto.setData=function(data){
			var arr=data.split(':');
			this.NkName=arr[0];
			this.Avtor=arr[1];
			this.Level=arr[2];
			this.Grade=arr[3];
			this.Money=arr[4];
			this.Gender=arr[5];
			this.MemberExpireTime=arr[6];
			this.userId=arr[7];
			this.NKNameIP=arr[8];
			this.AvtorIP=arr[9];
		}

		return UserBasicDataInfo;
	})(UserShortDataInfo$1)


	/**
	*...
	*@author luohuantao
	*/
	//class statm.vo.fight_exit extends statm.vo.statBase
	var fight_exit=(function(_super){
		function fight_exit(){
			this.roomid=0;
			this.type=0;
			fight_exit.__super.call(this);
		}

		__class(fight_exit,'statm.vo.fight_exit',_super);
		var __proto=fight_exit.prototype;
		__proto.writeToObj=function(obj){
			_super.prototype.writeToObj.call(this,obj);
			obj.content=this.roomid+"";
			obj.content1=this.type+"";
		}

		return fight_exit;
	})(statBase)


	/**
	*教学模式埋点
	*@author xiaosong
	*@date-2017-05-02
	*/
	//class statm.vo.NStatTeach extends statm.vo.statBase
	var NStatTeach=(function(_super){
		function NStatTeach(){
			this.time=NaN;
			this.p0=null;
			this.type=0;
			NStatTeach.__super.call(this);
		}

		__class(NStatTeach,'statm.vo.NStatTeach',_super);
		return NStatTeach;
	})(statBase)


	/**
	*...
	*@author ...
	*/
	//class statm.vo.StatBtnClick extends statm.vo.statBase
	var StatBtnClick=(function(_super){
		function StatBtnClick(){
			this.type=null;
			StatBtnClick.__super.call(this);
		}

		__class(StatBtnClick,'statm.vo.StatBtnClick',_super);
		StatBtnClick.JIESUAN3V3="jiesuan3v3";
		StatBtnClick.FIGHTBACK="fightBack";
		StatBtnClick.MUSICCLOSE="musicClose";
		return StatBtnClick;
	})(statBase)


	/**
	*...
	*@author ...
	*/
	//class statm.vo.StatBuy extends statm.vo.statBase
	var StatBuy=(function(_super){
		function StatBuy(){
			this.type=0;
			StatBuy.__super.call(this);
		}

		__class(StatBuy,'statm.vo.StatBuy',_super);
		return StatBuy;
	})(statBase)


	/**
	*页面打开次数统计
	*@author luohuantao
	*/
	//class statm.vo.StatOpenPage extends statm.vo.statBase
	var StatOpenPage=(function(_super){
		function StatOpenPage(){
			this.showpage=null;
			this.type=0;
			StatOpenPage.__super.call(this);
		}

		__class(StatOpenPage,'statm.vo.StatOpenPage',_super);
		var __proto=StatOpenPage.prototype;
		__proto.writeToObj=function(obj){
			_super.prototype.writeToObj.call(this,obj);
			obj.content=this.showpage+"";
			obj.content1=this.type+"";
		}

		return StatOpenPage;
	})(statBase)


	/**
	*战斗开始 发送当前 操作模式埋点
	*@author luohuantao
	*/
	//class statm.vo.StatOpmodeByGrade extends statm.vo.statBase
	var StatOpmodeByGrade=(function(_super){
		function StatOpmodeByGrade(){
			this.mode=0;
			this.grade=0;
			this.showtotal=null;
			StatOpmodeByGrade.__super.call(this);
		}

		__class(StatOpmodeByGrade,'statm.vo.StatOpmodeByGrade',_super);
		var __proto=StatOpmodeByGrade.prototype;
		__proto.writeToObj=function(obj){
			_super.prototype.writeToObj.call(this,obj);
			obj.content=this.grade+"";
			obj.content1=this.mode+"";
		}

		return StatOpmodeByGrade;
	})(statBase)


	/**
	*...
	*@author ...
	*/
	//class statm.vo.StatShare extends statm.vo.statBase
	var StatShare=(function(_super){
		function StatShare(){
			this.type=null;
			this.showcount="show";
			StatShare.__super.call(this);
		}

		__class(StatShare,'statm.vo.StatShare',_super);
		var __proto=StatShare.prototype;
		__proto.writeToObj=function(obj){
			_super.prototype.writeToObj.call(this,obj);
			obj.content=this.type+"";
		}

		return StatShare;
	})(statBase)


	/**
	*...
	*@author ...
	*/
	//class statm.vo.StatShareHd extends statm.vo.statBase
	var StatShareHd=(function(_super){
		function StatShareHd(){
			this.userid02=null;
			StatShareHd.__super.call(this);
		}

		__class(StatShareHd,'statm.vo.StatShareHd',_super);
		var __proto=StatShareHd.prototype;
		__proto.writeToObj=function(obj){
			_super.prototype.writeToObj.call(this,obj);
			obj.content=this.userid02+"";
		}

		return StatShareHd;
	})(statBase)


	/**
	*...
	*@author ...
	*/
	//class statm.vo.StatShareNewUser extends statm.vo.statBase
	var StatShareNewUser=(function(_super){
		function StatShareNewUser(){
			this.type=null;
			this.userid02=0;
			StatShareNewUser.__super.call(this);
		}

		__class(StatShareNewUser,'statm.vo.StatShareNewUser',_super);
		var __proto=StatShareNewUser.prototype;
		__proto.writeToObj=function(obj){
			_super.prototype.writeToObj.call(this,obj);
			obj.content=this.userid02+"";
			obj.content1=this.type+"";
		}

		return StatShareNewUser;
	})(statBase)


	/**
	*...
	*@author luohuantao
	*/
	//class statm.vo.StatTbs extends statm.vo.statBase
	var StatTbs=(function(_super){
		function StatTbs(){
			this.tbs=null;
			StatTbs.__super.call(this);
		}

		__class(StatTbs,'statm.vo.StatTbs',_super);
		var __proto=StatTbs.prototype;
		__proto.writeToObj=function(obj){
			_super.prototype.writeToObj.call(this,obj);
			obj.content=this.tbs;
		}

		return StatTbs;
	})(statBase)


	/**
	*下午8:18:08
	*2017-5-16
	*...
	*@zcc
	*/
	//class statm.vo.TeachAction extends statm.vo.statBase
	var TeachAction=(function(_super){
		function TeachAction(){
			this.level=null;
			TeachAction.__super.call(this);
		}

		__class(TeachAction,'statm.vo.TeachAction',_super);
		var __proto=TeachAction.prototype;
		__proto.writeToObj=function(obj){
			_super.prototype.writeToObj.call(this,obj);
			obj.content=this.level+"";
		}

		return TeachAction;
	})(statBase)


	/**
	*大冒险统计
	*@author Administrator
	*
	*/
	//class statm.vo.WheelBase extends statm.vo.statBase
	var WheelBase=(function(_super){
		function WheelBase(){
			this.type=0;
			WheelBase.__super.call(this);
		}

		__class(WheelBase,'statm.vo.WheelBase',_super);
		var __proto=WheelBase.prototype;
		__proto.writeToObj=function(obj){
			_super.prototype.writeToObj.call(this,obj);
			obj.content=this.type+"";
		}

		return WheelBase;
	})(statBase)


	/**
	*<code>AutoBitmap</code> 类是用于表示位图图像或绘制图形的显示对象。
	*<p>封装了位置，宽高及九宫格的处理，供UI组件使用。</p>
	*/
	//class laya.ui.AutoBitmap extends laya.display.Graphics
	var AutoBitmap=(function(_super){
		function AutoBitmap(){
			this.autoCacheCmd=true;
			this._width=0;
			this._height=0;
			this._source=null;
			this._sizeGrid=null;
			this._isChanged=false;
			this._offset=null;
			AutoBitmap.__super.call(this);
		}

		__class(AutoBitmap,'laya.ui.AutoBitmap',_super);
		var __proto=AutoBitmap.prototype;
		/**@inheritDoc */
		__proto.destroy=function(){
			_super.prototype.destroy.call(this);
			this._source=null;
			this._sizeGrid=null;
			this._offset=null;
		}

		/**@private */
		__proto._setChanged=function(){
			if (!this._isChanged){
				this._isChanged=true;
				Laya.timer.callLater(this,this.changeSource);
			}
		}

		/**
		*@private
		*修改纹理资源。
		*/
		__proto.changeSource=function(){
			if (AutoBitmap.cacheCount++> 50)AutoBitmap.clearCache();
			this._isChanged=false;
			var source=this._source;
			if (!source || !source.bitmap)return;
			var width=this.width;
			var height=this.height;
			var sizeGrid=this._sizeGrid;
			var sw=source.sourceWidth;
			var sh=source.sourceHeight;
			if (!sizeGrid || (sw===width && sh===height)){
				this.cleanByTexture(source,this._offset ? this._offset[0] :0,this._offset ? this._offset[1] :0,width,height);
				}else {
				source.$_GID || (source.$_GID=Utils$2.getGID());
				var key=source.$_GID+"."+width+"."+height+"."+sizeGrid.join(".");
				if (AutoBitmap.cmdCaches[key]){
					this.cmds=AutoBitmap.cmdCaches[key];
					return;
				}
				this.clear();
				var top=sizeGrid[0];
				var right=sizeGrid[1];
				var bottom=sizeGrid[2];
				var left=sizeGrid[3];
				var repeat=sizeGrid[4];
				var needClip=false;
				if (left+right > width){
					var clipWidth=width;
					needClip=true;
					width=left+right;
				}
				if (needClip){
					this.save();
					this.clipRect(0,0,clipWidth,height);
				}
				left && top && this.drawTexture(AutoBitmap.getTexture(source,0,0,left,top),0,0,left,top);
				right && top && this.drawTexture(AutoBitmap.getTexture(source,sw-right,0,right,top),width-right,0,right,top);
				left && bottom && this.drawTexture(AutoBitmap.getTexture(source,0,sh-bottom,left,bottom),0,height-bottom,left,bottom);
				right && bottom && this.drawTexture(AutoBitmap.getTexture(source,sw-right,sh-bottom,right,bottom),width-right,height-bottom,right,bottom);
				top && this.drawBitmap(repeat,AutoBitmap.getTexture(source,left,0,sw-left-right,top),left,0,width-left-right,top);
				bottom && this.drawBitmap(repeat,AutoBitmap.getTexture(source,left,sh-bottom,sw-left-right,bottom),left,height-bottom,width-left-right,bottom);
				left && this.drawBitmap(repeat,AutoBitmap.getTexture(source,0,top,left,sh-top-bottom),0,top,left,height-top-bottom);
				right && this.drawBitmap(repeat,AutoBitmap.getTexture(source,sw-right,top,right,sh-top-bottom),width-right,top,right,height-top-bottom);
				this.drawBitmap(repeat,AutoBitmap.getTexture(source,left,top,sw-left-right,sh-top-bottom),left,top,width-left-right,height-top-bottom);
				if (needClip)this.restore();
				if (this.autoCacheCmd && !Render.isConchApp)AutoBitmap.cmdCaches[key]=this.cmds;
			}
			this._repaint();
		}

		__proto.drawBitmap=function(repeat,tex,x,y,width,height){
			(width===void 0)&& (width=0);
			(height===void 0)&& (height=0);
			if (width < 0.1 || height < 0.1)return;
			if (repeat && (tex.width!=width || tex.height !=height))this.fillTexture(tex,x,y,width,height);
			else this.drawTexture(tex,x,y,width,height);
		}

		__proto.clear=function(recoverCmds){
			(recoverCmds===void 0)&& (recoverCmds=true);
			_super.prototype.clear.call(this,false);
		}

		/**
		*当前实例的有效缩放网格数据。
		*<p>如果设置为null,则在应用任何缩放转换时，将正常缩放整个显示对象。</p>
		*<p>数据格式：[上边距,右边距,下边距,左边距,是否重复填充(值为0：不重复填充，1：重复填充)]。
		*<ul><li>例如：[4,4,4,4,1]</li></ul></p>
		*<p> <code>sizeGrid</code> 的值如下所示：
		*<ol>
		*<li>上边距</li>
		*<li>右边距</li>
		*<li>下边距</li>
		*<li>左边距</li>
		*<li>是否重复填充(值为0：不重复填充，1：重复填充)</li>
		*</ol></p>
		*<p>当定义 <code>sizeGrid</code> 属性时，该显示对象被分割到以 <code>sizeGrid</code> 数据中的"上边距,右边距,下边距,左边距" 组成的矩形为基础的具有九个区域的网格中，该矩形定义网格的中心区域。网格的其它八个区域如下所示：
		*<ul>
		*<li>矩形上方的区域</li>
		*<li>矩形外的右上角</li>
		*<li>矩形左侧的区域</li>
		*<li>矩形右侧的区域</li>
		*<li>矩形外的左下角</li>
		*<li>矩形下方的区域</li>
		*<li>矩形外的右下角</li>
		*<li>矩形外的左上角</li>
		*</ul>
		*同时也支持3宫格，比如0,4,0,4,1为水平3宫格，4,0,4,0,1为垂直3宫格，3宫格性能比9宫格高。
		*</p>
		*/
		__getset(0,__proto,'sizeGrid',function(){
			return this._sizeGrid;
			},function(value){
			this._sizeGrid=value;
			this._setChanged();
		});

		/**
		*表示显示对象的宽度，以像素为单位。
		*/
		__getset(0,__proto,'width',function(){
			if (this._width)return this._width;
			if (this._source)return this._source.sourceWidth;
			return 0;
			},function(value){
			if (this._width !=value){
				this._width=value;
				this._setChanged();
			}
		});

		/**
		*表示显示对象的高度，以像素为单位。
		*/
		__getset(0,__proto,'height',function(){
			if (this._height)return this._height;
			if (this._source)return this._source.sourceHeight;
			return 0;
			},function(value){
			if (this._height !=value){
				this._height=value;
				this._setChanged();
			}
		});

		/**
		*对象的纹理资源。
		*@see laya.resource.Texture
		*/
		__getset(0,__proto,'source',function(){
			return this._source;
			},function(value){
			if (value){
				this._source=value
				this._setChanged();
				}else {
				this._source=null;
				this.clear();
			}
		});

		AutoBitmap.getTexture=function(tex,x,y,width,height){
			if (width <=0)width=1;
			if (height <=0)height=1;
			tex.$_GID || (tex.$_GID=Utils$2.getGID())
			var key=tex.$_GID+"."+x+"."+y+"."+width+"."+height;
			var texture=AutoBitmap.textureCache[key];
			if (!texture){
				texture=AutoBitmap.textureCache[key]=Texture.createFromTexture(tex,x,y,width,height);
			}
			return texture;
		}

		AutoBitmap.clearCache=function(){
			AutoBitmap.cacheCount=0;
			AutoBitmap.cmdCaches={};
			AutoBitmap.textureCache={};
		}

		AutoBitmap.setCache=function(key,value){
			AutoBitmap.cacheCount++;
			AutoBitmap.textureCache[key]=value;
		}

		AutoBitmap.getCache=function(key){
			return AutoBitmap.textureCache[key];
		}

		AutoBitmap.cmdCaches={};
		AutoBitmap.cacheCount=0;
		AutoBitmap.textureCache={};
		return AutoBitmap;
	})(Graphics)


	/**
	*@private
	*<code>CSSStyle</code> 类是元素CSS样式定义类。
	*/
	//class laya.display.css.CSSStyle extends laya.display.css.Style
	var CSSStyle=(function(_super){
		function CSSStyle(ower){
			this._bgground=null;
			this._border=null;
			//this._ower=null;
			this._rect=null;
			this.lineHeight=0;
			CSSStyle.__super.call(this);
			this._padding=CSSStyle._PADDING;
			this._spacing=CSSStyle._SPACING;
			this._aligns=CSSStyle._ALIGNS;
			this._font=Font.EMPTY;
			this._ower=ower;
		}

		__class(CSSStyle,'laya.display.css.CSSStyle',_super);
		var __proto=CSSStyle.prototype;
		/**@inheritDoc */
		__proto.destroy=function(){
			this._ower=null;
			this._font=null;
			this._rect=null;
		}

		/**
		*复制传入的 CSSStyle 属性值。
		*@param src 待复制的 CSSStyle 对象。
		*/
		__proto.inherit=function(src){
			this._font=src._font;
			this._spacing=src._spacing===CSSStyle._SPACING ? CSSStyle._SPACING :src._spacing.slice();
			this.lineHeight=src.lineHeight;
		}

		/**@private */
		__proto._widthAuto=function(){
			return (this._type & 0x40000)!==0;
		}

		/**@inheritDoc */
		__proto.widthed=function(sprite){
			return (this._type & 0x8)!=0;
		}

		/**
		*@private
		*/
		__proto._calculation=function(type,value){
			if (value.indexOf('%')< 0)return false;
			var ower=this._ower;
			var parent=ower.parent;
			var rect=this._rect;
			function getValue (pw,w,nums){
				return (pw *nums[0]+w *nums[1]+nums[2]);
			}
			function onParentResize (type){
				var pw=parent.width,w=ower.width;
				rect.width && (ower.width=getValue(pw,w,rect.width));
				rect.height && (ower.height=getValue(pw,w,rect.height));
				rect.left && (ower.x=getValue(pw,w,rect.left));
				rect.top && (ower.y=getValue(pw,w,rect.top));
			}
			if (rect===null){
				parent._getCSSStyle()._type |=0x80000;
				parent.on("resize",this,onParentResize);
				this._rect=rect={input:{}};
			};
			var nums=value.split(' ');
			nums[0]=parseFloat(nums[0])/ 100;
			if (nums.length==1)
				nums[1]=nums[2]=0;
			else {
				nums[1]=parseFloat(nums[1])/ 100;
				nums[2]=parseFloat(nums[2]);
			}
			rect[type]=nums;
			rect.input[type]=value;
			onParentResize(type);
			return true;
		}

		/**
		*是否已设置高度。
		*@param sprite 显示对象 Sprite。
		*@return 一个Boolean 表示是否已设置高度。
		*/
		__proto.heighted=function(sprite){
			return (this._type & 0x2000)!=0;
		}

		/**
		*设置宽高。
		*@param w 宽度。
		*@param h 高度。
		*/
		__proto.size=function(w,h){
			var ower=this._ower;
			var resize=false;
			if (w!==-1 && w !=this._ower.width){
				this._type |=0x8;
				this._ower.width=w;
				resize=true;
			}
			if (h!==-1 && h !=this._ower.height){
				this._type |=0x2000;
				this._ower.height=h;
				resize=true;
			}
			if (resize){
				ower._layoutLater();
				(this._type & 0x80000)&& ower.event("resize",this);
			}
		}

		/**@private */
		__proto._getAlign=function(){
			return this._aligns[0];
		}

		/**@private */
		__proto._getValign=function(){
			return this._aligns[1];
		}

		/**@private */
		__proto._getCssFloat=function(){
			return (this._type & 0x8000)!=0 ? 0x8000 :0;
		}

		__proto._createFont=function(){
			return (this._type & 0x1000)? this._font :(this._type |=0x1000,this._font=new Font(this._font));
		}

		/**@inheritDoc */
		__proto.render=function(sprite,context,x,y){
			var w=sprite.width;
			var h=sprite.height;
			x-=sprite.pivotX;
			y-=sprite.pivotY;
			this._bgground && this._bgground.color !=null && context.ctx.fillRect(x,y,w,h,this._bgground.color);
			this._border && this._border.color && context.drawRect(x,y,w,h,this._border.color.strColor,this._border.size);
		}

		/**@inheritDoc */
		__proto.getCSSStyle=function(){
			return this;
		}

		/**
		*设置 CSS 样式字符串。
		*@param text CSS样式字符串。
		*/
		__proto.cssText=function(text){
			this.attrs(CSSStyle.parseOneCSS(text,';'));
		}

		/**
		*根据传入的属性名、属性值列表，设置此对象的属性值。
		*@param attrs 属性名与属性值列表。
		*/
		__proto.attrs=function(attrs){
			if (attrs){
				for (var i=0,n=attrs.length;i < n;i++){
					var attr=attrs[i];
					this[attr[0]]=attr[1];
				}
			}
		}

		/**@inheritDoc */
		__proto.setTransform=function(value){
			(value==='none')? (this._tf=Style._TF_EMPTY):this.attrs(CSSStyle.parseOneCSS(value,','));
		}

		/**
		*定义 X 轴、Y 轴移动转换。
		*@param x X 轴平移量。
		*@param y Y 轴平移量。
		*/
		__proto.translate=function(x,y){
			this._tf===Style._TF_EMPTY && (this._tf=new TransformInfo());
			this._tf.translateX=x;
			this._tf.translateY=y;
		}

		/**
		*定义 缩放转换。
		*@param x X 轴缩放值。
		*@param y Y 轴缩放值。
		*/
		__proto.scale=function(x,y){
			this._tf===Style._TF_EMPTY && (this._tf=new TransformInfo());
			this._tf.scaleX=x;
			this._tf.scaleY=y;
		}

		/**@private */
		__proto._enableLayout=function(){
			return (this._type & 0x2)===0 && (this._type & 0x4)===0;
		}

		/**
		*是否显示为块级元素。
		*/
		__getset(0,__proto,'block',_super.prototype._$get_block,function(value){
			value ? (this._type |=0x1):(this._type &=(~0x1));
		});

		/**
		*垂直对齐方式。
		*/
		__getset(0,__proto,'valign',function(){
			return CSSStyle._valigndef[this._aligns[1]];
			},function(value){
			this._aligns===CSSStyle._ALIGNS && (this._aligns=[0,0,0]);
			this._aligns[1]=CSSStyle._valigndef[value];
		});

		/**
		*高度。
		*/
		__getset(0,__proto,'height',null,function(h){
			this._type |=0x2000;
			if ((typeof h=='string')){
				if (this._calculation("height",h))return;
				h=parseInt(h);
			}
			this.size(-1,h);
		});

		/**
		*宽度。
		*/
		__getset(0,__proto,'width',null,function(w){
			this._type |=0x8;
			if ((typeof w=='string')){
				var offset=w.indexOf('auto');
				if (offset >=0){
					this._type |=0x40000;
					w=w.substr(0,offset);
				}
				if (this._calculation("width",w))return;
				w=parseInt(w);
			}
			this.size(w,-1);
		});

		/**
		*字体粗细。
		*/
		__getset(0,__proto,'fontWeight',function(){
			return this._font.weight;
			},function(value){
			this._createFont().weight=value;
		});

		/**
		*表示左边距。
		*/
		__getset(0,__proto,'left',null,function(value){
			var ower=this._ower;
			if (((typeof value=='string'))){
				if (value==="center")
					value="50% -50% 0";
				else if (value==="right")
				value="100% -100% 0";
				if (this._calculation("left",value))return;
				value=parseInt(value);
			}
			ower.x=value;
		});

		__getset(0,__proto,'_translate',null,function(value){
			this.translate(value[0],value[1]);
		});

		/**@inheritDoc */
		__getset(0,__proto,'absolute',function(){
			return (this._type & 0x4)!==0;
		});

		/**
		*表示上边距。
		*/
		__getset(0,__proto,'top',null,function(value){
			var ower=this._ower;
			if (((typeof value=='string'))){
				if (value==="middle")
					value="50% -50% 0";
				else if (value==="bottom")
				value="100% -100% 0";
				if (this._calculation("top",value))return;
				value=parseInt(value);
			}
			ower.y=value;
		});

		/**
		*水平对齐方式。
		*/
		__getset(0,__proto,'align',function(){
			return CSSStyle._aligndef[this._aligns[0]];
			},function(value){
			this._aligns===CSSStyle._ALIGNS && (this._aligns=[0,0,0]);
			this._aligns[0]=CSSStyle._aligndef[value];
		});

		/**
		*表示是否加粗。
		*/
		__getset(0,__proto,'bold',function(){
			return this._font.bold;
			},function(value){
			this._createFont().bold=value;
		});

		/**
		*边距信息。
		*/
		__getset(0,__proto,'padding',function(){
			return this._padding;
			},function(value){
			this._padding=value;
		});

		/**
		*行间距。
		*/
		__getset(0,__proto,'leading',function(){
			return this._spacing[1];
			},function(d){
			((typeof d=='string'))&& (d=parseInt(d+""));
			this._spacing===CSSStyle._SPACING && (this._spacing=[0,0]);
			this._spacing[1]=d;
		});

		/**
		*是否是行元素。
		*/
		__getset(0,__proto,'lineElement',function(){
			return (this._type & 0x10000)!=0;
			},function(value){
			value ? (this._type |=0x10000):(this._type &=(~0x10000));
		});

		/**
		*浮动方向。
		*/
		__getset(0,__proto,'cssFloat',function(){
			return (this._type & 0x8000)!=0 ? "right" :"left";
			},function(value){
			this.lineElement=false;
			value==="right" ? (this._type |=0x8000):(this._type &=(~0x8000));
		});

		/**
		*添加到文本的修饰。
		*/
		__getset(0,__proto,'textDecoration',function(){
			return this._font.decoration;
			},function(value){
			this._createFont().decoration=value;
		});

		/**
		*设置如何处理元素内的空白。
		*/
		__getset(0,__proto,'whiteSpace',function(){
			return (this._type & 0x20000)? "nowrap" :"";
			},function(type){
			type==="nowrap" && (this._type |=0x20000);
			type==="none" && (this._type &=~0x20000);
		});

		__getset(0,__proto,'background',null,function(value){
			if (!value){
				this._bgground=null;
				return;
			}
			this._bgground || (this._bgground={});
			this._bgground.color=value;
			this._ower.conchModel && this._ower.conchModel.bgColor(value);
			this._type |=0x4000;
			this._ower._renderType |=0x100;
		});

		/**
		*表示是否换行。
		*/
		__getset(0,__proto,'wordWrap',function(){
			return (this._type & 0x20000)===0;
			},function(value){
			value ? (this._type &=~0x20000):(this._type |=0x20000);
		});

		/**
		*字体颜色。
		*/
		__getset(0,__proto,'color',function(){
			return this._font.color;
			},function(value){
			this._createFont().color=value;
		});

		/**
		*<p>指定文本字段是否是密码文本字段。</p>
		*如果此属性的值为 true，则文本字段被视为密码文本字段，并使用星号而不是实际字符来隐藏输入的字符。如果为 false，则不会将文本字段视为密码文本字段。
		*/
		__getset(0,__proto,'password',function(){
			return this._font.password;
			},function(value){
			this._createFont().password=value;
		});

		/**
		*背景颜色。
		*/
		__getset(0,__proto,'backgroundColor',function(){
			return this._bgground ? this._bgground.color :null;
			},function(value){
			if (value==='none')this._bgground=null;
			else (this._bgground || (this._bgground={}),this._bgground.color=value);
			this._ower.conchModel && this._ower.conchModel.bgColor(value);
			this._ower._renderType |=0x100;
		});

		/**
		*字体信息。
		*/
		__getset(0,__proto,'font',function(){
			return this._font.toString();
			},function(value){
			this._createFont().setValue(value);
		});

		/**
		*文本的粗细。
		*/
		__getset(0,__proto,'weight',null,function(value){
			this._createFont().weight=value;
		});

		/**
		*间距。
		*/
		__getset(0,__proto,'letterSpacing',function(){
			return this._spacing[0];
			},function(d){
			((typeof d=='string'))&& (d=parseInt(d+""));
			this._spacing===CSSStyle._SPACING && (this._spacing=[0,0]);
			this._spacing[0]=d;
		});

		/**
		*字体大小。
		*/
		__getset(0,__proto,'fontSize',function(){
			return this._font.size;
			},function(value){
			this._createFont().size=value;
		});

		/**
		*表示是否为斜体。
		*/
		__getset(0,__proto,'italic',function(){
			return this._font.italic;
			},function(value){
			this._createFont().italic=value;
		});

		/**
		*字体系列。
		*/
		__getset(0,__proto,'fontFamily',function(){
			return this._font.family;
			},function(value){
			this._createFont().family=value;
		});

		/**
		*<p>描边宽度（以像素为单位）。</p>
		*默认值0，表示不描边。
		*@default 0
		*/
		__getset(0,__proto,'stroke',function(){
			return this._font.stroke[0];
			},function(value){
			if (this._createFont().stroke===Font._STROKE)this._font.stroke=[0,"#000000"];
			this._font.stroke[0]=value;
		});

		/**
		*<p>描边颜色，以字符串表示。</p>
		*@default "#000000";
		*/
		__getset(0,__proto,'strokeColor',function(){
			return this._font.stroke[1];
			},function(value){
			if (this._createFont().stroke===Font._STROKE)this._font.stroke=[0,"#000000"];
			this._font.stroke[1]=value;
		});

		/**
		*边框属性，比如border="5px solid red"
		*/
		__getset(0,__proto,'border',function(){
			return this._border ? this._border.value :"";
			},function(value){
			if (value=='none'){
				this._border=null;
				return;
			}
			this._border || (this._border={});
			this._border.value=value;
			var values=value.split(' ');
			this._border.color=Color$2.create(values[values.length-1]);
			if (values.length==1){
				this._border.size=1;
				this._border.type='solid';
				return;
			};
			var i=0;
			if (values[0].indexOf('px')> 0){
				this._border.size=parseInt(values[0]);
				i++;
			}else this._border.size=1;
			this._border.type=values[i];
			this._ower._renderType |=0x100;
		});

		/**
		*边框的颜色。
		*/
		__getset(0,__proto,'borderColor',function(){
			return (this._border && this._border.color)? this._border.color.strColor :null;
			},function(value){
			if (!value){
				this._border=null;
				return;
			}
			this._border || (this._border={size:1,type:'solid'});
			this._border.color=(value==null)? null :Color$2.create(value);
			this._ower.conchModel && this._ower.conchModel.border(this._border.color.strColor);
			this._ower._renderType |=0x100;
		});

		/**
		*元素的定位类型。
		*/
		__getset(0,__proto,'position',function(){
			return (this._type & 0x4)? "absolute" :"";
			},function(value){
			value=="absolute" ? (this._type |=0x4):(this._type &=~0x4);
		});

		/**
		*规定元素应该生成的框的类型。
		*/
		__getset(0,__proto,'display',null,function(value){
			switch (value){
				case '':
					this._type &=~0x2;
					this.visible=true;
					break ;
				case 'none':
					this._type |=0x2;
					this.visible=false;
					this._ower._layoutLater();
					break ;
				}
		});

		/**@inheritDoc */
		__getset(0,__proto,'paddingLeft',function(){
			return this.padding[3];
		});

		/**@inheritDoc */
		__getset(0,__proto,'paddingTop',function(){
			return this.padding[0];
		});

		__getset(0,__proto,'_scale',null,function(value){
			this._ower.scale(value[0],value[1]);
		});

		__getset(0,__proto,'_rotate',null,function(value){
			this._ower.rotation=value;
		});

		CSSStyle.parseOneCSS=function(text,clipWord){
			var out=[];
			var attrs=text.split(clipWord);
			var valueArray;
			for (var i=0,n=attrs.length;i < n;i++){
				var attr=attrs[i];
				var ofs=attr.indexOf(':');
				var name=attr.substr(0,ofs).replace(/^\s+|\s+$/g,'');
				if (name.length==0)
					continue ;
				var value=attr.substr(ofs+1).replace(/^\s+|\s+$/g,'');
				var one=[name,value];
				switch (name){
					case 'italic':
					case 'bold':
						one[1]=value=="true";
						break ;
					case 'line-height':
						one[0]='lineHeight';
						one[1]=parseInt(value);
						break ;
					case 'font-size':
						one[0]='fontSize';
						one[1]=parseInt(value);
						break ;
					case 'padding':
						valueArray=value.split(' ');
						valueArray.length > 1 || (valueArray[1]=valueArray[2]=valueArray[3]=valueArray[0]);
						one[1]=[parseInt(valueArray[0]),parseInt(valueArray[1]),parseInt(valueArray[2]),parseInt(valueArray[3])];
						break ;
					case 'rotate':
						one[0]="_rotate";
						one[1]=parseFloat(value);
						break ;
					case 'scale':
						valueArray=value.split(' ');
						one[0]="_scale";
						one[1]=[parseFloat(valueArray[0]),parseFloat(valueArray[1])];
						break ;
					case 'translate':
						valueArray=value.split(' ');
						one[0]="_translate";
						one[1]=[parseInt(valueArray[0]),parseInt(valueArray[1])];
						break ;
					default :
						(one[0]=CSSStyle._CSSTOVALUE[name])|| (one[0]=name);
					}
				out.push(one);
			}
			return out;
		}

		CSSStyle.parseCSS=function(text,uri){
			var one;
			while ((one=CSSStyle._parseCSSRegExp.exec(text))!=null){
				CSSStyle.styleSheets[one[1]]=CSSStyle.parseOneCSS(one[2],';');
			}
		}

		CSSStyle.EMPTY=new CSSStyle(null);
		CSSStyle._CSSTOVALUE={'letter-spacing':'letterSpacing','line-spacing':'lineSpacing','white-space':'whiteSpace','line-height':'lineHeight','scale-x':'scaleX','scale-y':'scaleY','translate-x':'translateX','translate-y':'translateY','font-family':'fontFamily','font-weight':'fontWeight','vertical-align':'valign','text-decoration':'textDecoration','background-color':'backgroundColor','border-color':'borderColor','float':'cssFloat'};
		CSSStyle._parseCSSRegExp=new RegExp("([\.\#]\\w+)\\s*{([\\s\\S]*?)}","g");
		CSSStyle._aligndef={'left':0,'center':1,'right':2,0:'left',1:'center',2:'right'};
		CSSStyle._valigndef={'top':0,'middle':1,'bottom':2,0:'top',1:'middle',2:'bottom'};
		CSSStyle.styleSheets={};
		CSSStyle.ALIGN_CENTER=1;
		CSSStyle.ALIGN_RIGHT=2;
		CSSStyle.VALIGN_MIDDLE=1;
		CSSStyle.VALIGN_BOTTOM=2;
		CSSStyle._CSS_BLOCK=0x1;
		CSSStyle._DISPLAY_NONE=0x2;
		CSSStyle._ABSOLUTE=0x4;
		CSSStyle._WIDTH_SET=0x8;
		CSSStyle._PADDING=[0,0,0,0];
		CSSStyle._RECT=[-1,-1,-1,-1];
		CSSStyle._SPACING=[0,0];
		CSSStyle._ALIGNS=[0,0,0];
		CSSStyle.ADDLAYOUTED=0x200;
		CSSStyle._NEWFONT=0x1000;
		CSSStyle._HEIGHT_SET=0x2000;
		CSSStyle._BACKGROUND_SET=0x4000;
		CSSStyle._FLOAT_RIGHT=0x8000;
		CSSStyle._LINE_ELEMENT=0x10000;
		CSSStyle._NOWARP=0x20000;
		CSSStyle._WIDTHAUTO=0x40000;
		CSSStyle._LISTERRESZIE=0x80000;
		return CSSStyle;
	})(Style)


	//class laya.webgl.display.GraphicsGL extends laya.display.Graphics
	var GraphicsGL=(function(_super){
		function GraphicsGL(){
			GraphicsGL.__super.call(this);
		}

		__class(GraphicsGL,'laya.webgl.display.GraphicsGL',_super);
		var __proto=GraphicsGL.prototype;
		__proto.setShader=function(shader){
			this._saveToCmd(Render.context._setShader,[shader]);
		}

		__proto.setIBVB=function(x,y,ib,vb,numElement,shader){
			this._saveToCmd(Render.context._setIBVB,[x,y,ib,vb,numElement,shader]);
		}

		__proto.drawParticle=function(x,y,ps){
			var pt=RunDriver.createParticleTemplate2D(ps);
			pt.x=x;
			pt.y=y;
			this._saveToCmd(Render.context._drawParticle,[pt]);
		}

		return GraphicsGL;
	})(Graphics)


	/**
	*<p><code>ColorFilter</code> 是颜色滤镜。使用 ColorFilter 类可以将 4 x 5 矩阵转换应用于输入图像上的每个像素的 RGBA 颜色和 Alpha 值，以生成具有一组新的 RGBA 颜色和 Alpha 值的结果。该类允许饱和度更改、色相旋转、亮度转 Alpha 以及各种其他效果。您可以将滤镜应用于任何显示对象（即，从 Sprite 类继承的对象）。</p>
	*<p>注意：对于 RGBA 值，最高有效字节代表红色通道值，其后的有效字节分别代表绿色、蓝色和 Alpha 通道值。</p>
	*/
	//class laya.filters.ColorFilter extends laya.filters.Filter
	var ColorFilter=(function(_super){
		function ColorFilter(mat){
			//this._mat=null;
			//this._alpha=null;
			ColorFilter.__super.call(this);
			if (!mat){
				mat=[0.3,0.59,0.11,0,0,0.3,0.59,0.11,0,0,0.3,0.59,0.11,0,0,0,0,0,1,0];
			}
			this._mat=new Float32Array(16);
			this._alpha=new Float32Array(4);
			var j=0;
			var z=0;
			for (var i=0;i < 20;i++){
				if (i % 5 !=4){
					this._mat[j++]=mat[i];
					}else {
					this._alpha[z++]=mat[i];
				}
			}
			this._action=RunDriver.createFilterAction(0x20);
			this._action.data=this;
		}

		__class(ColorFilter,'laya.filters.ColorFilter',_super);
		var __proto=ColorFilter.prototype;
		Laya.imps(__proto,{"laya.filters.IFilter":true})
		/**
		*@private 通知微端
		*/
		__proto.callNative=function(sp){
			var t=sp._$P.cf=this;
			sp.conchModel && sp.conchModel.setFilterMatrix && sp.conchModel.setFilterMatrix(this._mat,this._alpha);
		}

		/**@private */
		__getset(0,__proto,'type',function(){
			return 0x20;
		});

		/**@private */
		__getset(0,__proto,'action',function(){
			return this._action;
		});

		__getset(1,ColorFilter,'DEFAULT',function(){
			if (!ColorFilter._DEFAULT){
				ColorFilter._DEFAULT=new ColorFilter([1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0]);
			}
			return ColorFilter._DEFAULT;
		},laya.filters.Filter._$SET_DEFAULT);

		__getset(1,ColorFilter,'GRAY',function(){
			if (!ColorFilter._GRAY){
				ColorFilter._GRAY=new ColorFilter([0.3,0.59,0.11,0,0,0.3,0.59,0.11,0,0,0.3,0.59,0.11,0,0,0,0,0,1,0]);
			}
			return ColorFilter._GRAY;
		},laya.filters.Filter._$SET_GRAY);

		ColorFilter._DEFAULT=null
		ColorFilter._GRAY=null
		return ColorFilter;
	})(Filter)


	//class laya.filters.webgl.ColorFilterActionGL extends laya.filters.webgl.FilterActionGL
	var ColorFilterActionGL=(function(_super){
		function ColorFilterActionGL(){
			this.data=null;
			ColorFilterActionGL.__super.call(this);
		}

		__class(ColorFilterActionGL,'laya.filters.webgl.ColorFilterActionGL',_super);
		var __proto=ColorFilterActionGL.prototype;
		Laya.imps(__proto,{"laya.filters.IFilterActionGL":true})
		__proto.setValue=function(shader){
			shader.colorMat=this.data._mat;
			shader.colorAlpha=this.data._alpha;
		}

		__proto.apply3d=function(scope,sprite,context,x,y){
			var b=scope.getValue("bounds");
			var shaderValue=Value2D.create(0x01,0);
			shaderValue.setFilters([this.data]);
			var tMatrix=Matrix.TEMP;
			tMatrix.identity();
			context.ctx.drawTarget(scope,0,0,b.width,b.height,tMatrix,"src",shaderValue);
		}

		return ColorFilterActionGL;
	})(FilterActionGL)


	/**
	*<code>UIEvent</code> 类用来定义UI组件类的事件类型。
	*/
	//class laya.ui.UIEvent extends laya.events.Event
	var UIEvent=(function(_super){
		function UIEvent(){UIEvent.__super.call(this);;
		};

		__class(UIEvent,'laya.ui.UIEvent',_super);
		UIEvent.SHOW_TIP="showtip";
		UIEvent.HIDE_TIP="hidetip";
		return UIEvent;
	})(Event)


	//class laya.webgl.shader.d2.value.Value2D extends laya.webgl.shader.ShaderValue
	var Value2D=(function(_super){
		function Value2D(mainID,subID){
			this.size=[0,0];
			this.alpha=1.0;
			//this.mmat=null;
			this.ALPHA=1.0;
			//this.shader=null;
			//this.mainID=0;
			this.subID=0;
			//this.filters=null;
			//this.textureHost=null;
			//this.texture=null;
			//this.fillStyle=null;
			//this.color=null;
			//this.strokeStyle=null;
			//this.colorAdd=null;
			//this.glTexture=null;
			//this.u_mmat2=null;
			//this._inClassCache=null;
			this._cacheID=0;
			Value2D.__super.call(this);
			this.defines=new ShaderDefines2D();
			this.position=Value2D._POSITION;
			this.mainID=mainID;
			this.subID=subID;
			this.textureHost=null;
			this.texture=null;
			this.fillStyle=null;
			this.color=null;
			this.strokeStyle=null;
			this.colorAdd=null;
			this.glTexture=null;
			this.u_mmat2=null;
			this._cacheID=mainID|subID;
			this._inClassCache=Value2D._cache[this._cacheID];
			if (mainID>0 && !this._inClassCache){
				this._inClassCache=Value2D._cache[this._cacheID]=[];
				this._inClassCache._length=0;
			}
			this.clear();
		}

		__class(Value2D,'laya.webgl.shader.d2.value.Value2D',_super);
		var __proto=Value2D.prototype;
		__proto.setValue=function(value){}
		//throw new Error("todo in subclass");
		__proto.refresh=function(){
			var size=this.size;
			size[0]=RenderState2D.width;
			size[1]=RenderState2D.height;
			this.alpha=this.ALPHA *RenderState2D.worldAlpha;
			this.mmat=RenderState2D.worldMatrix4;
			return this;
		}

		__proto._ShaderWithCompile=function(){
			return Shader.withCompile2D(0,this.mainID,this.defines.toNameDic(),this.mainID | this.defines._value,Shader2X.create);
		}

		__proto._withWorldShaderDefines=function(){
			var defs=RenderState2D.worldShaderDefines;
			var sd=Shader.sharders [this.mainID | this.defines._value | defs.getValue()];
			if (!sd){
				var def={};
				var dic;
				var name;
				dic=this.defines.toNameDic();for (name in dic)def[name]="";
				dic=defs.toNameDic();for (name in dic)def[name]="";
				sd=Shader.withCompile2D(0,this.mainID,def,this.mainID | this.defines._value| defs.getValue(),Shader2X.create);
			};
			var worldFilters=RenderState2D.worldFilters;
			if (!worldFilters)return sd;
			var n=worldFilters.length,f;
			for (var i=0;i < n;i++){
				((f=worldFilters[i]))&& f.action.setValue(this);
			}
			return sd;
		}

		__proto.upload=function(){
			var renderstate2d=RenderState2D;
			this.alpha=this.ALPHA *renderstate2d.worldAlpha;
			if (RenderState2D.worldMatrix4!==RenderState2D.TEMPMAT4_ARRAY)this.defines.add(0x80);
			(WebGL.frameShaderHighPrecision)&& (this.defines.add(0x400));
			var sd=renderstate2d.worldShaderDefines?this._withWorldShaderDefines():(Shader.sharders [this.mainID | this.defines._value] || this._ShaderWithCompile());
			var params;
			this.size[0]=renderstate2d.width,this.size[1]=renderstate2d.height;
			this.mmat=renderstate2d.worldMatrix4;
			if (BaseShader.activeShader!==sd){
				if (sd._shaderValueWidth!==renderstate2d.width || sd._shaderValueHeight!==renderstate2d.height){
					sd._shaderValueWidth=renderstate2d.width;
					sd._shaderValueHeight=renderstate2d.height;
				}
				else{
					params=sd._params2dQuick2 || sd._make2dQuick2();
				}
				sd.upload(this,params);
			}
			else{
				if (sd._shaderValueWidth!==renderstate2d.width || sd._shaderValueHeight!==renderstate2d.height){
					sd._shaderValueWidth=renderstate2d.width;
					sd._shaderValueHeight=renderstate2d.height;
				}
				else{
					params=(sd._params2dQuick1)|| sd._make2dQuick1();
				}
				sd.upload(this,params);
			}
		}

		__proto.setFilters=function(value){
			this.filters=value;
			if (!value)
				return;
			var n=value.length,f;
			for (var i=0;i < n;i++){
				f=value[i];
				if (f){
					this.defines.add(f.type);
					f.action.setValue(this);
				}
			}
		}

		__proto.clear=function(){
			this.defines.setValue(this.subID);
		}

		__proto.release=function(){
			this._inClassCache[this._inClassCache._length++]=this;
			this.fillStyle=null;
			this.strokeStyle=null;
			this.clear();
		}

		Value2D._initone=function(type,classT){
			Value2D._typeClass[type]=classT;
			Value2D._cache[type]=[];
			Value2D._cache[type]._length=0;
		}

		Value2D.__init__=function(){
			Value2D._POSITION=[2,0x1406,false,4 *CONST3D2D.BYTES_PE,0];
			Value2D._TEXCOORD=[2,0x1406,false,4 *CONST3D2D.BYTES_PE,2 *CONST3D2D.BYTES_PE];
			Value2D._initone(0x02,Color2dSV);
			Value2D._initone(0x04,PrimitiveSV);
			Value2D._initone(0x100,FillTextureSV);
			Value2D._initone(0x200,SkinSV);
			Value2D._initone(0x01,TextureSV);
			Value2D._initone(0x01 | 0x40,TextSV);
			Value2D._initone(0x01 | 0x08,TextureSV);
		}

		Value2D.create=function(mainType,subType){
			var types=Value2D._cache[mainType|subType];
			if (types._length)
				return types[--types._length];
			else
			return new Value2D._typeClass[mainType|subType](subType);
		}

		Value2D._POSITION=null
		Value2D._TEXCOORD=null
		Value2D._cache=[];
		Value2D._typeClass=[];
		Value2D.TEMPMAT4_ARRAY=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1];
		return Value2D;
	})(ShaderValue)


	//class laya.webgl.canvas.WebGLContext2D extends laya.resource.Context
	var WebGLContext2D=(function(_super){
		var ContextParams;
		function WebGLContext2D(c){
			this._x=0;
			this._y=0;
			this._id=++WebGLContext2D._COUNT;
			//this._other=null;
			this._path=null;
			//this._primitiveValue2D=null;
			this._drawCount=1;
			this._maxNumEle=0;
			this._clear=false;
			this._isMain=false;
			this._atlasResourceChange=0;
			this._submits=null;
			this._curSubmit=null;
			this._ib=null;
			this._vb=null;
			//this._curMat=null;
			this._nBlendType=0;
			//this._save=null;
			//this._targets=null;
			//this._renderKey=NaN;
			this._saveMark=null;
			this._shader2D=null;
			//this.sprite=null;
			this.mId=-1;
			this.mHaveKey=false;
			this.mHaveLineKey=false;
			this.mX=0;
			this.mY=0;
			WebGLContext2D.__super.call(this);
			this._width=99999999;
			this._height=99999999;
			this._clipRect=WebGLContext2D.MAXCLIPRECT;
			this.mOutPoint
			this._canvas=c;
			WebGLContext2D._contextcount++;
			if (Render.isFlash){
				this._ib=IndexBuffer2D.create(0x88E4);
				GlUtils.fillIBQuadrangle(this._ib,16);
			}
			else
			this._ib=IndexBuffer2D.QuadrangleIB;
			this.clear();
		}

		__class(WebGLContext2D,'laya.webgl.canvas.WebGLContext2D',_super);
		var __proto=WebGLContext2D.prototype;
		__proto.setIsMainContext=function(){
			this._isMain=true;
		}

		__proto.clearBG=function(r,g,b,a){
			var gl=WebGL.mainContext;
			gl.clearColor(r,g,b,a);
			gl.clear(0x00004000);
		}

		__proto._getSubmits=function(){
			return this._submits;
		}

		__proto._releaseMem=function(){
			if (!this._submits)
				return;
			this._curMat.destroy();
			this._curMat=null;
			this._shader2D.destroy();
			this._shader2D=null;
			for (var i=0,n=this._submits._length;i < n;i++)
			this._submits[i].releaseRender();
			this._submits.length=0;
			this._submits._length=0;
			this._submits=null;
			this._curSubmit=null;
			this._path && this._path.recover();
			this._path=null;
			this._other && (this._other.font=null);
			this._save=null;
			if (this._vb){
				this._vb.releaseResource();
				this._vb.dispose();
				this._vb.destory();
				this._vb=null;
			}
		}

		__proto.destroy=function(){
			--WebGLContext2D._contextcount;
			this.sprite=null;
			this._releaseMem();
			this._targets && this._targets.destroy();
			this._targets=null;
			this._canvas=null;
			this._ib && (this._ib !=IndexBuffer2D.QuadrangleIB)&& this._ib.releaseResource();
		}

		__proto.clear=function(){
			if (!this._submits){
				this._other=ContextParams.DEFAULT;
				this._curMat=Matrix.create();
				this._vb=VertexBuffer2D.create(-1);
				this._submits=[];
				this._save=[SaveMark.Create(this)];
				this._save.length=10;
				this._shader2D=new Shader2D();
			}
			this._vb.clear();
			this._targets && (this._targets.repaint=true);
			this._other=ContextParams.DEFAULT;
			this._clear=true;
			this._repaint=false;
			this._drawCount=1;
			this._renderKey=0;
			this._other.lineWidth=this._shader2D.ALPHA=1.0;
			this._nBlendType=0;
			this._clipRect=WebGLContext2D.MAXCLIPRECT;
			this._curSubmit=Submit.RENDERBASE;
			this._shader2D.glTexture=null;
			this._shader2D.fillStyle=this._shader2D.strokeStyle=DrawStyle.DEFAULT;
			for (var i=0,n=this._submits._length;i < n;i++)
			this._submits[i].releaseRender();
			this._submits._length=0;
			this._curMat.identity();
			this._other.clear();
			this._saveMark=this._save[0];
			this._save._length=1;
		}

		__proto.size=function(w,h){
			if (this._width !=w || this._height !=h){
				if (w==0 || h==0){
					if (this._vb._byteLength !=0){
						this._width=w;
						this._height=h;
						this._vb.clear();
						this._vb.upload();
					}
					for (var i=0,n=this._submits._length;i < n;i++)
					this._submits[i].releaseRender();
					this._submits.length=0;
					this._submits._length=0;
					this._curSubmit=null;
					this._path && this._path.recover();
					this._path=null;
					this.sprite=null;
					this._targets && (this._targets.destroy());
					this._targets=null;
				}
				else{
					this._width=w;
					this._height=h;
					this._targets && (this._targets.size(w,h));
					this._canvas.memorySize-=this._canvas.memorySize;
				}
			}
			if (w===0 && h===0)this._releaseMem();
		}

		__proto._getTransformMatrix=function(){
			return this._curMat;
		}

		__proto.translate=function(x,y){
			if (x!==0 || y!==0){
				SaveTranslate.save(this);
				if (this._curMat.bTransform){
					SaveTransform.save(this);
					this._curMat.transformPointN(Point.TEMP.setTo(x,y));
					x=Point.TEMP.x;
					y=Point.TEMP.y;
				}
				this._x+=x;
				this._y+=y;
			}
		}

		__proto.save=function(){
			this._save[this._save._length++]=SaveMark.Create(this);
		}

		__proto.restore=function(){
			var sz=this._save._length;
			if (sz < 1)
				return;
			for (var i=sz-1;i >=0;i--){
				var o=this._save[i];
				o.restore(this);
				if (o.isSaveMark()){
					this._save._length=i;
					return;
				}
			}
		}

		__proto._fillText=function(txt,words,x,y,fontStr,color,strokeColor,lineWidth,textAlign){
			var shader=this._shader2D;
			var curShader=this._curSubmit.shaderValue;
			var font=fontStr ? FontInContext.create(fontStr):this._other.font;
			if (AtlasResourceManager.enabled){
				if (shader.ALPHA!==curShader.ALPHA)
					shader.glTexture=null;
				DrawText.drawText(this,txt,words,this._curMat,font,textAlign || this._other.textAlign,color,strokeColor,lineWidth,x,y);
			}
			else{
				var preDef=this._shader2D.defines.getValue();
				var colorAdd=color ? Color$2.create(color)._color :shader.colorAdd;
				if (shader.ALPHA!==curShader.ALPHA || colorAdd!==shader.colorAdd || curShader.colorAdd!==shader.colorAdd){
					shader.glTexture=null;
					shader.colorAdd=colorAdd;
				}
				DrawText.drawText(this,txt,words,this._curMat,font,textAlign || this._other.textAlign,color,strokeColor,lineWidth,x,y);
			}
		}

		//shader.defines.setValue(preDef);
		__proto.fillWords=function(words,x,y,fontStr,color){
			this._fillText(null,words,x,y,fontStr,color,null,-1,null);
		}

		__proto.fillText=function(txt,x,y,fontStr,color,textAlign){
			this._fillText(txt,null,x,y,fontStr,color,null,-1,textAlign);
		}

		__proto.strokeText=function(txt,x,y,fontStr,color,lineWidth,textAlign){
			this._fillText(txt,null,x,y,fontStr,null,color,lineWidth || 1,textAlign);
		}

		__proto.fillBorderText=function(txt,x,y,fontStr,fillColor,borderColor,lineWidth,textAlign){
			this._fillBorderText(txt,null,x,y,fontStr,fillColor,borderColor,lineWidth,textAlign);
		}

		__proto._fillBorderText=function(txt,words,x,y,fontStr,fillColor,borderColor,lineWidth,textAlign){
			if (!AtlasResourceManager.enabled){
				this._fillText(txt,words,x,y,fontStr,null,borderColor,lineWidth || 1,textAlign);
				this._fillText(txt,words,x,y,fontStr,fillColor,null,-1,textAlign);
				return;
			};
			var shader=this._shader2D;
			var curShader=this._curSubmit.shaderValue;
			if (shader.ALPHA!==curShader.ALPHA)
				shader.glTexture=null;
			var font=fontStr ? (WebGLContext2D._fontTemp.setFont(fontStr),WebGLContext2D._fontTemp):this._other.font;
			DrawText.drawText(this,txt,words,this._curMat,font,textAlign || this._other.textAlign,fillColor,borderColor,lineWidth || 1,x,y);
		}

		__proto.fillBorderWords=function(words,x,y,font,color,borderColor,lineWidth){
			this._fillBorderText(null,words,x,y,font,color,borderColor,lineWidth,null);
		}

		__proto.fillRect=function(x,y,width,height,fillStyle){
			var vb=this._vb;
			if (GlUtils.fillRectImgVb(vb,this._clipRect,x,y,width,height,Texture.DEF_UV,this._curMat,this._x,this._y,0,0)){
				this._renderKey=0;
				var pre=this._shader2D.fillStyle;
				fillStyle && (this._shader2D.fillStyle=DrawStyle.create(fillStyle));
				var shader=this._shader2D;
				var curShader=this._curSubmit.shaderValue;
				if (shader.fillStyle!==curShader.fillStyle || shader.ALPHA!==curShader.ALPHA){
					shader.glTexture=null;
					var submit=this._curSubmit=Submit.create(this,this._ib,vb,((vb._byteLength-16 *4)/ 32)*3,Value2D.create(0x02,0));
					submit.shaderValue.color=shader.fillStyle._color._color;
					submit.shaderValue.ALPHA=shader.ALPHA;
					this._submits[this._submits._length++]=submit;
				}
				this._curSubmit._numEle+=6;
				this._shader2D.fillStyle=pre;
			}
		}

		__proto.fillTexture=function(texture,x,y,width,height,type,offset,other){
			if (!(texture.loaded && texture.bitmap && texture.source)){
				if (this.sprite){
					Laya.timer.callLater(this,this._repaintSprite);
				}
				return;
			};
			var vb=this._vb;
			var w=texture.bitmap.width,h=texture.bitmap.height,uv=texture.uv;
			var ox=offset.x % texture.width,oy=offset.y % texture.height;
			if (w!=other.w||h!=other.h){
				if (!other.w && !other.h){
					other.oy=other.ox=0;
					switch(type){
						case "repeat":
							other.width=width;
							other.height=height;
							break ;
						case "repeat-x":
							other.width=width;
							if (oy < 0){
								if (texture.height+oy > height){
									other.height=height;
								}
								else{
									other.height=texture.height+oy;
								}
							}
							else{
								other.oy=oy;
								if (texture.height+oy > height){
									other.height=height-oy;
								}
								else{
									other.height=texture.height;
								}
							}
							break ;
						case "repeat-y":
							if (ox < 0){
								if (texture.width+ox > width){
									other.width=width;
								}
								else{
									other.width=texture.width+ox;
								}
							}
							else{
								other.ox=ox;
								if (texture.width+ox > width){
									other.width=width-ox;
								}
								else{
									other.width=texture.width;
								}
							}
							other.height=height;
							break ;
						default :
							other.width=width;
							other.height=height;
							break ;
						}
				}
				other.w=w;
				other.h=h;
				other.uv=[0,0,other.width / w,0,other.width / w,other.height / h,0,other.height / h];
			}
			x+=other.ox;
			y+=other.oy;
			ox-=other.ox;
			oy-=other.oy;
			if (GlUtils.fillRectImgVb(vb,this._clipRect,x,y,other.width,other.height,other.uv,this._curMat,this._x,this._y,0,0)){
				this._renderKey=0;
				var submit=SubmitTexture.create(this,this._ib,vb,((vb._byteLength-16 *4)/ 32)*3,Value2D.create(0x100,0));
				this._submits[this._submits._length++]=submit;
				var shaderValue=submit.shaderValue;
				shaderValue.textureHost=texture;
				var tTextureX=uv[0] *w;
				var tTextureY=uv[1] *h;
				var tTextureW=(uv[2]-uv[0])*w;
				var tTextureH=(uv[5]-uv[3])*h;
				var tx=-ox / w;
				var ty=-oy/ h;
				shaderValue.u_TexRange[0]=tTextureX / w;
				shaderValue.u_TexRange[1]=tTextureW / w;
				shaderValue.u_TexRange[2]=tTextureY / h;
				shaderValue.u_TexRange[3]=tTextureH / h;
				shaderValue.u_offset[0]=tx;
				shaderValue.u_offset[1]=ty;
				if (AtlasResourceManager.enabled && !this._isMain)
					submit.addTexture(texture,(vb._byteLength >> 2)-16);
				this._curSubmit=submit;
				submit._renderType=10017;
				submit._numEle+=6;
			}
		}

		__proto.setShader=function(shader){
			SaveBase.save(this,0x80000,this._shader2D,true);
			this._shader2D.shader=shader;
		}

		__proto.setFilters=function(value){
			SaveBase.save(this,0x100000,this._shader2D,true);
			this._shader2D.filters=value;
			this._curSubmit=Submit.RENDERBASE;
			this._renderKey=0;
			this._drawCount++;
		}

		__proto.drawTexture=function(tex,x,y,width,height,tx,ty){
			this._drawTextureM(tex,x,y,width,height,tx,ty,null,1);
		}

		__proto.addTextureVb=function(invb,x,y){
			var finalVB=this._curSubmit._vb || this._vb;
			var vpos=(finalVB._byteLength >> 2);
			finalVB.byteLength=((vpos+16)<< 2);
			var vbdata=finalVB.getFloat32Array();
			for (var i=0,ci=0;i < 16;i+=4){
				vbdata[vpos++]=invb[i]+x;
				vbdata[vpos++]=invb[i+1]+y;
				vbdata[vpos++]=invb[i+2];
				vbdata[vpos++]=invb[i+3];
			}
			this._curSubmit._numEle+=6;
			this._maxNumEle=Math.max(this._maxNumEle,this._curSubmit._numEle);
			finalVB._upload=true;
		}

		__proto.willDrawTexture=function(tex,alpha){
			if (!(tex.loaded && tex.bitmap && tex.source)){
				if (this.sprite){
					Laya.timer.callLater(this,this._repaintSprite);
				}
				return 0;
			};
			var webGLImg=tex.bitmap;
			var rid=webGLImg.id+this._shader2D.ALPHA*alpha+10016;
			if (rid==this._renderKey)return rid;
			var shader=this._shader2D;
			var preAlpha=shader.ALPHA;
			var curShader=this._curSubmit.shaderValue;
			shader.ALPHA *=alpha;
			this._renderKey=rid;
			this._drawCount++;
			shader.glTexture=webGLImg;
			var vb=this._vb;
			var submit=null;
			var vbSize=(vb._byteLength / 32)*3;
			submit=SubmitTexture.create(this,this._ib,vb,vbSize,Value2D.create(0x01,0));
			this._submits[this._submits._length++]=submit;
			submit.shaderValue.textureHost=tex;
			submit._renderType=10016;
			submit._preIsSameTextureShader=this._curSubmit._renderType===10016 && shader.ALPHA===curShader.ALPHA;
			this._curSubmit=submit;
			shader.ALPHA=preAlpha;
			return rid;
		}

		__proto.drawTextures=function(tex,pos,tx,ty){
			if (!(tex.loaded && tex.bitmap && tex.source)){
				this.sprite && Laya.timer.callLater(this,this._repaintSprite);
				return;
			};
			var pre=this._clipRect;
			this._clipRect=WebGLContext2D.MAXCLIPRECT;
			if (!this._drawTextureM(tex,pos[0],pos[1],tex.width,tex.height,tx,ty,null,1)){
				alert("drawTextures err");
				return;
			}
			this._clipRect=pre;
			Stat.drawCall++;
			if (pos.length < 4)
				return;
			var finalVB=this._curSubmit._vb || this._vb;
			var sx=this._curMat.a,sy=this._curMat.d;
			for (var i=2,sz=pos.length;i < sz;i+=2){
				GlUtils.copyPreImgVb(finalVB,(pos[i]-pos[i-2])*sx,(pos[i+1]-pos[i-1])*sy);
				this._curSubmit._numEle+=6;
			}
			this._maxNumEle=Math.max(this._maxNumEle,this._curSubmit._numEle);
		}

		__proto._drawTextureM=function(tex,x,y,width,height,tx,ty,m,alpha){
			if (!(tex.loaded && tex.bitmap && tex.source)){
				if (this.sprite){
					Laya.timer.callLater(this,this._repaintSprite);
				}
				return false;
			};
			var finalVB=this._curSubmit._vb || this._vb;
			var webGLImg=tex.bitmap;
			x+=tx;
			y+=ty;
			this._drawCount++;
			var rid=webGLImg.id+this._shader2D.ALPHA *alpha+10016;
			if (rid!=this._renderKey){
				this._renderKey=rid;
				var curShader=this._curSubmit.shaderValue;
				var shader=this._shader2D;
				var alphaBack=shader.ALPHA;
				shader.ALPHA *=alpha;
				shader.glTexture=webGLImg;
				var vb=this._vb;
				var submit=null;
				var vbSize=(vb._byteLength / 32)*3;
				submit=SubmitTexture.create(this,this._ib,vb,vbSize,Value2D.create(0x01,0));
				this._submits[this._submits._length++]=submit;
				submit.shaderValue.textureHost=tex;
				submit._renderType=10016;
				submit._preIsSameTextureShader=this._curSubmit._renderType===10016 && shader.ALPHA===curShader.ALPHA;
				this._curSubmit=submit;
				finalVB=this._curSubmit._vb || this._vb;
				shader.ALPHA=alphaBack;
			}
			if (GlUtils.fillRectImgVb(finalVB,this._clipRect,x,y,width || tex.width,height || tex.height,tex.uv,m || this._curMat,this._x,this._y,0,0)){
				if (AtlasResourceManager.enabled && !this._isMain)
					(this._curSubmit).addTexture(tex,(finalVB._byteLength >> 2)-16);
				this._curSubmit._numEle+=6;
				this._maxNumEle=Math.max(this._maxNumEle,this._curSubmit._numEle);
				return true;
			}
			return false;
		}

		__proto._repaintSprite=function(){
			this.sprite&&this.sprite.repaint();
		}

		//}
		__proto._drawText=function(tex,x,y,width,height,m,tx,ty,dx,dy){
			var webGLImg=tex.bitmap;
			this._drawCount++;
			var rid=webGLImg.id+this._shader2D.ALPHA+10016;
			if (rid!=this._renderKey){
				this._renderKey=rid;
				var curShader=this._curSubmit.shaderValue;
				var shader=this._shader2D;
				shader.glTexture=webGLImg;
				var vb=this._vb;
				var submit=null;
				var submitID=NaN;
				var vbSize=(vb._byteLength / 32)*3;
				if (AtlasResourceManager.enabled){
					submit=SubmitTexture.create(this,this._ib,vb,vbSize,Value2D.create(0x01,0));
				}
				else{
					submit=SubmitTexture.create(this,this._ib,vb,vbSize,TextSV.create());
				}
				submit._preIsSameTextureShader=this._curSubmit._renderType===10016 && shader.ALPHA===curShader.ALPHA;
				this._submits[this._submits._length++]=submit;
				submit.shaderValue.textureHost=tex;
				submit._renderType=10016;
				this._curSubmit=submit;
			}
			tex.active();
			var finalVB=this._curSubmit._vb || this._vb;
			if (GlUtils.fillRectImgVb(finalVB,this._clipRect,x+tx,y+ty,width || tex.width,height || tex.height,tex.uv,m || this._curMat,this._x,this._y,dx,dy,true)){
				if (AtlasResourceManager.enabled && !this._isMain){
					(this._curSubmit).addTexture(tex,(finalVB._byteLength >> 2)-16);
				}
				this._curSubmit._numEle+=6;
				this._maxNumEle=Math.max(this._maxNumEle,this._curSubmit._numEle);
			}
		}

		__proto.drawTextureWithTransform=function(tex,x,y,width,height,transform,tx,ty,alpha){
			if (!transform){
				this._drawTextureM(tex,x,y,width,height,tx,ty,null,alpha);
				return;
			};
			var curMat=this._curMat;
			var prex=this._x;
			var prey=this._y;
			(tx!==0 || ty!==0)&& (this._x=tx *curMat.a+ty *curMat.c,this._y=ty *curMat.d+tx *curMat.b);
			if (transform && curMat.bTransform){
				Matrix.mul(transform,curMat,WebGLContext2D._tmpMatrix);
				transform=WebGLContext2D._tmpMatrix;
				transform._checkTransform();
			}
			else{
				this._x+=curMat.tx;
				this._y+=curMat.ty;
			}
			this._drawTextureM(tex,x,y,width,height,0,0,transform,alpha);
			this._x=prex;
			this._y=prey;
		}

		__proto.fillQuadrangle=function(tex,x,y,point4,m){
			var submit=this._curSubmit;
			var vb=this._vb;
			var shader=this._shader2D;
			var curShader=submit.shaderValue;
			this._renderKey=0;
			if (tex.bitmap){
				var t_tex=tex.bitmap;
				if (shader.glTexture !=t_tex || shader.ALPHA!==curShader.ALPHA){
					shader.glTexture=t_tex;
					submit=this._curSubmit=Submit.create(this,this._ib,vb,((vb._byteLength)/ 32)*3,Value2D.create(0x01,0));
					submit.shaderValue.glTexture=t_tex;
					this._submits[this._submits._length++]=submit;
				}
				GlUtils.fillQuadrangleImgVb(vb,x,y,point4,tex.uv,m || this._curMat,this._x,this._y);
			}
			else{
				if (!submit.shaderValue.fillStyle || !submit.shaderValue.fillStyle.equal(tex)|| shader.ALPHA!==curShader.ALPHA){
					shader.glTexture=null;
					submit=this._curSubmit=Submit.create(this,this._ib,vb,((vb._byteLength)/ 32)*3,Value2D.create(0x02,0));
					submit.shaderValue.defines.add(0x02);
					submit.shaderValue.fillStyle=DrawStyle.create(tex);
					this._submits[this._submits._length++]=submit;
				}
				GlUtils.fillQuadrangleImgVb(vb,x,y,point4,Texture.DEF_UV,m || this._curMat,this._x,this._y);
			}
			submit._numEle+=6;
		}

		__proto.drawTexture2=function(x,y,pivotX,pivotY,transform,alpha,blendMode,args){
			if (alpha==0)return;
			var curMat=this._curMat;
			this._x=x *curMat.a+y *curMat.c;
			this._y=y *curMat.d+x *curMat.b;
			if (transform){
				if (curMat.bTransform || transform.bTransform){
					Matrix.mul(transform,curMat,WebGLContext2D._tmpMatrix);
					transform=WebGLContext2D._tmpMatrix;
				}
				else{
					this._x+=transform.tx+curMat.tx;
					this._y+=transform.ty+curMat.ty;
					transform=Matrix.EMPTY;
				}
			}
			if (alpha===1 && !blendMode)
				this._drawTextureM(args[0],args[1]-pivotX,args[2]-pivotY,args[3],args[4],0,0,transform,1);
			else{
				var preAlpha=this._shader2D.ALPHA;
				var preblendType=this._nBlendType;
				this._shader2D.ALPHA=alpha;
				blendMode && (this._nBlendType=BlendMode.TOINT(blendMode));
				this._drawTextureM(args[0],args[1]-pivotX,args[2]-pivotY,args[3],args[4],0,0,transform,1);
				this._shader2D.ALPHA=preAlpha;
				this._nBlendType=preblendType;
			}
			this._x=this._y=0;
		}

		__proto.drawCanvas=function(canvas,x,y,width,height){
			var src=canvas.context;
			this._renderKey=0;
			if (src._targets){
				this._submits[this._submits._length++]=SubmitCanvas.create(src,0,null);
				this._curSubmit=Submit.RENDERBASE;
				src._targets.drawTo(this,x,y,width,height);
			}
			else{
				var submit=this._submits[this._submits._length++]=SubmitCanvas.create(src,this._shader2D.ALPHA,this._shader2D.filters);
				var sx=width / canvas.width;
				var sy=height / canvas.height;
				var mat=submit._matrix;
				this._curMat.copyTo(mat);
				sx !=1 && sy !=1 && mat.scale(sx,sy);
				var tx=mat.tx,ty=mat.ty;
				mat.tx=mat.ty=0;
				mat.transformPoint(Point.TEMP.setTo(x,y));
				mat.translate(Point.TEMP.x+tx,Point.TEMP.y+ty);
				this._curSubmit=Submit.RENDERBASE;
			}
			if (Config.showCanvasMark){
				this.save();
				this.lineWidth=4;
				this.strokeStyle=src._targets ? "yellow" :"green";
				this.strokeRect(x-1,y-1,width+2,height+2,1);
				this.strokeRect(x,y,width,height,1);
				this.restore();
			}
		}

		__proto.drawTarget=function(scope,x,y,width,height,m,proName,shaderValue,uv,blend){
			(blend===void 0)&& (blend=-1);
			var vb=this._vb;
			if (GlUtils.fillRectImgVb(vb,this._clipRect,x,y,width,height,uv || Texture.DEF_UV,m || this._curMat,this._x,this._y,0,0)){
				this._renderKey=0;
				var shader=this._shader2D;
				shader.glTexture=null;
				var curShader=this._curSubmit.shaderValue;
				var submit=this._curSubmit=SubmitTarget.create(this,this._ib,vb,((vb._byteLength-16 *4)/ 32)*3,shaderValue,proName);
				if (blend==-1){
					submit.blendType=this._nBlendType;
				}
				else{
					submit.blendType=blend;
				}
				submit.scope=scope;
				this._submits[this._submits._length++]=submit;
				this._curSubmit._numEle+=6;
			}
		}

		__proto.transform=function(a,b,c,d,tx,ty){
			SaveTransform.save(this);
			Matrix.mul(Matrix.TEMP.setTo(a,b,c,d,tx,ty),this._curMat,this._curMat);
			this._curMat._checkTransform();
		}

		__proto.setTransformByMatrix=function(value){
			value.copyTo(this._curMat);
		}

		__proto.transformByMatrix=function(value){
			SaveTransform.save(this);
			Matrix.mul(value,this._curMat,this._curMat);
			this._curMat._checkTransform();
		}

		__proto.rotate=function(angle){
			SaveTransform.save(this);
			this._curMat.rotateEx(angle);
		}

		__proto.scale=function(scaleX,scaleY){
			SaveTransform.save(this);
			this._curMat.scaleEx(scaleX,scaleY);
		}

		__proto.clipRect=function(x,y,width,height){
			width *=this._curMat.a;
			height *=this._curMat.d;
			var p=Point.TEMP;
			this._curMat.transformPoint(p.setTo(x,y));
			this._renderKey=0;
			var submit=this._curSubmit=SubmitScissor.create(this);
			this._submits[this._submits._length++]=submit;
			submit.submitIndex=this._submits._length;
			submit.submitLength=9999999;
			SaveClipRect.save(this,submit);
			var clip=this._clipRect;
			var x1=clip.x,y1=clip.y;
			var r=p.x+width,b=p.y+height;
			x1 < p.x && (clip.x=p.x);
			y1 < p.y && (clip.y=p.y);
			clip.width=Math.min(r,x1+clip.width)-clip.x;
			clip.height=Math.min(b,y1+clip.height)-clip.y;
			this._shader2D.glTexture=null;
			submit.clipRect.copyFrom(clip);
			this._curSubmit=Submit.RENDERBASE;
		}

		__proto.setIBVB=function(x,y,ib,vb,numElement,mat,shader,shaderValues,startIndex,offset,type){
			(startIndex===void 0)&& (startIndex=0);
			(offset===void 0)&& (offset=0);
			(type===void 0)&& (type=0);
			if (ib===null){
				if (!Render.isFlash){
					ib=this._ib;
				}
				else{
					var falshVB=vb;
					(falshVB._selfIB)|| (falshVB._selfIB=IndexBuffer2D.create(0x88E4));
					falshVB._selfIB.clear();
					ib=falshVB._selfIB;
				}
				GlUtils.expandIBQuadrangle(ib,(vb.byteLength / (4 *vb.vertexStride *4)));
			}
			if (!shaderValues || !shader)
				throw Error("setIBVB must input:shader shaderValues");
			var submit=SubmitOtherIBVB.create(this,vb,ib,numElement,shader,shaderValues,startIndex,offset,type);
			mat || (mat=Matrix.EMPTY);
			mat.translate(x,y);
			Matrix.mul(mat,this._curMat,submit._mat);
			mat.translate(-x,-y);
			this._submits[this._submits._length++]=submit;
			this._curSubmit=Submit.RENDERBASE;
			this._renderKey=0;
		}

		__proto.addRenderObject=function(o){
			this._submits[this._submits._length++]=o;
		}

		__proto.fillTrangles=function(tex,x,y,points,m){
			var submit=this._curSubmit;
			var vb=this._vb;
			var shader=this._shader2D;
			var curShader=submit.shaderValue;
			var length=points.length >> 4;
			var t_tex=tex.bitmap;
			this._renderKey=0;
			if (shader.glTexture !=t_tex || shader.ALPHA!==curShader.ALPHA){
				submit=this._curSubmit=Submit.create(this,this._ib,vb,((vb._byteLength)/ 32)*3,Value2D.create(0x01,0));
				submit.shaderValue.textureHost=tex;
				this._submits[this._submits._length++]=submit;
			}
			GlUtils.fillTranglesVB(vb,x,y,points,m || this._curMat,this._x,this._y);
			submit._numEle+=length *6;
		}

		__proto.submitElement=function(start,end){
			var renderList=this._submits;
			end < 0 && (end=renderList._length);
			while (start < end){
				start+=renderList[start].renderSubmit();
			}
		}

		__proto.finish=function(){
			WebGL.mainContext.finish();
		}

		__proto.flush=function(){
			var maxNum=Math.max(this._vb.byteLength / (4 *16),this._maxNumEle / 6)+8;
			if (maxNum > (this._ib.bufferLength / (6 *2))){
				GlUtils.expandIBQuadrangle(this._ib,maxNum);
			}
			if (!this._isMain && AtlasResourceManager.enabled && AtlasResourceManager._atlasRestore > this._atlasResourceChange){
				this._atlasResourceChange=AtlasResourceManager._atlasRestore;
				var renderList=this._submits;
				for (var i=0,s=renderList._length;i < s;i++){
					var submit=renderList [i];
					if (submit.getRenderType()===10016)
						(submit).checkTexture();
				}
			}
			this.submitElement(0,this._submits._length);
			this._path && this._path.reset();
			SkinMeshBuffer.instance && SkinMeshBuffer.getInstance().reset();
			this._curSubmit=Submit.RENDERBASE;
			this._renderKey=0;
			return this._submits._length;
		}

		__proto.setPathId=function(id){
			this.mId=id;
			if (this.mId !=-1){
				this.mHaveKey=false;
				var tVGM=VectorGraphManager.getInstance();
				if (tVGM.shapeDic[this.mId]){
					this.mHaveKey=true;
				}
				this.mHaveLineKey=false;
				if (tVGM.shapeLineDic[this.mId]){
					this.mHaveLineKey=true;
				}
			}
		}

		__proto.movePath=function(x,y){
			var _x1=x,_y1=y;
			x=this._curMat.a *_x1+this._curMat.c *_y1+this._curMat.tx;
			y=this._curMat.b *_x1+this._curMat.d *_y1+this._curMat.ty;
			this.mX+=x;
			this.mY+=y;
		}

		__proto.beginPath=function(){
			var tPath=this._getPath();
			tPath.tempArray.length=0;
			tPath.closePath=false;
			this.mX=0;
			this.mY=0;
		}

		__proto.closePath=function(){
			this._path.closePath=true;
		}

		__proto.fill=function(isConvexPolygon){
			(isConvexPolygon===void 0)&& (isConvexPolygon=false);
			var tPath=this._getPath();
			this.drawPoly(0,0,tPath.tempArray,this.fillStyle._color.numColor,0,0,isConvexPolygon);
		}

		__proto.stroke=function(){
			var tPath=this._getPath();
			if (this.lineWidth > 0){
				if (this.mId==-1){
					tPath.drawLine(0,0,tPath.tempArray,this.lineWidth,this.strokeStyle._color.numColor);
				}
				else{
					if (this.mHaveLineKey){
						var tShapeLine=VectorGraphManager.getInstance().shapeLineDic[this.mId];
						tShapeLine.rebuild(tPath.tempArray);
						tPath.setGeomtry(tShapeLine);
					}
					else{
						VectorGraphManager.getInstance().addLine(this.mId,tPath.drawLine(0,0,tPath.tempArray,this.lineWidth,this.strokeStyle._color.numColor));
					}
				}
				tPath.update();
				var tPosArray=[this.mX,this.mY];
				var tempSubmit=Submit.createShape(this,tPath.ib,tPath.vb,tPath.count,tPath.offset,Value2D.create(0x04,0));
				tempSubmit.shaderValue.ALPHA=this._shader2D.ALPHA;
				(tempSubmit.shaderValue).u_pos=tPosArray;
				tempSubmit.shaderValue.u_mmat2=RenderState2D.TEMPMAT4_ARRAY;
				this._submits[this._submits._length++]=tempSubmit;
			}
		}

		__proto.line=function(fromX,fromY,toX,toY,lineWidth,mat){
			var submit=this._curSubmit;
			var vb=this._vb;
			if (GlUtils.fillLineVb(vb,this._clipRect,fromX,fromY,toX,toY,lineWidth,mat)){
				this._renderKey=0;
				var shader=this._shader2D;
				var curShader=submit.shaderValue;
				if (shader.strokeStyle!==curShader.strokeStyle || shader.ALPHA!==curShader.ALPHA){
					shader.glTexture=null;
					submit=this._curSubmit=Submit.create(this,this._ib,vb,((vb._byteLength-16 *4)/ 32)*3,Value2D.create(0x02,0));
					submit.shaderValue.strokeStyle=shader.strokeStyle;
					submit.shaderValue.mainID=0x02;
					submit.shaderValue.ALPHA=shader.ALPHA;
					this._submits[this._submits._length++]=submit;
				}
				submit._numEle+=6;
			}
		}

		__proto.moveTo=function(x,y,b){
			(b===void 0)&& (b=true);
			var tPath=this._getPath();
			if (b){
				var _x1=x,_y1=y;
				x=this._curMat.a *_x1+this._curMat.c *_y1;
				y=this._curMat.b *_x1+this._curMat.d *_y1;
			}
			tPath.addPoint(x,y);
		}

		__proto.lineTo=function(x,y,b){
			(b===void 0)&& (b=true);
			var tPath=this._getPath();
			if (b){
				var _x1=x,_y1=y;
				x=this._curMat.a *_x1+this._curMat.c *_y1;
				y=this._curMat.b *_x1+this._curMat.d *_y1;
			}
			tPath.addPoint(x,y);
		}

		__proto.drawCurves=function(x,y,args){
			this.setPathId(-1);
			this.beginPath();
			this.strokeStyle=args[3];
			this.lineWidth=args[4];
			var points=args[2];
			x+=args[0],y+=args[1];
			this.movePath(x,y);
			this.moveTo(points[0],points[1]);
			var i=2,n=points.length;
			while (i < n){
				this.quadraticCurveTo(points[i++],points[i++],points[i++],points[i++]);
			}
			this.stroke();
		}

		__proto.arcTo=function(x1,y1,x2,y2,r){
			if (this.mId !=-1){
				if (this.mHaveKey){
					return;
				}
			};
			var tPath=this._getPath();
			var x0=tPath.getEndPointX();
			var y0=tPath.getEndPointY();
			var dx0=NaN,dy0=NaN,dx1=NaN,dy1=NaN,a=NaN,d=NaN,cx=NaN,cy=NaN,a0=NaN,a1=NaN;
			var dir=false;
			var _x1=x1,_y1=y1;
			x1=this._curMat.a *_x1+this._curMat.c *_y1;
			y1=this._curMat.b *_x1+this._curMat.d *_y1;
			_x1=x2,_y1=y2;
			x2=this._curMat.a *_x1+this._curMat.c *_y1;
			y2=this._curMat.b *_x1+this._curMat.d *_y1;
			r=this._curMat.a *r+this._curMat.c *r;
			dx0=x0-x1;
			dy0=y0-y1;
			dx1=x2-x1;
			dy1=y2-y1;
			Point.TEMP.setTo(dx0,dy0);
			Point.TEMP.normalize();
			dx0=Point.TEMP.x;
			dy0=Point.TEMP.y;
			Point.TEMP.setTo(dx1,dy1);
			Point.TEMP.normalize();
			dx1=Point.TEMP.x;
			dy1=Point.TEMP.y;
			a=Math.acos(dx0 *dx1+dy0 *dy1);
			var tTemp=Math.tan(a / 2.0);
			d=r / tTemp;
			if (d > 10000){
				this.lineTo(x1,y1);
				return;
			}
			if (dx0 *dy1-dx1 *dy0 <=0.0){
				cx=x1+dx0 *d+dy0 *r;
				cy=y1+dy0 *d-dx0 *r;
				a0=Math.atan2(dx0,-dy0);
				a1=Math.atan2(-dx1,dy1);
				dir=false;
			}
			else{
				cx=x1+dx0 *d-dy0 *r;
				cy=y1+dy0 *d+dx0 *r;
				a0=Math.atan2(-dx0,dy0);
				a1=Math.atan2(dx1,-dy1);
				dir=true;
			}
			this.arc(cx,cy,r,a0,a1,dir,false);
		}

		__proto.arc=function(cx,cy,r,startAngle,endAngle,counterclockwise,b){
			(counterclockwise===void 0)&& (counterclockwise=false);
			(b===void 0)&& (b=true);
			if (this.mId !=-1){
				var tShape=VectorGraphManager.getInstance().shapeDic[this.mId];
				if (tShape){
					if (this.mHaveKey && !tShape.needUpdate(this._curMat))
						return;
				}
				cx=0;
				cy=0;
			};
			var a=0,da=0,hda=0,kappa=0;
			var dx=0,dy=0,x=0,y=0,tanx=0,tany=0;
			var px=0,py=0,ptanx=0,ptany=0;
			var i=0,ndivs=0,nvals=0;
			da=endAngle-startAngle;
			if (!counterclockwise){
				if (Math.abs(da)>=Math.PI *2){
					da=Math.PI *2;
				}
				else{
					while (da < 0.0){
						da+=Math.PI *2;
					}
				}
			}
			else{
				if (Math.abs(da)>=Math.PI *2){
					da=-Math.PI *2;
				}
				else{
					while (da > 0.0){
						da-=Math.PI *2;
					}
				}
			}
			if (r < 101){
				ndivs=Math.max(10,da *r / 5);
			}
			else if (r < 201){
				ndivs=Math.max(10,da *r / 20);
			}
			else{
				ndivs=Math.max(10,da *r / 40);
			}
			hda=(da / ndivs)/ 2.0;
			kappa=Math.abs(4 / 3 *(1-Math.cos(hda))/ Math.sin(hda));
			if (counterclockwise)
				kappa=-kappa;
			nvals=0;
			var tPath=this._getPath();
			var _x1=NaN,_y1=NaN;
			for (i=0;i <=ndivs;i++){
				a=startAngle+da *(i / ndivs);
				dx=Math.cos(a);
				dy=Math.sin(a);
				x=cx+dx *r;
				y=cy+dy *r;
				if (b){
					_x1=x,_y1=y;
					x=this._curMat.a *_x1+this._curMat.c *_y1;
					y=this._curMat.b *_x1+this._curMat.d *_y1;
				}
				if (x !=this._path.getEndPointX()|| y !=this._path.getEndPointY()){
					tPath.addPoint(x,y);
				}
			}
			dx=Math.cos(endAngle);
			dy=Math.sin(endAngle);
			x=cx+dx *r;
			y=cy+dy *r;
			if (b){
				_x1=x,_y1=y;
				x=this._curMat.a *_x1+this._curMat.c *_y1;
				y=this._curMat.b *_x1+this._curMat.d *_y1;
			}
			if (x !=this._path.getEndPointX()|| y !=this._path.getEndPointY()){
				tPath.addPoint(x,y);
			}
		}

		__proto.quadraticCurveTo=function(cpx,cpy,x,y){
			var tBezier=Bezier.I;
			var tResultArray=[];
			var _x1=x,_y1=y;
			x=this._curMat.a *_x1+this._curMat.c *_y1;
			y=this._curMat.b *_x1+this._curMat.d *_y1;
			_x1=cpx,_y1=cpy;
			cpx=this._curMat.a *_x1+this._curMat.c *_y1;
			cpy=this._curMat.b *_x1+this._curMat.d *_y1;
			var tArray=tBezier.getBezierPoints([this._path.getEndPointX(),this._path.getEndPointY(),cpx,cpy,x,y],30,2);
			for (var i=0,n=tArray.length / 2;i < n;i++){
				this.lineTo(tArray[i *2],tArray[i *2+1],false);
			}
			this.lineTo(x,y,false);
		}

		__proto.rect=function(x,y,width,height){
			this._other=this._other.make();
			this._other.path || (this._other.path=new Path());
			this._other.path.rect(x,y,width,height);
		}

		__proto.strokeRect=function(x,y,width,height,parameterLineWidth){
			var tW=parameterLineWidth *0.5;
			this.line(x-tW,y,x+width+tW,y,parameterLineWidth,this._curMat);
			this.line(x+width,y,x+width,y+height,parameterLineWidth,this._curMat);
			this.line(x,y,x,y+height,parameterLineWidth,this._curMat);
			this.line(x-tW,y+height,x+width+tW,y+height,parameterLineWidth,this._curMat);
		}

		__proto.clip=function(){}
		/**
		*画多边形(用)
		*@param x
		*@param y
		*@param points
		*/
		__proto.drawPoly=function(x,y,points,color,lineWidth,boderColor,isConvexPolygon){
			(isConvexPolygon===void 0)&& (isConvexPolygon=false);
			this._renderKey=0;
			this._shader2D.glTexture=null;
			var tPath=this._getPath();
			if (this.mId==-1){
				tPath.polygon(x,y,points,color,lineWidth ? lineWidth :1,boderColor)
			}
			else{
				if (this.mHaveKey){
					var tShape=VectorGraphManager.getInstance().shapeDic[this.mId];
					tShape.setMatrix(this._curMat);
					tShape.rebuild(tPath.tempArray);
					tPath.setGeomtry(tShape);
				}
				else{
					var t=tPath.polygon(x,y,points,color,lineWidth ? lineWidth :1,boderColor);
					VectorGraphManager.getInstance().addShape(this.mId,t);
					t.setMatrix(this._curMat);
				}
			}
			tPath.update();
			var tPosArray=[this.mX,this.mY];
			var tempSubmit;
			if (!isConvexPolygon){
				var submit=SubmitStencil.create(4);
				this.addRenderObject(submit);
				tempSubmit=Submit.createShape(this,tPath.ib,tPath.vb,tPath.count,tPath.offset,Value2D.create(0x04,0));
				tempSubmit.shaderValue.ALPHA=this._shader2D.ALPHA;
				(tempSubmit.shaderValue).u_pos=tPosArray;
				tempSubmit.shaderValue.u_mmat2=RenderState2D.EMPTYMAT4_ARRAY;
				this._submits[this._submits._length++]=tempSubmit;
				submit=SubmitStencil.create(5);
				this.addRenderObject(submit);
			}
			tempSubmit=Submit.createShape(this,tPath.ib,tPath.vb,tPath.count,tPath.offset,Value2D.create(0x04,0));
			tempSubmit.shaderValue.ALPHA=this._shader2D.ALPHA;
			(tempSubmit.shaderValue).u_pos=tPosArray;
			tempSubmit.shaderValue.u_mmat2=RenderState2D.EMPTYMAT4_ARRAY;
			this._submits[this._submits._length++]=tempSubmit;
			if (!isConvexPolygon){
				submit=SubmitStencil.create(3);
				this.addRenderObject(submit);
			}
			if (lineWidth > 0){
				if (this.mHaveLineKey){
					var tShapeLine=VectorGraphManager.getInstance().shapeLineDic[this.mId];
					tShapeLine.rebuild(tPath.tempArray);
					tPath.setGeomtry(tShapeLine);
				}
				else{
					VectorGraphManager.getInstance().addShape(this.mId,tPath.drawLine(x,y,points,lineWidth,boderColor));
				}
				tPath.update();
				tempSubmit=Submit.createShape(this,tPath.ib,tPath.vb,tPath.count,tPath.offset,Value2D.create(0x04,0));
				tempSubmit.shaderValue.ALPHA=this._shader2D.ALPHA;
				tempSubmit.shaderValue.u_mmat2=RenderState2D.EMPTYMAT4_ARRAY;
				this._submits[this._submits._length++]=tempSubmit;
			}
		}

		/*******************************************end矢量绘制***************************************************/
		__proto.drawParticle=function(x,y,pt){
			pt.x=x;
			pt.y=y;
			this._submits[this._submits._length++]=pt;
		}

		__proto._getPath=function(){
			return this._path || (this._path=new Path());
		}

		/*,_shader2D.ALPHA=1*/
		__getset(0,__proto,'globalCompositeOperation',function(){
			return BlendMode.NAMES[this._nBlendType];
			},function(value){
			var n=BlendMode.TOINT[value];
			n==null || (this._nBlendType===n)|| (SaveBase.save(this,0x10000,this,true),this._curSubmit=Submit.RENDERBASE,this._renderKey=0,this._nBlendType=n);
		});

		__getset(0,__proto,'strokeStyle',function(){
			return this._shader2D.strokeStyle;
			},function(value){
			this._shader2D.strokeStyle.equal(value)|| (SaveBase.save(this,0x200,this._shader2D,false),this._shader2D.strokeStyle=DrawStyle.create(value));
		});

		__getset(0,__proto,'globalAlpha',function(){
			return this._shader2D.ALPHA;
			},function(value){
			value=Math.floor(value *1000)/ 1000;
			if (value !=this._shader2D.ALPHA){
				SaveBase.save(this,0x1,this._shader2D,true);
				this._shader2D.ALPHA=value;
			}
		});

		__getset(0,__proto,'asBitmap',null,function(value){
			if (value){
				this._targets || (this._targets=new RenderTargetMAX());
				this._targets.repaint=true;
				if (!this._width || !this._height)
					throw Error("asBitmap no size!");
				this._targets.setSP(this.sprite);
				this._targets.size(this._width,this._height);
			}
			else
			this._targets=null;
		});

		__getset(0,__proto,'fillStyle',function(){
			return this._shader2D.fillStyle;
			},function(value){
			this._shader2D.fillStyle.equal(value)|| (SaveBase.save(this,0x2,this._shader2D,false),this._shader2D.fillStyle=DrawStyle.create(value));
		});

		__getset(0,__proto,'textAlign',function(){
			return this._other.textAlign;
			},function(value){
			(this._other.textAlign===value)|| (this._other=this._other.make(),SaveBase.save(this,0x8000,this._other,false),this._other.textAlign=value);
		});

		__getset(0,__proto,'lineWidth',function(){
			return this._other.lineWidth;
			},function(value){
			(this._other.lineWidth===value)|| (this._other=this._other.make(),SaveBase.save(this,0x100,this._other,false),this._other.lineWidth=value);
		});

		__getset(0,__proto,'textBaseline',function(){
			return this._other.textBaseline;
			},function(value){
			(this._other.textBaseline===value)|| (this._other=this._other.make(),SaveBase.save(this,0x4000,this._other,false),this._other.textBaseline=value);
		});

		__getset(0,__proto,'font',null,function(str){
			if (str==this._other.font.toString())
				return;
			this._other=this._other.make();
			SaveBase.save(this,0x8,this._other,false);
			this._other.font===FontInContext.EMPTY ? (this._other.font=new FontInContext(str)):(this._other.font.setFont(str));
		});

		WebGLContext2D.__init__=function(){
			ContextParams.DEFAULT=new ContextParams();
		}

		WebGLContext2D._SUBMITVBSIZE=32000;
		WebGLContext2D._MAXSIZE=99999999;
		WebGLContext2D._RECTVBSIZE=16;
		WebGLContext2D.MAXCLIPRECT=new Rectangle(0,0,99999999,99999999);
		WebGLContext2D._COUNT=0;
		WebGLContext2D._tmpMatrix=new Matrix();
		WebGLContext2D._contextcount=0;
		__static(WebGLContext2D,
		['_fontTemp',function(){return this._fontTemp=new FontInContext();},'_drawStyleTemp',function(){return this._drawStyleTemp=new DrawStyle(null);}
		]);
		WebGLContext2D.__init$=function(){
			//class ContextParams
			ContextParams=(function(){
				function ContextParams(){
					this.lineWidth=1;
					this.path=null;
					this.textAlign=null;
					this.textBaseline=null;
					this.font=FontInContext.EMPTY;
				}
				__class(ContextParams,'');
				var __proto=ContextParams.prototype;
				__proto.clear=function(){
					this.lineWidth=1;
					this.path && this.path.clear();
					this.textAlign=this.textBaseline=null;
					this.font=FontInContext.EMPTY;
				}
				__proto.make=function(){
					return this===ContextParams.DEFAULT ? new ContextParams():this;
				}
				ContextParams.DEFAULT=null
				return ContextParams;
			})()
		}

		return WebGLContext2D;
	})(Context)


	//class laya.webgl.utils.RenderSprite3D extends laya.renders.RenderSprite
	var RenderSprite3D=(function(_super){
		function RenderSprite3D(type,next){
			RenderSprite3D.__super.call(this,type,next);
		}

		__class(RenderSprite3D,'laya.webgl.utils.RenderSprite3D',_super);
		var __proto=RenderSprite3D.prototype;
		__proto.onCreate=function(type){
			switch (type){
				case 0x08:
					this._fun=this._blend;
					return;
				case 0x04:
					this._fun=this._transform;
					return;
				}
		}

		__proto._mask=function(sprite,context,x,y){
			var next=this._next;
			var mask=sprite.mask;
			var submitCMD;
			var submitStencil;
			if (mask){
				context.ctx.save();
				var preBlendMode=(context.ctx).globalCompositeOperation;
				var tRect=new Rectangle();
				tRect.copyFrom(mask.getBounds());
				tRect.width=Math.round(tRect.width);
				tRect.height=Math.round(tRect.height);
				tRect.x=Math.round(tRect.x);
				tRect.y=Math.round(tRect.y);
				if (tRect.width > 0 && tRect.height > 0){
					var scope=SubmitCMDScope.create();
					scope.addValue("bounds",tRect);
					submitCMD=SubmitCMD.create([scope,context],laya.webgl.utils.RenderSprite3D.tmpTarget);
					context.addRenderObject(submitCMD);
					mask.render(context,-tRect.x,-tRect.y);
					submitCMD=SubmitCMD.create([scope],laya.webgl.utils.RenderSprite3D.endTmpTarget);
					context.addRenderObject(submitCMD);
					context.ctx.save();
					context.clipRect(x+tRect.x,y+tRect.y,tRect.width,tRect.height);
					next._fun.call(next,sprite,context,x,y);
					context.ctx.restore();
					submitStencil=SubmitStencil.create(6);
					preBlendMode=(context.ctx).globalCompositeOperation;
					submitStencil.blendMode="mask";
					context.addRenderObject(submitStencil);
					Matrix.TEMP.identity();
					var shaderValue=Value2D.create(0x01,0);
					var uv=Texture.INV_UV;
					var w=tRect.width;
					var h=tRect.height;
					var tempLimit=32;
					if (tRect.width < tempLimit || tRect.height < tempLimit){
						uv=RenderSprite3D.tempUV;
						uv[0]=0;
						uv[1]=0;
						uv[2]=(tRect.width >=32)? 1 :tRect.width/tempLimit;
						uv[3]=0
						uv[4]=(tRect.width >=32)? 1 :tRect.width/tempLimit;
						uv[5]=(tRect.height >=32)? 1 :tRect.height/tempLimit;
						uv[6]=0;
						uv[7]=(tRect.height >=32)? 1 :tRect.height/tempLimit;
						tRect.width=(tRect.width >=32)? tRect.width :tempLimit;
						tRect.height=(tRect.height >=32)? tRect.height :tempLimit;
						uv[1] *=-1;uv[3] *=-1;uv[5] *=-1;uv[7] *=-1;
						uv[1]+=1;uv[3]+=1;uv[5]+=1;uv[7]+=1;
					}
					(context.ctx).drawTarget(scope,x+tRect.x,y+tRect.y,w,h,Matrix.TEMP,"tmpTarget",shaderValue,uv,6);
					submitCMD=SubmitCMD.create([scope],laya.webgl.utils.RenderSprite3D.recycleTarget);
					context.addRenderObject(submitCMD);
					submitStencil=SubmitStencil.create(6);
					submitStencil.blendMode=preBlendMode;
					context.addRenderObject(submitStencil);
				}
				context.ctx.restore();
			}
			else{
				next._fun.call(next,sprite,context,x,y);
			}
		}

		__proto._blend=function(sprite,context,x,y){
			var style=sprite._style;
			var next=this._next;
			if (style.blendMode){
				context.ctx.save();
				context.ctx.globalCompositeOperation=style.blendMode;
				next._fun.call(next,sprite,context,x,y);
				context.ctx.restore();
			}
			else{
				next._fun.call(next,sprite,context,x,y);
			}
		}

		__proto._transform=function(sprite,context,x,y){
			'use strict';
			var transform=sprite.transform,_next=this._next;
			if (transform && _next !=RenderSprite.NORENDER){
				var ctx=context.ctx;
				var style=sprite._style;
				transform.tx=x;
				transform.ty=y;
				var m2=ctx._getTransformMatrix();
				var m1=m2.clone();
				Matrix.mul(transform,m2,m2);
				m2._checkTransform();
				transform.tx=transform.ty=0;
				_next._fun.call(_next,sprite,context,0,0);
				m1.copyTo(m2);
				m1.destroy();
				}else {
				_next._fun.call(_next,sprite,context,x,y);
			}
		}

		RenderSprite3D.tmpTarget=function(scope,context){
			var b=scope.getValue("bounds");
			var tmpTarget=RenderTarget2D.create(b.width,b.height);
			tmpTarget.start();
			tmpTarget.clear(0,0,0,0);
			scope.addValue("tmpTarget",tmpTarget);
		}

		RenderSprite3D.endTmpTarget=function(scope){
			var tmpTarget=scope.getValue("tmpTarget");
			tmpTarget.end();
		}

		RenderSprite3D.recycleTarget=function(scope){
			var tmpTarget=scope.getValue("tmpTarget");
			tmpTarget.recycle();
			scope.recycle();
		}

		__static(RenderSprite3D,
		['tempUV',function(){return this.tempUV=new Array(8);}
		]);
		return RenderSprite3D;
	})(RenderSprite)


	//class laya.webgl.atlas.Atlaser extends laya.webgl.atlas.AtlasGrid
	var Atlaser=(function(_super){
		function Atlaser(gridNumX,gridNumY,width,height,atlasID){
			this._atlasCanvas=null;
			this._inAtlasTextureKey=null;
			this._inAtlasTextureBitmapValue=null;
			this._inAtlasTextureOriUVValue=null;
			this._InAtlasWebGLImagesKey=null;
			this._InAtlasWebGLImagesOffsetValue=null;
			Atlaser.__super.call(this,gridNumX,gridNumY,atlasID);
			this._inAtlasTextureKey=[];
			this._inAtlasTextureBitmapValue=[];
			this._inAtlasTextureOriUVValue=[];
			this._InAtlasWebGLImagesKey=[];
			this._InAtlasWebGLImagesOffsetValue=[];
			this._atlasCanvas=new AtlasWebGLCanvas();
			this._atlasCanvas.width=width;
			this._atlasCanvas.height=height;
			this._atlasCanvas.activeResource();
			this._atlasCanvas.lock=true;
		}

		__class(Atlaser,'laya.webgl.atlas.Atlaser',_super);
		var __proto=Atlaser.prototype;
		__proto.computeUVinAtlasTexture=function(texture,oriUV,offsetX,offsetY){
			var tex=texture;
			var _width=AtlasResourceManager.atlasTextureWidth;
			var _height=AtlasResourceManager.atlasTextureHeight;
			var u1=offsetX / _width,v1=offsetY / _height,u2=(offsetX+texture.bitmap.width)/ _width,v2=(offsetY+texture.bitmap.height)/ _height;
			var inAltasUVWidth=texture.bitmap.width / _width,inAltasUVHeight=texture.bitmap.height / _height;
			texture.uv=[u1+oriUV[0] *inAltasUVWidth,v1+oriUV[1] *inAltasUVHeight,u2-(1-oriUV[2])*inAltasUVWidth,v1+oriUV[3] *inAltasUVHeight,u2-(1-oriUV[4])*inAltasUVWidth,v2-(1-oriUV[5])*inAltasUVHeight,u1+oriUV[6] *inAltasUVWidth,v2-(1-oriUV[7])*inAltasUVHeight];
		}

		/**
		*
		*@param inAtlasRes
		*@return 是否已经存在队列中
		*/
		__proto.addToAtlasTexture=function(mergeAtlasBitmap,offsetX,offsetY){
			((mergeAtlasBitmap instanceof laya.webgl.resource.WebGLImage ))&& (this._InAtlasWebGLImagesKey.push(mergeAtlasBitmap),this._InAtlasWebGLImagesOffsetValue.push([offsetX,offsetY]));
			this._atlasCanvas.texSubImage2D(offsetX,offsetY,mergeAtlasBitmap.atlasSource);
			mergeAtlasBitmap.clearAtlasSource();
		}

		__proto.addToAtlas=function(texture,offsetX,offsetY){
			var oriUV=texture.uv.slice();
			var oriBitmap=texture.bitmap;
			this._inAtlasTextureKey.push(texture);
			this._inAtlasTextureOriUVValue.push(oriUV);
			this._inAtlasTextureBitmapValue.push(oriBitmap);
			this.computeUVinAtlasTexture(texture,oriUV,offsetX,offsetY);
			texture.bitmap=this._atlasCanvas;
		}

		__proto.clear=function(){
			for (var i=0,n=this._inAtlasTextureKey.length;i < n;i++){
				this._inAtlasTextureKey[i].bitmap=this._inAtlasTextureBitmapValue[i];
				this._inAtlasTextureKey[i].uv=this._inAtlasTextureOriUVValue[i];
				this._inAtlasTextureKey[i].bitmap.lock=false;
				this._inAtlasTextureKey[i].bitmap.releaseResource();
			}
			this._inAtlasTextureKey.length=0;
			this._inAtlasTextureBitmapValue.length=0;
			this._inAtlasTextureOriUVValue.length=0;
			this._InAtlasWebGLImagesKey.length=0;
			this._InAtlasWebGLImagesOffsetValue.length=0;
		}

		__proto.dispose=function(){
			this.clear();
			this._atlasCanvas.dispose();
		}

		__getset(0,__proto,'InAtlasWebGLImagesOffsetValue',function(){
			return this._InAtlasWebGLImagesOffsetValue;
		});

		__getset(0,__proto,'texture',function(){
			return this._atlasCanvas;
		});

		__getset(0,__proto,'inAtlasWebGLImagesKey',function(){
			return this._InAtlasWebGLImagesKey;
		});

		return Atlaser;
	})(AtlasGrid)


	//class laya.webgl.shader.d2.ShaderDefines2D extends laya.webgl.shader.ShaderDefines
	var ShaderDefines2D=(function(_super){
		function ShaderDefines2D(){
			ShaderDefines2D.__super.call(this,ShaderDefines2D.__name2int,ShaderDefines2D.__int2name,ShaderDefines2D.__int2nameMap);
		}

		__class(ShaderDefines2D,'laya.webgl.shader.d2.ShaderDefines2D',_super);
		ShaderDefines2D.__init__=function(){
			ShaderDefines2D.reg("TEXTURE2D",0x01);
			ShaderDefines2D.reg("COLOR2D",0x02);
			ShaderDefines2D.reg("PRIMITIVE",0x04);
			ShaderDefines2D.reg("GLOW_FILTER",0x08);
			ShaderDefines2D.reg("BLUR_FILTER",0x10);
			ShaderDefines2D.reg("COLOR_FILTER",0x20);
			ShaderDefines2D.reg("COLOR_ADD",0x40);
			ShaderDefines2D.reg("WORLDMAT",0x80);
			ShaderDefines2D.reg("FILLTEXTURE",0x100);
			ShaderDefines2D.reg("FSHIGHPRECISION",0x400);
		}

		ShaderDefines2D.reg=function(name,value){
			ShaderDefines._reg(name,value,ShaderDefines2D.__name2int,ShaderDefines2D.__int2name);
		}

		ShaderDefines2D.toText=function(value,int2name,int2nameMap){
			return ShaderDefines._toText(value,int2name,int2nameMap);
		}

		ShaderDefines2D.toInt=function(names){
			return ShaderDefines._toInt(names,ShaderDefines2D.__name2int);
		}

		ShaderDefines2D.TEXTURE2D=0x01;
		ShaderDefines2D.COLOR2D=0x02;
		ShaderDefines2D.PRIMITIVE=0x04;
		ShaderDefines2D.FILTERGLOW=0x08;
		ShaderDefines2D.FILTERBLUR=0x10;
		ShaderDefines2D.FILTERCOLOR=0x20;
		ShaderDefines2D.COLORADD=0x40;
		ShaderDefines2D.WORLDMAT=0x80;
		ShaderDefines2D.FILLTEXTURE=0x100;
		ShaderDefines2D.SKINMESH=0x200;
		ShaderDefines2D.SHADERDEFINE_FSHIGHPRECISION=0x400;
		ShaderDefines2D.__name2int={};
		ShaderDefines2D.__int2name=[];
		ShaderDefines2D.__int2nameMap=[];
		return ShaderDefines2D;
	})(ShaderDefines)


	//class laya.webgl.shapes.Line extends laya.webgl.shapes.BasePoly
	var Line=(function(_super){
		function Line(x,y,points,borderWidth,color){
			this._points=[];
			this.rebuild(points);
			Line.__super.call(this,x,y,0,0,0,color,borderWidth,color,0);
		}

		__class(Line,'laya.webgl.shapes.Line',_super);
		var __proto=Line.prototype;
		__proto.rebuild=function(points){
			var len=points.length;
			var preLen=this._points.length;
			if (len !=preLen){
				this.mUint16Array=new Uint16Array((len/2-1)*6);
				this.mFloat32Array=new Float32Array(len*5);
			}
			this._points.length=0;
			var tCurrX=NaN;
			var tCurrY=NaN;
			var tLastX=-1;
			var tLastY=-1;
			var tLen=points.length / 2;
			for (var i=0;i < tLen;i++){
				tCurrX=points[i *2];
				tCurrY=points[i *2+1];
				if (Math.abs(tLastX-tCurrX)> 0.01 || Math.abs(tLastY-tCurrY)>0.01){
					this._points.push(tCurrX,tCurrY);
				}
				tLastX=tCurrX;
				tLastY=tCurrY;
			}
		}

		__proto.getData=function(ib,vb,start){
			var indices=[];
			var verts=[];
			(this.borderWidth > 0)&& this.createLine2(this._points,indices,this.borderWidth,start,verts,this._points.length / 2);
			this.mUint16Array.set(indices,0);
			this.mFloat32Array.set(verts,0);
			ib.append(this.mUint16Array);
			vb.append(this.mFloat32Array);
		}

		return Line;
	})(BasePoly)


	//class laya.webgl.shapes.LoopLine extends laya.webgl.shapes.BasePoly
	var LoopLine=(function(_super){
		function LoopLine(x,y,points,width,color){
			this._points=[];
			var tCurrX=NaN;
			var tCurrY=NaN;
			var tLastX=-1;
			var tLastY=-1;
			var tLen=points.length / 2-1;
			for (var i=0;i < tLen;i++){
				tCurrX=points[i *2];
				tCurrY=points[i *2+1];
				if (Math.abs(tLastX-tCurrX)> 0.01 || Math.abs(tLastY-tCurrY)> 0.01){
					this._points.push(tCurrX,tCurrY);
				}
				tLastX=tCurrX;
				tLastY=tCurrY;
			}
			tCurrX=points[tLen *2];
			tCurrY=points[tLen *2+1];
			tLastX=this._points[0];
			tLastY=this._points[1];
			if (Math.abs(tLastX-tCurrX)> 0.01 || Math.abs(tLastY-tCurrY)> 0.01){
				this._points.push(tCurrX,tCurrY);
			}
			LoopLine.__super.call(this,x,y,0,0,this._points.length / 2,0,width,color);
		}

		__class(LoopLine,'laya.webgl.shapes.LoopLine',_super);
		var __proto=LoopLine.prototype;
		__proto.getData=function(ib,vb,start){
			if (this.borderWidth > 0){
				var color=this.color;
				var r=((color >> 16)& 0x0000ff)/ 255,g=((color >> 8)& 0xff)/ 255,b=(color & 0x0000ff)/ 255;
				var verts=[];
				var tLastX=-1,tLastY=-1;
				var tCurrX=0,tCurrY=0;
				var indices=[];
				var tLen=Math.floor(this._points.length / 2);
				for (var i=0;i < tLen;i++){
					tCurrX=this._points[i *2];
					tCurrY=this._points[i *2+1];
					verts.push(this.x+tCurrX,this.y+tCurrY,r,g,b);
				}
				this.createLoopLine(verts,indices,this.borderWidth,start+verts.length / 5);
				ib.append(new Uint16Array(indices));
				vb.append(new Float32Array(verts));
			}
		}

		__proto.createLoopLine=function(p,indices,lineWidth,len,outVertex,outIndex){
			var tLen=p.length / 5;
			var points=p.concat();
			var result=outVertex ? outVertex :p;
			var color=this.borderColor;
			var r=((color >> 16)& 0x0000ff)/ 255,g=((color >> 8)& 0xff)/ 255,b=(color & 0x0000ff)/ 255;
			var firstPoint=[points[0],points[1]];
			var lastPoint=[points[points.length-5],points[points.length-4]];
			var midPointX=lastPoint[0]+(firstPoint[0]-lastPoint[0])*0.5;
			var midPointY=lastPoint[1]+(firstPoint[1]-lastPoint[1])*0.5;
			points.unshift(midPointX,midPointY,0,0,0);
			points.push(midPointX,midPointY,0,0,0);
			var length=points.length / 5;
			var iStart=len,w=lineWidth / 2;
			var px,py,p1x,p1y,p2x,p2y,p3x,p3y;
			var perpx,perpy,perp2x,perp2y,perp3x,perp3y;
			var a1,b1,c1,a2,b2,c2;
			var denom,pdist,dist;
			p1x=points[0];
			p1y=points[1];
			p2x=points[5];
			p2y=points[6];
			perpx=-(p1y-p2y);
			perpy=p1x-p2x;
			dist=Math.sqrt(perpx *perpx+perpy *perpy);
			perpx=perpx / dist *w;
			perpy=perpy / dist *w;
			result.push(p1x-perpx,p1y-perpy,r,g,b,p1x+perpx,p1y+perpy,r,g,b);
			for (var i=1;i < length-1;i++){
				p1x=points[(i-1)*5];
				p1y=points[(i-1)*5+1];
				p2x=points[(i)*5];
				p2y=points[(i)*5+1];
				p3x=points[(i+1)*5];
				p3y=points[(i+1)*5+1];
				perpx=-(p1y-p2y);
				perpy=p1x-p2x;
				dist=Math.sqrt(perpx *perpx+perpy *perpy);
				perpx=perpx / dist *w;
				perpy=perpy / dist *w;
				perp2x=-(p2y-p3y);
				perp2y=p2x-p3x;
				dist=Math.sqrt(perp2x *perp2x+perp2y *perp2y);
				perp2x=perp2x / dist *w;
				perp2y=perp2y / dist *w;
				a1=(-perpy+p1y)-(-perpy+p2y);
				b1=(-perpx+p2x)-(-perpx+p1x);
				c1=(-perpx+p1x)*(-perpy+p2y)-(-perpx+p2x)*(-perpy+p1y);
				a2=(-perp2y+p3y)-(-perp2y+p2y);
				b2=(-perp2x+p2x)-(-perp2x+p3x);
				c2=(-perp2x+p3x)*(-perp2y+p2y)-(-perp2x+p2x)*(-perp2y+p3y);
				denom=a1 *b2-a2 *b1;
				if (Math.abs(denom)< 0.1){
					denom+=10.1;
					result.push(p2x-perpx,p2y-perpy,r,g,b,p2x+perpx,p2y+perpy,r,g,b);
					continue ;
				}
				px=(b1 *c2-b2 *c1)/ denom;
				py=(a2 *c1-a1 *c2)/ denom;
				pdist=(px-p2x)*(px-p2x)+(py-p2y)+(py-p2y);
				result.push(px,py,r,g,b,p2x-(px-p2x),p2y-(py-p2y),r,g,b);
			}
			if (outIndex){
				indices=outIndex;
			};
			var groupLen=this.edges+1;
			for (i=1;i < groupLen;i++){
				indices.push(iStart+(i-1)*2,iStart+(i-1)*2+1,iStart+i *2+1,iStart+i *2+1,iStart+i *2,iStart+(i-1)*2);
			}
			indices.push(iStart+(i-1)*2,iStart+(i-1)*2+1,iStart+1,iStart+1,iStart,iStart+(i-1)*2);
			return result;
		}

		return LoopLine;
	})(BasePoly)


	//class laya.webgl.shapes.Polygon extends laya.webgl.shapes.BasePoly
	var Polygon=(function(_super){
		function Polygon(x,y,points,color,borderWidth,borderColor){
			this._points=null;
			this._start=-1;
			this._repaint=false;
			this._mat=Matrix.create();
			this._points=points.slice(0,points.length);
			Polygon.__super.call(this,x,y,0,0,this._points.length / 2,color,borderWidth,borderColor);
		}

		__class(Polygon,'laya.webgl.shapes.Polygon',_super);
		var __proto=Polygon.prototype;
		__proto.rebuild=function(point){
			if (!this._repaint){
				this._points.length=0;
				this._points=this._points.concat(point);
			}
		}

		__proto.setMatrix=function(mat){
			mat.copyTo(this._mat);
		}

		__proto.needUpdate=function(mat){
			this._repaint=(this._mat.a==mat.a && this._mat.b==mat.b && this._mat.c==mat.c && this._mat.d==mat.d && this._mat.tx==mat.tx && this._mat.ty==mat.ty);
			return !this._repaint;
		}

		__proto.getData=function(ib,vb,start){
			var indices,i=0;
			var tArray=this._points;
			var tLen=0;
			if (this.mUint16Array && this.mFloat32Array&&this._repaint){
				if (this._start !=start){
					this._start=start;
					indices=[];
					tLen=Math.floor(tArray.length / 2);
					for (i=2;i < tLen;i++){
						indices.push(start,start+i-1,start+i);
					}
					this.mUint16Array=new Uint16Array(indices);
				}
			}
			else {
				this._start=start;
				indices=[];
				var verts=[];
				var color=this.color;
				var r=((color >> 16)& 0x0000ff)/ 255,g=((color >> 8)& 0xff)/ 255,b=(color & 0x0000ff)/ 255;
				tLen=Math.floor(tArray.length / 2);
				for (i=0;i < tLen;i++){
					verts.push(this.x+tArray[i *2],this.y+tArray[i *2+1],r,g,b);
				}
				for (i=2;i < tLen;i++){
					indices.push(start,start+i-1,start+i);
				}
				this.mUint16Array=new Uint16Array(indices);
				this.mFloat32Array=new Float32Array(verts);
			}
			ib.append(this.mUint16Array);
			vb.append(this.mFloat32Array);
		}

		return Polygon;
	})(BasePoly)


	//class laya.webgl.submit.SubmitCanvas extends laya.webgl.submit.Submit
	var SubmitCanvas=(function(_super){
		function SubmitCanvas(){
			//this._ctx_src=null;
			this._matrix=new Matrix();
			this._matrix4=CONST3D2D.defaultMatrix4.concat();
			SubmitCanvas.__super.call(this,10000);
			this.shaderValue=new Value2D(0,0);
		}

		__class(SubmitCanvas,'laya.webgl.submit.SubmitCanvas',_super);
		var __proto=SubmitCanvas.prototype;
		__proto.renderSubmit=function(){
			if (this._ctx_src._targets){
				this._ctx_src._targets.flush(this._ctx_src);
				return 1;
			};
			var preAlpha=RenderState2D.worldAlpha;
			var preMatrix4=RenderState2D.worldMatrix4;
			var preMatrix=RenderState2D.worldMatrix;
			var preFilters=RenderState2D.worldFilters;
			var preWorldShaderDefines=RenderState2D.worldShaderDefines;
			var v=this.shaderValue;
			var m=this._matrix;
			var m4=this._matrix4;
			var mout=Matrix.TEMP;
			Matrix.mul(m,preMatrix,mout);
			m4[0]=mout.a;
			m4[1]=mout.b;
			m4[4]=mout.c;
			m4[5]=mout.d;
			m4[12]=mout.tx;
			m4[13]=mout.ty;
			RenderState2D.worldMatrix=mout.clone();
			RenderState2D.worldMatrix4=m4;
			RenderState2D.worldAlpha=RenderState2D.worldAlpha *v.alpha;
			if (v.filters && v.filters.length){
				RenderState2D.worldFilters=v.filters;
				RenderState2D.worldShaderDefines=v.defines;
			}
			this._ctx_src.flush();
			RenderState2D.worldAlpha=preAlpha;
			RenderState2D.worldMatrix4=preMatrix4;
			RenderState2D.worldMatrix.destroy();
			RenderState2D.worldMatrix=preMatrix;
			RenderState2D.worldFilters=preFilters;
			RenderState2D.worldShaderDefines=preWorldShaderDefines;
			return 1;
		}

		__proto.releaseRender=function(){
			var cache=SubmitCanvas._cache;
			this._ctx_src=null;
			cache[cache._length++]=this;
		}

		__proto.getRenderType=function(){
			return 10003;
		}

		SubmitCanvas.create=function(ctx_src,alpha,filters){
			var o=(!SubmitCanvas._cache._length)? (new SubmitCanvas()):SubmitCanvas._cache[--SubmitCanvas._cache._length];
			o._ctx_src=ctx_src;
			var v=o.shaderValue;
			v.alpha=alpha;
			v.defines.setValue(0);
			filters && filters.length && v.setFilters(filters);
			return o;
		}

		SubmitCanvas._cache=(SubmitCanvas._cache=[],SubmitCanvas._cache._length=0,SubmitCanvas._cache);
		return SubmitCanvas;
	})(Submit)


	//class laya.webgl.submit.SubmitTexture extends laya.webgl.submit.Submit
	var SubmitTexture=(function(_super){
		function SubmitTexture(renderType){
			this._preIsSameTextureShader=false;
			this._isSameTexture=true;
			this._texs=new Array;
			this._texsID=new Array;
			this._vbPos=new Array;
			(renderType===void 0)&& (renderType=10000);
			SubmitTexture.__super.call(this,renderType);
		}

		__class(SubmitTexture,'laya.webgl.submit.SubmitTexture',_super);
		var __proto=SubmitTexture.prototype;
		__proto.releaseRender=function(){
			var cache=SubmitTexture._cache;
			cache[cache._length++]=this;
			this.shaderValue.release();
			this._preIsSameTextureShader=false;
			this._vb=null;
			this._texs.length=0;
			this._vbPos.length=0;
			this._isSameTexture=true;
		}

		__proto.addTexture=function(tex,vbpos){
			this._texsID[this._texs.length]=tex._uvID;
			this._texs.push(tex);
			this._vbPos.push(vbpos);
		}

		//检查材质是否修改，修改UV，设置是否是同一材质
		__proto.checkTexture=function(){
			if (this._texs.length < 1){
				this._isSameTexture=true;
				return;
			};
			var _tex=this.shaderValue.textureHost;
			var webGLImg=_tex.bitmap;
			if (webGLImg===null)return;
			var vbdata=this._vb.getFloat32Array();
			for (var i=0,s=this._texs.length;i < s;i++){
				var tex=this._texs[i];
				tex.active();
				var newUV=tex.uv;
				if (this._texsID[i]!==tex._uvID){
					this._texsID[i]=tex._uvID;
					var vbPos=this._vbPos[i];
					vbdata[vbPos+2]=newUV[0];
					vbdata[vbPos+3]=newUV[1];
					vbdata[vbPos+6]=newUV[2];
					vbdata[vbPos+7]=newUV[3];
					vbdata[vbPos+10]=newUV[4];
					vbdata[vbPos+11]=newUV[5];
					vbdata[vbPos+14]=newUV[6];
					vbdata[vbPos+15]=newUV[7];
					this._vb.setNeedUpload();
				}
				if (tex.bitmap!==webGLImg){
					this._isSameTexture=false;
				}
			}
		}

		__proto.renderSubmit=function(){
			Stat.drawCallOneFrame++;
			if (this._numEle===0){
				SubmitTexture._shaderSet=false;
				return 1;
			};
			var _tex=this.shaderValue.textureHost;
			if (_tex){
				var source=_tex.source;
				if (!_tex.bitmap || !source){
					SubmitTexture._shaderSet=false;
					return 1;
				}
				this.shaderValue.texture=source;
			}
			this._vb.bind_upload(this._ib);
			var gl=WebGL.mainContext;
			if (BlendMode.activeBlendFunction!==this._blendFn){
				gl.enable(0x0BE2);
				this._blendFn(gl);
				BlendMode.activeBlendFunction=this._blendFn;
			}
			Stat.drawCall++;
			Stat.trianglesFaces+=this._numEle / 3;
			if (this._preIsSameTextureShader && BaseShader.activeShader && SubmitTexture._shaderSet)
				(BaseShader.activeShader).uploadTexture2D(this.shaderValue.texture);
			else this.shaderValue.upload();
			SubmitTexture._shaderSet=true;
			if (this._texs.length > 1 && !this._isSameTexture){
				var webGLImg=_tex.bitmap;
				var index=0;
				var shader=BaseShader.activeShader;
				for (var i=0,s=this._texs.length;i < s;i++){
					var tex2=this._texs[i];
					if (tex2.bitmap!==webGLImg || (i+1)===s){
						shader.uploadTexture2D(tex2.source);
						gl.drawElements(0x0004,(i-index+1)*6,0x1403,this._startIdx+index *6 *CONST3D2D.BYTES_PIDX);
						webGLImg=tex2.bitmap;
						index=i;
					}
				}
				}else {
				gl.drawElements(0x0004,this._numEle,0x1403,this._startIdx);
			}
			return 1;
		}

		SubmitTexture.create=function(context,ib,vb,pos,sv){
			var o=SubmitTexture._cache._length ? SubmitTexture._cache[--SubmitTexture._cache._length] :new SubmitTexture();
			if (vb==null){
				vb=o._selfVb || (o._selfVb=VertexBuffer2D.create(-1));
				vb.clear();
				pos=0;
			}
			o._ib=ib;
			o._vb=vb;
			o._startIdx=pos *CONST3D2D.BYTES_PIDX;
			o._numEle=0;
			var blendType=context._nBlendType;
			o._blendFn=context._targets ? BlendMode.targetFns[blendType] :BlendMode.fns[blendType];
			o.shaderValue=sv;
			o.shaderValue.setValue(context._shader2D);
			var filters=context._shader2D.filters;
			filters && o.shaderValue.setFilters(filters);
			return o;
		}

		SubmitTexture._cache=(SubmitTexture._cache=[],SubmitTexture._cache._length=0,SubmitTexture._cache);
		SubmitTexture._shaderSet=true;
		return SubmitTexture;
	})(Submit)


	/**
	*<p> <code>Sprite</code> 是基本的显示图形的显示列表节点。 <code>Sprite</code> 默认没有宽高，默认不接受鼠标事件。通过 <code>graphics</code> 可以绘制图片或者矢量图，支持旋转，缩放，位移等操作。<code>Sprite</code>同时也是容器类，可用来添加多个子节点。</p>
	*<p>注意： <code>Sprite</code> 默认没有宽高，可以通过<code>getBounds</code>函数获取；也可手动设置宽高；还可以设置<code>autoSize=true</code>，然后再获取宽高。<code>Sprite</code>的宽高一般用于进行碰撞检测和排版，并不影响显示图像大小，如果需要更改显示图像大小，请使用 <code>scaleX</code> ， <code>scaleY</code> ， <code>scale</code>。</p>
	*<p> <code>Sprite</code> 默认不接受鼠标事件，即<code>mouseEnabled=false</code>，但是只要对其监听任意鼠标事件，会自动打开自己以及所有父对象的<code>mouseEnabled=true</code>。所以一般也无需手动设置<code>mouseEnabled</code>。</p>
	*<p>LayaAir引擎API设计精简巧妙。核心显示类只有一个<code>Sprite</code>。<code>Sprite</code>针对不同的情况做了渲染优化，所以保证一个类实现丰富功能的同时，又达到高性能。</p>
	*
	*@example <caption>创建了一个 <code>Sprite</code> 实例。</caption>
	*package
	*{
		*import laya.display.Sprite;
		*import laya.events.Event;
		*
		*public class Sprite_Example
		*{
			*private var sprite:Sprite;
			*private var shape:Sprite
			*public function Sprite_Example()
			*{
				*Laya.init(640,800);//设置游戏画布宽高、渲染模式。
				*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
				*onInit();
				*}
			*private function onInit():void
			*{
				*sprite=new Sprite();//创建一个 Sprite 类的实例对象 sprite 。
				*sprite.loadImage("resource/ui/bg.png");//加载并显示图片。
				*sprite.x=200;//设置 sprite 对象相对于父容器的水平方向坐标值。
				*sprite.y=200;//设置 sprite 对象相对于父容器的垂直方向坐标值。
				*sprite.pivotX=0;//设置 sprite 对象的水平方法轴心点坐标。
				*sprite.pivotY=0;//设置 sprite 对象的垂直方法轴心点坐标。
				*Laya.stage.addChild(sprite);//将此 sprite 对象添加到显示列表。
				*sprite.on(Event.CLICK,this,onClickSprite);//给 sprite 对象添加点击事件侦听。
				*shape=new Sprite();//创建一个 Sprite 类的实例对象 sprite 。
				*shape.graphics.drawRect(0,0,100,100,"#ccff00","#ff0000",2);//绘制一个有边框的填充矩形。
				*shape.x=400;//设置 shape 对象相对于父容器的水平方向坐标值。
				*shape.y=200;//设置 shape 对象相对于父容器的垂直方向坐标值。
				*shape.width=100;//设置 shape 对象的宽度。
				*shape.height=100;//设置 shape 对象的高度。
				*shape.pivotX=50;//设置 shape 对象的水平方法轴心点坐标。
				*shape.pivotY=50;//设置 shape 对象的垂直方法轴心点坐标。
				*Laya.stage.addChild(shape);//将此 shape 对象添加到显示列表。
				*shape.on(Event.CLICK,this,onClickShape);//给 shape 对象添加点击事件侦听。
				*}
			*private function onClickSprite():void
			*{
				*trace("点击 sprite 对象。");
				*sprite.rotation+=5;//旋转 sprite 对象。
				*}
			*private function onClickShape():void
			*{
				*trace("点击 shape 对象。");
				*shape.rotation+=5;//旋转 shape 对象。
				*}
			*}
		*}
	*
	*@example
	*var sprite;
	*var shape;
	*Sprite_Example();
	*function Sprite_Example()
	*{
		*Laya.init(640,800);//设置游戏画布宽高、渲染模式。
		*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
		*onInit();
		*}
	*function onInit()
	*{
		*sprite=new laya.display.Sprite();//创建一个 Sprite 类的实例对象 sprite 。
		*sprite.loadImage("resource/ui/bg.png");//加载并显示图片。
		*sprite.x=200;//设置 sprite 对象相对于父容器的水平方向坐标值。
		*sprite.y=200;//设置 sprite 对象相对于父容器的垂直方向坐标值。
		*sprite.pivotX=0;//设置 sprite 对象的水平方法轴心点坐标。
		*sprite.pivotY=0;//设置 sprite 对象的垂直方法轴心点坐标。
		*Laya.stage.addChild(sprite);//将此 sprite 对象添加到显示列表。
		*sprite.on(Event.CLICK,this,onClickSprite);//给 sprite 对象添加点击事件侦听。
		*shape=new laya.display.Sprite();//创建一个 Sprite 类的实例对象 sprite 。
		*shape.graphics.drawRect(0,0,100,100,"#ccff00","#ff0000",2);//绘制一个有边框的填充矩形。
		*shape.x=400;//设置 shape 对象相对于父容器的水平方向坐标值。
		*shape.y=200;//设置 shape 对象相对于父容器的垂直方向坐标值。
		*shape.width=100;//设置 shape 对象的宽度。
		*shape.height=100;//设置 shape 对象的高度。
		*shape.pivotX=50;//设置 shape 对象的水平方法轴心点坐标。
		*shape.pivotY=50;//设置 shape 对象的垂直方法轴心点坐标。
		*Laya.stage.addChild(shape);//将此 shape 对象添加到显示列表。
		*shape.on(laya.events.Event.CLICK,this,onClickShape);//给 shape 对象添加点击事件侦听。
		*}
	*function onClickSprite()
	*{
		*console.log("点击 sprite 对象。");
		*sprite.rotation+=5;//旋转 sprite 对象。
		*}
	*function onClickShape()
	*{
		*console.log("点击 shape 对象。");
		*shape.rotation+=5;//旋转 shape 对象。
		*}
	*
	*@example
	*import Sprite=laya.display.Sprite;
	*class Sprite_Example {
		*private sprite:Sprite;
		*private shape:Sprite
		*public Sprite_Example(){
			*Laya.init(640,800);//设置游戏画布宽高、渲染模式。
			*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
			*this.onInit();
			*}
		*private onInit():void {
			*this.sprite=new Sprite();//创建一个 Sprite 类的实例对象 sprite 。
			*this.sprite.loadImage("resource/ui/bg.png");//加载并显示图片。
			*this.sprite.x=200;//设置 sprite 对象相对于父容器的水平方向坐标值。
			*this.sprite.y=200;//设置 sprite 对象相对于父容器的垂直方向坐标值。
			*this.sprite.pivotX=0;//设置 sprite 对象的水平方法轴心点坐标。
			*this.sprite.pivotY=0;//设置 sprite 对象的垂直方法轴心点坐标。
			*Laya.stage.addChild(this.sprite);//将此 sprite 对象添加到显示列表。
			*this.sprite.on(laya.events.Event.CLICK,this,this.onClickSprite);//给 sprite 对象添加点击事件侦听。
			*this.shape=new Sprite();//创建一个 Sprite 类的实例对象 sprite 。
			*this.shape.graphics.drawRect(0,0,100,100,"#ccff00","#ff0000",2);//绘制一个有边框的填充矩形。
			*this.shape.x=400;//设置 shape 对象相对于父容器的水平方向坐标值。
			*this.shape.y=200;//设置 shape 对象相对于父容器的垂直方向坐标值。
			*this.shape.width=100;//设置 shape 对象的宽度。
			*this.shape.height=100;//设置 shape 对象的高度。
			*this.shape.pivotX=50;//设置 shape 对象的水平方法轴心点坐标。
			*this.shape.pivotY=50;//设置 shape 对象的垂直方法轴心点坐标。
			*Laya.stage.addChild(this.shape);//将此 shape 对象添加到显示列表。
			*this.shape.on(laya.events.Event.CLICK,this,this.onClickShape);//给 shape 对象添加点击事件侦听。
			*}
		*private onClickSprite():void {
			*console.log("点击 sprite 对象。");
			*this.sprite.rotation+=5;//旋转 sprite 对象。
			*}
		*private onClickShape():void {
			*console.log("点击 shape 对象。");
			*this.shape.rotation+=5;//旋转 shape 对象。
			*}
		*}
	*/
	//class laya.display.Sprite extends laya.display.Node
	var Sprite=(function(_super){
		function Sprite(){
			this._transform=null;
			this._tfChanged=false;
			this._x=0;
			this._y=0;
			this._width=0;
			this._height=0;
			this._repaint=1;
			this._mouseEnableState=0;
			this._zOrder=0;
			this._graphics=null;
			this._renderType=0;
			this._optimizeScrollRect=false;
			this._texture=null;
			this._childRenderMax=false;
			this.mouseThrough=false;
			this.autoSize=false;
			this.hitTestPrior=false;
			this.viewport=null;
			Sprite.__super.call(this);
			this._style=Style.EMPTY;
		}

		__class(Sprite,'laya.display.Sprite',_super);
		var __proto=Sprite.prototype;
		Laya.imps(__proto,{"laya.display.ILayout":true})
		/**@private */
		__proto.createConchModel=function(){
			return new ConchNode();
		}

		/**@inheritDoc */
		__proto.destroy=function(destroyChild){
			(destroyChild===void 0)&& (destroyChild=true);
			this._releaseMem();
			_super.prototype.destroy.call(this,destroyChild);
			this._style && this._style.destroy();
			this._transform && this._transform.destroy();
			this._transform=null;
			this._style=null;
			this._graphics=null;
		}

		/**根据zOrder进行重新排序。*/
		__proto.updateZOrder=function(){
			Utils$2.updateOrder(this._childs)&& this.repaint();
		}

		/**在设置cacheAs的情况下，调用此方法会重新刷新缓存。*/
		__proto.reCache=function(){
			if (this._$P.cacheCanvas)this._$P.cacheCanvas.reCache=true;
			this._repaint=1;
		}

		/**
		*设置对象bounds大小，如果有设置，则不再通过getBounds计算，合理使用能提高性能。
		*@param bound bounds矩形区域
		*/
		__proto.setBounds=function(bound){
			this._set$P("uBounds",bound);
		}

		/**
		*<p>获取本对象在父容器坐标系的矩形显示区域。</p>
		*<p><b>注意：</b>计算量较大，尽量少用。</p>
		*@return 矩形区域。
		*/
		__proto.getBounds=function(){
			if (!this._$P.mBounds)this._set$P("mBounds",new Rectangle());
			return Rectangle._getWrapRec(this._boundPointsToParent(),this._$P.mBounds);
		}

		/**
		*获取本对象在自己坐标系的矩形显示区域。
		*<p><b>注意：</b>计算量较大，尽量少用。</p>
		*@return 矩形区域。
		*/
		__proto.getSelfBounds=function(){
			if (!this._$P.mBounds)this._set$P("mBounds",new Rectangle());
			return Rectangle._getWrapRec(this._getBoundPointsM(false),this._$P.mBounds);
		}

		/**
		*@private
		*获取本对象在父容器坐标系的显示区域多边形顶点列表。
		*当显示对象链中有旋转时，返回多边形顶点列表，无旋转时返回矩形的四个顶点。
		*@param ifRotate （可选）之前的对象链中是否有旋转。
		*@return 顶点列表。结构：[x1,y1,x2,y2,x3,y3,...]。
		*/
		__proto._boundPointsToParent=function(ifRotate){
			(ifRotate===void 0)&& (ifRotate=false);
			var pX=0,pY=0;
			if (this._style){
				pX=this._style._tf.translateX;
				pY=this._style._tf.translateY;
				ifRotate=ifRotate || (this._style._tf.rotate!==0);
				if (this._style.scrollRect){
					pX+=this._style.scrollRect.x;
					pY+=this._style.scrollRect.y;
				}
			};
			var pList=this._getBoundPointsM(ifRotate);
			if (!pList || pList.length < 1)return pList;
			if (pList.length !=8){
				pList=ifRotate ? GrahamScan.scanPList(pList):Rectangle._getWrapRec(pList,Rectangle.TEMP)._getBoundPoints();
			}
			if (!this.transform){
				Utils$2.transPointList(pList,this._x-pX,this._y-pY);
				return pList;
			};
			var tPoint=Point.TEMP;
			var i=0,len=pList.length;
			for (i=0;i < len;i+=2){
				tPoint.x=pList[i];
				tPoint.y=pList[i+1];
				this.toParentPoint(tPoint);
				pList[i]=tPoint.x;
				pList[i+1]=tPoint.y;
			}
			return pList;
		}

		/**
		*返回此实例中的绘图对象（ <code>Graphics</code> ）的显示区域，不包括子对象。
		*@param realSize （可选）使用图片的真实大小，默认为false
		*@return 一个 Rectangle 对象，表示获取到的显示区域。
		*/
		__proto.getGraphicBounds=function(realSize){
			(realSize===void 0)&& (realSize=false);
			if (!this._graphics)return Rectangle.TEMP.setTo(0,0,0,0);
			return this._graphics.getBounds(realSize);
		}

		/**
		*@private
		*获取自己坐标系的显示区域多边形顶点列表
		*@param ifRotate （可选）当前的显示对象链是否由旋转
		*@return 顶点列表。结构：[x1,y1,x2,y2,x3,y3,...]。
		*/
		__proto._getBoundPointsM=function(ifRotate){
			(ifRotate===void 0)&& (ifRotate=false);
			if (this._$P.uBounds)return this._$P.uBounds._getBoundPoints();
			if (!this._$P.temBM)this._set$P("temBM",[]);
			if (this.scrollRect){
				var rst=Utils$2.clearArray(this._$P.temBM);
				var rec=Rectangle.TEMP;
				rec.copyFrom(this.scrollRect);
				Utils$2.concatArray(rst,rec._getBoundPoints());
				return rst;
			};
			var pList=this._graphics ? this._graphics.getBoundPoints():Utils$2.clearArray(this._$P.temBM);
			var child;
			var cList;
			var __childs;
			__childs=this._childs;
			for (var i=0,n=__childs.length;i < n;i++){
				child=__childs [i];
				if ((child instanceof laya.display.Sprite )&& child.visible==true){
					cList=child._boundPointsToParent(ifRotate);
					if (cList)
						pList=pList ? Utils$2.concatArray(pList,cList):cList;
				}
			}
			return pList;
		}

		/**
		*@private
		*获取样式。
		*@return 样式 Style 。
		*/
		__proto.getStyle=function(){
			this._style===Style.EMPTY && (this._style=new Style(),this._childRenderMax=true);
			return this._style;
		}

		/**
		*@private
		*设置样式。
		*@param value 样式。
		*/
		__proto.setStyle=function(value){
			this._style=value;
		}

		/**@private */
		__proto._adjustTransform=function(){
			'use strict';
			this._tfChanged=false;
			var style=this._style;
			var tf=style._tf;
			var sx=tf.scaleX,sy=tf.scaleY;
			var m;
			if (tf.rotate || sx!==1 || sy!==1 || tf.skewX || tf.skewY){
				m=this._transform || (this._transform=Matrix.create());
				m.bTransform=true;
				var skx=(tf.rotate-tf.skewX)*0.0174532922222222;
				var sky=(tf.rotate+tf.skewY)*0.0174532922222222;
				var cx=Math.cos(sky);
				var ssx=Math.sin(sky);
				var cy=Math.sin(skx);
				var ssy=Math.cos(skx);
				m.a=sx *cx;
				m.b=sx *ssx;
				m.c=-sy *cy;
				m.d=sy *ssy;
				m.tx=m.ty=0;
				return m;
				}else {
				this._transform && this._transform.destroy();
				this._transform=null;
				this._renderType &=~0x04;
			}
			return m;
		}

		__proto._setXY=function(x,y){
			this._x=x;
			this._y=y;
		}

		/**
		*<p>设置坐标位置。相当于分别设置x和y属性。</p>
		*<p>因为返回值为Sprite对象本身，所以可以使用如下语法：spr.pos(...).scale(...);</p>
		*@param x X轴坐标。
		*@param y Y轴坐标。
		*@param speedMode （可选）是否极速模式，正常是调用this.x=value进行赋值，极速模式直接调用内部函数处理，如果未重写x,y属性，建议设置为急速模式性能更高。
		*@return 返回对象本身。
		*/
		__proto.pos=function(x,y,speedMode){
			(speedMode===void 0)&& (speedMode=false);
			if (this._x!==x || this._y!==y){
				if (this.destroyed)return this;
				if (speedMode){
					this._x=x;
					this._y=y;
					var p=this._parent;
					if (p && p._repaint===0){
						p._repaint=1;
						p.parentRepaint();
					}
					if (this._$P.maskParent && this._$P.maskParent._repaint===0){
						this._$P.maskParent._repaint=1;
						this._$P.maskParent.parentRepaint();
					}
					}else {
					this.x=x;
					this.y=y;
				}
			}
			return this;
		}

		/**
		*<p>设置轴心点。相当于分别设置pivotX和pivotY属性。</p>
		*<p>因为返回值为Sprite对象本身，所以可以使用如下语法：spr.pivot(...).pos(50,100);</p>
		*@param x X轴心点。
		*@param y Y轴心点。
		*@return 返回对象本身。
		*/
		__proto.pivot=function(x,y){
			this.pivotX=x;
			this.pivotY=y;
			return this;
		}

		/**
		*<p>设置宽高。相当于分别设置width和height属性。</p>
		*<p>因为返回值为Sprite对象本身，所以可以使用如下语法：spr.size(...).pos(50,100);</p>
		*@param width 宽度值。
		*@param hegiht 高度值。
		*@return 返回对象本身。
		*/
		__proto.size=function(width,height){
			this.width=width;
			this.height=height;
			return this;
		}

		/**
		*<p>设置缩放。相当于分别设置scaleX和scaleY属性。</p>
		*<p>因为返回值为Sprite对象本身，所以可以使用如下语法：spr.scale(...).pos(50,100);</p>
		*@param scaleX X轴缩放比例。
		*@param scaleY Y轴缩放比例。
		*@param speedMode （可选）是否极速模式，正常是调用this.scaleX=value进行赋值，极速模式直接调用内部函数处理，如果未重写scaleX,scaleY属性，建议设置为急速模式性能更高。
		*@return 返回对象本身。
		*/
		__proto.scale=function(scaleX,scaleY,speedMode){
			(speedMode===void 0)&& (speedMode=false);
			var style=this.getStyle();
			var _tf=style._tf;
			if (_tf.scaleX !=scaleX || _tf.scaleY !=scaleY){
				if (this.destroyed)return this;
				if (speedMode){
					style.setScale(scaleX,scaleY);
					this._tfChanged=true;
					this._renderType |=0x04;
					var p=this._parent;
					if (p && p._repaint===0){
						p._repaint=1;
						p.parentRepaint();
					}
					}else {
					this.scaleX=scaleX;
					this.scaleY=scaleY;
				}
			}
			return this;
		}

		/**
		*<p>设置倾斜角度。相当于分别设置skewX和skewY属性。</p>
		*<p>因为返回值为Sprite对象本身，所以可以使用如下语法：spr.skew(...).pos(50,100);</p>
		*@param skewX 水平倾斜角度。
		*@param skewY 垂直倾斜角度。
		*@return 返回对象本身
		*/
		__proto.skew=function(skewX,skewY){
			this.skewX=skewX;
			this.skewY=skewY;
			return this;
		}

		/**
		*更新、呈现显示对象。由系统调用。
		*@param context 渲染的上下文引用。
		*@param x X轴坐标。
		*@param y Y轴坐标。
		*/
		__proto.render=function(context,x,y){
			Stat.spriteCount++;
			RenderSprite.renders[this._renderType]._fun(this,context,x+this._x,y+this._y);
			this._repaint=0;
		}

		/**
		*<p>绘制 当前<code>Sprite</code> 到 <code>Canvas</code> 上，并返回一个HtmlCanvas。</p>
		*<p>绘制的结果可以当作图片源，再次绘制到其他Sprite里面，示例：</p>
		*
		*var htmlCanvas:HTMLCanvas=sprite.drawToCanvas(100,100,0,0);//把精灵绘制到canvas上面
		*var texture:Texture=new Texture(htmlCanvas);//使用htmlCanvas创建Texture
		*var sp:Sprite=new Sprite().pos(0,200);//创建精灵并把它放倒200位置
		*sp.graphics.drawTexture(texture);//把截图绘制到精灵上
		*Laya.stage.addChild(sp);//把精灵显示到舞台
		*
		*<p>也可以获取原始图片数据，分享到网上，从而实现截图效果，示例：</p>
		*
		*var htmlCanvas:HTMLCanvas=sprite.drawToCanvas(100,100,0,0);//把精灵绘制到canvas上面
		*var canvas:*=htmlCanvas.getCanvas();//获取原生的canvas对象
		*trace(canvas.toDataURL("image/png"));//打印图片base64信息，可以发给服务器或者保存为图片
		*
		*@param canvasWidth 画布宽度。
		*@param canvasHeight 画布高度。
		*@param x 绘制的 X 轴偏移量。
		*@param y 绘制的 Y 轴偏移量。
		*@return HTMLCanvas 对象。
		*/
		__proto.drawToCanvas=function(canvasWidth,canvasHeight,offsetX,offsetY){
			if (Render.isConchNode){
				var canvas=HTMLCanvas.create("2D");
				var context=new RenderContext(canvasWidth,canvasHeight,canvas);
				context.ctx.setCanvasType(1);
				return canvas;
				}else {
				return RunDriver.drawToCanvas(this,this._renderType,canvasWidth,canvasHeight,offsetX,offsetY);
			}
		}

		/**
		*<p>自定义更新、呈现显示对象。一般用来扩展渲染模式，请合理使用，可能会导致在加速器上无法渲染。</p>
		*<p><b>注意</b>不要在此函数内增加或删除树节点，否则会对树节点遍历造成影响。</p>
		*@param context 渲染的上下文引用。
		*@param x X轴坐标。
		*@param y Y轴坐标。
		*/
		__proto.customRender=function(context,x,y){
			this._renderType |=0x400;
		}

		/**
		*@private
		*应用滤镜。
		*/
		__proto._applyFilters=function(){
			if (Render.isWebGL)return;
			var _filters;
			_filters=this._$P.filters;
			if (!_filters || _filters.length < 1)return;
			for (var i=0,n=_filters.length;i < n;i++){
				_filters[i].action.apply(this._$P.cacheCanvas);
			}
		}

		/**
		*@private
		*查看当前原件中是否包含发光滤镜。
		*@return 一个 Boolean 值，表示当前原件中是否包含发光滤镜。
		*/
		__proto._isHaveGlowFilter=function(){
			var i=0,len=0;
			if (this.filters){
				for (i=0;i < this.filters.length;i++){
					if (this.filters[i].type==0x08){
						return true;
					}
				}
			}
			for (i=0,len=this._childs.length;i < len;i++){
				if (this._childs[i]._isHaveGlowFilter()){
					return true;
				}
			}
			return false;
		}

		/**
		*把本地坐标转换为相对stage的全局坐标。
		*@param point 本地坐标点。
		*@param createNewPoint （可选）是否创建一个新的Point对象作为返回值，默认为false，使用输入的point对象返回，减少对象创建开销。
		*@return 转换后的坐标的点。
		*/
		__proto.localToGlobal=function(point,createNewPoint){
			(createNewPoint===void 0)&& (createNewPoint=false);
			if (createNewPoint===true){
				point=new Point(point.x,point.y);
			};
			var ele=this;
			while (ele){
				if (ele==Laya.stage)break ;
				point=ele.toParentPoint(point);
				ele=ele.parent;
			}
			return point;
		}

		/**
		*把stage的全局坐标转换为本地坐标。
		*@param point 全局坐标点。
		*@param createNewPoint （可选）是否创建一个新的Point对象作为返回值，默认为false，使用输入的point对象返回，减少对象创建开销。
		*@return 转换后的坐标的点。
		*/
		__proto.globalToLocal=function(point,createNewPoint){
			(createNewPoint===void 0)&& (createNewPoint=false);
			if (createNewPoint){
				point=new Point(point.x,point.y);
			};
			var ele=this;
			var list=[];
			while (ele){
				if (ele==Laya.stage)break ;
				list.push(ele);
				ele=ele.parent;
			};
			var i=list.length-1;
			while (i >=0){
				ele=list[i];
				point=ele.fromParentPoint(point);
				i--;
			}
			return point;
		}

		/**
		*将本地坐标系坐标转转换到父容器坐标系。
		*@param point 本地坐标点。
		*@return 转换后的点。
		*/
		__proto.toParentPoint=function(point){
			if (!point)return point;
			point.x-=this.pivotX;
			point.y-=this.pivotY;
			if (this.transform){
				this._transform.transformPoint(point);
			}
			point.x+=this._x;
			point.y+=this._y;
			var scroll=this._style.scrollRect;
			if (scroll){
				point.x-=scroll.x;
				point.y-=scroll.y;
			}
			return point;
		}

		/**
		*将父容器坐标系坐标转换到本地坐标系。
		*@param point 父容器坐标点。
		*@return 转换后的点。
		*/
		__proto.fromParentPoint=function(point){
			if (!point)return point;
			point.x-=this._x;
			point.y-=this._y;
			var scroll=this._style.scrollRect;
			if (scroll){
				point.x+=scroll.x;
				point.y+=scroll.y;
			}
			if (this.transform){
				this._transform.invertTransformPoint(point);
			}
			point.x+=this.pivotX;
			point.y+=this.pivotY;
			return point;
		}

		/**
		*<p>增加事件侦听器，以使侦听器能够接收事件通知。</p>
		*<p>如果侦听鼠标事件，则会自动设置自己和父亲节点的属性 mouseEnabled 的值为 true(如果父节点mouseEnabled=false，则停止设置父节点mouseEnabled属性)。</p>
		*@param type 事件的类型。
		*@param caller 事件侦听函数的执行域。
		*@param listener 事件侦听函数。
		*@param args （可选）事件侦听函数的回调参数。
		*@return 此 EventDispatcher 对象。
		*/
		__proto.on=function(type,caller,listener,args){
			if (this._mouseEnableState!==1 && this.isMouseEvent(type)){
				this.mouseEnabled=true;
				this._setBit(0x2,true);
				if (this._parent){
					this._$2__onDisplay();
				}
				return this._createListener(type,caller,listener,args,false);
			}
			return _super.prototype.on.call(this,type,caller,listener,args);
		}

		/**
		*<p>增加事件侦听器，以使侦听器能够接收事件通知，此侦听事件响应一次后则自动移除侦听。</p>
		*<p>如果侦听鼠标事件，则会自动设置自己和父亲节点的属性 mouseEnabled 的值为 true(如果父节点mouseEnabled=false，则停止设置父节点mouseEnabled属性)。</p>
		*@param type 事件的类型。
		*@param caller 事件侦听函数的执行域。
		*@param listener 事件侦听函数。
		*@param args （可选）事件侦听函数的回调参数。
		*@return 此 EventDispatcher 对象。
		*/
		__proto.once=function(type,caller,listener,args){
			if (this._mouseEnableState!==1 && this.isMouseEvent(type)){
				this.mouseEnabled=true;
				this._setBit(0x2,true);
				if (this._parent){
					this._$2__onDisplay();
				}
				return this._createListener(type,caller,listener,args,true);
			}
			return _super.prototype.once.call(this,type,caller,listener,args);
		}

		/**@private */
		__proto._$2__onDisplay=function(){
			if (this._mouseEnableState!==1){
				var ele=this;
				ele=ele.parent;
				while (ele && ele._mouseEnableState!==1){
					if (ele._getBit(0x2))break ;
					ele.mouseEnabled=true;
					ele._setBit(0x2,true);
					ele=ele.parent;
				}
			}
		}

		/**
		*<p>加载并显示一个图片。功能等同于graphics.loadImage方法。支持异步加载。</p>
		*<p>注意：多次调用loadImage绘制不同的图片，会同时显示。</p>
		*@param url 图片地址。
		*@param x （可选）显示图片的x位置。
		*@param y （可选）显示图片的y位置。
		*@param width （可选）显示图片的宽度，设置为0表示使用图片默认宽度。
		*@param height （可选）显示图片的高度，设置为0表示使用图片默认高度。
		*@param complete （可选）加载完成回调。
		*@return 返回精灵对象本身。
		*/
		__proto.loadImage=function(url,x,y,width,height,complete){
			var _$this=this;
			(x===void 0)&& (x=0);
			(y===void 0)&& (y=0);
			(width===void 0)&& (width=0);
			(height===void 0)&& (height=0);
			function loaded (tex){
				if (!_$this.destroyed){
					_$this.size(x+(width || tex.width),y+(height || tex.height));
					_$this.repaint();
					complete && complete.runWith(tex);
				}
			}
			this.graphics.loadImage(url,x,y,width,height,loaded);
			return this;
		}

		/**cacheAs后，设置自己和父对象缓存失效。*/
		__proto.repaint=function(){
			if (this._repaint===0){
				this._repaint=1;
				this.parentRepaint();
			}
			if (this._$P && this._$P.maskParent){
				this._$P.maskParent.repaint();
			}
		}

		/**
		*@private
		*获取是否重新缓存。
		*@return 如果重新缓存值为 true，否则值为 false。
		*/
		__proto._needRepaint=function(){
			return (this._repaint!==0)&& this._$P.cacheCanvas && this._$P.cacheCanvas.reCache;
		}

		/**@private */
		__proto._childChanged=function(child){
			if (this._childs.length)this._renderType |=0x800;
			else this._renderType &=~0x800;
			if (child && this._get$P("hasZorder"))Laya.timer.callLater(this,this.updateZOrder);
			this.repaint();
		}

		/**cacheAs时，设置所有父对象缓存失效。 */
		__proto.parentRepaint=function(){
			var p=this._parent;
			if (p && p._repaint===0){
				p._repaint=1;
				p.parentRepaint();
			}
		}

		/**
		*开始拖动此对象。
		*@param area （可选）拖动区域，此区域为当前对象注册点活动区域（不包括对象宽高），可选。
		*@param hasInertia （可选）鼠标松开后，是否还惯性滑动，默认为false，可选。
		*@param elasticDistance （可选）橡皮筋效果的距离值，0为无橡皮筋效果，默认为0，可选。
		*@param elasticBackTime （可选）橡皮筋回弹时间，单位为毫秒，默认为300毫秒，可选。
		*@param data （可选）拖动事件携带的数据，可选。
		*@param disableMouseEvent （可选）禁用其他对象的鼠标检测，默认为false，设置为true能提高性能。
		*@param ratio （可选）惯性阻尼系数，影响惯性力度和时长。
		*/
		__proto.startDrag=function(area,hasInertia,elasticDistance,elasticBackTime,data,disableMouseEvent,ratio){
			(hasInertia===void 0)&& (hasInertia=false);
			(elasticDistance===void 0)&& (elasticDistance=0);
			(elasticBackTime===void 0)&& (elasticBackTime=300);
			(disableMouseEvent===void 0)&& (disableMouseEvent=false);
			(ratio===void 0)&& (ratio=0.92);
			this._$P.dragging || (this._set$P("dragging",new Dragging()));
			this._$P.dragging.start(this,area,hasInertia,elasticDistance,elasticBackTime,data,disableMouseEvent,ratio);
		}

		/**停止拖动此对象。*/
		__proto.stopDrag=function(){
			this._$P.dragging && this._$P.dragging.stop();
		}

		__proto._releaseMem=function(){
			if (!this._$P)return;
			var cc=this._$P.cacheCanvas;
			if (cc && cc.ctx){
				Pool.recover("RenderContext",cc.ctx);
				cc.ctx.canvas.size(0,0);
				cc.ctx=null;
			};
			var fc=this._$P._filterCache;
			if (fc){
				fc.destroy();
				fc.recycle();
				this._set$P('_filterCache',null);
			}
			this._$P._isHaveGlowFilter && this._set$P('_isHaveGlowFilter',false);
			this._$P._isHaveGlowFilter=null;
		}

		/**@private */
		__proto._setDisplay=function(value){
			if (!value)this._releaseMem();
			_super.prototype._setDisplay.call(this,value);
		}

		/**
		*检测某个点是否在此对象内。
		*@param x 全局x坐标。
		*@param y 全局y坐标。
		*@return 表示是否在对象内。
		*/
		__proto.hitTestPoint=function(x,y){
			var point=this.globalToLocal(Point.TEMP.setTo(x,y));
			var rect=this._$P.hitArea ? this._$P.hitArea :(this._width > 0 && this._height > 0)? Rectangle.TEMP.setTo(0,0,this._width,this._height):this.getSelfBounds();
			return rect.contains(point.x,point.y);
		}

		/**获得相对于本对象上的鼠标坐标信息。*/
		__proto.getMousePoint=function(){
			return this.globalToLocal(Point.TEMP.setTo(Laya.stage.mouseX,Laya.stage.mouseY));
		}

		/**@private */
		__proto._getWords=function(){
			return null;
		}

		/**@private */
		__proto._addChildsToLayout=function(out){
			var words=this._getWords();
			if (words==null && this._childs.length==0)return false;
			if (words){
				for (var i=0,n=words.length;i < n;i++){
					out.push(words[i]);
				}
			}
			this._childs.forEach(function(o,index,array){
				o._style._enableLayout()&& o._addToLayout(out);
			});
			return true;
		}

		/**@private */
		__proto._addToLayout=function(out){
			if (this._style.absolute)return;
			this._style.block ? out.push(this):(this._addChildsToLayout(out)&& (this.x=this.y=0));
		}

		/**@private */
		__proto._isChar=function(){
			return false;
		}

		/**@private */
		__proto._getCSSStyle=function(){
			return this._style.getCSSStyle();
		}

		/**
		*@private
		*设置指定属性名的属性值。
		*@param name 属性名。
		*@param value 属性值。
		*/
		__proto._setAttributes=function(name,value){
			switch (name){
				case 'x':
					this.x=parseFloat(value);
					break ;
				case 'y':
					this.y=parseFloat(value);
					break ;
				case 'width':
					this.width=parseFloat(value);
					break ;
				case 'height':
					this.height=parseFloat(value);
					break ;
				default :
					this[name]=value;
				}
		}

		/**
		*@private
		*/
		__proto._layoutLater=function(){
			this.parent && (this.parent)._layoutLater();
		}

		/**
		*<p>指定是否对使用了 scrollRect 的显示对象进行优化处理。默认为false(不优化)。</p>
		*<p>当值为ture时：将对此对象使用了scrollRect 设定的显示区域以外的显示内容不进行渲染，以提高性能(如果子对象有旋转缩放或者中心点偏移，则显示筛选会不精确)。</p>
		*/
		__getset(0,__proto,'optimizeScrollRect',function(){
			return this._optimizeScrollRect;
			},function(b){
			if (this._optimizeScrollRect !=b){
				this._optimizeScrollRect=b;
			}
		});

		/**
		*设置是否开启自定义渲染，只有开启自定义渲染，才能使用customRender函数渲染。
		*/
		__getset(0,__proto,'customRenderEnable',null,function(b){
			if (b){
				this._renderType |=0x400;
			}
		});

		/**
		*指定显示对象是否缓存为静态图像。功能同cacheAs的normal模式。建议优先使用cacheAs代替。
		*/
		__getset(0,__proto,'cacheAsBitmap',function(){
			return this.cacheAs!=="none";
			},function(value){
			this.cacheAs=value ? (this._$P["hasFilter"] ? "none" :"normal"):"none";
		});

		/**
		*<p>指定显示对象是否缓存为静态图像，cacheAs时，子对象发生变化，会自动重新缓存，同时也可以手动调用reCache方法更新缓存。</p>
		*<p>建议把不经常变化的“复杂内容”缓存为静态图像，能极大提高渲染性能。cacheAs有"none"，"normal"和"bitmap"三个值可选。
		*<li>默认为"none"，不做任何缓存。</li>
		*<li>当值为"normal"时，canvas模式下进行画布缓存，webgl模式下进行命令缓存。</li>
		*<li>当值为"bitmap"时，canvas模式下进行依然是画布缓存，webgl模式下使用renderTarget缓存。</li></p>
		*<p>webgl下renderTarget缓存模式缺点：会额外创建renderTarget对象，增加内存开销，缓存面积有最大2048限制，不断重绘时会增加CPU开销。优点：大幅减少drawcall，渲染性能最高。
		*webgl下命令缓存模式缺点：只会减少节点遍历及命令组织，不会减少drawcall数，性能中等。优点：没有额外内存开销，无需renderTarget支持。</p>
		*/
		__getset(0,__proto,'cacheAs',function(){
			return this._$P.cacheCanvas==null ? "none" :this._$P.cacheCanvas.type;
			},function(value){
			var cacheCanvas=this._$P.cacheCanvas;
			if (value===(cacheCanvas ? cacheCanvas.type :"none"))return;
			if (value!=="none"){
				if (!this._getBit(0x1))this._setUpNoticeType(0x1);
				cacheCanvas || (cacheCanvas=this._set$P("cacheCanvas",Pool.getItemByClass("cacheCanvas",Object)));
				if(Browser.onMiniGame && Browser.onAndriod && value=="bitmap"){
					cacheCanvas.type="normal";
					}else{
					cacheCanvas.type=value;
				}
				cacheCanvas.reCache=true;
				this._renderType |=0x10;
				this._set$P("cacheForFilters",false);
				}else {
				if (this._$P["hasFilter"]){
					this._set$P("cacheForFilters",true);
					}else {
					if (cacheCanvas)Pool.recover("cacheCanvas",cacheCanvas);
					this._$P.cacheCanvas=null;
					this._renderType &=~0x10;
				}
			}
			this.repaint();
		});

		/**z排序，更改此值，则会按照值的大小对同一容器的所有对象重新排序。值越大，越靠上。默认为0，则根据添加顺序排序。*/
		__getset(0,__proto,'zOrder',function(){
			return this._zOrder;
			},function(value){
			if (this._zOrder !=value){
				this._zOrder=value;
				if (this._parent){
					value && this._parent._set$P("hasZorder",true);
					Laya.timer.callLater(this._parent,this.updateZOrder);
				}
			}
		});

		/**旋转角度，默认值为0。以角度为单位。*/
		__getset(0,__proto,'rotation',function(){
			return this._style._tf.rotate;
			},function(value){
			var style=this.getStyle();
			if (style._tf.rotate!==value){
				style.setRotate(value);
				this._tfChanged=true;
				this._renderType |=0x04;
				var p=this._parent;
				if (p && p._repaint===0){
					p._repaint=1;
					p.parentRepaint();
				}
			}
		});

		/**
		*<p>显示对象的宽度，单位为像素，默认为0。</p>
		*<p>此宽度用于鼠标碰撞检测，并不影响显示对象图像大小。需要对显示对象的图像进行缩放，请使用scale、scaleX、scaleY。</p>
		*<p>可以通过getbounds获取显示对象图像的实际宽度。</p>
		*/
		__getset(0,__proto,'width',function(){
			if (!this.autoSize)return this._width;
			return this.getSelfBounds().width;
			},function(value){
			if (this._width!==value){
				this._width=value;
				this.repaint();
			}
		});

		/**表示显示对象相对于父容器的水平方向坐标值。*/
		__getset(0,__proto,'x',function(){
			return this._x;
			},function(value){
			if (this._x!==value){
				if (this.destroyed)return;
				this._x=value;
				var p=this._parent;
				if (p && p._repaint===0){
					p._repaint=1;
					p.parentRepaint();
				}
				if (this._$P.maskParent && this._$P.maskParent._repaint===0){
					this._$P.maskParent._repaint=1;
					this._$P.maskParent.parentRepaint();
				}
			}
		});

		/**
		*获得相对于stage的全局Y轴缩放值（会叠加父亲节点的缩放值）。
		*/
		__getset(0,__proto,'globalScaleY',function(){
			var scale=1;
			var ele=this;
			while (ele){
				if (ele===Laya.stage)break ;
				scale *=ele.scaleX;
				ele=ele.parent;
			}
			return scale;
		});

		/**
		*<p>可以设置一个Rectangle区域作为点击区域，或者设置一个<code>HitArea</code>实例作为点击区域，HitArea内可以设置可点击和不可点击区域。</p>
		*<p>如果不设置hitArea，则根据宽高形成的区域进行碰撞。</p>
		*/
		__getset(0,__proto,'hitArea',function(){
			return this._$P.hitArea;
			},function(value){
			this._set$P("hitArea",value);
		});

		/**设置cacheAs为非空时此值才有效，staticCache=true时，子对象变化时不会自动更新缓存，只能通过调用reCache方法手动刷新。*/
		__getset(0,__proto,'staticCache',function(){
			return this._$P.staticCache;
			},function(value){
			this._set$P("staticCache",value);
			if (!value)this.reCache();
		});

		/**设置一个Texture实例，并显示此图片（如果之前有其他绘制，则会被清除掉）。等同于graphics.clear();graphics.drawTexture()*/
		__getset(0,__proto,'texture',function(){
			return this._texture;
			},function(value){
			if (this._texture !=value){
				this._texture=value;
				this.graphics.cleanByTexture(value,0,0);
			}
		});

		/**表示显示对象相对于父容器的垂直方向坐标值。*/
		__getset(0,__proto,'y',function(){
			return this._y;
			},function(value){
			if (this._y!==value){
				if (this.destroyed)return;
				this._y=value;
				var p=this._parent;
				if (p && p._repaint===0){
					p._repaint=1;
					p.parentRepaint();
				}
				if (this._$P.maskParent && this._$P.maskParent._repaint===0){
					this._$P.maskParent._repaint=1;
					this._$P.maskParent.parentRepaint();
				}
			}
		});

		/**
		*<p>显示对象的高度，单位为像素，默认为0。</p>
		*<p>此高度用于鼠标碰撞检测，并不影响显示对象图像大小。需要对显示对象的图像进行缩放，请使用scale、scaleX、scaleY。</p>
		*<p>可以通过getbounds获取显示对象图像的实际高度。</p>
		*/
		__getset(0,__proto,'height',function(){
			if (!this.autoSize)return this._height;
			return this.getSelfBounds().height;
			},function(value){
			if (this._height!==value){
				this._height=value;
				this.repaint();
			}
		});

		/**指定要使用的混合模式。目前只支持"lighter"。*/
		__getset(0,__proto,'blendMode',function(){
			return this._style.blendMode;
			},function(value){
			this.getStyle().blendMode=value;
			if (value && value !="source-over")this._renderType |=0x08;
			else this._renderType &=~0x08;
			this.parentRepaint();
		});

		/**X轴缩放值，默认值为1。设置为负数，可以实现水平反转效果，比如scaleX=-1。*/
		__getset(0,__proto,'scaleX',function(){
			return this._style._tf.scaleX;
			},function(value){
			var style=this.getStyle();
			if (style._tf.scaleX!==value){
				style.setScaleX(value);
				this._tfChanged=true;
				this._renderType |=0x04;
				var p=this._parent;
				if (p && p._repaint===0){
					p._repaint=1;
					p.parentRepaint();
				}
			}
		});

		/**Y轴缩放值，默认值为1。设置为负数，可以实现垂直反转效果，比如scaleX=-1。*/
		__getset(0,__proto,'scaleY',function(){
			return this._style._tf.scaleY;
			},function(value){
			var style=this.getStyle();
			if (style._tf.scaleY!==value){
				style.setScaleY(value);
				this._tfChanged=true;
				this._renderType |=0x04;
				var p=this._parent;
				if (p && p._repaint===0){
					p._repaint=1;
					p.parentRepaint();
				}
			}
		});

		/**对舞台 <code>stage</code> 的引用。*/
		__getset(0,__proto,'stage',function(){
			return Laya.stage;
		});

		/**水平倾斜角度，默认值为0。以角度为单位。*/
		__getset(0,__proto,'skewX',function(){
			return this._style._tf.skewX;
			},function(value){
			var style=this.getStyle();
			if (style._tf.skewX!==value){
				style.setSkewX(value);
				this._tfChanged=true;
				this._renderType |=0x04;
				var p=this._parent;
				if (p && p._repaint===0){
					p._repaint=1;
					p.parentRepaint();
				}
			}
		});

		/**
		*<p>显示对象的滚动矩形范围，具有裁剪效果(如果只想限制子对象渲染区域，请使用viewport)，设置optimizeScrollRect=true，可以优化裁剪区域外的内容不进行渲染。</p>
		*<p> srollRect和viewport的区别：<br/>
		*1.srollRect自带裁剪效果，viewport只影响子对象渲染是否渲染，不具有裁剪效果（性能更高）。<br/>
		*2.设置rect的x,y属性均能实现区域滚动效果，但scrollRect会保持0,0点位置不变。</p>
		*/
		__getset(0,__proto,'scrollRect',function(){
			return this._style.scrollRect;
			},function(value){
			this.getStyle().scrollRect=value;
			this.repaint();
			if (value){
				this._renderType |=0x80;
				}else {
				this._renderType &=~0x80;
			}
		});

		/**垂直倾斜角度，默认值为0。以角度为单位。*/
		__getset(0,__proto,'skewY',function(){
			return this._style._tf.skewY;
			},function(value){
			var style=this.getStyle();
			if (style._tf.skewY!==value){
				style.setSkewY(value);
				this._tfChanged=true;
				this._renderType |=0x04;
				var p=this._parent;
				if (p && p._repaint===0){
					p._repaint=1;
					p.parentRepaint();
				}
			}
		});

		/**
		*<p>对象的矩阵信息。通过设置矩阵可以实现节点旋转，缩放，位移效果。</p>
		*<p>矩阵更多信息请参考 <code>Matrix</code></p>
		*/
		__getset(0,__proto,'transform',function(){
			return this._tfChanged ? this._adjustTransform():this._transform;
			},function(value){
			this._tfChanged=false;
			this._transform=value;
			if (value){
				this._x=value.tx;
				this._y=value.ty;
				value.tx=value.ty=0;
			}
			if (value)this._renderType |=0x04;
			else {
				this._renderType &=~0x04;
			}
			this.parentRepaint();
		});

		/**X轴 轴心点的位置，单位为像素，默认为0。轴心点会影响对象位置，缩放中心，旋转中心。*/
		__getset(0,__proto,'pivotX',function(){
			return this._style._tf.translateX;
			},function(value){
			this.getStyle().setTranslateX(value);
			this.repaint();
		});

		/**Y轴 轴心点的位置，单位为像素，默认为0。轴心点会影响对象位置，缩放中心，旋转中心。*/
		__getset(0,__proto,'pivotY',function(){
			return this._style._tf.translateY;
			},function(value){
			this.getStyle().setTranslateY(value);
			this.repaint();
		});

		/**透明度，值为0-1，默认值为1，表示不透明。更改alpha值会影响drawcall。*/
		__getset(0,__proto,'alpha',function(){
			return this._style.alpha;
			},function(value){
			if (this._style && this._style.alpha!==value){
				value=value < 0 ? 0 :(value > 1 ? 1 :value);
				this.getStyle().alpha=value;
				if (value!==1)this._renderType |=0x02;
				else this._renderType &=~0x02;
				this.parentRepaint();
			}
		});

		/**表示是否可见，默认为true。如果设置不可见，节点将不被渲染。*/
		__getset(0,__proto,'visible',function(){
			return this._style.visible;
			},function(value){
			if (this._style && this._style.visible!==value){
				this.getStyle().visible=value;
				this.parentRepaint();
			}
		});

		/**绘图对象。封装了绘制位图和矢量图的接口，Sprite所有的绘图操作都通过Graphics来实现的。*/
		__getset(0,__proto,'graphics',function(){
			return this._graphics || (this.graphics=RunDriver.createGraphics());
			},function(value){
			if (this._graphics)this._graphics._sp=null;
			this._graphics=value;
			if (value){
				this._renderType &=~0x01;
				this._renderType |=0x200;
				value._sp=this;
				}else {
				this._renderType &=~0x200;
				this._renderType &=~0x01;
			}
			this.repaint();
		});

		/**滤镜集合。可以设置多个滤镜组合。*/
		__getset(0,__proto,'filters',function(){
			return this._$P.filters;
			},function(value){
			value && value.length===0 && (value=null);
			if (this._$P.filters==value)return;
			this._set$P("filters",value ? value.slice():null);
			if (Render.isConchApp){
				if (this._$P.filters && this._$P.filters.length==1){
					this._$P.filters[0].callNative(this);
				}
			}
			if (Render.isWebGL){
				if (value && value.length){
					this._renderType |=0x20;
					}else {
					this._renderType &=~0x20;
				}
			}
			if (value && value.length > 0){
				if (!this._getBit(0x1))this._setUpNoticeType(0x1);
				if (!(Render.isWebGL && value.length==1 && (((value[0])instanceof laya.filters.ColorFilter )))){
					if (this.cacheAs !="bitmap"){
						if (!Render.isConchNode)this.cacheAs="bitmap";
						this._set$P("cacheForFilters",true);
					}
					this._set$P("hasFilter",true);
				}
				}else {
				this._set$P("hasFilter",false);
				if (this._$P["cacheForFilters"] && this.cacheAs=="bitmap"){
					this.cacheAs="none";
				}
			}
			this.repaint();
		});

		__getset(0,__proto,'parent',_super.prototype._$get_parent,function(value){
			_super.prototype._$set_parent.call(this,value);
			if (value && this._getBit(0x2)){
				this._$2__onDisplay();
			}
		});

		/**
		*<p>遮罩，可以设置一个对象(支持位图和矢量图)，根据对象形状进行遮罩显示。</p>
		*<p>【注意】遮罩对象坐标系是相对遮罩对象本身的，和Flash机制不同</p>
		*/
		__getset(0,__proto,'mask',function(){
			return this._$P._mask;
			},function(value){
			if (value && this.mask && this.mask._$P.maskParent)return;
			if (value){
				this.cacheAs="bitmap";
				this._set$P("_mask",value);
				value._set$P("maskParent",this);
				}else {
				this.cacheAs="none";
				this.mask && this.mask._set$P("maskParent",null);
				this._set$P("_mask",value);
			}
			this._renderType |=0x40;
			this.parentRepaint();
		});

		/**
		*是否接受鼠标事件。
		*默认为false，如果监听鼠标事件，则会自动设置本对象及父节点的属性 mouseEnable 的值都为 true（如果父节点手动设置为false，则不会更改）。
		**/
		__getset(0,__proto,'mouseEnabled',function(){
			return this._mouseEnableState > 1;
			},function(value){
			this._mouseEnableState=value ? 2 :1;
		});

		/**
		*获得相对于stage的全局X轴缩放值（会叠加父亲节点的缩放值）。
		*/
		__getset(0,__proto,'globalScaleX',function(){
			var scale=1;
			var ele=this;
			while (ele){
				if (ele===Laya.stage)break ;
				scale *=ele.scaleX;
				ele=ele.parent;
			}
			return scale;
		});

		/**
		*返回鼠标在此对象坐标系上的 X 轴坐标信息。
		*/
		__getset(0,__proto,'mouseX',function(){
			return this.getMousePoint().x;
		});

		/**
		*返回鼠标在此对象坐标系上的 Y 轴坐标信息。
		*/
		__getset(0,__proto,'mouseY',function(){
			return this.getMousePoint().y;
		});

		Sprite.fromImage=function(url){
			return new Sprite().loadImage(url);
		}

		Sprite.CustomList=[];
		__static(Sprite,
		['RUNTIMEVERION',function(){return this.RUNTIMEVERION=window.conch?conchConfig.getRuntimeVersion().substr(conchConfig.getRuntimeVersion().lastIndexOf('-')+1):'';}
		]);
		return Sprite;
	})(Node)


	/**
	*...
	*@author
	*/
	//class laya8.client.player.game.fakeSV.CSelfItemData extends laya8.client.player.game.fakeSV.CItemData
	var CSelfItemData=(function(_super){
		function CSelfItemData(){
			this.sid=0;
			this.buffid=0;
			this.propCollAddBuffStamp=0;
			CSelfItemData.__super.call(this);
		}

		__class(CSelfItemData,'laya8.client.player.game.fakeSV.CSelfItemData',_super);
		var __proto=CSelfItemData.prototype;
		__proto.hit=function(hitter){
			if ((hitter instanceof laya8.client.player.game.fakeSV.CCreateObjData )){
				if ((hitter).selfID==this.sid){
					if (this.buffid !=-1){
						(hitter).propBuffId=this.buffid;
						if (Laya.timer.currTimer-this.propCollAddBuffStamp >=1000){
							(hitter).addbuff(this.buffid);
							this.propCollAddBuffStamp=Laya.timer.currTimer;
						}
						(hitter).isInYanwu=true;
					}
				}
			}
		}

		return CSelfItemData;
	})(CItemData)


	/**
	*...
	*@author dongketao
	*/
	//class msgSvr.gemGame.SMsgGameEndGem extends msgSvr.SMsgGameEnd
	var SMsgGameEndGem=(function(_super){
		function SMsgGameEndGem(){
			this.teamOwnResultList=null;
			this.teamFirstUser=null;
			this.teamID=0;
			this.rank=0;
			this.gem=0;
			SMsgGameEndGem.__super.call(this);
		}

		__class(SMsgGameEndGem,'msgSvr.gemGame.SMsgGameEndGem',_super);
		var __proto=SMsgGameEndGem.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			var teamOwnResultListLen=msg.readByte();
			this.teamOwnResultList=[];
			var i=0,len=0;
			var tem;
			for (i=0,len=teamOwnResultListLen;i < len;i++){
				tem=new GemUserEndData();
				tem.clientReadBody(msg,msgLen);
				this.teamOwnResultList.push(tem);
			};
			var teamFirstUserLen=msg.readByte();
			this.teamFirstUser=[];
			for (i=0,len=teamFirstUserLen;i < len;i++){
				tem=new GemUserEndData();
				tem.clientReadBody(msg,msgLen);
				tem.teamId=msg.getInt16();
				tem.teamScore=msg.getInt32();
				this.teamFirstUser.push(tem);
			}
			this.teamID=msg.readByte();
			this.rank=msg.readByte();
			this.gem=msg.getInt32();
			_super.prototype.clientReadBody.call(this,msg,msgLen);
			return true;
		}

		__proto.serverWriteBody=function(msg){
			var i=0,len=0;
			var tem;
			msg.writeByte(this.teamOwnResultList.length);
			for (i=0,len=this.teamOwnResultList.length;i < len;i++){
				tem=this.teamOwnResultList[i];
				tem.serverWriteBody(msg);
			}
			msg.writeByte(this.teamFirstUser.length);
			for (i=0,len=this.teamFirstUser.length;i < len;i++){
				tem=this.teamFirstUser[i];
				tem.serverWriteBody(msg);
				msg.writeInt16(tem.teamId);
				msg.writeInt32(tem.teamScore);
			}
			msg.writeByte(this.teamID);
			msg.writeByte(this.rank);
			msg.writeInt32(this.gem);
			_super.prototype.serverWriteBody.call(this,msg);
			return true;
		}

		__proto.getMsgBodySize=function(){
			return 1024;
		}

		__proto.clear=function(){
			this.teamOwnResultList=[];
			this.teamID=0;
			this.rank=0;
			return _super.prototype.clear.call(this);
		}

		SMsgGameEndGem.MSGID=0;
		return SMsgGameEndGem;
	})(SMsgGameEnd)


	/**
	*...
	*@author dongketao
	*/
	//class msgSvr.queenGame.SMsgGameEndQueen extends msgSvr.SMsgGameEnd
	var SMsgGameEndQueen=(function(_super){
		function SMsgGameEndQueen(){
			this.teamOwnResultList=null;
			this.teamID=0;
			this.rank=0;
			this.queenScore=0;
			SMsgGameEndQueen.__super.call(this);
		}

		__class(SMsgGameEndQueen,'msgSvr.queenGame.SMsgGameEndQueen',_super);
		var __proto=SMsgGameEndQueen.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			var teamOwnResultListLen=msg.readByte();
			this.teamOwnResultList=[];
			for (var i=0,len=teamOwnResultListLen;i < len;i++){
				var tem=new QueenUserEndData();
				tem.clientReadBody(msg,msgLen);
				this.teamOwnResultList.push(tem);
			}
			this.teamID=msg.readByte();
			this.rank=msg.readByte();
			this.queenScore=msg.getInt32();
			_super.prototype.clientReadBody.call(this,msg,msgLen);
			return true;
		}

		__proto.serverWriteBody=function(msg){
			msg.writeByte(this.teamOwnResultList.length);
			for (var i=0,len=this.teamOwnResultList.length;i < len;i++){
				var tem=this.teamOwnResultList[i];
				tem.serverWriteBody(msg);
			}
			msg.writeByte(this.teamID);
			msg.writeByte(this.rank);
			msg.writeInt32(this.queenScore);
			_super.prototype.serverWriteBody.call(this,msg);
			return true;
		}

		__proto.getMsgBodySize=function(){
			return 1024;
		}

		__proto.clear=function(){
			this.teamOwnResultList=[];
			this.teamID=0;
			this.rank=0;
			return _super.prototype.clear.call(this);
		}

		SMsgGameEndQueen.MSGID=0;
		return SMsgGameEndQueen;
	})(SMsgGameEnd)


	/**
	*...
	*@author ...
	*/
	//class msgSvr.SMsgAddJumpItem extends msgSvr.SMsgAddDynamicItem
	var SMsgAddJumpItem=(function(_super){
		function SMsgAddJumpItem(){
			this.uid=0;
			SMsgAddJumpItem.__super.call(this);
		}

		__class(SMsgAddJumpItem,'msgSvr.SMsgAddJumpItem',_super);
		var __proto=SMsgAddJumpItem.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			this.uid=msg.getUint16();
			_super.prototype.clientReadBody.call(this,msg,msgLen);
			return true;
		}

		__proto.serverWriteBody=function(msg){
			msg.writeUint16(this.uid);
			_super.prototype.serverWriteBody.call(this,msg);
			return true;
		}

		__proto.clear=function(){
			this.uid=0;
			return _super.prototype.clear.call(this);
		}

		SMsgAddJumpItem.MSGID=0;
		return SMsgAddJumpItem;
	})(SMsgAddDynamicItem)


	/**
	*...
	*@author dongketao
	*/
	//class msgSvr.SMsgGameEndFree extends msgSvr.SMsgGameEnd
	var SMsgGameEndFree=(function(_super){
		function SMsgGameEndFree(){
			this.usersResultList=null;
			SMsgGameEndFree.__super.call(this);
		}

		__class(SMsgGameEndFree,'msgSvr.SMsgGameEndFree',_super);
		var __proto=SMsgGameEndFree.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			var usersResultListLen=msg.readByte();
			this.usersResultList=[];
			for (var i=0,len=usersResultListLen;i < len;i++){
				var tem=new rankItemData();
				var usernameLen=msg.getInt16();
				tem.name=msg.readUTFBytes(usernameLen);
				tem.id=msg.getInt32();
				tem.level=msg.getInt16();
				tem.avatar=msg.getUint16();
				tem.gender=msg.readByte();
				tem.score=msg.getInt32();
				tem.maxScore=msg.getInt32();
				tem.coin=msg.getInt16();
				tem.kills=msg.getInt16();
				tem.deaths=msg.getInt16();
				tem.medals=[];
				var medalLength=msg.readByte();
				for (var j=0;j < medalLength;j++){
					tem.medals.push(msg.readByte());
				};
				var userheadLen=msg.getInt16();
				tem.headPortrait=msg.readUTFBytes(userheadLen);
				this.usersResultList.push(tem);
			}
			_super.prototype.clientReadBody.call(this,msg,msgLen);
			return true;
		}

		__proto.serverWriteBody=function(msg){
			msg.writeByte(this.usersResultList.length);
			for (var i=0,len=this.usersResultList.length;i < len;i++){
				var tem=this.usersResultList[i];
				msg.writeUTFBytes(tem.name);
				msg.writeInt32(tem.id);
				msg.writeInt16(tem.level);
				msg.writeUint16(tem.avatar);
				msg.writeByte(tem.gender);
				msg.writeInt32(tem.score);
				msg.writeInt32(tem.maxScore);
				msg.writeInt16(tem.coin);
				msg.writeInt16(tem.kills);
				msg.writeInt16(tem.deaths);
				msg.writeByte(tem.medals.length);
				for (var j=0;j < tem.medals.length;j++){
					msg.writeByte(tem.medals[j]);
				}
				msg.writeUTFBytes(tem.headPortrait);
			}
			_super.prototype.serverWriteBody.call(this,msg);
			return true;
		}

		__proto.getMsgBodySize=function(){
			return 1024;
		}

		__proto.clear=function(){
			this.usersResultList=[];
			return _super.prototype.clear.call(this);
		}

		SMsgGameEndFree.MSGID=0;
		return SMsgGameEndFree;
	})(SMsgGameEnd)


	/**
	*...
	*@author Chen Gong
	*/
	//class msgSvr.SMsgGameEndLolipop extends msgSvr.SMsgGameEnd
	var SMsgGameEndLolipop=(function(_super){
		function SMsgGameEndLolipop(){
			this.teamOwnResultList=null;
			this.teamID=0;
			this.winTeamID=0;
			this.rank=0;
			this.bestUserGUID=0;
			this.bestUserTeamID=0;
			this.bestUserScore=0;
			SMsgGameEndLolipop.__super.call(this);
		}

		__class(SMsgGameEndLolipop,'msgSvr.SMsgGameEndLolipop',_super);
		var __proto=SMsgGameEndLolipop.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			var teamOwnResultListLen=msg.readByte();
			this.teamOwnResultList=[];
			for (var i=0,len=teamOwnResultListLen;i < len;i++){
				var tem=new rankItemData();
				tem.id=msg.getInt32();
				var nameLen=msg.getInt16();
				tem.name=msg.readUTFBytes(nameLen);
				tem.level=msg.getInt16();
				tem.avatar=msg.getUint16();
				tem.gender=msg.readByte();
				tem.score=msg.getInt32();
				tem.kills=msg.getInt16();
				tem.deaths=msg.getInt16();
				tem.medals=[];
				var medalLength=msg.readByte();
				for (var j=0;j < medalLength;j++){
					tem.medals.push(msg.readByte());
				};
				var userheadLen=msg.getInt16();
				tem.headPortrait=msg.readUTFBytes(userheadLen);
				this.teamOwnResultList.push(tem);
			}
			this.teamID=msg.readByte();
			this.winTeamID=msg.readByte();
			this.rank=msg.readByte();
			this.bestUserTeamID=msg.readByte();
			this.bestUserGUID=msg.getUint32();
			this.bestUserScore=msg.getInt32();
			_super.prototype.clientReadBody.call(this,msg,msgLen);
			return true;
		}

		__proto.serverWriteBody=function(msg){
			msg.writeByte(this.teamOwnResultList.length);
			for (var i=0,len=this.teamOwnResultList.length;i < len;i++){
				var tem=this.teamOwnResultList[i];
				msg.writeInt32(tem.id);
				msg.writeUTFBytes(tem.name);
				msg.writeInt16(tem.level);
				msg.writeUint16(tem.avatar);
				msg.writeByte(tem.gender);
				msg.writeInt32(tem.score);
				msg.writeInt16(tem.kills);
				msg.writeInt16(tem.deaths);
				msg.writeByte(tem.medals.length);
				for (var j=0;j < tem.medals.length;j++){
					msg.writeByte(tem.medals[j]);
				}
				msg.writeUTFBytes(tem.headPortrait);
			}
			msg.writeByte(this.teamID);
			msg.writeByte(this.winTeamID);
			msg.writeByte(this.rank);
			msg.writeByte(this.bestUserTeamID);
			msg.writeUint32(this.bestUserGUID);
			msg.writeInt32(this.bestUserScore);
			_super.prototype.serverWriteBody.call(this,msg);
			return true;
		}

		__proto.getMsgBodySize=function(){
			return 1024;
		}

		__proto.clear=function(){
			this.teamOwnResultList=[];
			this.teamID=0;
			this.rank=0;
			this.winTeamID=0;
			this.bestUserGUID=0;
			this.bestUserScore=0;
			this.bestUserTeamID=0;
			return _super.prototype.clear.call(this);
		}

		SMsgGameEndLolipop.MSGID=0;
		return SMsgGameEndLolipop;
	})(SMsgGameEnd)


	/**
	*...
	*@author dongketao
	*/
	//class msgSvr.SMsgGameEndTeam extends msgSvr.SMsgGameEnd
	var SMsgGameEndTeam=(function(_super){
		function SMsgGameEndTeam(){
			this.teamOwnResultList=null;
			this.teamResultList=null;
			this.teamFirstUser=null;
			this.teamID=0;
			this.rank=0;
			SMsgGameEndTeam.__super.call(this);
		}

		__class(SMsgGameEndTeam,'msgSvr.SMsgGameEndTeam',_super);
		var __proto=SMsgGameEndTeam.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			this.readAllTeamResult(msg);
			var teamOwnResultListLen=msg.readByte();
			this.teamOwnResultList=[];
			var i=0,len=0;
			for (i=0,len=teamOwnResultListLen;i < len;i++){
				this.teamOwnResultList.push(SMsgGameEndTeam.readItem(msg));
			}
			this.teamID=msg.readByte();
			this.rank=msg.readByte();
			var teamFirstUserLen=msg.readByte();
			this.teamFirstUser=[];
			var tem;
			for (i=0,len=teamFirstUserLen;i < len;i++){
				tem=SMsgGameEndTeam.readItem(msg);
				tem.teamId=msg.getInt16();
				tem.teamScore=msg.getInt32();
				this.teamFirstUser.push(tem);
			}
			_super.prototype.clientReadBody.call(this,msg,msgLen);
			return true;
		}

		__proto.serverWriteBody=function(msg){
			this.writeAllTeamResult(msg);
			var i=0,len=0;
			var tem;
			msg.writeByte(this.teamOwnResultList.length);
			for (i=0,len=this.teamOwnResultList.length;i < len;i++){
				SMsgGameEndTeam.writeItem(msg,this.teamOwnResultList[i]);
			}
			msg.writeByte(this.teamID);
			msg.writeByte(this.rank);
			msg.writeByte(this.teamFirstUser.length);
			for (i=0,len=this.teamFirstUser.length;i < len;i++){
				tem=this.teamFirstUser[i];
				SMsgGameEndTeam.writeItem(msg,tem);
				msg.writeInt16(tem.teamId);
				msg.writeInt32(tem.teamScore);
			}
			_super.prototype.serverWriteBody.call(this,msg);
			return true;
		}

		__proto.getMsgBodySize=function(){
			return 1024;
		}

		__proto.clear=function(){
			this.teamOwnResultList=[];
			this.teamID=0;
			this.rank=0;
			return _super.prototype.clear.call(this);
		}

		/**
		*所有队伍的信息，是一个二维数组
		*@param msg
		*/
		__proto.writeAllTeamResult=function(msg){
			var teamResultLen=this.teamResultList.length
			msg.writeByte(teamResultLen);
			var tem;
			var singleTeamInfo;
			var singleTeamLen=0;
			for (var i=0,len=teamResultLen;i < len;i++){
				singleTeamInfo=this.teamResultList[i];
				singleTeamLen=singleTeamInfo.length;
				msg.writeByte(singleTeamLen);
				for(var j=0;j<singleTeamLen;j++){
					tem=singleTeamInfo[j];
					SMsgGameEndTeam.writeItem(msg,tem);
				}
			}
		}

		/**
		*读取所有队伍的信息
		*@param msg
		*/
		__proto.readAllTeamResult=function(msg){
			var allTeamListLen=msg.readByte();
			this.teamResultList=[];
			var i=0,len=0;
			var singleTeamLen=0;
			for (i=0,len=allTeamListLen;i < len;i++){
				var singleTeamInfo=[];
				singleTeamLen=msg.readByte();
				for(var j=0;j<singleTeamLen;j++){
					singleTeamInfo.push(SMsgGameEndTeam.readItem(msg));
				}
				this.teamResultList[i]=singleTeamInfo;
			}
		}

		SMsgGameEndTeam.writeItem=function(msg,tem){
			msg.writeInt32(tem.id);
			msg.writeUTFBytes(tem.name);
			msg.writeInt16(tem.level);
			msg.writeUint16(tem.avatar);
			msg.writeByte(tem.gender);
			msg.writeInt32(tem.score);
			msg.writeInt32(tem.maxScore);
			msg.writeInt16(tem.kills);
			msg.writeInt16(tem.deaths);
			msg.writeUTFBytes(tem.headPortrait);
			msg.writeByte(tem.online);
			msg.writeByte(tem.medals.length);
			var i=0,len=0;
			for (i=0,len=tem.medals.length;i < len;i++){
				msg.writeByte(tem.medals[i]);
			}
			msg.writeByte(tem.passiveSkills.length);
			for (i=0,len=tem.passiveSkills.length;i < len;i++){
				msg.writeByte(tem.passiveSkills[i]);
			}
		}

		SMsgGameEndTeam.readItem=function(msg){
			var tem=new rankItemData();
			tem.id=msg.getInt32();
			var nameLen=msg.getInt16();
			tem.name=msg.readUTFBytes(nameLen);
			tem.level=msg.getInt16();
			tem.avatar=msg.getUint16();
			tem.gender=msg.readByte();
			tem.score=msg.getInt32();
			tem.maxScore=msg.getInt32();
			tem.kills=msg.getInt16();
			tem.deaths=msg.getInt16();
			var userheadLen=msg.getInt16();
			tem.headPortrait=msg.readUTFBytes(userheadLen);
			tem.online=msg.readByte();
			tem.medals=[];
			var i=0;
			var medalLength=msg.readByte();
			for (i=0;i < medalLength;i++){
				tem.medals.push(msg.readByte());
			}
			tem.passiveSkills=[];
			var passiveSkillLength=msg.readByte();
			for (i=0;i < passiveSkillLength;i++){
				tem.passiveSkills.push(msg.readByte());
			}
			return tem;
		}

		SMsgGameEndTeam.MSGID=0;
		return SMsgGameEndTeam;
	})(SMsgGameEnd)


	/**
	*...
	*@author dongketao
	*/
	//class msgSvr.SMsgSelfCollision extends msgSvr.SMsgCollision
	var SMsgSelfCollision=(function(_super){
		function SMsgSelfCollision(){
			this.bloodVal1=0;
			this.curScore1=0;
			this.bulletNum1=0;
			SMsgSelfCollision.__super.call(this);
		}

		__class(SMsgSelfCollision,'msgSvr.SMsgSelfCollision',_super);
		var __proto=SMsgSelfCollision.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			_super.prototype.clientReadBody.call(this,msg,msgLen);
			this.bloodVal1=msg.getInt16();
			this.curScore1=msg.getInt16();
			this.bulletNum1=msg.getUint8();
			return true;
		}

		__proto.serverWriteBody=function(msg){
			_super.prototype.serverWriteBody.call(this,msg);
			msg.writeInt16(this.bloodVal1);
			msg.writeInt16(this.curScore1);
			msg.writeUint8(this.bulletNum1);
			return true;
		}

		__proto.clear=function(){
			this.bloodVal1=0;
			this.curScore1=0;
			this.bulletNum1=0;
			return _super.prototype.clear.call(this);
		}

		SMsgSelfCollision.MSGID=0;
		return SMsgSelfCollision;
	})(SMsgCollision)


	/**
	*...
	*@author ...
	*/
	//class msgSvr.SMsgStuckMove extends msgSvr.SMsgUserDeltaMove
	var SMsgStuckMove=(function(_super){
		function SMsgStuckMove(){
			SMsgStuckMove.__super.call(this);
		}

		__class(SMsgStuckMove,'msgSvr.SMsgStuckMove',_super);
		var __proto=SMsgStuckMove.prototype;
		__proto.clear=function(){
			return _super.prototype.clear.call(this);
		}

		SMsgStuckMove.MSGID=0;
		return SMsgStuckMove;
	})(SMsgUserDeltaMove)


	/**
	*...
	*@author ...
	*/
	//class msgSvr.SMsgUserFlashMove extends msgSvr.SMsgUserDeltaMove
	var SMsgUserFlashMove=(function(_super){
		function SMsgUserFlashMove(){
			SMsgUserFlashMove.__super.call(this);
		}

		__class(SMsgUserFlashMove,'msgSvr.SMsgUserFlashMove',_super);
		SMsgUserFlashMove.MSGID=0;
		return SMsgUserFlashMove;
	})(SMsgUserDeltaMove)


	/**
	*...
	*@author ...
	*/
	//class msgSvr.SMsgUserStartHitMove extends msgSvr.SMsgUserDeltaMove
	var SMsgUserStartHitMove=(function(_super){
		function SMsgUserStartHitMove(){
			this.moveSpeed=NaN;
			SMsgUserStartHitMove.__super.call(this);
			this.clear();
		}

		__class(SMsgUserStartHitMove,'msgSvr.SMsgUserStartHitMove',_super);
		var __proto=SMsgUserStartHitMove.prototype;
		__proto.clientReadBody=function(msg,msgLen){
			_super.prototype.clientReadBody.call(this,msg,msgLen);
			this.moveSpeed=msg.getFloat32();
			return true;
		}

		__proto.serverWriteBody=function(msg){
			_super.prototype.serverWriteBody.call(this,msg);
			msg.writeFloat32(this.moveSpeed);
			return true;
		}

		__proto.clear=function(){
			this.moveSpeed=0;
			return _super.prototype.clear.call(this);
		}

		SMsgUserStartHitMove.MSGID=0;
		return SMsgUserStartHitMove;
	})(SMsgUserDeltaMove)


	/**
	*...
	*@author 贾艳昭
	*/
	//class io.RouterSocket extends io.Laya8Socket
	var RouterSocket=(function(_super){
		function RouterSocket(host,port,ssl,maxRetryTime){
			this.maxReconnectTime=10;
			this.reconnectTime=0;
			this.reconnectTimeSpan=3000;
			this.maxCacheMsgCount=100;
			this.sendMsgCache=[];
			this.stopReconnect=false;
			this._lastSentTime=0;
			this._lastRecvTime=0;
			(ssl===void 0)&& (ssl=false);
			(maxRetryTime===void 0)&& (maxRetryTime=-1);
			this.stopReconnect=false;
			RouterSocket.__super.call(this,host,port,ssl,maxRetryTime);
		}

		__class(RouterSocket,'io.RouterSocket',_super);
		var __proto=RouterSocket.prototype;
		__proto.send=function(cmd,params){
			if (this.isConnected()){
				_super.prototype.send.call(this,cmd,params);
				this._lastSentTime=Browser.now();
			}
		}

		//}
		__proto.onOpen=function(e){
			this.reconnectTime=0;
			this._lastRecvTime=Browser.now();
			_super.prototype.onOpen.call(this,e);
		}

		//Laya.timer.callLater(this,reSendCachedMsg);
		__proto.onMessage=function(e){
			this._lastRecvTime=Browser.now();
			_super.prototype.onMessage.call(this,e);
		}

		__proto.onClose=function(e){
			if (this.stopReconnect || this.reconnectTime > this.maxReconnectTime){
				_super.prototype.onClose.call(this,e);
				}else {
				this.event('ReConnect',{span:this.reconnectTimeSpan,cur:this.reconnectTime+1,max:this.maxReconnectTime });
				Method.log('网络断开, 将在'+this.reconnectTimeSpan+'毫秒后进行断线重连');
				Laya.timer.once(this.reconnectTimeSpan,this,this.startReconnect);
			}
		}

		__proto.onError=function(e){
			if (!this.stopReconnect && this.reconnectTime > this.maxReconnectTime){
				_super.prototype.onError.call(this,e);
			}else {}
		}

		__proto.close=function(){
			this.stopReconnect=true;
			_super.prototype.close.call(this);
		}

		__proto.reSendCachedMsg=function(){
			for (var i=0;i < this.sendMsgCache.length;i++){
				this.send(this.sendMsgCache[i].cmd,this.sendMsgCache[i].params);
			}
			this.sendMsgCache.length=0;
		}

		__proto.startReconnect=function(){
			this.reconnectTime++;
			Method.log('正在进行第'+this.reconnectTime+'次断线重连');
			this._createSocket();
		}

		__getset(0,__proto,'lastSentTime',function(){
			return this._lastSentTime;
		});

		__getset(0,__proto,'lastRecvTime',function(){
			return this._lastRecvTime;
		});

		return RouterSocket;
	})(Laya8Socket)


	/**
	*@private
	*<code>Bitmap</code> 是图片资源类。
	*/
	//class laya.resource.Bitmap extends laya.resource.Resource
	var Bitmap=(function(_super){
		function Bitmap(){
			//this._source=null;
			//this._w=NaN;
			//this._h=NaN;
			this.useNum=0;
			Bitmap.__super.call(this);
			this._w=0;
			this._h=0;
		}

		__class(Bitmap,'laya.resource.Bitmap',_super);
		var __proto=Bitmap.prototype;
		/**
		*彻底清理资源。
		*/
		__proto.dispose=function(){
			this._resourceManager.removeResource(this);
			_super.prototype.dispose.call(this);
		}

		/***
		*宽度。
		*/
		__getset(0,__proto,'width',function(){
			return this._w;
		});

		/***
		*高度。
		*/
		__getset(0,__proto,'height',function(){
			return this._h;
		});

		/***
		*HTML Image 或 HTML Canvas 或 WebGL Texture 。
		*/
		__getset(0,__proto,'source',function(){
			return this._source;
		});

		return Bitmap;
	})(Resource)


	/**
	*...
	*@author ...
	*/
	//class laya.webgl.shader.BaseShader extends laya.resource.Resource
	var BaseShader=(function(_super){
		function BaseShader(){
			BaseShader.__super.call(this);
		}

		__class(BaseShader,'laya.webgl.shader.BaseShader',_super);
		BaseShader.activeShader=null
		BaseShader.bindShader=null
		return BaseShader;
	})(Resource)


	//class laya.webgl.utils.Buffer extends laya.resource.Resource
	var Buffer=(function(_super){
		function Buffer(){
			this._glBuffer=null;
			this._buffer=null;
			this._bufferType=0;
			this._bufferUsage=0;
			this._byteLength=0;
			Buffer.__super.call(this);
			Buffer._gl=WebGL.mainContext;
		}

		__class(Buffer,'laya.webgl.utils.Buffer',_super);
		var __proto=Buffer.prototype;
		__proto._bind=function(){
			this.activeResource();
			(Buffer._bindActive[this._bufferType]===this._glBuffer)|| (Buffer._gl.bindBuffer(this._bufferType,Buffer._bindActive[this._bufferType]=this._glBuffer),BaseShader.activeShader=null);
		}

		__proto.recreateResource=function(){
			this.startCreate();
			this._glBuffer || (this._glBuffer=Buffer._gl.createBuffer());
			this.completeCreate();
		}

		__proto.detoryResource=function(){
			if (this._glBuffer){
				WebGL.mainContext.deleteBuffer(this._glBuffer);
				this._glBuffer=null;
			}
			this.memorySize=0;
		}

		__proto.dispose=function(){
			Buffer._bindActive[this._bufferType]=null;
			this.resourceManager.removeResource(this);
			_super.prototype.dispose.call(this);
		}

		//TODO:私有
		__getset(0,__proto,'byteLength',function(){
			return this._byteLength;
		});

		__getset(0,__proto,'bufferType',function(){
			return this._bufferType;
		});

		__getset(0,__proto,'bufferUsage',function(){
			return this._bufferUsage;
		});

		Buffer._gl=null
		Buffer._bindActive={};
		return Buffer;
	})(Resource)


	/**
	*@private
	*audio标签播放声音的音轨控制
	*/
	//class laya.media.h5audio.AudioSoundChannel extends laya.media.SoundChannel
	var AudioSoundChannel=(function(_super){
		function AudioSoundChannel(audio){
			this._audio=null;
			this._onEnd=null;
			this._resumePlay=null;
			AudioSoundChannel.__super.call(this);
			this._onEnd=Utils$2.bind(this.__onEnd,this);
			this._resumePlay=Utils$2.bind(this.__resumePlay,this);
			audio.addEventListener("ended",this._onEnd);
			this._audio=audio;
		}

		__class(AudioSoundChannel,'laya.media.h5audio.AudioSoundChannel',_super);
		var __proto=AudioSoundChannel.prototype;
		__proto.__onEnd=function(){
			if (this.loops==1){
				if (this.completeHandler){
					Laya.timer.once(10,this,this.__runComplete,[this.completeHandler],false);
					this.completeHandler=null;
				}
				this.stop();
				this.event("complete");
				return;
			}
			if (this.loops > 0){
				this.loops--;
			}
			this.play();
		}

		__proto.__resumePlay=function(){
			if(this._audio)this._audio.removeEventListener("canplay",this._resumePlay);
			try {
				this._audio.currentTime=this.startTime;
				Browser.container.appendChild(this._audio);
				this._audio.play();
				}catch (e){
				this.event("error");
			}
		}

		/**
		*播放
		*/
		__proto.play=function(){
			this.isStopped=false;
			try {
				this._audio.playbackRate=SoundManager.playbackRate;
				this._audio.currentTime=this.startTime;
				}catch (e){
				this._audio.addEventListener("canplay",this._resumePlay);
				return;
			}
			SoundManager.addChannel(this);
			Browser.container.appendChild(this._audio);
			if("play" in this._audio)
				this._audio.play();
		}

		/**
		*停止播放
		*
		*/
		__proto.stop=function(){
			this.isStopped=true;
			SoundManager.removeChannel(this);
			this.completeHandler=null;
			if (!this._audio)
				return;
			if ("pause" in this._audio)
				if (Render.isConchApp){
				this._audio.stop();
			}
			this._audio.pause();
			this._audio.removeEventListener("ended",this._onEnd);
			this._audio.removeEventListener("canplay",this._resumePlay);
			if (!Browser.onIE){
				if (this._audio!=AudioSound._musicAudio){
					Pool.recover("audio:"+this.url,this._audio);
				}
			}
			Browser.removeElement(this._audio);
			this._audio=null;
		}

		__proto.pause=function(){
			this.isStopped=true;
			SoundManager.removeChannel(this);
			if("pause" in this._audio)
				this._audio.pause();
		}

		__proto.resume=function(){
			if (!this._audio)
				return;
			this.isStopped=false;
			SoundManager.addChannel(this);
			if("play" in this._audio)
				this._audio.play();
		}

		/**
		*当前播放到的位置
		*@return
		*
		*/
		__getset(0,__proto,'position',function(){
			if (!this._audio)
				return 0;
			return this._audio.currentTime;
		});

		/**
		*获取总时间。
		*/
		__getset(0,__proto,'duration',function(){
			if (!this._audio)
				return 0;
			return this._audio.duration;
		});

		/**
		*设置音量
		*@param v
		*
		*/
		/**
		*获取音量
		*@return
		*
		*/
		__getset(0,__proto,'volume',function(){
			if (!this._audio)return 1;
			return this._audio.volume;
			},function(v){
			if (!this._audio)return;
			this._audio.volume=v;
		});

		return AudioSoundChannel;
	})(SoundChannel)


	/**
	*@private
	*web audio api方式播放声音的音轨控制
	*/
	//class laya.media.webaudio.WebAudioSoundChannel extends laya.media.SoundChannel
	var WebAudioSoundChannel=(function(_super){
		function WebAudioSoundChannel(){
			this.audioBuffer=null;
			this.gain=null;
			this.bufferSource=null;
			this._currentTime=0;
			this._volume=1;
			this._startTime=0;
			this._pauseTime=0;
			this._onPlayEnd=null;
			this.context=WebAudioSound.ctx;
			WebAudioSoundChannel.__super.call(this);
			this._onPlayEnd=Utils$2.bind(this.__onPlayEnd,this);
			if (this.context["createGain"]){
				this.gain=this.context["createGain"]();
				}else {
				this.gain=this.context["createGainNode"]();
			}
		}

		__class(WebAudioSoundChannel,'laya.media.webaudio.WebAudioSoundChannel',_super);
		var __proto=WebAudioSoundChannel.prototype;
		/**
		*播放声音
		*/
		__proto.play=function(){
			SoundManager.addChannel(this);
			this.isStopped=false;
			this._clearBufferSource();
			if (!this.audioBuffer)return;
			var context=this.context;
			var gain=this.gain;
			var bufferSource=context.createBufferSource();
			this.bufferSource=bufferSource;
			bufferSource.buffer=this.audioBuffer;
			bufferSource.connect(gain);
			if (gain)
				gain.disconnect();
			gain.connect(context.destination);
			bufferSource.onended=this._onPlayEnd;
			if (this.startTime >=this.duration)this.startTime=0;
			this._startTime=Browser.now();
			this.gain.gain.value=this._volume;
			if (this.loops==0){
				bufferSource.loop=true;
			}
			bufferSource.playbackRate.value=SoundManager.playbackRate;
			bufferSource.start(0,this.startTime);
			this._currentTime=0;
		}

		__proto.__onPlayEnd=function(){
			if (this.loops==1){
				if (this.completeHandler){
					Laya.timer.once(10,this,this.__runComplete,[this.completeHandler],false);
					this.completeHandler=null;
				}
				this.stop();
				this.event("complete");
				return;
			}
			if (this.loops > 0){
				this.loops--;
			}
			this.play();
		}

		__proto._clearBufferSource=function(){
			if (this.bufferSource){
				var sourceNode=this.bufferSource;
				if (sourceNode.stop){
					sourceNode.stop(0);
					}else {
					sourceNode.noteOff(0);
				}
				sourceNode.disconnect(0);
				sourceNode.onended=null;
				if (!WebAudioSoundChannel._tryCleanFailed)this._tryClearBuffer(sourceNode);
				this.bufferSource=null;
			}
		}

		__proto._tryClearBuffer=function(sourceNode){
			if (!Browser.onIOS){
				WebAudioSoundChannel._tryCleanFailed=true;
				return;
			}
			try {sourceNode.buffer=WebAudioSound._miniBuffer;}catch (e){WebAudioSoundChannel._tryCleanFailed=true;}
		}

		/**
		*停止播放
		*/
		__proto.stop=function(){
			this._clearBufferSource();
			this.audioBuffer=null;
			if (this.gain)
				this.gain.disconnect();
			this.isStopped=true;
			SoundManager.removeChannel(this);
			this.completeHandler=null;
			if(SoundManager.autoReleaseSound)
				Laya.timer.once(5000,null,SoundManager.disposeSoundIfNotUsed,[this.url],false);
		}

		__proto.pause=function(){
			if (!this.isStopped){
				this._pauseTime=this.position;
			}
			this._clearBufferSource();
			if (this.gain)
				this.gain.disconnect();
			this.isStopped=true;
			SoundManager.removeChannel(this);
			if(SoundManager.autoReleaseSound)
				Laya.timer.once(5000,null,SoundManager.disposeSoundIfNotUsed,[this.url],false);
		}

		__proto.resume=function(){
			this.startTime=this._pauseTime;
			this.play();
		}

		/**
		*获取当前播放位置
		*/
		__getset(0,__proto,'position',function(){
			if (this.bufferSource){
				return (Browser.now()-this._startTime)/ 1000+this.startTime;
			}
			return 0;
		});

		__getset(0,__proto,'duration',function(){
			if (this.audioBuffer){
				return this.audioBuffer.duration;
			}
			return 0;
		});

		/**
		*设置音量
		*/
		/**
		*获取音量
		*/
		__getset(0,__proto,'volume',function(){
			return this._volume;
			},function(v){
			if (this.isStopped){
				return;
			}
			this._volume=v;
			this.gain.gain.value=v;
		});

		WebAudioSoundChannel._tryCleanFailed=false;
		return WebAudioSoundChannel;
	})(SoundChannel)


	//class laya.webgl.resource.RenderTarget2D extends laya.resource.Texture
	var RenderTarget2D=(function(_super){
		function RenderTarget2D(width,height,surfaceFormat,surfaceType,depthStencilFormat,mipMap,repeat,minFifter,magFifter){
			this._type=0;
			this._svWidth=NaN;
			this._svHeight=NaN;
			this._preRenderTarget=null;
			this._alreadyResolved=false;
			this._looked=false;
			this._surfaceFormat=0;
			this._surfaceType=0;
			this._depthStencilFormat=0;
			this._mipMap=false;
			this._repeat=false;
			this._minFifter=0;
			this._magFifter=0;
			this._destroy=false;
			(surfaceFormat===void 0)&& (surfaceFormat=0x1908);
			(surfaceType===void 0)&& (surfaceType=0x1401);
			(depthStencilFormat===void 0)&& (depthStencilFormat=0x84F9);
			(mipMap===void 0)&& (mipMap=false);
			(repeat===void 0)&& (repeat=false);
			(minFifter===void 0)&& (minFifter=-1);
			(magFifter===void 0)&& (magFifter=-1);
			this._type=1;
			this._w=width;
			this._h=height;
			this._surfaceFormat=surfaceFormat;
			this._surfaceType=surfaceType;
			this._depthStencilFormat=depthStencilFormat;
			this._mipMap=mipMap;
			this._repeat=repeat;
			this._minFifter=minFifter;
			this._magFifter=magFifter;
			this._createWebGLRenderTarget();
			this.bitmap.lock=true;
			RenderTarget2D.__super.call(this,this.bitmap,Texture.INV_UV);
		}

		__class(RenderTarget2D,'laya.webgl.resource.RenderTarget2D',_super);
		var __proto=RenderTarget2D.prototype;
		Laya.imps(__proto,{"laya.resource.IDispose":true})
		//TODO:临时......................................................
		__proto.getType=function(){
			return this._type;
		}

		//*/
		__proto.getTexture=function(){
			return this;
		}

		__proto.size=function(w,h){
			if (this._w==w && this._h==h)return;
			this._w=w;
			this._h=h;
			this.release();
			if (this._w !=0 && this._h !=0)this._createWebGLRenderTarget();
		}

		__proto.release=function(){
			this.destroy();
		}

		__proto.recycle=function(){
			RenderTarget2D.POOL.push(this);
		}

		__proto.start=function(){
			var gl=WebGL.mainContext;
			this._preRenderTarget=RenderState2D.curRenderTarget;
			RenderState2D.curRenderTarget=this;
			gl.bindFramebuffer(0x8D40,this.bitmap.frameBuffer);
			this._alreadyResolved=false;
			if (this._type==1){
				gl.viewport(0,0,this._w,this._h);
				this._svWidth=RenderState2D.width;
				this._svHeight=RenderState2D.height;
				RenderState2D.width=this._w;
				RenderState2D.height=this._h;
				BaseShader.activeShader=null;
			}
			return this;
		}

		__proto.clear=function(r,g,b,a){
			(r===void 0)&& (r=0.0);
			(g===void 0)&& (g=0.0);
			(b===void 0)&& (b=0.0);
			(a===void 0)&& (a=1.0);
			var gl=WebGL.mainContext;
			gl.clearColor(r,g,b,a);
			var clearFlag=0x00004000;
			switch (this._depthStencilFormat){
				case 0x81A5:
					clearFlag |=0x00000100;
					break ;
				case 0x8D48:
					clearFlag |=0x00000400;
					break ;
				case 0x84F9:
					clearFlag |=0x00000100;
					clearFlag |=0x00000400
					break ;
				}
			gl.clear(clearFlag);
		}

		__proto.end=function(){
			var gl=WebGL.mainContext;
			gl.bindFramebuffer(0x8D40,this._preRenderTarget ? this._preRenderTarget.bitmap.frameBuffer :null);
			this._alreadyResolved=true;
			RenderState2D.curRenderTarget=this._preRenderTarget;
			if (this._type==1){
				gl.viewport(0,0,this._svWidth,this._svHeight);
				RenderState2D.width=this._svWidth;
				RenderState2D.height=this._svHeight;
				BaseShader.activeShader=null;
			}else gl.viewport(0,0,Laya.stage.width,Laya.stage.height);
		}

		__proto.getData=function(x,y,width,height){
			var gl=WebGL.mainContext;
			gl.bindFramebuffer(0x8D40,(this.bitmap).frameBuffer);
			var canRead=(gl.checkFramebufferStatus(0x8D40)===0x8CD5);
			if (!canRead){
				gl.bindFramebuffer(0x8D40,null);
				return null;
			};
			var pixels=new Uint8Array(this._w *this._h *4);
			gl.readPixels(x,y,width,height,this._surfaceFormat,this._surfaceType,pixels);
			gl.bindFramebuffer(0x8D40,null);
			return pixels;
		}

		/**彻底清理资源,注意会强制解锁清理*/
		__proto.destroy=function(foreDiposeTexture){
			(foreDiposeTexture===void 0)&& (foreDiposeTexture=false);
			if (!this._destroy){
				this._loaded=false;
				this.bitmap.offAll();
				this.bitmap.detoryResource();
				this.bitmap.dispose();
				this.offAll();
				this.bitmap=null;
				this._alreadyResolved=false;
				this._destroy=true;
				_super.prototype.destroy.call(this);
			}
		}

		//待测试
		__proto.dispose=function(){}
		__proto._createWebGLRenderTarget=function(){
			this.bitmap=new WebGLRenderTarget(this.width,this.height,this._surfaceFormat,this._surfaceType,this._depthStencilFormat,this._mipMap,this._repeat,this._minFifter,this._magFifter);
			this.bitmap.activeResource();
			this._alreadyResolved=true;
			this._destroy=false;
			this._loaded=true;
			this.bitmap.on("recovered",this,function(e){
				this.event("recovered");
			})
		}

		__getset(0,__proto,'surfaceFormat',function(){
			return this._surfaceFormat;
		});

		__getset(0,__proto,'magFifter',function(){
			return this._magFifter;
		});

		__getset(0,__proto,'surfaceType',function(){
			return this._surfaceType;
		});

		__getset(0,__proto,'mipMap',function(){
			return this._mipMap;
		});

		__getset(0,__proto,'depthStencilFormat',function(){
			return this._depthStencilFormat;
		});

		//}
		__getset(0,__proto,'minFifter',function(){
			return this._minFifter;
		});

		/**返回RenderTarget的Texture*/
		__getset(0,__proto,'source',function(){
			if (this._alreadyResolved)
				return _super.prototype._$get_source.call(this);
			return null;
		});

		RenderTarget2D.create=function(w,h,surfaceFormat,surfaceType,depthStencilFormat,mipMap,repeat,minFifter,magFifter){
			(surfaceFormat===void 0)&& (surfaceFormat=0x1908);
			(surfaceType===void 0)&& (surfaceType=0x1401);
			(depthStencilFormat===void 0)&& (depthStencilFormat=0x84F9);
			(mipMap===void 0)&& (mipMap=false);
			(repeat===void 0)&& (repeat=false);
			(minFifter===void 0)&& (minFifter=-1);
			(magFifter===void 0)&& (magFifter=-1);
			var t=RenderTarget2D.POOL.pop();
			t || (t=new RenderTarget2D(w,h));
			if (!t.bitmap || t._w !=w || t._h !=h || t._surfaceFormat !=surfaceFormat || t._surfaceType !=surfaceType || t._depthStencilFormat !=depthStencilFormat || t._mipMap !=mipMap || t._repeat !=repeat || t._minFifter !=minFifter || t._magFifter !=magFifter){
				t._w=w;
				t._h=h;
				t._surfaceFormat=surfaceFormat;
				t._surfaceType=surfaceType;
				t._depthStencilFormat=depthStencilFormat;
				t._mipMap=mipMap;
				t._repeat=repeat;
				t._minFifter=minFifter;
				t._magFifter=magFifter;
				t.release();
				t._createWebGLRenderTarget();
			}
			return t;
		}

		RenderTarget2D.TYPE2D=1;
		RenderTarget2D.TYPE3D=2;
		RenderTarget2D.POOL=[];
		return RenderTarget2D;
	})(Texture)


	/**@private **/
	//class laya.wx.mini.MiniSoundChannel extends laya.media.SoundChannel
	var MiniSoundChannel=(function(_super){
		function MiniSoundChannel(audio,miniSound){
			this._audio=null;
			this._onEnd=null;
			this._miniSound=null;
			MiniSoundChannel.__super.call(this);
			this._audio=audio;
			this._miniSound=miniSound;
			this._onEnd=MiniSoundChannel.bindToThis(this.__onEnd,this);
			audio.onEnded(this._onEnd);
		}

		__class(MiniSoundChannel,'laya.wx.mini.MiniSoundChannel',_super);
		var __proto=MiniSoundChannel.prototype;
		/**@private **/
		__proto.__onEnd=function(){
			if (this.loops==1){
				if (this.completeHandler){
					Laya.timer.once(10,this,this.__runComplete,[this.completeHandler],false);
					this.completeHandler=null;
				}
				this.stop();
				this.event("complete");
				return;
			}
			if (this.loops > 0){
				this.loops--;
			}
			this.startTime=0;
			this.play();
		}

		/**
		*@private
		*播放
		*/
		__proto.play=function(){
			this.isStopped=false;
			SoundManager.addChannel(this);
			this._audio.play();
		}

		/**
		*@private
		*停止播放
		*
		*/
		__proto.stop=function(){
			this.isStopped=true;
			SoundManager.removeChannel(this);
			this.completeHandler=null;
			if (!this._audio)
				return;
			this._audio.pause();
			this._audio.offEnded(null);
			this._audio=null;
			this._miniSound=null;
			this._onEnd=null;
		}

		/**@private **/
		__proto.pause=function(){
			this.isStopped=true;
			this._audio.pause();
		}

		/**@private **/
		__proto.resume=function(){
			if (!this._audio)
				return;
			this.isStopped=false;
			SoundManager.addChannel(this);
			this._audio.play();
		}

		/**@private **/
		/**
		*@private
		*自动播放
		*@param value
		*/
		__getset(0,__proto,'autoplay',function(){
			return this._audio.autoplay;
			},function(value){
			this._audio.autoplay=value;
		});

		/**
		*@private
		*当前播放到的位置
		*@return
		*
		*/
		__getset(0,__proto,'position',function(){
			if (!this._audio)
				return 0;
			return this._audio.currentTime;
		});

		/**
		*@private
		*获取总时间。
		*/
		__getset(0,__proto,'duration',function(){
			if (!this._audio)
				return 0;
			return this._audio.duration;
		});

		/**@private **/
		/**@private **/
		__getset(0,__proto,'loop',function(){
			return this._audio.loop;
			},function(value){
			this._audio.loop=value;
		});

		/**
		*@private
		*设置音量
		*@param v
		*
		*/
		/**
		*@private
		*获取音量
		*@return
		*/
		__getset(0,__proto,'volume',function(){
			if (!this._audio)return 1;
			return this._audio.volume;
			},function(v){
			if (!this._audio)return;
			this._audio.volume=v;
		});

		MiniSoundChannel.bindToThis=function(fun,scope){
			var rst=fun;
			rst=fun.bind(scope);;
			return rst;
		}

		return MiniSoundChannel;
	})(SoundChannel)


	/**
	*...
	*@author 贾艳昭
	*/
	//class laya8.core.user.TeamUserBasicDataInfo extends laya8.core.user.UserBasicDataInfo
	var TeamUserBasicDataInfo=(function(_super){
		function TeamUserBasicDataInfo(){
			this.isReady=false;
			this.payload='';
			TeamUserBasicDataInfo.__super.call(this);
		}

		__class(TeamUserBasicDataInfo,'laya8.core.user.TeamUserBasicDataInfo',_super);
		return TeamUserBasicDataInfo;
	})(UserBasicDataInfo)


	/**
	*...
	*@author 贾艳昭
	*/
	//class logic.user.TeamUserBasicDataInfo extends logic.user.UserBasicDataInfo
	var TeamUserBasicDataInfo$1=(function(_super){
		function TeamUserBasicDataInfo(){
			this.isReady=false;
			this.payload='';
			TeamUserBasicDataInfo.__super.call(this);
		}

		__class(TeamUserBasicDataInfo,'logic.user.TeamUserBasicDataInfo',_super,'TeamUserBasicDataInfo$1');
		var __proto=TeamUserBasicDataInfo.prototype;
		__proto.setData=function(data){
			_super.prototype.setData.call(this,data);
			var arr=data.split(':');
			this.isReady="1"==arr[10];
			this.payload=arr[11];
		}

		return TeamUserBasicDataInfo;
	})(UserBasicDataInfo$1)


	//class laya.webgl.shader.d2.skinAnishader.SkinSV extends laya.webgl.shader.d2.value.Value2D
	var SkinSV=(function(_super){
		function SkinSV(type){
			this.texcoord=null;
			this.offsetX=300;
			this.offsetY=0;
			SkinSV.__super.call(this,0x200,0);
			var _vlen=8 *CONST3D2D.BYTES_PE;
			this.position=[2,0x1406,false,_vlen,0];
			this.texcoord=[2,0x1406,false,_vlen,2 *CONST3D2D.BYTES_PE];
			this.color=[4,0x1406,false,_vlen,4 *CONST3D2D.BYTES_PE];
		}

		__class(SkinSV,'laya.webgl.shader.d2.skinAnishader.SkinSV',_super);
		return SkinSV;
	})(Value2D)


	//class laya.webgl.shader.d2.value.Color2dSV extends laya.webgl.shader.d2.value.Value2D
	var Color2dSV=(function(_super){
		function Color2dSV(args){
			Color2dSV.__super.call(this,0x02,0);
			this.color=[];
		}

		__class(Color2dSV,'laya.webgl.shader.d2.value.Color2dSV',_super);
		var __proto=Color2dSV.prototype;
		__proto.setValue=function(value){
			value.fillStyle&&(this.color=value.fillStyle._color._color);
			value.strokeStyle&&(this.color=value.strokeStyle._color._color);
		}

		return Color2dSV;
	})(Value2D)


	//class laya.webgl.shader.d2.value.FillTextureSV extends laya.webgl.shader.d2.value.Value2D
	var FillTextureSV=(function(_super){
		function FillTextureSV(type){
			this.u_colorMatrix=null;
			this.strength=0;
			this.colorMat=null;
			this.colorAlpha=null;
			this.u_TexRange=[0,1,0,1];
			this.u_offset=[0,0];
			this.texcoord=Value2D._TEXCOORD;
			FillTextureSV.__super.call(this,0x100,0);
		}

		__class(FillTextureSV,'laya.webgl.shader.d2.value.FillTextureSV',_super);
		var __proto=FillTextureSV.prototype;
		//this.color=[4,WebGLContext.FLOAT,false,_vlen,4 *CONST3D2D.BYTES_PE];
		__proto.setValue=function(vo){
			this.ALPHA=vo.ALPHA;
			vo.filters && this.setFilters(vo.filters);
		}

		__proto.clear=function(){
			this.texture=null;
			this.shader=null;
			this.defines.setValue(0);
		}

		return FillTextureSV;
	})(Value2D)


	//class laya.webgl.shader.d2.value.TextureSV extends laya.webgl.shader.d2.value.Value2D
	var TextureSV=(function(_super){
		function TextureSV(subID){
			this.u_colorMatrix=null;
			this.strength=0;
			this.blurInfo=null;
			this.colorMat=null;
			this.colorAlpha=null;
			this.texcoord=Value2D._TEXCOORD;
			(subID===void 0)&& (subID=0);
			TextureSV.__super.call(this,0x01,subID);
		}

		__class(TextureSV,'laya.webgl.shader.d2.value.TextureSV',_super);
		var __proto=TextureSV.prototype;
		__proto.setValue=function(vo){
			this.ALPHA=vo.ALPHA;
			vo.filters && this.setFilters(vo.filters);
		}

		__proto.clear=function(){
			this.texture=null;
			this.shader=null;
			this.defines.setValue(0);
		}

		return TextureSV;
	})(Value2D)


	//class laya.webgl.shader.d2.value.PrimitiveSV extends laya.webgl.shader.d2.value.Value2D
	var PrimitiveSV=(function(_super){
		function PrimitiveSV(args){
			this.a_color=null;
			this.u_pos=[0,0];
			PrimitiveSV.__super.call(this,0x04,0);
			this.position=[2,0x1406,false,5 *CONST3D2D.BYTES_PE,0];
			this.a_color=[3,0x1406,false,5 *CONST3D2D.BYTES_PE,2 *CONST3D2D.BYTES_PE];
		}

		__class(PrimitiveSV,'laya.webgl.shader.d2.value.PrimitiveSV',_super);
		return PrimitiveSV;
	})(Value2D)


	/**
	*...
	*@author rivetr
	*/
	//class aniEffect.PowerGetEff extends laya.display.Sprite
	var PowerGetEff=(function(_super){
		function PowerGetEff(){
			this._peArr=null;
			this._numElement=0;
			this._texIdx=0;
			this._ridx=0;
			PowerGetEff.__super.call(this);
			this._renderType |=0x400;
			this._ridx=Math.floor(Math.random()*200);
			this.x=0;
			this.y=0;
		}

		__class(PowerGetEff,'aniEffect.PowerGetEff',_super);
		var __proto=PowerGetEff.prototype;
		/**
		*更快的随机数函数
		*@return
		*/
		__proto.getRand=function(){
			this._ridx++;
			if (this._ridx >=PowerGetEff._randomArr.length)this._ridx=0;
			return PowerGetEff._randomArr[this._ridx];
		}

		/**
		*初始化当前的PowerEffect.
		*@param _numE
		*@param _cen
		*@param _rad
		*@param _target
		*@param _moveTime
		*/
		__proto.initPowerEff=function(_cen,_rad,_target,callback,_numE,_moveTime){
			var _$this=this;
			(_numE===void 0)&& (_numE=15);
			(_moveTime===void 0)&& (_moveTime=600);
			this._peArr=[];
			if (!PowerGetEff._ptex)return;
			Laya.timer.loop(20,this,addEle=function(){
				if (_$this._peArr.length > _numE){
					Laya.timer.once(_moveTime,_$this,fadeOut=function(){
						Tween.to(_$this,{alpha :0.0 },500,null,callback);
					});
					Laya.timer.clear(_$this,addEle);
					return;
				}
				for (var ti=0;ti <2;ti++){
					var tsp=new PowerElement();
					tsp.initPE(_$this.getRand()*_rad+_cen.x,_$this.getRand()*_rad+_cen.y,1.0,PowerGetEff._powerTex[_$this._texIdx++]);
					if (_$this._texIdx >=PowerGetEff._powerTex.length)
						_$this._texIdx=0;
					tsp.scale=0.7;
					_$this._peArr[_$this._peArr.length]=tsp;
					var tx=_target.x;
					var ty=_target.y;
					var t=_moveTime;
					if(_$this.getRand()< 0.5)
						Tween.to(tsp,{x:tx },t,Ease.quadInOut);
					else
					Tween.to(tsp,{x:tx },t,Ease.circIn);
					if(_$this.getRand()< 0.5)
						Tween.to(tsp,{y:ty },t,Ease.backIn);
					else
					Tween.to(tsp,{y:ty },t,Ease.circIn);
					Tween.to(tsp,{scale :1.0 },t,Ease.circIn);
				}
			});
		}

		/**
		*最终的动画实例渲染接口.
		*@param context
		*@param x
		*@param y
		*/
		__proto.customRender=function(context,xx,yy){
			this.graphics.clear();
			for (var ti=0,len=this._peArr.length;ti < len;ti++){
				(this._peArr [ti]).DrawPE(this.x,this.y,this.graphics);
			}
		}

		PowerGetEff.staticInitPower=function(){
			for (var ti=0;ti < 300;ti++){
				PowerGetEff._randomArr[ti]=Math.random();
			}
			SnowLoad.I.load("res/atlas/power.atlas",Handler.create(null,onLoad=function(tex){
				PowerGetEff._ptex=tex;
				PowerGetEff._powerTex=[];
				for (var ti=0;ti < 3;ti++){
					PowerGetEff._powerTex[ti]=Laya.loader.getRes('power/prop'+ti+'.png');
					if (!PowerGetEff._powerTex[ti]){
						PowerGetEff._ptex=null;
						return;
					}
				}
			}),null,"atlas",0);
		}

		PowerGetEff._randomArr=[];
		PowerGetEff._ptex=null;
		PowerGetEff._powerTex=null
		return PowerGetEff;
	})(Sprite)


	/**
	*...
	*@author anling
	*/
	//class controller.GameController extends laya.display.Sprite
	var GameController=(function(_super){
		function GameController(){
			this._moveCtrl=null;
			this._moveRect=null;
			this._preTime=0;
			this._isAttck=false;
			this.moveAngle=NaN;
			this._lastMoveAngle=-1;
			this.__mouseEnabled=true;
			this.attackCtrl=null;
			this.canTurbody=true;
			this._isFindOne=false;
			this._autoAngle=0;
			this._curRadians=0;
			this.isTwo=false;
			this.beforeTime=0;
			this.preAngle=NaN;
			this.dobuleAngle=NaN;
			this._getAttckAngle=null;
			this.tempSBCH=0;
			this.moveSelfData=null;
			this._petAtkAngle=NaN;
			this._petAtkCmd=null;
			GameController.__super.call(this);
			System.I;
			this._moveRect=new Sprite();
			this._moveRect.pos(0,0);
			this.addChild(this._moveRect);
			this._moveCtrl=new Rocker(this._moveRect);
			this._moveCtrl.isAttack=false;
			this._moveCtrl.name="_moveCtrl";
			this.addChild(this._moveCtrl);
			if (!System.ISMOBILE)this._moveCtrl.visible=false;
			Laya.stage.on("resize",this,this._resize);
			this._resize();
			GameController.petAttackFrequency=ConfigData.gameCfg["petAttackFrequency"];
		}

		__class(GameController,'controller.GameController',_super);
		var __proto=GameController.prototype;
		__proto.init=function(){
			if (!this._moveCtrl.isPress()){
				var x=180;
				var y=Laya.stage.height-180;
				this._moveCtrl.baseX=x;
				this._moveCtrl.baseY=y;
				this._moveCtrl.pos(x,y);
			};
			var clientData=NotifyCenter.I.Query("client_data");
			var _attackType=0;
			if(clientData){
				_attackType=clientData.fightSetType || RoleCenter.DEFAULTATTACKTYPE;
				}else{
				_attackType=RoleCenter.DEFAULTATTACKTYPE;
			}
			this.changeAttackType(_attackType);
		}

		/**设置当前战斗的操作模式*/
		__proto.changeAttackType=function(type){
			RoleCenter.I.attackType=type;
			if (!this.attackCtrl){
				this.attackCtrl=new Rocker(null);
				this.attackCtrl.isAttack=true;
				this.attackCtrl.name="_attackCtrl";
				this.attackCtrl.visible=false;
				this.addChild(this.attackCtrl);
			}
			switch(type){
				case 0x1:
					this._getAttckAngle=this.autoAttack;
					break ;
				case 0x2:
					this._getAttckAngle=this.activeAttack;
					break ;
				case 0x3:
					this._getAttckAngle=this.mixAttack;
					break ;
				default :
					this._getAttckAngle=this.mixAttack;
					break ;
				}
			Player.curUser && this._getAttckAngle(Player.curUser.attackCircle);
		}

		__proto._resize=function(){
			if (System.ISMOBILE){
				this._moveRect.size(Laya.stage.width/2,Laya.stage.height);
				}else{
				this._moveRect.size(Laya.stage.width,Laya.stage.height);
			}
		}

		/**
		*获取面朝角度
		*@return
		*/
		__proto.getAngle=function(){
			var angle=NaN;
			if (!this._moveCtrl.isPress()){
				angle=this._getAttckAngle();
			}
			else{
				angle=this._moveCtrl.angle;
			}
			return angle;
		}

		__proto.setDirBody=function(b){
			this.canTurbody=b;
		}

		__proto.atckUpdate=function(){
			var role=Player.curUser;
			if (!role || role.destroyed || !role.canRotate)return;
			var img=role.attackCircle;
			Stat.loopCount%2 && img.setRotation(this._getAttckAngle(img));
			if (role.isHavePet && Stat.loopCount%2){
				var pet=role.pet;
				var ct=this.timer.currTimer;
				var t=ct-pet.sendAtkTime;
				if (t >=300)pet.isAtk=false;
				if (t >=GameController.petAttackFrequency){
					pet.sendAtkTime=ct;
					if (this._isFindOne){
						this._findUserAngle(true);
						this.sendPetAtk(this._petAtkAngle,pet);
					}
				}
			}
			if (this.canTurbody){
				if (this._moveCtrl.isPress()){
					if (!role.isMove){
						role.setStandDir(this.getDir(this._autoAngle));
					}
				}
				else{
					if (Stat.loopCount % 5==0){
						var dir=this.getDir(this._autoAngle);
						role.setStandDir(dir);
					}
				}
			}
			if (role.canPlayerAttAni()){
				this._isAttck=false;
			}
		}

		__proto._findUserAngle=function(isPet){
			(isPet===void 0)&& (isPet=false);
			if (!Player.curUser)return 0;
			this._curRadians=(this._autoAngle)% 360;
			var objs=Player.I.getAutoFindArray();
			var self=Player.curUser;
			var minSizeObj=null;
			var angle=NaN;
			var selfx=self.x;
			var selfy=self.y;
			var minSize=100000000;
			var minAngle=360;
			var minAngleObj=null;
			var dx=NaN,dy=NaN;
			var usesz=0;
			for (var i=0,sz=objs.length;i < sz;i++){
				var o=objs[i];
				if (o.isDie)continue ;
				(usesz !=i)&& (objs[usesz]=o);
				usesz++;
				if (o.isHide && !self.bIsInGlass || o.canQX)continue ;
				if (o.isSnow)continue ;
				if (o.self===0 || o.selfTeam===0)continue ;
				if (o.destroyed || o.isInvincible)continue ;
				dx=o.x-selfx;
				dy=o.y-selfy;
				var len=dx *dx+dy *dy;
				if (len < minSize){
					minSize=len;
					minSizeObj=o;
				}
			}
			(usesz !=objs.length)&& (objs.length=usesz);
			var img=self.attackCircle;
			var mino=minSizeObj;
			if (!mino){
				!this.isTwo&&img.setVisible(false);
				return this._curRadians;
			};
			var rc=Player.getViewportRect();
			var sfxs=0.5;
			var sfw=0;
			var sfh=0
			if (mino.x > rc.right+sfw || mino.y > rc.bottom+sfh || (mino.x+mino.width)< rc.x-sfw || (mino.y+mino.height)< rc.y-sfh){
				!this.isTwo&&img.setVisible(false);
				this._isFindOne=false;
				return this._curRadians;
				}else{
				this._isFindOne=true;
				img.setVisible(true);
			}
			dx=mino.x-selfx;
			dy=mino.y-selfy;
			this._curRadians=Math.atan2(dy,dx)*180 / Math.PI;
			if (this._curRadians < 0)this._curRadians+=360;
			this._curRadians=(0 | (this._curRadians / Rocker.ANGLEDETAL))*Rocker.ANGLEDETAL;
			if (self.isHavePet && this._isFindOne && !(mino).isBear){
				var pet=self.pet;
				dx=mino.x-pet.x;
				dy=mino.y-pet.y;
				this._petAtkAngle=Math.atan2(dy,dx)*180 / Math.PI;
				if (this._petAtkAngle < 0)this._petAtkAngle+=360;
				this._petAtkAngle=(0 | (this._petAtkAngle / Rocker.ANGLEDETAL))*Rocker.ANGLEDETAL;
				}else{
				this._petAtkAngle=-1;
			}
			return this._curRadians;
		}

		/**
		*自动攻击
		*@param img
		*@return
		*/
		__proto.autoAttack=function(img){
			if (!this.attackCtrl.isPress()||!this.isTwo){
				if (Laya.timer.currTimer > this.beforeTime){
					if (Stat.loopCount % 3===0)this._autoAngle=this._findUserAngle();
					if (img && img.getVisible()==false){
						this._autoAngle=this._moveCtrl.isPress()?this._moveCtrl.angle:this._moveCtrl.lastRadians;
					}
					!this.isTwo&&img && img.changeState(2);
				}
				return this._autoAngle;
			}
			else{
				this.beforeTime=Laya.timer.currTimer+150;
				return this.doubleAttack(img);
			}
		}

		//}
		__proto.attach=function(skillid){
			if (!Player.curUser)return;
			var img=Player.curUser.attackCircle;
			var obj=ConfigData.skillCfg[skillid];
			var d=obj.circleRadio;
			this.isTwo=obj.isTwo;
			img.setVisible(true);
			if (this.isTwo){
				if (obj.circleRadio){
					img.init(2,obj);
					return;
				}
				switch(skillid){
					case 65001:
						img.init(3,obj);
						break ;
					case 1170001:
					case 170001:
						break ;
					default :
						img.init(1,obj);
						break ;
					}
			}
		}

		__proto.unattach=function(){
			if (!Player.curUser)return;
			this.isTwo=false;
			var img=Player.curUser.attackCircle;
			img.init(0,null);
		}

		__proto.doubleAttack=function(img){
			if (this.attackCtrl.angle==-1)return this._autoAngle;this.preAngle=this.preAngle|| this.attackCtrl.angle;
			var dangle=this.attackCtrl.angle-this.preAngle;
			this.dobuleAngle=this.attackCtrl.angle;
			this.dobuleAngle=(this.dobuleAngle+360)% 360;
			this._autoAngle=this.dobuleAngle;
			return this.dobuleAngle;
		}

		/**
		*只有主动攻击-自由
		*@param img
		*@return
		*/
		__proto.activeAttack=function(img){
			if (!this.attackCtrl.isPress()||!this.isTwo){
				if (Laya.timer.currTimer > this.beforeTime){
					if (!this.isTwo&&img){
						img.changeState(1);
						img.setVisible(true);
					}
					if (this._moveCtrl.angle==-1){
						this._autoAngle=this._moveCtrl.lastRadians;
						return this._autoAngle;
					}
					this._autoAngle=this._moveCtrl.angle;
				}
				return this._autoAngle;
			}
			else{
				this.beforeTime=Laya.timer.currTimer+150;
				return this.doubleAttack(img);
			}
		}

		/**
		*自动和主动切换-半自动
		*@param img
		*@return
		*/
		__proto.mixAttack=function(img){
			if (!this.attackCtrl.isPress()||!this.isTwo){
				if (Laya.timer.currTimer <=this.beforeTime){
					return this._autoAngle;
				}
				if (!this._moveCtrl.isPress()){
					if (Stat.loopCount % 3===0){
						this._autoAngle=this._findUserAngle();
						!this.isTwo&&img &&img.changeState(2);
					}
					return this._autoAngle;
				}
				this.beforeTime=Laya.timer.currTimer+150;
				if (this._moveCtrl.angle==-1){
					return this._autoAngle;
				}
				if (!this.isTwo && img){
					img.setVisible(true);
					img.changeState(1);
				}
				this._autoAngle=this._moveCtrl.angle;
				return this._autoAngle;
			}
			else{
				this.beforeTime=Laya.timer.currTimer+150;
				return this.doubleAttack(img);
			}
		}

		__proto.realAtack=function(){
			if (!Player.curUser || Player.curUser.destroyed)return;
			this._attck();
		}

		__proto.checkInvicible=function(){
			if (Player.curUser.isInvincible){
				Player.curUser.showQiPao("护盾期间无法攻击",2000);
				return true;
			}
			return false;
		}

		__proto._stopMove=function(){
			this._moveCtrl.radians=-1;
			this.sendMoveData();
		}

		/**普通攻击*/
		__proto._attck=function(){
			this._isAttck=true;
			this._stopMove();
			this.beforeTime=Laya.timer.currTimer+150;
			Player.curUser.animeAttck(this.getAtckDir());
		}

		/**
		*遥控子弹用的
		*@param a 基准角度-子弹的初始角度
		*@param b 目标角度-最新的摇杆角度
		*@return true为+，false为-
		*/
		__proto.chkAB=function(a,b){
			if ((a > 180 && b > 180)|| a < 180 && b < 180)return !!(b-a);
			else return !(b-a);
		}

		__proto.sendMoveData=function(){
			if (!this.__mouseEnabled)return;
			this.moveAngle=this._moveCtrl.angle;
			var me=Player.curUser;
			if (!me || !this.__mouseEnabled)return;
			if (me.nNotCanMove)this.moveAngle=-1;
			if (this._isAttck || this.moveAngle==-1){
				this.moveAngle=-1;
				me.stopMove();
				}else{
				MsgManager.startMoveMyself(me,this._moveCtrl.angle);
			}
			if ((this.moveAngle !=this._lastMoveAngle)){
				this._lastMoveAngle=this.moveAngle;
				this._sendMove();
			}
		}

		__proto._sendMove=function(){
			var user=Player.curUser;
			var angle=this._lastMoveAngle;
			if (!this.moveSelfData){
				this.moveSelfData=MsgTemplate.createWithClass(SMsgUserDeltaMove);
				this.moveSelfData.ref++;
			}
			this.moveSelfData.angle=0|angle;
			this.moveSelfData.x=user.x;
			this.moveSelfData.y=user.y;
			this.moveSelfData.baseTime=CMsgHeartBeatRes.getServerTime(Browser.now())-MsgManager.enterRoomTime;
			var roledy=Math.round(2 / 3 *user.__HH *user.scaleY);
			var time=Collision.I.checkinBox2(this.moveSelfData.x,this.moveSelfData.y,this.moveSelfData.angle,roledy,this.moveSelfData);
			if (time !=0){
				user.path(this.moveSelfData);
			}
			else{
				return false;
			};
			var moveData1=MsgTemplate.createWithClass(CMsgUserDeltaMove);
			moveData1.angle=0 | angle;
			moveData1.deltax=this.moveSelfData.deltax;
			moveData1.deltay=this.moveSelfData.deltay;
			moveData1.x=0 | user.x;
			moveData1.y=0 | user.y;
			moveData1.aiUID=0;
			moveData1.baseTime=CMsgHeartBeatRes.getServerTime(Browser.now());
			GameSocket.sendClientMsg(moveData1);
			moveData1.release();
			return true;
		}

		/**发送宠物精灵攻击消息*/
		__proto.sendPetAtk=function(angle,pet){
			if (angle==-1)return;
			pet.isAtk=true;
			pet.dir=this.getDir(angle);this._petAtkCmd=this._petAtkCmd|| MsgTemplate.createWithClass(CMsgPetAttack);
			this._petAtkCmd.angle=angle;
			SnowUtils.battleMsg.petAttack(this._petAtkCmd);
		}

		/**
		*返回移动控制器
		*/
		__proto.getMoveRocker=function(){
			return this._moveCtrl;
		}

		/**
		*启动控制器
		*<br> 创建主角、引导控制时调用
		*/
		__proto.launch=function(){
			Laya.timer.frameLoop(1,this,this.atckUpdate);
			Laya.timer.loop(16,this,this.sendMoveData);
			this.setMouseEnable(true);
		}

		/**
		*设置移动摇杆参数
		*<br> 在摇杆停止的时候，执行此函数无效果
		*@param i 移动消息发送的频率-默认 16
		*@param j 摇杆精准度-默认 2
		*/
		__proto.setControl=function(i,j){
			(i===void 0)&& (i=16);
			(j===void 0)&& (j=2);
			if (!this.__mouseEnabled)return;
			Rocker.ANGLEDETAL=j;
			Laya.timer.loop(i,this,this.sendMoveData);
		}

		/**
		*停止控制器--游戏结束、角色死亡、断线重连时调用
		*/
		__proto.stopCtrl=function(){
			Laya.timer.clear(this,this.atckUpdate);
			this.stopMove();
		}

		/**
		*强行设置可以走
		*/
		__proto.forceMove=function(){
			this._isAttck=false;
		}

		/**清除重置移动相关参数*/
		__proto.stopMove=function(){
			Laya.timer.clear(this,this.sendMoveData);
			Player.I.mapScale(1.4);
			Player.I.setIndex(0);
			this._moveCtrl.clearRocker();
			this._isAttck=false;
			this._lastMoveAngle=-1;
			this.setMouseEnable(false)
		}

		/**
		*移动的八个方向
		*八方向顺时针
		*/
		__proto.getMoveDir=function(){
			var angle=this._moveCtrl.angle;
			angle+=22.5;
			angle %=360;
			return 0|(angle / 15);
		}

		/**
		*攻击的八方向
		*八方向顺时针
		*/
		__proto.getAtckDir=function(){
			var angle=NaN;{
				angle=this._getAttckAngle();
			}
			angle+=22.5;
			angle %=360;
			return 0|(angle / 45);
		}

		/**
		*根据角度获取 方向
		*@param angle
		*@return
		*/
		__proto.getDir=function(angle){
			angle+=22.5;
			angle %=360;
			return 0|(angle / 45);
		}

		__proto.setMouseEnable=function(enable){
			if (enable==false){
				this._moveCtrl.angle=-1;
				this.sendMoveData();
			}
			this.__mouseEnabled=enable;
			this._moveRect && (this._moveRect.mouseEnabled=enable);
		}

		GameController.checkinBox=function(x,y,angle,s){
			if (angle==-1){
				s.deltax=s.deltay=0;
				return 1;
			};
			var _netObj=Player.curUser;
			var len=512;
			angle=(angle % 360)*0.017453292519943295;
			var dx=len *Math.cos(angle);
			var dy=len *Math.sin(angle);
			var roledy=2 / 3 *_netObj.__HH *_netObj.scaleY;
			var rolew=_netObj.__WW *_netObj.scaleX;
			var roleh=0.5 *roledy;
			var yb=Collision.I.getTilePostionByRect(x,y+dy / 64+roledy,rolew,roleh);
			var xb=Collision.I.getTilePostionByRect(x+dx / 64,y+roledy,rolew,roleh);
			if (!xb){
				if (yb){
					dx=0;
					s.angle=(dy > 0)?90:270;
				}
				else{
					s.angle=-1;
					return 0;
				}
			}
			else{
				if (!yb){
					dy=0;
					s.angle=(dx > 0)?0:180;
				}
				else{
					var xyb=Collision.I.getTilePostionByRect(x+dx / 64,y+dy / 64+roledy,rolew,roleh);
					if (!xyb){
						s.angle=-1;
						return 0;
					}
				}
			}
			for (var i=2;i <=64;i++){
				var tx=x+dx / 64 *i;
				var ty=y+dy / 64 *i;
				if(!Collision.I.getTilePostionByRect(tx,ty+roledy,rolew,roleh)){
					s.deltax=(i-1)*dx / 64;
					s.deltay=(i-1)*dy / 64;
					return (i-1)*8/Player.curUser.smaxSpeed;
				}
			}
			s.deltax=Math.min(511,dx);
			s.deltay=Math.min(511,dy);
			return 512 / Player.curUser.smaxSpeed;
		}

		GameController.checkinBox1=function(x,y,angle,s){
			if (angle==-1){
				s.deltax=s.deltay=0;
				return 1;
			};
			var _netObj=Player.curUser;
			var len=512;
			angle=(angle % 360)*0.017453292519943295;
			var dx=0|(len *Math.cos(angle)/16);
			var dy=0|(len *Math.sin(angle)/16);
			var roledy=Math.round(2 / 3 *_netObj.__HH *_netObj.scaleY);
			var rolew=Math.round(_netObj.__WW *_netObj.scaleX);
			var roleh=Math.round(1 / 3 *_netObj.__HH *_netObj.scaleY);
			var point=Point.TEMP;
			var yb=Collision.I.getTileLessGrid(x,y+roledy,rolew,roleh,0,dy,point);
			var yy=point.y;
			var xb=Collision.I.getTileLessGrid(x ,y+roledy,rolew,roleh,dx ,0,point);
			var xx=point.x;
			var predx=0;
			var predy=0;
			var xi=1;
			if (!xb || !yb){
				if (!xb){
					if (xx==0){
						if (yb){
							dx=0;
							s.angle=(dy > 0)?90:270;
							predx=0;
							predy=dy;
							xi=2;
							console.log("x轴碰了都碰了");
						}
						else if(yy==0){
							s.angle=-1;
							return 0;
						}
					}
					else{
						xi=1;
					}
				}
				else{
					if (!yb&&yy==0){
						dy=0;
						s.angle=(dx > 0)?0:180;
						predx=dx;
						predy=0;
						xi=2;
					}
				}
				xi=1;
			}
			else{
				var xyb=Collision.I.getTilePostionByRect(x+dx,y+dy+roledy,rolew,roleh);
				if (!xyb)
					xi=1;
				else
				xi=2;
			}
			for (var i=xi;i <=16;i++){
				if(!Collision.I.getTileLessGrid(x+predx,y+roledy+predy,rolew,roleh,dx,dy,point)){
					predx+=point.x;
					predy+=point.y;
					s.deltax=predx;
					s.deltay=predy;
					console.log(">>>>>>>>>>>>>>>>>>>>>>>>>>>x:"+(s.x+s.deltax)+">>>>>>>>>>>>>>>>>y:"+(s.y+s.deltay));
					if (s.deltax==0&&s.deltay==0){
						console.log(">>>>>>>>>>>>>>>>>> dx:"+s.deltax+">>>>>>>>dy:"+s.deltay);
						return 0;
					}
					else
					return 1;
				}
				else{
					predx+=dx;
					predy+=dy;
				}
			}
			s.deltax=Math.min(511,predx);
			s.deltay=Math.min(511,predy);
			return 512 / Player.curUser.smaxSpeed;
		}

		GameController.AUTOTIME=150;
		GameController.petAttackFrequency=0;
		return GameController;
	})(Sprite)


	/**
	*...
	*@author ww
	*/
	//class effect.MoveShadowEffect extends laya.display.Sprite
	var MoveShadowEffect=(function(_super){
		function MoveShadowEffect(){
			this.tex=null;
			this.effectContainer=null;
			this.times=[100,200,300,400];
			this.posList=[];
			this.tPropDic={};
			MoveShadowEffect.__super.call(this);
		}

		__class(MoveShadowEffect,'effect.MoveShadowEffect',_super);
		var __proto=MoveShadowEffect.prototype;
		/**
		*
		*@param startX
		*@param startY
		*@param tarX
		*@param tarY
		*@param time
		*
		*/
		__proto.move=function(startX,startY,tarX,tarY,time){
			(time===void 0)&& (time=400);
			this.effectContainer.addChild(this);
			Tween.clearAll(this.posList);
			var i=0,len=0;
			len=this.times.length;
			var tX=0,tY=0;
			var complete;
			var rate=NaN;
			rate=time / this.times[this.times.length-1];
			for (i=0;i < len;i++){
				tX=i*2;
				tY=tX+1;
				this.posList[tX]=startX;
				this.posList[tY]=startY;
				if (i==len-1){
					complete=Handler.create(this,this.moveEnd);
				};
				var tPropO;
				if (!this.tPropDic[i])this.tPropDic[i]={};
				tPropO=this.tPropDic[i];
				tPropO[tX]=tarX;
				tPropO[tY]=tarY;
				Tween.to(this.posList,tPropO,this.times[i]*rate,null,complete);
			}
		}

		__proto.moveEnd=function(){
			this.removeSelf();
		}

		__proto.render=function(context,x,y){
			this.graphics.clear();
			var i=0,len=0;
			len=this.times.length;
			var tX=0,tY=0;
			for (i=0;i < len;i++){
				tX=i*2;
				tY=tX+1;
				this.graphics.drawTexture(this.tex,this.posList[tX],this.posList[tY]);
			}
			_super.prototype.render.call(this,context,x,y);
		}

		return MoveShadowEffect;
	})(Sprite)


	/**
	*脚印类
	*@author xz
	*/
	//class effect.TrailImages extends laya.display.Sprite
	var TrailImages=(function(_super){
		var JYCLASS;
		function TrailImages(){
			this._tmp=[];
			this.activeTime=500;
			this.delayTime=50;
			this.jy1Tex=null;
			this.jy2Tex=null;
			this._prX=0;
			this._prY=0;
			this._count=0;
			this._jy1=new Array;
			this._jy2=new Array;
			TrailImages.__super.call(this);
			for(var i=0;i<11;i++)
			this._tmp[i]=[];
		}

		__class(TrailImages,'effect.TrailImages',_super);
		var __proto=TrailImages.prototype;
		/**
		*添加脚印
		*@param viewRect 剪裁视角区域
		*@param x 世界X坐标信息
		*@param y 世界Y坐标信息
		*@param type 脚印类型
		*/
		__proto.addJY=function(viewRect,x,y,type){
			if(this._count>0){
				var jd=Math.atan2(y-this._prY,x-this._prX);
				if(this._count%2==0){
					jd+=Math.PI/2;;
				}
				else jd-=Math.PI/2;
				x+=Math.cos(jd)*8;
				y+=Math.sin(jd)*8;
				this._prX=x;
				this._prY=y;
			}
			this._count++;
			if(type==1)
				this._jy1.push(new JYCLASS(x,y,type));
			else
			this._jy2.push(new JYCLASS(x,y,type));
		}

		/**
		*自定义渲染函数
		*@param context
		*@param x
		*@param y
		*@param data 脚印的
		*@param tex 脚印文理数组对象池
		*/
		__proto._render=function(context,data,tex){
			var tm=Laya.timer.currTimer;
			var alpha=0;
			var jy;
			var i=0,s=0;
			var tmpPos;
			var rect=this.scrollRect;
			var left=rect.x;
			var top=rect.y;
			var right=rect.right;
			var bottom=rect.bottom;
			var nx=NaN,ny=NaN;
			this.graphics.clear();
			for(i=0;i<11;i++){
				this._tmp[i]._length=0;
			};
			var activeCount=0;
			for(i=0,s=data.length;i<s;i++){
				jy=data[i];
				alpha=Math.floor(((tm-jy.createTm-this.activeTime)/this.delayTime));
				if(alpha>10)
					continue ;
				if(alpha<0)alpha=0;
				if ((nx=jy.x)< right && nx > left && (ny=jy.y)< bottom && ny > top){
					tmpPos=this._tmp[alpha];
					tmpPos[tmpPos._length++]=jy.x;
					tmpPos[tmpPos._length++]=jy.y;
				}
				data[activeCount++]=jy;
			}
			if(activeCount<data.length)data.length=activeCount;
			for(i=0;i<10;i++){
				var pos=this._tmp[i];
				pos.length=pos._length;
				if(pos.length && tex && tex[i] && tex[i].loaded){
					this.graphics.drawTextures(tex[i],pos);
				}
			}
		}

		__proto.render=function(context,x,y){
			if(this._jy1.length)
				this._render(context,this._jy1,this.jy1Tex);
			if(this._jy2.length)
				this._render(context,this._jy2,this.jy2Tex);
			_super.prototype.render.call(this,context,x,y);
		}

		TrailImages.__init$=function(){
			//class JYCLASS
			JYCLASS=(function(){
				function JYCLASS(x,y,type){
					this.x=0;
					this.y=0;
					this.type=0;
					this.createTm=NaN;
					this.x=x;
					this.y=y;
					this.type=type;
					this.createTm=Laya.timer.currTimer;
				}
				__class(JYCLASS,'');
				return JYCLASS;
			})()
		}

		return TrailImages;
	})(Sprite)


	/**
	*<p>动画播放基类，提供了基础的动画播放控制方法和帧标签事件相关功能。</p>
	*<p>可以继承此类，但不要直接实例化此类，因为有些方法需要由子类实现。</p>
	*/
	//class laya.display.AnimationPlayerBase extends laya.display.Sprite
	var AnimationPlayerBase=(function(_super){
		function AnimationPlayerBase(){
			this.loop=false;
			this.wrapMode=0;
			this._index=0;
			this._count=0;
			this._isPlaying=false;
			this._labels=null;
			this._isReverse=false;
			this._frameRateChanged=false;
			this._controlNode=null;
			this._actionName=null;
			AnimationPlayerBase.__super.call(this);
			this._interval=Config.animationInterval;
			this._setUpNoticeType(0x1);
		}

		__class(AnimationPlayerBase,'laya.display.AnimationPlayerBase',_super);
		var __proto=AnimationPlayerBase.prototype;
		/**
		*<p>开始播放动画。play(...)方法被设计为在创建实例后的任何时候都可以被调用，当相应的资源加载完毕、调用动画帧填充方法(set frames)或者将实例显示在舞台上时，会判断是否正在播放中，如果是，则进行播放。</p>
		*<p>配合wrapMode属性，可设置动画播放顺序类型。</p>
		*@param start （可选）指定动画播放开始的索引(int)或帧标签(String)。帧标签可以通过addLabel(...)和removeLabel(...)进行添加和删除。
		*@param loop （可选）是否循环播放。
		*@param name （可选）动画名称。
		*/
		__proto.play=function(start,loop,name){
			(start===void 0)&& (start=0);
			(loop===void 0)&& (loop=true);
			(name===void 0)&& (name="");
			this._isPlaying=true;
			this.index=((typeof start=='string'))? this._getFrameByLabel(start):start;
			this.loop=loop;
			this._actionName=name;
			this._isReverse=this.wrapMode==1;
			if (this.interval > 0){
				this.timerLoop(this.interval,this,this._frameLoop,null,true,true);
			}
		}

		/**@private */
		__proto._getFrameByLabel=function(label){
			var i=0;
			for (i=0;i < this._count;i++){
				if (this._labels[i] && (this._labels [i]).indexOf(label)>=0)return i;
			}
			return 0;
		}

		/**@private */
		__proto._frameLoop=function(){
			if (this._isReverse){
				this._index--;
				if (this._index < 0){
					if (this.loop){
						if (this.wrapMode==2){
							this._index=this._count > 0 ? 1 :0;
							this._isReverse=false;
							}else {
							this._index=this._count-1;
						}
						this.event("complete");
						}else {
						this._index=0;
						this.stop();
						this.event("complete");
						return;
					}
				}
				}else {
				this._index++;
				if (this._index >=this._count){
					if (this.loop){
						if (this.wrapMode==2){
							this._index=this._count-2 >=0 ? this._count-2 :0;
							this._isReverse=true;
							}else {
							this._index=0;
						}
						this.event("complete");
						}else {
						this._index--;
						this.stop();
						this.event("complete");
						return;
					}
				}
			}
			this.index=this._index;
		}

		/**@private */
		__proto._setControlNode=function(node){
			if (this._controlNode){
				this._controlNode.off("display",this,this._checkResumePlaying);
				this._controlNode.off("undisplay",this,this._checkResumePlaying);
			}
			this._controlNode=node;
			if (node && node !=this){
				node.on("display",this,this._checkResumePlaying);
				node.on("undisplay",this,this._checkResumePlaying);
			}
		}

		/**@private */
		__proto._setDisplay=function(value){
			_super.prototype._setDisplay.call(this,value);
			this._checkResumePlaying();
		}

		/**@private */
		__proto._checkResumePlaying=function(){
			if (this._isPlaying){
				if (this._controlNode.displayedInStage)this.play(this._index,this.loop,this._actionName);
				else this.clearTimer(this,this._frameLoop);
			}
		}

		/**
		*停止动画播放。
		*/
		__proto.stop=function(){
			this._isPlaying=false;
			this.clearTimer(this,this._frameLoop);
		}

		/**
		*增加一个帧标签到指定索引的帧上。当动画播放到此索引的帧时会派发Event.LABEL事件，派发事件是在完成当前帧画面更新之后。
		*@param label 帧标签名称
		*@param index 帧索引
		*/
		__proto.addLabel=function(label,index){
			if (!this._labels)this._labels={};
			if (!this._labels[index])this._labels[index]=[];
			this._labels[index].push(label);
		}

		/**
		*删除指定的帧标签。
		*@param label 帧标签名称。注意：如果为空，则删除所有帧标签！
		*/
		__proto.removeLabel=function(label){
			if (!label)this._labels=null;
			else if (this._labels){
				for (var name in this._labels){
					this._removeLabelFromLabelList(this._labels[name],label);
				}
			}
		}

		/**@private */
		__proto._removeLabelFromLabelList=function(list,label){
			if (!list)return;
			for (var i=list.length-1;i >=0;i--){
				if (list[i]==label){
					list.splice(i,1);
				}
			}
		}

		/**
		*将动画切换到指定帧并停在那里。
		*@param position 帧索引或帧标签
		*/
		__proto.gotoAndStop=function(position){
			this.index=((typeof position=='string'))? this._getFrameByLabel(position):position;
			this.stop();
		}

		/**
		*@private
		*显示到某帧
		*@param value 帧索引
		*/
		__proto._displayToIndex=function(value){}
		/**
		*停止动画播放，并清理对象属性。之后可存入对象池，方便对象复用。
		*/
		__proto.clear=function(){
			this.stop();
			this._labels=null;
		}

		/**
		*<p>动画播放的帧间隔时间(单位：毫秒)。默认值依赖于Config.animationInterval=50，通过Config.animationInterval可以修改默认帧间隔时间。</p>
		*<p>要想为某动画设置独立的帧间隔时间，可以使用set interval，注意：如果动画正在播放，设置后会重置帧循环定时器的起始时间为当前时间，也就是说，如果频繁设置interval，会导致动画帧更新的时间间隔会比预想的要慢，甚至不更新。</p>
		*/
		__getset(0,__proto,'interval',function(){
			return this._interval;
			},function(value){
			if (this._interval !=value){
				this._frameRateChanged=true;
				this._interval=value;
				if (this._isPlaying && value > 0){
					this.timerLoop(value,this,this._frameLoop,null,true,true);
				}
			}
		});

		/**
		*是否正在播放中。
		*/
		__getset(0,__proto,'isPlaying',function(){
			return this._isPlaying;
		});

		/**
		*动画当前帧的索引。
		*/
		__getset(0,__proto,'index',function(){
			return this._index;
			},function(value){
			this._index=value;
			this._displayToIndex(value);
			if (this._labels && this._labels[value]){
				var tArr=this._labels[value];
				for (var i=0,len=tArr.length;i < len;i++){
					this.event("label",tArr[i]);
				}
			}
		});

		/**
		*当前动画中帧的总数。
		*/
		__getset(0,__proto,'count',function(){
			return this._count;
		});

		AnimationPlayerBase.WRAP_POSITIVE=0;
		AnimationPlayerBase.WRAP_REVERSE=1;
		AnimationPlayerBase.WRAP_PINGPONG=2;
		return AnimationPlayerBase;
	})(Sprite)


	/**
	*<code>Component</code> 是ui控件类的基类。
	*<p>生命周期：preinitialize > createChildren > initialize > 组件构造函数</p>
	*/
	//class laya.ui.Component extends laya.display.Sprite
	var Component=(function(_super){
		function Component(){
			this._comXml=null;
			this._dataSource=null;
			this._toolTip=null;
			this._tag=null;
			this._disabled=false;
			this._gray=false;
			this.layoutEnabled=true;
			Component.__super.call(this);
			this._layout=LayoutStyle.EMPTY;
			this.preinitialize();
			this.createChildren();
			this.initialize();
		}

		__class(Component,'laya.ui.Component',_super);
		var __proto=Component.prototype;
		Laya.imps(__proto,{"laya.ui.IComponent":true})
		/**@inheritDoc */
		__proto.destroy=function(destroyChild){
			(destroyChild===void 0)&& (destroyChild=true);
			_super.prototype.destroy.call(this,destroyChild);
			this._dataSource=this._layout=null;
			this._tag=null;
			this._toolTip=null;
		}

		/**
		*<p>预初始化。</p>
		*@internal 子类可在此函数内设置、修改属性默认值
		*/
		__proto.preinitialize=function(){}
		/**
		*<p>创建并添加控件子节点。</p>
		*@internal 子类可在此函数内创建并添加子节点。
		*/
		__proto.createChildren=function(){}
		/**
		*<p>控件初始化。</p>
		*@internal 在此子对象已被创建，可以对子对象进行修改。
		*/
		__proto.initialize=function(){}
		/**
		*<p>延迟运行指定的函数。</p>
		*<p>在控件被显示在屏幕之前调用，一般用于延迟计算数据。</p>
		*@param method 要执行的函数的名称。例如，functionName。
		*@param args 传递给 <code>method</code> 函数的可选参数列表。
		*
		*@see #runCallLater()
		*/
		__proto.callLater=function(method,args){
			Laya.timer.callLater(this,method,args);
		}

		/**
		*<p>如果有需要延迟调用的函数（通过 <code>callLater</code> 函数设置），则立即执行延迟调用函数。</p>
		*@param method 要执行的函数名称。例如，functionName。
		*@see #callLater()
		*/
		__proto.runCallLater=function(method){
			Laya.timer.runCallLater(this,method);
		}

		/**
		*<p>立即执行影响宽高度量的延迟调用函数。</p>
		*@internal <p>使用 <code>runCallLater</code> 函数，立即执行影响宽高度量的延迟运行函数(使用 <code>callLater</code> 设置延迟执行函数)。</p>
		*@see #callLater()
		*@see #runCallLater()
		*/
		__proto.commitMeasure=function(){}
		/**
		*<p>重新调整对象的大小。</p>
		*/
		__proto.changeSize=function(){
			this.event("resize");
		}

		/**
		*@private
		*<p>获取对象的布局样式。</p>
		*/
		__proto.getLayout=function(){
			this._layout===LayoutStyle.EMPTY && (this._layout=new LayoutStyle());
			return this._layout;
		}

		/**
		*@private
		*<p>指定对象是否可使用布局。</p>
		*<p>如果值为true,则此对象可以使用布局样式，否则不使用布局样式。</p>
		*@param value 一个 Boolean 值，指定对象是否可使用布局。
		*/
		__proto._setLayoutEnabled=function(value){
			if (this._layout && this._layout.enable !=value){
				this._layout.enable=value;
				this.on("added",this,this.onAdded);
				this.on("removed",this,this.onRemoved);
				if (this.parent){
					this.onAdded();
				}
			}
		}

		/**
		*对象从显示列表移除的事件侦听处理函数。
		*/
		__proto.onRemoved=function(){
			this.parent.off("resize",this,this.onCompResize);
		}

		/**
		*对象被添加到显示列表的事件侦听处理函数。
		*/
		__proto.onAdded=function(){
			this.parent.on("resize",this,this.onCompResize);
			this.resetLayoutX();
			this.resetLayoutY();
		}

		/**
		*父容器的 <code>Event.RESIZE</code> 事件侦听处理函数。
		*/
		__proto.onCompResize=function(){
			if (this._layout && this._layout.enable){
				this.resetLayoutX();
				this.resetLayoutY();
			}
		}

		/**
		*<p>重置对象的 <code>X</code> 轴（水平方向）布局。</p>
		*/
		__proto.resetLayoutX=function(){
			var layout=this._layout;
			if (!isNaN(layout.anchorX))this.pivotX=layout.anchorX *this.width;
			if (!this.layoutEnabled)return;
			var parent=this.parent;
			if (parent){
				if (!isNaN(layout.centerX)){
					this.x=Math.round((parent.width-this.displayWidth)*0.5+layout.centerX+this.pivotX *this.scaleX);
					}else if (!isNaN(layout.left)){
					this.x=Math.round(layout.left+this.pivotX *this.scaleX);
					if (!isNaN(layout.right)){
						this.width=(parent._width-layout.left-layout.right)/ (this.scaleX || 0.01);
					}
					}else if (!isNaN(layout.right)){
					this.x=Math.round(parent.width-this.displayWidth-layout.right+this.pivotX *this.scaleX);
				}
			}
		}

		/**
		*<p>重置对象的 <code>Y</code> 轴（垂直方向）布局。</p>
		*/
		__proto.resetLayoutY=function(){
			var layout=this._layout;
			if (!isNaN(layout.anchorY))this.pivotY=layout.anchorY *this.height;
			if (!this.layoutEnabled)return;
			var parent=this.parent;
			if (parent){
				if (!isNaN(layout.centerY)){
					this.y=Math.round((parent.height-this.displayHeight)*0.5+layout.centerY+this.pivotY *this.scaleY);
					}else if (!isNaN(layout.top)){
					this.y=Math.round(layout.top+this.pivotY *this.scaleY);
					if (!isNaN(layout.bottom)){
						this.height=(parent._height-layout.top-layout.bottom)/ (this.scaleY || 0.01);
					}
					}else if (!isNaN(layout.bottom)){
					this.y=Math.round(parent.height-this.displayHeight-layout.bottom+this.pivotY *this.scaleY);
				}
			}
		}

		/**
		*对象的 <code>Event.MOUSE_OVER</code> 事件侦听处理函数。
		*/
		__proto.onMouseOver=function(e){
			Laya.stage.event("showtip",this._toolTip);
		}

		/**
		*对象的 <code>Event.MOUSE_OUT</code> 事件侦听处理函数。
		*/
		__proto.onMouseOut=function(e){
			Laya.stage.event("hidetip",this._toolTip);
		}

		/**
		*<p>对象的显示宽度（以像素为单位）。</p>
		*/
		__getset(0,__proto,'displayWidth',function(){
			return this.width *this.scaleX;
		});

		/**
		*<p>表示显示对象的宽度，以像素为单位。</p>
		*<p><b>注：</b>当值为0时，宽度为自适应大小。</p>
		*/
		__getset(0,__proto,'width',function(){
			if (this._width)return this._width;
			return this.measureWidth;
			},function(value){
			if (this._width !=value){
				this._width=value;
				this.conchModel && this.conchModel.size(this._width,this._height);
				this.callLater(this.changeSize);
				if (this._layout.enable && (!isNaN(this._layout.centerX)|| !isNaN(this._layout.right)|| !isNaN(this._layout.anchorX)))this.resetLayoutX();
			}
		});

		/**
		*<p>显示对象的实际显示区域宽度（以像素为单位）。</p>
		*/
		__getset(0,__proto,'measureWidth',function(){
			var max=0;
			this.commitMeasure();
			for (var i=this.numChildren-1;i >-1;i--){
				var comp=this.getChildAt(i);
				if (comp.visible){
					max=Math.max(comp.x+comp.width *comp.scaleX,max);
				}
			}
			return max;
		});

		/**
		*<p>对象的显示高度（以像素为单位）。</p>
		*/
		__getset(0,__proto,'displayHeight',function(){
			return this.height *this.scaleY;
		});

		/**
		*<p>表示显示对象的高度，以像素为单位。</p>
		*<p><b>注：</b>当值为0时，高度为自适应大小。</p>
		*/
		__getset(0,__proto,'height',function(){
			if (this._height)return this._height;
			return this.measureHeight;
			},function(value){
			if (this._height !=value){
				this._height=value;
				this.conchModel && this.conchModel.size(this._width,this._height);
				this.callLater(this.changeSize);
				if (this._layout.enable && (!isNaN(this._layout.centerY)|| !isNaN(this._layout.bottom)|| !isNaN(this._layout.anchorY)))this.resetLayoutY();
			}
		});

		/**
		*<p>数据赋值，通过对UI赋值来控制UI显示逻辑。</p>
		*<p>简单赋值会更改组件的默认属性，使用大括号可以指定组件的任意属性进行赋值。</p>
		*@example
		//默认属性赋值
		dataSource={label1:"改变了label",checkbox1:true};//(更改了label1的text属性值，更改checkbox1的selected属性)。
		//任意属性赋值
		dataSource={label2:{text:"改变了label",size:14},checkbox2:{selected:true,x:10}};
		*/
		__getset(0,__proto,'dataSource',function(){
			return this._dataSource;
			},function(value){
			this._dataSource=value;
			for (var prop in this._dataSource){
				if (this.hasOwnProperty(prop)&& !((typeof (this[prop])=='function'))){
					this[prop]=this._dataSource[prop];
				}
			}
		});

		/**@inheritDoc */
		__getset(0,__proto,'scaleY',_super.prototype._$get_scaleY,function(value){
			if (_super.prototype._$get_scaleY.call(this)!=value){
				_super.prototype._$set_scaleY.call(this,value);
				this.callLater(this.changeSize);
				this._layout.enable && this.resetLayoutY();
			}
		});

		/**
		*<p>显示对象的实际显示区域高度（以像素为单位）。</p>
		*/
		__getset(0,__proto,'measureHeight',function(){
			var max=0;
			this.commitMeasure();
			for (var i=this.numChildren-1;i >-1;i--){
				var comp=this.getChildAt(i);
				if (comp.visible){
					max=Math.max(comp.y+comp.height *comp.scaleY,max);
				}
			}
			return max;
		});

		/**@inheritDoc */
		__getset(0,__proto,'scaleX',_super.prototype._$get_scaleX,function(value){
			if (_super.prototype._$get_scaleX.call(this)!=value){
				_super.prototype._$set_scaleX.call(this,value);
				this.callLater(this.changeSize);
				this._layout.enable && this.resetLayoutX();
			}
		});

		/**
		*<p>从组件顶边到其内容区域顶边之间的垂直距离（以像素为单位）。</p>
		*/
		__getset(0,__proto,'top',function(){
			return this._layout.top;
			},function(value){
			if (value !=this._layout.top){
				this.getLayout().top=value;
				this._setLayoutEnabled(true);
			}
			this.resetLayoutY();
		});

		/**
		*<p>从组件底边到其内容区域底边之间的垂直距离（以像素为单位）。</p>
		*/
		__getset(0,__proto,'bottom',function(){
			return this._layout.bottom;
			},function(value){
			if (value !=this._layout.bottom){
				this.getLayout().bottom=value;
				this._setLayoutEnabled(true);
			}
			this.resetLayoutY();
		});

		/**
		*<p>从组件左边到其内容区域左边之间的水平距离（以像素为单位）。</p>
		*/
		__getset(0,__proto,'left',function(){
			return this._layout.left;
			},function(value){
			if (value !=this._layout.left){
				this.getLayout().left=value;
				this._setLayoutEnabled(true);
			}
			this.resetLayoutX();
		});

		/**
		*<p>从组件右边到其内容区域右边之间的水平距离（以像素为单位）。</p>
		*/
		__getset(0,__proto,'right',function(){
			return this._layout.right;
			},function(value){
			if (value !=this._layout.right){
				this.getLayout().right=value;
				this._setLayoutEnabled(true);
			}
			this.resetLayoutX();
		});

		/**
		*<p>在父容器中，此对象的水平方向中轴线与父容器的水平方向中心线的距离（以像素为单位）。</p>
		*/
		__getset(0,__proto,'centerX',function(){
			return this._layout.centerX;
			},function(value){
			if (value !=this._layout.centerX){
				this.getLayout().centerX=value;
				this._setLayoutEnabled(true);
			}
			this.resetLayoutX();
		});

		/**
		*<p>在父容器中，此对象的垂直方向中轴线与父容器的垂直方向中心线的距离（以像素为单位）。</p>
		*/
		__getset(0,__proto,'centerY',function(){
			return this._layout.centerY;
			},function(value){
			if (value !=this._layout.centerY){
				this.getLayout().centerY=value;
				this._setLayoutEnabled(true);
			}
			this.resetLayoutY();
		});

		/**X轴锚点，值为0-1*/
		__getset(0,__proto,'anchorX',function(){
			return this._layout.anchorX;
			},function(value){
			if (value !=this._layout.anchorX){
				this.getLayout().anchorX=value;
				this._setLayoutEnabled(true);
			}
			this.resetLayoutX();
		});

		/**Y轴锚点，值为0-1*/
		__getset(0,__proto,'anchorY',function(){
			return this._layout.anchorY;
			},function(value){
			if (value !=this._layout.anchorY){
				this.getLayout().anchorY=value;
				this._setLayoutEnabled(true);
			}
			this.resetLayoutY();
		});

		/**
		*<p>对象的标签。</p>
		*@internal 冗余字段，可以用来储存数据。
		*/
		__getset(0,__proto,'tag',function(){
			return this._tag;
			},function(value){
			this._tag=value;
		});

		/**
		*<p>鼠标悬停提示。</p>
		*<p>可以赋值为文本 <code>String</code> 或函数 <code>Handler</code> ，用来实现自定义样式的鼠标提示和参数携带等。</p>
		*@example
		*private var _testTips:TestTipsUI=new TestTipsUI();
		*private function testTips():void {
			//简单鼠标提示
			*btn2.toolTip="这里是鼠标提示&lt;b&gt;粗体&lt;/b&gt;&lt;br&gt;换行";
			//自定义的鼠标提示
			*btn1.toolTip=showTips1;
			//带参数的自定义鼠标提示
			*clip.toolTip=new Handler(this,showTips2,["clip"]);
			*}
		*private function showTips1():void {
			*_testTips.label.text="这里是按钮["+btn1.label+"]";
			*tip.addChild(_testTips);
			*}
		*private function showTips2(name:String):void {
			*_testTips.label.text="这里是"+name;
			*tip.addChild(_testTips);
			*}
		*/
		__getset(0,__proto,'toolTip',function(){
			return this._toolTip;
			},function(value){
			if (this._toolTip !=value){
				this._toolTip=value;
				if (value !=null){
					this.on("mouseover",this,this.onMouseOver);
					this.on("mouseout",this,this.onMouseOut);
					}else {
					this.off("mouseover",this,this.onMouseOver);
					this.off("mouseout",this,this.onMouseOut);
				}
			}
		});

		/**
		*XML 数据。
		*/
		__getset(0,__proto,'comXml',function(){
			return this._comXml;
			},function(value){
			this._comXml=value;
		});

		/**是否变灰。*/
		__getset(0,__proto,'gray',function(){
			return this._gray;
			},function(value){
			if (value!==this._gray){
				this._gray=value;
				UIUtils.gray(this,value);
			}
		});

		/**是否禁用页面，设置为true后，会变灰并且禁用鼠标。*/
		__getset(0,__proto,'disabled',function(){
			return this._disabled;
			},function(value){
			if (value!==this._disabled){
				this.gray=this._disabled=value;
				this.mouseEnabled=!value;
			}
		});

		return Component;
	})(Sprite)


	//class laya8.client.player.NetObject extends laya.display.Sprite
	var NetObject=(function(_super){
		function NetObject(uid){
			this.pushUpdates=false;
			this._classid=0;
			this.poolID=null;
			this._uid=0;
			this.type_=null;
			this.itemid=0;
			this.tiledGid=0;
			this._viewSprite=null;
			this._path=null;
			this._sourceID=0;
			this._hp=0;
			this._maxHp=0;
			this._level=0;
			this._inview=true;
			this._cfgElement=null;
			this._jifen=0;
			this.__WW=NaN;
			this.__HH=NaN;
			this.hasPath=false;
			NetObject.__super.call(this);
			this.self=1;
			this._lifeCycle=0;
			this._uid=uid;
		}

		__class(NetObject,'laya8.client.player.NetObject',_super);
		var __proto=NetObject.prototype;
		Laya.imps(__proto,{"laya8.client.player.IViewCenter":true})
		/**
		*设置参数
		*@param cfg
		*/
		__proto.setCfg=function(cfg){
			this._cfgElement=cfg;
			if (cfg.scale && cfg.scale !=1)this.scale(cfg.scale,cfg.scale,true);
		}

		//角色和子弹使用
		__proto.firstInView=function(){
			if (!this._inview){
				var x=this._x;
				var y=this._y;
				var rc=Player.getViewportRect();
				if (x > rc.right || y > rc.bottom || (x+this._width)< rc.x || (y+this._height)< rc.y)return false;
				this._inview=true;
				this.onFirstInView();
			}
			return true;
		}

		__proto.onFirstInView=function(){}
		/**将对象添加到帧循环处理*/
		__proto.enableUpdate=function(){
			if (this.pushUpdates)return;
			this.pushUpdates=true;
			Player.I.addToUpdateArray(this);
		}

		/**碰撞宽高*/
		__proto._size=function(_w,_h){
			this.__WW=_w;
			this.__HH=_h;
		}

		/**
		*创建纹理对象
		*@param data 服务器传过来的json数据
		*/
		__proto.createView=function(sourceID,group){
			var source=SourceLib.getSource(sourceID,2,group);
			if (source.className==""){
			}
			else{
				if (!this._viewSprite){
					this._viewSprite=SourceLib.newWithLib(source,sourceID,2,group);
					var item=Player.getObjByGid(this.tiledGid);
					if (item && item.tex){
						var tex=this._viewSprite.texture=item.tex;
						this._viewSprite.size(tex.width,tex.height);
						this.setSize();
					}
					else{
						this._viewSprite.loadCompHandler=Handler.create(this,this.setSize);
						this._viewSprite.loadImg();
					}
				}
				else{
					this.setSize();
				}
				this.addChild(this._viewSprite);
			}
			this._sourceID=sourceID;
		}

		/**
		*刷新Texture
		*/
		__proto.refreshTex=function(){}
		__proto.setSize=function(){
			if (this._classid !=4 && this._classid !=6){
				var cfg=ConfigData.elementData[this.itemid];
				this._zOrder=this.y+(cfg.zOrder ? cfg.zOrder :this._viewSprite.height);
			}
			this.size(this._viewSprite.width,this._viewSprite.height);
		}

		/**
		*创建血条
		*/
		__proto.createHPBar=function(){}
		/**
		*显示浮动文本
		*/
		__proto.showFloatText=function(content,color){}
		__proto.pross=function(floatText){
			if (this.destroyed){
				Tween.clearAll(floatText);
				this.recoverFloatText(floatText);
			}
		}

		/**
		*回收浮动文字
		*/
		__proto.recoverFloatText=function(floatText){
			floatText.removeSelf();
			Pool.recover("Text",floatText);
			floatText=null;
		}

		/**
		*设置轨迹对象
		*@param data 服务器传过来的json数据
		*/
		__proto.path=function(data){
			if (!data){
				console.log("data == null");
				return;
			}
			if (this._path==null){
				if (!data.pathID){
					console.log("data.pathID == null");
					return;
				}
				this.enableUpdate();
				this.hasPath=true;
				var key="Path:"+data.pathID;
				var pool=Pool.getItem(key);
				this._path=pool || SourceLib.newWithLib(null,data.pathID,3,null);
				this._path.poolId=key;
				this._path.launching(data,this);
				}else {
				this._path.resetData(data);
			}
		}

		/**
		*获取轨迹对象
		*/
		__proto.getPath=function(){
			return this._path;
		}

		// 状态更新
		__proto.update=function(frameStep){
			if (!this.pushUpdates)return;
			if (this.hasPath && this._path){
				if (this._path.moveStep(frameStep)){
					if (this._lifeCycle==1){
						Player.I.removeNetObj(this._uid,this);
						return;
					}
				}
			}
		}

		__proto.recover=function(){
			if (this._path && this._path.poolId){
				this._path.serverData.release&&this._path.serverData.release();
				this._path.serverData=null;
				this._path._netObj=null;
				Pool.recover(this._path.poolId,this._path);
				this._path=null;
			}else this._path=null;
			this.hasPath=false;
			this.pushUpdates=false;
			this._lifeCycle=0;
			this.scale(1,1);
		}

		__proto.destroy=function(destroyChild){
			(destroyChild===void 0)&& (destroyChild=true);
			this.recover();
			this.destroyed=true;
			if (this.chkNoRemove()){
				this.visible=false;return;
			}
			this.removeSelf();
			this.poolID && Pool.recover(this.poolID,this);
			(!this.poolID || !this.poolID.length)&& _super.prototype.destroy.call(this,destroyChild);
		}

		/**游戏结束的时候将所有对象回收*/
		__proto.spDestory=function(){
			this.destroy();
			if (this.chkNoRemove()){
				this.removeSelf();
				this.poolID && Pool.recover(this.poolID,this);
			}
		}

		/**检测场景中 由 Mapdata.json 配置而来的元素 是否被移出显示列表
		*<br> 战斗中 被吃，被打死 时不会被移出显示列表，只会被隐藏
		*<br> 战斗结束后， 调用 spDestory 时，才会被移出显示列表，并且回收
		**/
		__proto.chkNoRemove=function(){
			if (this._classid==4 || this._classid==6
				|| this._classid==9 || this._classid==10)
			return true;
			return false;
		}

		__proto.updatePath=function(t){
			if (this.hasPath && this._path)
				this._path.moveStep(t);
		}

		__getset(0,__proto,'maxHp',function(){
			return this._maxHp;
			},function(n){
			this._maxHp=n;
		});

		__getset(0,__proto,'visible',_super.prototype._$get_visible,function(value){
			_super.prototype._$set_visible.call(this,value);
		});

		/*
		*唯一标识id
		*/
		__getset(0,__proto,'uid',function(){
			return this._uid;
			},function(value){
			this._uid=value;
		});

		/**
		*等级
		*/
		__getset(0,__proto,'level',function(){
			return this._level;
			},function(level){
			this._level=level;
		});

		/**
		*HP
		*/
		__getset(0,__proto,'hp',function(){
			return this._hp;
			},function(hp){
			this._hp=hp;
			if (this._hp > this._maxHp){
				this._hp=this._maxHp;
			}
		});

		/**
		*雪量
		*/
		__getset(0,__proto,'jifen',function(){
			return this._jifen;
			},function(i){
			if (i !=this._jifen&&i!=undefined){
				this._jifen=i;
			}
		});

		/**
		*<p>对象的显示宽度（以像素为单位）。</p>
		*/
		__getset(0,__proto,'displayWidth',function(){
			return this.width *this.scaleX;
		});

		/*
		*生命周期
		*/
		__getset(0,__proto,'lifeCycle',function(){
			return this._lifeCycle;
			},function(value){
			this._lifeCycle=value;
		});

		/**
		*<p>对象的显示高度（以像素为单位）。</p>
		*/
		__getset(0,__proto,'displayHeight',function(){
			return this.height *this.scaleY;
		});

		/*INTERFACE laya8.client.player.IViewCenter */
		__getset(0,__proto,'bulletAngleInHurt',function(){
			return-1;
		});

		/**
		*是否销毁 实现IViewCenter
		*/
		__getset(0,__proto,'isDestroyed',function(){
			return this.destroyed;
		});

		return NetObject;
	})(Sprite)


	/**
	*...
	*@author luohuantao
	*/
	//class laya8.client.player.game.RoleTopView extends laya.display.Sprite
	var RoleTopView=(function(_super){
		function RoleTopView(){
			this._started=false;
			this.isShow=true;
			this.currentB=0;
			this.perB=NaN;
			RoleTopView.__super.call(this);
			this.customRenderEnable=true;
		}

		__class(RoleTopView,'laya8.client.player.game.RoleTopView',_super);
		var __proto=RoleTopView.prototype;
		/**每次开始执行*/
		__proto.start=function(){
			this.currentB=0;
			this._started=true;
		}

		/**恢复状态 结束执行 */
		__proto.resetState=function(){
			this.currentB=0;
			this._started=false;
		}

		__proto.hide=function(){
			this.isShow=false;
		}

		__proto.show=function(){
			this.isShow=true;
		}

		__proto.updateCurrentB=function(preHp,hp){}
		RoleTopView._drawImgX=function(ctx,tex,x,y,srcWidth,decWidth){
			tex.source;
			var preWidth=tex.uv[4]-tex.uv[0];
			tex.uv[4]=tex.uv[2]=tex.uv[0]+preWidth*srcWidth;
			ctx.drawTexture(tex,x,y,decWidth,tex.height,0,0);
			tex.uv[4]=tex.uv[2]=tex.uv[0]+preWidth;
		}

		RoleTopView._drawImgT=function(ctx,tex,x,y,srcHeight,decHeight,h){
			tex.source;
			var preHeight=tex.uv[7]-tex.uv[1];
			tex.uv[3]=tex.uv[1]=tex.uv[7]-preHeight *srcHeight;
			ctx.drawTexture(tex,x,y,h,decHeight,-h/2,-h/2);
			tex.uv[3]=tex.uv[1]=tex.uv[7]-preHeight;
		}

		RoleTopView._drawImgB=function(ctx,tex,x,y,srcHeight,decHeight,h){
			tex.source;
			var preHeight=tex.uv[1]-tex.uv[7];
			tex.uv[7]=tex.uv[5]=tex.uv[1]-preHeight *srcHeight;
			ctx.drawTexture(tex,x,y,h,decHeight,-h/2,-h/2);
			tex.uv[7]=tex.uv[5]=tex.uv[1]-preHeight;
		}

		RoleTopView.fillImageText=function(ctx,tex,num,x,y,tx,ty){
			tex.source;
			var uv=tex.uv;
			var preWidth=uv[2]-uv[0];
			var sx=uv[0];
			var plen=tex.sourceWidth / 10;
			if (num < 10){
				var lv=NaN;
				var w=NaN;
				if (num==0){
					lv=0;
					w=(plen-tex.offsetX);
				}
				else if (num==9){
					lv=(plen *num-tex.offsetX)/ tex.width;
					w=(plen-(tex.sourceWidth-tex.width-tex.offsetX));
				}
				else{
					lv=(plen *num-tex.offsetX)/ tex.width;
					w=plen;
				}
				uv[0]=uv[6]=sx+lv *preWidth;
				uv[2]=uv[4]=uv[0]+w / tex.width *preWidth;
				ctx.drawTexture(tex,x,y,w,tex.height,tx,ty);
				uv[0]=uv[6]=sx;
				uv[2]=uv[4]=sx+preWidth;
			}
			else{
				var ten=Math.floor(num / 10);
				var gewei=num % 10;
				uv[0]=uv[6]=sx+ten *0.1 *preWidth;
				uv[2]=uv[4]=uv[0]+0.1 *preWidth;
				ctx.drawTexture(tex,x-4,y,0.1 *tex.width,tex.height,tx,ty);
				uv[0]=uv[6]=sx+gewei *0.1 *preWidth;
				uv[2]=uv[4]=uv[0]+0.1 *preWidth;
				ctx.drawTexture(tex,x+4,y,0.1 *tex.width,tex.height,tx,ty);
				uv[0]=uv[6]=sx;
				uv[2]=uv[4]=sx+preWidth;
			}
		}

		RoleTopView.barbottom=null
		return RoleTopView;
	})(Sprite)


	/**
	*...
	*@author luohuantao
	*/
	//class laya8.client.player.game.EffectBase extends laya.display.Sprite
	var EffectBase=(function(_super){
		function EffectBase(){
			this._aniState=null;
			this._ower=null;
			this.state=0;
			this.vo=null;
			this._aniKey=null;
			this._isPool=false;
			this.inview=false;
			EffectBase.__super.call(this);
		}

		__class(EffectBase,'laya8.client.player.game.EffectBase',_super);
		var __proto=EffectBase.prototype;
		/**初始化*/
		__proto.init=function(key,ower,bIsRender,atlas){
			(bIsRender===void 0)&& (bIsRender=true);
			this._ower=ower
			this._aniKey=key;
			this._isPool=false;
			this.state=0;
		}

		/**创建动画*/
		__proto.createView=function(){}
		/**重置动画*/
		__proto.reset=function(){}
		/**更新*/
		__proto.update=function(t){}
		return EffectBase;
	})(Sprite)


	/**
	*...
	*@author lisa
	*/
	//class laya8.client.player.game.EffectPool extends laya.display.Sprite
	var EffectPool=(function(_super){
		function EffectPool(){
			this.bombArr=[];
			EffectPool.__super.call(this);
		}

		__class(EffectPool,'laya8.client.player.game.EffectPool',_super);
		var __proto=EffectPool.prototype;
		/**
		*从对象池获取特效动画-积分互换 连线 效果
		*<br> 仅仅是创建对象，需要自己 回收，添加到舞台，设置坐标等
		*@return EffectScoreExchangeAni
		*/
		__proto.getEffectScoreExchangeAni=function(hitRole,beHitRole){
			var eO=Pool.getItemByClass("ScoreExchangeAni",EffectScoreExchangeAni);
			eO.setUsers(hitRole,beHitRole);
			eO.init("ScoreExchangeAni");
			this.bombArr.push(eO);
			return eO;
		}

		/**
		*从对象池获取特效动画--只播一次就会回收
		*<br> 仅支持由ide创建的动画
		*@param aniName enumEffectType 枚举
		*@param tx 特效添加坐标X
		*@param ty 特效添加坐标Y
		*@param tagte 特效添加层级
		*/
		__proto.createEffectAniByIDE=function(aniName,tx,ty,tagte,ower,atals){
			var eA=Pool.getItemByClass(aniName,EffectAni);
			eA.init(aniName,ower,true,atals);
			eA.pos(tx,ty);
			tagte.addChild(eA);
			this.bombArr.push(eA);
			return eA;
		}

		/**
		*从对象池获取特效动画--播放多次
		*<br> 仅支持由ide创建的动画
		*@param aniName enumEffectType 枚举
		*@param tx 特效添加坐标X
		*@param ty 特效添加坐标Y
		*@param tagte 特效添加层级
		*/
		__proto.createEffectAniByIDELoop=function(aniName,tx,ty,tagte,ower,atals){
			var eA=Pool.getItemByClass(aniName,EffectAni);
			eA.init(aniName,ower,true,atals);
			eA.pos(tx,ty);
			tagte.addChild(eA);
			return eA;
		}

		/**
		*从对象池获取特效动画--只播一次就会回收
		*@param aniName enumEffectType 枚举
		*@param tx 特效添加坐标X
		*@param ty 特效添加坐标Y
		*@param tagte 特效添加层级
		*/
		__proto.createEffectAni=function(aniName,tx,ty,tagte,ower){
			var eO=Pool.getItemByClass(aniName,EffectObject);
			eO.init(aniName,ower,false);
			eO._setXY(tx,ty);
			tagte.addChild(eO);
			this.bombArr.push(eO);
			return eO;
		}

		/**从对象池获取特效动画--无限播放，需要自己手动回收
		*@param aniName enumEffectType 枚举
		*@return EffectObject
		*/
		__proto.createSingleEffectAni=function(aniName){
			var eO=Pool.getItemByClass(aniName,EffectObject);
			eO.init(aniName);
			return eO;
		}

		__proto.update=function(t){
			var eO;
			var usesz=0;
			for (var i=0,sz=this.bombArr.length;i < sz;i++){
				if (!(eO=this.bombArr[i]))continue ;
				if (eO.state==2){
					this.bombArr[i]=null;
					eO.reset();
				}
				else {
					eO.update(t);
					(usesz !=i)&& (this.bombArr[usesz]=eO);
					usesz++;
					if (eO.state==2)eO.visible=false;
				}
			}
			(sz !=this.bombArr.length)&& (usesz+=this.bombArr.length-sz);
			(usesz !=this.bombArr.length)&& (this.bombArr.length=usesz);
		}

		/**回收全部的特效*/
		__proto.removeObj=function(){
			var eO;
			for (var i=0,sz=this.bombArr.length;i < sz;i++){
				if (!(eO=this.bombArr[i]))continue ;
				this.bombArr[i]=null;
				eO.reset();
			}
		}

		/**
		*闪烁代码,
		*@param sprite 显示对象
		*@param time 闪烁次数
		*@param interval 闪烁每次间隔
		*
		*/
		__proto.alphaChange=function(sprite,time,interval){
			sprite.showTime=time;
			sprite.timer.loop(interval,this,this.alphaChangeCop,[sprite,interval]);
		}

		__proto.alphaChangeCop=function(sprite,interval){
			var time=sprite.showTime;
			if(time<=0){
				sprite.clearTimer(this,this.alphaChangeCop);
				Tween.clearTween(sprite);
				return;
			}
			if(time%2==0){
				Tween.to(sprite,{alpha:0.3},interval);
				}else{
				Tween.to(sprite,{alpha:1},interval);
			}
			time--;
			sprite.showTime=time;
		}

		/**
		*创建静态实例
		*@return
		*/
		__getset(1,EffectPool,'I',function(){
			if(!EffectPool._instance)EffectPool._instance=new EffectPool();
			return EffectPool._instance;
		},laya.display.Sprite._$SET_I);

		EffectPool._instance=null
		return EffectPool;
	})(Sprite)


	/**
	*...
	*@author asanwu
	*/
	//class laya8.client.player.rocker.Rocker extends laya.display.Sprite
	var Rocker=(function(_super){
		function Rocker(touchRect){
			this.baseRocket=null;
			this.base_width=200;
			this.base_height=200;
			this.knobRocket=null;
			this.knob_width=95;
			this.knob_height=95;
			this.rockerAlpha=0.5;
			this.type=1;
			this._angle=0;
			this._radians=-1;
			this._direction=-1;
			this._elastic=true;
			this._localDeltaX=0;
			this._localDeltaY=0;
			this._deltaX=0;
			this.baseX=0;
			this.baseY=0;
			this._deltaY=0;
			this.lastRadians=0;
			this.isAttack=false;
			this._touchRect=null;
			this._offsetX=0;
			this._touchState=-1;
			this._unmoverange=2;
			this._touchId=-1;
			this._touchIndex=0;
			this._mouseMoveAccuracy=8;
			this._touchIDArr=[];
			this.stoped=false;
			this._beginPos=new Point();
			Rocker.__super.call(this);
			this._offsetX=UIMgr.chazhi;
			this.loadImg();
			if (touchRect){
				this._touchRect=touchRect;
				this._touchRect.on("mousedown",this,this.onTouchBegan);
			}
		}

		__class(Rocker,'laya8.client.player.rocker.Rocker',_super);
		var __proto=Rocker.prototype;
		//private var txtE:Label ;
		__proto.initRocker=function(){
			this.stage.on("mousemove",this,this.onTouchMove);
		}

		//攻击时，双摇杆专用函数
		__proto.changeTouchRect=function(newSp){
			if (this._touchRect !=newSp){
				if (this._touchRect){
					this._touchRect.off("mousedown",this,this.onTouchBegan);
				}
				this._touchRect=newSp;
				this._touchRect.on("mousedown",this,this.onTouchBegan);
			}
		}

		//攻击时，双摇杆专用函数
		__proto.offEvent=function(){
			this._touchRect&&this._touchRect.off("mousedown",this,this.onTouchBegan);
		}

		__proto.isPress=function(){
			return this._touchState==1 || this._touchState==2;
		}

		__proto.loadImg=function(){
			this.baseRocket=new Sprite();
			this.baseRocket.loadImage("res/rocker/control_base.png");
			this.baseRocket.pivot(this.base_width/2,this.base_height/2);
			this.baseRocket.alpha=this.rockerAlpha;
			this.addChild(this.baseRocket);
			this.knobRocket=new Sprite();
			this.knobRocket.loadImage("res/rocker/control_knob.png");
			this.knobRocket.pivot(this.knob_width/2,this.knob_height/2);
			this.knobRocket.pos(this.base_width/2,this.base_height/2);
			this.baseRocket.addChild(this.knobRocket);
		}

		__proto.onTouchBegan=function(e){
			if (this.stoped)return;
			if (System.ISMOBILE){
				this._touchId=e.touchId;
				if(this._touchIDArr.indexOf(this._touchId)==-1)
					this._touchIDArr.push(this._touchId);
			}
			this._touchState=1;
			this._beginPos.x=Laya.stage.mouseX-this._offsetX;
			this._beginPos.y=Laya.stage.mouseY;
			this.stage.on("mouseup",this,this.onTouchEnd);
			this._elastic=true;
			if (this.type==0){
				this.stage.on("mousemove",this,this.onTouchMove);
				}else{
				this.baseRocket.visible=true;
				if (this.name=="_attackCtrl"){
					var b=e.target.parent;
					if (b){
						this.pos(b.x+(b).offx,b.y+(b).offy);
					}
					else{
						this.pos(this._beginPos.x,this._beginPos.y);
					}
				}
				else{
					var bx=this._beginPos.x;
					var by=this._beginPos.y;
					var dx=bx-this.baseX;
					var dy=by-this.baseY;
					if (dx *dx+dy *dy < 10000){
						this.pos(this.baseX,this.baseY);
					}
					else{
						this._angle=Math.atan2(dy,dx)*57.29577951;
						if (this._angle < 0)this._angle+=360;
						this._radians=Math.PI / 180 *this._angle;
						var x=Math.floor(Math.cos(this._radians)*this.base_width/2);
						var y=Math.floor(Math.sin(this._radians)*this.base_height/2);
						this.pos(bx-x,by-y);
					}
				}
				this.stage.on("mousemove",this,this.onTouchMove);
			};
			var lx=NaN,ly=NaN;
			lx=this._beginPos.x-this.x+this.baseRocket.pivotX;
			ly=this._beginPos.y-this.y+this.baseRocket.pivotY;
			this._localDeltaX=lx-this.base_width / 2;
			this._localDeltaY=ly-this.base_height / 2;
			var _sqx=this._localDeltaX *this._localDeltaX;
			var _sqy=this._localDeltaY *this._localDeltaY;
			if (this._elastic && Math.abs(this._localDeltaX)<=this._mouseMoveAccuracy && Math.abs(this._localDeltaY)<=this._mouseMoveAccuracy){
				this._radians=-1;
				return;
			}
			this._deltaX=this._localDeltaX;
			this._deltaY=this._localDeltaY;
			this._angle=Math.atan2(this._localDeltaY,this._localDeltaX)*57.29577951;
			if (this._angle < 0)this._angle+=360;
			this._radians=Math.PI / 180 *this._angle;
			var _dis=this.base_width / 2+20;
			if (_sqy+_sqx >=_dis *_dis){
				x=Math.floor(Math.cos(this._radians)*_dis+this.base_width / 2);
				y=Math.floor(Math.sin(this._radians)*_dis+this.base_width / 2);
				this.knobRocket.pos(x,y);
				}else{
				this.knobRocket.pos(lx,ly);
			}
		}

		__proto.onTouchMove=function(e){
			if (this.stoped)return;
			if (System.ISMOBILE && this._touchId==-1){
				if(!this.isAttack && e.stageX<=this._touchRect.width)this.onTouchBegan(e);
				return;
			}
			else if (!System.ISMOBILE&&!e.nativeEvent.buttons){
				return;
			}
			if (!System.ISMOBILE || (this._touchId==e.touchId)){
				this._touchState=2;
				var touchPosX=Laya.stage.mouseX-this._offsetX;
				var touchPosY=Laya.stage.mouseY;
				var lx=NaN,ly=NaN;
				var halfW=this.base_width / 2;
				var halfH=this.base_height / 2;
				if (Math.abs(touchPosX-this._beginPos.x)<=this._unmoverange && Math.abs(touchPosY-this._beginPos.y)<=this._unmoverange)
					return;
				lx=touchPosX-this.x+this.baseRocket.pivotX;
				ly=touchPosY-this.y+this.baseRocket.pivotY;
				this._localDeltaX=lx-halfW;
				this._localDeltaY=ly-halfH;
				if (this._elastic && Math.abs(this._localDeltaX)<=this._mouseMoveAccuracy && Math.abs(this._localDeltaY)<=this._mouseMoveAccuracy){
					this._radians=-1;
					return;
				};
				var _sqx=this._localDeltaX *this._localDeltaX;
				var _sqy=this._localDeltaY *this._localDeltaY;
				this._deltaX=this._localDeltaX;
				this._deltaY=this._localDeltaY;
				this._elastic=false;
				this._angle=Math.atan2(this._localDeltaY,this._localDeltaX)*57.29577951;
				if (this._angle < 0)this._angle+=360;
				this._radians=Math.PI / 180 *this._angle;
				var _dis=this.base_width / 2+20;
				if (_sqy+_sqx >=_dis *_dis){
					lx=0 | (Math.cos(this._radians)*_dis+halfW);
					ly=0 | (Math.sin(this._radians)*_dis+halfW);
				}
				this.knobRocket.pos(lx,ly,true);
			}
		}

		//}
		__proto.getRadiu=function(){{
				var r=Math.sqrt(this._deltaX *this._deltaX+this._deltaY *this._deltaY);
				return Math.min(r,120);
			}
		}

		//}
		__proto.onTouchEnd=function(e){
			if (System.ISMOBILE&&e.touches && e.touches.length){
				var index=this._touchIDArr.indexOf(e.touchId);
				if (index==-1)return;
				this._touchIDArr.splice(index,1);
				if(this._touchIDArr.length){
					this._touchId=-1;
					this._touchState=3;
					this.knobRocket.pos(this.base_width/2,this.base_height/2);
					return;
				}
			}
			else{
				this._touchIDArr.length=0;
			}
			if (!this.isAttack && e.stageX > this._touchRect.width)
				return;
			if (!System.ISMOBILE || (this._touchId==e.touchId)){
				this._touchId=-1;
				this._touchState=3;
				this.stage.off("mousemove",this,this.onTouchMove);
				this.stage.off("mouseout",this,this.onTouchCancel);
				this.stage.off("mouseup",this,this.onTouchEnd);
				if (this.name=="_moveCtrl"){
					this.pos(this.baseX,this.baseY);
				}
				this.knobRocket.pos(this.base_width/2,this.base_height/2);
				if (this.type==1){}
					this._direction=-1;
				this.lastRadians=this.angle;
				this._radians=-1;
				this._angle=-1;
				if (this.isAttack)this._touchRect.event("skill",e);
				this._deltaX=0;
				this._deltaY=0;
			}
		}

		//alert("end");
		__proto.onTouchCancel=function(e){
			if (!System.ISMOBILE || (this._touchId==e.touchId)){
				this._touchId=-1;
				this._touchState=0;
				this.stage.off("mousemove",this,this.onTouchMove);
				this.stage.off("mouseout",this,this.onTouchCancel);
				this.stage.off("mouseup",this,this.onTouchEnd);
				if (this.name=="_moveCtrl"){
					this.pos(this.baseX,this.baseY);
				}
				this.knobRocket.pos(this.base_width/2,this.base_height/2);
				if (this.type==1){}
					this._direction=-1;
				this._radians=-1;
				this._angle=-1;
				this._touchRect.event("skill",e);
				this._deltaX=0;
				this._deltaY=0;
			}
		}

		//alert("out");
		__proto.setStoped=function(value){
			this.stoped=value;
		}

		__proto.clearRocker=function(){
			this._angle=-1;
			this._direction=-1;
			this._radians=-1;
			this._deltaX=0;
			this._deltaY=0;
			this.angle=-1;
			this._touchState=-1;
			this._touchIDArr.length=0;
			this.stage.off("mousemove",this,this.onTouchMove);
			this.stage.off("mouseout",this,this.onTouchCancel);
			this.stage.off("mouseup",this,this.onTouchEnd);
			if (this.name=="_moveCtrl"){
				this.stage.on("mousemove",this,this.onTouchMove);
			}
			this.knobRocket.pos(this.base_width/2,this.base_height/2);
		}

		/**弧度*/
		__getset(0,__proto,'radians',function(){
			return this._radians;
			},function(value){
			this._radians=value;
		});

		/**角度*/
		__getset(0,__proto,'angle',function(){
			if(PropTreasureObject.fxFlag)
				return this._angle==-1?-1:(0|((this._angle+180)/ Rocker.ANGLEDETAL))*Rocker.ANGLEDETAL;
			else
			return this._angle==-1?-1:(0|(this._angle / Rocker.ANGLEDETAL))*Rocker.ANGLEDETAL;
			},function(value){
			this._angle=value;
		});

		/**根据 _deltaX _deltaY计算角度--一般情况下与angle结果一致，但是新需求，停止时会导致angle为-1。此时使用此函数即可获得正确的摇杆角度*/
		__getset(0,__proto,'deltaAngle',function(){
			var a_angle=Math.atan2(this._deltaX,this._deltaY)*57.29577951;
			if (a_angle < 0)a_angle+=360;
			return a_angle==-1?-1:Math.round(a_angle / Rocker.ANGLEDETAL)*Rocker.ANGLEDETAL;
		});

		Rocker.TOUCH_NONE=-1;
		Rocker.TOUCH_OUT=0;
		Rocker.TOUCH_DOWN=1;
		Rocker.TOUCH_MOVE=2;
		Rocker.TOUCH_UP=3;
		Rocker.ctr_base="res/rocker/control_base.png";
		Rocker.ctr_knob="res/rocker/control_knob.png";
		Rocker.ANGLEDETAL=2;
		return Rocker;
	})(Sprite)


	/**
	*...
	*@author
	*/
	//class laya8.client.player.special.TwinsSprite extends laya.display.Sprite
	var TwinsSprite=(function(_super){
		function TwinsSprite(){
			this.oneSp=null;
			this.daojishi=null;
			this.canshow=false;
			TwinsSprite.__super.call(this);
		}

		__class(TwinsSprite,'laya8.client.player.special.TwinsSprite',_super);
		var __proto=TwinsSprite.prototype;
		/**
		*添加镜像精灵
		*@param sp
		*/
		__proto.addone=function(sp){
			this.oneSp=sp;
		}

		__proto.showTime=function(count,m,s){
			this.initFontClip(m+":"+s);
			if (this.canshow==true){
				this.canshow=false;
			}
		}

		__proto.initFontClip=function(count){
			if (!this.daojishi){
				this.daojishi=new FontClip("gaming/fontclip_djsz.png");
				this.daojishi.sheet="0123456789:";
				this.daojishi.clipX=11;
				this.daojishi.clipY=1;
			}
			this.daojishi.value=count;
		}

		__proto.showSnow=function(sp){
			this.canshow=true;
			this.oneSp=sp;
		}

		__proto.clear=function(){
			this.removeSelf();
		}

		__proto.render=function(context,x,y){
			Stat.spriteCount+=1;
			this._renderType &=~0x800;
			_super.prototype.render.call(this,context,x,y);
			this._onPrePaint2(context,x,y);
		}

		__proto._onPrePaint2=function(context,x,y){
			if (this.oneSp&&this.canshow){
				this.oneSp.scaleX=1;
				this.oneSp.render(context,x,y);
				this.oneSp.scaleX=-1;
				this.oneSp.render(context,x+this.oneSp.width*2,y);
			}
			else if (!this.canshow && this.daojishi){
				this.daojishi.render(context,x+300,y);
			}
		}

		return TwinsSprite;
	})(Sprite)


	//class laya8.client.player.view.ViewImg extends laya.display.Sprite
	var ViewImg=(function(_super){
		function ViewImg(){
			this._url=null;
			this.poolID=null;
			this.loadCompHandler=null;
			ViewImg.__super.call(this);
		}

		__class(ViewImg,'laya8.client.player.view.ViewImg',_super);
		var __proto=ViewImg.prototype;
		__proto.init=function(url){
			this._url=url;
		}

		__proto.loadImg=function(){
			if (this._url.indexOf("#")==-1){
				SnowLoad.I.load(this._url,Handler.create(this,this.onCompleteLoad));
			}
			else this.onCompleteLoad(true);
		}

		__proto.onCompleteLoad=function(isOk){
			if (this.destroyed || !isOk)return;
			if (this._url.indexOf("#")==-1){
				this.texture=Laya.loader.getRes(this._url);
				this.size(this.texture.width,this.texture.height);
				}else{
				this.graphics.clear();
				this.graphics.drawRect(0,0,1280,720,this._url);
				this.size(1280,720);
			}
			this.loadCompHandler && this.loadCompHandler.runWith([this.width,this.height]);
		}

		ViewImg.__W=1280;
		ViewImg.__H=720;
		return ViewImg;
	})(Sprite)


	/**
	*使用一个 graphics 绘制 单一纹理
	*@author luohuantao
	*/
	//class laya8.client.player.ViewFlySnow extends laya.display.Sprite
	var ViewFlySnow=(function(_super){
		function ViewFlySnow(){
			this._pos=[];
			this._childArr=[];
			this._childTxtArr=[];
			this._delArr=[];
			this.___texture___=null;
			this.i=0;
			this.j=0;
			this.objn={n:0};
			ViewFlySnow.__super.call(this);
		}

		__class(ViewFlySnow,'laya8.client.player.ViewFlySnow',_super);
		var __proto=ViewFlySnow.prototype;
		__proto.init=function(url){
			this._pos.length=0;
			this._delArr.length=0;
			this.___texture___=Laya.loader.getRes(url);
			if (!this.___texture___){
				this.___texture___=new Texture();
				this.___texture___.load(url);
			}
			this.timer.frameLoop(1,this,this._onPrePaint2);
		}

		__proto.removeSelf=function(){
			this.timer.clear(this,this._onPrePaint2);
			this._pos.length=0;
			this._delArr.length=0;
			return laya.display.Node.prototype.removeSelf.call(this);
		}

		__proto.render=function(context,x,y){
			Stat.spriteCount+=1;
			this._renderType &=~0x800;
			_super.prototype.render.call(this,context,x,y);
		}

		__proto.recoverFlySnowImg=function(arr){
			var fs;
			while (arr.length){
				fs=arr.shift();
				fs.recover();
			}
		}

		__proto.addChildFlySnowImg=function(node){
			if (this.destroyed || node.parent===this)return;
			(node)._zOrder=0;
			node.parent=this;
			if (node.txt)this._childTxtArr.push(node);
			else this._childArr.push(node);
		}

		__proto._onPrePaint2=function(){
			if (!Player.curUser){
				this.recoverFlySnowImg(this._childArr);
				this.recoverFlySnowImg(this._delArr);
				return;
			}
			if (!this.___texture___.loaded)return;
			if (!this._childArr.length && !this._childTxtArr.length)return;
			var role=Player.curUser;
			var rolePo=role.getCenterPo();
			this.objn.n=0;
			var fs;
			var usesz=0;
			if (this._childArr.length){
				for (this.i=0,this.j=this._childArr.length;this.i < this.j;this.i++){
					fs=this._childArr[this.i];
					if (fs.parent && this.addRender(rolePo,fs,this.objn)){
						(usesz !=this.i)&& (this._childArr[usesz]=fs);
						usesz++;
						}else{
						this._delArr.push(fs);
					}
				}
				(this.j !=this._childArr.length)&& (usesz+=this._childArr.length-this.j);
				(usesz !=this._childArr.length)&& (this._childArr.length=usesz);
			}
			this._pos.length=this.objn.n;
			usesz=0;
			if (this._childTxtArr.length){
				for (this.i=0,this.j=this._childTxtArr.length;this.i < this.j;this.i++){
					fs=this._childTxtArr[this.i];
					if (fs.parent && this.addRender(rolePo,fs)){
						(usesz !=this.i)&& (this._childTxtArr[usesz]=fs);
						usesz++;
						}else{
						this._delArr.push(fs);
					}
				}
				(this.j !=this._childTxtArr.length)&& (usesz+=this._childTxtArr.length-this.j);
				(usesz !=this._childTxtArr.length)&& (this._childTxtArr.length=usesz);
			}
			role.recoverCenterPo(rolePo);
			if(this._delArr.length)this.recoverFlySnowImg(this._delArr);
			if (this.___texture___ && (this.objn.n>1 || usesz)){
				if (usesz){
					this.graphics.clear();
				}
				if (this.graphics._one){
					return;
				}
				else{
					this.graphics.drawTextures(this.___texture___,this._pos);
					usesz && this.drawTxtChildren();
				}
			}
			else this.graphics.clear();
		}

		__proto.addRender=function(rolePo,fs,objn){
			if (fs.isCanMove){
				var usedTimer=this.timer.currTimer-fs.startTimer-0;
				if (usedTimer < 0)return false;
				if (usedTimer >=500)return false;
				var expoIn=(usedTimer==0)? 0 :Math.pow(2,10 *(usedTimer / 500-1))-0.001;
				var ratio=usedTimer > 0 ? expoIn :0;
				fs.x+=(ratio *(rolePo.x-15-fs.x));
				fs.y+=(ratio *(rolePo.y-fs.y));
				if (!objn){
					fs.scale+=(ratio *(0.1-fs.scale));
				}
			}
			if (objn){
				this._pos[objn.n++]=fs.x;
				this._pos[objn.n++]=fs.y;
			}
			return true;
		}

		__proto.drawTxtChildren=function(){
			var len=this._childTxtArr.length;
			var fs;
			while (--len>=0){
				fs=this._childTxtArr [len];
				if (fs){
					var t=fs.txt;
					if (!t)continue ;
					var scale=fs.scale;
					this.graphics.drawTexture(t,fs.x,fs.y,t.width *scale,t.height *scale,null);
				}
			}
		}

		ViewFlySnow.durationTime=500;
		return ViewFlySnow;
	})(Sprite)


	/**
	*使用一个 graphics 绘制 单一纹理
	*@author luohuantao
	*/
	//class laya8.client.player.ViewImages extends laya.display.Sprite
	var ViewImages=(function(_super){
		var ViewImageRect;
		function ViewImages(){
			this._pos=[];
			this._viewNum=0;
			this._rects=[];
			this.___texture___=null;
			this._delingSnows=[];
			ViewImages.__super.call(this);
		}

		__class(ViewImages,'laya8.client.player.ViewImages',_super);
		var __proto=ViewImages.prototype;
		__proto.init=function(url){
			this._pos=[];
			this._viewNum=0;
			this._rects=[];
			this._delingSnows.length=0;
			this.___texture___=Laya.loader.getRes(url);
			if (!this.___texture___){
				this.___texture___=new Texture();
				this.___texture___.load(url);
			}
			this.timer.frameLoop(3,this,this._onPrePaint2);
		}

		__proto._getIndex=function(x,y){
			var ws=Math.floor(this.width / 160)+1;
			x=Math.floor(x / 160);
			y=Math.floor(y / 160);
			(x >=ws)&& (x=ws-1);
			var index=(x < 0?0:x)+ws *(y < 0?0:y);
			if (this._rects.length <=index)this._rects.length=index+1;
			return this._rects[index]=this._rects[index]|| new ViewImageRect();
		}

		__proto.removeSelf=function(){
			this.timer.clear(this,this._onPrePaint2);
			this._rects.length=0;
			this._rects=[];
			this._pos.length=0;
			this._delingSnows.length=0;
			return laya.display.Node.prototype.removeSelf.call(this);
		}

		__proto.render=function(context,x,y){
			Stat.spriteCount+=1;
			this._renderType &=~0x800;
			_super.prototype.render.call(this,context,x,y);
		}

		__proto.updateZOrder=function(){}
		__proto.addChild=function(node){
			if (this.destroyed || node.parent===this)return node;
			(node)._zOrder=0;
			node.parent=this;
			this._getIndex(node._x,node._y).items.push(node);
			return node;
		}

		__proto._onPrePaint2=function(){
			if (!this.___texture___.loaded)return;
			var rect=this.scrollRect;
			if (!rect)return;
			var xx=rect.x,yy=rect.y,rr=rect.right,bb=rect.bottom;
			var ws=Math.floor(this.width / 160)+1;
			var left=rect.x <=0 ? 0 :(Math.floor(rect.x/160)-1);
			var top=rect.y <=0 ? 0 :(Math.floor(rect.y/160)-1);
			var bottom=Math.floor(rect.bottom / 160);
			var right=Math.floor(rect.right/160);
			if (left < 0)left=0;
			if (top < 0)top=0;
			if (right >=ws)right=ws-1;
			var viewRect;
			var n=0;
			var ix=0,ynum=0;
			var curTm=Laya.timer.currTimer;
			var dels=this._delingSnows;
			dels.length=0;
			while(top <=bottom){
				if (top < 0)continue ;
				ix=left;
				ynum=ws *top;
				while(ix <=right){
					viewRect=this._rects[ ix+ynum];
					if (viewRect)
						n=viewRect.addRender(this._pos,n,curTm,dels,xx,yy,rr,bb);
					ix++;
				}
				top++;
			}
			this._pos.length=n;
			this._viewNum=n / 2;
			if (this.___texture___ && n>1){
				if (dels.length > 0){
					this.graphics.clear();
					n=dels.length;
					for (ix=0;ix < n;ix++){
						var o=dels[ix];
						var al=1-(curTm-o._delTime)/ 500;
						if (al <=0.01)continue ;
						this.graphics.setAlpha(al);
						this.graphics.drawTexture(this.___texture___,o._x,o._y);
					}
					this.graphics.setAlpha(1);
					}{
					if (this.graphics._one && dels.length===0)return;
					else this.graphics.drawTextures(this.___texture___,this._pos);
				}
			}
			else this.graphics.clear();
		}

		ViewImages._BOXSIZE=160;
		ViewImages._DELTIME=500;
		ViewImages.__init$=function(){
			//class ViewImageRect
			ViewImageRect=(function(){
				function ViewImageRect(){
					this.items=[];
				}
				__class(ViewImageRect,'');
				var __proto=ViewImageRect.prototype;
				__proto.addRender=function(pos,n,curTm,_delingSnows,left,top,right,bottom){
					if (this.items.length < 1)return n;
					var i=this.items.length,x=NaN,y=NaN;
					for (;i>0;i--){
						var item=this.items[i-1];
						if (!item.visible)continue ;
						x=item._x;
						if (x > right || x < left)continue ;
						y=item._y;
						if (y > bottom || y < top)continue ;if(item.destroyed==false){
							pos[n++]=x;
							pos[n++]=y;
						}
						else{
							if ((curTm-item._delTime)< 500)
								_delingSnows.push(item);
							else
							item.superDestroy();
						}
					}
					return n;
				}
				return ViewImageRect;
			})()
		}

		return ViewImages;
	})(Sprite)


	/**
	*支持绘制不同纹理的图片
	*使用一个 graphics 绘制 绘制多个纹理
	*@author luohuantao
	*/
	//class laya8.client.player.ViewImages1 extends laya.display.Sprite
	var ViewImages1=(function(_super){
		function ViewImages1(){
			ViewImages1.__super.call(this);
		}

		__class(ViewImages1,'laya8.client.player.ViewImages1',_super);
		var __proto=ViewImages1.prototype;
		__proto.init=function(){
			this.timer.frameLoop(4,this,this._onPrePaint);
		}

		__proto.removeSelf=function(){
			this.timer.clear(this,this._onPrePaint);
			return laya.display.Node.prototype.removeSelf.call(this);
		}

		__proto.render=function(context,x,y){
			Stat.spriteCount+=1;
			this._renderType &=~0x800;
			_super.prototype.render.call(this,context,x,y);
		}

		__proto.updateZOrder=function(){}
		__proto.addChild=function(node){
			if (this.destroyed || node.parent===this)return node;
			(node)._zOrder=0;
			return laya.display.Node.prototype.addChild.call(this,node);
		}

		__proto._onPrePaint=function(){
			var g=this.graphics;
			if (g._cmds || g._one)g.clear();
			if (this.parent==null || this._childs.length < 1)return;
			var rect=this.scrollRect;
			if (!rect)return;
			var left=rect.x;
			var top=rect.y;
			var right=rect.right;
			var bottom=rect.bottom;
			var obj;
			var c=this._childs;
			var i=c.length;
			var _x=NaN,_y=NaN;
			while(--i>=0){
				obj=c [i];
				if (obj.visible && obj._viewSprite && ((_x=obj._x)< right && (_x+obj.width)> left && (_y=obj._y)< bottom && (_y+obj.height)> top)){
					var t=obj._viewSprite.texture;
					if (!t)continue ;
					var tf=obj._style._tf;
					g.drawTexture(t,_x,_y,t.width*tf.scaleX,t.height*tf.scaleY,null,obj.alpha);
				}
			}
		}

		return ViewImages1;
	})(Sprite)


	/**
	*...
	*@author lifei
	*/
	//class Lparticle.ParticleSystem.ParticleSystem extends laya.display.Sprite
	var ParticleSystem=(function(_super){
		function ParticleSystem(params,flag){
			this.removeOnFinish=true;
			this.emitters=null;
			this.initializers=null;
			this.affectors=null;
			this.renderers=null;
			this.particles=null;
			this.isInGame=false;
			this.inParent=false;
			(flag===void 0)&& (flag=false);
			ParticleSystem.__super.call(this);
		}

		__class(ParticleSystem,'Lparticle.ParticleSystem.ParticleSystem',_super);
		var __proto=ParticleSystem.prototype;
		//setParams(params,flag);
		__proto.setParams=function(params,flag){
			(flag===void 0)&& (flag=false);
			this.isInGame=flag;
			this.customRenderEnable=true;
			var curTime=NaN;
			this.removeOnFinish=true;
			this.emitters=this._createComponents("emitters",Emitter,params);
			this.initializers=this._createComponents("initializers",Initializer,params);
			this.affectors=this._createComponents("affectors",Affector,params);
			this.renderers=this._createComponents("renderers",Renderer,params);
			this.particles=[];
			curTime=Laya.timer.currTimer;
			Laya.timer.frameLoop(1,this,(function(_this){
				return function (){
					var deltaTime=NaN,newTime=NaN;
					newTime=Laya.timer.currTimer;
					deltaTime=newTime-curTime;
					curTime=newTime;
					deltaTime=Math.min(deltaTime,100);
					return _this.update(deltaTime / 1000);
				};
			})(this));
		}

		__proto._createComponents=function(compType,compCollection,paramsObj){
			var cls,i=0,len=0,params,paramsList,results;
			paramsList=paramsObj[compType];
			if (!(paramsList && paramsList.length > 0)){
				return [];
			}
			results=[];
			for (i=0,len=paramsList.length;i < len;i++){
				params=paramsList[i];
				cls=compCollection[params.name];
				if (typeof cls!=="function"){
					console.error(compType+"."+params.name+" is undefined!");
					continue ;
				}
				results.push(new cls(this,params));
			}
			return results;
		}

		__proto.customRender=function(context,x,y){
			this._renderType |=0x400
			this.drawP(context.ctx,x,y,[this]);
		}

		__proto.drawP=function(ctx,x,y,ptr){
			var i=0,j=0,len=0,len1=0,p,ref,ref1,renderer,_this;
			ctx.save();
			_this=ptr[0];
			if (_this.blendMode){
				ctx.globalCompositeOperation=_this.blendMode
			}
			ref=_this.particles;
			for (i=0,len=ref.length;i < len;i++){
				p=ref[i];
				if (p.life > 0){
					ref1=_this.renderers;
					for (j=0,len1=ref1.length;j < len1;j++){
						renderer=ref1[j];
						if (this.inParent){
							var obj={};
							obj.x=p.x+x;
							obj.y=p.y+y;
							obj.rotation=p.rotation;
							obj.size=p.size;
							obj.alpha=p.alpha;
							renderer.drawParticle(ctx,obj);
						}
						else
						renderer.drawParticle(ctx,p);
					}
				}
			}
			ctx.restore();
		}

		__proto.removeSelfN=function(){
			Laya.timer.clearAll(this);
			this.removeSelf();
			this.inParent=false;
			Pool.recover("ParticleSystem",this);
		}

		__proto.spawnParticle=function(p){
			var affector,i=0,initializer,j=0,k=0,len=0,len1=0,len2=0,ref,ref1,ref2,renderer;
			if (p==null){
				p={};
			}
			ref=this.initializers;
			for (i=0,len=ref.length;i < len;i++){
				initializer=ref[i];
				initializer.initParticle(p);
			}
			ref1=this.affectors;
			for (j=0,len1=ref1.length;j < len1;j++){
				affector=ref1[j];
				if (typeof affector.initParticle==="function"){
					affector.initParticle(p);
				}
			}
			ref2=this.renderers;
			for (k=0,len2=ref2.length;k < len2;k++){
				renderer=ref2[k];
				if (typeof renderer.initParticle==="function"){
					renderer.initParticle(p);
				}
			}
			p.maxLife=p.life;
			var point=new Point(this.x,this.y);
			if (this.isInGame){
				point=Player.I.getPoint(this.x ,this.y);
			}
			else{
				this.parent && (point=(this.parent).localToGlobal(point));
			}
			if (this.inParent==true){
				p.x=p.x;
				p.y=p.y;
			}
			else{
				p.x=point.x+p.x;
				p.y=point.y+p.y;
			}
			this.particles.push(p);
			return p;
		}

		__proto.isAlive=function(){
			var emitter,i=0,j=0,len=0,len1=0,p,ref,ref1;
			ref=this.emitters;
			for (i=0,len=ref.length;i < len;i++){
				emitter=ref[i];
				if (emitter.isAlive()){
					return true;
				}
			}
			ref1=this.particles;
			for (j=0,len1=ref1.length;j < len1;j++){
				p=ref1[j];
				if (p.life > 0){
					return true;
				}
			}
			return false;
		}

		__proto.update=function(dt){
			var affector,aliveParticles=NaN,emitter,i=0,isAlive=false,j=0,k=0,len=0,len1=0,len2=0,p,ps,ref,ref1;
			isAlive=false;
			ref=this.emitters;
			for (i=0,len=ref.length;i < len;i++){
				emitter=ref[i];
				if (!(emitter.isAlive())){
					continue ;
				}
				isAlive=true;
				emitter.update(dt);
			}
			ps=this.particles;
			if (ps.length > 0){
				aliveParticles=0;
				for (j=0,len1=ps.length;j < len1;j++){
					p=ps[j];
					if (!(p.life > 0)){
						continue ;
					}
					aliveParticles++;
					isAlive=true;
					ref1=this.affectors;
					for (k=0,len2=ref1.length;k < len2;k++){
						affector=ref1[k];
						affector.updateParticle(dt,p);
					}
					p.life-=dt;
				}
				if (aliveParticles===0){
					ps.length=0;
					}else if (this.particles.length-aliveParticles > 10){
					this.particles=ps.filter(function(p){
						return p.life > 0;
					});
				}
			}
			if (this.removeOnFinish && !isAlive){
				console.log("remove");
				this.removeSelfN();
			}
		}

		__proto.reset=function(){
			var emitter,i=0,len=0,ref;
			ref=this.emitters;
			for (i=0,len=ref.length;i < len;i++){
				emitter=ref[i];
				if (typeof emitter.reset==="function"){
					emitter.reset();
				}
			}
			return this.particles.length=0;
		}

		return ParticleSystem;
	})(Sprite)


	/**
	*雪花类
	*@author yung
	*/
	//class view.SnowEffect extends laya.display.Sprite
	var SnowEffect=(function(_super){
		var SnowInfo;
		function SnowEffect(){
			this._arr=[];
			this._ture=null;
			this._tureW=42;
			this._tureH=42;
			this._count=10;
			this._start=NaN;
			this._isStop=false;
			this._interval=0;
			this._texts=[];
			SnowEffect.__super.call(this);
		}

		__class(SnowEffect,'view.SnowEffect',_super);
		var __proto=SnowEffect.prototype;
		__proto.onStart=function(){}
		__proto.onEnd=function(){}
		/**
		*初始化雪花信息
		*@param url 雪花路径
		*@param num 雪花数量
		*@param snowSize 雪花最大生成尺寸
		*@param time 雪花停止多久后重新再下雪
		*/
		__proto.init=function(url,num,snowSize,time){
			(num===void 0)&& (num=25);
			(snowSize===void 0)&& (snowSize=42);
			(time===void 0)&& (time=1500);
			this._count=num;
			this._tureW=snowSize;
			this._tureH=snowSize;
			SnowEffect.stopDelay=time *2;
			this._interval=SnowEffect.stopInterval+Math.random()*5;
			this._start=Laya.timer.currTimer;
			this._ture=new Texture();
			for (var i=0;i < this._count;i++){
				var snow=new SnowInfo();
				this.randomSnow(snow);
				snow.x=Math.random()*Laya.stage.width;
				snow.y=Math.random()*Laya.stage.height;
				snow.cmd=this.graphics.drawTexture(this.getTexture(snow.z),snow.x,snow.y,this._tureW *snow.z,this._tureH *snow.z);
				this._arr.push(snow);
			}
		}

		__proto.getTexture=function(z){
			var alpha=Math.floor(z *10);
			if (alpha==0)return this._ture;
			return this._texts[alpha] || (this._texts[alpha]=Laya.loader.getRes("ani/snow/"+alpha+".png"));
		}

		__proto.randomSnow=function(snow){
			var r=Math.random();
			snow.z=Math.random()< 0.9 ? this.random(0.3,0.8):1;
			if (r < 0.33){
				snow.x=-this._tureW;
				snow.y=Math.random()*Laya.stage.height / 2;
				snow.speedX=Math.random()*2+0.5;
				}else if (r < 0.66){
				snow.x=Laya.stage.width+this._tureW;
				snow.y=Math.random()*Laya.stage.height / 2;
				snow.speedX=-(Math.random()*2+0.5);
				}else {
				snow.x=Laya.stage.width *Math.random()*0.8;
				snow.y=-this._tureH;
				snow.speedX=r < 0.8 ? 1 :-1;
			}
			snow.speedY=snow.z *5+Math.random()*snow.z;
			snow.speedX /=2;
			snow.speedY /=2;
			snow.ey=snow.z *Laya.stage.height;
		}

		__proto.random=function(min,max){
			var num=Math.random();
			if (num >=min && num <=max){
				return num
			}
			return this.random(min,max);
		}

		__proto.render=function(context,x,y){
			if (!this._isStop && Laya.timer.currTimer-this._start > this._interval){
				this.isStop=true;
			}
			if (Stat.loopCount % 2==0){
				_super.prototype.render.call(this,context,x,y);
				return;
			}
			for (var i=0;i < this._count;i++){
				var snow=this._arr[i];
				var cmd=snow.cmd;
				if(cmd==null)return;
				var z=snow.z=0.995 *snow.z;
				cmd[0]=this.getTexture(snow.z);
				cmd[1]+=snow.speedX;
				cmd[2]+=snow.speedY;
				cmd[3]=this._tureW *z;
				cmd[4]=this._tureH *z;
				cmd[6]=0|(z*10);
				if (cmd[2] > snow.ey || z < 0.1){
					if (!this._isStop){
						this.randomSnow(snow);
						cmd[1]=snow.x;
						cmd[2]=snow.y;
					}
				}
			}
			_super.prototype.render.call(this,context,x,y);
		}

		__proto.reStart=function(){
			this._interval=SnowEffect.stopInterval+Math.random()*5;
			this._isStop=false;
			this._start=Laya.timer.currTimer;
			var snowPos=[];
			for (var i=0;i < this._count;i++){
				var snow=this._arr[i];
				if (!snow.cmd)continue ;
				var cmd=snow.cmd;
				this.randomSnow(snow);
				cmd[1]=snow.x;
				cmd[2]=snow.y;
				snowPos.push(snow);
			}
		}

		__getset(0,__proto,'isStop',function(){
			return this._isStop;
			},function(value){
			this._isStop=value;
			Laya.timer.once(SnowEffect.stopDelay+Math.random()*2000,this,this.reStart);
		});

		SnowEffect.stopInterval=1000 *10;
		SnowEffect.stopDelay=1500*2;
		SnowEffect.__init$=function(){
			//class SnowInfo
			SnowInfo=(function(){
				function SnowInfo(){
					this.x=0;
					this.y=0;
					this.z=0;
					this.speedX=1;
					this.speedY=1;
					this.ey=0;
					this.cmd=null;
				}
				__class(SnowInfo,'');
				return SnowInfo;
			})()
		}

		return SnowEffect;
	})(Sprite)


	/**
	*<p> <code>Text</code> 类用于创建显示对象以显示文本。</p>
	*<p>
	*注意：如果运行时系统找不到设定的字体，则用系统默认的字体渲染文字，从而导致显示异常。(通常电脑上显示正常，在一些移动端因缺少设置的字体而显示异常)。
	*</p>
	*@example
	*package
	*{
		*import laya.display.Text;
		*public class Text_Example
		*{
			*public function Text_Example()
			*{
				*Laya.init(640,800);//设置游戏画布宽高、渲染模式。
				*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
				*onInit();
				*}
			*private function onInit():void
			*{
				*var text:Text=new Text();//创建一个 Text 类的实例对象 text 。
				*text.text="这个是一个 Text 文本示例。";
				*text.color="#008fff";//设置 text 的文本颜色。
				*text.font="Arial";//设置 text 的文本字体。
				*text.bold=true;//设置 text 的文本显示为粗体。
				*text.fontSize=30;//设置 text 的字体大小。
				*text.wordWrap=true;//设置 text 的文本自动换行。
				*text.x=100;//设置 text 对象的属性 x 的值，用于控制 text 对象的显示位置。
				*text.y=100;//设置 text 对象的属性 y 的值，用于控制 text 对象的显示位置。
				*text.width=300;//设置 text 的宽度。
				*text.height=200;//设置 text 的高度。
				*text.italic=true;//设置 text 的文本显示为斜体。
				*text.borderColor="#fff000";//设置 text 的文本边框颜色。
				*Laya.stage.addChild(text);//将 text 添加到显示列表。
				*}
			*}
		*}
	*@example
	*Text_Example();
	*function Text_Example()
	*{
		*Laya.init(640,800);//设置游戏画布宽高、渲染模式。
		*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
		*onInit();
		*}
	*function onInit()
	*{
		*var text=new laya.display.Text();//创建一个 Text 类的实例对象 text 。
		*text.text="这个是一个 Text 文本示例。";
		*text.color="#008fff";//设置 text 的文本颜色。
		*text.font="Arial";//设置 text 的文本字体。
		*text.bold=true;//设置 text 的文本显示为粗体。
		*text.fontSize=30;//设置 text 的字体大小。
		*text.wordWrap=true;//设置 text 的文本自动换行。
		*text.x=100;//设置 text 对象的属性 x 的值，用于控制 text 对象的显示位置。
		*text.y=100;//设置 text 对象的属性 y 的值，用于控制 text 对象的显示位置。
		*text.width=300;//设置 text 的宽度。
		*text.height=200;//设置 text 的高度。
		*text.italic=true;//设置 text 的文本显示为斜体。
		*text.borderColor="#fff000";//设置 text 的文本边框颜色。
		*Laya.stage.addChild(text);//将 text 添加到显示列表。
		*}
	*@example
	*class Text_Example {
		*constructor(){
			*Laya.init(640,800);//设置游戏画布宽高、渲染模式。
			*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
			*this.onInit();
			*}
		*private onInit():void {
			*var text:laya.display.Text=new laya.display.Text();//创建一个 Text 类的实例对象 text 。
			*text.text="这个是一个 Text 文本示例。";
			*text.color="#008fff";//设置 text 的文本颜色。
			*text.font="Arial";//设置 text 的文本字体。
			*text.bold=true;//设置 text 的文本显示为粗体。
			*text.fontSize=30;//设置 text 的字体大小。
			*text.wordWrap=true;//设置 text 的文本自动换行。
			*text.x=100;//设置 text 对象的属性 x 的值，用于控制 text 对象的显示位置。
			*text.y=100;//设置 text 对象的属性 y 的值，用于控制 text 对象的显示位置。
			*text.width=300;//设置 text 的宽度。
			*text.height=200;//设置 text 的高度。
			*text.italic=true;//设置 text 的文本显示为斜体。
			*text.borderColor="#fff000";//设置 text 的文本边框颜色。
			*Laya.stage.addChild(text);//将 text 添加到显示列表。
			*}
		*}
	*/
	//class laya.display.Text extends laya.display.Sprite
	var Text=(function(_super){
		function Text(){
			this._clipPoint=null;
			this._currBitmapFont=null;
			this._text=null;
			this._isChanged=false;
			this._textWidth=0;
			this._textHeight=0;
			this._lines=[];
			this._lineWidths=[];
			this._startX=NaN;
			this._startY=NaN;
			this._lastVisibleLineIndex=-1;
			this._words=null;
			this._charSize={};
			this.underline=false;
			this._underlineColor=null;
			Text.__super.call(this);
			this.overflow=Text.VISIBLE;
			this._style=new CSSStyle(this);
			(this._style).wordWrap=false;
		}

		__class(Text,'laya.display.Text',_super);
		var __proto=Text.prototype;
		/**@inheritDoc */
		__proto.destroy=function(destroyChild){
			(destroyChild===void 0)&& (destroyChild=true);
			_super.prototype.destroy.call(this,destroyChild);
			this._lines=null;
			if (this._words){
				this._words.length=0;
				this._words=null;
			}
		}

		/**
		*@private
		*@inheritDoc
		*/
		__proto._getBoundPointsM=function(ifRotate){
			(ifRotate===void 0)&& (ifRotate=false);
			var rec=Rectangle.TEMP;
			rec.setTo(0,0,this.width,this.height);
			return rec._getBoundPoints();
		}

		/**
		*@inheritDoc
		*/
		__proto.getGraphicBounds=function(realSize){
			(realSize===void 0)&& (realSize=false);
			var rec=Rectangle.TEMP;
			rec.setTo(0,0,this.width,this.height);
			return rec;
		}

		/**
		*@private
		*@inheritDoc
		*/
		__proto._getCSSStyle=function(){
			return this._style;
		}

		/**
		*<p>根据指定的文本，从语言包中取当前语言的文本内容。并对此文本中的{i}文本进行替换。</p>
		*<p>例如：
		*<li>（1）text 的值为“我的名字”，先取到这个文本对应的当前语言版本里的值“My name”，将“My name”设置为当前文本的内容。</li>
		*<li>（2）text 的值为“恭喜你赢得{0}个钻石，{1}经验。”，arg1 的值为100，arg2 的值为200。
		*则先取到这个文本对应的当前语言版本里的值“Congratulations on your winning {0}diamonds,{1}experience.”，
		*然后将文本里的{0}、{1}，依据括号里的数字从0开始替换为 arg1、arg2 的值。
		*将替换处理后的文本“Congratulations on your winning 100 diamonds,200 experience.”设置为当前文本的内容。
		*</li>
		*</p>
		*@param text 文本内容。
		*@param ...args 文本替换参数。
		*/
		__proto.lang=function(text,arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10){
			text=Text.langPacks && Text.langPacks[text] ? Text.langPacks[text] :text;
			if (arguments.length < 2){
				this._text=text;
				}else {
				for (var i=0,n=arguments.length;i < n;i++){
					text=text.replace("{"+i+"}",arguments[i+1]);
				}
				this._text=text;
			}
		}

		/**
		*渲染文字。
		*@param begin 开始渲染的行索引。
		*@param visibleLineCount 渲染的行数。
		*/
		__proto.renderText=function(begin,visibleLineCount){
			var graphics=this.graphics;
			graphics.clear(true);
			var ctxFont=(this.italic ? "italic " :"")+(this.bold ? "bold " :"")+this.fontSize+"px "+(Browser.onIPhone ? (laya.display.Text._fontFamilyMap[this.font] || this.font):this.font);
			Browser.context.font=ctxFont;
			var padding=this.padding;
			var startX=padding[3];
			var textAlgin="left";
			var lines=this._lines;
			var lineHeight=this.leading+this._charSize.height;
			var tCurrBitmapFont=this._currBitmapFont;
			if (tCurrBitmapFont){
				lineHeight=this.leading+tCurrBitmapFont.getMaxHeight();
			};
			var startY=padding[0];
			if ((!tCurrBitmapFont)&& this._width > 0 && this._textWidth <=this._width){
				if (this.align=="right"){
					textAlgin="right";
					startX=this._width-padding[1];
					}else if (this.align=="center"){
					textAlgin="center";
					startX=this._width *0.5+padding[3]-padding[1];
				}
			}
			if (this._height > 0){
				var tempVAlign=(this._textHeight > this._height)? "top" :this.valign;
				if (tempVAlign==="middle")
					startY=(this._height-visibleLineCount *lineHeight)*0.5+padding[0]-padding[2];
				else if (tempVAlign==="bottom")
				startY=this._height-visibleLineCount *lineHeight-padding[2];
			};
			var style=this._style;
			if (tCurrBitmapFont && tCurrBitmapFont.autoScaleSize){
				var bitmapScale=tCurrBitmapFont.fontSize / this.fontSize;
			}
			if (this._clipPoint){
				graphics.save();
				if (tCurrBitmapFont && tCurrBitmapFont.autoScaleSize){
					var tClipWidth=0;
					var tClipHeight=0;
					this._width ? tClipWidth=(this._width-padding[3]-padding[1]):tClipWidth=this._textWidth;
					this._height ? tClipHeight=(this._height-padding[0]-padding[2]):tClipHeight=this._textHeight;
					tClipWidth *=bitmapScale;
					tClipHeight *=bitmapScale;
					graphics.clipRect(padding[3],padding[0],tClipWidth,tClipHeight);
					}else {
					graphics.clipRect(padding[3],padding[0],this._width ? (this._width-padding[3]-padding[1]):this._textWidth,this._height ? (this._height-padding[0]-padding[2]):this._textHeight);
				}
			};
			var password=style.password;
			if (("prompt" in this)&& this['prompt']==this._text)
				password=false;
			var x=0,y=0;
			var end=Math.min(this._lines.length,visibleLineCount+begin)|| 1;
			for (var i=begin;i < end;i++){
				var word=lines[i];
				var _word;
				if (password){
					var len=word.length;
					word="";
					for (var j=len;j > 0;j--){
						word+="●";
					}
				}
				x=startX-(this._clipPoint ? this._clipPoint.x :0);
				y=startY+lineHeight *i-(this._clipPoint ? this._clipPoint.y :0);
				this.underline && this.drawUnderline(textAlgin,x,y,i);
				if (tCurrBitmapFont){
					var tWidth=this.width;
					if (tCurrBitmapFont.autoScaleSize){
						tWidth=this.width *bitmapScale;
					}
					tCurrBitmapFont.drawText(word,this,x,y,this.align,tWidth);
					}else {
					if (Render.isWebGL){
						this._words || (this._words=[]);
						_word=this._words.length > (i-begin)? this._words[i-begin] :new WordText();
						_word.setText(word);
						}else {
						_word=word;
					}
					style.stroke ? graphics.fillBorderText(_word,x,y,ctxFont,this.color,style.strokeColor,style.stroke,textAlgin):graphics.fillText(_word,x,y,ctxFont,this.color,textAlgin);
				}
			}
			if (tCurrBitmapFont && tCurrBitmapFont.autoScaleSize){
				var tScale=1 / bitmapScale;
				this.scale(tScale,tScale);
			}
			if (this._clipPoint)
				graphics.restore();
			this._startX=startX;
			this._startY=startY;
		}

		/**
		*绘制下划线
		*@param x 本行坐标
		*@param y 本行坐标
		*@param lineIndex 本行索引
		*/
		__proto.drawUnderline=function(align,x,y,lineIndex){
			var lineWidth=this._lineWidths[lineIndex];
			switch (align){
				case 'center':
					x-=lineWidth / 2;
					break ;
				case 'right':
					x-=lineWidth;
					break ;
				case 'left':
				default :
					break ;
				}
			y+=this._charSize.height;
			this._graphics.drawLine(x,y,x+lineWidth,y,this.underlineColor || this.color,1);
		}

		/**
		*<p>排版文本。</p>
		*<p>进行宽高计算，渲染、重绘文本。</p>
		*/
		__proto.typeset=function(){
			this._isChanged=false;
			if (!this._text){
				this._clipPoint=null;
				this._textWidth=this._textHeight=0;
				this.graphics.clear(true);
				return;
			}
			Browser.context.font=this._getCSSStyle().font;
			this._lines.length=0;
			this._lineWidths.length=0;
			this.parseLines(this._text);
			this.evalTextSize();
			if (this.checkEnabledViewportOrNot())
				this._clipPoint || (this._clipPoint=new Point(0,0));
			else
			this._clipPoint=null;
			var lineCount=this._lines.length;
			if (this.overflow !=Text.VISIBLE){
				var func=this.overflow==Text.HIDDEN ? Math.floor :Math.ceil;
				lineCount=Math.min(lineCount,func((this.height-this.padding[0]-this.padding[2])/ (this.leading+this._charSize.height)));
			};
			var startLine=this.scrollY / (this._charSize.height+this.leading)| 0;
			this.renderText(startLine,lineCount);
			this.repaint();
		}

		__proto.evalTextSize=function(){
			var nw=NaN,nh=NaN;
			nw=Math.max.apply(this,this._lineWidths);
			if (this._currBitmapFont)
				nh=this._lines.length *(this._currBitmapFont.getMaxHeight()+this.leading)+this.padding[0]+this.padding[2];
			else
			nh=this._lines.length *(this._charSize.height+this.leading)+this.padding[0]+this.padding[2];
			if (nw !=this._textWidth || nh !=this._textHeight){
				this._textWidth=nw;
				this._textHeight=nh;
				if (!this._width || !this._height)
					this.conchModel && this.conchModel.size(this._width || this._textWidth,this._height || this._textHeight);
			}
		}

		__proto.checkEnabledViewportOrNot=function(){
			return this.overflow==Text.SCROLL && ((this._width > 0 && this._textWidth > this._width)|| (this._height > 0 && this._textHeight > this._height));
		}

		/**
		*<p>快速更改显示文本。不进行排版计算，效率较高。</p>
		*<p>如果只更改文字内容，不更改文字样式，建议使用此接口，能提高效率。</p>
		*@param text 文本内容。
		*/
		__proto.changeText=function(text){
			if (this._text!==text){
				this.lang(text+"");
				if (this._graphics && this._graphics.replaceText(this._text)){
					}else {
					this.typeset();
				}
			}
		}

		/**
		*@private
		*分析文本换行。
		*/
		__proto.parseLines=function(text){
			var needWordWrapOrTruncate=this.wordWrap || this.overflow==Text.HIDDEN;
			if (needWordWrapOrTruncate){
				var wordWrapWidth=this.getWordWrapWidth();
			}
			if (this._currBitmapFont){
				this._charSize.width=this._currBitmapFont.getMaxWidth();
				this._charSize.height=this._currBitmapFont.getMaxHeight();
				}else {
				var measureResult=Browser.context.measureText(Text._testWord);
				this._charSize.width=measureResult.width;
				this._charSize.height=(measureResult.height || this.fontSize);
			};
			var lines=text.replace(/\r\n/g,"\n").split("\n");
			for (var i=0,n=lines.length;i < n;i++){
				var line=lines[i];
				if (needWordWrapOrTruncate)
					this.parseLine(line,wordWrapWidth);
				else {
					this._lineWidths.push(this.getTextWidth(line));
					this._lines.push(line);
				}
			}
		}

		/**
		*@private
		*解析行文本。
		*@param line 某行的文本。
		*@param wordWrapWidth 文本的显示宽度。
		*/
		__proto.parseLine=function(line,wordWrapWidth){
			var ctx=Browser.context;
			var lines=this._lines;
			var maybeIndex=0;
			var execResult;
			var charsWidth=NaN;
			var wordWidth=NaN;
			var startIndex=0;
			charsWidth=this.getTextWidth(line);
			if (charsWidth <=wordWrapWidth){
				lines.push(line);
				this._lineWidths.push(charsWidth);
				return;
			}
			charsWidth=this._charSize.width;
			maybeIndex=Math.floor(wordWrapWidth / charsWidth);
			(maybeIndex==0)&& (maybeIndex=1);
			charsWidth=this.getTextWidth(line.substring(0,maybeIndex));
			wordWidth=charsWidth;
			for (var j=maybeIndex,m=line.length;j < m;j++){
				charsWidth=this.getTextWidth(line.charAt(j));
				wordWidth+=charsWidth;
				if (wordWidth > wordWrapWidth){
					if (this.wordWrap){
						var newLine=line.substring(startIndex,j);
						if (newLine.charCodeAt(newLine.length-1)< 255){
							execResult=/(?:\w|-)+$/.exec(newLine);
							if (execResult){
								j=execResult.index+startIndex;
								if (execResult.index==0)
									j+=newLine.length;
								else
								newLine=line.substring(startIndex,j);
							}
						}
						lines.push(newLine);
						this._lineWidths.push(wordWidth-charsWidth);
						startIndex=j;
						if (j+maybeIndex < m){
							j+=maybeIndex;
							charsWidth=this.getTextWidth(line.substring(startIndex,j));
							wordWidth=charsWidth;
							j--;
							}else {
							lines.push(line.substring(startIndex,m));
							this._lineWidths.push(this.getTextWidth(lines[lines.length-1]));
							startIndex=-1;
							break ;
						}
						}else if (this.overflow==Text.HIDDEN){
						lines.push(line.substring(0,j));
						this._lineWidths.push(this.getTextWidth(lines[lines.length-1]));
						return;
					}
				}
			}
			if (this.wordWrap && startIndex !=-1){
				lines.push(line.substring(startIndex,m));
				this._lineWidths.push(this.getTextWidth(lines[lines.length-1]));
			}
		}

		__proto.getTextWidth=function(text){
			if (this._currBitmapFont)
				return this._currBitmapFont.getTextWidth(text);
			else
			return Browser.context.measureText(text).width;
		}

		/**
		*获取换行所需的宽度。
		*/
		__proto.getWordWrapWidth=function(){
			var p=this.padding;
			var w=NaN;
			if (this._currBitmapFont && this._currBitmapFont.autoScaleSize)
				w=this._width *(this._currBitmapFont.fontSize / this.fontSize);
			else
			w=this._width;
			if (w <=0){
				w=this.wordWrap ? 100 :Browser.width;
			}
			w <=0 && (w=100);
			return w-p[3]-p[1];
		}

		/**
		*返回字符在本类实例的父坐标系下的坐标。
		*@param charIndex 索引位置。
		*@param out （可选）输出的Point引用。
		*@return Point 字符在本类实例的父坐标系下的坐标。如果out参数不为空，则将结果赋值给指定的Point对象，否则创建一个新的Point对象返回。建议使用Point.TEMP作为out参数，可以省去Point对象创建和垃圾回收的开销，尤其是在需要频繁执行的逻辑中，比如帧循环和MOUSE_MOVE事件回调函数里面。
		*/
		__proto.getCharPoint=function(charIndex,out){
			this._isChanged && Laya.timer.runCallLater(this,this.typeset);
			var len=0,lines=this._lines,startIndex=0;
			for (var i=0,n=lines.length;i < n;i++){
				len+=lines[i].length;
				if (charIndex < len){
					var line=i;
					break ;
				}
				startIndex=len;
			};
			var ctxFont=(this.italic ? "italic " :"")+(this.bold ? "bold " :"")+this.fontSize+"px "+this.font;
			Browser.context.font=ctxFont;
			var width=this.getTextWidth(this._text.substring(startIndex,charIndex));
			var point=out || new Point();
			return point.setTo(this._startX+width-(this._clipPoint ? this._clipPoint.x :0),this._startY+line *(this._charSize.height+this.leading)-(this._clipPoint ? this._clipPoint.y :0));
		}

		/**
		*@inheritDoc
		*/
		__getset(0,__proto,'width',function(){
			if (this._width)
				return this._width;
			return this.textWidth+this.padding[1]+this.padding[3];
			},function(value){
			if (value !=this._width){
				_super.prototype._$set_width.call(this,value);
				this.isChanged=true;
			}
		});

		/**
		*表示文本的宽度，以像素为单位。
		*/
		__getset(0,__proto,'textWidth',function(){
			this._isChanged && Laya.timer.runCallLater(this,this.typeset);
			return this._textWidth;
		});

		/**
		*@inheritDoc
		*/
		__getset(0,__proto,'height',function(){
			if (this._height)return this._height;
			return this.textHeight+this.padding[0]+this.padding[2];
			},function(value){
			if (value !=this._height){
				_super.prototype._$set_height.call(this,value);
				this.isChanged=true;
			}
		});

		/**
		*表示文本的高度，以像素为单位。
		*/
		__getset(0,__proto,'textHeight',function(){
			this._isChanged && Laya.timer.runCallLater(this,this.typeset);
			return this._textHeight;
		});

		/**
		*<p>边距信息。</p>
		*<p>数据格式：[上边距，右边距，下边距，左边距]（边距以像素为单位）。</p>
		*/
		__getset(0,__proto,'padding',function(){
			return this._getCSSStyle().padding;
			},function(value){
			this._getCSSStyle().padding=value;
			this.isChanged=true;
		});

		/**
		*<p>指定文本是否为粗体字。</p>
		*<p>默认值为 false，这意味着不使用粗体字。如果值为 true，则文本为粗体字。</p>
		*/
		__getset(0,__proto,'bold',function(){
			return this._getCSSStyle().bold;
			},function(value){
			this._getCSSStyle().bold=value;
			this.isChanged=true;
		});

		/**当前文本的内容字符串。*/
		__getset(0,__proto,'text',function(){
			return this._text || "";
			},function(value){
			if (this._text!==value){
				this.lang(value+"");
				this.isChanged=true;
				this.event("change");
			}
		});

		/**
		*<p>表示文本的颜色值。可以通过 <code>Text.defaultColor</code> 设置默认颜色。</p>
		*<p>默认值为黑色。</p>
		*/
		__getset(0,__proto,'color',function(){
			return this._getCSSStyle().color;
			},function(value){
			if (this._getCSSStyle().color !=value){
				this._getCSSStyle().color=value;
				if (!this._isChanged && this._graphics){
					this._graphics.replaceTextColor(this.color)
					}else {
					this.isChanged=true;
				}
			}
		});

		/**
		*<p>文本的字体名称，以字符串形式表示。</p>
		*<p>默认值为："Arial"，可以通过Font.defaultFont设置默认字体。</p>
		*<p>如果运行时系统找不到设定的字体，则用系统默认的字体渲染文字，从而导致显示异常。(通常电脑上显示正常，在一些移动端因缺少设置的字体而显示异常)。</p>
		*@see laya.display.css.Font#defaultFamily
		*/
		__getset(0,__proto,'font',function(){
			return this._getCSSStyle().fontFamily;
			},function(value){
			if (this._currBitmapFont){
				this._currBitmapFont=null;
				this.scale(1,1);
			}
			if (Text._bitmapFonts && Text._bitmapFonts[value]){
				this._currBitmapFont=Text._bitmapFonts[value];
			}
			this._getCSSStyle().fontFamily=value;
			this.isChanged=true;
		});

		/**
		*<p>指定文本的字体大小（以像素为单位）。</p>
		*<p>默认为20像素，可以通过 <code>Text.defaultSize</code> 设置默认大小。</p>
		*/
		__getset(0,__proto,'fontSize',function(){
			return this._getCSSStyle().fontSize;
			},function(value){
			this._getCSSStyle().fontSize=value;
			this.isChanged=true;
		});

		/**
		*<p>表示使用此文本格式的文本是否为斜体。</p>
		*<p>默认值为 false，这意味着不使用斜体。如果值为 true，则文本为斜体。</p>
		*/
		__getset(0,__proto,'italic',function(){
			return this._getCSSStyle().italic;
			},function(value){
			this._getCSSStyle().italic=value;
			this.isChanged=true;
		});

		/**
		*<p>表示文本的水平显示方式。</p>
		*<p><b>取值：</b>
		*<li>"left"： 居左对齐显示。</li>
		*<li>"center"： 居中对齐显示。</li>
		*<li>"right"： 居右对齐显示。</li>
		*</p>
		*/
		__getset(0,__proto,'align',function(){
			return this._getCSSStyle().align;
			},function(value){
			this._getCSSStyle().align=value;
			this.isChanged=true;
		});

		/**
		*<p>表示文本的垂直显示方式。</p>
		*<p><b>取值：</b>
		*<li>"top"： 居顶部对齐显示。</li>
		*<li>"middle"： 居中对齐显示。</li>
		*<li>"bottom"： 居底部对齐显示。</li>
		*</p>
		*/
		__getset(0,__proto,'valign',function(){
			return this._getCSSStyle().valign;
			},function(value){
			this._getCSSStyle().valign=value;
			this.isChanged=true;
		});

		/**
		*<p>表示文本是否自动换行，默认为false。</p>
		*<p>若值为true，则自动换行；否则不自动换行。</p>
		*/
		__getset(0,__proto,'wordWrap',function(){
			return this._getCSSStyle().wordWrap;
			},function(value){
			this._getCSSStyle().wordWrap=value;
			this.isChanged=true;
		});

		/**
		*垂直行间距（以像素为单位）。
		*/
		__getset(0,__proto,'leading',function(){
			return this._getCSSStyle().leading;
			},function(value){
			this._getCSSStyle().leading=value;
			this.isChanged=true;
		});

		/**
		*文本背景颜色，以字符串表示。
		*/
		__getset(0,__proto,'bgColor',function(){
			return this._getCSSStyle().backgroundColor;
			},function(value){
			this._getCSSStyle().backgroundColor=value;
			this.isChanged=true;
		});

		/**
		*文本边框背景颜色，以字符串表示。
		*/
		__getset(0,__proto,'borderColor',function(){
			return this._getCSSStyle().borderColor;
			},function(value){
			this._getCSSStyle().borderColor=value;
			this.isChanged=true;
		});

		/**
		*<p>描边宽度（以像素为单位）。</p>
		*<p>默认值0，表示不描边。</p>
		*/
		__getset(0,__proto,'stroke',function(){
			return this._getCSSStyle().stroke;
			},function(value){
			this._getCSSStyle().stroke=value;
			this.isChanged=true;
		});

		/**
		*<p>描边颜色，以字符串表示。</p>
		*<p>默认值为 "#000000"（黑色）;</p>
		*/
		__getset(0,__proto,'strokeColor',function(){
			return this._getCSSStyle().strokeColor;
			},function(value){
			this._getCSSStyle().strokeColor=value;
			this.isChanged=true;
		});

		/**
		*一个布尔值，表示文本的属性是否有改变。若为true表示有改变。
		*/
		__getset(0,__proto,'isChanged',null,function(value){
			if (this._isChanged!==value){
				this._isChanged=value;
				value && Laya.timer.callLater(this,this.typeset);
			}
		});

		/**
		*<p>设置横向滚动量。</p>
		*<p>即使设置超出滚动范围的值，也会被自动限制在可能的最大值处。</p>
		*/
		/**
		*获取横向滚动量。
		*/
		__getset(0,__proto,'scrollX',function(){
			if (!this._clipPoint)
				return 0;
			return this._clipPoint.x;
			},function(value){
			if (this.overflow !=Text.SCROLL || (this.textWidth < this._width || !this._clipPoint))
				return;
			value=value < this.padding[3] ? this.padding[3] :value;
			var maxScrollX=this._textWidth-this._width;
			value=value > maxScrollX ? maxScrollX :value;
			var visibleLineCount=this._height / (this._charSize.height+this.leading)| 0+1;
			this._clipPoint.x=value;
			this.renderText(this._lastVisibleLineIndex,visibleLineCount);
		});

		/**
		*设置纵向滚动量（px)。即使设置超出滚动范围的值，也会被自动限制在可能的最大值处。
		*/
		/**
		*获取纵向滚动量。
		*/
		__getset(0,__proto,'scrollY',function(){
			if (!this._clipPoint)
				return 0;
			return this._clipPoint.y;
			},function(value){
			if (this.overflow !=Text.SCROLL || (this.textHeight < this._height || !this._clipPoint))
				return;
			value=value < this.padding[0] ? this.padding[0] :value;
			var maxScrollY=this._textHeight-this._height;
			value=value > maxScrollY ? maxScrollY :value;
			var startLine=value / (this._charSize.height+this.leading)| 0;
			this._lastVisibleLineIndex=startLine;
			var visibleLineCount=(this._height / (this._charSize.height+this.leading)| 0)+1;
			this._clipPoint.y=value;
			this.renderText(startLine,visibleLineCount);
		});

		/**
		*获取横向可滚动最大值。
		*/
		__getset(0,__proto,'maxScrollX',function(){
			return (this.textWidth < this._width)? 0 :this._textWidth-this._width;
		});

		/**
		*获取纵向可滚动最大值。
		*/
		__getset(0,__proto,'maxScrollY',function(){
			return (this.textHeight < this._height)? 0 :this._textHeight-this._height;
		});

		__getset(0,__proto,'lines',function(){
			if (this._isChanged)
				this.typeset();
			return this._lines;
		});

		__getset(0,__proto,'underlineColor',function(){
			return this._underlineColor;
			},function(value){
			this._underlineColor=value;
			this._isChanged=true;
			this.typeset();
		});

		Text.registerBitmapFont=function(name,bitmapFont){
			Text._bitmapFonts || (Text._bitmapFonts={});
			Text._bitmapFonts[name]=bitmapFont;
		}

		Text.unregisterBitmapFont=function(name,destroy){
			(destroy===void 0)&& (destroy=true);
			if (Text._bitmapFonts && Text._bitmapFonts[name]){
				var tBitmapFont=Text._bitmapFonts[name];
				if (destroy){
					tBitmapFont.destroy();
				}
				delete Text._bitmapFonts[name];
			}
		}

		Text.supportFont=function(font){
			Browser.context.font="10px sans-serif";
			var defaultFontWidth=Browser.context.measureText("abcji").width;
			Browser.context.font="10px "+font;
			var customFontWidth=Browser.context.measureText("abcji").width;
			console.log(defaultFontWidth,customFontWidth);
			if (defaultFontWidth==customFontWidth)
				return false;
			else
			return true;
		}

		Text._testWord="游";
		Text.langPacks=null
		Text.VISIBLE="visible";
		Text.SCROLL="scroll";
		Text.HIDDEN="hidden";
		Text.CharacterCache=true;
		Text._bitmapFonts=null
		__static(Text,
		['_fontFamilyMap',function(){return this._fontFamilyMap={"报隶" :"报隶-简","黑体" :"黑体-简","楷体" :"楷体-简","兰亭黑" :"兰亭黑-简","隶变" :"隶变-简","凌慧体" :"凌慧体-简","翩翩体" :"翩翩体-简","苹方" :"苹方-简","手札体" :"手札体-简","宋体" :"宋体-简","娃娃体" :"娃娃体-简","魏碑" :"魏碑-简","行楷" :"行楷-简","雅痞" :"雅痞-简","圆体" :"圆体-简"};}
		]);
		return Text;
	})(Sprite)


	/**
	*<p> <code>Stage</code> 是舞台类，显示列表的根节点，所有显示对象都在舞台上显示。通过 Laya.stage 单例访问。</p>
	*<p>Stage提供几种适配模式，不同的适配模式会产生不同的画布大小，画布越大，渲染压力越大，所以要选择合适的适配方案。</p>
	*<p>Stage提供不同的帧率模式，帧率越高，渲染压力越大，越费电，合理使用帧率甚至动态更改帧率有利于改进手机耗电。</p>
	*/
	//class laya.display.Stage extends laya.display.Sprite
	var Stage=(function(_super){
		function Stage(){
			this.focus=null;
			this.frameRate="fast";
			this.designWidth=0;
			this.designHeight=0;
			this.canvasRotation=false;
			this.canvasDegree=0;
			this.renderingEnabled=true;
			this.screenAdaptationEnabled=true;
			this._screenMode="none";
			this._scaleMode="noscale";
			this._alignV="top";
			this._alignH="left";
			this._bgColor="black";
			this._mouseMoveTime=0;
			this._renderCount=0;
			this._safariOffsetY=0;
			this._frameStartTime=NaN;
			this._isFocused=false;
			this._isVisibility=false;
			this._scenes=null;
			Stage.__super.call(this);
			this.offset=new Point();
			this._canvasTransform=new Matrix();
			this._previousOrientation=Browser.window.orientation;
			var _$this=this;
			this.transform=Matrix.create();
			this._scenes=[];
			this.mouseEnabled=true;
			this.hitTestPrior=true;
			this.autoSize=false;
			this._displayedInStage=true;
			this._isFocused=true;
			this._isVisibility=true;
			var window=Browser.window;
			var _this=this;
			window.addEventListener("focus",function(){
				_$this._isFocused=true;
				_this.event("focus");
				_this.event("focuschange");
			});
			window.addEventListener("blur",function(){
				_$this._isFocused=false;
				_this.event("blur");
				_this.event("focuschange");
				if (_this._isInputting())Input["inputElement"].target.focus=false;
			});
			var hidden="hidden",state="visibilityState",visibilityChange="visibilitychange";
			var document=window.document;
			if (typeof document.hidden!=="undefined"){
				visibilityChange="visibilitychange";
				state="visibilityState";
				}else if (typeof document.mozHidden!=="undefined"){
				visibilityChange="mozvisibilitychange";
				state="mozVisibilityState";
				}else if (typeof document.msHidden!=="undefined"){
				visibilityChange="msvisibilitychange";
				state="msVisibilityState";
				}else if (typeof document.webkitHidden!=="undefined"){
				visibilityChange="webkitvisibilitychange";
				state="webkitVisibilityState";
			}
			window.document.addEventListener(visibilityChange,visibleChangeFun);
			function visibleChangeFun (){
				if (Browser.document[state]=="hidden"){
					_$this._isVisibility=false;
					if (_this._isInputting())Input["inputElement"].target.focus=false;
					}else {
					_$this._isVisibility=true;
				}
				_this.event("visibilitychange");
			}
			window.addEventListener("resize",function(){
				var orientation=Browser.window.orientation;
				if (orientation !=null && orientation !=_$this._previousOrientation && _this._isInputting()){
					Input["inputElement"].target.focus=false;
				}
				_$this._previousOrientation=orientation;
				if (_this._isInputting())return;
				if (Browser.onSafari)
					_this._safariOffsetY=(Browser.window.__innerHeight || Browser.document.body.clientHeight || Browser.document.documentElement.clientHeight)-Browser.window.innerHeight;
				_this._resetCanvas();
			});
			window.addEventListener("orientationchange",function(e){
				_this._resetCanvas();
			});
			this.on("mousemove",this,this._onmouseMove);
			if (Browser.onMobile)this.on("mousedown",this,this._onmouseMove);
		}

		__class(Stage,'laya.display.Stage',_super);
		var __proto=Stage.prototype;
		/**
		*@private
		*在移动端输入时，输入法弹出期间不进行画布尺寸重置。
		*/
		__proto._isInputting=function(){
			return (Browser.onMobile && Input.isInputting);
		}

		/**@private */
		__proto._changeCanvasSize=function(){
			this.setScreenSize(Browser.clientWidth *Browser.pixelRatio,Browser.clientHeight *Browser.pixelRatio);
		}

		/**@private */
		__proto._resetCanvas=function(){
			if (!this.screenAdaptationEnabled)return;
			var canvas=Render._mainCanvas;
			var canvasStyle=canvas.source.style;
			Laya.timer.once(100,this,this._changeCanvasSize);
		}

		/**
		*设置屏幕大小，场景会根据屏幕大小进行适配。可以动态调用此方法，来更改游戏显示的大小。
		*@param screenWidth 屏幕宽度。
		*@param screenHeight 屏幕高度。
		*/
		__proto.setScreenSize=function(screenWidth,screenHeight){
			var rotation=false;
			if (this._screenMode!=="none"){
				var screenType=screenWidth / screenHeight < 1 ? "vertical" :"horizontal";
				rotation=screenType!==this._screenMode;
				if (rotation){
					var temp=screenHeight;
					screenHeight=screenWidth;
					screenWidth=temp;
				}
			}
			this.canvasRotation=rotation;
			var canvas=Render._mainCanvas;
			var canvasStyle=canvas.source.style;
			var mat=this._canvasTransform.identity();
			var scaleMode=this._scaleMode;
			var scaleX=screenWidth / this.designWidth;
			var scaleY=screenHeight / this.designHeight;
			var canvasWidth=this.designWidth;
			var canvasHeight=this.designHeight;
			var realWidth=screenWidth;
			var realHeight=screenHeight;
			var pixelRatio=Browser.pixelRatio;
			this._width=this.designWidth;
			this._height=this.designHeight;
			switch (scaleMode){
				case "noscale":
					scaleX=scaleY=1;
					realWidth=this.designWidth;
					realHeight=this.designHeight;
					break ;
				case "showall":
					scaleX=scaleY=Math.min(scaleX,scaleY);
					canvasWidth=realWidth=Math.round(this.designWidth *scaleX);
					canvasHeight=realHeight=Math.round(this.designHeight *scaleY);
					break ;
				case "noborder":
					scaleX=scaleY=Math.max(scaleX,scaleY);
					realWidth=Math.round(this.designWidth *scaleX);
					realHeight=Math.round(this.designHeight *scaleY);
					break ;
				case "full":
					scaleX=scaleY=1;
					this._width=canvasWidth=screenWidth;
					this._height=canvasHeight=screenHeight;
					break ;
				case "fixedwidth":
					scaleY=scaleX;
					this._height=canvasHeight=Math.round(screenHeight / scaleX);
					break ;
				case "fixedheight":
					scaleX=scaleY;
					this._width=canvasWidth=Math.round(screenWidth / scaleY);
					break ;
				case "fixedauto":
					if ((screenWidth / screenHeight)< (this.designWidth / this.designHeight)){
						scaleY=scaleX;
						this._height=canvasHeight=Math.round(screenHeight / scaleX);
						}else {
						scaleX=scaleY;
						this._width=canvasWidth=Math.round(screenWidth / scaleY);
					}
					break ;
				}
			scaleX *=this.scaleX;
			scaleY *=this.scaleY;
			if (scaleX===1 && scaleY===1){
				this.transform.identity();
				}else {
				this.transform.a=this._formatData(scaleX / (realWidth / canvasWidth));
				this.transform.d=this._formatData(scaleY / (realHeight / canvasHeight));
				this.conchModel && this.conchModel.scale(this.transform.a,this.transform.d);
			}
			canvas.size(canvasWidth,canvasHeight);
			RunDriver.changeWebGLSize(canvasWidth,canvasHeight);
			mat.scale(realWidth / canvasWidth / pixelRatio,realHeight / canvasHeight / pixelRatio);
			if (this._alignH==="left")this.offset.x=0;
			else if (this._alignH==="right")this.offset.x=screenWidth-realWidth;
			else this.offset.x=(screenWidth-realWidth)*0.5 / pixelRatio;
			if (this._alignV==="top")this.offset.y=0;
			else if (this._alignV==="bottom")this.offset.y=screenHeight-realHeight;
			else this.offset.y=(screenHeight-realHeight)*0.5 / pixelRatio;
			this.offset.x=Math.round(this.offset.x);
			this.offset.y=Math.round(this.offset.y);
			mat.translate(this.offset.x,this.offset.y);
			if (this._safariOffsetY)mat.translate(0,this._safariOffsetY);
			this.canvasDegree=0;
			if (rotation){
				if (this._screenMode==="horizontal"){
					mat.rotate(Math.PI / 2);
					mat.translate(screenHeight / pixelRatio,0);
					this.canvasDegree=90;
					}else {
					mat.rotate(-Math.PI / 2);
					mat.translate(0,screenWidth / pixelRatio);
					this.canvasDegree=-90;
				}
			}
			mat.a=this._formatData(mat.a);
			mat.d=this._formatData(mat.d);
			mat.tx=this._formatData(mat.tx);
			mat.ty=this._formatData(mat.ty);
			canvasStyle.transformOrigin=canvasStyle.webkitTransformOrigin=canvasStyle.msTransformOrigin=canvasStyle.mozTransformOrigin=canvasStyle.oTransformOrigin="0px 0px 0px";
			canvasStyle.transform=canvasStyle.webkitTransform=canvasStyle.msTransform=canvasStyle.mozTransform=canvasStyle.oTransform="matrix("+mat.toString()+")";
			if (this._safariOffsetY)mat.translate(0,-this._safariOffsetY);
			mat.translate(parseInt(canvasStyle.left)|| 0,parseInt(canvasStyle.top)|| 0);
			this.visible=true;
			this._repaint=1;
			this.event("resize");
		}

		/**@private */
		__proto._formatData=function(value){
			if (Math.abs(value)< 0.000001)return 0;
			if (Math.abs(1-value)< 0.001)return value > 0 ? 1 :-1;
			return value;
		}

		/**@inheritDoc */
		__proto.getMousePoint=function(){
			return Point.TEMP.setTo(this.mouseX,this.mouseY);
		}

		/**@inheritDoc */
		__proto.repaint=function(){
			this._repaint=1;
		}

		/**@inheritDoc */
		__proto.parentRepaint=function(){}
		/**@private */
		__proto._loop=function(){
			this.render(Render.context,0,0);
			return true;
		}

		/**@private */
		__proto._onmouseMove=function(e){
			this._mouseMoveTime=Browser.now();
		}

		/**
		*<p>获得距当前帧开始后，过了多少时间，单位为毫秒。</p>
		*<p>可以用来判断函数内时间消耗，通过合理控制每帧函数处理消耗时长，避免一帧做事情太多，对复杂计算分帧处理，能有效降低帧率波动。</p>
		*/
		__proto.getTimeFromFrameStart=function(){
			return Browser.now()-this._frameStartTime;
		}

		/**@inheritDoc */
		__proto.render=function(context,x,y){
			Stat.drawCallOneFrame=0;
			if (this.frameRate==="sleep"){
				var now=Browser.now();
				if (now-this._frameStartTime >=1000)this._frameStartTime=now;
				else return;
			}
			this._renderCount++;
			if (!this._style.visible){
				if (this._renderCount % 5===0){
					Stat.loopCount++;
					MouseManager.instance.runEvent();
					Laya.timer._update();
				}
				return;
			}
			this._frameStartTime=Browser.now();
			var frameMode=this.frameRate==="mouse" ? (((this._frameStartTime-this._mouseMoveTime)< 2000)? "fast" :"slow"):this.frameRate;
			var isFastMode=(frameMode!=="slow");
			var isDoubleLoop=(this._renderCount % 2===0);
			Stat.renderSlow=!isFastMode;
			if (isFastMode || isDoubleLoop){
				Stat.loopCount++;
				MouseManager.instance.runEvent();
				Laya.timer._update();
				var scene;
				var i=0,n=0;
				if (Render.isConchNode){
					for (i=0,n=this._scenes.length;i < n;i++){
						scene=this._scenes[i];
						(scene)&& (scene._updateSceneConch());
					}
					}else {
					for (i=0,n=this._scenes.length;i < n;i++){
						scene=this._scenes[i];
						(scene)&& (scene._updateScene());
					}
				}
				if (Render.isConchNode){
					var customList=Sprite["CustomList"];
					for (i=0,n=customList.length;i < n;i++){
						var customItem=customList[i];
						customItem.customRender(customItem.customContext,0,0);
					}
					return;
				}
			}
			if (Render.isConchNode)return;
			if (this.renderingEnabled && (isFastMode || !isDoubleLoop)){
				if (Render.isWebGL){
					context.clear();
					_super.prototype.render.call(this,context,x,y);
					Stat._show && Stat._sp.render(context,x,y);
					RunDriver.clear(this._bgColor);
					RunDriver.beginFlush();
					context.flush();
					RunDriver.endFinish();
					VectorGraphManager.instance && VectorGraphManager.getInstance().endDispose();
					}else {
					RunDriver.clear(this._bgColor);
					_super.prototype.render.call(this,context,x,y);
					Stat._show && Stat._sp.render(context,x,y);
				}
			}
		}

		/**@private */
		__proto._requestFullscreen=function(){
			var element=Browser.document.documentElement;
			if (element.requestFullscreen){
				element.requestFullscreen();
				}else if (element.mozRequestFullScreen){
				element.mozRequestFullScreen();
				}else if (element.webkitRequestFullscreen){
				element.webkitRequestFullscreen();
				}else if (element.msRequestFullscreen){
				element.msRequestFullscreen();
			}
		}

		/**@private */
		__proto._fullScreenChanged=function(){
			Laya.stage.event("fullscreenchange");
		}

		/**退出全屏模式*/
		__proto.exitFullscreen=function(){
			var document=Browser.document;
			if (document.exitFullscreen){
				document.exitFullscreen();
				}else if (document.mozCancelFullScreen){
				document.mozCancelFullScreen();
				}else if (document.webkitExitFullscreen){
				document.webkitExitFullscreen();
			}
		}

		/**当前视窗由缩放模式导致的 Y 轴缩放系数。*/
		__getset(0,__proto,'clientScaleY',function(){
			return this._transform ? this._transform.getScaleY():1;
		});

		__getset(0,__proto,'width',_super.prototype._$get_width,function(value){
			this.designWidth=value;
			_super.prototype._$set_width.call(this,value);
			Laya.timer.callLater(this,this._changeCanvasSize);
		});

		/**
		*舞台是否获得焦点。
		*/
		__getset(0,__proto,'isFocused',function(){
			return this._isFocused;
		});

		/**
		*<p>水平对齐方式。默认值为"left"。</p>
		*<p><ul>取值范围：
		*<li>"left" ：居左对齐；</li>
		*<li>"center" ：居中对齐；</li>
		*<li>"right" ：居右对齐；</li>
		*</ul></p>
		*/
		__getset(0,__proto,'alignH',function(){
			return this._alignH;
			},function(value){
			this._alignH=value;
			Laya.timer.callLater(this,this._changeCanvasSize);
		});

		__getset(0,__proto,'height',_super.prototype._$get_height,function(value){
			this.designHeight=value;
			_super.prototype._$set_height.call(this,value);
			Laya.timer.callLater(this,this._changeCanvasSize);
		});

		__getset(0,__proto,'transform',function(){
			if (this._tfChanged)this._adjustTransform();
			return this._transform=this._transform|| Matrix.create();
		},_super.prototype._$set_transform);

		/**
		*舞台是否处于可见状态(是否进入后台)。
		*/
		__getset(0,__proto,'isVisibility',function(){
			return this._isVisibility;
		});

		//[Deprecated]
		__getset(0,__proto,'desginWidth',function(){
			console.debug("desginWidth已经弃用，请使用designWidth代替");
			return this.designWidth;
		});

		/**当前视窗由缩放模式导致的 X 轴缩放系数。*/
		__getset(0,__proto,'clientScaleX',function(){
			return this._transform ? this._transform.getScaleX():1;
		});

		//[Deprecated]
		__getset(0,__proto,'desginHeight',function(){
			console.debug("desginHeight已经弃用，请使用designHeight代替");
			return this.designHeight;
		});

		/**
		*<p>缩放模式。默认值为 "noscale"。</p>
		*<p><ul>取值范围：
		*<li>"noscale" ：不缩放；</li>
		*<li>"exactfit" ：全屏不等比缩放；</li>
		*<li>"showall" ：最小比例缩放；</li>
		*<li>"noborder" ：最大比例缩放；</li>
		*<li>"full" ：不缩放，stage的宽高等于屏幕宽高；</li>
		*<li>"fixedwidth" ：宽度不变，高度根据屏幕比缩放；</li>
		*<li>"fixedheight" ：高度不变，宽度根据屏幕比缩放；</li>
		*<li>"fixedauto" ：根据宽高比，自动选择使用fixedwidth或fixedheight；</li>
		*</ul></p>
		*/
		__getset(0,__proto,'scaleMode',function(){
			return this._scaleMode;
			},function(value){
			this._scaleMode=value;
			Laya.timer.callLater(this,this._changeCanvasSize);
		});

		/**
		*<p>垂直对齐方式。默认值为"top"。</p>
		*<p><ul>取值范围：
		*<li>"top" ：居顶部对齐；</li>
		*<li>"middle" ：居中对齐；</li>
		*<li>"bottom" ：居底部对齐；</li>
		*</ul></p>
		*/
		__getset(0,__proto,'alignV',function(){
			return this._alignV;
			},function(value){
			this._alignV=value;
			Laya.timer.callLater(this,this._changeCanvasSize);
		});

		/**舞台的背景颜色，默认为黑色，null为透明。*/
		__getset(0,__proto,'bgColor',function(){
			return this._bgColor;
			},function(value){
			this._bgColor=value;
			this.conchModel && this.conchModel.bgColor(value);
			if (Render.isWebGL){
				if (value && value!=="black" && value!=="#000000"){
					Stage._wgColor=Color$2.create(value)._color;
					}else {
					if (!Browser.onMiniGame)Stage._wgColor=null;
					if(Browser.onMiniGame && (Browser.onIOS || Browser.onIPhone || Browser.onIPad))Stage._wgColor=null;
				}
			}
			if (value){
				Render.canvas.style.background=value;
				}else {
				Render.canvas.style.background="none";
			}
		});

		/**鼠标在 Stage 上的 X 轴坐标。*/
		__getset(0,__proto,'mouseX',function(){
			return Math.round(MouseManager.instance.mouseX / this.clientScaleX);
		});

		/**鼠标在 Stage 上的 Y 轴坐标。*/
		__getset(0,__proto,'mouseY',function(){
			return Math.round(MouseManager.instance.mouseY / this.clientScaleY);
		});

		/**
		*<p>场景布局类型。</p>
		*<p><ul>取值范围：
		*<li>"none" ：不更改屏幕</li>
		*<li>"horizontal" ：自动横屏</li>
		*<li>"vertical" ：自动竖屏</li>
		*</ul></p>
		*/
		__getset(0,__proto,'screenMode',function(){
			return this._screenMode;
			},function(value){
			this._screenMode=value;
		});

		__getset(0,__proto,'visible',_super.prototype._$get_visible,function(value){
			if (this.visible!==value){
				_super.prototype._$set_visible.call(this,value);
				var style=Render._mainCanvas.source.style;
				style.visibility=value ? "visible" :"hidden";
			}
		});

		/**
		*<p>是否开启全屏，用户点击后进入全屏。</p>
		*<p>兼容性提示：部分浏览器不允许点击进入全屏，比如Iphone等。</p>
		*/
		__getset(0,__proto,'fullScreenEnabled',null,function(value){
			var document=Browser.document;
			var canvas=Render.canvas;
			if (value){
				canvas.addEventListener('mousedown',this._requestFullscreen);
				canvas.addEventListener('touchstart',this._requestFullscreen);
				document.addEventListener("fullscreenchange",this._fullScreenChanged);
				document.addEventListener("mozfullscreenchange",this._fullScreenChanged);
				document.addEventListener("webkitfullscreenchange",this._fullScreenChanged);
				document.addEventListener("msfullscreenchange",this._fullScreenChanged);
				}else {
				canvas.removeEventListener('mousedown',this._requestFullscreen);
				canvas.removeEventListener('touchstart',this._requestFullscreen);
				document.removeEventListener("fullscreenchange",this._fullScreenChanged);
				document.removeEventListener("mozfullscreenchange",this._fullScreenChanged);
				document.removeEventListener("webkitfullscreenchange",this._fullScreenChanged);
				document.removeEventListener("msfullscreenchange",this._fullScreenChanged);
			}
		});

		Stage.SCALE_NOSCALE="noscale";
		Stage.SCALE_EXACTFIT="exactfit";
		Stage.SCALE_SHOWALL="showall";
		Stage.SCALE_NOBORDER="noborder";
		Stage.SCALE_FULL="full";
		Stage.SCALE_FIXED_WIDTH="fixedwidth";
		Stage.SCALE_FIXED_HEIGHT="fixedheight";
		Stage.SCALE_FIXED_AUTO="fixedauto";
		Stage.ALIGN_LEFT="left";
		Stage.ALIGN_RIGHT="right";
		Stage.ALIGN_CENTER="center";
		Stage.ALIGN_TOP="top";
		Stage.ALIGN_MIDDLE="middle";
		Stage.ALIGN_BOTTOM="bottom";
		Stage.SCREEN_NONE="none";
		Stage.SCREEN_HORIZONTAL="horizontal";
		Stage.SCREEN_VERTICAL="vertical";
		Stage.FRAME_FAST="fast";
		Stage.FRAME_SLOW="slow";
		Stage.FRAME_MOUSE="mouse";
		Stage.FRAME_SLEEP="sleep";
		Stage._wgColor=null
		return Stage;
	})(Sprite)


	/**
	*@private
	*/
	//class laya.html.dom.HTMLElement extends laya.display.Sprite
	var HTMLElement=(function(_super){
		function HTMLElement(){
			this.URI=null;
			this._href=null;
			HTMLElement.__super.call(this);
			this._text=HTMLElement._EMPTYTEXT;
			this.setStyle(new CSSStyle(this));
			this._getCSSStyle().valign="middle";
			this.mouseEnabled=true;
			this._childRenderMax=true;
		}

		__class(HTMLElement,'laya.html.dom.HTMLElement',_super);
		var __proto=HTMLElement.prototype;
		/**
		*@private
		*/
		__proto.layaoutCallNative=function(){
			var n=0;
			if (this._childs &&(n=this._childs.length)> 0){
				for (var i=0;i < n;i++){
					this._childs[i].layaoutCallNative && this._childs[i].layaoutCallNative();
				}
			};
			var word=this._getWords();
			word&&HTMLElement.fillWords(this,word,0,0,this.style.font,this.style.color);
		}

		__proto.appendChild=function(c){
			return this.addChild(c);
		}

		__proto._getWords=function(){
			var txt=this._text.text;
			if (!txt || txt.length===0)
				return null;
			var words=this._text.words;
			if (words && words.length===txt.length)
				return words;
			words===null && (this._text.words=words=[]);
			words.length=txt.length;
			var size;
			var style=this.style;
			var fontStr=style.font;
			var startX=0;
			for (var i=0,n=txt.length;i < n;i++){
				size=Utils$2.measureText(txt.charAt(i),fontStr);
				var tHTMLChar=words[i]=new HTMLChar(txt.charAt(i),size.width,size.height||style.fontSize,style);
				if (this.href){
					var tSprite=new Sprite();
					this.addChild(tSprite);
					tHTMLChar.setSprite(tSprite);
				}
			}
			return words;
		}

		__proto.showLinkSprite=function(){
			var words=this._text.words;
			if (words){
				var tLinkSpriteList=[];
				var tSprite;
				var tHtmlChar;
				for (var i=0;i < words.length;i++){
					tHtmlChar=words[i];
					tSprite=new Sprite();
					tSprite.graphics.drawRect(0,0,tHtmlChar.width,tHtmlChar.height,"#ff0000");
					tSprite.width=tHtmlChar.width;
					tSprite.height=tHtmlChar.height;
					this.addChild(tSprite);
					tLinkSpriteList.push(tSprite);
				}
			}
		}

		__proto._layoutLater=function(){
			var style=this.style;
			if ((style._type & 0x200))return;
			if (style.widthed(this)&& (this._childs.length>0 || this._getWords()!=null)&& style.block){
				Layout.later(this);
				style._type |=0x200;
			}
			else{
				this.parent && (this.parent)._layoutLater();
			}
		}

		__proto._setAttributes=function(name,value){
			switch (name){
				case 'style':
					this.style.cssText(value);
					return;
				case 'class':
					this.className=value;
					return;
				}
			_super.prototype._setAttributes.call(this,name,value);
		}

		__proto.updateHref=function(){
			if (this._href !=null){
				var words=this._getWords();
				if (words){
					var tHTMLChar;
					var tSprite;
					for (var i=0;i < words.length;i++){
						tHTMLChar=words[i];
						tSprite=tHTMLChar.getSprite();
						if (tSprite){
							var tHeight=tHTMLChar.height-1;
							var dX=tHTMLChar.style.letterSpacing*0.5;
							if (!dX)dX=0;
							tSprite.graphics.drawLine(0-dX,tHeight,tHTMLChar.width+dX,tHeight,tHTMLChar._getCSSStyle().color);
							tSprite.size(tHTMLChar.width,tHTMLChar.height);
							tSprite.on("click",this,this.onLinkHandler);
						}
					}
				}
			}
		}

		__proto.onLinkHandler=function(e){
			switch(e.type){
				case "click":;
					var target=this;
					while (target){
						target.event("link",[this.href]);
						target=target.parent;
					}
					break ;
				}
		}

		__proto.formatURL=function(url){
			if (!this.URI)return url;
			return URL.formatURL(url,this.URI ? this.URI.path :null);
		}

		__getset(0,__proto,'href',function(){
			return this._href;
			},function(url){
			this._href=url;
			if (url !=null){
				this.updateHref();
			}
		});

		__getset(0,__proto,'color',null,function(value){
			this.style.color=value;
		});

		__getset(0,__proto,'onClick',null,function(value){
			var fn;
			eval("fn=function(event){"+value+";}");
			this.on("click",this,fn);
		});

		__getset(0,__proto,'id',null,function(value){
			HTMLDocument.document.setElementById(value,this);
		});

		__getset(0,__proto,'innerTEXT',function(){
			return this._text.text;
			},function(value){
			if ((this.style).decode&&value){
				value=decodeURIComponent(value);
			}
			this.text=value;
		});

		__getset(0,__proto,'style',function(){
			return this._style;
		});

		__getset(0,__proto,'text',function(){
			return this._text.text;
			},function(value){
			if (this._text==HTMLElement._EMPTYTEXT){
				this._text={text:value,words:null};
			}
			else{
				this._text.text=value;
				this._text.words && (this._text.words.length=0);
			}
			this._renderType |=0x800;
			this.repaint();
			this.updateHref();
		});

		__getset(0,__proto,'parent',_super.prototype._$get_parent,function(value){
			if ((value instanceof laya.html.dom.HTMLElement )){
				var p=value;
				this.URI || (this.URI=p.URI);
				this.style.inherit(p.style);
			}
			_super.prototype._$set_parent.call(this,value);
		});

		__getset(0,__proto,'className',null,function(value){
			this.style.attrs(HTMLDocument.document.styleSheets['.'+value]);
		});

		HTMLElement.fillWords=function(ele,words,x,y,font,color){
			ele.graphics.clear();
			for (var i=0,n=words.length;i < n;i++){
				var a=words[i];
				ele.graphics.fillText(a.char,a.x+x,a.y+y,font,color,'left');
			}
		}

		HTMLElement._EMPTYTEXT={text:null,words:null};
		return HTMLElement;
	})(Sprite)


	/**
	*地图的每层都会分块渲染处理
	*本类就是地图的块数据
	*@author ...
	*/
	//class laya.map.GridSprite extends laya.display.Sprite
	var GridSprite=(function(_super){
		function GridSprite(){
			this.relativeX=0;
			this.relativeY=0;
			this.isAloneObject=false;
			this.isHaveAnimation=false;
			this.aniSpriteArray=null;
			this.drawImageNum=0;
			this._map=null;
			GridSprite.__super.call(this);
		}

		__class(GridSprite,'laya.map.GridSprite',_super);
		var __proto=GridSprite.prototype;
		/**
		*传入必要的参数，用于裁剪，跟确认此对象类型
		*@param map 把地图的引用传进来，参与一些裁剪计算
		*@param objectKey true:表示当前GridSprite是个活动对象，可以控制，false:地图层的组成块
		*/
		__proto.initData=function(map,objectKey){
			(objectKey===void 0)&& (objectKey=false);
			this._map=map;
			this.isAloneObject=objectKey;
		}

		/**@private */
		__proto._setDisplay=function(value){
			if (!value){
				var cc=this._$P.cacheCanvas;
				if (cc && cc.ctx){
					cc.ctx.destroy();
					cc.ctx=null;
					this._$P.cacheCanvas=null;
				};
				var fc=this._$P._filterCache;
				if (fc){
					fc.destroy();
					fc.recycle();
					this._set$P('_filterCache',null);
				}
				this._$P._isHaveGlowFilter && this._set$P('_isHaveGlowFilter',false);
			}
			_super.prototype._setDisplay.call(this,value);
		}

		/**
		*把一个动画对象绑定到当前GridSprite
		*@param sprite 动画的显示对象
		*/
		__proto.addAniSprite=function(sprite){
			if (this.aniSpriteArray==null){
				this.aniSpriteArray=[];
			}
			this.aniSpriteArray.push(sprite);
		}

		/**
		*显示当前GridSprite，并把上面的动画全部显示
		*/
		__proto.show=function(){
			if (!this.visible){
				this.visible=true;
				if (!this.isAloneObject){
					var tParent;
					tParent=this.parent;
					if (tParent){
						tParent.showGridSprite(this);
					}
				}
				if (!Render.isWebGL&&this._map.autoCache){
					this.cacheAs=this._map.autoCacheType;
				}
				if (this.aniSpriteArray==null){
					return;
				};
				var tAniSprite;
				for (var i=0;i < this.aniSpriteArray.length;i++){
					tAniSprite=this.aniSpriteArray[i];
					tAniSprite.show();
				}
			}
		}

		/**
		*隐藏当前GridSprite，并把上面绑定的动画全部移除
		*/
		__proto.hide=function(){
			if (this.visible){
				this.visible=false;
				if (!this.isAloneObject){
					var tParent;
					tParent=this.parent;
					if (tParent){
						tParent.hideGridSprite(this);
					}
				}
				if (!Render.isWebGL&&this._map.autoCache){
					this.cacheAs="none";
				}
				if (this.aniSpriteArray==null){
					return;
				};
				var tAniSprite;
				for (var i=0;i < this.aniSpriteArray.length;i++){
					tAniSprite=this.aniSpriteArray[i];
					tAniSprite.hide();
				}
			}
		}

		/**
		*刷新坐标，当我们自己控制一个GridSprite移动时，需要调用此函数，手动刷新
		*/
		__proto.updatePos=function(){
			if (this.isAloneObject){
				if (this._map){
					this.x=this.relativeX;
					this.y=this.relativeY;
				}
				if (this.x < 0 || this.x > this._map.viewPortWidth || this.y < 0 || this.y > this._map.viewPortHeight){
					this.hide();
					}else {
					this.show();
				}
				}else {
				if (this._map){
					this.x=this.relativeX;
					this.y=this.relativeY;
				}
			}
		}

		/**
		*重置当前对象的所有属性
		*/
		__proto.clearAll=function(){
			if (this._map){
				this._map=null;
			};
			var cc=this._$P.cacheCanvas;
			if (cc && cc.ctx){
				cc.ctx.destroy();
				cc.ctx=null;
				this._$P.cacheCanvas=null;
			}
			this.visible=false;
			if (this.aniSpriteArray==null){
				return;
			};
			var tAniSprite;
			for (var i=0;i < this.aniSpriteArray.length;i++){
				tAniSprite=this.aniSpriteArray[i];
				tAniSprite.clearAll();
			}
			this.destroy();
			this.relativeX=0;
			this.relativeY=0;
			this.isHaveAnimation=false;
			this.aniSpriteArray=null;
			this.drawImageNum=0;
		}

		return GridSprite;
	})(Sprite)


	/**
	*地图支持多层渲染（例如，地表层，植被层，建筑层等）
	*本类就是层级类
	*@author ...
	*/
	//class laya.map.MapLayer extends laya.display.Sprite
	var MapLayer=(function(_super){
		function MapLayer(){
			this._map=null;
			this._mapData=null;
			this._tileWidthHalf=0;
			this._tileHeightHalf=0;
			this._mapWidthHalf=0;
			this._mapHeightHalf=0;
			this._gridSpriteArray=[];
			this._objDic=null;
			this._dataDic=null;
			this._properties=null;
			this.tarLayer=null;
			this.layerName=null;
			this._showGridList=[];
			this._aloneObjs=[];
			MapLayer.__super.call(this);
			this._tempMapPos=new Point();
		}

		__class(MapLayer,'laya.map.MapLayer',_super);
		var __proto=MapLayer.prototype;
		/**
		*解析LAYER数据，以及初始化一些数据
		*@param layerData 地图数据中，layer数据的引用
		*@param map 地图的引用
		*/
		__proto.init=function(layerData,map){
			this._map=map;
			this._mapData=layerData.data;
			var tHeight=layerData.height;
			var tWidth=layerData.width;
			var tTileW=map.tileWidth;
			var tTileH=map.tileHeight;
			this.layerName=layerData.name;
			this._properties=layerData.properties;
			this.alpha=layerData.opacity;
			this._tileWidthHalf=tTileW / 2;
			this._tileHeightHalf=tTileH / 2;
			this._mapWidthHalf=this._map.width / 2-this._tileWidthHalf;
			this._mapHeightHalf=this._map.height / 2;
			switch (layerData.type){
				case "tilelayer":
					break ;
				case "objectgroup":;
					var tObjectGid=0;
					var tArray=layerData.objects;
					if (tArray.length > 0){
						this._objDic={};
						this._dataDic={};
					};
					var tObjectData;
					var tObjWidth=NaN;
					var tObjHeight=NaN;
					for (var i=0;i < tArray.length;i++){
						tObjectData=tArray[i];
						this._dataDic[tObjectData.name]=tObjectData;
						if (tObjectData.visible==true){
							tObjWidth=tObjectData.width;
							tObjHeight=tObjectData.height;
							var tSprite=map.getSprite(tObjectData.gid,tObjWidth,tObjHeight);
							if (tSprite !=null){
							switch (this._map.orientation){
								case "isometric":
									this.getScreenPositionByTilePos(tObjectData.x / tTileH,tObjectData.y / tTileH,Point.TEMP);
									tSprite.pivot(tObjWidth / 2,tObjHeight / 2);
									tSprite.rotation=tObjectData.rotation;
									tSprite.x=tSprite.relativeX=Point.TEMP.x+this._map.viewPortX;
									tSprite.y=tSprite.relativeY=Point.TEMP.y+this._map.viewPortY-tObjHeight / 2;
									break ;
								case "staggered":
									tSprite.pivot(tObjWidth / 2,tObjHeight / 2);
									tSprite.rotation=tObjectData.rotation;
									tSprite.x=tSprite.relativeX=tObjectData.x+tObjWidth / 2;
									tSprite.y=tSprite.relativeY=tObjectData.y-tObjHeight / 2;
									break ;
								case "orthogonal":
									tSprite.pivot(tObjWidth / 2,tObjHeight / 2);
									tSprite.rotation=tObjectData.rotation;
									tSprite.x=tSprite.relativeX=tObjectData.x+tObjWidth / 2;
									tSprite.y=tSprite.relativeY=tObjectData.y-tObjHeight / 2;
									break ;
								case "hexagonal":
									tSprite.x=tSprite.relativeX=tObjectData.x;
									tSprite.y=tSprite.relativeY=tObjectData.y;
									break ;
								}
							this.addChild(tSprite);
							this._gridSpriteArray.push(tSprite);
							if (tSprite.isAloneObject){
								this._showGridList.push(tSprite);
								this._aloneObjs.push(tSprite);
							}
							this._objDic[tObjectData.name]=tSprite;
						}
					}
				}
				break ;
			}
		}

		/**
		*通过名字获取控制对象，如果找不到返回为null
		*@param objName 所要获取对象的名字
		*@return
		*/
		__proto.getObjectByName=function(objName){
			if (this._objDic){
				return this._objDic[objName];
			}
			return null;
		}

		/**
		*通过名字获取数据，如果找不到返回为null
		*@param objName 所要获取对象的名字
		*@return
		*/
		__proto.getObjectDataByName=function(objName){
			if (this._dataDic){
				return this._dataDic[objName];
			}
			return null;
		}

		/**
		*得到地图层的自定义属性
		*@param name
		*@return
		*/
		__proto.getLayerProperties=function(name){
			if (this._properties){
				return this._properties[name];
			}
			return null;
		}

		/**
		*得到指定格子的数据
		*@param tileX 格子坐标X
		*@param tileY 格子坐标Y
		*@return
		*/
		__proto.getTileData=function(tileX,tileY){
			if (tileY >=0 && tileY < this._map.numRowsTile && tileX >=0 && tileX < this._map.numColumnsTile){
				var tIndex=tileY *this._map.numColumnsTile+tileX;
				var tMapData=this._mapData;
				if (tMapData !=null && tIndex < tMapData.length){
					return tMapData[tIndex];
				}
			}
			return 0;
		}

		/**
		*通过地图坐标得到屏幕坐标
		*@param tileX 格子坐标X
		*@param tileY 格子坐标Y
		*@param screenPos 把计算好的屏幕坐标数据，放到此对象中
		*/
		__proto.getScreenPositionByTilePos=function(tileX,tileY,screenPos){
			if (screenPos){
				switch (this._map.orientation){
					case "isometric":
						screenPos.x=this._map.width / 2-(tileY-tileX)*this._tileWidthHalf;
						screenPos.y=(tileY+tileX)*this._tileHeightHalf;
						break ;
					case "staggered":
						tileX=Math.floor(tileX);
						tileY=Math.floor(tileY);
						screenPos.x=tileX *this._map.tileWidth+(tileY & 1)*this._tileWidthHalf;
						screenPos.y=tileY *this._tileHeightHalf;
						break ;
					case "orthogonal":
						screenPos.x=tileX *this._map.tileWidth;
						screenPos.y=tileY *this._map.tileHeight;
						break ;
					case "hexagonal":
						tileX=Math.floor(tileX);
						tileY=Math.floor(tileY);
						var tTileHeight=this._map.tileHeight *2 / 3;
						screenPos.x=(tileX *this._map.tileWidth+tileY % 2 *this._tileWidthHalf)% this._map.gridWidth;
						screenPos.y=(tileY *tTileHeight)% this._map.gridHeight;
						break ;
					}
				screenPos.x=(screenPos.x+this._map.viewPortX)*this._map.scale;
				screenPos.y=(screenPos.y+this._map.viewPortY)*this._map.scale;
			}
		}

		/**
		*通过屏幕坐标来获取选中格子的数据
		*@param screenX 屏幕坐标x
		*@param screenY 屏幕坐标y
		*@return
		*/
		__proto.getTileDataByScreenPos=function(screenX,screenY){
			var tData=0;
			if (this.getTilePositionByScreenPos(screenX,screenY,this._tempMapPos)){
				tData=this.getTileData(Math.floor(this._tempMapPos.x),Math.floor(this._tempMapPos.y));
			}
			return tData;
		}

		/**
		*通过屏幕坐标来获取选中格子的索引
		*@param screenX 屏幕坐标x
		*@param screenY 屏幕坐标y
		*@param result 把计算好的格子坐标，放到此对象中
		*@return
		*/
		__proto.getTilePositionByScreenPos=function(screenX,screenY,result){
			screenX=screenX/this._map.scale-this._map.viewPortX;
			screenY=screenY/this._map.scale-this._map.viewPortY;
			var tTileW=this._map.tileWidth;
			var tTileH=this._map.tileHeight;
			var tV=0;
			var tU=0;
			switch (this._map.orientation){
				case "isometric":;
					var tDirX=screenX-this._map.width / 2;
					var tDirY=screenY;
					tV=-(tDirX / tTileW-tDirY / tTileH);
					tU=tDirX / tTileW+tDirY / tTileH;
					if (result){
						result.x=tU;
						result.y=tV;
					}
					return true;
					break ;
				case "staggered":
					if (result){
						var cx=0,cy=0,rx=0,ry=0;
						cx=Math.floor(screenX / tTileW)*tTileW+tTileW / 2;
						cy=Math.floor(screenY / tTileH)*tTileH+tTileH / 2;
						rx=(screenX-cx)*tTileH / 2;
						ry=(screenY-cy)*tTileW / 2;
						if (Math.abs(rx)+Math.abs(ry)<=tTileW *tTileH / 4){
							tU=Math.floor(screenX / tTileW);
							tV=Math.floor(screenY / tTileH)*2;
							}else {
							screenX=screenX-tTileW / 2;
							tU=Math.floor(screenX / tTileW)+1;
							screenY=screenY-tTileH / 2;
							tV=Math.floor(screenY / tTileH)*2+1;
						}
						result.x=tU-(tV & 1);
						result.y=tV;
					}
					return true;
					break ;
				case "orthogonal":
					tU=screenX / tTileW;
					tV=screenY / tTileH;
					if (result){
						result.x=tU;
						result.y=tV;
					}
					return true;
					break ;
				case "hexagonal":;
					var tTileHeight=tTileH *2 / 3;
					tV=screenY / tTileHeight;
					tU=(screenX-tV % 2 *this._tileWidthHalf)/ tTileW;
					if (result){
						result.x=tU;
						result.y=tV;
					}
					break ;
				}
			return false;
		}

		/**
		*得到一个GridSprite
		*@param gridX 当前Grid的X轴索引
		*@param gridY 当前Grid的Y轴索引
		*@return 一个GridSprite对象
		*/
		__proto.getDrawSprite=function(gridX,gridY){
			var tSprite=new GridSprite();
			tSprite.relativeX=gridX *this._map.gridWidth;
			tSprite.relativeY=gridY *this._map.gridHeight;
			tSprite.initData(this._map);
			tSprite.updatePos();
			this._gridSpriteArray.push(tSprite);
			return tSprite;
		}

		/**
		*将gridSprite设为显示状态
		*@param gridSprite
		*/
		__proto.showGridSprite=function(gridSprite){
			var gridList=this._showGridList;
			var i=0,len=0;
			len=gridList.length;
			var ok_i=-1;
			var tGridSprite;
			for (i=0;i < len;i++){
				tGridSprite=gridList[i];
				if (tGridSprite==gridSprite)return;
				if (!tGridSprite.isAloneObject && !tGridSprite.visible){
					ok_i=i;
				}
			}
			if (ok_i >=0){
				gridList[ok_i]=gridSprite;
				}else{
				gridList.push(gridSprite);
			}
		}

		/**
		*将gridSprite设为隐藏状态
		*@param gridSprite
		*
		*/
		__proto.hideGridSprite=function(gridSprite){
			gridSprite.visible=false;
		}

		/**
		*更新此层中块的坐标
		*手动刷新的目的是，保持层级的宽和高保持最小，加快渲染
		*/
		__proto.updateGridPos=function(){
			var tSprite;
			var tList;
			tList=this._showGridList;
			var len=0;
			len=tList.length;
			for (var i=0;i < len;i++){
				tSprite=tList[i];
				if ((tSprite._style.visible || tSprite.isAloneObject)&& tSprite.drawImageNum > 0){
					tSprite.updatePos();
				}
			}
		}

		__proto.updateAloneObject=function(){
			var tSprite;
			var tList;
			tList=this._aloneObjs;
			var len=0;
			len=tList.length;
			for (var i=0;i < len;i++){
				tSprite=tList[i];
				if (tSprite.drawImageNum > 0){
					tSprite.updatePos();
				}
			}
		}

		/**
		*渲染时使用需要更新的列表进行渲染，减少遍历
		*@param context
		*@param x
		*@param y
		*
		*/
		__proto.render=function(context,x,y){
			var childs=this._childs;
			this._childs=this._showGridList;
			_super.prototype.render.call(this,context,x,y);
			this._childs=childs;
		}

		/**
		*@private
		*把tile画到指定的显示对象上
		*@param gridSprite 被指定显示的目标
		*@param tileX 格子的X轴坐标
		*@param tileY 格子的Y轴坐标
		*@return
		*/
		__proto.drawTileTexture=function(gridSprite,tileX,tileY){
			if (tileY >=0 && tileY < this._map.numRowsTile && tileX >=0 && tileX < this._map.numColumnsTile){
				var tIndex=tileY *this._map.numColumnsTile+tileX;
				var tMapData=this._mapData;
				if (tMapData !=null && tIndex < tMapData.length){
					if (tMapData[tIndex] !=0){
						var tTileTexSet=this._map.getTexture(tMapData[tIndex]);
						if (tTileTexSet){
							var tX=0;
							var tY=0;
							var tTexture=tTileTexSet.texture;
							switch (this._map.orientation){
								case "staggered":
									tX=tileX *this._map.tileWidth % this._map.gridWidth+(tileY & 1)*this._tileWidthHalf;
									tY=tileY *this._tileHeightHalf % this._map.gridHeight;
									break ;
								case "orthogonal":
									tX=tileX *this._map.tileWidth % this._map.gridWidth;
									tY=tileY *this._map.tileHeight % this._map.gridHeight;
									break ;
								case "isometric":
									tX=(this._mapWidthHalf+(tileX-tileY)*this._tileWidthHalf)% this._map.gridWidth;
									tY=((tileX+tileY)*this._tileHeightHalf)% this._map.gridHeight;
									break ;
								case "hexagonal":;
									var tTileHeight=this._map.tileHeight *2 / 3;
									tX=(tileX *this._map.tileWidth+tileY % 2 *this._tileWidthHalf)% this._map.gridWidth;
									tY=(tileY *tTileHeight)% this._map.gridHeight;
									break ;
								}
							if (tTileTexSet.isAnimation){
								var tAnimationSprite=new TileAniSprite();
								tAnimationSprite.x=tX;
								tAnimationSprite.y=tY;
								tAnimationSprite.setTileTextureSet(tIndex.toString(),tTileTexSet);
								gridSprite.addAniSprite(tAnimationSprite);
								gridSprite.addChild(tAnimationSprite);
								gridSprite.isHaveAnimation=true;
								}else {
								gridSprite.graphics.drawTexture(tTileTexSet.texture,tX+tTileTexSet.offX,tY+tTileTexSet.offY);
							}
							return true;
						}
					}
				}
			}
			return false;
		}

		/**
		*@private
		*清理当前对象
		*/
		__proto.clearAll=function(){
			this._map=null;
			this._mapData=null;
			this._tileWidthHalf=0;
			this._tileHeightHalf=0;
			this._mapWidthHalf=0;
			this._mapHeightHalf=0;
			this.layerName=null;
			var i=0;
			if (this._objDic){
				for (var p in this._objDic){
					delete this._objDic[p];
				}
				this._objDic=null;
			}
			if (this._dataDic){
				for (var p in this._dataDic){
					delete this._dataDic[p];
				}
				this._dataDic=null;
			};
			var tGridSprite;
			for (i=0;i < this._gridSpriteArray.length;i++){
				tGridSprite=this._gridSpriteArray[i];
				tGridSprite.clearAll();
			}
			this._properties=null;
			this._tempMapPos=null;
			this.tarLayer=null;
		}

		return MapLayer;
	})(Sprite)


	/**
	*TildMap的动画显示对象（一个动画（TileTexSet），可以绑定多个动画显示对象（TileAniSprite））
	*@author ...
	*/
	//class laya.map.TileAniSprite extends laya.display.Sprite
	var TileAniSprite=(function(_super){
		function TileAniSprite(){
			this._tileTextureSet=null;
			this._aniName=null;
			TileAniSprite.__super.call(this);
		}

		__class(TileAniSprite,'laya.map.TileAniSprite',_super);
		var __proto=TileAniSprite.prototype;
		/**
		*确定当前显示对象的名称以及属于哪个动画
		*@param aniName 当前动画显示对象的名字，名字唯一
		*@param tileTextureSet 当前显示对象属于哪个动画（一个动画，可以绑定多个同类显示对象）
		*/
		__proto.setTileTextureSet=function(aniName,tileTextureSet){
			this._aniName=aniName;
			this._tileTextureSet=tileTextureSet;
			tileTextureSet.addAniSprite(this._aniName,this);
		}

		/**
		*把当前动画加入到对应的动画刷新列表中
		*/
		__proto.show=function(){
			this._tileTextureSet.addAniSprite(this._aniName,this);
		}

		/**
		*把当前动画从对应的动画刷新列表中移除
		*/
		__proto.hide=function(){
			this._tileTextureSet.removeAniSprite(this._aniName);
		}

		/**
		*清理
		*/
		__proto.clearAll=function(){
			this._tileTextureSet.removeAniSprite(this._aniName);
			this.destroy();
			this._tileTextureSet=null;
			this._aniName=null;
		}

		return TileAniSprite;
	})(Sprite)


	/**
	*@private
	*<code>FileBitmap</code> 是图片文件资源类。
	*/
	//class laya.resource.FileBitmap extends laya.resource.Bitmap
	var FileBitmap=(function(_super){
		function FileBitmap(){
			this._src=null;
			this._onload=null;
			this._onerror=null;
			FileBitmap.__super.call(this);
		}

		__class(FileBitmap,'laya.resource.FileBitmap',_super);
		var __proto=FileBitmap.prototype;
		/**
		*文件路径全名。
		*/
		__getset(0,__proto,'src',function(){
			return this._src;
			},function(value){
			this._src=value;
		});

		/**
		*载入完成处理函数。
		*/
		__getset(0,__proto,'onload',null,function(value){
		});

		/**
		*错误处理函数。
		*/
		__getset(0,__proto,'onerror',null,function(value){
		});

		return FileBitmap;
	})(Bitmap)


	/**
	*<code>HTMLCanvas</code> 是 Html Canvas 的代理类，封装了 Canvas 的属性和方法。。请不要直接使用 new HTMLCanvas！
	*/
	//class laya.resource.HTMLCanvas extends laya.resource.Bitmap
	var HTMLCanvas=(function(_super){
		function HTMLCanvas(type,canvas){
			//this._ctx=null;
			this._is2D=false;
			HTMLCanvas.__super.call(this);
			var _$this=this;
			this._source=this;
			if (type==="2D" || (type==="AUTO" && !Render.isWebGL)){
				this._is2D=true;
				this._source=canvas || Browser.createElement("canvas");
				this._w=this._source.width;
				this._h=this._source.height;
				var o=this;
				o.getContext=function (contextID,other){
					if (_$this._ctx)return _$this._ctx;
					var ctx=_$this._ctx=_$this._source.getContext(contextID,other);
					if (ctx){
						ctx._canvas=o;
						if(!Render.isFlash)ctx.size=function (w,h){
						};
					}
					return ctx;
				}
			}
		}

		__class(HTMLCanvas,'laya.resource.HTMLCanvas',_super);
		var __proto=HTMLCanvas.prototype;
		/**
		*清空画布内容。
		*/
		__proto.clear=function(){
			this._ctx && this._ctx.clear();
		}

		/**
		*销毁。
		*/
		__proto.destroy=function(){
			this._ctx && this._ctx.destroy();
			this._ctx=null;
			this.dispose();
		}

		/**
		*释放。
		*/
		__proto.release=function(){}
		/**
		*@private
		*设置 Canvas 渲染上下文。
		*@param context Canvas 渲染上下文。
		*/
		__proto._setContext=function(context){
			this._ctx=context;
		}

		/**
		*获取 Canvas 渲染上下文。
		*@param contextID 上下文ID.
		*@param other
		*@return Canvas 渲染上下文 Context 对象。
		*/
		__proto.getContext=function(contextID,other){
			return this._ctx ? this._ctx :(this._ctx=HTMLCanvas._createContext(this));
		}

		/**
		*获取内存大小。
		*@return 内存大小。
		*/
		__proto.getMemSize=function(){
			return 0;
		}

		/**
		*设置宽高。
		*@param w 宽度。
		*@param h 高度。
		*/
		__proto.size=function(w,h){
			if (this._w !=w || this._h !=h){
				this._w=w;
				this._h=h;
				this.memorySize=this._w *this._h *4;
				this._ctx && this._ctx.size(w,h);
				this._source && (this._source.height=h,this._source.width=w);
			}
		}

		__proto.getCanvas=function(){
			return this._source;
		}

		__proto.toBase64=function(type,encoderOptions,callBack){
			if (this._source){
				if (Render.isConchApp && this._source.toBase64){
					this._source.toBase64(type,encoderOptions,callBack);
				}
				else {
					var base64Data=this._source.toDataURL(type,encoderOptions);
					callBack.call(this,base64Data);
				}
			}
		}

		/**
		*Canvas 渲染上下文。
		*/
		__getset(0,__proto,'context',function(){
			return this._ctx;
		});

		/**
		*是否当作 Bitmap 对象。
		*/
		__getset(0,__proto,'asBitmap',null,function(value){
		});

		HTMLCanvas.create=function(type,canvas){
			return new HTMLCanvas(type,canvas);
		}

		HTMLCanvas.TYPE2D="2D";
		HTMLCanvas.TYPE3D="3D";
		HTMLCanvas.TYPEAUTO="AUTO";
		HTMLCanvas._createContext=null
		return HTMLCanvas;
	})(Bitmap)


	/**
	*@private
	*/
	//class laya.resource.HTMLSubImage extends laya.resource.Bitmap
	var HTMLSubImage=(function(_super){
		//请不要直接使用new HTMLSubImage
		function HTMLSubImage(canvas,offsetX,offsetY,width,height,atlasImage,src,allowMerageInAtlas){
			HTMLSubImage.__super.call(this);
			throw new Error("不允许new！");
		}

		__class(HTMLSubImage,'laya.resource.HTMLSubImage',_super);
		HTMLSubImage.create=function(canvas,offsetX,offsetY,width,height,atlasImage,src,allowMerageInAtlas){
			(allowMerageInAtlas===void 0)&& (allowMerageInAtlas=false);
			return new HTMLSubImage(canvas,offsetX,offsetY,width,height,atlasImage,src,allowMerageInAtlas);
		}

		return HTMLSubImage;
	})(Bitmap)


	//class laya.webgl.atlas.AtlasWebGLCanvas extends laya.resource.Bitmap
	var AtlasWebGLCanvas=(function(_super){
		function AtlasWebGLCanvas(){
			this._flashCacheImage=null;
			this._flashCacheImageNeedFlush=false;
			AtlasWebGLCanvas.__super.call(this);
		}

		__class(AtlasWebGLCanvas,'laya.webgl.atlas.AtlasWebGLCanvas',_super);
		var __proto=AtlasWebGLCanvas.prototype;
		/***重新创建资源*/
		__proto.recreateResource=function(){
			this.startCreate();
			var gl=WebGL.mainContext;
			var glTex=this._source=gl.createTexture();
			var preTarget=WebGLContext.curBindTexTarget;
			var preTexture=WebGLContext.curBindTexValue;
			WebGLContext.bindTexture(gl,0x0DE1,glTex);
			var systemInfo=MiniAdpter.systemInfo;
			if(systemInfo && systemInfo.system.indexOf("iOS 8.3")!=-1){
				gl.texImage2D(0x0DE1,0,0x1908,this._w,this._h,0,0x1908,0x1401,new Uint8Array(this._w*this._h*4));
				}else{
				gl.texImage2D(0x0DE1,0,0x1908,this._w,this._h,0,0x1908,0x1401,null);
			}
			gl.texParameteri(0x0DE1,0x2801,0x2601);
			gl.texParameteri(0x0DE1,0x2800,0x2601);
			gl.texParameteri(0x0DE1,0x2802,0x812F);
			gl.texParameteri(0x0DE1,0x2803,0x812F);
			(preTarget && preTexture)&& (WebGLContext.bindTexture(gl,preTarget,preTexture));
			this.memorySize=this._w *this._h *4;
			this.completeCreate();
		}

		/***销毁资源*/
		__proto.detoryResource=function(){
			if (this._source){
				WebGL.mainContext.deleteTexture(this._source);
				this._source=null;
				this.memorySize=0;
			}
		}

		/**采样image到WebGLTexture的一部分*/
		__proto.texSubImage2D=function(xoffset,yoffset,bitmap){
			if (!Render.isFlash){
				var gl=WebGL.mainContext;
				var preTarget=WebGLContext.curBindTexTarget;
				var preTexture=WebGLContext.curBindTexValue;
				WebGLContext.bindTexture(gl,0x0DE1,this._source);
				gl.texSubImage2D(0x0DE1,0,xoffset,yoffset,0x1908,0x1401,bitmap);
				(preTarget && preTexture)&& (WebGLContext.bindTexture(gl,preTarget,preTexture));
				}else {
				if (!this._flashCacheImage){
					this._flashCacheImage=HTMLImage.create("");
					this._flashCacheImage.image.createCanvas(this._w,this._h);
				};
				var bmData=bitmap.bitmapdata;
				this._flashCacheImage.image.copyPixels(bmData,0,0,bmData.width,bmData.height,xoffset,yoffset);
				(this._flashCacheImageNeedFlush)|| (this._flashCacheImageNeedFlush=true);
			}
		}

		/**采样image到WebGLTexture的一部分*/
		__proto.texSubImage2DPixel=function(xoffset,yoffset,width,height,pixel){
			var gl=WebGL.mainContext;
			var preTarget=WebGLContext.curBindTexTarget;
			var preTexture=WebGLContext.curBindTexValue;
			WebGLContext.bindTexture(gl,0x0DE1,this._source);
			var pixels=new Uint8Array(pixel.data);
			gl.texSubImage2D(0x0DE1,0,xoffset,yoffset,width,height,0x1908,0x1401,pixels);
			(preTarget && preTexture)&& (WebGLContext.bindTexture(gl,preTarget,preTexture));
		}

		/***
		*设置图片宽度
		*@param value 图片宽度
		*/
		__getset(0,__proto,'width',_super.prototype._$get_width,function(value){
			this._w=value;
		});

		/***
		*设置图片高度
		*@param value 图片高度
		*/
		__getset(0,__proto,'height',_super.prototype._$get_height,function(value){
			this._h=value;
		});

		__static(AtlasWebGLCanvas,
		['StaticCanvas',function(){return this.StaticCanvas=Browser.document.createElement("canvas");}
		]);
		return AtlasWebGLCanvas;
	})(Bitmap)


	//class laya.webgl.shader.Shader extends laya.webgl.shader.BaseShader
	var Shader=(function(_super){
		function Shader(vs,ps,saveName,nameMap){
			this.customCompile=false;
			//this._nameMap=null;
			//this._vs=null;
			//this._ps=null;
			this._curActTexIndex=0;
			//this._reCompile=false;
			this.tag={};
			//this._vshader=null;
			//this._pshader=null;
			this._program=null;
			this._params=null;
			this._paramsMap={};
			this._offset=0;
			//this._id=0;
			Shader.__super.call(this);
			if ((!vs)|| (!ps))throw "Shader Error";
			if (Render.isConchApp || Render.isFlash){
				this.customCompile=true;
			}
			this._id=++Shader._count;
			this._vs=vs;
			this._ps=ps;
			this._nameMap=nameMap ? nameMap :{};
			saveName !=null && (Shader.sharders[saveName]=this);
		}

		__class(Shader,'laya.webgl.shader.Shader',_super);
		var __proto=Shader.prototype;
		__proto.recreateResource=function(){
			this._compile();
			this.completeCreate();
			this.memorySize=0;
		}

		//忽略尺寸尺寸
		__proto.detoryResource=function(){
			WebGL.mainContext.deleteShader(this._vshader);
			WebGL.mainContext.deleteShader(this._pshader);
			WebGL.mainContext.deleteProgram(this._program);
			this._vshader=this._pshader=this._program=null;
			this._params=null;
			this._paramsMap={};
			this.memorySize=0;
			this._curActTexIndex=0;
		}

		__proto._compile=function(){
			if (!this._vs || !this._ps || this._params)
				return;
			this._reCompile=true;
			this._params=[];
			var text=[this._vs,this._ps];
			var result;
			if (this.customCompile)
				result=ShaderCompile.preGetParams(this._vs,this._ps);
			var gl=WebGL.mainContext;
			this._program=gl.createProgram();
			this._vshader=Shader._createShader(gl,text[0],0x8B31);
			this._pshader=Shader._createShader(gl,text[1],0x8B30);
			gl.attachShader(this._program,this._vshader);
			gl.attachShader(this._program,this._pshader);
			gl.linkProgram(this._program);
			if (!this.customCompile && !gl.getProgramParameter(this._program,0x8B82)){
				throw gl.getProgramInfoLog(this._program);
			};
			var one,i=0,j=0,n=0,location;
			var attribNum=this.customCompile ? result.attributes.length :gl.getProgramParameter(this._program,0x8B89);
			for (i=0;i < attribNum;i++){
				var attrib=this.customCompile ? result.attributes[i] :gl.getActiveAttrib(this._program,i);
				location=gl.getAttribLocation(this._program,attrib.name);
				one={vartype:"attribute",glfun:null,ivartype:0,attrib:attrib,location:location,name:attrib.name,type:attrib.type,isArray:false,isSame:false,preValue:null,indexOfParams:0};
				this._params.push(one);
			};
			var nUniformNum=this.customCompile ? result.uniforms.length :gl.getProgramParameter(this._program,0x8B86);
			for (i=0;i < nUniformNum;i++){
				var uniform=this.customCompile ? result.uniforms[i] :gl.getActiveUniform(this._program,i);
				location=gl.getUniformLocation(this._program,uniform.name);
				one={vartype:"uniform",glfun:null,ivartype:1,attrib:attrib,location:location,name:uniform.name,type:uniform.type,isArray:false,isSame:false,preValue:null,indexOfParams:0};
				if (one.name.indexOf('[0]')> 0){
					one.name=one.name.substr(0,one.name.length-3);
					one.isArray=true;
					one.location=gl.getUniformLocation(this._program,one.name);
				}
				this._params.push(one);
			}
			for (i=0,n=this._params.length;i < n;i++){
				one=this._params[i];
				one.indexOfParams=i;
				one.index=1;
				one.value=[one.location,null];
				one.codename=one.name;
				one.name=this._nameMap[one.codename] ? this._nameMap[one.codename] :one.codename;
				this._paramsMap[one.name]=one;
				one._this=this;
				one.uploadedValue=[];
				if (one.vartype==="attribute"){
					one.fun=this._attribute;
					continue ;
				}
				switch (one.type){
					case 0x1404:
						one.fun=one.isArray ? this._uniform1iv :this._uniform1i;
						break ;
					case 0x1406:
						one.fun=one.isArray ? this._uniform1fv :this._uniform1f;
						break ;
					case 0x8B50:
						one.fun=one.isArray ? this._uniform_vec2v:this._uniform_vec2;
						break ;
					case 0x8B51:
						one.fun=one.isArray ? this._uniform_vec3v:this._uniform_vec3;
						break ;
					case 0x8B52:
						one.fun=one.isArray ? this._uniform_vec4v:this._uniform_vec4;
						break ;
					case 0x8B5E:
						one.fun=this._uniform_sampler2D;
						break ;
					case 0x8B60:
						one.fun=this._uniform_samplerCube;
						break ;
					case 0x8B5C:
						one.glfun=gl.uniformMatrix4fv;
						one.fun=this._uniformMatrix4fv;
						break ;
					case 0x8B56:
						one.fun=this._uniform1i;
						break ;
					case 0x8B5A:
					case 0x8B5B:
						throw new Error("compile shader err!");
						break ;
					default :
						throw new Error("compile shader err!");
						break ;
					}
			}
		}

		/**
		*根据变量名字获得
		*@param name
		*@return
		*/
		__proto.getUniform=function(name){
			return this._paramsMap[name];
		}

		__proto._attribute=function(one,value){
			var gl=WebGL.mainContext;
			var location=one.location;
			gl.enableVertexAttribArray(location);
			gl.vertexAttribPointer(location,value[0],value[1],value[2],value[3],value[4]+this._offset);
			return 2;
		}

		__proto._uniform1f=function(one,value){
			var uploadedValue=one.uploadedValue;
			if (uploadedValue[0]!==value){
				WebGL.mainContext.uniform1f(one.location,uploadedValue[0]=value);
				return 1;
			}
			return 0;
		}

		__proto._uniform1fv=function(one,value){
			if (value.length < 4){
				var uploadedValue=one.uploadedValue;
				if (uploadedValue[0]!==value[0] || uploadedValue[1]!==value[1] || uploadedValue[2]!==value[2] || uploadedValue[3]!==value[3]){
					WebGL.mainContext.uniform1fv(one.location,value);
					uploadedValue[0]=value[0];
					uploadedValue[1]=value[1];
					uploadedValue[2]=value[2];
					uploadedValue[3]=value[3];
					return 1;
				}
				return 0;
				}else {
				WebGL.mainContext.uniform1fv(one.location,value);
				return 1;
			}
		}

		__proto._uniform_vec2=function(one,value){
			var uploadedValue=one.uploadedValue;
			if (uploadedValue[0]!==value[0] || uploadedValue[1]!==value[1]){
				WebGL.mainContext.uniform2f(one.location,uploadedValue[0]=value[0],uploadedValue[1]=value[1]);
				return 1;
			}
			return 0;
		}

		__proto._uniform_vec2v=function(one,value){
			if (value.length < 2){
				var uploadedValue=one.uploadedValue;
				if (uploadedValue[0]!==value[0] || uploadedValue[1]!==value[1] || uploadedValue[2]!==value[2] || uploadedValue[3]!==value[3]){
					WebGL.mainContext.uniform2fv(one.location,value);
					uploadedValue[0]=value[0];
					uploadedValue[1]=value[1];
					uploadedValue[2]=value[2];
					uploadedValue[3]=value[3];
					return 1;
				}
				return 0;
				}else {
				WebGL.mainContext.uniform2fv(one.location,value);
				return 1;
			}
		}

		__proto._uniform_vec3=function(one,value){
			var uploadedValue=one.uploadedValue;
			if (uploadedValue[0]!==value[0] || uploadedValue[1]!==value[1] || uploadedValue[2]!==value[2]){
				WebGL.mainContext.uniform3f(one.location,uploadedValue[0]=value[0],uploadedValue[1]=value[1],uploadedValue[2]=value[2]);
				return 1;
			}
			return 0;
		}

		__proto._uniform_vec3v=function(one,value){
			WebGL.mainContext.uniform3fv(one.location,value);
			return 1;
		}

		__proto._uniform_vec4=function(one,value){
			var uploadedValue=one.uploadedValue;
			if (uploadedValue[0]!==value[0] || uploadedValue[1]!==value[1] || uploadedValue[2]!==value[2] || uploadedValue[3]!==value[3]){
				WebGL.mainContext.uniform4f(one.location,uploadedValue[0]=value[0],uploadedValue[1]=value[1],uploadedValue[2]=value[2],uploadedValue[3]=value[3]);
				return 1;
			}
			return 0;
		}

		__proto._uniform_vec4v=function(one,value){
			WebGL.mainContext.uniform4fv(one.location,value);
			return 1;
		}

		__proto._uniformMatrix2fv=function(one,value){
			WebGL.mainContext.uniformMatrix2fv(one.location,false,value);
			return 1;
		}

		__proto._uniformMatrix3fv=function(one,value){
			WebGL.mainContext.uniformMatrix3fv(one.location,false,value);
			return 1;
		}

		__proto._uniformMatrix4fv=function(one,value){
			WebGL.mainContext.uniformMatrix4fv(one.location,false,value);
			return 1;
		}

		__proto._uniform1i=function(one,value){
			var uploadedValue=one.uploadedValue;
			if (uploadedValue[0]!==value){
				WebGL.mainContext.uniform1i(one.location,uploadedValue[0]=value);
				return 1;
			}
			return 0;
		}

		__proto._uniform1iv=function(one,value){
			WebGL.mainContext.uniform1iv(one.location,value);
			return 1;
		}

		__proto._uniform_ivec2=function(one,value){
			var uploadedValue=one.uploadedValue;
			if (uploadedValue[0]!==value[0] || uploadedValue[1]!==value[1]){
				WebGL.mainContext.uniform2i(one.location,uploadedValue[0]=value[0],uploadedValue[1]=value[1]);
				return 1;
			}
			return 0;
		}

		__proto._uniform_ivec2v=function(one,value){
			WebGL.mainContext.uniform2iv(one.location,value);
			return 1;
		}

		__proto._uniform_vec3i=function(one,value){
			var uploadedValue=one.uploadedValue;
			if (uploadedValue[0]!==value[0] || uploadedValue[1]!==value[1] || uploadedValue[2]!==value[2]){
				WebGL.mainContext.uniform3i(one.location,uploadedValue[0]=value[0],uploadedValue[1]=value[1],uploadedValue[2]=value[2]);
				return 1;
			}
			return 0;
		}

		__proto._uniform_vec3vi=function(one,value){
			WebGL.mainContext.uniform3iv(one.location,value);
			return 1;
		}

		__proto._uniform_vec4i=function(one,value){
			var uploadedValue=one.uploadedValue;
			if (uploadedValue[0]!==value[0] || uploadedValue[1]!==value[1] || uploadedValue[2]!==value[2] || uploadedValue[3]!==value[3]){
				WebGL.mainContext.uniform4i(one.location,uploadedValue[0]=value[0],uploadedValue[1]=value[1],uploadedValue[2]=value[2],uploadedValue[3]=value[3]);
				return 1;
			}
			return 0;
		}

		__proto._uniform_vec4vi=function(one,value){
			WebGL.mainContext.uniform4iv(one.location,value);
			return 1;
		}

		__proto._uniform_sampler2D=function(one,value){
			var gl=WebGL.mainContext;
			var uploadedValue=one.uploadedValue;
			if (uploadedValue[0]==null){
				uploadedValue[0]=this._curActTexIndex;
				gl.uniform1i(one.location,this._curActTexIndex);
				gl.activeTexture(Shader._TEXTURES[this._curActTexIndex]);
				WebGLContext.bindTexture(gl,0x0DE1,value);
				this._curActTexIndex++;
				return 1;
				}else {
				gl.activeTexture(Shader._TEXTURES[uploadedValue[0]]);
				WebGLContext.bindTexture(gl,0x0DE1,value);
				return 0;
			}
		}

		__proto._uniform_samplerCube=function(one,value){
			var gl=WebGL.mainContext;
			var uploadedValue=one.uploadedValue;
			if (uploadedValue[0]==null){
				uploadedValue[0]=this._curActTexIndex;
				gl.uniform1i(one.location,this._curActTexIndex);
				gl.activeTexture(Shader._TEXTURES[this._curActTexIndex]);
				WebGLContext.bindTexture(gl,0x8513,value);
				this._curActTexIndex++;
				return 1;
				}else {
				gl.activeTexture(Shader._TEXTURES[uploadedValue[0]]);
				WebGLContext.bindTexture(gl,0x8513,value);
				return 0;
			}
		}

		__proto._noSetValue=function(one){
			console.log("no....:"+one.name);
		}

		//throw new Error("upload shader err,must set value:"+one.name);
		__proto.uploadOne=function(name,value){
			this.activeResource();
			WebGLContext.UseProgram(this._program);
			var one=this._paramsMap[name];
			one.fun.call(this,one,value);
		}

		__proto.uploadTexture2D=function(value){
			Stat.shaderCall++;
			var gl=WebGL.mainContext;
			gl.activeTexture(0x84C0);
			WebGLContext.bindTexture(gl,0x0DE1,value);
		}

		/**
		*提交shader到GPU
		*@param shaderValue
		*/
		__proto.upload=function(shaderValue,params){
			BaseShader.activeShader=BaseShader.bindShader=this;
			this._lastUseFrameCount===Stat.loopCount || this.activeResource();
			WebGLContext.UseProgram(this._program);
			if (this._reCompile){
				params=this._params;
				this._reCompile=false;
				}else {
				params=params || this._params;
			};
			var gl=WebGL.mainContext;
			var one,value,n=params.length,shaderCall=0;
			for (var i=0;i < n;i++){
				one=params[i];
				if ((value=shaderValue[one.name])!==null)
					shaderCall+=one.fun.call(this,one,value);
			}
			Stat.shaderCall+=shaderCall;
		}

		/**
		*按数组的定义提交
		*@param shaderValue 数组格式[name,value,...]
		*/
		__proto.uploadArray=function(shaderValue,length,_bufferUsage){
			BaseShader.activeShader=this;
			BaseShader.bindShader=this;
			this.activeResource();
			WebGLContext.UseProgram(this._program);
			var params=this._params,value;
			var one,shaderCall=0;
			for (var i=length-2;i >=0;i-=2){
				one=this._paramsMap[shaderValue[i]];
				if (!one)
					continue ;
				value=shaderValue[i+1];
				if (value !=null){
					_bufferUsage && _bufferUsage[one.name] && _bufferUsage[one.name].bind();
					shaderCall+=one.fun.call(this,one,value);
				}
			}
			Stat.shaderCall+=shaderCall;
		}

		/**
		*得到编译后的变量及相关预定义
		*@return
		*/
		__proto.getParams=function(){
			return this._params;
		}

		Shader.getShader=function(name){
			return Shader.sharders[name];
		}

		Shader.create=function(vs,ps,saveName,nameMap){
			return new Shader(vs,ps,saveName,nameMap);
		}

		Shader.withCompile=function(nameID,define,shaderName,createShader){
			if (shaderName && Shader.sharders[shaderName])
				return Shader.sharders[shaderName];
			var pre=Shader._preCompileShader[0.0002 *nameID];
			if (!pre)
				throw new Error("withCompile shader err!"+nameID);
			return pre.createShader(define,shaderName,createShader);
		}

		Shader.withCompile2D=function(nameID,mainID,define,shaderName,createShader){
			if (shaderName && Shader.sharders[shaderName])
				return Shader.sharders[shaderName];
			var pre=Shader._preCompileShader[0.0002 *nameID+mainID];
			if (!pre)
				throw new Error("withCompile shader err!"+nameID+" "+mainID);
			return pre.createShader(define,shaderName,createShader);
		}

		Shader.addInclude=function(fileName,txt){
			ShaderCompile.addInclude(fileName,txt);
		}

		Shader.preCompile=function(nameID,vs,ps,nameMap){
			var id=0.0002 *nameID;
			Shader._preCompileShader[id]=new ShaderCompile(id,vs,ps,nameMap);
		}

		Shader.preCompile2D=function(nameID,mainID,vs,ps,nameMap){
			var id=0.0002 *nameID+mainID;
			Shader._preCompileShader[id]=new ShaderCompile(id,vs,ps,nameMap);
		}

		Shader._createShader=function(gl,str,type){
			var shader=gl.createShader(type);
			gl.shaderSource(shader,str);
			gl.compileShader(shader);
			return shader;
		}

		Shader._TEXTURES=[0x84C0,0x84C1,0x84C2,0x84C3,0x84C4,0x84C5,0x84C6,,0x84C7,0x84C8];
		Shader._count=0;
		Shader._preCompileShader={};
		Shader.SHADERNAME2ID=0.0002;
		Shader.sharders=(Shader.sharders=[],Shader.sharders.length=0x20,Shader.sharders);
		__static(Shader,
		['nameKey',function(){return this.nameKey=new StringKey();}
		]);
		return Shader;
	})(BaseShader)


	//class laya.webgl.resource.WebGLCanvas extends laya.resource.Bitmap
	var WebGLCanvas=(function(_super){
		function WebGLCanvas(){
			this.flipY=true;
			this.premulAlpha=false;
			//this._ctx=null;
			//this._canvas=null;
			//this._imgData=null;
			//this.iscpuSource=false;
			this.alwaysChange=false;
			WebGLCanvas.__super.call(this);
		}

		__class(WebGLCanvas,'laya.webgl.resource.WebGLCanvas',_super);
		var __proto=WebGLCanvas.prototype;
		//}
		__proto.getCanvas=function(){
			return this._canvas;
		}

		__proto.clear=function(){
			this._ctx && this._ctx.clear();
		}

		__proto.destroy=function(){
			this._ctx && this._ctx.destroy();
			this._ctx=null;
		}

		__proto._setContext=function(context){
			this._ctx=context;
		}

		__proto.getContext=function(contextID,other){
			return this._ctx ? this._ctx :(this._ctx=WebGLCanvas._createContext(this));
		}

		__proto.reloadCanvasData=function(){
			var gl=WebGL.mainContext;
			if (!this._source){
				throw "reloadCanvasData error, gl texture not created!";
			};
			var preTarget=WebGLContext.curBindTexTarget;
			var preTexture=WebGLContext.curBindTexValue;
			WebGLContext.bindTexture(gl,0x0DE1,this._source);
			this.premulAlpha&&gl.pixelStorei(0x9241,true);
			gl.texImage2D(0x0DE1,0,0x1908,0x1908,0x1401,this._imgData);
			this.premulAlpha && gl.pixelStorei(0x9241,false);
			gl.pixelStorei(0x9240,0);
			(preTarget && preTexture)&& (WebGLContext.bindTexture(gl,preTarget,preTexture));
		}

		/*override public function copyTo(dec:Bitmap):void {
		super.copyTo(dec);
		(dec as WebGLCanvas)._ctx=_ctx;
	}*/


	__proto.size=function(w,h){
		if (this._w !=w || this._h !=h){
			this._w=w;
			this._h=h;
			this._ctx && this._ctx.size(w,h);
			this._canvas && (this._canvas.height=h,this._canvas.width=w);
		}

	}


	__proto.activeResource=function(force){
		(force===void 0)&& (force=false);
		if (!this._source){
			this.recreateResource();
		}

	}


	__proto.recreateResource=function(){
		this.startCreate();
		this.createWebGlTexture();
		this.completeCreate();
	}


	__proto.detoryResource=function(){
		if (this._source && !this.iscpuSource){
			WebGL.mainContext.deleteTexture(this._source);
			this._source=null;
			this.memorySize=0;
		}

	}


	__proto.createWebGlTexture=function(){
		var gl=WebGL.mainContext;
		if (!this._canvas){
		};

		var glTex=this._source=gl.createTexture();
		this.iscpuSource=false;
		var preTarget=WebGLContext.curBindTexTarget;
		var preTexture=WebGLContext.curBindTexValue;
		WebGLContext.bindTexture(gl,0x0DE1,glTex);
		gl.pixelStorei(0x9240,this.flipY?1:0);
		this.premulAlpha&&gl.pixelStorei(0x9241,true);
		gl.texImage2D(0x0DE1,0,0x1908,0x1908,0x1401,this._imgData);
		this.premulAlpha && gl.pixelStorei(0x9241,false);
		gl.texParameteri(0x0DE1,0x2800,0x2601);
		gl.texParameteri(0x0DE1,0x2801,0x2601);
		gl.texParameteri(0x0DE1,0x2802,0x812F);
		gl.texParameteri(0x0DE1,0x2803,0x812F);
		gl.pixelStorei(0x9240,0);
		this.memorySize=this._w *this._h *4;
		(preTarget && preTexture)&& (WebGLContext.bindTexture(gl,preTarget,preTexture));
	}


	//_canvas=null;
	__proto.texSubImage2D=function(webglCanvas,xoffset,yoffset){
		var gl=WebGL.mainContext;
		var preTarget=WebGLContext.curBindTexTarget;
		var preTexture=WebGLContext.curBindTexValue;
		WebGLContext.bindTexture(gl,0x0DE1,this._source);
		gl.texSubImage2D(0x0DE1,0,xoffset,yoffset,0x1908,0x1401,webglCanvas._source);
		(preTarget && preTexture)&& (WebGLContext.bindTexture(gl,preTarget,preTexture));
	}


	__getset(0,__proto,'context',function(){
		return this._ctx;
	});


	__getset(0,__proto,'source',function(){
		if (this.alwaysChange)this.reloadCanvasData();
		return this._source;
	});


	__getset(0,__proto,'asBitmap',null,function(value){
		this._ctx && (this._ctx.asBitmap=value);
	});


	WebGLCanvas._createContext=null
	return WebGLCanvas;
	})(Bitmap)


	//class laya.webgl.resource.WebGLCharImage extends laya.resource.Bitmap
	var WebGLCharImage=(function(_super){
		function WebGLCharImage(content,drawValue){
			this.CborderSize=12;
			//this._ctx=null;
			//this._allowMerageInAtlas=false;
			//this._enableMerageInAtlas=false;
			//this.canvas=null;
			//this.cw=NaN;
			//this.ch=NaN;
			//this.xs=NaN;
			//this.ys=NaN;
			//this.char=null;
			//this.fillColor=null;
			//this.borderColor=null;
			//this.borderSize=0;
			//this.font=null;
			//this.fontSize=0;
			//this.texture=null;
			//this.lineWidth=0;
			//this.UV=null;
			//this.isSpace=false;
			WebGLCharImage.__super.call(this);
			this.char=content;
			this.isSpace=content===' ';
			this.xs=drawValue.scaleX;
			this.ys=drawValue.scaleY;
			this.font=drawValue.font.toString();
			this.fontSize=drawValue.font.size;
			this.fillColor=drawValue.fillColor;
			this.borderColor=drawValue.borderColor;
			this.lineWidth=drawValue.lineWidth;
			var bIsConchApp=Render.isConchApp;
			var pCanvas;
			if (bIsConchApp){
				pCanvas=ConchTextCanvas;
				pCanvas._source=ConchTextCanvas;
				pCanvas._source.canvas=ConchTextCanvas;
				}else {
				pCanvas=Browser.canvas.source;
			}
			this.canvas=pCanvas;
			this._enableMerageInAtlas=true;
			if (bIsConchApp){
				this._ctx=pCanvas;
				}else {
				this._ctx=this.canvas.getContext('2d',undefined);
			};
			var t=Utils$2.measureText(this.char,this.font);
			this.cw=t.width *this.xs;
			this.ch=(t.height || this.fontSize)*this.ys;
			this.onresize(this.cw+this.CborderSize *2,this.ch+this.CborderSize *2);
			this.texture=new Texture(this);
		}

		__class(WebGLCharImage,'laya.webgl.resource.WebGLCharImage',_super);
		var __proto=WebGLCharImage.prototype;
		Laya.imps(__proto,{"laya.webgl.resource.IMergeAtlasBitmap":true})
		__proto.active=function(){
			this.texture.active();
		}

		__proto.recreateResource=function(){
			this.startCreate();
			var bIsConchApp=Render.isConchApp;
			this.onresize(this.cw+this.CborderSize *2,this.ch+this.CborderSize *2);
			this.canvas && (this.canvas.height=this._h,this.canvas.width=this._w);
			if (bIsConchApp){
				var nFontSize=this.fontSize;
				if (this.xs !=1 || this.ys !=1){
					nFontSize=parseInt(nFontSize *((this.xs > this.ys)? this.xs :this.ys)+"");
				};
				var sFont="normal 100 "+nFontSize+"px Arial";
				if (this.borderColor){
					sFont+=" 1 "+this.borderColor;
				}
				this._ctx.font=sFont;
				this._ctx.textBaseline="top";
				this._ctx.fillStyle=this.fillColor;
				this._ctx.fillText(this.char,this.CborderSize,this.CborderSize,null,null,null);
				}else {
				this._ctx.save();
				(this._ctx).clearRect(0,0,this.cw+this.CborderSize *2,this.ch+this.CborderSize *2);
				this._ctx.font=this.font;
				this._ctx.textBaseline="top";
				this._ctx.translate(this.CborderSize,this.CborderSize);
				if (this.xs !=1 || this.ys !=1){
					this._ctx.scale(this.xs,this.ys);
				}
				if (this.fillColor && this.borderColor){
					this._ctx.strokeStyle=this.borderColor;
					this._ctx.lineWidth=this.lineWidth;
					this._ctx.strokeText(this.char,0,0,null,null,0,null);
					this._ctx.fillStyle=this.fillColor;
					this._ctx.fillText(this.char,0,0,null,null,null);
					}else {
					if (this.lineWidth===-1){
						this._ctx.fillStyle=this.fillColor ? this.fillColor :"white";
						this._ctx.fillText(this.char,0,0,null,null,null);
						}else {
						this._ctx.strokeStyle=this.borderColor?this.borderColor:'white';
						this._ctx.lineWidth=this.lineWidth;
						this._ctx.strokeText(this.char,0,0,null,null,0,null);
					}
				}
				this._ctx.restore();
			}
			this.borderSize=this.CborderSize;
			this.completeCreate();
		}

		__proto.onresize=function(w,h){
			this._w=w;
			this._h=h;
			this._w=Math.min(this._w,AtlasResourceManager.atlasLimitWidth-1);
			this._h=Math.min(this._h,AtlasResourceManager.atlasLimitHeight-1);
			if ((this._w < AtlasResourceManager.atlasLimitWidth && this._h < AtlasResourceManager.atlasLimitHeight)){
				this._allowMerageInAtlas=true
				}else {
				this._allowMerageInAtlas=false;
				throw new Error("文字尺寸超出大图合集限制！");
			}
		}

		__proto.clearAtlasSource=function(){}
		/**
		*是否创建私有Source
		*@return 是否创建
		*/
		__getset(0,__proto,'allowMerageInAtlas',function(){
			return this._allowMerageInAtlas;
		});

		__getset(0,__proto,'atlasSource',function(){
			return this.canvas;
		});

		/**
		*是否创建私有Source,通常禁止修改
		*@param value 是否创建
		*/
		/**
		*是否创建私有Source
		*@return 是否创建
		*/
		__getset(0,__proto,'enableMerageInAtlas',function(){
			return this._enableMerageInAtlas;
			},function(value){
			this._enableMerageInAtlas=value;
		});

		WebGLCharImage.createOneChar=function(content,drawValue){
			var char=new WebGLCharImage(content,drawValue);
			return char;
		}

		return WebGLCharImage;
	})(Bitmap)


	//class laya.webgl.resource.WebGLRenderTarget extends laya.resource.Bitmap
	var WebGLRenderTarget=(function(_super){
		function WebGLRenderTarget(width,height,surfaceFormat,surfaceType,depthStencilFormat,mipMap,repeat,minFifter,magFifter){
			//this._frameBuffer=null;
			//this._depthStencilBuffer=null;
			//this._surfaceFormat=0;
			//this._surfaceType=0;
			//this._depthStencilFormat=0;
			//this._mipMap=false;
			//this._repeat=false;
			//this._minFifter=0;
			//this._magFifter=0;
			(surfaceFormat===void 0)&& (surfaceFormat=0x1908);
			(surfaceType===void 0)&& (surfaceType=0x1401);
			(depthStencilFormat===void 0)&& (depthStencilFormat=0x84F9);
			(mipMap===void 0)&& (mipMap=false);
			(repeat===void 0)&& (repeat=false);
			(minFifter===void 0)&& (minFifter=-1);
			(magFifter===void 0)&& (magFifter=1);
			WebGLRenderTarget.__super.call(this);
			this._w=width;
			this._h=height;
			this._surfaceFormat=surfaceFormat;
			this._surfaceType=surfaceType;
			this._depthStencilFormat=depthStencilFormat;
			this._mipMap=mipMap;
			this._repeat=repeat;
			this._minFifter=minFifter;
			this._magFifter=magFifter;
		}

		__class(WebGLRenderTarget,'laya.webgl.resource.WebGLRenderTarget',_super);
		var __proto=WebGLRenderTarget.prototype;
		__proto.recreateResource=function(){
			this.startCreate();
			var gl=WebGL.mainContext;
			this._frameBuffer || (this._frameBuffer=gl.createFramebuffer());
			this._source || (this._source=gl.createTexture());
			var preTarget=WebGLContext.curBindTexTarget;
			var preTexture=WebGLContext.curBindTexValue;
			WebGLContext.bindTexture(gl,0x0DE1,this._source);
			var systemInfo=MiniAdpter.systemInfo;
			if(systemInfo && systemInfo.system.indexOf("iOS 8.3")!=-1){
				gl.texImage2D(0x0DE1,0,0x1908,this._w,this._h,0,this._surfaceFormat,this._surfaceType,new Uint8Array(this._w*this._h*4));
				}else{
				gl.texImage2D(0x0DE1,0,0x1908,this._w,this._h,0,this._surfaceFormat,this._surfaceType,null);
			};
			var minFifter=this._minFifter;
			var magFifter=this._magFifter;
			var repeat=this._repeat ? 0x2901 :0x812F;
			var isPot=Arith.isPOT(this._w,this._h);
			if (isPot){
				if (this._mipMap)
					(minFifter!==-1)|| (minFifter=0x2703);
				else
				(minFifter!==-1)|| (minFifter=0x2601);
				(magFifter!==-1)|| (magFifter=0x2601);
				gl.texParameteri(0x0DE1,0x2801,minFifter);
				gl.texParameteri(0x0DE1,0x2800,magFifter);
				gl.texParameteri(0x0DE1,0x2802,repeat);
				gl.texParameteri(0x0DE1,0x2803,repeat);
				this._mipMap && gl.generateMipmap(0x0DE1);
				}else {
				(minFifter!==-1)|| (minFifter=0x2601);
				(magFifter!==-1)|| (magFifter=0x2601);
				gl.texParameteri(0x0DE1,0x2801,minFifter);
				gl.texParameteri(0x0DE1,0x2800,magFifter);
				gl.texParameteri(0x0DE1,0x2802,0x812F);
				gl.texParameteri(0x0DE1,0x2803,0x812F);
			}
			gl.bindFramebuffer(0x8D40,this._frameBuffer);
			gl.framebufferTexture2D(0x8D40,0x8CE0,0x0DE1,this._source,0);
			if (this._depthStencilFormat){
				this._depthStencilBuffer || (this._depthStencilBuffer=gl.createRenderbuffer());
				gl.bindRenderbuffer(0x8D41,this._depthStencilBuffer);
				gl.renderbufferStorage(0x8D41,this._depthStencilFormat,this._w,this._h);
				switch (this._depthStencilFormat){
					case 0x81A5:
						gl.framebufferRenderbuffer(0x8D40,0x8D00,0x8D41,this._depthStencilBuffer);
						break ;
					case 0x8D48:
						gl.framebufferRenderbuffer(0x8D40,0x8D20,0x8D41,this._depthStencilBuffer);
						break ;
					case 0x84F9:
						gl.framebufferRenderbuffer(0x8D40,0x821A,0x8D41,this._depthStencilBuffer);
						break ;
					}
			}
			gl.bindFramebuffer(0x8D40,null);
			(preTarget && preTexture)&& (WebGLContext.bindTexture(gl,preTarget,preTexture));
			gl.bindRenderbuffer(0x8D41,null);
			this.memorySize=this._w *this._h *4;
			this.completeCreate();
		}

		__proto.detoryResource=function(){
			if (this._frameBuffer){
				WebGL.mainContext.deleteTexture(this._source);
				WebGL.mainContext.deleteFramebuffer(this._frameBuffer);
				WebGL.mainContext.deleteRenderbuffer(this._depthStencilBuffer);
				this._source=null;
				this._frameBuffer=null;
				this._depthStencilBuffer=null;
				this.memorySize=0;
			}
		}

		__getset(0,__proto,'depthStencilBuffer',function(){
			return this._depthStencilBuffer;
		});

		__getset(0,__proto,'frameBuffer',function(){
			return this._frameBuffer;
		});

		return WebGLRenderTarget;
	})(Bitmap)


	//class laya.webgl.resource.WebGLSubImage extends laya.resource.Bitmap
	var WebGLSubImage=(function(_super){
		function WebGLSubImage(canvas,offsetX,offsetY,width,height,atlasImage,src){
			//this._ctx=null;
			//this._allowMerageInAtlas=false;
			//this._enableMerageInAtlas=false;
			//this.canvas=null;
			//this.repeat=false;
			//this.mipmap=false;
			//this.minFifter=0;
			//this.magFifter=0;
			//this.atlasImage=null;
			this.offsetX=0;
			this.offsetY=0;
			//this.src=null;
			WebGLSubImage.__super.call(this);
			this.repeat=true;
			this.mipmap=false;
			this.minFifter=-1;
			this.magFifter=-1;
			this.atlasImage=atlasImage;
			this.canvas=canvas;
			this._ctx=canvas.getContext('2d',undefined);
			this._w=width;
			this._h=height;
			this.offsetX=offsetX;
			this.offsetY=offsetY;
			this.src=src;
			this._enableMerageInAtlas=true;
			(AtlasResourceManager.enabled)&& (this._w < AtlasResourceManager.atlasLimitWidth && this._h < AtlasResourceManager.atlasLimitHeight)? this._allowMerageInAtlas=true :this._allowMerageInAtlas=false;
		}

		__class(WebGLSubImage,'laya.webgl.resource.WebGLSubImage',_super);
		var __proto=WebGLSubImage.prototype;
		Laya.imps(__proto,{"laya.webgl.resource.IMergeAtlasBitmap":true})
		/*override public function copyTo(dec:Bitmap):void {
		var d:WebGLSubImage=dec as WebGLSubImage;
		super.copyTo(dec);
		d._ctx=_ctx;
	}*/


	__proto.size=function(w,h){
		this._w=w;
		this._h=h;
		this._ctx && this._ctx.size(w,h);
		this.canvas && (this.canvas.height=h,this.canvas.width=w);
	}


	__proto.recreateResource=function(){
		this.startCreate();
		this.size(this._w,this._h);
		this._ctx.drawImage(this.atlasImage,this.offsetX,this.offsetY,this._w,this._h,0,0,this._w,this._h);
		(!(this._allowMerageInAtlas && this._enableMerageInAtlas))? (this.createWebGlTexture()):(this.memorySize=0);
		this.completeCreate();
	}


	__proto.createWebGlTexture=function(){
		var gl=WebGL.mainContext;
		if (!this.canvas){
			throw "create GLTextur err:no data:"+this.canvas;
		};

		var glTex=this._source=gl.createTexture();
		var preTarget=WebGLContext.curBindTexTarget;
		var preTexture=WebGLContext.curBindTexValue;
		WebGLContext.bindTexture(gl,0x0DE1,glTex);
		gl.texImage2D(0x0DE1,0,0x1908,0x1908,0x1401,this.canvas);
		var minFifter=this.minFifter;
		var magFifter=this.magFifter;
		var repeat=this.repeat ? 0x2901 :0x812F;
		var isPOT=Arith.isPOT(this.width,this.height);
		if (isPOT){
			if (this.mipmap)
				(minFifter!==-1)|| (minFifter=0x2703);
			else
			(minFifter!==-1)|| (minFifter=0x2601);
			(magFifter!==-1)|| (magFifter=0x2601);
			gl.texParameteri(0x0DE1,0x2800,magFifter);
			gl.texParameteri(0x0DE1,0x2801,minFifter);
			gl.texParameteri(0x0DE1,0x2802,repeat);
			gl.texParameteri(0x0DE1,0x2803,repeat);
			this.mipmap && gl.generateMipmap(0x0DE1);
			}else {
			(minFifter!==-1)|| (minFifter=0x2601);
			(magFifter!==-1)|| (magFifter=0x2601);
			gl.texParameteri(0x0DE1,0x2801,minFifter);
			gl.texParameteri(0x0DE1,0x2800,magFifter);
			gl.texParameteri(0x0DE1,0x2802,0x812F);
			gl.texParameteri(0x0DE1,0x2803,0x812F);
		}

		(preTarget && preTexture)&& (WebGLContext.bindTexture(gl,preTarget,preTexture));
		this.canvas=null;
		this.memorySize=this._w *this._h *4;
	}


	__proto.detoryResource=function(){
		if (!(AtlasResourceManager.enabled && this._allowMerageInAtlas)&& this._source){
			WebGL.mainContext.deleteTexture(this._source);
			this._source=null;
			this.memorySize=0;
		}

	}


	//}
	__proto.clearAtlasSource=function(){}
	//canvas=null;//资源恢复时问题
	__proto.dispose=function(){
		this.resourceManager.removeResource(this);
		_super.prototype.dispose.call(this);
	}


	/**
	*是否创建私有Source
	*@return 是否创建
	*/
	__getset(0,__proto,'allowMerageInAtlas',function(){
		return this._allowMerageInAtlas;
	});


	//public var createFromPixel:Boolean=true;
	__getset(0,__proto,'atlasSource',function(){
		return this.canvas;
	});


	/**
	*是否创建私有Source,通常禁止修改
	*@param value 是否创建
	*/
	/**
	*是否创建私有Source
	*@return 是否创建
	*/
	__getset(0,__proto,'enableMerageInAtlas',function(){
		return this._allowMerageInAtlas;
		},function(value){

		this._allowMerageInAtlas=value;
	});


	return WebGLSubImage;
	})(Bitmap)


	//class laya.webgl.utils.Buffer2D extends laya.webgl.utils.Buffer
	var Buffer2D=(function(_super){
		function Buffer2D(){
			this._maxsize=0;
			this._bufferSize=0;
			this._upload=true;
			this._uploadSize=0;
			Buffer2D.__super.call(this);
			this.lock=true;
		}

		__class(Buffer2D,'laya.webgl.utils.Buffer2D',_super);
		var __proto=Buffer2D.prototype;
		__proto.setByteLength=function(value){
			if (this._byteLength===value)
				return;
			if (value > this._bufferSize)
				this._resizeBuffer(value *2+256,true);
			this._byteLength=value;
		}

		__proto._bufferData=function(){
			this._maxsize=Math.max(this._maxsize,this._byteLength);
			if (Stat.loopCount % 30==0){
				if (this._buffer.byteLength > (this._maxsize+64)){
					this.memorySize=this._buffer.byteLength;
					this._buffer=this._buffer.slice(0,this._maxsize+64);
					this._checkArrayUse();
				}
				this._maxsize=this._byteLength;
			}
			this._bufferSize=this._buffer.byteLength;
			if (this._uploadSize < this._bufferSize){
				this._uploadSize=this._bufferSize;
				Buffer._gl.bufferData(this._bufferType,this._uploadSize,this._bufferUsage);
				this.memorySize=this._uploadSize;
			}
			Buffer._gl.bufferSubData(this._bufferType,0,this._buffer);
		}

		__proto._bufferSubData=function(offset,dataStart,dataLength){
			(offset===void 0)&& (offset=0);
			(dataStart===void 0)&& (dataStart=0);
			(dataLength===void 0)&& (dataLength=0);
			this._maxsize=Math.max(this._maxsize,this._byteLength);
			if (Stat.loopCount % 30==0){
				if (this._buffer.byteLength > (this._maxsize+64)){
					this.memorySize=this._buffer.byteLength;
					this._buffer=this._buffer.slice(0,this._maxsize+64);
					this._checkArrayUse();
				}
				this._maxsize=this._byteLength;
			}
			this._bufferSize=this._buffer.byteLength;
			if (this._uploadSize <this._bufferSize){
				this._uploadSize=this._bufferSize;
				Buffer._gl.bufferData(this._bufferType,this._uploadSize,this._bufferUsage);
				this.memorySize=this._uploadSize;
			}
			if (dataStart || dataLength){
				var subBuffer=this._buffer.slice(dataStart,dataLength);
				Buffer._gl.bufferSubData(this._bufferType,offset,subBuffer);
				}else {
				Buffer._gl.bufferSubData(this._bufferType,offset,this._buffer);
			}
		}

		__proto._checkArrayUse=function(){}
		__proto._bind_upload=function(){
			if (!this._upload)
				return false;
			this._upload=false;
			this._bind();
			this._bufferData();
			return true;
		}

		__proto._bind_subUpload=function(offset,dataStart,dataLength){
			(offset===void 0)&& (offset=0);
			(dataStart===void 0)&& (dataStart=0);
			(dataLength===void 0)&& (dataLength=0);
			if (!this._upload)
				return false;
			this._upload=false;
			this._bind();
			this._bufferSubData(offset,dataStart,dataLength);
			return true;
		}

		__proto._resizeBuffer=function(nsz,copy){
			if (nsz < this._bufferSize)
				return this;
			this.memorySize=nsz;
			if (copy && this._buffer && this._bufferSize > 0){
				var newbuffer=new ArrayBuffer(nsz);
				var n=new Uint8Array(newbuffer);
				n.set(new Uint8Array(this._buffer),0);
				this._buffer=newbuffer;
				this._bufferSize=this._buffer.byteLength;
				}else{
				this._buffer=new ArrayBuffer(nsz);
				this._bufferSize=nsz;
			}
			this._checkArrayUse();
			this._upload=true;
			return this;
		}

		__proto.append=function(data){
			this._upload=true;
			var byteLen=0,n;
			byteLen=data.byteLength;
			if ((data instanceof Uint8Array)){
				this._resizeBuffer(this._byteLength+byteLen,true);
				n=new Uint8Array(this._buffer,this._byteLength);
				}else if ((data instanceof Uint16Array)){
				this._resizeBuffer(this._byteLength+byteLen,true);
				n=new Uint16Array(this._buffer,this._byteLength);
				}else if ((data instanceof Float32Array)){
				this._resizeBuffer(this._byteLength+byteLen,true);
				n=new Float32Array(this._buffer,this._byteLength);
			}
			n.set(data,0);
			this._byteLength+=byteLen;
			this._checkArrayUse();
		}

		__proto.appendEx=function(data,type){
			this._upload=true;
			var byteLen=0,n;
			byteLen=data.byteLength;
			this._resizeBuffer(this._byteLength+byteLen,true);
			n=new type(this._buffer,this._byteLength);
			n.set(data,0);
			this._byteLength+=byteLen;
			this._checkArrayUse();
		}

		__proto.appendEx2=function(data,type,dataLen,perDataLen){
			(perDataLen===void 0)&& (perDataLen=1);
			this._upload=true;
			var byteLen=0,n;
			byteLen=dataLen*perDataLen;
			this._resizeBuffer(this._byteLength+byteLen,true);
			n=new type(this._buffer,this._byteLength);
			var i=0;
			for (i=0;i < dataLen;i++){
				n[i]=data[i];
			}
			this._byteLength+=byteLen;
			this._checkArrayUse();
		}

		__proto.getBuffer=function(){
			return this._buffer;
		}

		__proto.setNeedUpload=function(){
			this._upload=true;
		}

		__proto.getNeedUpload=function(){
			return this._upload;
		}

		__proto.upload=function(){
			var scuess=this._bind_upload();
			Buffer._gl.bindBuffer(this._bufferType,null);
			Buffer._bindActive[this._bufferType]=null;
			BaseShader.activeShader=null
			return scuess;
		}

		__proto.subUpload=function(offset,dataStart,dataLength){
			(offset===void 0)&& (offset=0);
			(dataStart===void 0)&& (dataStart=0);
			(dataLength===void 0)&& (dataLength=0);
			var scuess=this._bind_subUpload();
			Buffer._gl.bindBuffer(this._bufferType,null);
			Buffer._bindActive[this._bufferType]=null;
			BaseShader.activeShader=null
			return scuess;
		}

		__proto.detoryResource=function(){
			_super.prototype.detoryResource.call(this);
			this._upload=true;
			this._uploadSize=0;
			this._bufferSize=0;
		}

		__proto.clear=function(){
			this._byteLength=0;
			this._upload=true;
		}

		__getset(0,__proto,'bufferLength',function(){
			return this._buffer.byteLength;
		});

		__getset(0,__proto,'byteLength',_super.prototype._$get_byteLength,function(value){
			if (this._byteLength===value)
				return;
			value <=this._bufferSize || (this._resizeBuffer(value *2+256,true));
			this._byteLength=value;
		});

		Buffer2D.__int__=function(gl){
			IndexBuffer2D.QuadrangleIB=IndexBuffer2D.create(0x88E4);
			GlUtils.fillIBQuadrangle(IndexBuffer2D.QuadrangleIB,16);
		}

		Buffer2D.FLOAT32=4;
		Buffer2D.SHORT=2;
		return Buffer2D;
	})(Buffer)


	//class laya.webgl.shader.d2.value.TextSV extends laya.webgl.shader.d2.value.TextureSV
	var TextSV=(function(_super){
		function TextSV(args){
			TextSV.__super.call(this,0x40);
			this.defines.add(0x40);
		}

		__class(TextSV,'laya.webgl.shader.d2.value.TextSV',_super);
		var __proto=TextSV.prototype;
		__proto.release=function(){
			TextSV.pool[TextSV._length++]=this;
			this.clear();
		}

		__proto.clear=function(){
			_super.prototype.clear.call(this);
		}

		TextSV.create=function(){
			if (TextSV._length)return TextSV.pool[--TextSV._length];
			else return new TextSV(null);
		}

		TextSV.pool=[];
		TextSV._length=0;
		return TextSV;
	})(TextureSV)


	/**
	*<p> <code>Animation</code> 是Graphics动画类。实现了基于Graphics的动画创建、播放、控制接口。</p>
	*<p>本类使用了动画模版缓存池，它以一定的内存开销来节省CPU开销，当相同的动画模版被多次使用时，相比于每次都创建新的动画模版，使用动画模版缓存池，只需创建一次，缓存之后多次复用，从而节省了动画模版创建的开销。</p>
	*<p>动画模版缓存池，以key-value键值对存储，key可以自定义，也可以从指定的配置文件中读取，value为对应的动画模版，是一个Graphics对象数组，每个Graphics对象对应一个帧图像，动画的播放实质就是定时切换Graphics对象。</p>
	*<p>使用set source、loadImages(...)、loadAtlas(...)、loadAnimation(...)方法可以创建动画模版。使用play(...)可以播放指定动画。</p>
	*@example <caption>以下示例代码，创建了一个 <code>Text</code> 实例。</caption>
	*package
	*{
		*import laya.display.Animation;
		*import laya.net.Loader;
		*import laya.utils.Handler;
		*public class Animation_Example
		*{
			*public function Animation_Example()
			*{
				*Laya.init(640,800);//设置游戏画布宽高、渲染模式。
				*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
				*init();//初始化
				*}
			*private function init():void
			*{
				*var animation:Animation=new Animation();//创建一个 Animation 类的实例对象 animation 。
				*animation.loadAtlas("resource/ani/fighter.json");//加载图集并播放
				*animation.x=200;//设置 animation 对象的属性 x 的值，用于控制 animation 对象的显示位置。
				*animation.y=200;//设置 animation 对象的属性 x 的值，用于控制 animation 对象的显示位置。
				*animation.interval=50;//设置 animation 对象的动画播放间隔时间，单位：毫秒。
				*animation.play();//播放动画。
				*Laya.stage.addChild(animation);//将 animation 对象添加到显示列表。
				*}
			*}
		*}
	*
	*@example
	*Animation_Example();
	*function Animation_Example(){
		*Laya.init(640,800);//设置游戏画布宽高、渲染模式。
		*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
		*init();//初始化
		*}
	*function init()
	*{
		*var animation=new Laya.Animation();//创建一个 Animation 类的实例对象 animation 。
		*animation.loadAtlas("resource/ani/fighter.json");//加载图集并播放
		*animation.x=200;//设置 animation 对象的属性 x 的值，用于控制 animation 对象的显示位置。
		*animation.y=200;//设置 animation 对象的属性 x 的值，用于控制 animation 对象的显示位置。
		*animation.interval=50;//设置 animation 对象的动画播放间隔时间，单位：毫秒。
		*animation.play();//播放动画。
		*Laya.stage.addChild(animation);//将 animation 对象添加到显示列表。
		*}
	*
	*@example
	*import Animation=laya.display.Animation;
	*class Animation_Example {
		*constructor(){
			*Laya.init(640,800);//设置游戏画布宽高、渲染模式。
			*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
			*this.init();
			*}
		*private init():void {
			*var animation:Animation=new Laya.Animation();//创建一个 Animation 类的实例对象 animation 。
			*animation.loadAtlas("resource/ani/fighter.json");//加载图集并播放
			*animation.x=200;//设置 animation 对象的属性 x 的值，用于控制 animation 对象的显示位置。
			*animation.y=200;//设置 animation 对象的属性 x 的值，用于控制 animation 对象的显示位置。
			*animation.interval=50;//设置 animation 对象的动画播放间隔时间，单位：毫秒。
			*animation.play();//播放动画。
			*Laya.stage.addChild(animation);//将 animation 对象添加到显示列表。
			*}
		*}
	*new Animation_Example();
	*/
	//class laya.display.Animation extends laya.display.AnimationPlayerBase
	var Animation=(function(_super){
		function Animation(){
			this._frames=null;
			this._url=null;
			Animation.__super.call(this);
			this._setControlNode(this);
		}

		__class(Animation,'laya.display.Animation',_super);
		var __proto=Animation.prototype;
		/**@inheritDoc */
		__proto.destroy=function(destroyChild){
			(destroyChild===void 0)&& (destroyChild=true);
			this.stop();
			laya.display.Sprite.prototype.destroy.call(this,destroyChild);
			this._frames=null;
			this._labels=null;
		}

		/**
		*<p>开始播放动画。会在动画模版缓存池中查找key值为name的动画模版，存在则用此动画模版初始化当前序列帧， 如果不存在，则使用当前序列帧。</p>
		*<p>play(...)方法被设计为在创建实例后的任何时候都可以被调用，调用后就处于播放状态，当相应的资源加载完毕、调用动画帧填充方法(set frames)或者将实例显示在舞台上时，会判断是否处于播放状态，如果是，则开始播放。</p>
		*<p>配合wrapMode属性，可设置动画播放顺序类型。</p>
		*@param start （可选）指定动画播放开始的索引(int)或帧标签(String)。帧标签可以通过addLabel(...)和removeLabel(...)进行添加和删除。
		*@param loop （可选）是否循环播放。
		*@param name （可选）动画模板在动画模版缓存池中的key，也可认为是动画名称。如果name为空，则播放当前动画序列帧；如果不为空，则在动画模版缓存池中寻找key值为name的动画模版，如果存在则用此动画模版初始化当前序列帧并播放，如果不存在，则仍然播放当前动画序列帧；如果没有当前动画的帧数据，则不播放，但该实例仍然处于播放状态。
		*/
		__proto.play=function(start,loop,name){
			(start===void 0)&& (start=0);
			(loop===void 0)&& (loop=true);
			(name===void 0)&& (name="");
			if (name)this._setFramesFromCache(name,true);
			this._isPlaying=true;
			this.index=((typeof start=='string'))? this._getFrameByLabel(start):start;
			this.loop=loop;
			this._actionName=name;
			this._isReverse=this.wrapMode==1;
			if (this._frames && this.interval > 0){
				this.timerLoop(this.interval,this,this._frameLoop,null,true,true);
			}
		}

		/**@private */
		__proto._setFramesFromCache=function(name,showWarn){
			(showWarn===void 0)&& (showWarn=false);
			if (this._url)name=this._url+"#"+name;
			if (name && Animation.framesMap[name]){
				var tAniO;
				tAniO=Animation.framesMap[name];
				if ((tAniO instanceof Array)){
					this._frames=Animation.framesMap[name];
					this._count=this._frames.length;
					}else {
					if (tAniO.nodeRoot){
						Animation.framesMap[name]=this._parseGraphicAnimationByData(tAniO);
						tAniO=Animation.framesMap[name];
					}
					this._frames=tAniO.frames;
					this._count=this._frames.length;
					if (!this._frameRateChanged)this._interval=tAniO.interval;
					this._labels=this._copyLabels(tAniO.labels);
				}
				return true;
				}else {
				if (showWarn)console.log("ani not found:",name);
			}
			return false;
		}

		/**@private */
		__proto._copyLabels=function(labels){
			if (!labels)return null;
			var rst;
			rst={};
			var key;
			for (key in labels){
				rst[key]=Utils$2.copyArray([],labels[key]);
			}
			return rst;
		}

		/**@private */
		__proto._frameLoop=function(){
			if (this._style.visible && this._style.alpha > 0.01){
				_super.prototype._frameLoop.call(this);
			}
		}

		/**@private */
		__proto._displayToIndex=function(value){
			if (this._frames)this.graphics=this._frames[value];
		}

		/**
		*停止动画播放，并清理对象属性。之后可存入对象池，方便对象复用。
		*/
		__proto.clear=function(){
			this.stop();
			this.graphics=null;
			this._frames=null;
			this._labels=null;
		}

		/**
		*<p>根据指定的动画模版初始化当前动画序列帧。选择动画模版的过程如下：1. 动画模版缓存池中key为cacheName的动画模版；2. 如果不存在，则加载指定的图片集合并创建动画模版。注意：只有指定不为空的cacheName，才能将创建好的动画模版以此为key缓存到动画模版缓存池，否则不进行缓存。</p>
		*<p>动画模版缓存池是以一定的内存开销来节省CPU开销，当相同的动画模版被多次使用时，相比于每次都创建新的动画模版，使用动画模版缓存池，只需创建一次，缓存之后多次复用，从而节省了动画模版创建的开销。</p>
		*<p>因为返回值为Animation对象本身，所以可以使用如下语法：loadImages(...).loadImages(...).play(...);。</p>
		*@param urls 图片路径集合。需要创建动画模版时，会以此为数据源。参数形如：[url1,url2,url3,...]。
		*@param cacheName （可选）动画模板在动画模版缓存池中的key。如果此参数不为空，表示使用动画模版缓存池。如果动画模版缓存池中存在key为cacheName的动画模版，则使用此模版。否则，创建新的动画模版，如果cacheName不为空，则以cacheName为key缓存到动画模版缓存池中，如果cacheName为空，不进行缓存。
		*@return 返回Animation对象本身。
		*/
		__proto.loadImages=function(urls,cacheName){
			(cacheName===void 0)&& (cacheName="");
			this._url="";
			if (!this._setFramesFromCache(cacheName)){
				this.frames=Animation.framesMap[cacheName] ? Animation.framesMap[cacheName] :Animation.createFrames(urls,cacheName);
			}
			return this;
		}

		/**
		*<p>根据指定的动画模版初始化当前动画序列帧。选择动画模版的过程如下：1. 动画模版缓存池中key为cacheName的动画模版；2. 如果不存在，则加载指定的图集并创建动画模版。</p>
		*<p>注意：只有指定不为空的cacheName，才能将创建好的动画模版以此为key缓存到动画模版缓存池，否则不进行缓存。</p>
		*<p>动画模版缓存池是以一定的内存开销来节省CPU开销，当相同的动画模版被多次使用时，相比于每次都创建新的动画模版，使用动画模版缓存池，只需创建一次，缓存之后多次复用，从而节省了动画模版创建的开销。</p>
		*<p>因为返回值为Animation对象本身，所以可以使用如下语法：loadAtlas(...).loadAtlas(...).play(...);。</p>
		*@param url 图集路径。需要创建动画模版时，会以此为数据源。
		*@param loaded （可选）使用指定图集初始化动画完毕的回调。
		*@param cacheName （可选）动画模板在动画模版缓存池中的key。如果此参数不为空，表示使用动画模版缓存池。如果动画模版缓存池中存在key为cacheName的动画模版，则使用此模版。否则，创建新的动画模版，如果cacheName不为空，则以cacheName为key缓存到动画模版缓存池中，如果cacheName为空，不进行缓存。
		*@return 返回动画本身。
		*/
		__proto.loadAtlas=function(url,loaded,cacheName){
			(cacheName===void 0)&& (cacheName="");
			this._url="";
			var _this=this;
			if (!_this._setFramesFromCache(cacheName)){
				function onLoaded (loadUrl){
					if (url===loadUrl){
						_this.frames=Animation.framesMap[cacheName] ? Animation.framesMap[cacheName] :Animation.createFrames(url,cacheName);
						if (loaded)loaded.run();
					}
				}
				if (Loader.getAtlas(url))onLoaded(url);
				else Laya.loader.load(url,Handler.create(null,onLoaded,[url]),null,"atlas");
			}
			return this;
		}

		/**
		*<p>加载并解析由LayaAir IDE制作的动画文件，此文件中可能包含多个动画。默认帧率为在IDE中设计的帧率，如果调用过set interval，则使用此帧间隔对应的帧率。加载后创建动画模版，并缓存到动画模版缓存池，key "url#动画名称" 对应相应动画名称的动画模板，key "url#" 对应动画模版集合的默认动画模版。</p>
		*<p>注意：如果调用本方法前，还没有预加载动画使用的图集，请将atlas参数指定为对应的图集路径，否则会导致动画创建失败。</p>
		*<p>动画模版缓存池是以一定的内存开销来节省CPU开销，当相同的动画模版被多次使用时，相比于每次都创建新的动画模版，使用动画模版缓存池，只需创建一次，缓存之后多次复用，从而节省了动画模版创建的开销。</p>
		*<p>因为返回值为Animation对象本身，所以可以使用如下语法：loadAnimation(...).loadAnimation(...).play(...);。</p>
		*@param url 动画文件路径。可由LayaAir IDE创建并发布。
		*@param loaded （可选）使用指定动画资源初始化动画完毕的回调。
		*@param atlas （可选）动画用到的图集地址（可选）。
		*@return 返回动画本身。
		*/
		__proto.loadAnimation=function(url,loaded,atlas){
			this._url=url;
			var _this=this;
			if (!this._actionName)this._actionName="";
			if (!_this._setFramesFromCache("")){
				if (!atlas || Loader.getAtlas(atlas)){
					this._loadAnimationData(url,loaded,atlas);
					}else {
					Laya.loader.load(atlas,Handler.create(this,this._loadAnimationData,[url,loaded,atlas]),null,"atlas")
				}
				}else {
				_this._setFramesFromCache(this._actionName,true);
				if (loaded)loaded.run();
			}
			return this;
		}

		/**@private */
		__proto._loadAnimationData=function(url,loaded,atlas){
			var _$this=this;
			if (atlas && !Loader.getAtlas(atlas)){
				console.warn("atlas load fail:"+atlas);
				return;
			};
			var _this=this;
			function onLoaded (loadUrl){
				if (!Loader.getRes(loadUrl))return;
				if (url===loadUrl){
					var tAniO;
					if (!Animation.framesMap[url+"#"]){
						var aniData=_this._parseGraphicAnimation(Loader.getRes(url));
						if (!aniData)return;
						var aniList=aniData.animationList;
						var i=0,len=aniList.length;
						var defaultO;
						for (i=0;i < len;i++){
							tAniO=aniList[i];
							Animation.framesMap[url+"#"+tAniO.name]=tAniO;
							if (!defaultO)defaultO=tAniO;
						}
						if (defaultO){
							Animation.framesMap[url+"#"]=defaultO;
							_this._setFramesFromCache(_$this._actionName,true);
							_$this.index=0;
						}
						_$this._checkResumePlaying();
						}else {
						_this._setFramesFromCache(_$this._actionName,true);
						_$this.index=0;
						_$this._checkResumePlaying();
					}
					if (loaded)loaded.run();
				}
			}
			if (Loader.getRes(url))onLoaded(url);
			else Laya.loader.load(url,Handler.create(null,onLoaded,[url]),null,"json");
			Loader.clearRes(url);
		}

		/**@private */
		__proto._parseGraphicAnimation=function(animationData){
			return GraphicAnimation.parseAnimationData(animationData);
		}

		/**@private */
		__proto._parseGraphicAnimationByData=function(animationObject){
			return GraphicAnimation.parseAnimationByData(animationObject);
		}

		/**
		*当前动画的帧图像数组。本类中，每个帧图像是一个Graphics对象，而动画播放就是定时切换Graphics对象的过程。
		*/
		__getset(0,__proto,'frames',function(){
			return this._frames;
			},function(value){
			this._frames=value;
			if (value){
				this._count=value.length;
				if (this._isPlaying)this.play(this._index,this.loop,this._actionName);
				else this.index=this._index;
			}
		});

		/**
		*是否自动播放，默认为false。如果设置为true，则动画被创建并添加到舞台后自动播放。
		*/
		__getset(0,__proto,'autoPlay',null,function(value){
			if (value)this.play();
			else this.stop();
		});

		/**
		*<p>动画数据源。</p>
		*<p>类型如下：<br/>
		*1. LayaAir IDE动画文件路径：使用此类型需要预加载所需的图集资源，否则会创建失败，如果不想预加载或者需要创建完毕的回调，请使用loadAnimation(...)方法；<br/>
		*2. 图集路径：使用此类型创建的动画模版不会被缓存到动画模版缓存池中，如果需要缓存或者创建完毕的回调，请使用loadAtlas(...)方法；<br/>
		*3. 图片路径集合：使用此类型创建的动画模版不会被缓存到动画模版缓存池中，如果需要缓存，请使用loadImages(...)方法。</p>
		*@param value 数据源。比如：图集："xx/a1.atlas"；图片集合："a1.png,a2.png,a3.png"；LayaAir IDE动画"xx/a1.ani"。
		*/
		__getset(0,__proto,'source',null,function(value){
			if (value.indexOf(".ani")>-1)this.loadAnimation(value);
			else if (value.indexOf(".json")>-1 || value.indexOf("als")>-1 || value.indexOf("atlas")>-1)this.loadAtlas(value);
			else this.loadImages(value.split(","));
		});

		/**
		*设置自动播放的动画名称，在LayaAir IDE中可以创建的多个动画组成的动画集合，选择其中一个动画名称进行播放。
		*/
		__getset(0,__proto,'autoAnimation',null,function(value){
			this.play(0,true,value);
		});

		Animation.createFrames=function(url,name){
			var arr;
			if ((typeof url=='string')){
				var atlas=Loader.getAtlas(url);
				if (atlas && atlas.length){
					arr=[];
					for (var i=0,n=atlas.length;i < n;i++){
						var g=new Graphics();
						g.drawTexture(Loader.getRes(atlas[i]),0,0);
						arr.push(g);
					}
				}
				}else if ((url instanceof Array)){
				arr=[];
				for (i=0,n=url.length;i < n;i++){
					g=new Graphics();
					g.loadImage(url[i],0,0);
					arr.push(g);
				}
			}
			if (name)Animation.framesMap[name]=arr;
			return arr;
		}

		Animation.clearCache=function(key){
			var cache=Animation.framesMap;
			var val;
			var key2=key+"#";
			for (val in cache){
				if (val===key || val.indexOf(key2)==0){
					delete Animation.framesMap[val];
				}
			}
		}

		Animation.framesMap={};
		return Animation;
	})(AnimationPlayerBase)


	/**
	*<code>Button</code> 组件用来表示常用的多态按钮。 <code>Button</code> 组件可显示文本标签、图标或同时显示两者。 *
	*<p>可以是单态，两态和三态，默认三态(up,over,down)。</p>
	*
	*@example <caption>以下示例代码，创建了一个 <code>Button</code> 实例。</caption>
	*package
	*{
		*import laya.ui.Button;
		*import laya.utils.Handler;
		*public class Button_Example
		*{
			*public function Button_Example()
			*{
				*Laya.init(640,800);//设置游戏画布宽高。
				*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
				*Laya.loader.load("resource/ui/button.png",Handler.create(this,onLoadComplete));//加载资源。
				*}
			*private function onLoadComplete():void
			*{
				*trace("资源加载完成！");
				*var button:Button=new Button("resource/ui/button.png","label");//创建一个 Button 类的实例对象 button ,并传入它的皮肤。
				*button.x=100;//设置 button 对象的属性 x 的值，用于控制 button 对象的显示位置。
				*button.y=100;//设置 button 对象的属性 y 的值，用于控制 button 对象的显示位置。
				*button.clickHandler=new Handler(this,onClickButton,[button]);//设置 button 的点击事件处理器。
				*Laya.stage.addChild(button);//将此 button 对象添加到显示列表。
				*}
			*private function onClickButton(button:Button):void
			*{
				*trace("按钮button被点击了！");
				*}
			*}
		*}
	*@example
	*Laya.init(640,800);//设置游戏画布宽高、渲染模式。
	*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
	*Laya.loader.load("resource/ui/button.png",laya.utils.Handler.create(this,loadComplete));//加载资源
	*function loadComplete()
	*{
		*console.log("资源加载完成！");
		*var button=new laya.ui.Button("resource/ui/button.png","label");//创建一个 Button 类的实例对象 button ,传入它的皮肤skin和标签label。
		*button.x=100;//设置 button 对象的属性 x 的值，用于控制 button 对象的显示位置。
		*button.y=100;//设置 button 对象的属性 y 的值，用于控制 button 对象的显示位置。
		*button.clickHandler=laya.utils.Handler.create(this,onClickButton,[button],false);//设置 button 的点击事件处理函数。
		*Laya.stage.addChild(button);//将此 button 对象添加到显示列表。
		*}
	*function onClickButton(button)
	*{
		*console.log("按钮被点击了。",button);
		*}
	*@example
	*import Button=laya.ui.Button;
	*import Handler=laya.utils.Handler;
	*class Button_Example{
		*constructor()
		*{
			*Laya.init(640,800);
			*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
			*Laya.loader.load("resource/ui/button.png",laya.utils.Handler.create(this,this.onLoadComplete));//加载资源。
			*}
		*private onLoadComplete()
		*{
			*var button:Button=new Button("resource/ui/button.png","label");//创建一个 Button 类的实例对象 button ,并传入它的皮肤。
			*button.x=100;//设置 button 对象的属性 x 的值，用于控制 button 对象的显示位置。
			*button.y=100;//设置 button 对象的属性 y 的值，用于控制 button 对象的显示位置。
			*button.clickHandler=new Handler(this,this.onClickButton,[button]);//设置 button 的点击事件处理器。
			*Laya.stage.addChild(button);//将此 button 对象添加到显示列表。
			*}
		*private onClickButton(button:Button):void
		*{
			*console.log("按钮button被点击了！")
			*}
		*}
	*/
	//class laya.ui.Button extends laya.ui.Component
	var Button=(function(_super){
		function Button(skin,label){
			this.toggle=false;
			this._bitmap=null;
			this._text=null;
			this._strokeColors=null;
			this._state=0;
			this._selected=false;
			this._skin=null;
			this._autoSize=true;
			this._sources=null;
			this._clickHandler=null;
			this._stateChanged=false;
			Button.__super.call(this);
			this._labelColors=Styles.buttonLabelColors;
			this._stateNum=Styles.buttonStateNum;
			(label===void 0)&& (label="");
			this.skin=skin;
			this.label=label;
		}

		__class(Button,'laya.ui.Button',_super);
		var __proto=Button.prototype;
		Laya.imps(__proto,{"laya.ui.ISelect":true})
		/**@inheritDoc */
		__proto.destroy=function(destroyChild){
			(destroyChild===void 0)&& (destroyChild=true);
			_super.prototype.destroy.call(this,destroyChild);
			this._bitmap && this._bitmap.destroy();
			this._text && this._text.destroy(destroyChild);
			this._bitmap=null;
			this._text=null;
			this._clickHandler=null;
			this._labelColors=this._sources=this._strokeColors=null;
		}

		/**@inheritDoc */
		__proto.createChildren=function(){
			this.graphics=this._bitmap=new AutoBitmap();
		}

		/**@private */
		__proto.createText=function(){
			if (!this._text){
				this._text=new Text();
				this._text.overflow=Text.HIDDEN;
				this._text.align="center";
				this._text.valign="middle";
				this._text.width=this._width;
				this._text.height=this._height;
			}
		}

		/**@inheritDoc */
		__proto.initialize=function(){
			if (this._mouseEnableState!==1){
				this.mouseEnabled=true;
				this._setBit(0x2,true);
			}
			this._createListener("mouseover",this,this.onMouse,null,false,false);
			this._createListener("mouseout",this,this.onMouse,null,false,false);
			this._createListener("mousedown",this,this.onMouse,null,false,false);
			this._createListener("mouseup",this,this.onMouse,null,false,false);
			this._createListener("click",this,this.onMouse,null,false,false);
		}

		/**
		*对象的 <code>Event.MOUSE_OVER、Event.MOUSE_OUT、Event.MOUSE_DOWN、Event.MOUSE_UP、Event.CLICK</code> 事件侦听处理函数。
		*@param e Event 对象。
		*/
		__proto.onMouse=function(e){
			if (this.toggle===false && this._selected)return;
			if (e.type==="click"){
				this.toggle && (this.selected=!this._selected);
				this._clickHandler && this._clickHandler.run();
				return;
			}
			!this._selected && (this.state=Button.stateMap[e.type]);
		}

		/**
		*@private
		*对象的资源切片发生改变。
		*/
		__proto.changeClips=function(){
			var img=Loader.getRes(this._skin);
			if (!img){
				console.log("lose skin",this._skin);
				return;
			};
			var width=img.sourceWidth;
			var height=img.sourceHeight / this._stateNum;
			img.$_GID || (img.$_GID=Utils$2.getGID());
			var key=img.$_GID+"-"+this._stateNum;
			var clips=AutoBitmap.getCache(key);
			if (clips)this._sources=clips;
			else {
				this._sources=[];
				if (this._stateNum===1){
					this._sources.push(img);
					}else {
					for (var i=0;i < this._stateNum;i++){
						this._sources.push(Texture.createFromTexture(img,0,height *i,width,height));
					}
				}
				AutoBitmap.setCache(key,this._sources);
			}
			if (this._autoSize){
				this._bitmap.width=this._width || width;
				this._bitmap.height=this._height || height;
				if (this._text){
					this._text.width=this._bitmap.width;
					this._text.height=this._bitmap.height;
				}
				}else {
				this._text && (this._text.x=width);
			}
		}

		/**
		*@private
		*改变对象的状态。
		*/
		__proto.changeState=function(){
			this._stateChanged=false;
			this.runCallLater(this.changeClips);
			var index=this._state < this._stateNum ? this._state :this._stateNum-1;
			this._sources && (this._bitmap.source=this._sources[index]);
			if (this.label){
				this._text.color=this._labelColors[index];
				if (this._strokeColors)this._text.strokeColor=this._strokeColors[index];
			}
		}

		/**@private */
		__proto._setStateChanged=function(){
			if (!this._stateChanged){
				this._stateChanged=true;
				this.callLater(this.changeState);
			}
		}

		/**
		*<p>描边颜色，以字符串表示。</p>
		*默认值为 "#000000"（黑色）;
		*@see laya.display.Text.strokeColor()
		*/
		__getset(0,__proto,'labelStrokeColor',function(){
			this.createText();
			return this._text.strokeColor;
			},function(value){
			this.createText();
			this._text.strokeColor=value
		});

		/**
		*@inheritDoc
		*/
		__getset(0,__proto,'measureHeight',function(){
			this.runCallLater(this.changeClips);
			return this._text ? Math.max(this._bitmap.height,this._text.height):this._bitmap.height;
		});

		/**
		*<p>对象的皮肤资源地址。</p>
		*支持单态，两态和三态，用 <code>stateNum</code> 属性设置
		*<p>对象的皮肤地址，以字符串表示。</p>
		*@see #stateNum
		*/
		__getset(0,__proto,'skin',function(){
			return this._skin;
			},function(value){
			if (this._skin !=value){
				this._skin=value;
				this.callLater(this.changeClips);
				this._setStateChanged();
			}
		});

		/**
		*对象的状态值。
		*@see #stateMap
		*/
		__getset(0,__proto,'state',function(){
			return this._state;
			},function(value){
			if (this._state !=value){
				this._state=value;
				this._setStateChanged();
			}
		});

		/**
		*按钮文本标签 <code>Text</code> 控件。
		*/
		__getset(0,__proto,'text',function(){
			this.createText();
			return this._text;
		});

		/**
		*<p>指定对象的状态值，以数字表示。</p>
		*<p>默认值为3。此值决定皮肤资源图片的切割方式。</p>
		*<p><b>取值：</b>
		*<li>1：单态。图片不做切割，按钮的皮肤状态只有一种。</li>
		*<li>2：两态。图片将以竖直方向被等比切割为2部分，从上向下，依次为
		*弹起状态皮肤、
		*按下和经过及选中状态皮肤。</li>
		*<li>3：三态。图片将以竖直方向被等比切割为3部分，从上向下，依次为
		*弹起状态皮肤、
		*经过状态皮肤、
		*按下和选中状态皮肤</li>
		*</p>
		*/
		__getset(0,__proto,'stateNum',function(){
			return this._stateNum;
			},function(value){
			if (this._stateNum !=value){
				this._stateNum=value < 1 ? 1 :value > 3 ? 3 :value;
				this.callLater(this.changeClips);
			}
		});

		/**
		*表示按钮各个状态下的描边颜色。
		*<p><b>格式:</b> "upColor,overColor,downColor,disableColor"。</p>
		*/
		__getset(0,__proto,'strokeColors',function(){
			return this._strokeColors ? this._strokeColors.join(","):"";
			},function(value){
			this._strokeColors=UIUtils.fillArray(Styles.buttonLabelColors,value,String);
			this._setStateChanged();
		});

		/**
		*表示按钮各个状态下的文本颜色。
		*<p><b>格式:</b> "upColor,overColor,downColor,disableColor"。</p>
		*/
		__getset(0,__proto,'labelColors',function(){
			return this._labelColors.join(",");
			},function(value){
			this._labelColors=UIUtils.fillArray(Styles.buttonLabelColors,value,String);
			this._setStateChanged();
		});

		/**
		*@inheritDoc
		*/
		__getset(0,__proto,'measureWidth',function(){
			this.runCallLater(this.changeClips);
			if (this._autoSize)return this._bitmap.width;
			this.runCallLater(this.changeState);
			return this._bitmap.width+(this._text ? this._text.width :0);
		});

		/**
		*按钮的文本内容。
		*/
		__getset(0,__proto,'label',function(){
			return this._text ? this._text.text :null;
			},function(value){
			if (!this._text && !value)return;
			this.createText();
			if (this._text.text !=value){
				value && !this._text.parent && this.addChild(this._text);
				this._text.text=(value+"").replace(/\\n/g,"\n");
				this._setStateChanged();
			}
		});

		/**
		*表示按钮的选中状态。
		*<p>如果值为true，表示该对象处于选中状态。否则该对象处于未选中状态。</p>
		*/
		__getset(0,__proto,'selected',function(){
			return this._selected;
			},function(value){
			if (this._selected !=value){
				this._selected=value;
				this.state=this._selected ? 2 :0;
				this.event("change");
			}
		});

		/**
		*表示按钮文本标签的边距。
		*<p><b>格式：</b>"上边距,右边距,下边距,左边距"。</p>
		*/
		__getset(0,__proto,'labelPadding',function(){
			this.createText();
			return this._text.padding.join(",");
			},function(value){
			this.createText();
			this._text.padding=UIUtils.fillArray(Styles.labelPadding,value,Number);
		});

		/**
		*表示按钮文本标签的字体大小。
		*@see laya.display.Text.fontSize()
		*/
		__getset(0,__proto,'labelSize',function(){
			this.createText();
			return this._text.fontSize;
			},function(value){
			this.createText();
			this._text.fontSize=value
		});

		/**
		*<p>描边宽度（以像素为单位）。</p>
		*默认值0，表示不描边。
		*@see laya.display.Text.stroke()
		*/
		__getset(0,__proto,'labelStroke',function(){
			this.createText();
			return this._text.stroke;
			},function(value){
			this.createText();
			this._text.stroke=value
		});

		/**
		*表示按钮文本标签是否为粗体字。
		*@see laya.display.Text.bold()
		*/
		__getset(0,__proto,'labelBold',function(){
			this.createText();
			return this._text.bold;
			},function(value){
			this.createText();
			this._text.bold=value;
		});

		/**
		*表示按钮文本标签的字体名称，以字符串形式表示。
		*@see laya.display.Text.font()
		*/
		__getset(0,__proto,'labelFont',function(){
			this.createText();
			return this._text.font;
			},function(value){
			this.createText();
			this._text.font=value;
		});

		/**标签对齐模式，默认为居中对齐。*/
		__getset(0,__proto,'labelAlign',function(){
			this.createText()
			return this._text.align;
			},function(value){
			this.createText()
			this._text.align=value;
		});

		/**
		*对象的点击事件处理器函数（无默认参数）。
		*/
		__getset(0,__proto,'clickHandler',function(){
			return this._clickHandler;
			},function(value){
			this._clickHandler=value;
		});

		/**
		*<p>当前实例的位图 <code>AutoImage</code> 实例的有效缩放网格数据。</p>
		*<p>数据格式："上边距,右边距,下边距,左边距,是否重复填充(值为0：不重复填充，1：重复填充)"，以逗号分隔。
		*<ul><li>例如："4,4,4,4,1"</li></ul></p>
		*@see laya.ui.AutoBitmap.sizeGrid
		*/
		__getset(0,__proto,'sizeGrid',function(){
			if (this._bitmap.sizeGrid)return this._bitmap.sizeGrid.join(",");
			return null;
			},function(value){
			this._bitmap.sizeGrid=UIUtils.fillArray(Styles.defaultSizeGrid,value,Number);
		});

		/**@inheritDoc */
		__getset(0,__proto,'width',_super.prototype._$get_width,function(value){
			_super.prototype._$set_width.call(this,value);
			if (this._autoSize){
				this._bitmap.width=value;
				this._text && (this._text.width=value);
			}
		});

		/**@inheritDoc */
		__getset(0,__proto,'height',_super.prototype._$get_height,function(value){
			_super.prototype._$set_height.call(this,value);
			if (this._autoSize){
				this._bitmap.height=value;
				this._text && (this._text.height=value);
			}
		});

		/**@inheritDoc */
		__getset(0,__proto,'dataSource',_super.prototype._$get_dataSource,function(value){
			this._dataSource=value;
			if ((typeof value=='number')|| (typeof value=='string'))this.label=value+"";
			else _super.prototype._$set_dataSource.call(this,value);
		});

		/**图标x,y偏移，格式：100,100*/
		__getset(0,__proto,'iconOffset',function(){
			return this._bitmap._offset ? this._bitmap._offset.join(","):null;
			},function(value){
			if (value)this._bitmap._offset=UIUtils.fillArray([1,1],value,Number);
			else this._bitmap._offset=[];
		});

		__static(Button,
		['stateMap',function(){return this.stateMap={"mouseup":0,"mouseover":1,"mousedown":2,"mouseout":0};}
		]);
		return Button;
	})(Component)


	/**
	*<code>Box</code> 类是一个控件容器类。
	*/
	//class laya.ui.Box extends laya.ui.Component
	var Box=(function(_super){
		function Box(){Box.__super.call(this);;
		};

		__class(Box,'laya.ui.Box',_super);
		var __proto=Box.prototype;
		Laya.imps(__proto,{"laya.ui.IBox":true})
		/**@inheritDoc */
		__getset(0,__proto,'dataSource',_super.prototype._$get_dataSource,function(value){
			this._dataSource=value;
			for (var name in value){
				var comp=this.getChildByName(name);
				if (comp)comp.dataSource=value[name];
				else if (this.hasOwnProperty(name)&& !((typeof (this[name])=='function')))this[name]=value[name];
			}
		});

		return Box;
	})(Component)


	/**
	*<code>Image</code> 类是用于表示位图图像或绘制图形的显示对象。
	*Image和Clip组件是唯一支持异步加载的两个组件，比如img.skin="abc/xxx.png"，其他UI组件均不支持异步加载。
	*
	*@example <caption>以下示例代码，创建了一个新的 <code>Image</code> 实例，设置了它的皮肤、位置信息，并添加到舞台上。</caption>
	*package
	*{
		*import laya.ui.Image;
		*public class Image_Example
		*{
			*public function Image_Example()
			*{
				*Laya.init(640,800);//设置游戏画布宽高。
				*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
				*onInit();
				*}
			*private function onInit():void
			*{
				*var bg:Image=new Image("resource/ui/bg.png");//创建一个 Image 类的实例对象 bg ,并传入它的皮肤。
				*bg.x=100;//设置 bg 对象的属性 x 的值，用于控制 bg 对象的显示位置。
				*bg.y=100;//设置 bg 对象的属性 y 的值，用于控制 bg 对象的显示位置。
				*bg.sizeGrid="40,10,5,10";//设置 bg 对象的网格信息。
				*bg.width=150;//设置 bg 对象的宽度。
				*bg.height=250;//设置 bg 对象的高度。
				*Laya.stage.addChild(bg);//将此 bg 对象添加到显示列表。
				*var image:Image=new Image("resource/ui/image.png");//创建一个 Image 类的实例对象 image ,并传入它的皮肤。
				*image.x=100;//设置 image 对象的属性 x 的值，用于控制 image 对象的显示位置。
				*image.y=100;//设置 image 对象的属性 y 的值，用于控制 image 对象的显示位置。
				*Laya.stage.addChild(image);//将此 image 对象添加到显示列表。
				*}
			*}
		*}
	*@example
	*Laya.init(640,800);//设置游戏画布宽高
	*Laya.stage.bgColor="#efefef";//设置画布的背景颜色
	*onInit();
	*function onInit(){
		*var bg=new laya.ui.Image("resource/ui/bg.png");//创建一个 Image 类的实例对象 bg ,并传入它的皮肤。
		*bg.x=100;//设置 bg 对象的属性 x 的值，用于控制 bg 对象的显示位置。
		*bg.y=100;//设置 bg 对象的属性 y 的值，用于控制 bg 对象的显示位置。
		*bg.sizeGrid="40,10,5,10";//设置 bg 对象的网格信息。
		*bg.width=150;//设置 bg 对象的宽度。
		*bg.height=250;//设置 bg 对象的高度。
		*Laya.stage.addChild(bg);//将此 bg 对象添加到显示列表。
		*var image=new laya.ui.Image("resource/ui/image.png");//创建一个 Image 类的实例对象 image ,并传入它的皮肤。
		*image.x=100;//设置 image 对象的属性 x 的值，用于控制 image 对象的显示位置。
		*image.y=100;//设置 image 对象的属性 y 的值，用于控制 image 对象的显示位置。
		*Laya.stage.addChild(image);//将此 image 对象添加到显示列表。
		*}
	*@example
	*class Image_Example {
		*constructor(){
			*Laya.init(640,800);//设置游戏画布宽高。
			*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
			*this.onInit();
			*}
		*private onInit():void {
			*var bg:laya.ui.Image=new laya.ui.Image("resource/ui/bg.png");//创建一个 Image 类的实例对象 bg ,并传入它的皮肤。
			*bg.x=100;//设置 bg 对象的属性 x 的值，用于控制 bg 对象的显示位置。
			*bg.y=100;//设置 bg 对象的属性 y 的值，用于控制 bg 对象的显示位置。
			*bg.sizeGrid="40,10,5,10";//设置 bg 对象的网格信息。
			*bg.width=150;//设置 bg 对象的宽度。
			*bg.height=250;//设置 bg 对象的高度。
			*Laya.stage.addChild(bg);//将此 bg 对象添加到显示列表。
			*var image:laya.ui.Image=new laya.ui.Image("resource/ui/image.png");//创建一个 Image 类的实例对象 image ,并传入它的皮肤。
			*image.x=100;//设置 image 对象的属性 x 的值，用于控制 image 对象的显示位置。
			*image.y=100;//设置 image 对象的属性 y 的值，用于控制 image 对象的显示位置。
			*Laya.stage.addChild(image);//将此 image 对象添加到显示列表。
			*}
		*}
	*@see laya.ui.AutoBitmap
	*/
	//class laya.ui.Image extends laya.ui.Component
	var Image=(function(_super){
		function Image(skin){
			this._bitmap=null;
			this._skin=null;
			this._group=null;
			Image.__super.call(this);
			this.skin=skin;
		}

		__class(Image,'laya.ui.Image',_super);
		var __proto=Image.prototype;
		/**@inheritDoc */
		__proto.destroy=function(destroyChild){
			(destroyChild===void 0)&& (destroyChild=true);
			_super.prototype.destroy.call(this,true);
			this._bitmap && this._bitmap.destroy();
			this._bitmap=null;
		}

		/**
		*销毁对象并释放加载的皮肤资源。
		*/
		__proto.dispose=function(){
			this.destroy(true);
			Laya.loader.clearRes(this._skin);
		}

		/**@inheritDoc */
		__proto.createChildren=function(){
			this.graphics=this._bitmap=new AutoBitmap();
			this._bitmap.autoCacheCmd=false;
		}

		/**
		*@private
		*设置皮肤资源。
		*/
		__proto.setSource=function(url,img){
			if (url===this._skin && img){
				this.source=img
				this.onCompResize();
			}
		}

		/**
		*@copy laya.ui.AutoBitmap#source
		*/
		__getset(0,__proto,'source',function(){
			return this._bitmap.source;
			},function(value){
			if (!this._bitmap)return;
			this._bitmap.source=value;
			this.event("loaded");
			this.repaint();
		});

		/**@inheritDoc */
		__getset(0,__proto,'dataSource',_super.prototype._$get_dataSource,function(value){
			this._dataSource=value;
			if ((typeof value=='string'))this.skin=value;
			else _super.prototype._$set_dataSource.call(this,value);
		});

		/**@inheritDoc */
		__getset(0,__proto,'measureHeight',function(){
			return this._bitmap.height;
		});

		/**
		*<p>对象的皮肤地址，以字符串表示。</p>
		*<p>如果资源未加载，则先加载资源，加载完成后应用于此对象。</p>
		*<b>注意：</b>资源加载完成后，会自动缓存至资源库中。
		*/
		__getset(0,__proto,'skin',function(){
			return this._skin;
			},function(value){
			if (this._skin !=value){
				this._skin=value;
				if (value){
					var source=Loader.getRes(value);
					if (source){
						this.source=source;
						this.onCompResize();
					}else Laya.loader.load(this._skin,Handler.create(this,this.setSource,[this._skin]),null,"image",1,true,this._group);
					}else {
					this.source=null;
				}
			}
		});

		/**
		*资源分组。
		*/
		__getset(0,__proto,'group',function(){
			return this._group;
			},function(value){
			if (value && this._skin)Loader.setGroup(this._skin,value);
			this._group=value;
		});

		/**
		*<p>当前实例的位图 <code>AutoImage</code> 实例的有效缩放网格数据。</p>
		*<p>数据格式："上边距,右边距,下边距,左边距,是否重复填充(值为0：不重复填充，1：重复填充)"，以逗号分隔。
		*<ul><li>例如："4,4,4,4,1"。</li></ul></p>
		*@see laya.ui.AutoBitmap#sizeGrid
		*/
		__getset(0,__proto,'sizeGrid',function(){
			if (this._bitmap.sizeGrid)return this._bitmap.sizeGrid.join(",");
			return null;
			},function(value){
			this._bitmap.sizeGrid=UIUtils.fillArray(Styles.defaultSizeGrid,value,Number);
		});

		/**@inheritDoc */
		__getset(0,__proto,'measureWidth',function(){
			return this._bitmap.width;
		});

		/**@inheritDoc */
		__getset(0,__proto,'width',_super.prototype._$get_width,function(value){
			_super.prototype._$set_width.call(this,value);
			this._bitmap.width=value==0 ? 0.0000001 :value;
		});

		/**@inheritDoc */
		__getset(0,__proto,'height',_super.prototype._$get_height,function(value){
			_super.prototype._$set_height.call(this,value);
			this._bitmap.height=value==0 ? 0.0000001 :value;
		});

		return Image;
	})(Component)


	/**
	*场景中角色的基类
	*<br> 当前 角色、熊 都继承此类
	*@author luohuantao
	*/
	//class laya8.client.player.game.RoleObject extends laya8.client.player.NetObject
	var RoleObject=(function(_super){
		function RoleObject(uid){
			this._roleCfg=null;
			this._dir=0;
			this._dir24=0;
			this._dirIndex=0;
			this._dir24Index=0;
			this.isHide=false;
			this._isStand=false;
			this.isMove=false;
			this._isAttack=false;
			this._isHurt=false;
			this.isDie=false;
			this.preMove=false;
			this.inview=false;
			this._nextAction=0;
			this._nextDir=0;
			this._nextDir24=0;
			this._anime=null;
			this._roleImg=null;
			this._animeWidth=0;
			this._animeHeight=0;
			this._curAction=0;
			this._bufferType=0;
			this.isAniEnd=true;
			this.invincibleTime=0;
			this.isInvincible=false;
			this.aniInvincible=null;
			this._preX=0;
			this._preY=0;
			this.bIsInGlass=false;
			this.Sresistance=0;
			this.acceS=0;
			this.gender=0;
			this.dipanId=0;
			this._regainHpNum=0;
			this.selfID=0;
			this.selfTeam=0;
			this.avatorID=0;
			this.teamId=0;
			this.teamNameCfg=null;
			this._bSetTextPos=true;
			this._bscaleChg=true;
			this._yunXingxing=null;
			this._regian=0;
			this._smaxSpeed=0;
			this._bulletAngle=-1;
			this._enemyObj={};
			this._fllowSp=[];
			this.bdEffect=null;
			this.newpaopao=null;
			this.isGhost=false;
			this.canQX=false;
			this._diamondNum=0;
			this._diamondNumText=null;
			RoleObject.__super.call(this,uid);
		}

		__class(RoleObject,'laya8.client.player.game.RoleObject',_super);
		var __proto=RoleObject.prototype;
		__proto.addYunEff=function(t){this._yunXingxing=this._yunXingxing|| EffectPool.I.createSingleEffectAni("yunXingxing");
			this.stopMove();
			(this._path).stopWalk();
			Player.I.roleForeLayer.addChild(this._yunXingxing);
			this._yunXingxing.visible=this.visible;
			this._yunXingxing.pos(this._x+this.displayWidth / 2,this._y);
			this._bSetTextPos=true;
			(this.self==0)&& GamingView.I.gameCtrl.setMouseEnable(false);
			if(t!=-1)this.timer.once(t,this,this.removeYunEff);
		}

		__proto.realStop=function(){
			this.stopMove();
			(this._path).stopWalk();
		}

		__proto.changeBuffer=function(type,floors){
			if(type==0x1)BufferManager.runBuffer(this,type,floors);
		}

		__proto.setSkill=function(index,skillid,count){}
		__proto.removeYunEff=function(){
			(this.self==0)&& GamingView.I.gameCtrl.setMouseEnable(true);
			this.timer.clear(this,this.removeYunEff);
			this._yunXingxing && this._yunXingxing.reset();
			this._yunXingxing=null;
		}

		__proto.bloodReturning=function(){
			if (this._hp >=this._maxHp)return;
			this.hp+=0 || this._regian;
			if (this._regian&&this.self==0){
				ShowJiFen.create(this._regian,3,this,0,false);
			}
		}

		__proto.createNameText=function(name){}
		/**
		*立刻发消息
		*/
		__proto.moveRightNow=function(point){}
		/**
		*停止移动动画
		*/
		__proto.stopMove=function(){
			this.isMove=false;
		}

		__proto.die=function(){}
		/**播放待机动画*/
		__proto.animeStand=function(){}
		/**移动动画 */
		__proto.animeMove=function(dir){}
		/**攻击动画*/
		__proto.animeAttck=function(dir){}
		/**
		*受伤动画-攻击时不播放
		*@param bulletOwerID 子弹拥有者的uid--用于判断自己攻击到被人后播放声音
		*@param bulletSkillID 子弹携带的技能id--用于判断角色被击后的效果处理
		*/
		__proto.animeHurt=function(bulletOwerID,bulletSkillID){
			(bulletOwerID===void 0)&& (bulletOwerID=0);
			(bulletSkillID===void 0)&& (bulletSkillID=0);
		}

		/**死亡动画*/
		__proto.animeDie=function(){
			this.removeAllFollow();
		}

		/**隐藏头顶信息*/
		__proto.hideUserTop=function(){}
		/**显示头顶信息 */
		__proto.showUserTop=function(){}
		/**
		*添加敌人列表
		*@param eUid
		*/
		__proto.addEnemy=function(eUid){
			this._enemyObj[eUid]=eUid;
		}

		__proto.addFollow=function(b,x,y){
			if (this._fllowSp.indexOf(b)==-1){
				this._fllowSp.push(b);
			}
		}

		__proto._setTextPosExt=function(px,py){
			(this.newpaopao && this.newpaopao.parent)&& this.newpaopao.pos(px,this._y-this.displayHeight / 2-28 *this.scaleY,true);
			for (var i=0,n=this._fllowSp.length;i < n;i++){
				(this._fllowSp [i]).pos(px,py);
			}
		}

		__proto.addBDEffect=function(){
			if (this.bdEffect){
				this.removeFollow(this.bdEffect);
				this.bdEffect.reset();
				this.bdEffect=null;
			}
			this.stopMove();
			(this._path).stopWalk();
			if (this.self==0){
				GamingView.I.gameCtrl.setMouseEnable(false);
			}
			this.bdEffect=EffectPool.I.createSingleEffectAni("llzfrozen");
			Player.I.roleForeLayer.addChild(this.bdEffect);
			this.bdEffect.pos(this._x+1 / 2 *this.displayWidth,this._y+1 / 2 *this.displayHeight);
			this.addFollow(this.bdEffect,0,0);
		}

		__proto.removeBDEffect=function(){
			if (this.bdEffect){
				this.removeFollow(this.bdEffect);
				this.bdEffect.reset();
				this.bdEffect=null;
			}
			if (this.self==0){
				GamingView.I.gameCtrl.setMouseEnable(true);
			}
		}

		__proto.removeFollow=function(sp){
			var index=this._fllowSp.indexOf(sp);
			if (index !=-1){
				this._fllowSp.splice(index,1);
			}
		}

		__proto.removeAllFollow=function(){
			for (var i=0;i < this._fllowSp.length;i++){
				this._fllowSp[i].reset && this._fllowSp[i].reset();
			}
			this._fllowSp.length=0;
		}

		/*
		override public function set alpha(value:Number):void{
			super.alpha=value;
		}

		*/
		__proto.scaleChgExt=function(sx,sy){}
		__proto.chkShowEff=function(){
			return ((!this.visible || !this.alpha));
		}

		__proto.setPaopaoVisible=function(b){
			this.newpaopao&&(this.newpaopao.visible=b);
		}

		__proto.clearDieTimer=function(){}
		__proto._removePaopao=function(){
			if (this.newpaopao){
				Laya.timer.clear(this,this._removePaopao);
				this.newpaopao.removeSelf();
			}
		}

		__proto._showQiPao=function(s,time){
			this.newpaopao=this.newpaopao || new NewPaopaoUI();
			this._removePaopao();
			Laya.timer.clear(this,this._removePaopao);
			this.newpaopao.content.text=s;
			this.timer.callLater(this,this.ssss,[time]);
		}

		__proto.ssss=function(time){
			var _$this=this;
			var curScene=Player.I.curScene;
			if (!curScene)return;
			this.newpaopao.width=this.newpaopao.bg.width=this.newpaopao.content.textWidth+40;
			this.newpaopao.content.width=this.newpaopao.content.textWidth+40;
			this.newpaopao.pivotX=this.newpaopao.width / 2;
			this.newpaopao.pivotY=this.newpaopao.height;
			this.newpaopao.scale(0,0);
			this.newpaopao.paotouImg.x=this.newpaopao.width / 2;
			curScene.topLayer.addChild(this.newpaopao);
			Laya.timer.once(time,this,this._removePaopao);
			Tween.to(this.newpaopao,{scaleX:1.4,scaleY:1.4},500,null,Handler.create(this,function(){
				Tween.to(_$this.newpaopao,{scaleX:1.1,scaleY:1.1},300,null,Handler.create(this,function(){
					Tween.to(_$this.newpaopao,{scaleX:1.2,scaleY:1.2},200,null,Handler.create(this,function(){
					}))
				}))
			}))
			this._bSetTextPos=true;
		}

		/**因获得技能导致角色属性改变*/
		__proto.chgProperty=function(data){
			var proD;
			for (var i=0,j=data.itemList.length;i < j;i++){
				proD=data.itemList [i];
				this._chgOneProperty(proD,data.uid);
			}
		}

		__proto._chgOneProperty=function(proD,uid){}
		/**
		*移动之后
		*/
		__proto.afterMove=function(){}
		/**
		*蓄力之后
		*/
		__proto.afterXuli=function(){}
		/**
		*受伤之后
		*/
		__proto.afterHurt=function(){}
		/**
		*挨打之后
		*/
		__proto.afterAttack=function(){}
		__proto._chgAlphaByGlass=function(){
			var nAlpha=1.0;
			if (Player.curUser){
				if (this.self==0){
					nAlpha=this.bIsInGlass?0.5:1;
				}
				else{
					if (Player.curUser.teamId===this.teamId){
						nAlpha=this.bIsInGlass?0.5:1;
					}
					else nAlpha=this.bIsInGlass?(Player.curUser.bIsInGlass?0.5:0):1;
					if (this.canQX)nAlpha=0;
				}
			}
			else{
				nAlpha=this.bIsInGlass?0:1;
			}
			if (nAlpha==1 && this.isGhost)nAlpha=0.5;
			if (this.canQX){
				if (this.self==0){
					nAlpha=0.5;
				}
				else{
					nAlpha=0;
				}
				this.alpha=nAlpha;
				return;
			}
			if (this._style.alpha !=nAlpha){
				if(this.bIsInGlass)this.alpha=nAlpha;
				else Tween.to(this,{alpha:nAlpha},100,null,null,0,true);
			}
		}

		__proto.isInGlass=function(){
			var b=Collision.I.isInGrass(this._x+1 / 2 *this.__WW *this._style._tf.scaleX,this._y+this.__HH *this._style._tf.scaleY);
			this.isHide=b;
			return b;
		}

		/**
		*方向转换 将方向转换为动画索引
		*/
		__proto.dirTurnIndex=function(){
			if (this._dir==3 || this._dir==4 || this._dir==5){
				this._anime&&(this._anime.scaleX=-1);
				}else {
				this._anime&&(this._anime.scaleX=1);
			}
			if (this._dir < 7){
				this._dirIndex=Math.abs(this._dir-2);
				}else {
				this._dirIndex=3;
			}
		}

		/**
		*方向转换 将方向转换为动画索引
		*/
		__proto.dirTurnIndexMe24=function(){
			if (this._dir < 7){
				this._dirIndex=Math.abs(this._dir-2);
				}else {
				this._dirIndex=3;
			}
			if (this._dir24>6&&this._dir24<18){
				this._anime&&(this._anime.scaleX=-1);
				}else {
				this._anime&&(this._anime.scaleX=1);
			}
			if (this._dir24 < 19){
				this._dir24Index=Math.abs(this._dir24-6);
				}else {
				this._dir24Index=30-this._dir24;
			}
		}

		/**
		*吃加血技能后的特效
		*/
		__proto.addbloodEffect=function(){
			if (this._inview){
				EffectPool.I.createEffectAni("harebehit" ,this._x+this.displayWidth / 2,this._y+this.displayHeight / 2,Player.I.roleForeLayer,this);
			}
		}

		__proto.destroy=function(destroyChild){
			(destroyChild===void 0)&& (destroyChild=true);
			this.removeAllFollow();
			_super.prototype.destroy.call(this,destroyChild);
		}

		__getset(0,__proto,'regian',function(){
			return this._regian;
			},function(n){
			if (this._regian !=n){
				this._regian=n;
			}
		});

		__getset(0,__proto,'smaxSpeed',function(){
			return this._smaxSpeed;
			},function(n){
			if (n !=this._smaxSpeed)
				this._smaxSpeed=n;
		});

		__getset(0,__proto,'bulletAngleInHurt',function(){
			return this._bulletAngle;
			},function(angle){
			this._bulletAngle=angle;
		});

		__getset(0,__proto,'diamondNum',function(){
			return this._diamondNum;
			},function(i){
			this._diamondNum=i;
			if (i > 0)
			{this._diamondNumText=this._diamondNumText|| new WordText();
				this._diamondNumText.setText("x"+i);
			}
			else{
				this._diamondNumText && this._diamondNumText.setText("");
			}
		});

		return RoleObject;
	})(NetObject)


	/**
	*...
	*@author
	*/
	//class laya8.client.player.game.AniObject extends laya8.client.player.NetObject
	var AniObject=(function(_super){
		function AniObject(uid){
			this._anime=null;
			AniObject.__super.call(this,uid);
		}

		__class(AniObject,'laya8.client.player.game.AniObject',_super);
		var __proto=AniObject.prototype;
		__proto.createView=function(sourceID,group){
			this._sourceID=sourceID;
			this._anime=SourceLib.newWithLib(null,sourceID,2,group);
			this._anime.loadData(Handler.create(this,this.createAnimation));
			this.size(this._anime.width,this._anime.height);
			this._anime.pivot(this._anime.width / 2,this._anime.height / 2);
			this._anime.pos(this._anime.width / 2,this._anime.height / 2);
			this._anime.interval=300;
			this._anime.scaleX=this._anime.scaleY=2;
		}

		__proto.createAnimation=function(anipath){
			this._anime.loadAtlas(this._anime.url_1,Handler.create(this,this.aniInit));
		}

		__proto.aniInit=function(){
			if (this.destroyed)return;
			this.zOrder=0.1;
			this.showAni();
		}

		__proto.showAni=function(){
			this._anime&&(this._anime.index=0);
			this.addChild(this._anime);
			this._anime.play();
		}

		return AniObject;
	})(NetObject)


	/**
	*...
	*@author ...
	*/
	//class laya8.client.player.game.BuildingObject extends laya8.client.player.NetObject
	var BuildingObject=(function(_super){
		function BuildingObject(uid){
			this._shakeTime=0;
			this._shakeNumMax=0;
			this._shakeNumMin=0;
			this._isShake=false;
			this._curShakeTime=0;
			this._curShakeNum=0;
			this.topView=null;
			this.lv1=NaN;
			BuildingObject.__super.call(this,uid);
			this._shakeTime=ConfigData.gameCfg["treeShakeTime"];
			this._shakeNumMax=ConfigData.gameCfg["treeShakeNumMax"];
			this._shakeNumMin=ConfigData.gameCfg["treeShakeNumMin"];
			this.topView=new BuildingTopView();
			this.addChild(this.topView);
		}

		__class(BuildingObject,'laya8.client.player.game.BuildingObject',_super);
		var __proto=BuildingObject.prototype;
		__proto.setlv1=function(){
			this.lv1=this._hp / this._maxHp;
			console.log(">>>>>>>>>>>>>>>>>>>>>>>>>"+this.lv1);
		}

		/**
		*创建纹理对象
		*@param data 服务器传过来的json数据
		*/
		__proto.createView=function(sourceID,group){
			this.topView.start();
			var source=SourceLib.getSource(sourceID,2,group);
			if (source.className==""){
			}
			else{
				if (!this._viewSprite){
					this._viewSprite=SourceLib.newWithLib(source,sourceID,2,group);{
						this._viewSprite.loadCompHandler=Handler.create(this,this.setSize);
						this._viewSprite.loadImg();
					}
				}
				else{
					this.setSize();
				}
				this.addChild(this._viewSprite);
			}
			this._sourceID=sourceID;
			this._maxHp=ConfigData.elementData[this.itemid].bloodVal;
		}

		__proto.refreshTex=function(){
			var item=Player.getObjByGid(this.tiledGid);
			if (item && item.tex){
				var tex=this._viewSprite.texture=item.tex;
				this._viewSprite.size(tex.width,tex.height);
			}
		}

		__proto.destroy=function(destroyChild){
			(destroyChild===void 0)&& (destroyChild=true);
			this._isShake=false;
			this._curShakeTime=0;
			this._curShakeNum=0;
			this.topView && this.topView.resetState();
			_super.prototype.destroy.call(this,destroyChild);
		}

		__proto.size=function(width,height){
			var cfg=ConfigData.elementData[this.itemid];
			this._viewSprite.pivot(width / 2,cfg.zOrder);
			this._viewSprite.x=width / 2;
			this._viewSprite.y=cfg.zOrder;
			this.addChild(this._viewSprite);
			return laya.display.Sprite.prototype.size.call(this,width,height);
		}

		__proto.update=function(frameStep){
			if (this._curShakeTime >=this._shakeTime){
				this.pushUpdates=false;
				this._viewSprite.rotation=0;
				return;
			}
			this._curShakeTime+=frameStep;
			this._curShakeNum=Math.round(SnowUtils.randRange(this._shakeNumMax,this._shakeNumMin));
			this._viewSprite.rotation=this._curShakeNum;
		}

		/**开始抖动*/
		__proto.onShake=function(){
			this._curShakeTime=0;
			this.enableUpdate();
		}

		__getset(0,__proto,'hp',_super.prototype._$get_hp,function(value){
			if (value > this._maxHp){
				value=this._maxHp;
			}
			if (value < this._hp){
				this.topView.updateCurrentB(this._hp,value);
			}
			this._hp=value;
			this.setlv1();
		});

		__getset(0,__proto,'maxHp',_super.prototype._$get_maxHp,function(value){
			_super.prototype._$set_maxHp.call(this,value);
		});

		return BuildingObject;
	})(NetObject)


	/**
	*...
	*@author lisa
	*/
	//class laya8.client.player.game.BulletObject extends laya8.client.player.NetObject
	var BulletObject=(function(_super){
		function BulletObject(uid){
			this.prefixId=0;
			this.itemKey=0;
			this.state=0;
			this.ownerID=0;
			this.coefficient=0;
			this.xuliType=0;
			this.hitNum=NaN;
			this.skillId=0;
			this.otherBuf=0;
			this._group=null;
			this.areaLen=256;
			this.expime=NaN;
			this.time=NaN;
			this.keepLive=false;
			this.isFollow=false;
			this.showLD=true;
			this.offsetX=0;
			this.offsetY=0;
			this.curIndex=0;
			this.frames=0;
			this.maxTuoweiLen=NaN;
			this.loopCount=0;
			this._preTimeStep=0;
			this.dieTime=0;
			this.tu=NaN;
			this.startTime=0;
			this.speedUv=0.002;
			this.startU=0.01;
			this.w=NaN;
			BulletObject.__super.call(this,uid);
			this.state=0;
			this._inview=false;
			this.customRenderEnable=true;
		}

		__class(BulletObject,'laya8.client.player.game.BulletObject',_super);
		var __proto=BulletObject.prototype;
		__proto.destroy=function(destroyChild){
			(destroyChild===void 0)&& (destroyChild=true);
			this.state=0;
			this._inview=false;
			this.otherBuf=0;
			_super.prototype.destroy.call(this,destroyChild);
		}

		__proto.onFirstInView=function(){
			this._sourceID && this.createView(this._sourceID,this._group);
		}

		/*
		*初始化一些东西
		*/
		__proto.init=function(t,angle,sc){
			var _$this=this;
			var cfg=ConfigData.elementData[this.itemid];
			if (!cfg){
				return;
			}
			this._preTimeStep=0;
			sc=sc *(cfg.scale || 1);
			this.getStyle().setScale(sc,sc);
			this.keepLive=cfg.keepLive;
			this.isFollow=cfg.isFollow;
			this.showLD=cfg.showLD;
			if (!cfg.noneedRotate){
				this.rotation=angle+180;
			}
			this._size(cfg.w,cfg.h);
			this.offsetX=cfg.offX;
			this.offsetY=cfg.offY;
			this.maxTuoweiLen=cfg.tw;
			this.speedUv=(cfg.speed)/this.scaleX || (BulletObject.SPEEDUV/this.scaleX);
			this.startU=cfg.startU || 0.01;
			this.dieTime=0;
			this.visible=true;
			this.alpha=(t >=0)?1:0;
			if (!this.alpha){
				Laya.timer.once(-t,this,function(){
					this.alpha=1;
					_$this.startTime=Laya.timer.currTimer;
				});
			}
			else{
				this.startTime=Laya.timer.currTimer;
			}
		}

		/**
		*显示对象
		*@param sourceID
		*/
		__proto.createView=function(sourceID,group){
			this._group=group;
			this._sourceID=sourceID;
			var cfg=ConfigData.elementData[this.itemid];
			if (!cfg){
				return;
			}
			this._size(cfg.w,cfg.h);
			var texs=BulletObject.TuoweiTextures[this.itemKey];
			if (!texs){
				var urls=[];
				for (var i=0;i < cfg.frames;i++){
					urls.push(cfg.url+(this.prefixId?this.prefixId:"")+i+".png");
				}
				SnowLoad.I.load(urls,Handler.create(this,this.loadComplete,[urls,cfg.bw]));
			}
		}

		//}
		__proto.loadComplete=function(urls,w,h){
			var texs=BulletObject.TuoweiTextures[this.itemKey]={};
			var cfg=ConfigData.elementData[this.itemid];
			if (!cfg)return;
			texs.interval=cfg.interval;
			texs.ball=[];
			texs.tuowei=[];
			for (var i=0;i < urls.length;i++){
				var all=Loader.getRes(urls[i]);
				if (!all){
					console.error(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"+urls);
					return;
				}
				all.source;
				var ball=Texture.createFromTexture(all,0,0,w,all.height);
				var tuowei=Texture.createFromTexture(all,w,0,all.width-w,all.height);
				this.initTuowei(tuowei,texs);
				texs.ball.push(ball);
				texs.tuowei.push(tuowei);
			}
		}

		__proto.updatePath=function(t){
			if (this.hasPath && this._path){
				if (!this.visible && this.loopCount%3!==0){
					this._preTimeStep+=t;
					return;
				}
				this._path.moveStep(t);
			}
		}

		//public function update(t:int):void
		__proto.update=function(t){
			this.loopCount++;
			if (this.dieTime==-2){
				Player.I.removeNetObj(this._uid,this);
				return;
			}
			if (this.dieTime){
				if (!this.visible){
					this.dieTime=-2;
					Player.I.removeNetObj(this._uid,this);
				}
				return;
			}
			if (!this.visible && this.loopCount%5!==0){
				this._preTimeStep+=t;
				return;
			}
			t+=this._preTimeStep;
			this._preTimeStep=0;
			if (this.hasPath && this._path){
				if (this._path.moveStep(t)){
					if (this._lifeCycle==1){
						var scence1=Player.I.curScene;
						if (!this.keepLive&&scence1 && !scence1.destroyed){
							if (Player.I.posInView(this.x,this.y,0)&&this.showLD){
								var ef;
								if (this.areaLen > 0){
									this.playBaoSound();
									var cfg=ConfigData.elementData[this.itemid];
									if (cfg&&cfg.boom&&cfg.boom.length>0){
										ef=SkillManger.start(cfg.boom[0],Player.I.netObjects[this.ownerID],this.x,this.y,{angle:this.rotation-180},cfg.boom);
										ef&&ef.scale(this.areaLen / cfg.boom[2],this.areaLen / cfg.boom[2]);
									}
								}
								else{
									ef=EffectPool.I.createEffectAni("bullet_luodi",this.x,this.y,Player.I.roleForeLayer);
									ef.pivot(-ef.width/2 ,0);
									ef.rotation=this.rotation-180;
								}
								this.playSkillSound(6);
							}
						}
						this.godie();
						return;
					}
				}
				this._inview || this.firstInView();
			}
			if (this.loopCount % 5===0){
				this.visible=Player.I.posInView(this.x,this.y,200);
			}
			switch(this.state){
				case 0:
					break ;
				case 1:
					this.visible && this.showEff();
					this.godie();
					break ;
				case 2:
					if (!this.keepLive&&!this.isFollow){
						this.visible && this.showEff();
						this.godie();
					}
					break ;
				case 3:
					this.state=0;
					break ;
				}
		}

		/**
		*
		*@param type_1 3-技能攻击到人，6-取消持续音效（击中人也要取消持续音效）
		*/
		__proto.playSkillSound=function(type_1){
			this.timer.callLater(GamingView.I,GamingView.I.playSkillSound,[this.skillId,type_1]);
		}

		__proto.playBaoSound=function(){
			SoundManager.playSound(ConfigData.soundCfg[126]);
		}

		/**
		*子弹死亡
		*/
		__proto.godie=function(){
			this.dieTime=this.visible?Laya.timer.currTimer:-2;
		}

		__proto.showEff=function(){
			if (!this.visible)
				return;
			var scence=Player.I.curScene;
			if (!scence || scence.destroyed)return;
			if (this.showLD){
				if (this.areaLen > 0){
					var cfg=ConfigData.elementData[this.itemid];
					if (cfg&&cfg.boom&&cfg.boom.length>0){
						var ef=SkillManger.start(cfg.boom[0],Player.I.netObjects[this.ownerID],this.x,this.y,{angle:this.rotation-180},cfg.boom);
						ef&&ef.scale(this.areaLen / cfg.boom[2],this.areaLen / cfg.boom[2]);
					}
				}
				else if(this.state==1){
					this.playOneAniByName("snowBallBomb");
				}
				this.playSkillSound(3);
			}
		}

		__proto.playOneAniByName=function(name){
			EffectPool.I.createEffectAni(name,this.x,this.y,Player.I.roleForeLayer);
		}

		/**
		*初始化拖尾UV
		*/
		__proto.initTuowei=function(tex,texs){
			tex.source;
			(tex).olduv=tex.uv.slice();
			(tex).tu=tex.uv[2]-tex.uv[0];
		}

		/**
		*
		*@param tuoweiTexture 当前Texture
		*@param dt 时间间隔
		*@param tu 长度
		*@return 返回距右边的距离像素
		*/
		__proto.getNewUv1=function(tuoweiTexture,dt){
			var uv=tuoweiTexture.uv;
			var tu=(tuoweiTexture).tu;
			var dx=tu *this.speedUv *dt;
			if (isNaN(this.maxTuoweiLen)||this.maxTuoweiLen > tuoweiTexture.width){
				this.maxTuoweiLen=tuoweiTexture.width;
			};
			var min=uv[2]-this.maxTuoweiLen / tuoweiTexture.width *tu;
			var dd=uv[2]-dx-this.startU*tu;
			if (dd <min){
				dd=min;
				uv[0]=uv[6]=uv[0];
			}
			else{
				uv[0]=uv[6]=dd;
			}
			return (uv[2]-dd)/ tu *tuoweiTexture.width;
		}

		__proto.getWidth=function(tuoweiTexture,dt,spdend){
			(spdend===void 0)&& (spdend=0);
			var dx=tuoweiTexture.width *Math.min(1,this.startU+((spdend || this.speedUv)*dt));
			return dx;
		}

		__proto.getEndWidth=function(usedTimer,duration,w){
			var value=-(usedTimer /=duration)*(usedTimer-2);
			var dx=w+(value *(0.1-w))
			return dx;
		}

		/**
		**上下翻转
		*@param tex
		*/
		__proto.flipY=function(tex){
			var temp=tex.uv[1];
			tex.uv[1]=tex.uv[3]=tex.uv[5];
			tex.uv[5]=tex.uv[7]=temp;
		}

		/**
		*恢复UV信息
		*/
		__proto.restoretuoweiUv=function(tuoweiTexture){
			tuoweiTexture.uv[0]=tuoweiTexture.uv[6]=(tuoweiTexture).olduv[0];
		}

		//private var
		__proto.customRender=function(context,x,y){
			var ctx=context.ctx;
			var obj=BulletObject.TuoweiTextures[this.itemKey];
			if (obj&&obj.tuowei){
				var i=0;
				var dt=Laya.timer.currTimer-this.startTime;
				var len=obj.tuowei.length;
				var index=Math.floor(dt / obj.interval)%len;
				var tuoweiTexture=obj.tuowei [index];
				var ball=obj.ball [index];
				if (tuoweiTexture){
					if (this.dieTime==0){
						this.w=this.getWidth(tuoweiTexture,dt);
						if (this.keepLive){
							var beforeAlpha=ctx.globalAlpha;
							ctx.globalAlpha=Ease.quadIn(dt,1,-0.5,this.time);
						}
						ctx.drawTexture(tuoweiTexture,x+i+ball.width,y+(ball.height-tuoweiTexture.height)/2 ,this.w,tuoweiTexture.height,-this.__WW/2,-this.__HH/2-this.offsetY);
						ctx.drawTexture(ball,x+i,y,ball.width,ball.height,-this.__WW / 2,-this.__HH / 2-this.offsetY);
						if (this.keepLive){
							ctx.globalAlpha=beforeAlpha;
						}
					}
					else{
						if (this.keepLive){
							this.dieTime=-2;
						};
						var t=Laya.timer.currTimer-this.dieTime;
						if (t<100){
							this.w=this.getEndWidth(t,100,this.w);
							ctx.drawTexture(tuoweiTexture,x+i+ball.width,y+(ball.height-tuoweiTexture.height)/2 ,this.w,tuoweiTexture.height,-this.__WW/2,-this.__HH/2-this.offsetY);
							ctx.drawTexture(ball,x+i,y,ball.width,ball.height,-this.__WW / 2,-this.__HH / 2-this.offsetY);
						}
						else{
							this.dieTime=-2;
						}
					}
				}
				this.curIndex=index;
			}
		}

		BulletObject.STATE_DEF=0;
		BulletObject.STATE_END=1;
		BulletObject.STATE_HITROLE=2;
		BulletObject.STATE_SHOWEFF=3;
		BulletObject.BUFF_JF=1;
		BulletObject.BUFF_ZL=2;
		BulletObject.BUFF_FW=3;
		BulletObject.TuoweiTextures={};
		BulletObject.num=10000;
		BulletObject.SPEEDUV=0.002;
		__static(BulletObject,
		['redFilter',function(){return this.redFilter=new ColorFilter([
			1,0,0,0,0,
			0,0.6,0,0,0,
			0,0,0,0.15,0,
			0,0,0,1,0,]);}
		]);
		return BulletObject;
	})(NetObject)


	/**
	*...
	*@author ...
	*/
	//class laya8.client.player.game.CloudObject extends laya8.client.player.NetObject
	var CloudObject=(function(_super){
		function CloudObject(uid){
			this.speed=NaN;
			this.netList={};
			this.teamNum=0;
			CloudObject.__super.call(this,uid);
		}

		__class(CloudObject,'laya8.client.player.game.CloudObject',_super);
		var __proto=CloudObject.prototype;
		__proto.createView=function(sourceID,group){}
		/**
		*物品进入草丛
		*@param a
		*/
		__proto.addNetObject=function(a){}
		/**
		*物品离开草丛
		*@param a
		*/
		__proto.removeObject=function(a){}
		return CloudObject;
	})(NetObject)


	/**
	*...
	*@author luohuantao
	*/
	//class laya8.client.player.game.BearTopView extends laya8.client.player.game.RoleTopView
	var BearTopView=(function(_super){
		function BearTopView(){
			this.bear=null;
			this.hpWT=new WordText();
			BearTopView.__super.call(this);
			BearTopView.isInit || BearTopView.initBeatTopView();
		}

		__class(BearTopView,'laya8.client.player.game.BearTopView',_super);
		var __proto=BearTopView.prototype;
		/**每次开始执行*/
		__proto.start=function(){
			this.bear=this.parent;
			this.hpWT.setText(this.bear["_hp"]);
			_super.prototype.start.call(this);
		}

		/**恢复状态 结束执行 */
		__proto.resetState=function(){
			_super.prototype.resetState.call(this);
		}

		__proto.updateCurrentB=function(preHp,hp){
			if (this.bear){
				this.currentB=Math.max(this.currentB,preHp);
				this.perB=(this.currentB-hp)/ 25;
			}
		}

		/**
		*显示积分条
		*@param ctx
		*@param x
		*@param y
		*/
		__proto.showjifen=function(ctx,x,y){
			var lv1=this.bear.lv1;
			var w=BearTopView.bear_1_2.width;
			var txt;
			if (this.bear.isAtStatus){
				txt=BearTopView.bear_2;
				}else{
				txt=BearTopView.bear_1;
			};
			var www=txt.width;
			var hhh=txt.height;
			RoleTopView._drawImgX(ctx,BearTopView.bear_1_1,x,y,1,BearTopView.bear_1_1.width);
			ctx.drawTexture(txt,x+3 ,y+15,www,hhh,0,-1 / 2 *hhh);
			if (this.currentB > this.bear.hp){
				var lv2=(this.currentB-=this.perB)/ this.bear.maxHp;
				RoleTopView._drawImgX(ctx,RoleTopView.barbottom,x+33,y+11.5,lv2,lv2*w);
			}
			RoleTopView._drawImgX(ctx,BearTopView.bear_1_2,x+33,y+11.5,lv1,lv1 *w);
			this.hpWT.setText(this.bear._hp+'');
			ctx.fillText(this.hpWT,x+8+BearTopView.bear_1_1.width / 2,y+9,"bold 12px Arial","#ffffff","center");
		}

		__proto.customRender=function(context,x,y){
			if (!this._started)return;
			this._renderType |=0x400;
			var ctx=context.ctx;
			var top=y+this.bear.__HH-this.bear._animeHeight;
			var uw=this.bear.width;
			this.showjifen(ctx,x-(BearTopView.bear_1_1.width-uw)/ 2,top-25);
		}

		BearTopView.initBeatTopView=function(){
			if (BearTopView.isInit)return;
			BearTopView.isInit=true;
			BearTopView.bear_1=Loader.getRes("gamingtop/bear_1.png");
			BearTopView.bear_1_1=Loader.getRes("gamingtop/djball.png");
			BearTopView.bear_1_2=Loader.getRes("gamingtop/bear_1_2.png");
			BearTopView.bear_2=Loader.getRes("gamingtop/bear_2.png");
			BearTopView.bear_2_2=Loader.getRes("gamingtop/bear_2_2.png");
		}

		BearTopView.isInit=false;
		BearTopView.bear_1=null
		BearTopView.bear_1_1=null
		BearTopView.bear_1_2=null
		BearTopView.bear_2=null
		BearTopView.bear_2_2=null
		return BearTopView;
	})(RoleTopView)


	/**
	*...
	*@author ...
	*/
	//class laya8.client.player.game.DiamondObject extends laya8.client.player.NetObject
	var DiamondObject=(function(_super){
		function DiamondObject(uid){
			this._anime=null;
			this._roleImg=null;
			this._animeWidth=0;
			this._animeHeight=0;
			DiamondObject.__super.call(this,uid);
		}

		__class(DiamondObject,'laya8.client.player.game.DiamondObject',_super);
		var __proto=DiamondObject.prototype;
		__proto.destroy=function(destroyChild){
			(destroyChild===void 0)&& (destroyChild=true);
			Tween.to(this,{alpha:0},200,null,Handler.create(this,this.superDestroy,[destroyChild]));
		}

		__proto.superDestroy=function(destroyChild){
			this.alpha=1;
			_super.prototype.destroy.call(this,destroyChild);
			if (this._anime){
				this._anime.stop();
				this._anime.removeSelf();
				Pool.recover(this._anime.poolID,this._anime);
				this._anime=null;
			}
		}

		__proto.createView=function(sourceID,group){
			var key="DiamondObject:"+sourceID;
			var aniPool=Pool.getItem(key);
			if (!aniPool){
				this._roleImg=new Image("res/role/default.png");
				this.addChild(this._roleImg);
			}
			this._anime=aniPool || SourceLib.newWithLib(null,sourceID,2,group);
			this._anime.poolID=key;
			this._animeWidth=this._anime.width;
			this._animeHeight=this._anime.height;
			this._anime.pivot(this._animeWidth / 2,this._animeHeight / 2);
			this._anime.pos(this.__WW / 2,this.__HH / 2);
			this._anime.scale(2,2);
			this._anime.loadData(Handler.create(this,this.createAnimation));
		}

		__proto.createAnimation=function(animePath){
			this._roleImg && this._roleImg.destroy();
			this._roleImg=null;
			if (this.destroyed)return;
			Animation.createFrames(this._anime.url_1,this._anime.poolID);
			this._anime.interval=120;
			this._anime.play(0,true,this._anime.poolID);
			this.addChild(this._anime);
		}

		return DiamondObject;
	})(NetObject)


	/**场景树
	*...
	*@author luohuantao
	*/
	//class laya8.client.player.game.TreeObject extends laya8.client.player.NetObject
	var TreeObject=(function(_super){
		function TreeObject(uid){
			this._shakeTime=0;
			this._shakeNumMax=0;
			this._shakeNumMin=0;
			this._isShake=false;
			this._curShakeTime=0;
			this._curShakeNum=0;
			TreeObject.__super.call(this,uid);
			this._shakeTime=ConfigData.gameCfg["treeShakeTime"];
			this._shakeNumMax=ConfigData.gameCfg["treeShakeNumMax"];
			this._shakeNumMin=ConfigData.gameCfg["treeShakeNumMin"];
		}

		__class(TreeObject,'laya8.client.player.game.TreeObject',_super);
		var __proto=TreeObject.prototype;
		__proto.refreshTex=function(){
			var item=Player.getObjByGid(this.tiledGid);
			if (item && item.tex){
				var tex=this._viewSprite.texture=item.tex;
				this._viewSprite.size(tex.width,tex.height);
			}
		}

		__proto.destroy=function(destroyChild){
			(destroyChild===void 0)&& (destroyChild=true);
			this._isShake=false;
			this._curShakeTime=0;
			this._curShakeNum=0;
			_super.prototype.destroy.call(this,destroyChild);
		}

		__proto.size=function(width,height){
			var cfg=ConfigData.elementData[this.itemid];
			this._viewSprite.pivot(width / 2,cfg.zOrder);
			this._viewSprite.x=width / 2;
			this._viewSprite.y=cfg.zOrder;
			this.addChild(this._viewSprite);
			return laya.display.Sprite.prototype.size.call(this,width,height);
		}

		__proto.update=function(frameStep){
			if (this._curShakeTime >=this._shakeTime){
				this.pushUpdates=false;
				this._viewSprite.rotation=0;
				return;
			}
			this._curShakeTime+=frameStep;
			this._curShakeNum=Math.round(SnowUtils.randRange(this._shakeNumMax,this._shakeNumMin));
			this._viewSprite.rotation=this._curShakeNum;
		}

		/**开始抖动*/
		__proto.onShake=function(){
			this._curShakeTime=0;
			this.enableUpdate();
		}

		//将对象添加到帧循环处理
		__proto.updatePath=function(t){
			this._curShakeTime+=t;
		}

		__proto.getStyle=function(){
			this._style===Style.EMPTY && (this._style=new Style());
			return this._style;
		}

		return TreeObject;
	})(NetObject)


	/**
	*...
	*@author ...
	*/
	//class laya8.client.player.game.BuildingTopView extends laya8.client.player.game.RoleTopView
	var BuildingTopView=(function(_super){
		function BuildingTopView(){
			this.building=null;
			this.hpWT=new WordText();
			this._nameStr=new WordText();
			BuildingTopView.__super.call(this);
			BuildingTopView.isInit || BuildingTopView.init();
		}

		__class(BuildingTopView,'laya8.client.player.game.BuildingTopView',_super);
		var __proto=BuildingTopView.prototype;
		/**每次开始执行*/
		__proto.start=function(){
			this.building=this.parent;
			this.hpWT.setText(this.building["_hp"]);
			this._nameStr.setText(ConfigData.elementData[this.building.itemid].dec);
			_super.prototype.start.call(this);
		}

		/**恢复状态 结束执行 */
		__proto.resetState=function(){
			_super.prototype.resetState.call(this);
		}

		__proto.updateCurrentB=function(preHp,hp){
			if (this.building){
				this.currentB=Math.max(this.currentB,preHp);
				this.perB=(this.currentB-hp)/ 25;
			}
		}

		/**
		*显示积分条
		*@param ctx
		*@param x
		*@param y
		*/
		__proto.showjifen=function(ctx,x,y){
			var lv1=this.building.lv1;
			var w=BuildingTopView.strips.width;
			var txt=BuildingTopView.bloodball;
			var www=txt.width;
			var hhh=txt.height;
			RoleTopView._drawImgX(ctx,BuildingTopView.bloodbg,x,y,1,BuildingTopView.bloodbg.width);
			ctx.drawTexture(txt,x+3 ,y+15,www,hhh,0,-1 / 2 *hhh);
			if (this.currentB > this.building.hp){
				var lv2=(this.currentB-=this.perB)/ this.building.maxHp;
				RoleTopView._drawImgX(ctx,RoleTopView.barbottom,x+33,y+11.5,lv2,lv2*w);
			}
			RoleTopView._drawImgX(ctx,BuildingTopView.strips,x+33,y+11.5,lv1,lv1 *w);
			this.hpWT.setText(this.building._hp+'');
			ctx.fillText(this.hpWT,x+8+BuildingTopView.bloodbg.width / 2,y+9,"bold 12px Arial","#ffffff","center");
		}

		__proto.customRender=function(context,x,y){
			if (!this._started)return;
			this._renderType |=0x400;
			var ctx=context.ctx;
			var top=y;
			var uw=this.building.width;
			this.showjifen(ctx,x-(BuildingTopView.bloodbg.width-uw)/ 2,top);
			if (this.isShow){
				ctx.fillText(this._nameStr,x+1 / 2 *uw,y-14,"bold 16px simHei","white","center");
			}
		}

		BuildingTopView.init=function(){
			if (BuildingTopView.isInit)return;
			BuildingTopView.isInit=true;
			BuildingTopView.bloodball=Loader.getRes("gamingtop/building1_1.png");
			BuildingTopView.bloodbg=Loader.getRes("gamingtop/djball.png");
			BuildingTopView.strips=Loader.getRes("gamingtop/building1.png");
		}

		BuildingTopView.isInit=false;
		BuildingTopView.bloodball=null
		BuildingTopView.bloodbg=null
		BuildingTopView.strips=null
		return BuildingTopView;
	})(RoleTopView)


	/**
	*仅支持由ide创建的动画
	*@author luohuantao
	*/
	//class laya8.client.player.game.EffectAni extends laya8.client.player.game.EffectBase
	var EffectAni=(function(_super){
		function EffectAni(){
			this.isLoaded=false;
			EffectAni.__super.call(this);
		}

		__class(EffectAni,'laya8.client.player.game.EffectAni',_super);
		var __proto=EffectAni.prototype;
		__proto.init=function(key,ower,bIsRender,atals){
			(bIsRender===void 0)&& (bIsRender=true);
			_super.prototype.init.call(this,key,ower);
			this.vo=ConfigData.effectSource [key];
			atals=atals || this.vo.atals;
			this.isLoaded=false;
			this._aniState=ViewAni.crtAniByIDE(this.vo,this._aniKey+"_EffectAni",Handler.create(this,this.createView),atals);
			if (!atals || Laya.loader.getRes(atals))
				this.createView();
		}

		__proto.createView=function(){
			if (!this._aniState)return;
			this._aniState.play();
			this.addChild(this._aniState);
			this.state=1;
			this.isLoaded=true;
		}

		__proto.reset=function(){
			if (this._isPool)return;
			this._isPool=true;
			this.alpha=1;
			this.visible=true;
			this.scale(1,1);
			this.state=0;
			if (this._aniState){
				this._aniState.stop();
				this._aniState.removeSelf();
				Pool.recover(this._aniKey+"_EffectAni",this._aniState);
				this._aniState=null;
			}
			this.removeSelf();
			Pool.recover(this._aniKey,this);
		}

		__proto.update=function(t){
			if (this.state===1 && (this._aniState.index >=this._aniState.count-1)){
				this.state=2;
			}
		}

		return EffectAni;
	})(EffectBase)


	/**雪花类=场景中掉落物品 FoodBulletObject 的基类
	*...
	*@author luohuantao
	*/
	//class laya8.client.player.game.SnowObject extends laya8.client.player.NetObject
	var SnowObject=(function(_super){
		function SnowObject(uid){
			this.isDieByCurUser=false;
			this._delTime=0;
			SnowObject.__super.call(this,uid);
		}

		__class(SnowObject,'laya8.client.player.game.SnowObject',_super);
		var __proto=SnowObject.prototype;
		//hasPath=false ;
		__proto.destroy=function(destroyChild){
			(destroyChild===void 0)&& (destroyChild=true);
			_super.prototype.destroy.call(this,destroyChild);
		}

		__proto.createView=function(sourceID,group){
			_super.prototype.createView.call(this,sourceID,group);
		}

		__proto.onMoveToRole=function(role,compHandler){
			var snowObj=FlySnowImg.getOne();
			snowObj.setData(this._x,this._y);
			snowObj.isCanMove=true;
			snowObj.startTimer=this.timer.currTimer;
			Player.I.snowFlyLayer.addChildFlySnowImg(snowObj);
			compHandler && compHandler.run();
		}

		return SnowObject;
	})(NetObject)


	/**
	*以序列帧为基础的特效
	*@author lisa
	*/
	//class laya8.client.player.game.EffectObject extends laya8.client.player.game.EffectBase
	var EffectObject=(function(_super){
		function EffectObject(){
			this.isDown=false;
			this.isUp=false;
			this.isRender=false;
			this._xx=NaN;
			this._yy=NaN;
			EffectObject.__super.call(this);
		}

		__class(EffectObject,'laya8.client.player.game.EffectObject',_super);
		var __proto=EffectObject.prototype;
		/**
		*@param key enumEffectType
		*/
		__proto.init=function(key,ower,bIsRender,atals){
			(bIsRender===void 0)&& (bIsRender=true);
			_super.prototype.init.call(this,key,ower);
			this.vo=ConfigData.effectSource [key];
			this.isRender=bIsRender;atals=atals|| this.vo.atals;
			var b=Laya.loader.getRes(atals);
			if (atals&&!b){
				SnowLoad.I.load(atals,Handler.create(this,this.createView),null,"atlas");
			}
			if (!atals ||b)this.createView();
		}

		/**
		*创建动画
		*/
		__proto.createView=function(){
			this._aniState=this.isRender?ViewAni.createAniFromCfg(this.vo,this._aniKey+"_EffectObj"):ViewAni.createAniFromCfgNew(this.vo,this._aniKey+"_EffectObj");
			this.addChild(this._aniState);
			this._aniState.play();
			this.state=1;
			this.size(this._aniState.width,this._aniState.height);
		}

		/**播放类型：0为正序播放，1为倒序播放，2为pingpong播放*/
		__proto.wrapMode=function(type){
			if (!this._aniState)return;
			this._aniState.wrapMode=type;
		}

		/**
		*
		*@param start 特效开始帧
		*@param loop 是否循环播放-不循化播放时，自动移除现实列表
		*@param name
		*/
		__proto.play=function(start,loop,name){
			var _$this=this;
			(start===void 0)&& (start=0);
			(loop===void 0)&& (loop=true);
			(name===void 0)&& (name="");
			this._aniState.play(start,loop,name);
			if (loop==false)this._aniState.on("complete",this,end=function(){_$this.removeSelf()});
		}

		/**
		*重置动画
		*/
		__proto.reset=function(){
			if (this._isPool)return;
			this.isDown=false;
			this.isUp=false;
			this._isPool=true;
			this._ower=null;
			this.alpha=1;
			this.visible=true;
			this.scale(1,1);
			this.state=0;
			if (this._aniState){
				this._aniState.stop();
				this._aniState.removeSelf();
				Pool.recover(this._aniKey+"_EffectObj",this._aniState);
				this._aniState=null;
			}
			this.removeSelf();
			Pool.recover(this._aniKey,this);
		}

		__proto._pos=function(x,y,speedMode){
			(speedMode===void 0)&& (speedMode=false);
			this._xx=x;
			this._yy=y;
		}

		/**
		*动画状态更新
		*@param t
		*/
		__proto.update=function(t){
			if (this._ower){
				var o=this._ower;
				if (this.isDown)this._pos(o._x+o.displayWidth / 2,o._y+o.displayHeight+10 ,true);
				else if(this.isUp)this._pos(o._x+o.displayWidth / 2,o._y-o.displayHeight / 4,true);
				else this._pos(o._x+o.displayWidth / 2,o._y+o.displayHeight / 2,true);
				this.inview=(Stat.loopCount % 5 !=0)? this.visible=Player.I.posInView(this._xx,this._yy,100):true;
				if (this.inview){
					this.pos(this._xx,this._yy,true);
					var oScX=o.scaleX;
					var oScY=o.scaleY;
					(this.scaleX !=oScX || this.scaleY !=oScY)&& this.scale(oScX,oScY,true);
				}
			}
			switch(this.state){
				case 0:
					break ;
				case 1:
					if (this._aniState.index >=this._aniState.count-1){
						this.state=2;
					}
					break ;
				case 2:
					if (this._aniState.index >=this._aniState.count-1){
						this.reset();
					}
					break ;
				}
		}

		return EffectObject;
	})(EffectBase)


	/**
	*...
	*@author ...
	*/
	//class laya8.client.player.game.PropTreasureObject extends laya8.client.player.NetObject
	var PropTreasureObject=(function(_super){
		function PropTreasureObject(uid){
			this.boxOff=null;
			this.timeNum=0;
			this.start=0;
			this.isOnce=false;
			this.bxScale=1;
			this.removeFlag=false;
			this.jtTex=null;
			this._sid=null;
			this.dir=-1;
			this.step=0.003;
			this.__scale=1;
			this.dy=0;
			this._preTimeStep=0;
			this.yStep=0.3;
			this.xsScale=0;
			this.ysScale=0;
			this.loopCount=0;
			this.sp=null;
			this.czSp=new Sprite();
			PropTreasureObject.__super.call(this,uid);
		}

		__class(PropTreasureObject,'laya8.client.player.game.PropTreasureObject',_super);
		var __proto=PropTreasureObject.prototype;
		__proto.createView=function(sourceID,group){
			this._sid=sourceID;
			if (!PropTreasureObject.bottomTex){
				var img=new Image();
				img.skin="res/skillIcon/bottom.png";
				PropTreasureObject.bottomTex=img.source;
			}
			if (!this.boxOff){
				this.boxOff=new Texture();
				this.boxOff=Laya.loader.getRes("gaming/box_dj.png");
			}
			if (!PropTreasureObject.guangTex){
				PropTreasureObject.guangTex=new Texture();
				PropTreasureObject.guangTex=Laya.loader.getRes("gaming/398.png");
			}
			if (!this.jtTex){
				this.jtTex=new Texture();
				this.jtTex=Laya.loader.getRes("gaming/jt.png");
			}
			if (sourceID!=140001){
				if(!PropTreasureObject.treasureBoxs[sourceID]){
					var data=ConfigData.skillCfg[sourceID];
					var url;
					if (data){
						url="res/skillIcon/s"+data.btnIcon+".png";
					}
					else{
						url="res/skillIcon/s"+sourceID+".png";
					};
					var source=Loader.getRes(url);
					if (!source){
						url=URL.formatURL(url);
						Laya.loader.load(url,Handler.create(this,this.downComplete),null,"image",1,true);
					}
					PropTreasureObject.treasureBoxs[sourceID]=source||this.boxOff;
				}
				this.boxOff=PropTreasureObject.treasureBoxs[sourceID];
			}
			else{
				PropTreasureObject.treasureBoxs[sourceID]=this.boxOff;
			}
			this.pivot(0,0);
			var cfg=ConfigData.elementData[this.itemid];
			if (cfg){
				this._zOrder=this.y+cfg.zOrder;
				this.size(cfg.w,cfg.h);
			}
			this.removeFlag=false;
			this.enableUpdate();
		}

		__proto.downComplete=function(data){
			PropTreasureObject.treasureBoxs[this._sid]=data;
		}

		__proto.update=function(frameStep){
			this.loopCount++;
			if (!this.visible && this.loopCount%3!==0){
				this._preTimeStep+=frameStep;
				return;
			}
			frameStep+=this._preTimeStep;
			this._preTimeStep=0;
			this.hasPath && _super.prototype.update.call(this,frameStep);
			this.boxOff=PropTreasureObject.treasureBoxs[this._sid];
			if (!this.boxOff)return;
			if (this.ysScale > 0){
				if (this.visible){
					this.graphics.clear();
					this.ysScale-=0.16;
					this.xsScale+=0.2;
					this.scaleTexture2(this.boxOff,1 / 2 *this.boxOff.width,1 / 2 *this.boxOff.height ,this.xsScale,this.ysScale,1);
				}
				return;
			}
			if (this.removeFlag==true || this.loopCount % 5)return;
			if (! (this.alpha=Player.I.posInView(this.x,this.y,this.height)?1:0))
				return;
			this.graphics.clear();
			var w=this.boxOff.width;
			var h=this.boxOff.height;
			if (this.isOnce)return;
			if (this.dy <=-15){
				this.dir=1;
			}
			if (this.dy >=0){
				this.dir=-1;
			}
			this.__scale-=3*this.dir *this.step;
			this.dy+=3*this.dir *this.yStep;
			if (this._sid==308){
				this.scaleTexture(this.boxOff,1 / 2 *w,1 / 2 *h ,this.bxScale,1);
				return;
			}
			this.scaleTexture(this.boxOff,1 / 2 *w,1 / 2 *h+this.dy ,this.bxScale*this.__scale,1);
			if(this._sid !=140001){
				this.scaleTexture(PropTreasureObject.bottomTex,24+PropTreasureObject.bottomTex.width *0.5,PropTreasureObject.bottomTex.height *0.5+h,2 *this.bxScale / this.__scale);
				}else{
				this.scaleTexture(PropTreasureObject.bottomTex,20+PropTreasureObject.bottomTex.width *0.5,PropTreasureObject.bottomTex.height *0.5+h,2 *this.bxScale / this.__scale);
			}
		}

		__proto.scaleTexture=function(tex,x,y,num,al){
			(al===void 0)&& (al=1);
			this.graphics.drawTexture(tex,x-1/2*num*tex.sourceWidth ,y-1/2*num*tex.sourceHeight,num*tex.sourceWidth,num*tex.sourceHeight,null,al);
		}

		__proto.scaleTexture2=function(tex,x,y,num1,num2,alpha){
			(alpha===void 0)&& (alpha=1);
			this.graphics.drawTexture(tex,x-1/2*num1*tex.sourceWidth ,y-1/2*num2*tex.sourceHeight,num1*tex.sourceWidth,num2*tex.sourceHeight,null,alpha);
		}

		__proto.snowBoxOpen=function(data){
			var _$this=this;
			Laya.stage.addChild(this.sp);
			var spt=new Sprite();
			Tween.to(spt,{alpha:0,update:new Handler(this,function(){
				})},100,null,Handler.create(this,function(){
				_$this.sp && _$this.sp.removeSelfN();
			}))
		}

		__proto._fanXiangOpen_1=function(user){
			if(user==Player.curUser)
				PropTreasureObject.fxFlag=false;
		}

		__proto._fanXiangOpen_2=function(){
			this.czSp.rotation=90;
			Tween.to(this.czSp,{rotation:0},500,null,Handler.create(this,this._fanXiangOpen_3));
		}

		__proto._fanXiangOpen_3=function(){
			this.czSp.removeSelf();
		}

		__proto.fanXiangOpen=function(data){
			var user;
			if (data.OwnerUid==Player.curUID){
				PropTreasureObject.fxFlag=true;
				user=Player.curUser;
			}
			else{
				user=Player.I.netObjects [data.OwnerUid];
			}
			if (user){
			}
		}

		//user.addFanXiangEff(3000);
		__proto._bxOpen=function(){
			if (this.isOnce){
				this.destroy();
			}
		}

		__proto.bxOpen=function(){
			this.removeFlag=true;
			this.graphics.clear();
			this._bxOpen();
		}

		__proto.bezierCurve=function(t,p1,p2,p3){
			return Math.pow((1-t),2)*p1+2 *t *(1-t)*p2+Math.pow(t,2)*p3;
		}

		__proto.changStat=function(){
			this.bxOpen();
			if (!this.timeNum){
				if (! !this.tiledGid || this.tiledGid==0){
					var obj=Player.getObjByGid(this.tiledGid);
					if (obj)
						this.timeNum=obj.rebirthTime;
					else
					this.timeNum=0;
				}
			}
			this.start=Laya.timer.currTimer;
			this.xsScale=1;
			this.ysScale=1;
		}

		__proto.reSetStat=function(){
			this.removeFlag=false;
		}

		__proto.destroy=function(destroyChild){
			(destroyChild===void 0)&& (destroyChild=true);
			this.reSetStat();
			this._preTimeStep=0;
			this.xsScale=0;
			this.ysScale=0;
			PropTreasureObject.fxFlag=false;
			this.isOnce=false;
			this.sp && this.sp.removeSelfN();
			this.czSp && this.czSp.removeSelf();
			this.bxScale=1;
			this.alpha=1;
			this.graphics.clear();
			_super.prototype.destroy.call(this);
		}

		__proto.updatePath=function(t){}
		PropTreasureObject.treasureBoxs={};
		PropTreasureObject.bottomTex=null
		PropTreasureObject.skillTex=null
		PropTreasureObject.guangTex=null
		PropTreasureObject.fxFlag=false;
		return PropTreasureObject;
	})(NetObject)


	/**
	*...
	*@author ...
	*/
	//class laya8.client.player.game.TreasureboxObject extends laya8.client.player.NetObject
	var TreasureboxObject=(function(_super){
		function TreasureboxObject(uid){
			this.skillTex=null;
			this.guangTex=null;
			this.removeFlag=false;
			this.timeNum=NaN;
			this.jtTex=null;
			this.start=NaN;
			this._sid=NaN;
			this.dir=-1;
			this.step=0.003;
			this.__scale=1;
			this.dy=0;
			this.yStep=0.3;
			this.waitTime=0;
			this.setScale=1;
			this.setAlpha=1;
			this.xsScale=0;
			this.ysScale=0;
			this.skillBtn=null;
			this.dt=null;
			this.lz=null;
			TreasureboxObject.__super.call(this,uid);
		}

		__class(TreasureboxObject,'laya8.client.player.game.TreasureboxObject',_super);
		var __proto=TreasureboxObject.prototype;
		__proto.createView=function(sourceID,group){
			this._sid=sourceID;
			if (!TreasureboxObject.bottomTex){
				var img=new Image();
				img.skin="res/skillIcon/bottom.png";
				TreasureboxObject.bottomTex=img.source;
			};
			var data=ConfigData.skillCfg[sourceID];
			if (!data){
				Log_Test.error("未发现次技能"+sourceID);
				return;
			}
			if (!TreasureboxObject.treasureBoxs[sourceID]){
				var url="res/skillIcon/s"+data.btnIcon+".png";
				var source=Loader.getRes(url);
				if (!source){
					source=new Texture();
					Laya.loader.load(url,Handler.create(this,this.downComplete),null,"image",1,true);
				}
				TreasureboxObject.treasureBoxs[sourceID]=source;
			}
			if (!this.jtTex){
				this.jtTex=new Texture();
				this.jtTex=Laya.loader.getRes("gaming/jt2.png");
			}
			this.skillTex=TreasureboxObject.treasureBoxs[sourceID];
			this.guangTex=new Texture();
			this.guangTex=Laya.loader.getRes("gaming/398.png");
			var cfg=ConfigData.elementData[this.itemid];
			if (cfg){
				this.zOrder=this.y+cfg.zOrder;
				this.size(cfg.w,cfg.h);
			}
			this.ysScale=0;
			this.xsScale=0;
			this.removeFlag=false;
			this.enableUpdate();
		}

		//}
		__proto.downComplete=function(data){
			TreasureboxObject.treasureBoxs[this._sid]=data;
		}

		__proto.update=function(frameStep){
			_super.prototype.update.call(this,frameStep);
			if (!this.skillTex||!this.skillTex.bitmap)return;
			if (this.waitTime <=0){
				this.waitTime+=1;
			}
			else{
				if(this.setScale<1.2 && this.waitTime==1){
					this.setScale+=0.025;
				}
				else{
					this.waitTime=2;
					if (this.setScale > 1)
						this.setScale-=0.05;
				}
				if (this.setAlpha < 1)
					this.setAlpha+=0.025
			}
			if (this.removeFlag==true || Stat.loopCount % 3 && this.ysScale==0)return;
			this.graphics.clear();
			if (this.ysScale > 0){
				this.ysScale-=0.16;
				this.xsScale+=0.2;
				this.scaleTexture2(this.skillTex,1 / 2 *this.skillTex.width,1 / 2 *this.skillTex.height ,this.xsScale,this.ysScale,1);
				if (this.ysScale-0.16 < 0)
					this.destroy();
				return;
			}
			if (! (this.visible=Player.I.posInView(this.x,this.y,this.height)))return;
			if (Stat.loopCount % 6 && this.start){
				var num=0 | ((this.timeNum-(Laya.timer.currTimer-this.start))/ 1000+1);
				if (num < 0){
					this.start=0;
					this.alpha=1;
				}
				else
				this.alpha=0;
			}
			else{
				if (this.alpha !=0 && !this.start)this.alpha=1;
			}
			if (this.dy <=-15){
				this.dir=1;
			}
			if (this.dy >=0){
				this.dir=-1;
			}
			this.__scale-=3*this.dir *this.step;
			this.dy+=3 *this.dir *this.yStep;
			if (enumRoomType.nowType==100 || RoleCenter.I.rank < 3){
				if(this._sid==180001){
					this.scaleTexture(this.jtTex,1 / 2 *this.skillTex.width,1 / 2 *this.skillTex.height-this.dy-this.skillTex.height-10,0.7,1);
				}
				else if(this._sid%1000000==270001){
					this.scaleTexture(this.jtTex,1 / 2 *this.skillTex.width,1 / 2 *this.skillTex.height-this.dy-this.skillTex.height-10,0.7,1);
				}
			}
			this.scaleTexture(this.skillTex,1 / 2 *this.skillTex.width,(1 / 2 *this.skillTex.height+this.dy)+(1-this.setScale)*this.skillTex.height / 2,this.__scale *this.setScale,this.setAlpha);
			this.scaleTexture(TreasureboxObject.bottomTex,25+1 / 2 *TreasureboxObject.bottomTex.width,(1 / 2 *TreasureboxObject.bottomTex.height+this.skillTex.height-3),1/this.__scale*2*this.setScale,this.setAlpha);
		}

		//this.graphics.drawTexture(bottomTex,4,skillTex.height,bottomTex.width,bottomTex.height);
		__proto.scaleTexture=function(tex,x,y,num,alpha){
			(alpha===void 0)&& (alpha=1);
			this.graphics.drawTexture(tex,x-1/2*num*tex.sourceWidth ,y-1/2*num*tex.sourceHeight,num*tex.sourceWidth,num*tex.sourceHeight,null,alpha);
		}

		__proto.scaleTexture2=function(tex,x,y,num1,num2,alpha){
			(alpha===void 0)&& (alpha=1);
			this.graphics.drawTexture(tex,x-1/2*num1*tex.sourceWidth ,y-1/2*num2*tex.sourceHeight,num1*tex.sourceWidth,num2*tex.sourceHeight,null,alpha);
		}

		__proto.hidAni=function(data){
			if (!this.skillTex||!this.skillTex.bitmap)return;
			this.dt=data;
			if (this.dt.activeSkill[0].skillIndex==1){
				this.skillBtn=GamingView.I.skillbox2;
				TreasureboxObject.skillAniNum1+=1;
			}
			else if (this.dt.activeSkill[0].skillIndex==2){
				this.skillBtn=GamingView.I.skillbox1;
				TreasureboxObject.skillAniNum2+=1;
			}
			else{
				this.skillBtn=GamingView.I.btnAttack;
				TreasureboxObject.skillAniNum3+=1;
			}
			this.removeFlag=true;
			this.pivot(this.skillTex.width / 2,this.skillTex.height / 2);
			this.lz=this.getParticle1();
			this.pos(GamingView.I.width / 2,GamingView.I.height / 2);
			this.lz.pos(GamingView.I.width/2,GamingView.I.height/2)
			GamingView.I.addChild(this.lz);
			this.bezierTo(this.lz,400,new Point(this.skillBtn.x+this.skillBtn.width*this.skillBtn.scaleX / 2,this.skillBtn.y+this.skillBtn.height*this.skillBtn.scaleY / 2))
		}

		__proto.bezierTo=function(target,time,toPoint,ease){
			var sp=new Sprite();
			sp.alpha=0;
			Tween.to(sp,{alpha:1},time,ease,Handler.create(null,function(){
				sp=null;
			}))
			Laya.timer.frameLoop(1,this,this.setBezier,[target,new Point(target.x,target.y),new Point(toPoint.x,target.y),toPoint,sp],false);
		}

		__proto.setBezier=function(target,p1,p2,p3,sp){
			var _$this=this;
			target.x=this.bezierCurve(sp.alpha,p1.x,p2.x,p3.x);
			target.y=this.bezierCurve(sp.alpha,p1.y,p2.y,p3.y);
			if (!sp || sp.alpha==1){
				this.pos(p3.x,p3.y);
				this.scaleTexture(this.guangTex,1 / 2 *this.guangTex.width,1 / 2 *this.guangTex.height,1);
				this.pivot(this.guangTex.width/2,this.guangTex.height/2)
				Laya.timer.clear(this,this.setBezier);
				var scaleVal=NaN;
				if (this.dt.activeSkill[0].skillIndex !=1 && this.dt.activeSkill[0].skillIndex !=2)
					scaleVal=4.8;
				else
				scaleVal=3.6;
				Tween.to(this,{scaleX:scaleVal,scaleY:scaleVal},500,null,Handler.create(this,function(){
					target.removeSelfN();
					_$this.lz=_$this.getParticle2();
					_$this.lz.x=p3.x;
					_$this.lz.y=p3.y;
					GamingView.I.addChild(_$this.lz);
					Tween.to(this,{scaleX:0,scaleY:0},500,null,Handler.create(this,function(){
						if (_$this.dt.activeSkill[0].skillIndex==1){
							TreasureboxObject.skillAniNum1-=1;
							if(laya8.client.player.game.TreasureboxObject.skillAniNum1==0)
								_$this.skillBtn.mouseEnabled=true;
						}
						else if (_$this.dt.activeSkill[0].skillIndex==2){
							TreasureboxObject.skillAniNum2-=1;
							if(laya8.client.player.game.TreasureboxObject.skillAniNum2==0)
								_$this.skillBtn.mouseEnabled=true;
						}
						else{
							TreasureboxObject.skillAniNum3-=1;
							if(laya8.client.player.game.TreasureboxObject.skillAniNum3==0)
								_$this.skillBtn.mouseEnabled=true;
						}
						_$this.destroy();
					}));
				}));
				return;
			}
		}

		__proto.bezierCurve=function(t,p1,p2,p3){
			return Math.pow((1-t),2)*p1+2 *t *(1-t)*p2+Math.pow(t,2)*p3;
		}

		__proto.getParticle1=function(){
			var jsObj={emitters:[{name:"infinite",rate:40,life:[0.15,0.4]}],initializers:[{name:"radius",radius:[0,0],speed:[-200,200]},{name:"rotation",angle:[0,100]}],affectors:[{name:"move"},{name:"size",from:[10,16],to:0}],renderers:[{name:"image",image:this.guangTex}]};
			var lz=Pool.getItemByClass("ParticleSystem",ParticleSystem);
			lz.setParams(jsObj);
			return lz;
		}

		__proto.getParticle2=function(){
			var jsObj={emitters:[{name:"once",count:50,life:[0.3,0.7]}],initializers:[{name:"radius",radius:[0,2],speed:[50,170]},{name:"force",x:0,y:[-100,100]},{name:"rotation",angle:[0,100]}],affectors:[{name:"move"},{name:"size",from:[10,16],to:0}],renderers:[{name:"image",image:this.guangTex}]};
			var lz=Pool.getItemByClass("ParticleSystem",ParticleSystem);
			lz.setParams(jsObj);
			return lz;
		}

		__proto.changStat=function(){
			this.xsScale=1;
			this.ysScale=1;
			if (!this.timeNum){
				if (! !this.tiledGid || this.tiledGid==0){
					var obj=Player.getObjByGid(this.tiledGid);
					if (obj)
						this.timeNum=obj.rebirthTime;
					else
					this.timeNum=0;
				}
			}
			this.start=Laya.timer.currTimer;
		}

		__proto.reSetStat=function(){
			this.start=0;
		}

		__proto.destroy=function(destroyChild){
			(destroyChild===void 0)&& (destroyChild=true);
			this.reSetStat();
			this.ysScale=0;
			this.xsScale=0;
			this.removeFlag=false;
			this.lz && this.lz.removeSelfN();
			this.skillBtn && (this.skillBtn.mouseEnabled=true);
			this.graphics.clear();
			this.alpha=1;
			this.waitTime=0;
			this.setScale=1;
			this.setAlpha=1;
			_super.prototype.destroy.call(this);
		}

		__proto.updatePath=function(t){
			_super.prototype.update.call(this,t);
		}

		TreasureboxObject.treasureBoxs={};
		TreasureboxObject.bottomTex=null
		TreasureboxObject.canUseFlag=true;
		TreasureboxObject.skillAniNum1=0;
		TreasureboxObject.skillAniNum2=0;
		TreasureboxObject.skillAniNum3=0;
		return TreasureboxObject;
	})(NetObject)


	/**
	*...
	*@author ...
	*/
	//class laya8.client.player.game.ViewFlyScore extends laya8.client.player.NetObject
	var ViewFlyScore=(function(_super){
		function ViewFlyScore(uid){
			this.guangTex=null;
			this.removeFlag=false;
			this.timeNum=NaN;
			this.start=NaN;
			this.dir=-1;
			this.step=0.003;
			this.__scale=1;
			this.dy=0;
			this.yStep=0.3;
			this.waitTime=0;
			this.setScale=1;
			this.setAlpha=1;
			this.xsScale=0;
			this.ysScale=0;
			this.lz=null;
			uid=-1;
			ViewFlyScore.__super.call(this,uid);
		}

		__class(ViewFlyScore,'laya8.client.player.game.ViewFlyScore',_super);
		var __proto=ViewFlyScore.prototype;
		__proto.createView=function(sourceID,group){
			if (!ViewFlyScore.bottomTex){
				var img=new Image();
				img.skin="res/skillIcon/bottom.png";
				ViewFlyScore.bottomTex=img.source;
			}
			this.guangTex=new Texture();
			this.guangTex=Laya.loader.getRes("gaming/398.png");
			var cfg=ConfigData.elementData[this.itemid];
			if (cfg){
				this.zOrder=this.y+cfg.zOrder;
				this.size(cfg.w,cfg.h);
			}
			this.ysScale=0;
			this.xsScale=0;
			this.removeFlag=false;
			this.enableUpdate();
		}

		__proto.update=function(frameStep){
			_super.prototype.update.call(this,frameStep);
			if (this.waitTime <=0){
				this.waitTime+=1;
			}
			else{
				if(this.setScale<1.2 && this.waitTime==1){
					this.setScale+=0.025;
				}
				else{
					this.waitTime=2;
					if (this.setScale > 1)
						this.setScale-=0.05;
				}
				if (this.setAlpha < 1)
					this.setAlpha+=0.025
			}
			if (this.removeFlag==true || Stat.loopCount % 3 && this.ysScale==0)return;
			this.graphics.clear();
			if (this.ysScale > 0){
				this.ysScale-=0.16;
				this.xsScale+=0.2;
				if (this.ysScale-0.16 < 0)
					this.destroy();
				return;
			}
			if (! (this.visible=Player.I.posInView(this.x,this.y,this.height)))return;
			if (Stat.loopCount % 6 && this.start){
				var num=0 | ((this.timeNum-(Laya.timer.currTimer-this.start))/ 1000+1);
				if (num < 0){
					this.start=0;
					this.alpha=1;
				}
				else
				this.alpha=0;
			}
			else{
				if (this.alpha !=0 && !this.start)this.alpha=1;
			}
			if (this.dy <=-15){
				this.dir=1;
			}
			if (this.dy >=0){
				this.dir=-1;
			}
			this.__scale-=3*this.dir *this.step;
			this.dy+=3 *this.dir *this.yStep;
		}

		__proto.scaleTexture=function(tex,x,y,num,alpha){
			(alpha===void 0)&& (alpha=1);
			this.graphics.drawTexture(tex,x-1/2*num*tex.sourceWidth ,y-1/2*num*tex.sourceHeight,num*tex.sourceWidth,num*tex.sourceHeight,null,alpha);
		}

		__proto.hidAni=function(){
			ViewFlyScore.aniNum+=1;
			this.removeFlag=true;
			this.lz=this.getParticle1();
			this.pos(GamingView.I.width / 2,GamingView.I.height / 2);
			this.lz.pos(GamingView.I.width / 2,GamingView.I.height / 2);
			GamingView.I.addChild(this.lz);
			this.bezierTo(this.lz,400,new Point(Laya.stage.width / 2-180,20));
		}

		__proto.bezierTo=function(target,time,toPoint,ease){
			var sp=new Sprite();
			sp.alpha=0;
			Tween.to(sp,{alpha:1},time,ease,Handler.create(null,function(){
				sp=null;
			}))
			Laya.timer.frameLoop(1,this,this.setBezier,[target,new Point(target.x,target.y),new Point(toPoint.x,target.y),toPoint,sp],false);
		}

		__proto.setBezier=function(target,p1,p2,p3,sp){
			var _$this=this;
			target.x=this.bezierCurve(sp.alpha,p1.x,p2.x,p3.x);
			target.y=this.bezierCurve(sp.alpha,p1.y,p2.y,p3.y);
			if (!sp || sp.alpha==1){
				this.pos(p3.x,p3.y);
				this.scaleTexture(this.guangTex,1 / 2 *this.guangTex.width,1 / 2 *this.guangTex.height,1);
				this.pivot(this.guangTex.width/2,this.guangTex.height/2)
				Laya.timer.clear(this,this.setBezier);
				var scaleVal=1.2;
				target.removeSelfN();
				this.lz=this.getParticle2();
				this.lz.x=p3.x;
				this.lz.y=p3.y;
				GamingView.I.addChild(this.lz);
				Tween.to(this,{scaleX:0,scaleY:0},500,null,Handler.create(this,function(){
					ViewFlyScore.aniNum-=1;
					_$this.destroy();
				}));
				return;
			}
		}

		__proto.bezierCurve=function(t,p1,p2,p3){
			return Math.pow((1-t),2)*p1+2 *t *(1-t)*p2+Math.pow(t,2)*p3;
		}

		__proto.getParticle1=function(){
			var jsObj={emitters:[{name:"infinite",rate:40,life:[0.15,0.4]}],initializers:[{name:"radius",radius:[0,0],speed:[-200,200]},{name:"rotation",angle:[0,100]}],affectors:[{name:"move"},{name:"size",from:[10,16],to:0}],renderers:[{name:"image",image:this.guangTex}]};
			var lz=Pool.getItemByClass("ParticleSystem",ParticleSystem);
			lz.setParams(jsObj);
			return lz;
		}

		__proto.getParticle2=function(){
			var jsObj={emitters:[{name:"once",count:50,life:[0.3,0.7]}],initializers:[{name:"radius",radius:[0,2],speed:[50,170]},{name:"force",x:0,y:[-100,100]},{name:"rotation",angle:[0,100]}],affectors:[{name:"move"},{name:"size",from:[10,16],to:0}],renderers:[{name:"image",image:this.guangTex}]};
			var lz=Pool.getItemByClass("ParticleSystem",ParticleSystem);
			lz.setParams(jsObj);
			return lz;
		}

		__proto.reSetStat=function(){
			this.start=0;
		}

		__proto.destroy=function(destroyChild){
			(destroyChild===void 0)&& (destroyChild=true);
			this.reSetStat();
			this.ysScale=0;
			this.xsScale=0;
			this.removeFlag=false;
			this.lz && this.lz.removeSelfN();
			this.graphics.clear();
			this.alpha=1;
			this.waitTime=0;
			this.setScale=1;
			this.setAlpha=1;
			Pool.recover("ViewFlyScore",this);
		}

		ViewFlyScore.getViewFly=function(){
			return Pool.getItemByClass("ViewFlyScore",ViewFlyScore);
		}

		ViewFlyScore.bottomTex=null
		ViewFlyScore.canUseFlag=true;
		ViewFlyScore.aniNum=0;
		return ViewFlyScore;
	})(NetObject)


	/**
	*角色头顶信息
	*@author ...
	*/
	//class view.UserTopView extends laya8.client.player.game.RoleTopView
	var UserTopView=(function(_super){
		function UserTopView(){
			this.moodId=0;
			this.user=null;
			this.goldenObj=null;
			this._titleStr=null;
			this.skillTex=null;
			this.barquan=null;
			this.bar=null;
			this.getSnowSpeed=NaN;
			this.getSnowTime=0;
			this.heroPLV=null;
			this.goldenFuc=null;
			this.xlIndex=0;
			this.xlType=['b','h','y','z'];
			this.curType=-1;
			this.btmArr=[];
			this.buffLen=0;
			this.buffLeft=NaN;
			this.sb_ddyy=0;
			this.sb_dir=-1;
			this.sx_alpha=1;
			this.dalpha=1;
			this.cdel=0.025;
			this.moodArr=[];
			this.startIdx=0;
			this.playingId=0;
			this.isPlaying=false;
			this.sourceArr=[];
			this._levelStr=new WordText();
			this._nameStr=new WordText();
			UserTopView.__super.call(this);
			UserTopView._levelBgs || UserTopView.init();
		}

		__class(UserTopView,'view.UserTopView',_super);
		var __proto=UserTopView.prototype;
		/**恢复状态 结束执行 */
		__proto.resetState=function(){
			this.goldenFuc=null;
			this.goldenObj=null;
			this.curType=-1;
			_super.prototype.resetState.call(this);
			UserTopView.rank=null;
			this.skillTex=null;
			this.heroPLV=null;
			this.btmArr.length=0;
			this.buffLen=0;
			this.playingId=this.moodId=0;
			this.getSnowSpeed=this.getSnowTime=0;
		}

		/**
		*
		*@param n
		*/
		__proto.openBox=function(n){
			this.getSnowSpeed=UserTopView._BARWIDTH / n;
			this.getSnowTime=0;
		}

		/**
		*
		*/
		__proto.stopBox=function(){
			this.getSnowSpeed=this.getSnowTime=0;
		}

		/**每次开始执行*/
		__proto.start=function(){
			this.user=this.parent;UserTopView.rank=UserTopView.rank|| GamingView.I.viewRank.listRank;
			this._nameStr.setText(this.user.shortName);
			this.initTitle(this.user._myTitle);
			var temp=(this.user.teamNameCfg ? this.user.teamNameCfg.id :3);
			var temp=(this.user.selfTeam==0)?2:3;
			this.bar=Laya.loader.getRes("gamingtop/bar"+temp+".png");
			this.barquan=Laya.loader.getRes("gamingtop/bj"+temp+".png");
			var userBase=Player.I.getUserBaseInfo(this.user.selfID);
			if (userBase.heroExp==-1){
				this.user.heroLv=-1;
			}
			else{
			}
			_super.prototype.start.call(this);
		}

		/**
		*生成指定范围的随机数
		*@param {*}minNum 最小值
		*@param {*}maxNum 最大值
		*/
		__proto.randRange=function(minNum,maxNum){
			return (Math.floor(Math.random()*(maxNum-minNum+1))+minNum);
		}

		__proto.initTitle=function(t){
			if (t)
			{this._titleStr=this._titleStr|| new WordText();
				this._titleStr.setText(t);
			}
			else{
				this._titleStr=null;
			}
		}

		/**
		*重新计算距离
		*/
		__proto.resizeBuffLeft=function(){
			this.buffLen=this.btmArr.length;
			var len=this.buffLen;
			var d=0 | (len / 2);
			if (d > 0){
				d=-d *30+(len % 2==0 ? 28 :15);
			}
			if (d==0){
				d=15;
			}
			this.buffLeft=d;
		}

		/**
		*增加buffer
		*/
		__proto.addBuff=function(buff){
			if (this.btmArr.indexOf(buff)===-1){
				this.btmArr.push(buff);
				this.resizeBuffLeft();
			}
		}

		/**
		*清除buffer
		*/
		__proto.removeBuff=function(buff){
			var num=this.btmArr.indexOf(buff);
			if (num !=-1){
				this.btmArr.splice(num,1);
				this.resizeBuffLeft();
			}
		}

		__proto.customRender=function(context,x,y){
			if (!this._started)return;
			this._renderType |=0x400;
			var user=this.user;
			var ctx=context.ctx;
			var dy=36;
			var uw=user.width;
			var left=uw / 2-75;
			var tex;
			var colorStr=(user.self==0)? "white" :"white";
			var ddx=-15;
			var ddy=-30;
			if (user._diamondNumText){
				ctx.drawTexture(UserTopView.texture_gam,x+uw+15,y-dy+25,UserTopView.texture_gam.width,UserTopView.texture_gam.height,-1 / 2 *UserTopView.texture_gam.width,-1 / 2 *UserTopView.texture_gam.height);
				ctx.fillText(user._diamondNumText,x+uw+UserTopView.texture_gam.width+5,y-dy+18,"bold 18px Arial",colorStr,"center");
			}
			if (user.teamNameCfg)colorStr=user.teamNameCfg.color;
			if(enumRoomType.nowType==enumRoomType.ROOMTYPE_CUSTOM_TEAM||enumRoomType.nowType==enumRoomType.ROOMTYPE_LADDER){
				if(Player.curUser && (user.teamId==Player.curUser.teamId))
					colorStr="#2a5fd9";
				else
				colorStr="#c81616";
			}
			this.showjifen(ctx,x-(UserTopView.btop.width-uw)/ 2,y-dy-5);
			if (this.curType !=-1){
				tex=Laya.loader.getRes("gamingtop/"+this.xlType[this.curType]+this.xlIndex+".png");
				if (Stat.loopCount % 5==0)
					this.xlIndex=this.xlIndex+1 > 3 ? 0 :this.xlIndex+1;
				ctx.drawTexture(tex,x+left+tex.offsetX-9,y+tex.offsetY-dy+12,tex.width,tex.height,0,-tex.height);
			}
			if (this.isShow){
				ctx.fillText(this._nameStr,x+1 / 2 *uw,y-dy+ddy-1 / 2 *user.userNameH,"bold 16px simHei",colorStr,"center");
			}
			this.drawSkillBox(ctx,uw,-dy+ddy,x,y);
			this.buffLen > 0 && this.drawBuff(ctx,x,y,this.buffLen,this.buffLeft);
			this.moodId !=0 && this.playMood(ctx,x,y);
			if (user.isHavePet){
				this.showPet(user,x+left,y,ctx);
			}
			if (this.getSnowSpeed !=0){
				this.getSnowTime+=Laya.timer.delta;
				var len=this.getSnowTime *this.getSnowSpeed;
				if (len <=UserTopView._BARWIDTH){
					var l=x-7;
					var r=y-dy+5;
					var w=UserTopView._getSnowBgTex.sourceWidth;
					var h=UserTopView._getSnowBgTex.sourceHeight;
					var bg=UserTopView._getSnowBgTex;
					ctx.drawTexture(bg,l+bg.offsetX,r+bg.offsetY,w,h,0,0);
					RoleTopView._drawImgX(ctx,UserTopView._getSnowTex,l+UserTopView._getSnowTex.offsetX,r+UserTopView._getSnowTex.offsetY,len / UserTopView._BARWIDTH,len);
				}
				else{
					this.getSnowSpeed=0;
				}
			}
		}

		__proto.showPet=function(user,x,y,ctx){
			var pet=user.pet;
			var tex;
			var wB=NaN;
			if (pet.isBorn){
				if (UserTopView.sbBornIndex <=3){
					tex=UserTopView.sbBornArr[UserTopView.sbBornIndex];
					wB=tex.width *1 / 2;
					if (this.sx_alpha !=1){
						ctx.save();
						ctx.globalAlpha=this.sx_alpha;
						ctx.drawTexture(tex,x+wB,y+10+this.sb_ddyy,tex.width,tex.height,-wB,-1 / 2 *tex.height);
						ctx.restore();
					}
					else{
						ctx.drawTexture(tex,x+wB,y+10+this.sb_ddyy,tex.width,tex.height,-wB,-1 / 2 *tex.height);
					}
					if (Stat.loopCount % 5===0)UserTopView.sbBornIndex++;
					return;
				}
				else{
					UserTopView.sbBornIndex=0;
					pet.isBorn=false;
				}
			};
			var isPetAtk=0;
			var _dir=0;
			if (pet.isAtk){
				isPetAtk=1;
				_dir=pet.dir;
			}
			else{
				isPetAtk=0;
				_dir=user._dir;
			};
			var index=_dir+isPetAtk *8;
			tex=UserTopView.sbArr[index];
			if (tex){
				if (this.sb_ddyy <=-10){
					this.sb_dir=1;
				}
				if (this.sb_ddyy >=0){
					this.sb_dir=-1;
				}
				this.sb_ddyy+=3 *this.sb_dir *0.1;
				wB=tex.width *1 / 2;
				var _x_=x+wB;
				var _y_=y+10+this.sb_ddyy;
				if (this.sx_alpha !=1){
					ctx.save();
					ctx.globalAlpha=this.sx_alpha;
					ctx.drawTexture(tex,_x_,_y_,tex.width,tex.height,-wB,-1 / 2 *tex.height);
					ctx.restore();
				}
				else{
					ctx.drawTexture(tex,_x_,_y_,tex.width,tex.height,-wB,-1 / 2 *tex.height);
				}
				pet.x=_x_+user["_x"];
				pet.y=_y_+user["_y"];
			}
		}

		__proto.rock=function(id){
			this.skillTex=Laya.loader.getRes("gamingtop/s"+id+".png");
		}

		/**
		*
		*@param ctx
		*@param uw
		*@param dy
		*@param x
		*@param y
		*/
		__proto.drawSkillBox=function(ctx,uw,dy,x,y){
			if (this.user.heroLv !=-1)
			{this.heroPLV=this.heroPLV|| Laya.loader.getRes("gaming/lv_"+this.user.heroLv+".png");
				this.dalpha=1;
				this.heroPLV && ctx.drawTexture(this.heroPLV,x-this.heroPLV.width-30,y+dy+25,40,40,-20,-20);
			}
		}

		/**
		*
		*@param ctx
		*@param x
		*@param y
		*@param len buff列表长度
		*@param buffLeft 左边定位点
		*/
		__proto.drawBuff=function(ctx,x,y,len,buffLeft){
			var btmTex;
			for (var i=0;i < len;i++){
				btmTex=Laya.loader.getRes("passiveSkills/"+this.btmArr[i]+".png");
				ctx.drawTexture(btmTex,30 *i+buffLeft,y+84,30,30,0,0);
			}
		}

		/**
		*更新表情
		*@param id
		*/
		__proto.moodUpdate=function(id){
			if (this.playingId==id)return;
			for (var i=0;i < ConfigData.fightExp[id].count;i++){
				this.sourceArr.push(Loader.getRes("mood/"+ConfigData.fightExp[id].name+i+".png"));
			}
			if (this.isPlaying && this.playingId !=0){
				if (ConfigData.fightExp[this.playingId].priority < ConfigData.fightExp[id].priority){
					return;
				}
				else{
					this.isPlaying=false;
				}
			}
			this.moodArr=this.sourceArr;
			this.sourceArr=[];
			this.isPlaying=true;
		}

		/**
		*局内表情
		*/
		__proto.playMood=function(ctx,x,y){
			if (this.isPlaying){
				this.playingId=this.moodId;
				var tex;
				if (this.startIdx < ConfigData.fightExp[this.moodId].count){
					tex=this.moodArr [this.startIdx];
					ctx.drawTexture(tex,x-60,y,30,30,0,0);
					if (Stat.loopCount % 5===0)this.startIdx++;
					return;
				}
				else{
					this.isPlaying=false;
					this.startIdx=this.playingId=this.moodId=0;
				}
			}
		}

		/**
		*控制播放蓄力效果
		*@param curType 0 蓝色 1 红色 2黄色 3紫色-1不播放
		*/
		__proto.setXuliEff=function(curType){
			(curType===void 0)&& (curType=-1);
			this.xlIndex=0;
			this.curType=curType;
		}

		__proto.setGoldenIcon=function(obj){}
		//
		__proto.updateCurrentB=function(preHp,hp){
			if (this.user){
				this.currentB=Math.max(this.currentB,preHp);
				this.perB=(this.currentB-hp)/ 25;
			}
		}

		/**
		*显示积分条
		*@param ctx
		*@param x
		*@param y
		*/
		__proto.showjifen=function(ctx,x,y){
			ctx.drawTexture(UserTopView.btop,x,y,UserTopView.btop.width,UserTopView.btop.height,0,-1 / 2 *UserTopView.btop.height);
			ctx.drawTexture(this.barquan,x+3,y,this.barquan.width,this.barquan.height,0,-1 / 2 *this.barquan.height);
			RoleTopView.fillImageText(ctx,UserTopView.denjiNum,this.user.level,x+8,y+1,0,-1 / 2 *UserTopView.dengjiHeight);
			var w=UserTopView.snowWidth;
			var lv1=this.user.hp / this.user.maxHp;
			if (this.currentB > this.user.hp){
				var lv2=(this.currentB-=this.perB)/ this.user.maxHp;
				RoleTopView._drawImgX(ctx,RoleTopView.barbottom,x+34,y-4,lv2,lv2 *w);
			}
			RoleTopView._drawImgX(ctx,this.bar,x+34,y-4,lv1,lv1 *w);
		}

		/**获取显示的左上角的坐标-考虑缩放*/
		__proto.getPo=function(po){po=po|| new Point();
			var p=this._parent;
			po.x=(1 / 2 *p.width-1 / 2 *219+29)*p.scaleX;
			po.y=-15 *p.scaleY;
			return po;
		}

		UserTopView.init=function(){
			if (UserTopView._levelBgs)return;
			UserTopView._levelBgs=[];
			RoleTopView.barbottom=Loader.getRes("gamingtop/dj2.png");
			UserTopView.texture_nvKing=Loader.getRes("gamingtop/nvwanghuangguan.png");
			UserTopView.texture_gam=Loader.getRes("gamingtop/gem.png");
			UserTopView._tilTexture=Loader.getRes("gamingtop/tl.png");
			UserTopView.btop=Loader.getRes("gamingtop/djball.png");
			UserTopView.denjiNum=Loader.getRes("gamingtop/djnum.png");
			UserTopView.dengjiHeight=UserTopView.denjiNum.height;
			UserTopView.ice=Loader.getRes("gamingtop/dj1.png");
			UserTopView.snow=Loader.getRes("gamingtop/dj2.png");
			UserTopView.snowWidth=UserTopView.snow.width;
			UserTopView._getSnowTex=Loader.getRes("gamingtop/tlget.png");
			UserTopView._getSnowBgTex=Loader.getRes("gamingtop/tlbg.png");
			var sbUrl;
			for (var i=0;i < 16;i++){
				if (i < 8)sbUrl="gamingtop/sb_def";
				else sbUrl="gamingtop/sb_atk";
				UserTopView.sbArr.push(Loader.getRes(sbUrl+i % 8+".png"));
			}
			for (i=0;i < 4;i++){
				UserTopView.sbBornArr.push(Loader.getRes("gamingtop/sb_born"+i+".png"));
			}
		}

		UserTopView._levelBgs=null;
		UserTopView.btop=null
		UserTopView.denjiNum=null
		UserTopView.dengjiHeight=0;
		UserTopView._tilTexture=null;
		UserTopView._getSnowTex0=null
		UserTopView._getSnowTex=null
		UserTopView._getSnowTex1=null
		UserTopView._getSnowBgTex0=null
		UserTopView._getSnowBgTex=null
		UserTopView._getSnowBgTex1=null
		UserTopView.texture_nvKing=null
		UserTopView.texture_gam=null
		UserTopView._isInit=false;
		UserTopView._cmds=null
		UserTopView._tempBgUV=null
		UserTopView._tempXLUV=null
		UserTopView._BARWIDTH=100;
		UserTopView._instance=null
		UserTopView.rank=null
		UserTopView.sb_yStep=0.1;
		UserTopView.djX=-40;
		UserTopView.djY=-25;
		UserTopView.ice=null
		UserTopView.snow=null
		UserTopView.snowWidth=0;
		UserTopView.boxs=[];
		UserTopView.sbArr=[];
		UserTopView.sbActionNum=8;
		UserTopView.sbBornArr=[];
		UserTopView.sbBornIndex=0;
		UserTopView.lan=null
		UserTopView.red=null
		__static(UserTopView,
		['daojuIds',function(){return this.daojuIds=[1,2,210001,250001,260001];}
		]);
		return UserTopView;
	})(RoleTopView)


	/**
	*关键帧动画播放类。
	*/
	//class laya.display.FrameAnimation extends laya.display.AnimationPlayerBase
	var FrameAnimation=(function(_super){
		function FrameAnimation(){
			this._targetDic=null;
			this._animationData=null;
			this._animationNewFrames=null;
			FrameAnimation.__super.call(this);
			if (FrameAnimation._sortIndexFun==null){
				FrameAnimation._sortIndexFun=MathUtil.sortByKey("index",false,true);
			}
		}

		__class(FrameAnimation,'laya.display.FrameAnimation',_super);
		var __proto=FrameAnimation.prototype;
		/**
		*@private
		*初始化动画数据
		*@param targetDic 对象表
		*@param animationData 动画数据
		*
		*/
		__proto._setUp=function(targetDic,animationData){
			this._labels=null;
			this._animationNewFrames=null;
			this._targetDic=targetDic;
			this._animationData=animationData;
			this.interval=1000 / animationData.frameRate;
			if (animationData.parsed){
				this._count=animationData.count;
				this._labels=animationData.labels;
				this._animationNewFrames=animationData.animationNewFrames;
				}else {
				this._animationNewFrames=[];
				this._calculateDatas();
			}
			animationData.parsed=true;
			animationData.labels=this._labels;
			animationData.count=this._count;
			animationData.animationNewFrames=this._animationNewFrames;
		}

		/**@inheritDoc */
		__proto.clear=function(){
			_super.prototype.clear.call(this);
			this._targetDic=null;
			this._animationData=null;
		}

		/**@inheritDoc */
		__proto._displayToIndex=function(value){
			if (!this._animationData)return;
			if (value < 0)value=0;
			if (value > this._count)value=this._count;
			var nodes=this._animationData.nodes,i=0,len=nodes.length;
			for (i=0;i < len;i++){
				this._displayNodeToFrame(nodes[i],value);
			}
		}

		/**
		*@private
		*将节点设置到某一帧的状态
		*@param node 节点ID
		*@param frame
		*@param targetDic 节点表
		*
		*/
		__proto._displayNodeToFrame=function(node,frame,targetDic){
			if (!targetDic)targetDic=this._targetDic;
			var target=targetDic[node.target];
			if (!target){
				return;
			};
			var frames=node.frames,key,propFrames,value;
			var keys=node.keys,i=0,len=keys.length;
			for (i=0;i < len;i++){
				key=keys[i];
				propFrames=frames[key];
				if (propFrames.length > frame){
					value=propFrames[frame];
					}else {
					value=propFrames[propFrames.length-1];
				}
				target[key]=value;
			}
		}

		/**
		*@private
		*计算帧数据
		*
		*/
		__proto._calculateDatas=function(){
			if (!this._animationData)return;
			var nodes=this._animationData.nodes,i=0,len=nodes.length,tNode;
			this._count=0;
			for (i=0;i < len;i++){
				tNode=nodes[i];
				this._calculateNodeKeyFrames(tNode);
			}
			this._count+=1;
		}

		/**
		*@private
		*计算某个节点的帧数据
		*@param node
		*
		*/
		__proto._calculateNodeKeyFrames=function(node){
			var keyFrames=node.keyframes,key,tKeyFrames,target=node.target;
			if (!node.frames){
				node.frames={};
			}
			if (!node.keys){
				node.keys=[];
				}else {
				node.keys.length=0;
			}
			if (!node.initValues){
				node.initValues={};
			}
			for (key in keyFrames){
				tKeyFrames=keyFrames[key];
				if (!node.frames[key]){
					node.frames[key]=[];
				}
				if (this._targetDic && this._targetDic[target]){
					node.initValues[key]=this._targetDic[target][key];
				}
				tKeyFrames.sort(FrameAnimation._sortIndexFun);
				node.keys.push(key);
				this._calculateNodePropFrames(tKeyFrames,node.frames[key],key,target);
			}
		}

		/**
		*将动画控制对象还原到动画控制之前的状态
		*/
		__proto.resetToInitState=function(){
			if (!this._targetDic)return;
			if (!this._animationData)return;
			var nodes=this._animationData.nodes,i=0,len=nodes.length;
			var tNode;
			var initValues;
			for (i=0;i < len;i++){
				tNode=nodes[i];
				initValues=tNode.initValues;
				if (!initValues)continue ;
				var target=this._targetDic[tNode.target];
				if (!target)continue ;
				var key;
				for (key in initValues){
					target[key]=initValues[key];
				}
			}
		}

		/**
		*@private
		*计算节点某个属性的帧数据
		*@param keyframes
		*@param frames
		*@param key
		*@param target
		*
		*/
		__proto._calculateNodePropFrames=function(keyframes,frames,key,target){
			var i=0,len=keyframes.length-1;
			frames.length=keyframes[len].index+1;
			for (i=0;i < len;i++){
				this._dealKeyFrame(keyframes[i]);
				this._calculateFrameValues(keyframes[i],keyframes[i+1],frames);
			}
			if (len==0){
				frames[0]=keyframes[0].value;
				if (this._animationNewFrames)
					this._animationNewFrames[keyframes[0].index]=true;
			}
			this._dealKeyFrame(keyframes[i]);
		}

		/**
		*@private
		*
		*/
		__proto._dealKeyFrame=function(keyFrame){
			if (keyFrame.label && keyFrame.label !="")this.addLabel(keyFrame.label,keyFrame.index);
		}

		/**
		*@private
		*计算两个关键帧直接的帧数据
		*@param startFrame
		*@param endFrame
		*@param result
		*
		*/
		__proto._calculateFrameValues=function(startFrame,endFrame,result){
			var i=0,easeFun;
			var start=startFrame.index,end=endFrame.index;
			var startValue=startFrame.value;
			var dValue=endFrame.value-startFrame.value;
			var dLen=end-start;
			if (end > this._count)this._count=end;
			if (startFrame.tween){
				easeFun=Ease[startFrame.tweenMethod];
				if (easeFun==null){
					easeFun=Ease.linearNone;
				}
				for (i=start;i < end;i++){
					result[i]=easeFun(i-start,startValue,dValue,dLen);
					if (this._animationNewFrames){
						this._animationNewFrames[i]=true;
					}
				}
				}else {
				for (i=start;i < end;i++){
					result[i]=startValue;
				}
			}
			if (this._animationNewFrames){
				this._animationNewFrames[startFrame.index]=true;
				this._animationNewFrames[endFrame.index]=true;
			}
			result[endFrame.index]=endFrame.value;
		}

		FrameAnimation._sortIndexFun=null
		return FrameAnimation;
	})(AnimationPlayerBase)


	/**
	*<p> <code>Clip</code> 类是位图切片动画。</p>
	*<p> <code>Clip</code> 可将一张图片，按横向分割数量 <code>clipX</code> 、竖向分割数量 <code>clipY</code> ，
	*或横向分割每个切片的宽度 <code>clipWidth</code> 、竖向分割每个切片的高度 <code>clipHeight</code> ，
	*从左向右，从上到下，分割组合为一个切片动画。</p>
	*Image和Clip组件是唯一支持异步加载的两个组件，比如clip.skin="abc/xxx.png"，其他UI组件均不支持异步加载。
	*
	*@example <caption>以下示例代码，创建了一个 <code>Clip</code> 实例。</caption>
	*package
	*{
		*import laya.ui.Clip;
		*public class Clip_Example
		*{
			*private var clip:Clip;
			*public function Clip_Example()
			*{
				*Laya.init(640,800);//设置游戏画布宽高。
				*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
				*onInit();
				*}
			*private function onInit():void
			*{
				*clip=new Clip("resource/ui/clip_num.png",10,1);//创建一个 Clip 类的实例对象 clip ,传入它的皮肤skin和横向分割数量、竖向分割数量。
				*clip.autoPlay=true;//设置 clip 动画自动播放。
				*clip.interval=100;//设置 clip 动画的播放时间间隔。
				*clip.x=100;//设置 clip 对象的属性 x 的值，用于控制 clip 对象的显示位置。
				*clip.y=100;//设置 clip 对象的属性 y 的值，用于控制 clip 对象的显示位置。
				*clip.on(Event.CLICK,this,onClick);//给 clip 添加点击事件函数侦听。
				*Laya.stage.addChild(clip);//将此 clip 对象添加到显示列表。
				*}
			*private function onClick():void
			*{
				*trace("clip 的点击事件侦听处理函数。clip.total="+clip.total);
				*if (clip.isPlaying==true)
				*{
					*clip.stop();//停止动画。
					*}else {
					*clip.play();//播放动画。
					*}
				*}
			*}
		*}
	*@example
	*Laya.init(640,800);//设置游戏画布宽高
	*Laya.stage.bgColor="#efefef";//设置画布的背景颜色
	*var clip;
	*Laya.loader.load("resource/ui/clip_num.png",laya.utils.Handler.create(this,loadComplete));//加载资源
	*function loadComplete(){
		*console.log("资源加载完成！");
		*clip=new laya.ui.Clip("resource/ui/clip_num.png",10,1);//创建一个 Clip 类的实例对象 clip ,传入它的皮肤skin和横向分割数量、竖向分割数量。
		*clip.autoPlay=true;//设置 clip 动画自动播放。
		*clip.interval=100;//设置 clip 动画的播放时间间隔。
		*clip.x=100;//设置 clip 对象的属性 x 的值，用于控制 clip 对象的显示位置。
		*clip.y=100;//设置 clip 对象的属性 y 的值，用于控制 clip 对象的显示位置。
		*clip.on(Event.CLICK,this,onClick);//给 clip 添加点击事件函数侦听。
		*Laya.stage.addChild(clip);//将此 clip 对象添加到显示列表。
		*}
	*function onClick()
	*{
		*console.log("clip 的点击事件侦听处理函数。");
		*if(clip.isPlaying==true)
		*{
			*clip.stop();
			*}else {
			*clip.play();
			*}
		*}
	*@example
	*import Clip=laya.ui.Clip;
	*import Handler=laya.utils.Handler;
	*class Clip_Example {
		*private clip:Clip;
		*constructor(){
			*Laya.init(640,800);//设置游戏画布宽高。
			*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
			*this.onInit();
			*}
		*private onInit():void {
			*this.clip=new Clip("resource/ui/clip_num.png",10,1);//创建一个 Clip 类的实例对象 clip ,传入它的皮肤skin和横向分割数量、竖向分割数量。
			*this.clip.autoPlay=true;//设置 clip 动画自动播放。
			*this.clip.interval=100;//设置 clip 动画的播放时间间隔。
			*this.clip.x=100;//设置 clip 对象的属性 x 的值，用于控制 clip 对象的显示位置。
			*this.clip.y=100;//设置 clip 对象的属性 y 的值，用于控制 clip 对象的显示位置。
			*this.clip.on(laya.events.Event.CLICK,this,this.onClick);//给 clip 添加点击事件函数侦听。
			*Laya.stage.addChild(this.clip);//将此 clip 对象添加到显示列表。
			*}
		*private onClick():void {
			*console.log("clip 的点击事件侦听处理函数。clip.total="+this.clip.total);
			*if (this.clip.isPlaying==true){
				*this.clip.stop();//停止动画。
				*}else {
				*this.clip.play();//播放动画。
				*}
			*}
		*}
	*
	*/
	//class laya.ui.Clip extends laya.ui.Component
	var Clip=(function(_super){
		function Clip(url,clipX,clipY){
			this._sources=null;
			this._bitmap=null;
			this._skin=null;
			this._clipX=1;
			this._clipY=1;
			this._clipWidth=0;
			this._clipHeight=0;
			this._autoPlay=false;
			this._interval=50;
			this._complete=null;
			this._isPlaying=false;
			this._index=0;
			this._clipChanged=false;
			this._group=null;
			Clip.__super.call(this);
			(clipX===void 0)&& (clipX=1);
			(clipY===void 0)&& (clipY=1);
			this._clipX=clipX;
			this._clipY=clipY;
			this.skin=url;
		}

		__class(Clip,'laya.ui.Clip',_super);
		var __proto=Clip.prototype;
		/**@inheritDoc */
		__proto.destroy=function(destroyChild){
			(destroyChild===void 0)&& (destroyChild=true);
			_super.prototype.destroy.call(this,true);
			this._bitmap && this._bitmap.destroy();
			this._bitmap=null;
			this._sources=null;
		}

		/**
		*销毁对象并释放加载的皮肤资源。
		*/
		__proto.dispose=function(){
			this.destroy(true);
			Laya.loader.clearRes(this._skin);
		}

		/**@inheritDoc */
		__proto.createChildren=function(){
			this.graphics=this._bitmap=new AutoBitmap();
		}

		/**@private */
		__proto._onDisplay=function(e){
			if (this._isPlaying){
				if (this._displayedInStage)this.play();
				else this.stop();
				}else if (this._autoPlay){
				this.play();
			}
		}

		/**
		*@private
		*改变切片的资源、切片的大小。
		*/
		__proto.changeClip=function(){
			this._clipChanged=false;
			if (!this._skin)return;
			var img=Loader.getRes(this._skin);
			if (img){
				this.loadComplete(this._skin,img);
				}else {
				Laya.loader.load(this._skin,Handler.create(this,this.loadComplete,[this._skin]));
			}
		}

		/**
		*@private
		*加载切片图片资源完成函数。
		*@param url 资源地址。
		*@param img 纹理。
		*/
		__proto.loadComplete=function(url,img){
			if (url===this._skin && img){
				var w=this._clipWidth || Math.ceil(img.sourceWidth / this._clipX);
				var h=this._clipHeight || Math.ceil(img.sourceHeight / this._clipY);
				var key=this._skin+w+h;
				var clips=AutoBitmap.getCache(key);
				if (clips)this._sources=clips;
				else {
					this._sources=[];
					for (var i=0;i < this._clipY;i++){
						for (var j=0;j < this._clipX;j++){
							this._sources.push(Texture.createFromTexture(img,w *j,h *i,w,h));
						}
					}
					AutoBitmap.setCache(key,this._sources);
				}
				this.index=this._index;
				this.event("loaded");
				this.onCompResize();
			}
		}

		/**
		*播放动画。
		*/
		__proto.play=function(){
			this._isPlaying=true;
			this.index=0;
			this._index++;
			Laya.timer.loop(this.interval,this,this._loop);
			this.on("display",this,this._onDisplay);
			this.on("undisplay",this,this._onDisplay);
		}

		/**
		*@private
		*/
		__proto._loop=function(){
			if (this._style.visible && this._sources){
				this.index=this._index,this._index++;
				this._index >=this._sources.length && (this._index=0);
			}
		}

		/**
		*停止动画。
		*/
		__proto.stop=function(){
			this._isPlaying=false;
			Laya.timer.clear(this,this._loop);
		}

		/**@private */
		__proto._setClipChanged=function(){
			if (!this._clipChanged){
				this._clipChanged=true;
				this.callLater(this.changeClip);
			}
		}

		/**
		*表示动画播放间隔时间(以毫秒为单位)。
		*/
		__getset(0,__proto,'interval',function(){
			return this._interval;
			},function(value){
			if (this._interval !=value){
				this._interval=value;
				if (this._isPlaying)this.play();
			}
		});

		/**
		*@copy laya.ui.Image#skin
		*/
		__getset(0,__proto,'skin',function(){
			return this._skin;
			},function(value){
			if (this._skin !=value){
				this._skin=value;
				if (value){
					this._setClipChanged()
					}else {
					this._bitmap.source=null;
				}
			}
		});

		/**
		*源数据。
		*/
		__getset(0,__proto,'sources',function(){
			return this._sources;
			},function(value){
			this._sources=value;
			this.index=this._index;
			this.event("loaded");
		});

		/**X轴（横向）切片数量。*/
		__getset(0,__proto,'clipX',function(){
			return this._clipX;
			},function(value){
			this._clipX=value || 1;
			this._setClipChanged()
		});

		/**Y轴(竖向)切片数量。*/
		__getset(0,__proto,'clipY',function(){
			return this._clipY;
			},function(value){
			this._clipY=value || 1;
			this._setClipChanged()
		});

		/**
		*切片动画的总帧数。
		*/
		__getset(0,__proto,'total',function(){
			this.runCallLater(this.changeClip);
			return this._sources ? this._sources.length :0;
		});

		/**
		*横向分割时每个切片的宽度，与 <code>clipX</code> 同时设置时优先级高于 <code>clipX</code> 。
		*/
		__getset(0,__proto,'clipWidth',function(){
			return this._clipWidth;
			},function(value){
			this._clipWidth=value;
			this._setClipChanged()
		});

		/**
		*<p>当前实例的位图 <code>AutoImage</code> 实例的有效缩放网格数据。</p>
		*<p>数据格式："上边距,右边距,下边距,左边距,是否重复填充(值为0：不重复填充，1：重复填充)"，以逗号分隔。
		*<ul><li>例如："4,4,4,4,1"</li></ul></p>
		*@see laya.ui.AutoBitmap.sizeGrid
		*/
		__getset(0,__proto,'sizeGrid',function(){
			if (this._bitmap.sizeGrid)return this._bitmap.sizeGrid.join(",");
			return null;
			},function(value){
			this._bitmap.sizeGrid=UIUtils.fillArray(Styles.defaultSizeGrid,value,Number);
		});

		/**
		*资源分组。
		*/
		__getset(0,__proto,'group',function(){
			return this._group;
			},function(value){
			if (value && this._skin)Loader.setGroup(this._skin,value);
			this._group=value;
		});

		/**
		*竖向分割时每个切片的高度，与 <code>clipY</code> 同时设置时优先级高于 <code>clipY</code> 。
		*/
		__getset(0,__proto,'clipHeight',function(){
			return this._clipHeight;
			},function(value){
			this._clipHeight=value;
			this._setClipChanged()
		});

		/**@inheritDoc */
		__getset(0,__proto,'width',_super.prototype._$get_width,function(value){
			_super.prototype._$set_width.call(this,value);
			this._bitmap.width=value;
		});

		/**@inheritDoc */
		__getset(0,__proto,'height',_super.prototype._$get_height,function(value){
			_super.prototype._$set_height.call(this,value);
			this._bitmap.height=value;
		});

		/**@inheritDoc */
		__getset(0,__proto,'measureWidth',function(){
			this.runCallLater(this.changeClip);
			return this._bitmap.width;
		});

		/**@inheritDoc */
		__getset(0,__proto,'measureHeight',function(){
			this.runCallLater(this.changeClip);
			return this._bitmap.height;
		});

		/**
		*当前帧索引。
		*/
		__getset(0,__proto,'index',function(){
			return this._index;
			},function(value){
			this._index=value;
			this._bitmap && this._sources && (this._bitmap.source=this._sources[value]);
			this.event("change");
		});

		/**
		*表示是否自动播放动画，若自动播放值为true,否则值为false;
		*<p>可控制切片动画的播放、停止。</p>
		*/
		__getset(0,__proto,'autoPlay',function(){
			return this._autoPlay;
			},function(value){
			if (this._autoPlay !=value){
				this._autoPlay=value;
				value ? this.play():this.stop();
			}
		});

		/**
		*表示动画的当前播放状态。
		*如果动画正在播放中，则为true，否则为flash。
		*/
		__getset(0,__proto,'isPlaying',function(){
			return this._isPlaying;
			},function(value){
			this._isPlaying=value;
		});

		/**@inheritDoc */
		__getset(0,__proto,'dataSource',_super.prototype._$get_dataSource,function(value){
			this._dataSource=value;
			if (((typeof value=='number')&& Math.floor(value)==value)|| (typeof value=='string'))this.index=parseInt(value);
			else _super.prototype._$set_dataSource.call(this,value);
		});

		/**
		*<code>AutoBitmap</code> 位图实例。
		*/
		__getset(0,__proto,'bitmap',function(){
			return this._bitmap;
		});

		return Clip;
	})(Component)


	/**
	*<code>ColorPicker</code> 组件将显示包含多个颜色样本的列表，用户可以从中选择颜色。
	*
	*@example <caption>以下示例代码，创建了一个 <code>ColorPicker</code> 实例。</caption>
	*package
	*{
		*import laya.ui.ColorPicker;
		*import laya.utils.Handler;
		*public class ColorPicker_Example
		*{
			*public function ColorPicker_Example()
			*{
				*Laya.init(640,800);//设置游戏画布宽高。
				*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
				*Laya.loader.load("resource/ui/color.png",Handler.create(this,onLoadComplete));//加载资源。
				*}
			*private function onLoadComplete():void
			*{
				*trace("资源加载完成！");
				*var colorPicket:ColorPicker=new ColorPicker();//创建一个 ColorPicker 类的实例对象 colorPicket 。
				*colorPicket.skin="resource/ui/color.png";//设置 colorPicket 的皮肤。
				*colorPicket.x=100;//设置 colorPicket 对象的属性 x 的值，用于控制 colorPicket 对象的显示位置。
				*colorPicket.y=100;//设置 colorPicket 对象的属性 y 的值，用于控制 colorPicket 对象的显示位置。
				*colorPicket.changeHandler=new Handler(this,onChangeColor,[colorPicket]);//设置 colorPicket 的颜色改变回调函数。
				*Laya.stage.addChild(colorPicket);//将此 colorPicket 对象添加到显示列表。
				*}
			*private function onChangeColor(colorPicket:ColorPicker):void
			*{
				*trace("当前选择的颜色： "+colorPicket.selectedColor);
				*}
			*}
		*}
	*@example
	*Laya.init(640,800);//设置游戏画布宽高
	*Laya.stage.bgColor="#efefef";//设置画布的背景颜色
	*Laya.loader.load("resource/ui/color.png",laya.utils.Handler.create(this,loadComplete));//加载资源
	*function loadComplete()
	*{
		*console.log("资源加载完成！");
		*var colorPicket=new laya.ui.ColorPicker();//创建一个 ColorPicker 类的实例对象 colorPicket 。
		*colorPicket.skin="resource/ui/color.png";//设置 colorPicket 的皮肤。
		*colorPicket.x=100;//设置 colorPicket 对象的属性 x 的值，用于控制 colorPicket 对象的显示位置。
		*colorPicket.y=100;//设置 colorPicket 对象的属性 y 的值，用于控制 colorPicket 对象的显示位置。
		*colorPicket.changeHandler=laya.utils.Handler.create(this,onChangeColor,[colorPicket],false);//设置 colorPicket 的颜色改变回调函数。
		*Laya.stage.addChild(colorPicket);//将此 colorPicket 对象添加到显示列表。
		*}
	*function onChangeColor(colorPicket)
	*{
		*console.log("当前选择的颜色： "+colorPicket.selectedColor);
		*}
	*@example
	*import ColorPicker=laya.ui.ColorPicker;
	*import Handler=laya.utils.Handler;
	*class ColorPicker_Example {
		*constructor(){
			*Laya.init(640,800);//设置游戏画布宽高。
			*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
			*Laya.loader.load("resource/ui/color.png",Handler.create(this,this.onLoadComplete));//加载资源。
			*}
		*private onLoadComplete():void {
			*console.log("资源加载完成！");
			*var colorPicket:ColorPicker=new ColorPicker();//创建一个 ColorPicker 类的实例对象 colorPicket 。
			*colorPicket.skin="resource/ui/color.png";//设置 colorPicket 的皮肤。
			*colorPicket.x=100;//设置 colorPicket 对象的属性 x 的值，用于控制 colorPicket 对象的显示位置。
			*colorPicket.y=100;//设置 colorPicket 对象的属性 y 的值，用于控制 colorPicket 对象的显示位置。
			*colorPicket.changeHandler=new Handler(this,this.onChangeColor,[colorPicket]);//设置 colorPicket 的颜色改变回调函数。
			*Laya.stage.addChild(colorPicket);//将此 colorPicket 对象添加到显示列表。
			*}
		*private onChangeColor(colorPicket:ColorPicker):void {
			*console.log("当前选择的颜色： "+colorPicket.selectedColor);
			*}
		*}
	*/
	//class laya.ui.ColorPicker extends laya.ui.Component
	var ColorPicker=(function(_super){
		function ColorPicker(){
			this.changeHandler=null;
			this._gridSize=11;
			this._bgColor="#ffffff";
			this._borderColor="#000000";
			this._inputColor="#000000";
			this._inputBgColor="#efefef";
			this._colorPanel=null;
			this._colorTiles=null;
			this._colorBlock=null;
			this._colorInput=null;
			this._colorButton=null;
			this._colors=[];
			this._selectedColor="#000000";
			this._panelChanged=false;
			ColorPicker.__super.call(this);
		}

		__class(ColorPicker,'laya.ui.ColorPicker',_super);
		var __proto=ColorPicker.prototype;
		/**@inheritDoc */
		__proto.destroy=function(destroyChild){
			(destroyChild===void 0)&& (destroyChild=true);
			_super.prototype.destroy.call(this,destroyChild);
			this._colorPanel && this._colorPanel.destroy(destroyChild);
			this._colorButton && this._colorButton.destroy(destroyChild);
			this._colorPanel=null;
			this._colorTiles=null;
			this._colorBlock=null;
			this._colorInput=null;
			this._colorButton=null;
			this._colors=null;
			this.changeHandler=null;
		}

		/**@inheritDoc */
		__proto.createChildren=function(){
			this.addChild(this._colorButton=new Button());
			this._colorPanel=new Box();
			this._colorPanel.size(230,166);
			this._colorPanel.addChild(this._colorTiles=new Sprite());
			this._colorPanel.addChild(this._colorBlock=new Sprite());
			this._colorPanel.addChild(this._colorInput=new Input());
		}

		/**@inheritDoc */
		__proto.initialize=function(){
			this._colorButton.on("click",this,this.onColorButtonClick);
			this._colorBlock.pos(5,5);
			this._colorInput.pos(60,5);
			this._colorInput.size(60,20);
			this._colorInput.on("change",this,this.onColorInputChange);
			this._colorInput.on("keydown",this,this.onColorFieldKeyDown);
			this._colorTiles.pos(5,30);
			this._colorTiles.on("mousemove",this,this.onColorTilesMouseMove);
			this._colorTiles.on("click",this,this.onColorTilesClick);
			this._colorTiles.size(20 *this._gridSize,12 *this._gridSize);
			this._colorPanel.on("mousedown",this,this.onPanelMouseDown);
			this.bgColor=this._bgColor;
		}

		__proto.onPanelMouseDown=function(e){
			e.stopPropagation();
		}

		/**
		*改变颜色样本列表面板。
		*/
		__proto.changePanel=function(){
			this._panelChanged=false;
			var g=this._colorPanel.graphics;
			g.clear();
			g.drawRect(0,0,230,166,this._bgColor,this._borderColor);
			this.drawBlock(this._selectedColor);
			this._colorInput.borderColor=this._borderColor;
			this._colorInput.bgColor=this._inputBgColor;
			this._colorInput.color=this._inputColor;
			g=this._colorTiles.graphics;
			g.clear();
			var mainColors=[0x000000,0x333333,0x666666,0x999999,0xCCCCCC,0xFFFFFF,0xFF0000,0x00FF00,0x0000FF,0xFFFF00,0x00FFFF,0xFF00FF];
			for (var i=0;i < 12;i++){
				for (var j=0;j < 20;j++){
					var color=0;
					if (j===0)color=mainColors[i];
					else if (j===1)color=0x000000;
					else color=(((i *3+j / 6)% 3 << 0)+((i / 6)<< 0)*3)*0x33 << 16 | j % 6 *0x33 << 8 | (i << 0)% 6 *0x33;
					var strColor=UIUtils.toColor(color);
					this._colors.push(strColor);
					var x=j *this._gridSize;
					var y=i *this._gridSize;
					g.drawRect(x,y,this._gridSize,this._gridSize,strColor,"#000000");
				}
			}
		}

		/**
		*颜色样本列表面板的显示按钮的 <code>Event.MOUSE_DOWN</code> 事件侦听处理函数。
		*/
		__proto.onColorButtonClick=function(e){
			if (this._colorPanel.parent)this.close();
			else this.open();
		}

		/**
		*打开颜色样本列表面板。
		*/
		__proto.open=function(){
			var p=this.localToGlobal(new Point());
			var px=p.x+this._colorPanel.width <=Laya.stage.width ? p.x :Laya.stage.width-this._colorPanel.width;
			var py=p.y+this._colorButton.height;
			py=py+this._colorPanel.height <=Laya.stage.height ? py :p.y-this._colorPanel.height;
			this._colorPanel.pos(px,py);
			this._colorPanel.zOrder=1001;
			Laya._currentStage.addChild(this._colorPanel);
			Laya.stage.on("mousedown",this,this.removeColorBox);
		}

		/**
		*关闭颜色样本列表面板。
		*/
		__proto.close=function(){
			Laya.stage.off("mousedown",this,this.removeColorBox);
			this._colorPanel.removeSelf();
		}

		/**
		*舞台的 <code>Event.MOUSE_DOWN</code> 事件侦听处理函数。
		*/
		__proto.removeColorBox=function(e){
			this.close();
		}

		/**
		*小格子色块的 <code>Event.KEY_DOWN</code> 事件侦听处理函数。
		*/
		__proto.onColorFieldKeyDown=function(e){
			if (e.keyCode==13){
				if (this._colorInput.text)this.selectedColor=this._colorInput.text;
				else this.selectedColor=null;
				this.close();
				e.stopPropagation();
			}
		}

		/**
		*颜色值输入框 <code>Event.CHANGE</code> 事件侦听处理函数。
		*/
		__proto.onColorInputChange=function(e){
			if (this._colorInput.text)this.drawBlock(this._colorInput.text);
			else this.drawBlock("#FFFFFF");
		}

		/**
		*小格子色块的 <code>Event.CLICK</code> 事件侦听处理函数。
		*/
		__proto.onColorTilesClick=function(e){
			this.selectedColor=this.getColorByMouse();
			this.close();
		}

		/**
		*@private
		*小格子色块的 <code>Event.MOUSE_MOVE</code> 事件侦听处理函数。
		*/
		__proto.onColorTilesMouseMove=function(e){
			this._colorInput.focus=false;
			var color=this.getColorByMouse();
			this._colorInput.text=color;
			this.drawBlock(color);
		}

		/**
		*通过鼠标位置取对应的颜色块的颜色值。
		*/
		__proto.getColorByMouse=function(){
			var point=this._colorTiles.getMousePoint();
			var x=Math.floor(point.x / this._gridSize);
			var y=Math.floor(point.y / this._gridSize);
			return this._colors[y *20+x];
		}

		/**
		*绘制颜色块。
		*@param color 需要绘制的颜色块的颜色值。
		*/
		__proto.drawBlock=function(color){
			var g=this._colorBlock.graphics;
			g.clear();
			var showColor=color ? color :"#ffffff";
			g.drawRect(0,0,50,20,showColor,this._borderColor);
			color || g.drawLine(0,0,50,20,"#ff0000");
		}

		/**
		*改变颜色。
		*/
		__proto.changeColor=function(){
			var g=this.graphics;
			g.clear();
			var showColor=this._selectedColor || "#000000";
			g.drawRect(0,0,this._colorButton.width,this._colorButton.height,showColor);
		}

		/**@private */
		__proto._setPanelChanged=function(){
			if (!this._panelChanged){
				this._panelChanged=true;
				this.callLater(this.changePanel);
			}
		}

		/**
		*表示颜色输入框的背景颜色值。
		*/
		__getset(0,__proto,'inputBgColor',function(){
			return this._inputBgColor;
			},function(value){
			this._inputBgColor=value;
			this._setPanelChanged();
		});

		/**
		*表示选择的颜色值。
		*/
		__getset(0,__proto,'selectedColor',function(){
			return this._selectedColor;
			},function(value){
			if (this._selectedColor !=value){
				this._selectedColor=this._colorInput.text=value;
				this.drawBlock(value);
				this.changeColor();
				this.changeHandler && this.changeHandler.runWith(this._selectedColor);
				this.event("change",Event.EMPTY.setTo("change",this,this));
			}
		});

		/**
		*@copy laya.ui.Button#skin
		*/
		__getset(0,__proto,'skin',function(){
			return this._colorButton.skin;
			},function(value){
			this._colorButton.skin=value;
			this.changeColor();
		});

		/**
		*表示颜色样本列表面板的背景颜色值。
		*/
		__getset(0,__proto,'bgColor',function(){
			return this._bgColor;
			},function(value){
			this._bgColor=value;
			this._setPanelChanged();
		});

		/**
		*表示颜色样本列表面板的边框颜色值。
		*/
		__getset(0,__proto,'borderColor',function(){
			return this._borderColor;
			},function(value){
			this._borderColor=value;
			this._setPanelChanged();
		});

		/**
		*表示颜色样本列表面板选择或输入的颜色值。
		*/
		__getset(0,__proto,'inputColor',function(){
			return this._inputColor;
			},function(value){
			this._inputColor=value;
			this._setPanelChanged();
		});

		return ColorPicker;
	})(Component)


	/**
	*<code>ComboBox</code> 组件包含一个下拉列表，用户可以从该列表中选择单个值。
	*
	*@example <caption>以下示例代码，创建了一个 <code>ComboBox</code> 实例。</caption>
	*package
	*{
		*import laya.ui.ComboBox;
		*import laya.utils.Handler;
		*public class ComboBox_Example
		*{
			*public function ComboBox_Example()
			*{
				*Laya.init(640,800);//设置游戏画布宽高。
				*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
				*Laya.loader.load("resource/ui/button.png",Handler.create(this,onLoadComplete));//加载资源。
				*}
			*private function onLoadComplete():void
			*{
				*trace("资源加载完成！");
				*var comboBox:ComboBox=new ComboBox("resource/ui/button.png","item0,item1,item2,item3,item4,item5");//创建一个 ComboBox 类的实例对象 comboBox ,传入它的皮肤和标签集。
				*comboBox.x=100;//设置 comboBox 对象的属性 x 的值，用于控制 comboBox 对象的显示位置。
				*comboBox.y=100;//设置 comboBox 对象的属性 x 的值，用于控制 comboBox 对象的显示位置。
				*comboBox.selectHandler=new Handler(this,onSelect);//设置 comboBox 选择项改变时执行的处理器。
				*Laya.stage.addChild(comboBox);//将此 comboBox 对象添加到显示列表。
				*}
			*private function onSelect(index:int):void
			*{
				*trace("当前选中的项对象索引： ",index);
				*}
			*}
		*}
	*@example
	*Laya.init(640,800);//设置游戏画布宽高。
	*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
	*Laya.loader.load("resource/ui/button.png",laya.utils.Handler.create(this,loadComplete));//加载资源
	*function loadComplete(){
		*console.log("资源加载完成！");
		*var comboBox=new laya.ui.ComboBox("resource/ui/button.png","item0,item1,item2,item3,item4,item5");//创建一个 ComboBox 类的实例对象 comboBox ,传入它的皮肤和标签集。
		*comboBox.x=100;//设置 comboBox 对象的属性 x 的值，用于控制 comboBox 对象的显示位置。
		*comboBox.y=100;//设置 comboBox 对象的属性 x 的值，用于控制 comboBox 对象的显示位置。
		*comboBox.selectHandler=new laya.utils.Handler(this,onSelect);//设置 comboBox 选择项改变时执行的处理器。
		*Laya.stage.addChild(comboBox);//将此 comboBox 对象添加到显示列表。
		*}
	*function onSelect(index)
	*{
		*console.log("当前选中的项对象索引： ",index);
		*}
	*@example
	*import ComboBox=laya.ui.ComboBox;
	*import Handler=laya.utils.Handler;
	*class ComboBox_Example {
		*constructor(){
			*Laya.init(640,800);//设置游戏画布宽高。
			*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
			*Laya.loader.load("resource/ui/button.png",Handler.create(this,this.onLoadComplete));//加载资源。
			*}
		*private onLoadComplete():void {
			*console.log("资源加载完成！");
			*var comboBox:ComboBox=new ComboBox("resource/ui/button.png","item0,item1,item2,item3,item4,item5");//创建一个 ComboBox 类的实例对象 comboBox ,传入它的皮肤和标签集。
			*comboBox.x=100;//设置 comboBox 对象的属性 x 的值，用于控制 comboBox 对象的显示位置。
			*comboBox.y=100;//设置 comboBox 对象的属性 x 的值，用于控制 comboBox 对象的显示位置。
			*comboBox.selectHandler=new Handler(this,this.onSelect);//设置 comboBox 选择项改变时执行的处理器。
			*Laya.stage.addChild(comboBox);//将此 comboBox 对象添加到显示列表。
			*}
		*private onSelect(index:number):void {
			*console.log("当前选中的项对象索引： ",index);
			*}
		*}
	*
	*/
	//class laya.ui.ComboBox extends laya.ui.Component
	var ComboBox=(function(_super){
		function ComboBox(skin,labels){
			this._visibleNum=6;
			this._button=null;
			this._list=null;
			this._isOpen=false;
			this._itemSize=12;
			this._labels=[];
			this._selectedIndex=-1;
			this._selectHandler=null;
			this._itemHeight=NaN;
			this._listHeight=NaN;
			this._listChanged=false;
			this._itemChanged=false;
			this._scrollBarSkin=null;
			this._isCustomList=false;
			this.itemRender=null;
			ComboBox.__super.call(this);
			this._itemColors=Styles.comboBoxItemColors;
			this.skin=skin;
			this.labels=labels;
		}

		__class(ComboBox,'laya.ui.ComboBox',_super);
		var __proto=ComboBox.prototype;
		/**@inheritDoc */
		__proto.destroy=function(destroyChild){
			(destroyChild===void 0)&& (destroyChild=true);
			_super.prototype.destroy.call(this,destroyChild);
			this._button && this._button.destroy(destroyChild);
			this._list && this._list.destroy(destroyChild);
			this._button=null;
			this._list=null;
			this._itemColors=null;
			this._labels=null;
			this._selectHandler=null;
		}

		/**@inheritDoc */
		__proto.createChildren=function(){
			this.addChild(this._button=new Button());
			this._button.text.align="left";
			this._button.labelPadding="0,0,0,5";
			this._button.on("mousedown",this,this.onButtonMouseDown);
		}

		__proto._createList=function(){
			this._list=new List();
			if (this._scrollBarSkin)this._list.vScrollBarSkin=this._scrollBarSkin;
			this._setListEvent(this._list);
		}

		__proto._setListEvent=function(list){
			this._list.selectEnable=true;
			this._list.on("mousedown",this,this.onListDown);
			this._list.mouseHandler=Handler.create(this,this.onlistItemMouse,null,false);
			if (this._list.scrollBar)this._list.scrollBar.on("mousedown",this,this.onScrollBarDown);
		}

		/**
		*@private
		*/
		__proto.onListDown=function(e){
			e.stopPropagation();
		}

		__proto.onScrollBarDown=function(e){
			e.stopPropagation();
		}

		__proto.onButtonMouseDown=function(e){
			this.callLater(this.switchTo,[!this._isOpen]);
		}

		/**
		*@private
		*/
		__proto.changeList=function(){
			this._listChanged=false;
			var labelWidth=this.width-2;
			var labelColor=this._itemColors[2];
			this._itemHeight=this._itemSize+6;
			this._list.itemRender=this.itemRender || {type:"Box",child:[{type:"Label",props:{name:"label",x:1,padding:"3,3,3,3",width:labelWidth,height:this._itemHeight,fontSize:this._itemSize,color:labelColor}}]};
			this._list.repeatY=this._visibleNum;
			this._list.refresh();
		}

		/**
		*@private
		*下拉列表的鼠标事件响应函数。
		*/
		__proto.onlistItemMouse=function(e,index){
			var type=e.type;
			if (type==="mouseover" || type==="mouseout"){
				if (this._isCustomList)return;
				var box=this._list.getCell(index);
				if (!box)return;
				var label=box.getChildByName("label");
				if (label){
					if (type==="mouseover"){
						label.bgColor=this._itemColors[0];
						label.color=this._itemColors[1];
						}else {
						label.bgColor=null;
						label.color=this._itemColors[2];
					}
				}
				}else if (type==="click"){
				this.selectedIndex=index;
				this.isOpen=false;
			}
		}

		/**
		*@private
		*/
		__proto.switchTo=function(value){
			this.isOpen=value;
		}

		/**
		*更改下拉列表的打开状态。
		*/
		__proto.changeOpen=function(){
			this.isOpen=!this._isOpen;
		}

		/**
		*更改下拉列表。
		*/
		__proto.changeItem=function(){
			this._itemChanged=false;
			this._listHeight=this._labels.length > 0 ? Math.min(this._visibleNum,this._labels.length)*this._itemHeight :this._itemHeight;
			if (!this._isCustomList){
				var g=this._list.graphics;
				g.clear();
				g.drawRect(0,0,this.width-1,this._listHeight,this._itemColors[4],this._itemColors[3]);
			};
			var a=this._list.array || [];
			a.length=0;
			for (var i=0,n=this._labels.length;i < n;i++){
				a.push({label:this._labels[i]});
			}
			this._list.height=this._listHeight;
			this._list.array=a;
		}

		__proto.changeSelected=function(){
			this._button.label=this.selectedLabel;
		}

		/**
		*关闭下拉列表。
		*/
		__proto.removeList=function(e){
			this.isOpen=false;
		}

		/**
		*表示选择的下拉列表项的索引。
		*/
		__getset(0,__proto,'selectedIndex',function(){
			return this._selectedIndex;
			},function(value){
			if (this._selectedIndex !=value){
				this._selectedIndex=value;
				if (this._labels.length > 0)this.changeSelected();
				else this.callLater(this.changeSelected);
				this.event("change",[Event.EMPTY.setTo("change",this,this)]);
				this._selectHandler && this._selectHandler.runWith(this._selectedIndex);
			}
		});

		/**@inheritDoc */
		__getset(0,__proto,'measureHeight',function(){
			return this._button.height;
		});

		/**
		*@copy laya.ui.Button#skin
		*/
		__getset(0,__proto,'skin',function(){
			return this._button.skin;
			},function(value){
			if (this._button.skin !=value){
				this._button.skin=value;
				this._listChanged=true;
			}
		});

		/**@inheritDoc */
		__getset(0,__proto,'measureWidth',function(){
			return this._button.width;
		});

		/**@inheritDoc */
		__getset(0,__proto,'width',_super.prototype._$get_width,function(value){
			_super.prototype._$set_width.call(this,value);
			this._button.width=this._width;
			this._itemChanged=true;
			this._listChanged=true;
		});

		/**
		*表示选择的下拉列表项的的标签。
		*/
		__getset(0,__proto,'selectedLabel',function(){
			return this._selectedIndex >-1 && this._selectedIndex < this._labels.length ? this._labels[this._selectedIndex] :null;
			},function(value){
			this.selectedIndex=this._labels.indexOf(value);
		});

		/**
		*标签集合字符串。
		*/
		__getset(0,__proto,'labels',function(){
			return this._labels.join(",");
			},function(value){
			if (this._labels.length > 0)this.selectedIndex=-1;
			if (value)this._labels=value.split(",");
			else this._labels.length=0;
			this._itemChanged=true;
		});

		/**@inheritDoc */
		__getset(0,__proto,'height',_super.prototype._$get_height,function(value){
			_super.prototype._$set_height.call(this,value);
			this._button.height=this._height;
		});

		/**
		*改变下拉列表的选择项时执行的处理器(默认返回参数index:int)。
		*/
		__getset(0,__proto,'selectHandler',function(){
			return this._selectHandler;
			},function(value){
			this._selectHandler=value;
		});

		/**
		*获取或设置没有滚动条的下拉列表中可显示的最大行数。
		*/
		__getset(0,__proto,'visibleNum',function(){
			return this._visibleNum;
			},function(value){
			this._visibleNum=value;
			this._listChanged=true;
		});

		/**
		*表示按钮文本标签是否为粗体字。
		*@see laya.display.Text#bold
		*/
		__getset(0,__proto,'labelBold',function(){
			return this._button.text.bold;
			},function(value){
			this._button.text.bold=value
		});

		/**
		*下拉列表项颜色。
		*<p><b>格式：</b>"悬停或被选中时背景颜色,悬停或被选中时标签颜色,标签颜色,边框颜色,背景颜色"</p>
		*/
		__getset(0,__proto,'itemColors',function(){
			return String(this._itemColors)
			},function(value){
			this._itemColors=UIUtils.fillArray(this._itemColors,value,String);
			this._listChanged=true;
		});

		/**
		*下拉列表项标签的字体大小。
		*/
		__getset(0,__proto,'itemSize',function(){
			return this._itemSize;
			},function(value){
			this._itemSize=value;
			this._listChanged=true;
		});

		/**
		*获取对 <code>ComboBox</code> 组件所包含的 <code>VScrollBar</code> 滚动条组件的引用。
		*/
		__getset(0,__proto,'scrollBar',function(){
			return this.list.scrollBar;
		});

		/**
		*表示下拉列表的打开状态。
		*/
		__getset(0,__proto,'isOpen',function(){
			return this._isOpen;
			},function(value){
			if (this._isOpen !=value){
				this._isOpen=value;
				this._button.selected=this._isOpen;
				if (this._isOpen){
					this._list || this._createList();
					this._listChanged && !this._isCustomList && this.changeList();
					this._itemChanged && this.changeItem();
					var p=this.localToGlobal(Point.TEMP.setTo(0,0));
					var py=p.y+this._button.height;
					py=py+this._listHeight <=Laya.stage.height ? py :p.y-this._listHeight;
					this._list.pos(p.x,py);
					this._list.zOrder=1001;
					Laya._currentStage.addChild(this._list);
					Laya.stage.once("mousedown",this,this.removeList);
					this._list.selectedIndex=this._selectedIndex;
					}else {
					this._list && this._list.removeSelf();
				}
			}
		});

		/**
		*滚动条皮肤。
		*/
		__getset(0,__proto,'scrollBarSkin',function(){
			return this._scrollBarSkin;
			},function(value){
			this._scrollBarSkin=value;
		});

		/**
		*<p>当前实例的位图 <code>AutoImage</code> 实例的有效缩放网格数据。</p>
		*<p>数据格式："上边距,右边距,下边距,左边距,是否重复填充(值为0：不重复填充，1：重复填充)"，以逗号分隔。
		*<ul><li>例如："4,4,4,4,1"</li></ul></p>
		*@see laya.ui.AutoBitmap.sizeGrid
		*/
		__getset(0,__proto,'sizeGrid',function(){
			return this._button.sizeGrid;
			},function(value){
			this._button.sizeGrid=value;
		});

		/**
		*获取对 <code>ComboBox</code> 组件所包含的 <code>Button</code> 组件的引用。
		*/
		__getset(0,__proto,'button',function(){
			return this._button;
		});

		/**
		*获取对 <code>ComboBox</code> 组件所包含的 <code>List</code> 列表组件的引用。
		*/
		__getset(0,__proto,'list',function(){
			this._list || this._createList();
			return this._list;
			},function(value){
			if (value){
				value.removeSelf();
				this._isCustomList=true;
				this._list=value;
				this._setListEvent(value);
				this._itemHeight=value.getCell(0).height+value.spaceY;
			}
		});

		/**@inheritDoc */
		__getset(0,__proto,'dataSource',_super.prototype._$get_dataSource,function(value){
			this._dataSource=value;
			if (((typeof value=='number')&& Math.floor(value)==value)|| (typeof value=='string'))this.selectedIndex=parseInt(value);
			else if ((value instanceof Array))this.labels=(value).join(",");
			else _super.prototype._$set_dataSource.call(this,value);
		});

		/**
		*获取或设置对 <code>ComboBox</code> 组件所包含的 <code>Button</code> 组件的文本标签颜色。
		*<p><b>格式：</b>upColor,overColor,downColor,disableColor</p>
		*/
		__getset(0,__proto,'labelColors',function(){
			return this._button.labelColors;
			},function(value){
			if (this._button.labelColors !=value){
				this._button.labelColors=value;
			}
		});

		/**
		*获取或设置对 <code>ComboBox</code> 组件所包含的 <code>Button</code> 组件的文本边距。
		*<p><b>格式：</b>上边距,右边距,下边距,左边距</p>
		*/
		__getset(0,__proto,'labelPadding',function(){
			return this._button.text.padding.join(",");
			},function(value){
			this._button.text.padding=UIUtils.fillArray(Styles.labelPadding,value,Number);
		});

		/**
		*获取或设置对 <code>ComboBox</code> 组件所包含的 <code>Button</code> 组件的标签字体大小。
		*/
		__getset(0,__proto,'labelSize',function(){
			return this._button.text.fontSize;
			},function(value){
			this._button.text.fontSize=value
		});

		/**
		*表示按钮文本标签的字体名称，以字符串形式表示。
		*@see laya.display.Text#font
		*/
		__getset(0,__proto,'labelFont',function(){
			return this._button.text.font;
			},function(value){
			this._button.text.font=value
		});

		/**
		*表示按钮的状态值。
		*@see laya.ui.Button#stateNum
		*/
		__getset(0,__proto,'stateNum',function(){
			return this._button.stateNum;
			},function(value){
			this._button.stateNum=value
		});

		return ComboBox;
	})(Component)


	/**
	*<code>ScrollBar</code> 组件是一个滚动条组件。
	*<p>当数据太多以至于显示区域无法容纳时，最终用户可以使用 <code>ScrollBar</code> 组件控制所显示的数据部分。</p>
	*<p> 滚动条由四部分组成：两个箭头按钮、一个轨道和一个滑块。 </p> *
	*
	*@see laya.ui.VScrollBar
	*@see laya.ui.HScrollBar
	*/
	//class laya.ui.ScrollBar extends laya.ui.Component
	var ScrollBar=(function(_super){
		function ScrollBar(skin){
			this.rollRatio=0.95;
			this.changeHandler=null;
			this.scaleBar=true;
			this.autoHide=false;
			this.elasticDistance=0;
			this.elasticBackTime=500;
			this.upButton=null;
			this.downButton=null;
			this.slider=null;
			this._scrollSize=1;
			this._skin=null;
			this._thumbPercent=1;
			this._target=null;
			this._lastPoint=null;
			this._lastOffset=0;
			this._checkElastic=false;
			this._isElastic=false;
			this._value=NaN;
			this._hide=false;
			this._clickOnly=true;
			this._offsets=null;
			ScrollBar.__super.call(this);
			this._showButtons=UIConfig.showButtons;
			this._touchScrollEnable=UIConfig.touchScrollEnable;
			this._mouseWheelEnable=UIConfig.mouseWheelEnable;
			this.skin=skin;
			this.max=1;
		}

		__class(ScrollBar,'laya.ui.ScrollBar',_super);
		var __proto=ScrollBar.prototype;
		/**@inheritDoc */
		__proto.destroy=function(destroyChild){
			(destroyChild===void 0)&& (destroyChild=true);
			this.stopScroll();
			this.target=null;
			_super.prototype.destroy.call(this,destroyChild);
			this.upButton && this.upButton.destroy(destroyChild);
			this.downButton && this.downButton.destroy(destroyChild);
			this.slider && this.slider.destroy(destroyChild);
			this.upButton=this.downButton=null;
			this.slider=null;
			this.changeHandler=null;
			this._offsets=null;
		}

		/**@inheritDoc */
		__proto.createChildren=function(){
			this.addChild(this.slider=new Slider());
			this.addChild(this.upButton=new Button());
			this.addChild(this.downButton=new Button());
		}

		/**@inheritDoc */
		__proto.initialize=function(){
			this.slider.showLabel=false;
			this.slider.on("change",this,this.onSliderChange);
			this.slider.setSlider(0,0,0);
			this.upButton.on("mousedown",this,this.onButtonMouseDown);
			this.downButton.on("mousedown",this,this.onButtonMouseDown);
		}

		/**
		*@private
		*滑块位置发生改变的处理函数。
		*/
		__proto.onSliderChange=function(){
			this.value=this.slider.value;
		}

		/**
		*@private
		*向上和向下按钮的 <code>Event.MOUSE_DOWN</code> 事件侦听处理函数。
		*/
		__proto.onButtonMouseDown=function(e){
			var isUp=e.currentTarget===this.upButton;
			this.slide(isUp);
			Laya.timer.once(Styles.scrollBarDelayTime,this,this.startLoop,[isUp]);
			Laya.stage.once("mouseup",this,this.onStageMouseUp);
		}

		/**@private */
		__proto.startLoop=function(isUp){
			Laya.timer.frameLoop(1,this,this.slide,[isUp]);
		}

		/**@private */
		__proto.slide=function(isUp){
			if (isUp)this.value-=this._scrollSize;
			else this.value+=this._scrollSize;
		}

		/**
		*@private
		*舞台的 <code>Event.MOUSE_DOWN</code> 事件侦听处理函数。
		*/
		__proto.onStageMouseUp=function(e){
			Laya.timer.clear(this,this.startLoop);
			Laya.timer.clear(this,this.slide);
		}

		/**
		*@private
		*更改对象的皮肤及位置。
		*/
		__proto.changeScrollBar=function(){
			this.upButton.visible=this._showButtons;
			this.downButton.visible=this._showButtons;
			if (this._showButtons){
				this.upButton.skin=this._skin.replace(".png","$up.png");
				this.downButton.skin=this._skin.replace(".png","$down.png");
			}
			if (this.slider.isVertical)this.slider.y=this._showButtons ? this.upButton.height :0;
			else this.slider.x=this._showButtons ? this.upButton.width :0;
			this.resetPositions();
		}

		/**@inheritDoc */
		__proto.changeSize=function(){
			_super.prototype.changeSize.call(this);
			this.resetPositions();
			this.event("change");
			this.changeHandler && this.changeHandler.runWith(this.value);
		}

		/**@private */
		__proto.resetPositions=function(){
			if (this.slider.isVertical)this.slider.height=this.height-(this._showButtons ? (this.upButton.height+this.downButton.height):0);
			else this.slider.width=this.width-(this._showButtons ? (this.upButton.width+this.downButton.width):0);
			this.resetButtonPosition();
		}

		/**@private */
		__proto.resetButtonPosition=function(){
			if (this.slider.isVertical)this.downButton.y=this.slider.y+this.slider.height;
			else this.downButton.x=this.slider.x+this.slider.width;
		}

		/**
		*设置滚动条信息。
		*@param min 滚动条最小位置值。
		*@param max 滚动条最大位置值。
		*@param value 滚动条当前位置值。
		*/
		__proto.setScroll=function(min,max,value){
			this.runCallLater(this.changeSize);
			this.slider.setSlider(min,max,value);
			this.slider.bar.visible=max > 0;
			if (!this._hide && this.autoHide)this.visible=false;
		}

		/**@private */
		__proto.onTargetMouseWheel=function(e){
			this.value-=e.delta *this._scrollSize;
			this.target=this._target;
		}

		/**@private */
		__proto.onTargetMouseDown=function(e){
			this._clickOnly=true;
			this._lastOffset=0;
			this._checkElastic=false;
			this._lastPoint || (this._lastPoint=new Point());
			this._lastPoint.setTo(Laya.stage.mouseX,Laya.stage.mouseY);
			Laya.timer.clear(this,this.tweenMove);
			Tween.clearTween(this);
			Laya.stage.once("mouseup",this,this.onStageMouseUp2);
			Laya.stage.once("mouseout",this,this.onStageMouseUp2);
			Laya.timer.frameLoop(1,this,this.loop);
		}

		/**@private */
		__proto.loop=function(){
			var mouseY=Laya.stage.mouseY;
			var mouseX=Laya.stage.mouseX;
			this._lastOffset=this.isVertical ? (mouseY-this._lastPoint.y):(mouseX-this._lastPoint.x);
			if (this._clickOnly){
				if (Math.abs(this._lastOffset *(this.isVertical ? Laya.stage._canvasTransform.getScaleY():Laya.stage._canvasTransform.getScaleX()))> 1){
					this._clickOnly=false;
					this._offsets || (this._offsets=[]);
					this._offsets.length=0;
					this._target.mouseEnabled=false;
					if (!this.hide && this.autoHide){
						this.alpha=1;
						this.visible=true;
					}
					this.event("start");
				}else return;
			}
			this._offsets.push(this._lastOffset);
			this._lastPoint.x=mouseX;
			this._lastPoint.y=mouseY;
			if (this._lastOffset===0)return;
			if (!this._checkElastic){
				if (this.elasticDistance > 0){
					if (!this._checkElastic && this._lastOffset !=0){
						if ((this._lastOffset > 0 && this._value <=this.min)|| (this._lastOffset < 0 && this._value >=this.max)){
							this._isElastic=true;
							this._checkElastic=true;
							}else {
							this._isElastic=false;
						}
					}
					}else {
					this._checkElastic=true;
				}
			}
			if (this._isElastic){
				if (this._value <=this.min){
					this.value-=this._lastOffset *Math.max(0,(1-((this.min-this._value)/ this.elasticDistance)));
					}else if (this._value >=this.max){
					this.value-=this._lastOffset *Math.max(0,(1-((this._value-this.max)/ this.elasticDistance)));
				}
				}else {
				this.value-=this._lastOffset;
			}
		}

		/**@private */
		__proto.onStageMouseUp2=function(e){
			Laya.stage.off("mouseup",this,this.onStageMouseUp2);
			Laya.stage.off("mouseout",this,this.onStageMouseUp2);
			Laya.timer.clear(this,this.loop);
			if (this._clickOnly)return;
			this._target.mouseEnabled=true;
			if (this._isElastic){
				if (this._value < this.min){
					Tween.to(this,{value:this.min},this.elasticBackTime,Ease.sineOut,Handler.create(this,this.elasticOver));
					}else if (this._value > this.max){
					Tween.to(this,{value:this.max},this.elasticBackTime,Ease.sineOut,Handler.create(this,this.elasticOver));
				}
				}else {
				if (!this._offsets)return;
				if (this._offsets.length < 1){
					this._offsets[0]=this.isVertical ? Laya.stage.mouseY-this._lastPoint.y :Laya.stage.mouseX-this._lastPoint.x;
				};
				var offset=0;
				var n=Math.min(this._offsets.length,3);
				for (var i=0;i < n;i++){
					offset+=this._offsets[this._offsets.length-1-i];
				}
				this._lastOffset=offset / n;
				offset=Math.abs(this._lastOffset);
				if (offset < 2){
					this.event("end");
					return;
				}
				if (offset > 60)this._lastOffset=this._lastOffset > 0 ? 60 :-60;
				var dis=Math.round(Math.abs(this.elasticDistance *(this._lastOffset / 240)));
				Laya.timer.frameLoop(1,this,this.tweenMove,[dis]);
			}
		}

		/**@private */
		__proto.elasticOver=function(){
			this._isElastic=false;
			if (!this.hide && this.autoHide){
				Tween.to(this,{alpha:0},500);
			}
			this.event("end");
		}

		/**@private */
		__proto.tweenMove=function(maxDistance){
			this._lastOffset *=this.rollRatio;
			var tarSpeed=NaN;
			if (maxDistance > 0){
				if (this._lastOffset > 0 && this.value <=this.min){
					this._isElastic=true;
					tarSpeed=-(this.min-maxDistance-this.value)*0.5;
					if (this._lastOffset > tarSpeed)this._lastOffset=tarSpeed;
					}else if (this._lastOffset < 0 && this.value >=this.max){
					this._isElastic=true;
					tarSpeed=-(this.max+maxDistance-this.value)*0.5;
					if (this._lastOffset < tarSpeed)this._lastOffset=tarSpeed;
				}
			}
			this.value-=this._lastOffset;
			if (Math.abs(this._lastOffset)< 1){
				Laya.timer.clear(this,this.tweenMove);
				if (this._isElastic){
					if (this._value < this.min){
						Tween.to(this,{value:this.min},this.elasticBackTime,Ease.sineOut,Handler.create(this,this.elasticOver));
						}else if (this._value > this.max){
						Tween.to(this,{value:this.max},this.elasticBackTime,Ease.sineOut,Handler.create(this,this.elasticOver));
						}else {
						this.elasticOver();
					}
					return;
				}
				this.event("end");
				if (!this.hide && this.autoHide){
					Tween.to(this,{alpha:0},500);
				}
			}
		}

		/**
		*停止滑动。
		*/
		__proto.stopScroll=function(){
			this.onStageMouseUp2(null);
			Laya.timer.clear(this,this.tweenMove);
			Tween.clearTween(this);
		}

		/**@inheritDoc */
		__getset(0,__proto,'measureHeight',function(){
			if (this.slider.isVertical)return 100;
			return this.slider.height;
		});

		/**
		*@copy laya.ui.Image#skin
		*/
		__getset(0,__proto,'skin',function(){
			return this._skin;
			},function(value){
			if (this._skin !=value){
				this._skin=value;
				this.slider.skin=this._skin;
				this.callLater(this.changeScrollBar);
			}
		});

		/**
		*获取或设置表示最高滚动位置的数字。
		*/
		__getset(0,__proto,'max',function(){
			return this.slider.max;
			},function(value){
			this.slider.max=value;
		});

		/**一个布尔值，指定是否显示向上、向下按钮，默认值为true。*/
		__getset(0,__proto,'showButtons',function(){
			return this._showButtons;
			},function(value){
			this._showButtons=value;
			this.callLater(this.changeScrollBar);
		});

		/**@inheritDoc */
		__getset(0,__proto,'measureWidth',function(){
			if (this.slider.isVertical)return this.slider.width;
			return 100;
		});

		/**
		*获取或设置表示最低滚动位置的数字。
		*/
		__getset(0,__proto,'min',function(){
			return this.slider.min;
			},function(value){
			this.slider.min=value;
		});

		/**
		*获取或设置表示当前滚动位置的数字。
		*/
		__getset(0,__proto,'value',function(){
			return this._value;
			},function(v){
			if (v!==this._value){
				if (this._isElastic)this._value=v;
				else {
					this.slider.value=v;
					this._value=this.slider.value;
				}
				this.event("change");
				this.changeHandler && this.changeHandler.runWith(this.value);
			}
		});

		/**
		*一个布尔值，指示滚动条是否为垂直滚动。如果值为true，则为垂直滚动，否则为水平滚动。
		*<p>默认值为：true。</p>
		*/
		__getset(0,__proto,'isVertical',function(){
			return this.slider.isVertical;
			},function(value){
			this.slider.isVertical=value;
		});

		/**
		*<p>当前实例的 <code>Slider</code> 实例的有效缩放网格数据。</p>
		*<p>数据格式："上边距,右边距,下边距,左边距,是否重复填充(值为0：不重复填充，1：重复填充)"，以逗号分隔。
		*<ul><li>例如："4,4,4,4,1"</li></ul></p>
		*@see laya.ui.AutoBitmap.sizeGrid
		*/
		__getset(0,__proto,'sizeGrid',function(){
			return this.slider.sizeGrid;
			},function(value){
			this.slider.sizeGrid=value;
		});

		/**获取或设置一个值，该值表示按下滚动条轨道时页面滚动的增量。 */
		__getset(0,__proto,'scrollSize',function(){
			return this._scrollSize;
			},function(value){
			this._scrollSize=value;
		});

		/**@inheritDoc */
		__getset(0,__proto,'dataSource',_super.prototype._$get_dataSource,function(value){
			this._dataSource=value;
			if ((typeof value=='number')|| (typeof value=='string'))this.value=Number(value);
			else _super.prototype._$set_dataSource.call(this,value);
		});

		/**获取或设置一个值，该值表示滑条长度比例，值为：（0-1）。 */
		__getset(0,__proto,'thumbPercent',function(){
			return this._thumbPercent;
			},function(value){
			this.runCallLater(this.changeScrollBar);
			this.runCallLater(this.changeSize);
			value=value >=1 ? 0.99 :value;
			this._thumbPercent=value;
			if (this.scaleBar){
				if (this.slider.isVertical)this.slider.bar.height=Math.max(this.slider.height *value,Styles.scrollBarMinNum);
				else this.slider.bar.width=Math.max(this.slider.width *value,Styles.scrollBarMinNum);
			}
		});

		/**
		*设置滚动对象。
		*@see laya.ui.TouchScroll#target
		*/
		__getset(0,__proto,'target',function(){
			return this._target;
			},function(value){
			if (this._target){
				this._target.off("mousewheel",this,this.onTargetMouseWheel);
				this._target.off("mousedown",this,this.onTargetMouseDown);
			}
			this._target=value;
			if (value){
				this._mouseWheelEnable && this._target.on("mousewheel",this,this.onTargetMouseWheel);
				this._touchScrollEnable && this._target.on("mousedown",this,this.onTargetMouseDown);
			}
		});

		/**是否隐藏滚动条，不显示滚动条，但是可以正常滚动，默认为false。*/
		__getset(0,__proto,'hide',function(){
			return this._hide;
			},function(value){
			this._hide=value;
			this.visible=!value;
		});

		/**一个布尔值，指定是否开启触摸，默认值为true。*/
		__getset(0,__proto,'touchScrollEnable',function(){
			return this._touchScrollEnable;
			},function(value){
			this._touchScrollEnable=value;
			this.target=this._target;
		});

		/**一个布尔值，指定是否滑轮滚动，默认值为true。*/
		__getset(0,__proto,'mouseWheelEnable',function(){
			return this._mouseWheelEnable;
			},function(value){
			this._mouseWheelEnable=value;
		});

		/**
		*滚动的刻度值，滑动数值为tick的整数倍。默认值为1。
		*/
		__getset(0,__proto,'tick',function(){
			return this.slider.tick;
			},function(value){
			this.slider.tick=value;
		});

		return ScrollBar;
	})(Component)


	/**
	*使用 <code>Slider</code> 控件，用户可以通过在滑块轨道的终点之间移动滑块来选择值。
	*<p>滑块的当前值由滑块端点（对应于滑块的最小值和最大值）之间滑块的相对位置确定。</p>
	*<p>滑块允许最小值和最大值之间特定间隔内的值。滑块还可以使用数据提示显示其当前值。</p>
	*
	*@see laya.ui.HSlider
	*@see laya.ui.VSlider
	*/
	//class laya.ui.Slider extends laya.ui.Component
	var Slider=(function(_super){
		function Slider(skin){
			this.changeHandler=null;
			this.isVertical=true;
			this.showLabel=true;
			this._allowClickBack=false;
			this._max=100;
			this._min=0;
			this._tick=1;
			this._value=0;
			this._skin=null;
			this._bg=null;
			this._progress=null;
			this._bar=null;
			this._tx=NaN;
			this._ty=NaN;
			this._maxMove=NaN;
			this._globalSacle=null;
			Slider.__super.call(this);
			this.skin=skin;
		}

		__class(Slider,'laya.ui.Slider',_super);
		var __proto=Slider.prototype;
		/**
		*@inheritDoc
		*/
		__proto.destroy=function(destroyChild){
			(destroyChild===void 0)&& (destroyChild=true);
			_super.prototype.destroy.call(this,destroyChild);
			this._bg && this._bg.destroy(destroyChild);
			this._bar && this._bar.destroy(destroyChild);
			this._progress && this._progress.destroy(destroyChild);
			this._bg=null;
			this._bar=null;
			this._progress=null;
			this.changeHandler=null;
		}

		/**@inheritDoc */
		__proto.createChildren=function(){
			this.addChild(this._bg=new Image());
			this.addChild(this._bar=new Button());
		}

		/**@inheritDoc */
		__proto.initialize=function(){
			this._bar.on("mousedown",this,this.onBarMouseDown);
			this._bg.sizeGrid=this._bar.sizeGrid="4,4,4,4,0";
			if (this._progress)this._progress.sizeGrid=this._bar.sizeGrid;
			this.allowClickBack=true;
		}

		/**
		*@private
		*滑块的的 <code>Event.MOUSE_DOWN</code> 事件侦听处理函数。
		*/
		__proto.onBarMouseDown=function(e){
			this._globalSacle || (this._globalSacle=new Point());
			this._globalSacle.setTo(this.globalScaleX || 0.01,this.globalScaleY || 0.01);
			this._maxMove=this.isVertical ? (this.height-this._bar.height):(this.width-this._bar.width);
			this._tx=Laya.stage.mouseX;
			this._ty=Laya.stage.mouseY;
			Laya.stage.on("mousemove",this,this.mouseMove);
			Laya.stage.once("mouseup",this,this.mouseUp);
			this.showValueText();
		}

		/**
		*@private
		*显示标签。
		*/
		__proto.showValueText=function(){
			if (this.showLabel){
				var label=laya.ui.Slider.label;
				this.addChild(label);
				label.textField.changeText(this._value+"");
				if (this.isVertical){
					label.x=this._bar.x+20;
					label.y=(this._bar.height-label.height)*0.5+this._bar.y;
					}else {
					label.y=this._bar.y-20;
					label.x=(this._bar.width-label.width)*0.5+this._bar.x;
				}
			}
		}

		/**
		*@private
		*隐藏标签。
		*/
		__proto.hideValueText=function(){
			laya.ui.Slider.label && laya.ui.Slider.label.removeSelf();
		}

		/**
		*@private
		*/
		__proto.mouseUp=function(e){
			Laya.stage.off("mousemove",this,this.mouseMove);
			this.sendChangeEvent("changed");
			this.hideValueText();
		}

		/**
		*@private
		*/
		__proto.mouseMove=function(e){
			var oldValue=this._value;
			if (this.isVertical){
				this._bar.y+=(Laya.stage.mouseY-this._ty)/ this._globalSacle.y;
				if (this._bar.y > this._maxMove)this._bar.y=this._maxMove;
				else if (this._bar.y < 0)this._bar.y=0;
				this._value=this._bar.y / this._maxMove *(this._max-this._min)+this._min;
				if(this._progress)this._progress.height=this._bar.y+0.5*this._bar.height;
				}else {
				this._bar.x+=(Laya.stage.mouseX-this._tx)/ this._globalSacle.x;
				if (this._bar.x > this._maxMove)this._bar.x=this._maxMove;
				else if (this._bar.x < 0)this._bar.x=0;
				this._value=this._bar.x / this._maxMove *(this._max-this._min)+this._min;
				if(this._progress)this._progress.width=this._bar.x+0.5*this._bar.width;
			}
			this._tx=Laya.stage.mouseX;
			this._ty=Laya.stage.mouseY;
			var pow=Math.pow(10,(this._tick+"").length-1);
			this._value=Math.round(Math.round(this._value / this._tick)*this._tick *pow)/ pow;
			if (this._value !=oldValue){
				this.sendChangeEvent();
			}
			this.showValueText();
		}

		/**
		*@private
		*/
		__proto.sendChangeEvent=function(type){
			(type===void 0)&& (type="change");
			this.event(type);
			this.changeHandler && this.changeHandler.runWith(this._value);
		}

		/**
		*@private
		*设置滑块的位置信息。
		*/
		__proto.setBarPoint=function(){
			if (this.isVertical)this._bar.x=Math.round((this._bg.width-this._bar.width)*0.5);
			else this._bar.y=Math.round((this._bg.height-this._bar.height)*0.5);
		}

		/**@inheritDoc */
		__proto.changeSize=function(){
			_super.prototype.changeSize.call(this);
			if (this.isVertical)this._bg.height=this.height;
			else this._bg.width=this.width;
			this.setBarPoint();
			this.changeValue();
		}

		/**
		*设置滑动条的信息。
		*@param min 滑块的最小值。
		*@param max 滑块的最小值。
		*@param value 滑块的当前值。
		*/
		__proto.setSlider=function(min,max,value){
			this._value=-1;
			this._min=min;
			this._max=max > min ? max :min;
			this.value=value < min ? min :value > max ? max :value;
		}

		/**
		*@private
		*改变滑块的位置值。
		*/
		__proto.changeValue=function(){
			var pow=Math.pow(10,(this._tick+"").length-1);
			this._value=Math.round(Math.round(this._value / this._tick)*this._tick *pow)/ pow;
			this._value=this._value > this._max ? this._max :this._value < this._min ? this._min :this._value;
			var num=this._max-this._min;
			if (num===0)num=1;
			if (this.isVertical){
				this._bar.y=(this._value-this._min)/ num *(this.height-this._bar.height);
				if(this._progress)this._progress.height=this._bar.y+0.5*this._bar.height;
			}
			else{
				this._bar.x=(this._value-this._min)/ num *(this.width-this._bar.width);
				if(this._progress)this._progress.width=this._bar.x+0.5*this._bar.width;
			}
		}

		/**
		*@private
		*滑动条的 <code>Event.MOUSE_DOWN</code> 事件侦听处理函数。
		*/
		__proto.onBgMouseDown=function(e){
			var point=this._bg.getMousePoint();
			if (this.isVertical)this.value=point.y / (this.height-this._bar.height)*(this._max-this._min)+this._min;
			else this.value=point.x / (this.width-this._bar.width)*(this._max-this._min)+this._min;
		}

		/**@inheritDoc */
		__getset(0,__proto,'measureHeight',function(){
			return Math.max(this._bg.height,this._bar.height);
		});

		/**
		*@copy laya.ui.Image#skin
		*/
		__getset(0,__proto,'skin',function(){
			return this._skin;
			},function(value){
			if (this._skin !=value){
				this._skin=value;
				this._bg.skin=this._skin;
				this._bar.skin=this._skin.replace(".png","$bar.png");
				var progressSkin=this._skin.replace(".png","$progress.png");
				if (Loader.getRes(progressSkin)){
					if (!this._progress){
						this.addChild(this._progress=new Image());
						this._progress.sizeGrid=this._bar.sizeGrid;
						this.setChildIndex(this._progress,1);
					}
					this._progress.skin=progressSkin;
				}
				this.setBarPoint();
				this.callLater(this.changeValue);
			}
		});

		/**
		*一个布尔值，指定是否允许通过点击滑动条改变 <code>Slider</code> 的 <code>value</code> 属性值。
		*/
		__getset(0,__proto,'allowClickBack',function(){
			return this._allowClickBack;
			},function(value){
			if (this._allowClickBack !=value){
				this._allowClickBack=value;
				if (value)this._bg.on("mousedown",this,this.onBgMouseDown);
				else this._bg.off("mousedown",this,this.onBgMouseDown);
			}
		});

		/**
		*获取或设置表示最高位置的数字。 默认值为100。
		*/
		__getset(0,__proto,'max',function(){
			return this._max;
			},function(value){
			if (this._max !=value){
				this._max=value;
				this.callLater(this.changeValue);
			}
		});

		/**@inheritDoc */
		__getset(0,__proto,'measureWidth',function(){
			return Math.max(this._bg.width,this._bar.width);
		});

		/**
		*滑动的刻度值，滑动数值为tick的整数倍。默认值为1。
		*/
		__getset(0,__proto,'tick',function(){
			return this._tick;
			},function(value){
			if (this._tick !=value){
				this._tick=value;
				this.callLater(this.changeValue);
			}
		});

		/**
		*<p>当前实例的背景图（ <code>Image</code> ）和滑块按钮（ <code>Button</code> ）实例的有效缩放网格数据。</p>
		*<p>数据格式："上边距,右边距,下边距,左边距,是否重复填充(值为0：不重复填充，1：重复填充)"，以逗号分隔。
		*<ul><li>例如："4,4,4,4,1"</li></ul></p>
		*@see laya.ui.AutoBitmap.sizeGrid
		*/
		__getset(0,__proto,'sizeGrid',function(){
			return this._bg.sizeGrid;
			},function(value){
			this._bg.sizeGrid=value;
			this._bar.sizeGrid=value;
		});

		/**
		*获取或设置表示最低位置的数字。 默认值为0。
		*/
		__getset(0,__proto,'min',function(){
			return this._min;
			},function(value){
			if (this._min !=value){
				this._min=value;
				this.callLater(this.changeValue);
			}
		});

		/**
		*获取或设置表示当前滑块位置的数字。
		*/
		__getset(0,__proto,'value',function(){
			return this._value;
			},function(num){
			if (this._value !=num){
				var oldValue=this._value;
				this._value=num;
				this.changeValue();
				if (this._value !=oldValue){
					this.sendChangeEvent();
				}
			}
		});

		/**@inheritDoc */
		__getset(0,__proto,'dataSource',_super.prototype._$get_dataSource,function(value){
			this._dataSource=value;
			if ((typeof value=='number')|| (typeof value=='string'))this.value=Number(value);
			else _super.prototype._$set_dataSource.call(this,value);
		});

		/**
		*表示滑块按钮的引用。
		*/
		__getset(0,__proto,'bar',function(){
			return this._bar;
		});

		__static(Slider,
		['label',function(){return this.label=new Label();}
		]);
		return Slider;
	})(Component)


	/**
	*<p> <code>Label</code> 类用于创建显示对象以显示文本。</p>
	*
	*@example <caption>以下示例代码，创建了一个 <code>Label</code> 实例。</caption>
	*package
	*{
		*import laya.ui.Label;
		*public class Label_Example
		*{
			*public function Label_Example()
			*{
				*Laya.init(640,800);//设置游戏画布宽高、渲染模式。
				*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
				*onInit();
				*}
			*private function onInit():void
			*{
				*var label:Label=new Label();//创建一个 Label 类的实例对象 label 。
				*label.font="Arial";//设置 label 的字体。
				*label.bold=true;//设置 label 显示为粗体。
				*label.leading=4;//设置 label 的行间距。
				*label.wordWrap=true;//设置 label 自动换行。
				*label.padding="10,10,10,10";//设置 label 的边距。
				*label.color="#ff00ff";//设置 label 的颜色。
				*label.text="Hello everyone,我是一个可爱的文本！";//设置 label 的文本内容。
				*label.x=100;//设置 label 对象的属性 x 的值，用于控制 label 对象的显示位置。
				*label.y=100;//设置 label 对象的属性 y 的值，用于控制 label 对象的显示位置。
				*label.width=300;//设置 label 的宽度。
				*label.height=200;//设置 label 的高度。
				*Laya.stage.addChild(label);//将 label 添加到显示列表。
				*var passwordLabel:Label=new Label("请原谅我，我不想被人看到我心里话。");//创建一个 Label 类的实例对象 passwordLabel 。
				*passwordLabel.asPassword=true;//设置 passwordLabel 的显示反式为密码显示。
				*passwordLabel.x=100;//设置 passwordLabel 对象的属性 x 的值，用于控制 passwordLabel 对象的显示位置。
				*passwordLabel.y=350;//设置 passwordLabel 对象的属性 y 的值，用于控制 passwordLabel 对象的显示位置。
				*passwordLabel.width=300;//设置 passwordLabel 的宽度。
				*passwordLabel.color="#000000";//设置 passwordLabel 的文本颜色。
				*passwordLabel.bgColor="#ccffff";//设置 passwordLabel 的背景颜色。
				*passwordLabel.fontSize=20;//设置 passwordLabel 的文本字体大小。
				*Laya.stage.addChild(passwordLabel);//将 passwordLabel 添加到显示列表。
				*}
			*}
		*}
	*@example
	*Laya.init(640,800);//设置游戏画布宽高
	*Laya.stage.bgColor="#efefef";//设置画布的背景颜色
	*onInit();
	*function onInit(){
		*var label=new laya.ui.Label();//创建一个 Label 类的实例对象 label 。
		*label.font="Arial";//设置 label 的字体。
		*label.bold=true;//设置 label 显示为粗体。
		*label.leading=4;//设置 label 的行间距。
		*label.wordWrap=true;//设置 label 自动换行。
		*label.padding="10,10,10,10";//设置 label 的边距。
		*label.color="#ff00ff";//设置 label 的颜色。
		*label.text="Hello everyone,我是一个可爱的文本！";//设置 label 的文本内容。
		*label.x=100;//设置 label 对象的属性 x 的值，用于控制 label 对象的显示位置。
		*label.y=100;//设置 label 对象的属性 y 的值，用于控制 label 对象的显示位置。
		*label.width=300;//设置 label 的宽度。
		*label.height=200;//设置 label 的高度。
		*Laya.stage.addChild(label);//将 label 添加到显示列表。
		*var passwordLabel=new laya.ui.Label("请原谅我，我不想被人看到我心里话。");//创建一个 Label 类的实例对象 passwordLabel 。
		*passwordLabel.asPassword=true;//设置 passwordLabel 的显示反式为密码显示。
		*passwordLabel.x=100;//设置 passwordLabel 对象的属性 x 的值，用于控制 passwordLabel 对象的显示位置。
		*passwordLabel.y=350;//设置 passwordLabel 对象的属性 y 的值，用于控制 passwordLabel 对象的显示位置。
		*passwordLabel.width=300;//设置 passwordLabel 的宽度。
		*passwordLabel.color="#000000";//设置 passwordLabel 的文本颜色。
		*passwordLabel.bgColor="#ccffff";//设置 passwordLabel 的背景颜色。
		*passwordLabel.fontSize=20;//设置 passwordLabel 的文本字体大小。
		*Laya.stage.addChild(passwordLabel);//将 passwordLabel 添加到显示列表。
		*}
	*@example
	*import Label=laya.ui.Label;
	*class Label_Example {
		*constructor(){
			*Laya.init(640,800);//设置游戏画布宽高。
			*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
			*this.onInit();
			*}
		*private onInit():void {
			*var label:Label=new Label();//创建一个 Label 类的实例对象 label 。
			*label.font="Arial";//设置 label 的字体。
			*label.bold=true;//设置 label 显示为粗体。
			*label.leading=4;//设置 label 的行间距。
			*label.wordWrap=true;//设置 label 自动换行。
			*label.padding="10,10,10,10";//设置 label 的边距。
			*label.color="#ff00ff";//设置 label 的颜色。
			*label.text="Hello everyone,我是一个可爱的文本！";//设置 label 的文本内容。
			*label.x=100;//设置 label 对象的属性 x 的值，用于控制 label 对象的显示位置。
			*label.y=100;//设置 label 对象的属性 y 的值，用于控制 label 对象的显示位置。
			*label.width=300;//设置 label 的宽度。
			*label.height=200;//设置 label 的高度。
			*Laya.stage.addChild(label);//将 label 添加到显示列表。
			*var passwordLabel:Label=new Label("请原谅我，我不想被人看到我心里话。");//创建一个 Label 类的实例对象 passwordLabel 。
			*passwordLabel.asPassword=true;//设置 passwordLabel 的显示反式为密码显示。
			*passwordLabel.x=100;//设置 passwordLabel 对象的属性 x 的值，用于控制 passwordLabel 对象的显示位置。
			*passwordLabel.y=350;//设置 passwordLabel 对象的属性 y 的值，用于控制 passwordLabel 对象的显示位置。
			*passwordLabel.width=300;//设置 passwordLabel 的宽度。
			*passwordLabel.color="#000000";//设置 passwordLabel 的文本颜色。
			*passwordLabel.bgColor="#ccffff";//设置 passwordLabel 的背景颜色。
			*passwordLabel.fontSize=20;//设置 passwordLabel 的文本字体大小。
			*Laya.stage.addChild(passwordLabel);//将 passwordLabel 添加到显示列表。
			*}
		*}
	*@see laya.display.Text
	*/
	//class laya.ui.Label extends laya.ui.Component
	var Label=(function(_super){
		function Label(text){
			this._tf=null;
			Label.__super.call(this);
			(text===void 0)&& (text="");
			Font.defaultColor=Styles.labelColor;
			this.text=text;
		}

		__class(Label,'laya.ui.Label',_super);
		var __proto=Label.prototype;
		/**@inheritDoc */
		__proto.destroy=function(destroyChild){
			(destroyChild===void 0)&& (destroyChild=true);
			_super.prototype.destroy.call(this,destroyChild);
			this._tf=null;
		}

		/**@inheritDoc */
		__proto.createChildren=function(){
			this.addChild(this._tf=new Text());
		}

		/**@copy laya.display.Text#changeText()
		**/
		__proto.changeText=function(text){
			this._tf.changeText(text);
		}

		/**
		*<p>边距信息</p>
		*<p>"上边距，右边距，下边距 , 左边距（边距以像素为单位）"</p>
		*@see laya.display.Text.padding
		*/
		__getset(0,__proto,'padding',function(){
			return this._tf.padding.join(",");
			},function(value){
			this._tf.padding=UIUtils.fillArray(Styles.labelPadding,value,Number);
		});

		/**
		*@copy laya.display.Text#bold
		*/
		__getset(0,__proto,'bold',function(){
			return this._tf.bold;
			},function(value){
			this._tf.bold=value;
		});

		/**
		*@copy laya.display.Text#align
		*/
		__getset(0,__proto,'align',function(){
			return this._tf.align;
			},function(value){
			this._tf.align=value;
		});

		/**
		*当前文本内容字符串。
		*@see laya.display.Text.text
		*/
		__getset(0,__proto,'text',function(){
			return this._tf.text;
			},function(value){
			if (this._tf.text !=value){
				if(value)
					value=UIUtils.adptString(value+"");
				this._tf.text=value;
				this.event("change");
			}
		});

		/**
		*@copy laya.display.Text#italic
		*/
		__getset(0,__proto,'italic',function(){
			return this._tf.italic;
			},function(value){
			this._tf.italic=value;
		});

		/**
		*@copy laya.display.Text#wordWrap
		*/
		/**
		*@copy laya.display.Text#wordWrap
		*/
		__getset(0,__proto,'wordWrap',function(){
			return this._tf.wordWrap;
			},function(value){
			this._tf.wordWrap=value;
		});

		/**
		*@copy laya.display.Text#font
		*/
		__getset(0,__proto,'font',function(){
			return this._tf.font;
			},function(value){
			this._tf.font=value;
		});

		/**@inheritDoc */
		__getset(0,__proto,'dataSource',_super.prototype._$get_dataSource,function(value){
			this._dataSource=value;
			if ((typeof value=='number')|| (typeof value=='string'))this.text=value+"";
			else _super.prototype._$set_dataSource.call(this,value);
		});

		/**
		*@copy laya.display.Text#color
		*/
		__getset(0,__proto,'color',function(){
			return this._tf.color;
			},function(value){
			this._tf.color=value;
		});

		/**
		*@copy laya.display.Text#valign
		*/
		__getset(0,__proto,'valign',function(){
			return this._tf.valign;
			},function(value){
			this._tf.valign=value;
		});

		/**
		*@copy laya.display.Text#leading
		*/
		__getset(0,__proto,'leading',function(){
			return this._tf.leading;
			},function(value){
			this._tf.leading=value;
		});

		/**
		*@copy laya.display.Text#fontSize
		*/
		__getset(0,__proto,'fontSize',function(){
			return this._tf.fontSize;
			},function(value){
			this._tf.fontSize=value;
		});

		/**
		*@copy laya.display.Text#bgColor
		*/
		__getset(0,__proto,'bgColor',function(){
			return this._tf.bgColor
			},function(value){
			this._tf.bgColor=value;
		});

		/**
		*@copy laya.display.Text#borderColor
		*/
		__getset(0,__proto,'borderColor',function(){
			return this._tf.borderColor
			},function(value){
			this._tf.borderColor=value;
		});

		/**
		*@copy laya.display.Text#stroke
		*/
		__getset(0,__proto,'stroke',function(){
			return this._tf.stroke;
			},function(value){
			this._tf.stroke=value;
		});

		/**
		*@copy laya.display.Text#strokeColor
		*/
		__getset(0,__proto,'strokeColor',function(){
			return this._tf.strokeColor;
			},function(value){
			this._tf.strokeColor=value;
		});

		/**
		*文本控件实体 <code>Text</code> 实例。
		*/
		__getset(0,__proto,'textField',function(){
			return this._tf;
		});

		/**
		*@inheritDoc
		*/
		__getset(0,__proto,'measureWidth',function(){
			return this._tf.width;
		});

		/**
		*@inheritDoc
		*/
		__getset(0,__proto,'measureHeight',function(){
			return this._tf.height;
		});

		/**
		*@inheritDoc
		*/
		/**
		*@inheritDoc
		*/
		__getset(0,__proto,'width',function(){
			if (this._width || this._tf.text)return _super.prototype._$get_width.call(this);
			return 0;
			},function(value){
			_super.prototype._$set_width.call(this,value);
			this._tf.width=value;
		});

		/**
		*@inheritDoc
		*/
		/**
		*@inheritDoc
		*/
		__getset(0,__proto,'height',function(){
			if (this._height || this._tf.text)return _super.prototype._$get_height.call(this);
			return 0;
			},function(value){
			_super.prototype._$set_height.call(this,value);
			this._tf.height=value;
		});

		/**
		*@copy laya.display.Text#overflow
		*/
		/**
		*@copy laya.display.Text#overflow
		*/
		__getset(0,__proto,'overflow',function(){
			return this._tf.overflow;
			},function(value){
			this._tf.overflow=value;
		});

		/**
		*@copy laya.display.Text#underline
		*/
		/**
		*@copy laya.display.Text#underline
		*/
		__getset(0,__proto,'underline',function(){
			return this._tf.underline;
			},function(value){
			this._tf.underline=value;
		});

		/**
		*@copy laya.display.Text#underlineColor
		*/
		/**
		*@copy laya.display.Text#underlineColor
		*/
		__getset(0,__proto,'underlineColor',function(){
			return this._tf.underlineColor;
			},function(value){
			this._tf.underlineColor=value;
		});

		return Label;
	})(Component)


	/**
	*<code>ProgressBar</code> 组件显示内容的加载进度。
	*@example <caption>以下示例代码，创建了一个新的 <code>ProgressBar</code> 实例，设置了它的皮肤、位置、宽高、网格等信息，并添加到舞台上。</caption>
	*package
	*{
		*import laya.ui.ProgressBar;
		*import laya.utils.Handler;
		*public class ProgressBar_Example
		*{
			*private var progressBar:ProgressBar;
			*public function ProgressBar_Example()
			*{
				*Laya.init(640,800);//设置游戏画布宽高。
				*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
				*Laya.loader.load(["resource/ui/progress.png","resource/ui/progress$bar.png"],Handler.create(this,onLoadComplete));//加载资源。
				*}
			*private function onLoadComplete():void
			*{
				*progressBar=new ProgressBar("resource/ui/progress.png");//创建一个 ProgressBar 类的实例对象 progressBar 。
				*progressBar.x=100;//设置 progressBar 对象的属性 x 的值，用于控制 progressBar 对象的显示位置。
				*progressBar.y=100;//设置 progressBar 对象的属性 y 的值，用于控制 progressBar 对象的显示位置。
				*progressBar.value=0.3;//设置 progressBar 的进度值。
				*progressBar.width=200;//设置 progressBar 的宽度。
				*progressBar.height=50;//设置 progressBar 的高度。
				*progressBar.sizeGrid="5,10,5,10";//设置 progressBar 的网格信息。
				*progressBar.changeHandler=new Handler(this,onChange);//设置 progressBar 的value值改变时执行的处理器。
				*Laya.stage.addChild(progressBar);//将 progressBar 添加到显示列表。
				*Laya.timer.once(3000,this,changeValue);//设定 3000ms（毫秒）后，执行函数changeValue。
				*}
			*private function changeValue():void
			*{
				*trace("改变进度条的进度值。");
				*progressBar.value=0.6;
				*}
			*private function onChange(value:Number):void
			*{
				*trace("进度发生改变： value=" ,value);
				*}
			*}
		*}
	*@example
	*Laya.init(640,800);//设置游戏画布宽高
	*Laya.stage.bgColor="#efefef";//设置画布的背景颜色
	*var res=["resource/ui/progress.png","resource/ui/progress$bar.png"];
	*Laya.loader.load(res,laya.utils.Handler.create(this,onLoadComplete));//加载资源。
	*function onLoadComplete()
	*{
		*progressBar=new laya.ui.ProgressBar("resource/ui/progress.png");//创建一个 ProgressBar 类的实例对象 progressBar 。
		*progressBar.x=100;//设置 progressBar 对象的属性 x 的值，用于控制 progressBar 对象的显示位置。
		*progressBar.y=100;//设置 progressBar 对象的属性 y 的值，用于控制 progressBar 对象的显示位置。
		*progressBar.value=0.3;//设置 progressBar 的进度值。
		*progressBar.width=200;//设置 progressBar 的宽度。
		*progressBar.height=50;//设置 progressBar 的高度。
		*progressBar.sizeGrid="10,5,10,5";//设置 progressBar 的网格信息。
		*progressBar.changeHandler=new laya.utils.Handler(this,onChange);//设置 progressBar 的value值改变时执行的处理器。
		*Laya.stage.addChild(progressBar);//将 progressBar 添加到显示列表。
		*Laya.timer.once(3000,this,changeValue);//设定 3000ms（毫秒）后，执行函数changeValue。
		*}
	*function changeValue()
	*{
		*console.log("改变进度条的进度值。");
		*progressBar.value=0.6;
		*}
	*function onChange(value)
	*{
		*console.log("进度发生改变： value=" ,value);
		*}
	*@example
	*import ProgressBar=laya.ui.ProgressBar;
	*import Handler=laya.utils.Handler;
	*class ProgressBar_Example {
		*private progressBar:ProgressBar;
		*public ProgressBar_Example(){
			*Laya.init(640,800);//设置游戏画布宽高。
			*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
			*Laya.loader.load(["resource/ui/progress.png","resource/ui/progress$bar.png"],Handler.create(this,this.onLoadComplete));//加载资源。
			*}
		*private onLoadComplete():void {
			*this.progressBar=new ProgressBar("resource/ui/progress.png");//创建一个 ProgressBar 类的实例对象 progressBar 。
			*this.progressBar.x=100;//设置 progressBar 对象的属性 x 的值，用于控制 progressBar 对象的显示位置。
			*this.progressBar.y=100;//设置 progressBar 对象的属性 y 的值，用于控制 progressBar 对象的显示位置。
			*this.progressBar.value=0.3;//设置 progressBar 的进度值。
			*this.progressBar.width=200;//设置 progressBar 的宽度。
			*this.progressBar.height=50;//设置 progressBar 的高度。
			*this.progressBar.sizeGrid="5,10,5,10";//设置 progressBar 的网格信息。
			*this.progressBar.changeHandler=new Handler(this,this.onChange);//设置 progressBar 的value值改变时执行的处理器。
			*Laya.stage.addChild(this.progressBar);//将 progressBar 添加到显示列表。
			*Laya.timer.once(3000,this,this.changeValue);//设定 3000ms（毫秒）后，执行函数changeValue。
			*}
		*private changeValue():void {
			*console.log("改变进度条的进度值。");
			*this.progressBar.value=0.6;
			*}
		*private onChange(value:number):void {
			*console.log("进度发生改变： value=",value);
			*}
		*}
	*/
	//class laya.ui.ProgressBar extends laya.ui.Component
	var ProgressBar=(function(_super){
		function ProgressBar(skin){
			this.changeHandler=null;
			this._bg=null;
			this._bar=null;
			this._skin=null;
			this._value=0.5;
			ProgressBar.__super.call(this);
			this.skin=skin;
		}

		__class(ProgressBar,'laya.ui.ProgressBar',_super);
		var __proto=ProgressBar.prototype;
		/**@inheritDoc */
		__proto.destroy=function(destroyChild){
			(destroyChild===void 0)&& (destroyChild=true);
			_super.prototype.destroy.call(this,destroyChild);
			this._bg && this._bg.destroy(destroyChild);
			this._bar && this._bar.destroy(destroyChild);
			this._bg=this._bar=null;
			this.changeHandler=null;
		}

		/**@inheritDoc */
		__proto.createChildren=function(){
			this.addChild(this._bg=new Image());
			this.addChild(this._bar=new Image());
			this._bar._bitmap.autoCacheCmd=false;
		}

		/**
		*@private
		*更改进度值的显示。
		*/
		__proto.changeValue=function(){
			if (this.sizeGrid){
				var grid=this.sizeGrid.split(",");
				var left=Number(grid[3]);
				var right=Number(grid[1]);
				var max=this.width-left-right;
				var sw=max *this._value;
				this._bar.width=left+right+sw;
				this._bar.visible=this._bar.width > left+right;
				}else {
				this._bar.width=this.width *this._value;
			}
		}

		/**@inheritDoc */
		__getset(0,__proto,'measureHeight',function(){
			return this._bg.height;
		});

		/**
		*@copy laya.ui.Image#skin
		*/
		__getset(0,__proto,'skin',function(){
			return this._skin;
			},function(value){
			if (this._skin !=value){
				this._skin=value;
				this._bg.skin=this._skin;
				this._bar.skin=this._skin.replace(".png","$bar.png");
				this.callLater(this.changeValue);
			}
		});

		/**@inheritDoc */
		__getset(0,__proto,'measureWidth',function(){
			return this._bg.width;
		});

		/**@inheritDoc */
		__getset(0,__proto,'height',_super.prototype._$get_height,function(value){
			_super.prototype._$set_height.call(this,value);
			this._bg.height=this._height;
			this._bar.height=this._height;
		});

		/**
		*获取进度条对象。
		*/
		__getset(0,__proto,'bar',function(){
			return this._bar;
		});

		/**
		*当前的进度量。
		*<p><b>取值：</b>介于0和1之间。</p>
		*/
		__getset(0,__proto,'value',function(){
			return this._value;
			},function(num){
			if (this._value !=num){
				num=num > 1 ? 1 :num < 0 ? 0 :num;
				this._value=num;
				this.callLater(this.changeValue);
				this.event("change");
				this.changeHandler && this.changeHandler.runWith(num);
			}
		});

		/**
		*获取背景条对象。
		*/
		__getset(0,__proto,'bg',function(){
			return this._bg;
		});

		/**
		*<p>当前 <code>ProgressBar</code> 实例的进度条背景位图（ <code>Image</code> 实例）的有效缩放网格数据。</p>
		*<p>数据格式："上边距,右边距,下边距,左边距,是否重复填充(值为0：不重复填充，1：重复填充)"，以逗号分隔。
		*<ul><li>例如："4,4,4,4,1"</li></ul></p>
		*@see laya.ui.AutoBitmap.sizeGrid
		*/
		__getset(0,__proto,'sizeGrid',function(){
			return this._bg.sizeGrid;
			},function(value){
			this._bg.sizeGrid=this._bar.sizeGrid=value;
		});

		/**@inheritDoc */
		__getset(0,__proto,'width',_super.prototype._$get_width,function(value){
			_super.prototype._$set_width.call(this,value);
			this._bg.width=this._width;
			this.callLater(this.changeValue);
		});

		/**@inheritDoc */
		__getset(0,__proto,'dataSource',_super.prototype._$get_dataSource,function(value){
			this._dataSource=value;
			if ((typeof value=='number')|| (typeof value=='string'))this.value=Number(value);
			else _super.prototype._$set_dataSource.call(this,value);
		});

		return ProgressBar;
	})(Component)


	/**
	*<p><code>Input</code> 类用于创建显示对象以显示和输入文本。</p>
	*<p>Input 类封装了原生的文本输入框，由于不同浏览器的差异，会导致此对象的默认文本的位置与用户点击输入时的文本的位置有少许的偏差。</p>
	*/
	//class laya.display.Input extends laya.display.Text
	var Input=(function(_super){
		function Input(){
			this._focus=false;
			this._multiline=false;
			this._editable=true;
			this._restrictPattern=null;
			this._type="text";
			this._prompt='';
			this._promptColor="#A9A9A9";
			this._originColor="#000000";
			this._content='';
			Input.__super.call(this);
			this._maxChars=1E5;
			this._width=100;
			this._height=20;
			this.multiline=false;
			this.overflow=Text.SCROLL;
			this.on("mousedown",this,this._onMouseDown);
			this.on("undisplay",this,this._onUnDisplay);
		}

		__class(Input,'laya.display.Input',_super);
		var __proto=Input.prototype;
		/**
		*设置光标位置和选取字符。
		*@param startIndex 光标起始位置。
		*@param endIndex 光标结束位置。
		*/
		__proto.setSelection=function(startIndex,endIndex){
			laya.display.Input.inputElement.selectionStart=startIndex;
			laya.display.Input.inputElement.selectionEnd=endIndex;
		}

		__proto._onUnDisplay=function(e){
			this.focus=false;
		}

		__proto._onMouseDown=function(e){
			this.focus=true;
		}

		/**@inheritDoc*/
		__proto.render=function(context,x,y){
			laya.display.Sprite.prototype.render.call(this,context,x,y);
		}

		/**
		*在输入期间，如果 Input 实例的位置改变，调用_syncInputTransform同步输入框的位置。
		*/
		__proto._syncInputTransform=function(){
			var inputElement=this.nativeInput;
			var transform=Utils$2.getTransformRelativeToWindow(this,this.padding[3],this.padding[0]);
			var inputWid=this._width-this.padding[1]-this.padding[3];
			var inputHei=this._height-this.padding[0]-this.padding[2];
			if (Render.isConchApp){
				inputElement.setScale(transform.scaleX,transform.scaleY);
				inputElement.setSize(inputWid,inputHei);
				inputElement.setPos(transform.x,transform.y);
				}else {
				Input.inputContainer.style.transform=Input.inputContainer.style.webkitTransform="scale("+transform.scaleX+","+transform.scaleY+") rotate("+(Laya.stage.canvasDegree)+"deg)";
				inputElement.style.width=inputWid+'px';
				inputElement.style.height=inputHei+'px';
				Input.inputContainer.style.left=transform.x+'px';
				Input.inputContainer.style.top=transform.y+'px';
			}
		}

		/**选中当前实例的所有文本。*/
		__proto.select=function(){
			this.nativeInput.select();
		}

		__proto._setInputMethod=function(){
			Input.input.parentElement && (Input.inputContainer.removeChild(Input.input));
			Input.area.parentElement && (Input.inputContainer.removeChild(Input.area));
			Input.inputElement=(this._multiline ? Input.area :Input.input);
			Input.inputContainer.appendChild(Input.inputElement);
		}

		__proto._focusIn=function(){
			laya.display.Input.isInputting=true;
			var input=this.nativeInput;
			this._focus=true;
			var cssStyle=input.style;
			cssStyle.whiteSpace=(this.wordWrap ? "pre-wrap" :"nowrap");
			this._setPromptColor();
			input.readOnly=!this._editable;
			if (Render.isConchApp){
				input.setForbidEdit(!this._editable);
			}
			input.maxLength=this._maxChars;
			var padding=this.padding;
			input.type=this._type;
			input.value=this._content;
			input.placeholder=this._prompt;
			Laya.stage.off("keydown",this,this._onKeyDown);
			Laya.stage.on("keydown",this,this._onKeyDown);
			Laya.stage.focus=this;
			this.event("focus");
			if (Browser.onPC)input.focus();
			var temp=this._text;
			this._text=null;
			this.typeset();
			input.setColor(this._originColor);
			input.setFontSize(this.fontSize);
			input.setFontFace(this.font);
			if (Render.isConchApp){
				input.setMultiAble && input.setMultiAble(this._multiline);
			}
			cssStyle.lineHeight=(this.leading+this.fontSize)+"px";
			cssStyle.fontStyle=(this.italic ? "italic" :"normal");
			cssStyle.fontWeight=(this.bold ? "bold" :"normal");
			cssStyle.textAlign=this.align;
			cssStyle.padding="0 0";
			this._syncInputTransform();
			if (!Render.isConchApp && Browser.onPC)
				Laya.timer.frameLoop(1,this,this._syncInputTransform);
		}

		// 设置DOM输入框提示符颜色。
		__proto._setPromptColor=function(){
			Input.promptStyleDOM=Browser.getElementById("promptStyle");
			if (!Input.promptStyleDOM){
				Input.promptStyleDOM=Browser.createElement("style");
				Input.promptStyleDOM.setAttribute("id","promptStyle");
				Browser.document.head.appendChild(Input.promptStyleDOM);
			}
			Input.promptStyleDOM.innerText="input::-webkit-input-placeholder, textarea::-webkit-input-placeholder {"+"color:"+this._promptColor+"}"+"input:-moz-placeholder, textarea:-moz-placeholder {"+"color:"+this._promptColor+"}"+"input::-moz-placeholder, textarea::-moz-placeholder {"+"color:"+this._promptColor+"}"+"input:-ms-input-placeholder, textarea:-ms-input-placeholder {"+"color:"+this._promptColor+"}";
		}

		/**@private */
		__proto._focusOut=function(){
			laya.display.Input.isInputting=false;
			this._focus=false;
			this._text=null;
			this._content=this.nativeInput.value;
			if (!this._content){
				_super.prototype._$set_text.call(this,this._prompt);
				_super.prototype._$set_color.call(this,this._promptColor);
				}else {
				_super.prototype._$set_text.call(this,this._content);
				_super.prototype._$set_color.call(this,this._originColor);
			}
			Laya.stage.off("keydown",this,this._onKeyDown);
			Laya.stage.focus=null;
			this.event("blur");
			if (Render.isConchApp)this.nativeInput.blur();
			Browser.onPC && Laya.timer.clear(this,this._syncInputTransform);
		}

		/**@private */
		__proto._onKeyDown=function(e){
			if (e.keyCode===13){
				if (Browser.onMobile && !this._multiline)
					this.focus=false;
				this.event("enter");
			}
		}

		__proto.changeText=function(text){
			this._content=text;
			if (this._focus){
				this.nativeInput.value=text || '';
				this.event("change");
			}else
			_super.prototype.changeText.call(this,text);
		}

		/**@inheritDoc */
		__getset(0,__proto,'color',_super.prototype._$get_color,function(value){
			if (this._focus)
				this.nativeInput.setColor(value);
			_super.prototype._$set_color.call(this,this._content?value:this._promptColor);
			this._originColor=value;
		});

		//[Deprecated]
		__getset(0,__proto,'inputElementYAdjuster',function(){
			console.warn("deprecated: 由于即使设置了该值，在各平台和浏览器之间也不一定一致，inputElementYAdjuster已弃用。");
			return 0;
			},function(value){
			console.warn("deprecated: 由于即使设置了该值，在各平台和浏览器之间也不一定一致，inputElementYAdjuster已弃用。");
		});

		/**表示是否是多行输入框。*/
		__getset(0,__proto,'multiline',function(){
			return this._multiline;
			},function(value){
			this._multiline=value;
			this.valign=value ? "top" :"middle";
		});

		/**
		*<p>字符数量限制，默认为10000。</p>
		*<p>设置字符数量限制时，小于等于0的值将会限制字符数量为10000。</p>
		*/
		__getset(0,__proto,'maxChars',function(){
			return this._maxChars;
			},function(value){
			if (value <=0)
				value=1E5;
			this._maxChars=value;
		});

		/**@inheritDoc */
		__getset(0,__proto,'text',function(){
			if (this._focus)
				return this.nativeInput.value;
			else
			return this._content || "";
			},function(value){
			_super.prototype._$set_color.call(this,this._originColor);
			value+='';
			if (this._focus){
				this.nativeInput.value=value || '';
				this.event("change");
				}else {
				if (!this._multiline)
					value=value.replace(/\r?\n/g,'');
				this._content=value;
				if (value)
					_super.prototype._$set_text.call(this,value);
				else {
					_super.prototype._$set_text.call(this,this._prompt);
					_super.prototype._$set_color.call(this,this.promptColor);
				}
			}
		});

		/**
		*获取对输入框的引用实例。
		*/
		__getset(0,__proto,'nativeInput',function(){
			return this._multiline ? Input.area :Input.input;
		});

		/**
		*设置输入提示符。
		*/
		__getset(0,__proto,'prompt',function(){
			return this._prompt;
			},function(value){
			if (!this._text && value)
				_super.prototype._$set_color.call(this,this._promptColor);
			this.promptColor=this._promptColor;
			if (this._text)
				_super.prototype._$set_text.call(this,(this._text==this._prompt)?value:this._text);
			else
			_super.prototype._$set_text.call(this,value);
			this._prompt=Text.langPacks && Text.langPacks[value] ? Text.langPacks[value] :value;
		});

		// 因此 调用focus接口是无法都在移动平台立刻弹出键盘的
		/**
		*表示焦点是否在此实例上。
		*/
		__getset(0,__proto,'focus',function(){
			return this._focus;
			},function(value){
			var input=this.nativeInput;
			if (this._focus!==value){
				if (value){
					if (input.target){
						input.target._focusOut();
						}else {
						this._setInputMethod();
					}
					input.target=this;
					this._focusIn();
					}else {
					input.target=null;
					this._focusOut();
					input.blur();
					if (Render.isConchApp){
						input.setPos(-10000,-10000);
					}else if (Input.inputContainer.contains(input))
					Input.inputContainer.removeChild(input);
				}
			}
		});

		/**限制输入的字符。*/
		__getset(0,__proto,'restrict',function(){
			if (this._restrictPattern){
				return this._restrictPattern.source;
			}
			return "";
			},function(pattern){
			if (pattern){
				pattern="[^"+pattern+"]";
				if (pattern.indexOf("^^")>-1)
					pattern=pattern.replace("^^","");
				this._restrictPattern=new RegExp(pattern,"g");
			}else
			this._restrictPattern=null;
		});

		/**
		*是否可编辑。
		*/
		__getset(0,__proto,'editable',function(){
			return this._editable;
			},function(value){
			this._editable=value;
			if (Render.isConchApp){
				Input.input.setForbidEdit(!value);
			}
		});

		/**
		*设置输入提示符颜色。
		*/
		__getset(0,__proto,'promptColor',function(){
			return this._promptColor;
			},function(value){
			this._promptColor=value;
			if (!this._content)_super.prototype._$set_color.call(this,value);
		});

		/**
		*<p>输入框类型为Input静态常量之一。</p>
		*<ul>
		*<li>TYPE_TEXT</li>
		*<li>TYPE_PASSWORD</li>
		*<li>TYPE_EMAIL</li>
		*<li>TYPE_URL</li>
		*<li>TYPE_NUMBER</li>
		*<li>TYPE_RANGE</li>
		*<li>TYPE_DATE</li>
		*<li>TYPE_MONTH</li>
		*<li>TYPE_WEEK</li>
		*<li>TYPE_TIME</li>
		*<li>TYPE_DATE_TIME</li>
		*<li>TYPE_DATE_TIME_LOCAL</li>
		*</ul>
		*<p>平台兼容性参见http://www.w3school.com.cn/html5/html_5_form_input_types.asp。</p>
		*/
		__getset(0,__proto,'type',function(){
			return this._type;
			},function(value){
			if (value=="password")
				this._getCSSStyle().password=true;
			else
			this._getCSSStyle().password=false;
			this._type=value;
		});

		/**
		*<p>原生输入框 X 轴调整值，用来调整输入框坐标。</p>
		*<p>由于即使设置了该值，在各平台和浏览器之间也不一定一致，inputElementXAdjuster已弃用。</p>
		*@deprecated
		*/
		__getset(0,__proto,'inputElementXAdjuster',function(){
			console.warn("deprecated: 由于即使设置了该值，在各平台和浏览器之间也不一定一致，inputElementXAdjuster已弃用。");
			return 0;
			},function(value){
			console.warn("deprecated: 由于即使设置了该值，在各平台和浏览器之间也不一定一致，inputElementXAdjuster已弃用。");
		});

		//[Deprecated(replacement="Input.type")]
		__getset(0,__proto,'asPassword',function(){
			return this._getCSSStyle().password;
			},function(value){
			this._getCSSStyle().password=value;
			this._type="password";
			console.warn("deprecated: 使用type=\"password\"替代设置asPassword, asPassword将在下次重大更新时删去");
			this.isChanged=true;
		});

		Input.__init__=function(){
			Input._createInputElement();
			if (Browser.onMobile)
				Render.canvas.addEventListener(Input.IOS_IFRAME ?(Browser.onMiniGame ? "touchend" :"click"):"touchend",Input._popupInputMethod);
		}

		Input._popupInputMethod=function(e){
			if (!laya.display.Input.isInputting)return;
			var input=laya.display.Input.inputElement;
			input.focus();
		}

		Input._createInputElement=function(){
			Input._initInput(Input.area=Browser.createElement("textarea"));
			Input._initInput(Input.input=Browser.createElement("input"));
			Input.inputContainer=Browser.createElement("div");
			Input.inputContainer.style.position="absolute";
			Input.inputContainer.style.zIndex=1E5;
			Browser.container.appendChild(Input.inputContainer);
			Input.inputContainer.setPos=function (x,y){Input.inputContainer.style.left=x+'px';Input.inputContainer.style.top=y+'px';};
		}

		Input._initInput=function(input){
			var style=input.style;
			style.cssText="position:absolute;overflow:hidden;resize:none;transform-origin:0 0;-webkit-transform-origin:0 0;-moz-transform-origin:0 0;-o-transform-origin:0 0;";
			style.resize='none';
			style.backgroundColor='transparent';
			style.border='none';
			style.outline='none';
			style.zIndex=1;
			input.addEventListener('input',Input._processInputting);
			input.addEventListener('mousemove',Input._stopEvent);
			input.addEventListener('mousedown',Input._stopEvent);
			input.addEventListener('touchmove',Input._stopEvent);
			input.setFontFace=function (fontFace){input.style.fontFamily=fontFace;};
			if(!Render.isConchApp){
				input.setColor=function (color){input.style.color=color;};
				input.setFontSize=function (fontSize){input.style.fontSize=fontSize+'px';};
			}
		}

		Input._processInputting=function(e){
			var input=laya.display.Input.inputElement.target;
			if (!input)return;
			var value=laya.display.Input.inputElement.value;
			if (input._restrictPattern){
				value=value.replace(/\u2006|\x27/g,"");
				if (input._restrictPattern.test(value)){
					value=value.replace(input._restrictPattern,"");
					laya.display.Input.inputElement.value=value;
				}
			}
			input._text=value;
			input.event("input");
		}

		Input._stopEvent=function(e){
			if (e.type=='touchmove')
				e.preventDefault();
			e.stopPropagation && e.stopPropagation();
		}

		Input.TYPE_TEXT="text";
		Input.TYPE_PASSWORD="password";
		Input.TYPE_EMAIL="email";
		Input.TYPE_URL="url";
		Input.TYPE_NUMBER="number";
		Input.TYPE_RANGE="range";
		Input.TYPE_DATE="date";
		Input.TYPE_MONTH="month";
		Input.TYPE_WEEK="week";
		Input.TYPE_TIME="time";
		Input.TYPE_DATE_TIME="datetime";
		Input.TYPE_DATE_TIME_LOCAL="datetime-local";
		Input.TYPE_SEARCH="search";
		Input.input=null
		Input.area=null
		Input.inputElement=null
		Input.inputContainer=null
		Input.confirmButton=null
		Input.promptStyleDOM=null
		Input.inputHeight=45;
		Input.isInputting=false;
		Input.stageMatrix=null
		__static(Input,
		['IOS_IFRAME',function(){return this.IOS_IFRAME=(Browser.onIOS && Browser.window.top !=Browser.window.self);}
		]);
		return Input;
	})(Text)


	/**
	*@private
	*/
	//class laya.html.dom.HTMLBrElement extends laya.html.dom.HTMLElement
	var HTMLBrElement=(function(_super){
		function HTMLBrElement(){
			HTMLBrElement.__super.call(this);
			this.style.lineElement=true;
			this.style.block=true;
		}

		__class(HTMLBrElement,'laya.html.dom.HTMLBrElement',_super);
		return HTMLBrElement;
	})(HTMLElement)


	/**
	*DIV标签
	*/
	//class laya.html.dom.HTMLDivElement extends laya.html.dom.HTMLElement
	var HTMLDivElement=(function(_super){
		function HTMLDivElement(){
			this.contextHeight=NaN;
			this.contextWidth=NaN;
			HTMLDivElement.__super.call(this);
			this.style.block=true;
			this.style.lineElement=true;
			this.style.width=200;
			this.style.height=200;
			HTMLStyleElement;
		}

		__class(HTMLDivElement,'laya.html.dom.HTMLDivElement',_super);
		var __proto=HTMLDivElement.prototype;
		/**
		*追加内容，解析并对显示对象排版
		*@param text
		*/
		__proto.appendHTML=function(text){
			if (null==text)text="";
			HTMLParse.parse(this,text,this.URI);
			this.layout();
		}

		/**
		*@private
		*@param out
		*@return
		*/
		__proto._addChildsToLayout=function(out){
			var words=this._getWords();
			if (words==null && this._childs.length==0)return false;
			words && words.forEach(function(o){
				out.push(o);
			});
			var tFirstKey=true;
			for (var i=0,len=this._childs.length;i < len;i++){
				var o=this._childs[i];
				if (tFirstKey){
					tFirstKey=false;
					}else {
					out.push(null);
				}
				o._addToLayout(out)
			}
			return true;
		}

		/**
		*@private
		*@param out
		*/
		__proto._addToLayout=function(out){
			this.layout();
		}

		/**
		*@private
		*对显示内容进行排版
		*/
		__proto.layout=function(){
			this.style._type |=0x200;
			var tArray=Layout.layout(this);
			if (tArray){
				if (!this._$P.mHtmlBounds)this._set$P("mHtmlBounds",new Rectangle());
				var tRectangle=this._$P.mHtmlBounds;
				tRectangle.x=tRectangle.y=0;
				tRectangle.width=this.contextWidth=tArray[0];
				tRectangle.height=this.contextHeight=tArray[1];
				this.setBounds(tRectangle);
			}
		}

		/**
		*获取对象的高
		*/
		__getset(0,__proto,'height',function(){
			if (this._height)return this._height;
			return this.contextHeight;
		},_super.prototype._$set_height);

		/**
		*设置标签内容
		*/
		__getset(0,__proto,'innerHTML',null,function(text){
			this.destroyChildren();
			this.appendHTML(text);
		});

		/**
		*获取对象的宽
		*/
		__getset(0,__proto,'width',function(){
			if (this._width)return this._width;
			return this.contextWidth;
			},function(value){
			var changed=false;
			if (value===0){
				changed=value !=this._width;
				}else{
				changed=value !=this.width;
			}
			_super.prototype._$set_width.call(this,value);
			if(changed)
				this.layout();
		});

		return HTMLDivElement;
	})(HTMLElement)


	/**
	*@private
	*/
	//class laya.html.dom.HTMLDocument extends laya.html.dom.HTMLElement
	var HTMLDocument=(function(_super){
		function HTMLDocument(){
			this.all=new Array;
			this.styleSheets=CSSStyle.styleSheets;
			HTMLDocument.__super.call(this);
		}

		__class(HTMLDocument,'laya.html.dom.HTMLDocument',_super);
		var __proto=HTMLDocument.prototype;
		__proto.getElementById=function(id){
			return this.all[id];
		}

		__proto.setElementById=function(id,e){
			this.all[id]=e;
		}

		__static(HTMLDocument,
		['document',function(){return this.document=new HTMLDocument();}
		]);
		return HTMLDocument;
	})(HTMLElement)


	/**
	*@private
	*/
	//class laya.html.dom.HTMLImageElement extends laya.html.dom.HTMLElement
	var HTMLImageElement=(function(_super){
		function HTMLImageElement(){
			this._tex=null;
			this._url=null;
			this._renderArgs=[];
			HTMLImageElement.__super.call(this);
			this.style.block=true;
		}

		__class(HTMLImageElement,'laya.html.dom.HTMLImageElement',_super);
		var __proto=HTMLImageElement.prototype;
		__proto._addToLayout=function(out){
			!this._style.absolute && out.push(this);
		}

		__proto.render=function(context,x,y){
			if (!this._tex || !this._tex.loaded || !this._tex.loaded || this._width < 1 || this._height < 1)return;
			Stat.spriteCount++;
			this._renderArgs[0]=this._tex;
			this._renderArgs[1]=this.x;
			this._renderArgs[2]=this.y;
			this._renderArgs[3]=this.width || this._tex.width;
			this._renderArgs[4]=this.height || this._tex.height;
			context.ctx.drawTexture2(x,y,this.style.translateX,this.style.translateY,this.transform,this.style.alpha,this.style.blendMode,this._renderArgs);
		}

		__getset(0,__proto,'src',null,function(url){
			var _$this=this;
			url=this.formatURL(url);
			if (this._url==url)return;
			this._url=url;
			var tex=this._tex=Loader.getRes(url);
			if (!tex){
				this._tex=tex=new Texture();
				tex.load(url);
				Loader.cacheRes(url,tex);
			}
			function onloaded (){
				var style=_$this._style;
				if(!_$this._style)return;
				var w=style.widthed(_$this)?-1:_$this._tex.width;
				var h=style.heighted(_$this)?-1:_$this._tex.height;
				if (!style.widthed(_$this)&& _$this._width !=_$this._tex.width){
					_$this.width=_$this._tex.width;
					_$this.parent && (_$this.parent)._layoutLater();
				}
				if (!style.heighted(_$this)&& _$this._height !=_$this._tex.height){
					_$this.height=_$this._tex.height;
					_$this.parent && (_$this.parent)._layoutLater();
				}
				if (Render.isConchApp){
					_$this._renderArgs[0]=_$this._tex;
					_$this._renderArgs[1]=_$this.x;
					_$this._renderArgs[2]=_$this.y;
					_$this._renderArgs[3]=_$this.width || _$this._tex.width;
					_$this._renderArgs[4]=_$this.height || _$this._tex.height;
					_$this.graphics.drawTexture(_$this._tex,0,0,_$this._renderArgs[3],_$this._renderArgs[4]);
				}
				_$this.repaint();
				_$this.parentRepaint();
			}
			tex.loaded?onloaded():tex.on("loaded",null,onloaded);
		});

		return HTMLImageElement;
	})(HTMLElement)


	/**
	*@private
	*/
	//class laya.html.dom.HTMLStyleElement extends laya.html.dom.HTMLElement
	var HTMLStyleElement=(function(_super){
		function HTMLStyleElement(){
			HTMLStyleElement.__super.call(this);
			this.visible=false;
		}

		__class(HTMLStyleElement,'laya.html.dom.HTMLStyleElement',_super);
		var __proto=HTMLStyleElement.prototype;
		/**
		*解析样式
		*/
		__getset(0,__proto,'text',_super.prototype._$get_text,function(value){
			CSSStyle.parseCSS(value,null);
		});

		return HTMLStyleElement;
	})(HTMLElement)


	/**
	*@private
	*<p> <code>HTMLImage</code> 用于创建 HTML Image 元素。</p>
	*<p>请使用 <code>HTMLImage.create()<code>获取新实例，不要直接使用 <code>new HTMLImage<code> 。</p>
	*/
	//class laya.resource.HTMLImage extends laya.resource.FileBitmap
	var HTMLImage=(function(_super){
		function HTMLImage(src,def){
			this._recreateLock=false;
			this._needReleaseAgain=false;
			HTMLImage.__super.call(this);
			this._init_(src,def);
		}

		__class(HTMLImage,'laya.resource.HTMLImage',_super);
		var __proto=HTMLImage.prototype;
		__proto._init_=function(src,def){
			this._src=src;
			this._source=new Browser.window.Image();
			if (def){
				def.onload && (this.onload=def.onload);
				def.onerror && (this.onerror=def.onerror);
				def.onCreate && def.onCreate(this);
			}
			if (src.indexOf("data:image")!=0)this._source.crossOrigin="";
			(src)&& (this._source.src=src);
		}

		/**
		*@inheritDoc
		*/
		__proto.recreateResource=function(){
			var _$this=this;
			if (this._src==="")
				throw new Error("src no null！");
			this._needReleaseAgain=false;
			if (!this._source){
				this._recreateLock=true;
				this.startCreate();
				var _this=this;
				this._source=new Browser.window.Image();
				this._source.crossOrigin="";
				this._source.onload=function (){
					if (_this._needReleaseAgain){
						_this._needReleaseAgain=false;
						_this._source.onload=null;
						_this._source=null;
						return;
					}
					_this._source.onload=null;
					_this.memorySize=_$this._w *_$this._h *4;
					_this._recreateLock=false;
					_this.completeCreate();
				};
				this._source.src=this._src;
				}else {
				if (this._recreateLock)
					return;
				this.startCreate();
				this.memorySize=this._w *this._h *4;
				this._recreateLock=false;
				this.completeCreate();
			}
		}

		/**
		*@inheritDoc
		*/
		__proto.detoryResource=function(){
			if (this._recreateLock)
				this._needReleaseAgain=true;
			(this._source)&& (this._source=null,this.memorySize=0);
		}

		/***调整尺寸。*/
		__proto.onresize=function(){
			this._w=this._source.width;
			this._h=this._source.height;
		}

		/**
		*@inheritDoc
		*/
		__getset(0,__proto,'onload',null,function(value){
			var _$this=this;
			this._onload=value;
			this._source && (this._source.onload=this._onload !=null ? (function(){
				_$this.onresize();
				_$this._onload();
			}):null);
		});

		/**
		*@inheritDoc
		*/
		__getset(0,__proto,'onerror',null,function(value){
			var _$this=this;
			this._onerror=value;
			this._source && (this._source.onerror=this._onerror !=null ? (function(){
				_$this._onerror()
			}):null);
		});

		HTMLImage.create=function(src,def){
			return new HTMLImage(src,def);
		}

		return HTMLImage;
	})(FileBitmap)


	//class laya.webgl.shader.d2.Shader2X extends laya.webgl.shader.Shader
	var Shader2X=(function(_super){
		function Shader2X(vs,ps,saveName,nameMap){
			this._params2dQuick1=null;
			this._params2dQuick2=null;
			this._shaderValueWidth=NaN;
			this._shaderValueHeight=NaN;
			Shader2X.__super.call(this,vs,ps,saveName,nameMap);
		}

		__class(Shader2X,'laya.webgl.shader.d2.Shader2X',_super);
		var __proto=Shader2X.prototype;
		__proto.upload2dQuick1=function(shaderValue){
			this.upload(shaderValue,this._params2dQuick1 || this._make2dQuick1());
		}

		__proto._make2dQuick1=function(){
			if (!this._params2dQuick1){
				this.activeResource();
				this._params2dQuick1=[];
				var params=this._params,one;
				for (var i=0,n=params.length;i < n;i++){
					one=params[i];
					if (!Render.isFlash && (one.name==="size" || one.name==="position" || one.name==="texcoord"))continue ;
					this._params2dQuick1.push(one);
				}
			}
			return this._params2dQuick1;
		}

		__proto.detoryResource=function(){
			_super.prototype.detoryResource.call(this);
			this._params2dQuick1=null;
			this._params2dQuick2=null;
		}

		__proto.upload2dQuick2=function(shaderValue){
			this.upload(shaderValue,this._params2dQuick2 || this._make2dQuick2());
		}

		__proto._make2dQuick2=function(){
			if (!this._params2dQuick2){
				this.activeResource();
				this._params2dQuick2=[];
				var params=this._params,one;
				for (var i=0,n=params.length;i < n;i++){
					one=params[i];
					if (!Render.isFlash && (one.name==="size"))continue ;
					this._params2dQuick2.push(one);
				}
			}
			return this._params2dQuick2;
		}

		Shader2X.create=function(vs,ps,saveName,nameMap){
			return new Shader2X(vs,ps,saveName,nameMap);
		}

		return Shader2X;
	})(Shader)


	//class laya.webgl.utils.IndexBuffer2D extends laya.webgl.utils.Buffer2D
	var IndexBuffer2D=(function(_super){
		function IndexBuffer2D(bufferUsage){
			this._uint8Array=null;
			this._uint16Array=null;
			(bufferUsage===void 0)&& (bufferUsage=0x88E4);
			IndexBuffer2D.__super.call(this);
			this._bufferUsage=bufferUsage;
			this._bufferType=0x8893;
			Render.isFlash || (this._buffer=new ArrayBuffer(8));
		}

		__class(IndexBuffer2D,'laya.webgl.utils.IndexBuffer2D',_super);
		var __proto=IndexBuffer2D.prototype;
		__proto._checkArrayUse=function(){
			this._uint8Array && (this._uint8Array=new Uint8Array(this._buffer));
			this._uint16Array && (this._uint16Array=new Uint16Array(this._buffer));
		}

		__proto.getUint8Array=function(){
			return this._uint8Array || (this._uint8Array=new Uint8Array(this._buffer));
		}

		__proto.getUint16Array=function(){
			return this._uint16Array || (this._uint16Array=new Uint16Array(this._buffer));
		}

		__proto.destory=function(){
			this._uint16Array=null;
			this._uint8Array=null;
			this._buffer=null;
		}

		IndexBuffer2D.QuadrangleIB=null
		IndexBuffer2D.create=function(bufferUsage){
			(bufferUsage===void 0)&& (bufferUsage=0x88E4);
			return new IndexBuffer2D(bufferUsage);
		}

		return IndexBuffer2D;
	})(Buffer2D)


	//class laya.webgl.utils.VertexBuffer2D extends laya.webgl.utils.Buffer2D
	var VertexBuffer2D=(function(_super){
		function VertexBuffer2D(vertexStride,bufferUsage){
			this._floatArray32=null;
			this._vertexStride=0;
			VertexBuffer2D.__super.call(this);
			this._vertexStride=vertexStride;
			this._bufferUsage=bufferUsage;
			this._bufferType=0x8892;
			Render.isFlash || (this._buffer=new ArrayBuffer(8));
			this._glBuffer=Buffer._gl.createBuffer();
			this.getFloat32Array();
		}

		__class(VertexBuffer2D,'laya.webgl.utils.VertexBuffer2D',_super);
		var __proto=VertexBuffer2D.prototype;
		__proto.getFloat32Array=function(){
			return this._floatArray32 || (this._floatArray32=new Float32Array(this._buffer));
		}

		__proto.bind=function(ibBuffer){
			(ibBuffer)&& (ibBuffer._bind());
			this._bind();
		}

		__proto.insertData=function(data,pos){
			var vbdata=this.getFloat32Array();
			vbdata.set(data,pos);
			this._upload=true;
		}

		__proto.bind_upload=function(ibBuffer){
			(ibBuffer._bind_upload())|| (ibBuffer._bind());
			(this._bind_upload())|| (this._bind());
		}

		__proto._checkArrayUse=function(){
			this._floatArray32 && (this._floatArray32=new Float32Array(this._buffer));
		}

		__proto.detoryResource=function(){
			_super.prototype.detoryResource.call(this);
			for (var i=0;i < 10;i++)
			WebGL.mainContext.disableVertexAttribArray(i);
		}

		//}
		__proto.destory=function(){
			this._byteLength=0;
			this._upload=true;
			this._buffer=null;
			this._floatArray32=null;
		}

		__getset(0,__proto,'vertexStride',function(){
			return this._vertexStride;
		});

		VertexBuffer2D.create=function(vertexStride,bufferUsage){
			(bufferUsage===void 0)&& (bufferUsage=0x88E8);
			return new VertexBuffer2D(vertexStride,bufferUsage);
		}

		return VertexBuffer2D;
	})(Buffer2D)


	/**
	*...
	*@author luohuantao
	*/
	//class engine.SnowAnimation extends laya.display.Animation
	var SnowAnimation=(function(_super){
		function SnowAnimation(){
			this.isSendSnowBall=false;
			SnowAnimation.__super.call(this);
		}

		__class(SnowAnimation,'engine.SnowAnimation',_super);
		var __proto=SnowAnimation.prototype;
		/**@private */
		__proto._displayToIndex=function(value){
			if (this._frames){
				this.isSendSnowBall && this.event("SnowAnimation_snowBall",value);
				this.graphics=this._frames[value];
			}
		}

		SnowAnimation.snowBall="SnowAnimation_snowBall";
		return SnowAnimation;
	})(Animation)


	/**
	*按钮缩放扩展组件I
	*@author xiaosong
	*@date-2017-03-21
	*/
	//class laya.customUI.ButtonScaleI extends laya.ui.Button
	var ButtonScaleI=(function(_super){
		function ButtonScaleI(skin,label){
			this.soundType=0;
			this.scaleDownTime=100;
			this.scaleUpTime=200;
			this.bIsMove=false;
			(label===void 0)&& (label="");
			ButtonScaleI.__super.call(this,skin,label);
			this.initEvent();
		}

		__class(ButtonScaleI,'laya.customUI.ButtonScaleI',_super);
		var __proto=ButtonScaleI.prototype;
		/**初始化事件**/
		__proto.initEvent=function(){
			this.on("mousedown",this,this.scaleSmall);
			this.on("mouseup",this,this.scaleBig);
			this.on("mouseout",this,this.scaleBig);
		}

		/**鼠标按下缩放效果**/
		__proto.scaleSmall=function(){
			if(this.bIsMove)return;
			this.bIsMove=true;
			var str;
			this.soundType !=0 &&(str=ConfigData.soundCfg[this.soundType])&&SoundManager.playSound(str,1);
			Tween.to(this,{scaleX:1.08,scaleY:1.08},this.scaleDownTime);
		}

		/**鼠标抬起放大恢复效果**/
		__proto.scaleBig=function(){
			var _$this=this;
			Tween.to(this,{scaleX:1,scaleY:1},this.scaleUpTime,ButtonScaleI.backOut,Handler.create(this,function(){
				_$this.bIsMove=false;
			}));
		}

		ButtonScaleI.backOut=function(t,b,c,d,s){
			(s===void 0)&& (s=10);
			return c *((t=t / d-1)*t *((s+1)*t+s)+1)+b;
		}

		return ButtonScaleI;
	})(Button)


	/**
	*<code>ViewStack</code> 类用于视图堆栈类，用于视图的显示等设置处理。
	*/
	//class laya.ui.ViewStack extends laya.ui.Box
	var ViewStack=(function(_super){
		function ViewStack(){
			this._items=null;
			this._selectedIndex=0;
			ViewStack.__super.call(this);
			this._setIndexHandler=Handler.create(this,this.setIndex,null,false);
		}

		__class(ViewStack,'laya.ui.ViewStack',_super);
		var __proto=ViewStack.prototype;
		Laya.imps(__proto,{"laya.ui.IItem":true})
		/**
		*批量设置视图对象。
		*@param views 视图对象数组。
		*/
		__proto.setItems=function(views){
			this.removeChildren();
			var index=0;
			for (var i=0,n=views.length;i < n;i++){
				var item=views[i];
				if (item){
					item.name="item"+index;
					this.addChild(item);
					index++;
				}
			}
			this.initItems();
		}

		/**
		*添加视图。
		*@internal 添加视图对象，并设置此视图对象的<code>name</code> 属性。
		*@param view 需要添加的视图对象。
		*/
		__proto.addItem=function(view){
			view.name="item"+this._items.length;
			this.addChild(view);
			this.initItems();
		}

		/**
		*初始化视图对象集合。
		*/
		__proto.initItems=function(){
			this._items=[];
			for (var i=0;i < 10000;i++){
				var item=this.getChildByName("item"+i);
				if (item==null){
					break ;
				}
				this._items.push(item);
				item.visible=(i==this._selectedIndex);
			}
		}

		/**
		*@private
		*通过对象的索引设置项对象的 <code>selected</code> 属性值。
		*@param index 需要设置的对象的索引。
		*@param selected 表示对象的选中状态。
		*/
		__proto.setSelect=function(index,selected){
			if (this._items && index >-1 && index < this._items.length){
				this._items[index].visible=selected;
			}
		}

		/**
		*@private
		*设置属性<code>selectedIndex</code>的值。
		*@param index 选中项索引值。
		*/
		__proto.setIndex=function(index){
			this.selectedIndex=index;
		}

		/**@inheritDoc */
		__getset(0,__proto,'dataSource',_super.prototype._$get_dataSource,function(value){
			this._dataSource=value;
			if (((typeof value=='number')&& Math.floor(value)==value)|| (typeof value=='string')){
				this.selectedIndex=parseInt(value);
				}else {
				for (var prop in this._dataSource){
					if (this.hasOwnProperty(prop)){
						this[prop]=this._dataSource[prop];
					}
				}
			}
		});

		/**
		*表示当前视图索引。
		*/
		__getset(0,__proto,'selectedIndex',function(){
			return this._selectedIndex;
			},function(value){
			if (this._selectedIndex !=value){
				this.setSelect(this._selectedIndex,false);
				this._selectedIndex=value;
				this.setSelect(this._selectedIndex,true);
			}
		});

		/**
		*获取或设置当前选择的项对象。
		*/
		__getset(0,__proto,'selection',function(){
			return this._selectedIndex >-1 && this._selectedIndex < this._items.length ? this._items[this._selectedIndex] :null;
			},function(value){
			this.selectedIndex=this._items.indexOf(value);
		});

		/**
		*视图集合数组。
		*/
		__getset(0,__proto,'items',function(){
			return this._items;
		});

		/**
		*索引设置处理器。
		*<p>默认回调参数：index:int</p>
		*/
		__getset(0,__proto,'setIndexHandler',function(){
			return this._setIndexHandler;
			},function(value){
			this._setIndexHandler=value;
		});

		return ViewStack;
	})(Box)


	/**
	*...
	*@author
	*/
	//class laya8.client.player.attackCircle.DoubleCircle extends laya.ui.Image
	var DoubleCircle=(function(_super){
		function DoubleCircle(skin){
			this.attackCtrl=null;
			this.lv=1;
			this.disRateValue=1;
			this.currentDisrate=1;
			this.curScale=1;
			this.scaleValue=1;
			this.obj=null;
			this.bottomCircle=null;
			this._rotation=0;
			this.r=0;
			this.midx=-1000;
			this.midy=-1000;
			this._sx=1;
			this._sy=1;
			this.lv1=1;
			DoubleCircle.__super.call(this);
			this.skin="gaming/dilei_quan.png";
			this.pivot(this.width / 2,this.height / 2);
		}

		__class(DoubleCircle,'laya8.client.player.attackCircle.DoubleCircle',_super);
		var __proto=DoubleCircle.prototype;
		Laya.imps(__proto,{"laya8.client.player.attackCircle.ICircle":true})
		/*INTERFACE laya8.client.player.attackCircle.ICircle */
		__proto.update=function(){
			console.log(">>>>>>>>>>doubleCircle update"+this.visible);this.attackCtrl=this.attackCtrl|| GamingView.I.gameCtrl.attackCtrl;
			var newR=this.attackCtrl.getRadiu();
			if (newR !=this.r){
				this.r=newR;
				this.change();
			};
			var speed=0.002;
			var dscale=this.scaleValue-this.curScale;
			if (Math.abs(dscale)> speed){
				this.curScale+=(dscale > 0?speed:-speed);
				laya.display.Sprite.prototype.scale.call(this,this.curScale,this.curScale);
			};
			var drate=this.disRateValue-this.currentDisrate;
			if (Math.abs(drate)> speed){
				this.currentDisrate+=(drate > 0?speed:-speed);
				this.bottomCircle && this.bottomCircle.scale(this.lv1*this.currentDisrate,this.lv1*this.currentDisrate);
				this.change();
			}
		}

		__proto.init=function(){}
		__proto.appendTo=function(obj){
			this.clear();
			if (!this.bottomCircle){
				this.bottomCircle=new Image();
				this.bottomCircle.skin="gaming/bcircle.png";
				this.bottomCircle.pivot(this.bottomCircle.width / 2,this.bottomCircle.height / 2);
			}
			this.alpha=1;
			Player.I.roleForeLayer.addChild(this);
			Player.I.roleBackLayer.addChild(this.bottomCircle);
			var d=obj.circleRadio *2;
			this.lv=obj.maxdistance / 120;
			this.lv1=obj.maxdistance / 105;
			this.bottomCircle.scale(this.lv1 *this.currentDisrate ,this.lv1*this.currentDisrate);
			this.bottomCircle.pos(this.midx,this.midy+20);
			laya.display.Sprite.prototype.scale.call(this,d / 148,d / 148);
			this.curScale=this.scaleValue=d / 148;
			this.obj=obj;
		}

		__proto.clear=function(){
			this.removeSelf();
			this.bottomCircle&&this.bottomCircle.removeSelf();
			this.currentDisrate=this.curScale=this.scaleValue=this.disRateValue=1;
		}

		__proto.change=function(){
			var angle=this._rotation *0.017453292519943295;
			var rr=this.r *this.lv*this.currentDisrate;
			var dx=Math.cos(angle)*rr;
			var dy=Math.sin(angle)*rr;
			this._x=this.midx+dx;
			this._y=this.midy+dy;
		}

		//dileiQuan.y=_y+displayHeight / 2+dy;
		__proto.pos=function(x,y,speedMode){
			(speedMode===void 0)&& (speedMode=false);
			this.midx=x;
			this.midy=y;
			this.bottomCircle&&this.bottomCircle.pos(this.midx,this.midy+20);
			this.change();
			return this;
		}

		__proto.scale=function(scaleX,scaleY,speedMode){
			(speedMode===void 0)&& (speedMode=false);
			this._sx=scaleX;
			this._sy=scaleY;
			return this;
		}

		/*INTERFACE laya8.client.player.attackCircle.ICircle */
		__proto.changeState=function(type){}
		/*INTERFACE laya8.client.player.attackCircle.ICircle */
		__proto.getRadius=function(){
			return this.r *this.lv*this.currentDisrate;
		}

		/*INTERFACE laya8.client.player.attackCircle.ICircle */
		__proto.setPanScale=function(value){
			var d=this.obj.circleRadio *2*value;
			this.scaleValue=d / 148;
		}

		/*INTERFACE laya8.client.player.attackCircle.ICircle */
		__proto.setDisScale=function(value){
			this.disRateValue=value;
		}

		__getset(0,__proto,'width',_super.prototype._$get_width,function(value){
		});

		__getset(0,__proto,'x',function(){
			return this.midx;
		},_super.prototype._$set_x);

		__getset(0,__proto,'rotation',function(){
			return this._rotation;
			},function(value){
			this._rotation=value;
			this.change();
		});

		__getset(0,__proto,'y',function(){
			return this.midy;
		},_super.prototype._$set_y);

		__getset(0,__proto,'scaleX',function(){
			return this._sx;
		},_super.prototype._$set_scaleX);

		__getset(0,__proto,'scaleY',function(){
			return this._sy;
		},_super.prototype._$set_scaleY);

		DoubleCircle.R=148;
		__static(DoubleCircle,
		['DEFAULT',function(){return this.DEFAULT=new DoubleCircle();}
		]);
		return DoubleCircle;
	})(Image)


	/**
	*...
	*@author
	*/
	//class laya8.client.player.attackCircle.JuJiCircle extends laya.ui.Image
	var JuJiCircle=(function(_super){
		function JuJiCircle(skin){
			JuJiCircle.__super.call(this,skin);
			this.size(1000,80);
			this.sizeGrid="0,90,0,90";
			this.pivot(0,this.height / 2);
			_super.prototype._$set_width.call(this,1000);
		}

		__class(JuJiCircle,'laya8.client.player.attackCircle.JuJiCircle',_super);
		var __proto=JuJiCircle.prototype;
		Laya.imps(__proto,{"laya8.client.player.attackCircle.ICircle":true})
		/*INTERFACE laya8.client.player.attackCircle.ICircle */
		__proto.update=function(){}
		__proto.init=function(){}
		//size(1000,80);
		__proto.appendTo=function(obj){
			this.clear();
			Player.curUser && Player.curUser.setCanMove(false,0x1);
			this.alpha=1;
			Player.I.roleForeLayer.addChild(this);
		}

		__proto.clear=function(){
			this.removeSelf();
			Player.curUser && Player.curUser.setCanMove(true,0x1);
		}

		__proto.changeState=function(type){}
		//super.width=value;
		__proto.getRadius=function(){
			return 0;
		}

		/*INTERFACE laya8.client.player.attackCircle.ICircle */
		__proto.setPanScale=function(value){}
		/*INTERFACE laya8.client.player.attackCircle.ICircle */
		__proto.setDisScale=function(value){}
		__getset(0,__proto,'width',_super.prototype._$get_width,function(value){
		});

		__static(JuJiCircle,
		['DEFAULT',function(){return this.DEFAULT=new JuJiCircle("gaming/mz.png");}
		]);
		return JuJiCircle;
	})(Image)


	/**
	*attack
	*@author
	*/
	//class laya8.client.player.attackCircle.NormalCircle extends laya.ui.Image
	var NormalCircle=(function(_super){
		function NormalCircle(skin){
			NormalCircle.__super.call(this,skin);
			this.pivot(-48,58 / 2);
		}

		__class(NormalCircle,'laya8.client.player.attackCircle.NormalCircle',_super);
		var __proto=NormalCircle.prototype;
		Laya.imps(__proto,{"laya8.client.player.attackCircle.ICircle":true})
		/*INTERFACE laya8.client.player.attackCircle.ICircle */
		__proto.update=function(){}
		__proto.init=function(){}
		__proto.appendTo=function(obj){
			this.clear();
			this.alpha=1;
			Player.I.roleForeLayer.addChild(this);
		}

		__proto.clear=function(){
			this.removeSelf();
		}

		/*INTERFACE laya8.client.player.attackCircle.ICircle */
		__proto.changeState=function(type){
			if (type==1){
				this.skin=ConfigData.sourcesView["quan"][1];
			}
			else if(type==2){
				this.skin=ConfigData.sourcesView["quan"][4];
			}
		}

		/*INTERFACE laya8.client.player.attackCircle.ICircle */
		__proto.getRadius=function(){
			return 0;
		}

		/*INTERFACE laya8.client.player.attackCircle.ICircle */
		__proto.setPanScale=function(value){}
		/*INTERFACE laya8.client.player.attackCircle.ICircle */
		__proto.setDisScale=function(value){}
		__static(NormalCircle,
		['DEFAULT',function(){return this.DEFAULT=new NormalCircle();}
		]);
		return NormalCircle;
	})(Image)


	/**
	*...
	*@author
	*/
	//class laya8.client.player.attackCircle.XuliCircle extends laya.ui.Image
	var XuliCircle=(function(_super){
		function XuliCircle(skin){
			XuliCircle.__super.call(this,skin);
			this.size(300,100);
			this.sizeGrid="0,90,0,90";
			this.pivot(0,this.height/2);
		}

		__class(XuliCircle,'laya8.client.player.attackCircle.XuliCircle',_super);
		var __proto=XuliCircle.prototype;
		Laya.imps(__proto,{"laya8.client.player.attackCircle.ICircle":true})
		/*INTERFACE laya8.client.player.attackCircle.ICircle */
		__proto.update=function(){}
		__proto.init=function(){}
		__proto.appendTo=function(obj){
			this.clear();
			this.alpha=1;
			Player.I.roleForeLayer.addChild(this);
		}

		__proto.clear=function(){
			this.removeSelf();
		}

		/*INTERFACE laya8.client.player.attackCircle.ICircle */
		__proto.changeState=function(type){}
		/*INTERFACE laya8.client.player.attackCircle.ICircle */
		__proto.getRadius=function(){
			return 0;
		}

		/*INTERFACE laya8.client.player.attackCircle.ICircle */
		__proto.setPanScale=function(value){}
		/*INTERFACE laya8.client.player.attackCircle.ICircle */
		__proto.setDisScale=function(value){}
		__getset(0,__proto,'width',_super.prototype._$get_width,function(value){
			if (value < 180)value=180;
			_super.prototype._$set_width.call(this,value);
		});

		__static(XuliCircle,
		['DEFAULT',function(){return this.DEFAULT=new XuliCircle("gaming/mz.png");}
		]);
		return XuliCircle;
	})(Image)


	/**
	*基于render运行的动画，节点停止渲染的时候，自动停止播放
	*@author yung
	*/
	//class laya8.client.player.game.RenderAnimation extends laya.display.Animation
	var RenderAnimation=(function(_super){
		function RenderAnimation(){
			this._lastTime=NaN;
			RenderAnimation.__super.call(this);
		}

		__class(RenderAnimation,'laya8.client.player.game.RenderAnimation',_super);
		var __proto=RenderAnimation.prototype;
		__proto.play=function(start,loop,name){
			(start===void 0)&& (start=0);
			(loop===void 0)&& (loop=true);
			(name===void 0)&& (name="");
			if (loop){
				if (name)this._setFramesFromCache(name);
				this._isPlaying=true;
				this.index=((typeof start=='string'))? this._getFrameByLabel(start):start;
				this.loop=loop;
				this._actionName=name;
				this._isReverse=this.wrapMode==1;
				this._lastTime=Laya.timer.currTimer;
				}else {
				_super.prototype.play.call(this,start,loop,name);
			}
		}

		__proto.render=function(context,x,y){
			if (this.loop){
				var timeOut=(Laya.timer.currTimer-this._lastTime)>=this._interval;
				if (timeOut){
					this._lastTime=Laya.timer.currTimer;
					this._frameLoop();
				}
			}
			laya.display.Sprite.prototype.render.call(this,context,x,y);
		}

		return RenderAnimation;
	})(Animation)


	/**
	*...
	*@author lisa
	*/
	//class laya8.client.player.game.ActorObject extends laya8.client.player.game.RoleObject
	var ActorObject=(function(_super){
		var voSnowBallCfgItem;
		function ActorObject(uid){
			this.ziBaoDjs=0;
			this.ziBaoStart=0;
			this._xuliEff=null;
			this.canRotate=true;
			this.userTopView=null;
			this.userName=null;
			this.userNameW=NaN;
			this.userNameH=NaN;
			this.teamIconUrl=null;
			this.isBeMove=false;
			this._attackTime=NaN;
			this._isXuliAttack=false;
			this.loopCount=0;
			this.nNotCanMove=0;
			this.canAttack=true;
			this.attackCircle=null;
			this.killNum=0;
			this.talkCmd=null;
			this.propZd=false;
			this.skillindex=-1;
			this.hasFallSkill=false;
			this.skillIds=[0,0,0];
			this.isHavePet=false;
			this.aniBool=false;
			this.bindJt=null;
			this.bindJtDh=null;
			this.heroLv=NaN;
			this.lv=0;
			this.lv1=0;
			this.curLevel=0;
			this.snowFlag=false;
			this.iceImage=null;
			this._isChgRabbit=false;
			this._teamNameText=null;
			this.shortName=null;
			this._myTitle="";
			this._preTime=0;
			this.createTailTime=300;
			this._suoyingPreTime=0;
			this.suoyingJianGe=200;
			this._yzdir=-0.1;
			this.currentScale=NaN;
			this.changeScale=NaN;
			this._preTmStep=0;
			this.bloodpretime=0;
			this.gantan=null;
			this.curS=1;
			this.animePath=null;
			this.dieBody=null;
			this.beatUrl="res/effect/beatImg.png";
			this.dieUrl="res/effect/dieImg.png";
			this.canGoNext=false;
			this.eatSnowEff=null;
			this.isEatSnow=false;
			this.isEatGem=false;
			this._beHitAni=null;
			this.cdTimes=1;
			this._isBeHitShake=false;
			this._curShakeNum=NaN;
			this._startBeHitTimer=NaN;
			this.btnXuliEff=null;
			this._skillShieldEff=null;
			this.isSnow=false;
			this.snows=null;
			this.dileiQuan=null;
			this.preDiLeilen=NaN;
			this._tempNum=-1;
			this.toushe=null;
			this.preBalllen=NaN;
			this.iceBox_eff=null;
			this.huzhaoEff=null;
			this._lockMeAiNum=0;
			this.moveEdge=false;
			this._callBack=null;
			this._callBackTarget=null;
			this.preTouchId=0;
			this.currentScore=0;
			this.newScore=0;
			this.maxImage=null;
			this._xuliLevel=0;
			this.moveShadowEff=null;
			this.frameRate=0.36;
			this.pet=new PetData();
			this.djImage=new Image;
			this.headImage=new Image;
			this.petSp=new Sprite;
			this.pTween=new Tween();
			this.pTween2=new Tween();
			this._lockMeAi=__newvec(2,null);
			ActorObject.__super.call(this,uid);
			this._inview=false;
			this.userTopView=new UserTopView();
			this.addChild(this.userTopView);
		}

		__class(ActorObject,'laya8.client.player.game.ActorObject',_super);
		var __proto=ActorObject.prototype;
		Laya.imps(__proto,{"laya8.client.player.game.IDynamicMove":true})
		__proto.setCanMove=function(b,type){
			if (!b){
				this.nNotCanMove |=type;
			}
			else{
				this.nNotCanMove &=~type;
			}
		}

		/**
		*显示气泡在自己头上
		*@param s 显示的内容用的是div
		*@param time 持续时间 默认4秒
		*/
		__proto.showQiPao=function(s,time,soundId){
			(time===void 0)&& (time=4000);
			(soundId===void 0)&& (soundId=-1);
			Player.I.helpTips && Player.I.helpTips.setTips(s,soundId,time,false);
		}

		//HotPanelItem.createQiPao(s,time);
		__proto.clearQiPao=function(){}
		/**
		*立刻发消息
		*/
		__proto.moveRightNow=function(point){
			this.x=Math.round(point.x);
			this.y=Math.round(point.y);
			if (this.self==0){
				GamingView.I.gameCtrl._sendMove();
			}
		}

		__proto.setHgIcon=function(obj){
			this.userTopView.setGoldenIcon(obj);
		}

		/**
		*隐藏头顶信息
		*/
		__proto.hideUserTop=function(){
			this.userTopView.hide();
		}

		/**
		*显示头顶信息
		*/
		__proto.showUserTop=function(){
			this.userTopView.show();
		}

		/**
		*显示对象
		*@param sourceID
		*/
		__proto.createView=function(sourceID,group){
			this.hasPath=true;
			this.isDie=false;
			this.isHide=false;
			this.alpha=1;
			this._sourceID=sourceID;
			this.isInvincible=true;
			if (this.invincibleTime > 0)Laya.timer.once(this.invincibleTime,this,this.endInvincible);
			else this.endInvincible();
			var key="RoleAni:"+sourceID;
			var aniPool=Pool.getItem(key);
			if (!aniPool){
				this._roleImg=new Image("res/role/default.png");
				this.addChild(this._roleImg);
			}
			this._anime=aniPool || SourceLib.newWithLib(null,sourceID,2,group);
			this._anime.poolID=key;
			this._animeWidth=this._anime.width;
			this._animeHeight=this._anime.height;
			ActorObject._animeArr=ActorObject._animeArr1;
			this._anime.pivot(this._animeWidth / 2,this._animeHeight);
			if (this._animeWidth==120){
				this._anime.pos(this.width / 2,this.height+15);
			}
			else{
				this._anime.pos(this.width / 2,this.height);
			}
			this._anime.loadData(Handler.create(this,this.createAnimation));
			this._anime.visible=true;
			this.attackCircle && this.attackCircle.setVisible(false);
			if (this.self==0){
				this._inview=true;
				this.addAttackGuanQuan();
				Collision.rectClipPoint(this.__WW *this.scaleX,1 / 3 *this.__HH *this.scaleY,32);
			}
			this.nNotCanMove=0;
			this.canRotate=true;
			SnowLoad.I.load(ActorObject._createView_resArr);
		}

		/**
		*改变皮肤
		*@param itemID 需要改变的皮肤的id
		*@param noShowAtkBtn 如果是自己的话，是否隐藏攻击按钮 true-显示，false-隐藏
		*@param isall 如果是自己的话，是否全部隐藏攻击按钮
		*<br> 是否全部显示\隐藏-false时，则不对 skill3 技能槽进行操作
		*/
		__proto.changeSkin=function(itemID,noShowAtkBtn,isall){
			var cfg=ConfigData.roleData[itemID];
			this._isChgRabbit=false;
			if (this.self==0){
				GamingView.I.showAttackButton(noShowAtkBtn,isall);
				if (itemID==100011){
					this.canRotate=false;
					this.attackCircle.setAlpha(0);
				}
				else if (itemID==16){
					this.attackCircle.setAlpha(0);
				}
				else{
					this.attackCircle.setAlpha(1);
				}
			}
			if (itemID==100011){
				this._anime.play(0,false,"standDown0"+this._roleCfg.sourceID);
				this._anime.stop();
				!this.iceImage && (this.iceImage=new Image());
				this.iceImage.skin="res/role/bstx.png";
				this.iceImage.width=this._anime.width;
				this.iceImage.height=this._anime.height;
				this.iceImage.pivot(this._anime.width / 2,this._anime.height);
				this.iceImage.pos(this._anime.x,this._anime.y);
				this.addChild(this.iceImage);
				this.snowFlag=true;
				this.setCanMove(false,0x2);
				return;
			}
			else if (itemID==16){
				this._isChgRabbit=!noShowAtkBtn;
			}
			cfg && (this._sourceID=cfg.sourceID);
			this.playAnime(this.aniBool);
		}

		__proto.resetSnow=function(){
			if (this.self==0){
				GamingView.I.showAttackButton(true,true);
				this.canRotate=true;
				this.attackCircle.setAlpha(1);
			}
			this.snowFlag=false;
			this.setCanMove(true,0x2);
			this.iceImage && this.iceImage.removeSelf();
		}

		/**
		*使用技能成功
		*@param skillid 技能\道具 id-叫法不一样，对应技能表id 即可
		*@param state 1 道具状态开始 0 道具状态结束
		*/
		__proto.onUseSkill=function(skillid,state){
			var skid=skillid % 1000000;
			if (skid==250001){
				if (state==1){
					if (this._uid==Player.curUID)GamingView.I.showSnowOctopusEff();
				}
				else{
				}
			}
			else if (skid==4){
				if (state==1)
					this.changeSkin(100011,true,true);
				else
				this.resetSnow();
			}
			else if (skid==3){
				if (state==1){
					this.addShieldEff();
				}
				else{
					this.removeShieldEff();
				}
			}
			else if (skid==7){
				this.userTopView.sx_alpha=1;
				if (state==1){
					this.isHavePet=true;
					this.pet.sendAtkTime=this.timer.currTimer;
					this.pet.isBorn=true;
				}
				else{
					this.isHavePet=false;
					this.pet.isBorn=false;
				}
			}
		}

		//Log_Test.error("隐藏宠物");
		__proto.scale1=function(scaleX,scaleY,speedMode){
			(speedMode===void 0)&& (speedMode=false);
			var roledy=Math.round(2 / 3 *this.__HH *this.scaleY);
			var rolew=Math.round(this.__WW *this.scaleX);
			var roleh=Math.round(1 / 3 *this.__HH *this.scaleY);
			var src=[[this.x,this.y+roledy],[this.x+rolew,this.y+roledy],[this.x,this.y+this.__HH *this.scaleY],[this.x+rolew,this.y+this.__HH *this.scaleY]];
			this.scale(scaleX,scaleY,speedMode);
			roledy=Math.round(2 / 3 *this.__HH *this.scaleY);
			rolew=Math.round(this.__WW *this.scaleX);
			roleh=Math.round(1 / 3 *this.__HH *this.scaleY);
			var desc=[[this.x,this.y+roledy],[this.x+rolew,this.y+roledy],[this.x,this.y+this.__HH *this.scaleY],[this.x+rolew,this.y+this.__HH *this.scaleY]];
			var s=Collision.I.chgRect(src,desc);
			Collision.rectClipPoint(rolew,roleh,32);
			if (s.x !=0 || s.y !=0){
				this.x-=s.x;
				this.y-=s.y;
				GamingView.I.gameCtrl._sendMove();
			}
			return this;
		}

		/**
		*创建名称文本
		*/
		__proto.createNameText=function(name){
			this.userName=name;
			this.shortName=SnowUtils.cutString(name,12);
			var s=RunDriver.measureText(name,"bold 16px simHei");
			this.userNameW=s.width;
			this.userNameH=s.height || 16;
			this.userTopView.start();
			this.userTopView.show();
		}

		__proto.changeTitle=function(value){
			this._myTitle=value;
			this.userTopView && this.userTopView.initTitle(value);
		}

		__proto.scaleChg=function(){
			var sx=this.scaleX;
			var sy=this.scaleY;
			this.scaleChgExt(sx,sy);
			(this.aniInvincible && this.aniInvincible.parent)&& this.aniInvincible.scale(sx,sy,true);
			(this._skillShieldEff && this._skillShieldEff.parent)&& this._skillShieldEff.scale(sx,sy,true);
			this.attackCircle && this.attackCircle.scaleChg(sx,sy);
			(this._yunXingxing && this._yunXingxing.parent)&& this._yunXingxing.scale(sx,sy,true);
			(this.eatSnowEff && this.eatSnowEff.parent)&& this.eatSnowEff.scale(sx,sy,true);
			for (var i=0,n=this._fllowSp.length;i < n;i++){
				var t=this._fllowSp [i];
				if (t&&t.vo&&!(t).ns){
					var val=sx *t.vo._scale;
					t.scale(val,val);
				}
			}
		}

		__proto._setTextPos=function(){
			var midX=this._x+this.displayWidth / 2;
			var midY=this._y+this.displayHeight / 2;
			this._setTextPosExt(midX,midY);
			(this.aniInvincible && this.aniInvincible.parent)&& this.aniInvincible._setXY(midX,midY);
			(this._skillShieldEff && this._skillShieldEff.parent)&& this._skillShieldEff._setXY(midX,midY);
			this.attackCircle && this.attackCircle.setPos(midX,midY);
			(this.toushe && this.toushe.parent)&& this.toushe._setXY(midX,midY);
			(this.gantan && this.gantan.parent)&& this.gantan._setXY(midX,this._y-50 *this.scaleX);
			(this._yunXingxing && this._yunXingxing.parent)&& this._yunXingxing._setXY(midX,this._y);
			if (this.eatSnowEff && this.eatSnowEff.parent)
				this.eatSnowEff._setXY(midX-(this.eatSnowEff.width / 2)*this.eatSnowEff.scaleX,midY-(this.eatSnowEff.height / 2+15)*this.eatSnowEff.scaleY);
		}

		/**
		*脚底光圈
		*@param isShowOther 是否显示其他人/其他队伍的脚底光圈， 默认false(不现实)
		*/
		__proto.addAttackGuanQuan=function(isShowOther){
			(isShowOther===void 0)&& (isShowOther=false);
			this.attackCircle=this.attackCircle|| new AttackCircle();
			this.attackCircle.init(0,null);
			this._bSetTextPos=true;
		}

		/**移除敌人脚底红圈*/
		__proto.removeGuanQua=function(){}
		//protected var twwen:Tween;
		__proto.showTalk=function(msg,isDie){
			(isDie===void 0)&& (isDie=false);
		}

		/*
		if (///paopaoo && !isDie)return;
			clearTalkTween();
		///paopaoo=Pool.getItemByClass("///paopaoo_Talk",///paopaooTalkUI);
		///paopaoo.label.changeText(msg);
		_bSetTextPos=true;
		Player.I.roleForeLayer.addChild(///paopaoo);
		twwen ||=new Tween();
		twwen.to(///paopaoo,{alpha:0},1000,null,Handler.create(this,hideTalk),3000);
		*/
		__proto.clearTalkTween=function(){}
		/*
		if (!twwen)return;
		twwen.pause();
		twwen.complete();
		twwen.clear();
		twwen=null;
		*/
		__proto.hideTalk=function(){}
		/*
		///paopaoo.alpha=1;
		///paopaoo.removeSelf();
		Pool.recover("///paopaoo_Talk",///paopaoo);
		///paopaoo=null;
		*/
		__proto.onFirstInView=function(){}
		__proto._onSelfUpdate=function(){
			var rect=Player.getViewportRect();
			var b=false;
			var foe=MsgManager.foe;
			if (!Player.isGhost && (this.isMove || this.isBeMove))
				(this._path).setNetObjPosMax();
			if (foe.player){
				if (this.updateJianTou(foe.player,GamingView.I.foe,rect))b=true;
			}
			else{
				GamingView.I.foe.visible=false;
			};
			var nOne=MsgManager.nOne;
			if (nOne.player && nOne.player !=foe.player){
				if (this.updateJianTou(nOne.player,GamingView.I.first,rect))b=true;
			}
			else{
				GamingView.I.first.visible=false;
			};
			var tid=MsgManager.myTeam.id;
			var teamInfo=MsgManager.myTeam.lists;
			if (tid !=-1){
				var num=teamInfo.length;
				var objs=Player.I.roleObjectsBySelfId;
				var arrows=GamingView.I.arrows._childs;
				if (num > 0){
					for (var i=0;i < 4;i++){
						var target=objs [teamInfo[i]];
						var arr=arrows[i+2];
						var guang=arr.getChildByName("guang");
						var teamer=arr.getChildByName("teamer");
						var dtbg=arr.getChildByName("dtbg");
						var nameLable=arr.getChildByName("nameLable");
						if (target && target !=nOne.player){
							if (target.teamId !=1 && target.teamId !=2 && target.teamId !=3){
								teamer.skin="gaming/jt_1.png";
							}
							else{
								teamer.skin="gaming/jt_"+target.teamId+".png";
							}
							this.updateJianTou(target,arr,rect);
							target.bindJt=arr;
							target.bindJtDh=GamingView.I["dh"+i];
							var dr=0 | (Math.sqrt(Math.pow(target.x-Player.curUser.x,2)+Math.pow(target.y-Player.curUser.y,2))/ 10);
							nameLable.text=target.shortName+"\n"+dr+"米";
							nameLable.width=nameLable.textField.textWidth;
							dtbg.width=nameLable.textField.textWidth+10;
							guang.width=dtbg.width+27;
						}
						else{
							arr.visible=false;
						}
					}
				}
				else{
					arrows[2].visble=false;
					arrows[3].visble=false;
					arrows[4].visble=false;
					arrows[5].visble=false;
				}
			}
			this.updateBearJianTou(rect);
			GamingView.I.arrows.visible=true;
		}

		//}
		__proto.updateJianTou=function(target,jiantou,rect){
			if (!target){
				jiantou.visible=false;
				return false;
			};
			var sv=Player.I._curMapScale;
			var x1=(this.x-rect.x+this.width / 2)*sv;
			var y1=(this.y-rect.y+this.height / 2)*sv;
			var x2=(target.x-rect.x+target.width / 2)*sv;
			var y2=(target.y-rect.y+target.height / 2)*sv;
			if (rect.contains(target.x+target.width / 2,target.y+target.height / 2)){
				jiantou.visible=false;
				return false;
			}
			jiantou.visible=true;
			var a=Math.atan2(target.y-this.y,target.x-this.x)*180 / Math.PI;
			if (a < 0)a+=360;
			var guang=jiantou.getChildByName("guang");
			var teamer=jiantou.getChildByName("teamer");
			var dtbg=jiantou.getChildByName("dtbg");
			var nameLable=jiantou.getChildByName("nameLable");
			var jtt=jiantou.getChildByName("jtt");
			if (teamer){
				teamer.rotation=a;
				jtt.rotation=90+a;
			}
			else
			jiantou.rotation=a;
			var vw=GamingView.I.width;
			var vh=GamingView.I.height;
			var lv=(y2-y1)/ (x2-x1);
			var jy=0;
			var jx=0;
			var b=Math.atan2(vh,vw)*180 / Math.PI;
			if (a > b && a <=180-b){
				jy=vh-50;
				jx=(jy-y1)/ lv+x1;
			}
			else if (a > 180-b && a <=180+b){
				jx=70;
				jy=(jx-x1)*lv+y1;
			}
			else if (a > 180+b && a <=360-b){
				jy=50;
				jx=(jy-y1)/ lv+x1;
			}
			else{
				jx=vw-70;
				jy=(jx-x1)*lv+y1;
			}
			if (jiantou._childs[2]){
				if (jy >=vh-70){
					nameLable.y=-12;
					dtbg.y=-14;
					guang.y=-14;
				}
				else{
					nameLable.y=52;
					dtbg.y=50;
					guang.y=50;
				}
			}
			jiantou.pos(jx,jy);
			return true;
		}

		__proto.updateBearJianTou=function(rect){
			var target=Player.curBear;
			var jantou=GamingView.I.bearDir;
			if (!target){
				jantou.visible=false;
				return false;
			};
			var sv=Player.I._curMapScale;
			var x1=(this.x-rect.x+this.width / 2)*sv;
			var y1=(this.y-rect.y+this.height / 2)*sv;
			var x2=(target.x-rect.x+target.width / 2)*sv;
			var y2=(target.y-rect.y+target.height / 2)*sv;
			if (rect.contains(target.x+target.width / 2,target.y+target.height / 2)){
				jantou.visible=false;
				return false;
			}
			jantou.visible=true;
			var a=Math.atan2(target.y-this.y,target.x-this.x)*180 / Math.PI;
			if (a < 0)a+=360;
			GamingView.I.bearPos.rotation=a;
			var vw=GamingView.I.width;
			var vh=GamingView.I.height;
			var lv=(y2-y1)/ (x2-x1);
			var jy=0;
			var jx=0;
			var b=Math.atan2(vh,vw)*180 / Math.PI;
			if (a > b && a <=180-b){
				jy=vh-140;
				jx=(jy-y1)/ lv+x1;
			}
			else if (a > 180-b && a <=180+b){
				jx=70;
				jy=(jx-x1)*lv+y1;
			}
			else if (a > 180+b && a <=360-b){
				jy=50;
				jx=(jy-y1)/ lv+x1;
			}
			else{
				jx=vw-140;
				jy=(jx-x1)*lv+y1;
			}
			jantou.pos(jx,jy);
			return true;
		}

		__proto.eatProp=function(btp,hd){
			var _$this=this;
			if (this.self!==0){
				this.djImage && this.djImage.removeSelf();
				return;
			};
			var sdt=ConfigData.skillCfg [btp];
			this.pTween.clear();
			this.pTween2.clear();
			this._anime.alpha=1;
			this.djImage && this.djImage.removeSelf();
			this.headImage.scale(0.7,0.7);
			if (btp==250001){
				Laya.timer.once(sdt.duration-1000,this,this.blink1,[this.headImage,3,new Handler(this,sx3=function(){
					_$this.headImage && _$this.headImage.removeSelf();
				})]);
			}
			else if (btp==2){
				Laya.timer.once(sdt.duration-1000,this,this.blink2,[this._anime,3]);
			}
			else if (btp==7){
				Laya.timer.once(sdt.duration-1000,this,this.blink3,[this.petSp,3]);
			}
			this.djImage.skin="gamingtop/daoju"+btp+".png";
			this.djImage.anchorX=0.5;
			this.djImage.anchorY=0.5;
			this.djImage.pos(this._animeWidth / 2-20,this._animeHeight / 2);
			this.djImage.scale(0.01,0.01);
			this.addChild(this.djImage);
			this.pTween.to(this.djImage,{scaleX:0.9,scaleY:0.9},400,null,new Handler(this,this.eatPropNext1,[btp,hd]))
		}

		__proto.eatPropNext1=function(btp,hd){
			this.pTween.to(this.djImage,{scaleX:0.85,scaleY:0.85},100,null,new Handler(this,this.eatPropNext2,[btp,hd]));
		}

		__proto.eatPropNext2=function(btp,hd){
			this.pTween.to(this.djImage,{scaleX:1.2,scaleY:1.2},200,null,new Handler(this,this.eatPropNext3,[btp,hd]),600);
		}

		__proto.eatPropNext3=function(btp,hd){
			this.headImage.alpha=0;
			this.headImage.anchorX=0.5;
			this.headImage.anchorY=0.5;
			this.headImage.pos(this.djImage.x,this._animeHeight / 4);
			if (btp==250001){
				this.headImage.skin="gamingtop/zyg.png"
				this.addChild(this.headImage);
			}
			if (this.headImage.parent)
				this.pTween2.to(this.headImage,{alpha:0.75},500);
			this.pTween.to(this.djImage,{scaleX:0.01,scaleY:0.01,y:this._animeHeight / 8},300,null,new Handler(this,this.eatPropNext4));
		}

		__proto.eatPropNext4=function(){
			this.djImage && this.djImage.removeSelf();
		}

		/**道具结束效果*/
		__proto.endProp=function(hd){
			this.blink(this._anime,5,hd);
		}

		__proto.blink1=function(target,times,hd){
			this.blink(target,times,hd);
		}

		__proto.blink2=function(target,times,hd){
			this.blink(target,times,hd);
		}

		__proto.blink3=function(target,times,hd){
			this.blink(target,times,hd);
		}

		__proto.blink4=function(target,times,hd){
			this.blink(target,times,hd);
		}

		__proto.blink=function(target,times,hd){
			var _$this=this;
			Tween.to(target,{alpha:0.3,update:new Handler(this,sx1=function(){
					if (_$this.petSp==target)
						_$this.userTopView.sx_alpha=target.alpha;
				})},166,null,new Handler(this,function(times1){
				Tween.to(target,{alpha:1,update:new Handler(this,sx2=function(){
						if (_$this.petSp==target)
							_$this.userTopView.sx_alpha=target.alpha;
					})},166,null,new Handler(this,sx4=function(times2){
					if (times2-1 > 0)
						_$this.blink(target,times2-1,hd);
					else{
						hd && hd.run();
					}
				},[times1]))
			},[times]))
		}

		__proto._onXuli=function(){
			var curTime=Laya.timer.currTimer;
			if (this._xuliLevel && (curTime-this._suoyingPreTime > this.suoyingJianGe)){
				this.changeScale+=this._yzdir;
				if (this.changeScale >=this.currentScale){
					this._yzdir=-0.1;
				}
				this.changeScale <=this.scaleX && (this._yzdir=0.1)
				this.curS=this.changeScale;
				this._suoyingPreTime=curTime;
			}
			if (this._xuliLevel > 0 && this._anime){
			}
			else{
				this.curS=1;
			}
		}

		__proto.updatePath=function(t){
			if (!this.visible || !this.inview || this.isDie){
				this._preTmStep+=t;
				return;
			}
			if (!this.isPlayingNoMoveAnime()){
				if (this.inview){
					this.hasPath && laya8.client.player.NetObject.prototype.update.call(this,t+this._preTmStep);
					this._preTmStep=0;
				}
				else{
					this._preTmStep+=t;
				}
				(this.isMove || this.isBeMove)&& (this._path)._setNetObjPos(t);
			}
			else this._preTmStep=0;
			if (this._bSetTextPos || this._preX !=this._x || this._preY !=this._y){
				this._bSetTextPos=false;
				this._setTextPos();
				this._preX=this._x;
				this._preY=this._y;
			}
		}

		__proto.update=function(t){
			this.loopCount++;
			if (this.isDie){
				this._preTmStep=0;
				return;
			};
			var isloop5=this.loopCount %5===0;
			if (this._regian !=0){
				var now=Laya.timer.currTimer;
				if (now-this.bloodpretime >=1000){
					this.bloodReturning();
					this.bloodpretime=now;
				}
			}
			if (this.self===0){
				this.attackCircle && this.attackCircle.update();
				this.inview=true;
			}
			else if(isloop5 && Player.curUser)this.inview=this.visible=Player.I.posInView(this._x,this._y,200);
			if (!this.isPlayingNoMoveAnime()){
				if (this.inview || isloop5){
					this.hasPath && laya8.client.player.NetObject.prototype.update.call(this,t+this._preTmStep);
					this._preTmStep=0;
				}
				else{
					this._preTmStep+=t;
				}
				(this.isMove || this.isBeMove)&& (this._path)._setNetObjPos(t);
				this._inview || this.firstInView();
				this._xuliLevel && this.inview && this._onXuli();
				this.self==0 && (this.loopCount % 6==0)&& this._onSelfUpdate();
				this._isBeHitShake && isloop5 && this.inview && this.chkShowBehitShake();
			}
			else this._preTmStep=0;
			if (!this.visible || !this.inview)return;
			this.onAniChg();
			if (this._bSetTextPos || this._preX !=this._x || this._preY !=this._y){
				this.bIsInGlass=this.isInGlass();
				this._bSetTextPos=false;
				this._setTextPos();
				this._preX=this._x;
				this._preY=this._y;
			}
			if (this._bscaleChg){
				this._bscaleChg=false;
				this.scaleChg();
			}
			if (this.loopCount %5===0)
				this._chgAlphaByGlass();
		}

		/**
		*获取蓄力球的位置信息
		*@param angle
		*@return
		*/
		__proto.getPo=function(angle){
			var point=new Point();
			var tempV2;
			var tempV22;
			var tempAngle=NaN;
			tempV2=PathBase.getVector2DByAngle(angle);
			tempV2.normalize();
			tempV22=PathBase.getVecByRotateAngle(tempV2,0);
			tempAngle=PathBase.getAngleByVector2D(tempV22.x,tempV22.y);
			var po=this.getCenterPo2();
			var moveVec=PathBase.getVector2DByAngle(tempAngle);
			point.x=this.width / 2+50 *moveVec.x;
			point.y=this.height / 2+50 *moveVec.y;
			this.recoverCenterPo(po);
			return point;
		}

		__proto.xuyin=function(sxy,ofx,ofy){
			var g=this._anime.graphics;
			var onece=g._one;
			if (onece){
				this.graphics.clear();
				var sx=Math.abs(this._anime.scaleX);
				var sy=this._anime.scaleY;
				var tex=onece [0];
				var w=NaN,h=NaN;
				var ss=sxy / this.scaleX *1.1;
				w=tex.sourceWidth *sx *ss;
				h=tex.sourceHeight *sy *ss;
				var offsetX=this._anime.x-1 / 2 *w;
				var offsetY=this._anime.y-1 / 2 *h;
				var half=(ss-1)*tex.sourceWidth / 2;
				offsetY-=half;
				var tempa=0.8;
				ActorObject._whiteColorFilter[0] || (ActorObject._whiteColorFilter[0]=new ColorFilter());
				switch (this._dir){
					case 3:
					case 4:
					case 5:
						ActorObject.flipX.a=-1;
						offsetX-=w / 2+this._anime.x / 2-half;
						this.graphics.save();
						this.graphics.setFilters(ActorObject._whiteColorFilter);
						this.graphics.drawTexture(tex,offsetX+ofx,offsetY+ofy,w,h,ActorObject.flipX,tempa);
						this.graphics.restore();
						break ;
					default :
						this.graphics.save();
						this.graphics.setFilters(ActorObject._whiteColorFilter);
						this.graphics.drawTexture(tex,offsetX+ofx,offsetY+ofy,w,h,null,tempa);
						this.graphics.restore();
						break ;
					}
			}
		}

		/**
		*碰撞后一堆的特效什么的 硬值啥的
		*@param b
		*/
		__proto.onCollision=function(b){
			if (this.self==0 && b){
				this.releaseMove();
			}
		}

		/**
		*开始向前冲撞
		*/
		__proto.onBeginCollision=function(second){
			this.isBeMove=true;
			this.setCanMove(false,0x8);
			this.canRotate=false;
			if (this.self==0){
				GamingView.I.gameCtrl.__mouseEnabled=false;
			}
		}

		//playAnime(true);
		__proto.testStop=function(){}
		/**
		*恢复移动
		*/
		__proto.releaseMove=function(){
			this.setCanMove(true,0x8);
			this.canRotate=true;
			GamingView.I.gameCtrl.__mouseEnabled=true;
		}

		/**
		*狙击开始
		*/
		__proto.onjuji=function(){
			if (this.bIsInGlass){
				this.addGantan();
			}
			this._bSetTextPos=true;
			if (this.self !=0)return;
			var msg=MsgTemplate.createWithClass(CMsgShowTan);
			GameSocket.sendClientMsg(msg);
			this.setCanMove(false,0x1);
			console.log(">>>>>>>>>>>>>>>>>>>>>>>>jujibeigin");
		}

		__proto.onDilei=function(){
			this._bSetTextPos=true;
			if (this.self !=0)return;
			this.changeDiLeiQuan(310);
			console.log(">>>>>>>>>>>>>>>>>>>>>>>>dileibegin");
		}

		__proto.addGantan=function(){this.gantan=this.gantan|| Pool.getItemByClass("img_gantan",Image);
			this.gantan.removeSelf();
			this.gantan.skin="gaming/gantan.png";
			this.gantan.pivot(1 / 2 *this.gantan.width,1 / 2 *this.gantan.height);
			this.gantan.pos(this._x+this.displayWidth / 2,this._y-50 *this.scaleX,true);
			Player.I.roleForeLayer.addChild(this.gantan);
			this._bSetTextPos=true;
		}

		__proto.removeGanTan=function(){
			if (this.gantan){
				this.gantan.removeSelf();
				Pool.recover("img_gantan",this.gantan);
			}
			this.gantan=null;
		}

		/**
		*狙击结束
		*/
		__proto.onendjuji=function(){
			this.removeGanTan();
			if (this.self !=0)return;
			this.setCanMove(true,0x1);
		}

		/**
		*地雷投掷结束
		*/
		__proto.onendDilei=function(){
			if (this.self !=0)return;
			if (this.dileiQuan){
				this.hideDiLeiQuan();
				console.log(">>>>>>>>>>>>>>>>>>>>>>>>dileiend");
			}
		}

		__proto.setGhost=function(b){
			if (this.self==0){
				Player.I.setGhost(b);
			}
			this.isGhost=b;
			if (this._style.alpha==1)this.alpha=0.5;
		}

		/**
		*获取角色在场景中中心点的坐标（中心点不是角色锚点）
		*@return Point
		*/
		__proto.getCenterPo=function(){
			return (Pool.getItemByClass("roleCenterPo",Point)).setTo(this._x+(this._animeWidth *this.scaleX / 2),this._y+(this._animeHeight *this.scaleY / 2));
		}

		__proto.getCenterPo2=function(){
			return (Pool.getItemByClass("roleCenterPo",Point)).setTo(this._x+(this.displayWidth / 2),this._y+(this.displayHeight / 2));
		}

		__proto.recoverCenterPo=function(po){}
		//重置状态
		__proto.resetStatus=function(){
			if (this==MsgManager.foe.player){
				MsgManager.foe.player=null;
			}
			this._myTitle="";
			this._dir=0;
			this._dirIndex=0;
			this._isStand=false;
			this.isMove=false;
			this._attackTime=0;
			this._isAttack=false;
			this._isHurt=false;
			this._isXuliAttack=false;
			this.lv=0;
			this.level=0;
			this.jifen=0;
			this.skillIds[0]=this.skillIds[1]=this.skillIds[2]=0;
			this.hasFallSkill=false;
			this.isGhost=false;
			this.snows && this.snows.removeSelf();
		}

		/**
		*设置技能id
		*@param index
		*@param skillid
		*/
		__proto.setSkill=function(index,skillid,count){
			this.skillIds[index]=skillid;
			if (index==2){
				this.hasFallSkill=(count==-1);
				var id=skillid % 1000000;
				if (this.hasFallSkill){
					this.userTopView.rock(id);
				}
			}
		}

		//}
		__proto.die=function(){
			this._clear();this.talkCmd=this.talkCmd|| Player.I.getRoleTalk(this.selfID);
			this.talkCmd && (this.talkCmd.talkAuthority==1)&& this.showTalk(this.talkCmd.talkOnDead,true);
			var diebyuid=MsgManager.I._killList[this.selfID];
			if (this.self==0){
				GamingView.I.clearSkill();
				Player.I.grayScene(true);
				GamingView.I.gameCtrl.stopCtrl();
				Player.I.trembleSence();
				SoundManager.stopSound(ConfigData.soundCfg[57]);
				SoundManager.stopSound(ConfigData.soundCfg[116]);
			}
			if (this.self==0 && MsgManager.isInRoom){
				GameSocket.I.event("playerRestart",this);
			}
			if (this.self !=0)
				this.timer.once(2000,this,this.superDestroy,[true]);
			this.animeDie();
		}

		/**清除死亡定时器*/
		__proto.clearDieTimer=function(){
			this.timer.clear(this,this.superDestroy);
		}

		// 延迟销毁
		__proto._clear=function(){
			this.onEndXuli(0,-1);
			BufferManager.clear(this);
			this.maxImage && this.maxImage.removeSelf();
			this.preMove=false;
			this._diamondNum=0;
			this._diamondNumText=null;
			this.cdTimes=1;
			this._bSetTextPos=true;
			this._bscaleChg=true;
			this._preX=this._preY=0;
			this.bIsInGlass=false;
			this.gantan && this.removeGanTan();
			this.moveEdge=false;
			this.isBeMove=false;
			this.isDie=true;
			this.bindJt=null;
			Laya.timer.clear(this,this.downloadx);
			this.hasPath=false;
			if (this._anime){
				this._anime.off("complete",this,this.onAniEnd);
				this._anime.filters=null;
			}
			this.timer.clear(this,this.superDestroy);
			this.iceImage && this.iceImage.destroy();
			this.iceImage=null;
			this.djImage && this.djImage.removeSelf();
			this.headImage && this.headImage.removeSelf();
			this.clearDebuff();
			this.userTopView && this.userTopView.resetState();
			this.heroLv=-1;
			this.alpha=1;
			this.visible=true;
			this.removeBtnXuliEffect();
			this.attackCircle && this.attackCircle.destory();
		}

		//btnEff && removeBtnEffect();
		__proto.destroy=function(destroyChild){
			(destroyChild===void 0)&& (destroyChild=true);
			if (this.dieBody && this.dieBody.parent==this){
				this.dieBody.reset();
			}
			this.dieBody=null;
			this.clearTalkTween();
			this._anime.rotation=0;
			this.userTopView.visible=true;
			if (this.self==0){
				this.regian=0;
				SoundManager.stopSound(ConfigData.soundCfg[57]);
				GamingView.I.showAttackButton(true,false);
				Player.curUser=null;
				Player.I.clear_trembleSence();
			}
			else{
				if (this.selfTeam==0){
					var i=MsgManager.myTeam.lists.indexOf(this.selfID);
					if (i !=-1)MsgManager.myTeam.lists.splice(i,1);
				}
			}
			this._clear();
			this.pTween.clear();
			this.pTween2.clear();
			this.isHavePet=false;
			this.userTopView && (this.userTopView.sx_alpha=1);
			this.pet.reset();
			this.scale(1,1);
			this.clearTalkTween();
			this.talkCmd=null;
			this._callBack=null;
			this.teamNameCfg=null;
			this.maxImage && this.maxImage.removeSelf();
			this.resetStatus();
			this.killNum=0;
			this.removeSelf();
			this._inview=false;
			this.toushe && this.toushe.removeSelf();
			this.dileiQuan && this.dileiQuan.removeSelf();
			this.aniInvincible && this.endInvincible();
			this._skillShieldEff && this.removeShieldEff();
			this._xuliEff && this.removeXuliAni();
			this.removeBtnXuliEffect();
			this.eatSnowEff && this.removeEatFoodAni();
			if (this._anime){
				this._anime.stop();
				this._anime.removeSelf();
			}
			if (this._roleImg){
				this._roleImg.destroy();
				if (this._anime){
					this._anime.clearCallBack();
					this._anime=null;
				}
				this._roleImg=null;
			}
			else{
				this._anime && Pool.recover(this._anime.poolID,this._anime);
				this._anime=null;
			}
			if (this._beHitAni){
				this._beHitAni.stop();
				this._beHitAni.removeSelf();
				Pool.recover("BeHitAni.ani",this._beHitAni);
				this._beHitAni=null;
			}
			_super.prototype.destroy.call(this,destroyChild);
		}

		__proto.superDestroy=function(destroyChild){
			(destroyChild===void 0)&& (destroyChild=true);
			this.destroy(destroyChild);
		}

		__proto.createMoveMe=function(animePath,cfg,sid,isComplete){
			if (!isComplete)return;
			var i=0,j=0;
			var frameCounts=cfg.frameCount;
			var animePathx=animePath+"x";
			if (!ActorObject._ANILIB[animePathx]){
				for (j=65;j <=77;j++){
					var urlArr=[];
					var temp=j % 3;
					var a=String.fromCharCode(j);
					a="move"+a;
					if (temp==2){
						var tempindex=0 | (j / 3)-16;
						for (i=0;i < frameCounts[1];i++){
							urlArr.push(animePath+"/"+ActorObject._animeArr[tempindex]+i+".png");
						}
						Animation.createFrames(urlArr,a+sid);
						ActorObject._animeMoveMeArr.length < 13 && ActorObject._animeMoveMeArr.push(a);
						continue ;
					}
					for (i=0;i < frameCounts[1];i++){
						urlArr.push(animePathx+"/"+a+i+".png");
					}
					Animation.createFrames(urlArr,a+sid);
					ActorObject._animeMoveMeArr.length < 13 && ActorObject._animeMoveMeArr.push(a);
				}
				ActorObject._ANILIB[animePathx]=true;
				ActorObject._ANILIB[sid]=true;
			}
		}

		__proto.downloadx=function(src,cfg){
			SnowLoad.I.load([{url:"res/"+src+"x"+".atlas",type:"atlas"}],Handler.create(this,this.createMoveMe,[src,cfg,this._sourceID]));
		}

		__proto.createAnimation=function(animePath){
			if (!animePath){
				alert("animePath=null");
			}
			if (this.self==0){
				if (!ActorObject._ANILIB[animePath+"x"]){
					Laya.timer.clear(this,this.downloadx);
					Laya.timer.once(15000,this,this.downloadx,[animePath,this._roleCfg]);
				}
			}
			if (this._roleImg){
				this._roleImg.destroy();
				this._roleImg=null;
			}
			this._roleImg && this._roleImg.destroy();
			this.animePath=animePath;
			this._roleImg=null;
			if (this.destroyed){
				if (this._anime){
					Pool.recover(this._anime.poolID,this._anime);
					this._anime=null;
				}
				return;
			}
			if (!ActorObject._ANILIB[animePath]){
				var frameCounts=this._roleCfg.frameCount;
				ActorObject._ANILIB[animePath]=true;
				for (var i=0;i < ActorObject._animeArr.length;i++){
					var urlArr=[];
					for (var j=0;j < frameCounts[Math.floor(i / 5)];j++){
						urlArr.push(animePath+"/"+ActorObject._animeArr[i]+j+".png");
					}
					Animation.createFrames(urlArr,ActorObject._animeArr[i]+this._sourceID);
				}
			}
			this._anime.on("complete",this,this.onAniEnd);
			this.animeBorn();
			this.addChild(this._anime);
			(this.inview || this._uid !=Player.curUID)&& this.isInvincible && this.createIvincibleAni();
		}

		__proto.onAniEnd=function(){
			this.isAniEnd=true;
			this._isXuliAttack=false;
			this._isAttack=false;
			this._isHurt=false;
		}

		/**
		*出生动画
		*/
		__proto.animeBorn=function(){
			if (this.isPlayingOtherAnime())return;
			this.animeStand();
		}

		__proto.setStandDir=function(value){
			if (this._isStand){
				if (this._dir !=value){
					this._dir=value;
					this.dirTurnIndex();
				}
				if (this._curAction !=0+this._dirIndex){
					this._curAction=0+this._dirIndex;
					this.aniBool=true;
					this.playAnime(true);
				}
			}
		}

		/**
		*攻击动画
		*/
		__proto.animeAttck=function(dir){
			if (!this._anime)return;
			ActionPlayer.attack(this);
			if (this.isPlayingNoMoveAnime())return;
			this._dir=dir;
			this.dirTurnIndex();
			this._isAttack=true;
			this.isMove=false;
			this._isStand=false;
			this._attackTime=Laya.timer.currTimer;
			this._curAction=10+this._dirIndex;
			this.aniBool=false;
			this.playAnime(false);
		}

		/**
		*移动动画
		*/
		__proto.animeMove=function(dir){
			if (!this._anime)return;
			if (enumRoomType.nowType==100 && this.self==0){
				GuideMgrI.instance.isMove=true;
				if (GuideMgrI.instance.moveNum > GuideMgrI.instance.totalNum){
					GuideMgrI.instance.moveNum=0;
				}
			}
			if (this.self !=0){
				this._isAttack=this._isXuliAttack=false;
			}
			else if (this.canGoNext){
				this._isAttack=this._isXuliAttack=false;
				this.canGoNext=false;
			}
			this.gantan && this.removeGanTan();
			if (this.isPlayingNoMoveAnime()){
				this._nextAction=5+this._dirIndex;
				this._nextDir=dir;
				return;
			}
			else{
				this._nextAction=0;
			}
			if ((this._curAction < 15 || this._curAction >=20)&& (this.isMove && (this._dir==dir))){
				return;
			}
			this._dir=dir;
			this.dirTurnIndex();
			this.isMove=true;
			this._isStand=false;
			this._curAction=5+this._dirIndex;
			this.aniBool=true;
			if (this.preMove){
				(this._anime)._frames=Animation.framesMap[ActorObject._animeArr[this._curAction]+this._sourceID];
			}
			else{
				this.playAnime(true);
			}
		}

		/**
		*@param bulletOwerID 子弹拥有者的uid--用于判断自己攻击到被人后播放声音
		*@param bulletSkillID 子弹携带的技能id--用于判断角色被击后的效果处理
		*/
		__proto.animeHurt=function(bulletOwerID,bulletSkillID){
			(bulletOwerID===void 0)&& (bulletOwerID=0);
			(bulletSkillID===void 0)&& (bulletSkillID=0);
			var enmy=Player.I.netObjects [bulletOwerID];
			this.inview && this.playHurtSound(bulletOwerID);
			if (this._uid==Player.curUID && enmy && enmy.teamId==this.teamId){
				return;
			}
			if (this._skillShieldEff || this._isChgRabbit)return;
			(this._uid==Player.curUID)&& Player.I.trembleSence();this.talkCmd=this.talkCmd|| Player.I.getRoleTalk(this.selfID);
			this.talkCmd && (this.talkCmd.talkAuthority==1)&& this.showTalk(this.talkCmd.talkOnBeAttack);
			if (this._isAttack)return;
			if ((this._curAction < 15)|| (this._curAction >=20)){
				this._nextAction=this._curAction;
			}
			this._nextDir=this._dir;
			this._isHurt=true;
			this._isStand=false;
			this._curAction=15+this._dirIndex;
			this.aniBool=false;
			this.playAnime(false);
		}

		__proto.playHurtSound=function(bulletOwerID){
			if (this._skillShieldEff || this._isChgRabbit)return;
			if (this._uid==Player.curUID){
				if (this.gender==1)
					SoundManager.playSound(ConfigData.soundCfg[38]);
				else
				SoundManager.playSound(ConfigData.soundCfg[39]);
			}
			if (bulletOwerID==Player.curUID){
				if (this.gender==1)
					SoundManager.playSound(ConfigData.soundCfg[40]);
				else
				SoundManager.playSound(ConfigData.soundCfg[41]);
			}
		}

		__proto.forward=function(angle){
			var distance=ActorObject.BACKDISTANCE;
			var v2D=PathBase.getVector2DByAngle(angle);
			var posX=this.x+v2D.x *distance;
			var posY=this.y+v2D.y *distance;
			var mapData=ConfigData.mapData;
			if (posX < mapData.left){
				posX=mapData.left;
			}
			else if (posX > mapData.width-this.width-mapData.right){
				posX=mapData.width-this.width-mapData.right;
			}
			if (posY < mapData.top){
				posY=mapData.top;
			}
			else if (posY > mapData.height-this.height-mapData.bottom){
				posY=mapData.height-this.height-mapData.bottom;
			}
			this.pos(posX,posY);
		}

		/**
		*死亡动画
		*/
		__proto.animeDie=function(){
			_super.prototype.animeDie.call(this);
			this._anime.visible=false;
			this._roleImg && this._roleImg.removeSelf();
			this.dieBody=EffectPool.I.createEffectAniByIDE("dieAni",0.55 *this.width,0.95 *this.height,this,null);
			return;
			this._curAction=30;
			var isLoop=(this._roleCfg.dieLoop==1);
			this.aniBool=isLoop;
			this.playAnime(isLoop);
		}

		/**
		*播放动画
		*/
		__proto.playAnime=function(loop){
			if (this.snowFlag)
				return;
			var i=Math.floor(this._curAction / 5);
			this.preMove=(i==1);
			this._anime.interval=i==1 ? this._roleCfg.baseFrameRate[i] *this.scaleX / this.frameRate *0.36 :this._roleCfg.baseFrameRate[i];
			if (this._curAction==30)
				this._anime.play(0,loop,ActorObject._animeArr[this._curAction]+this._roleCfg.sourceID);
			else
			this._anime.play(0,loop,ActorObject._animeArr[this._curAction]+this._sourceID);
		}

		/**
		*可以移动
		*/
		__proto.canMoveNow=function(){
			this.canGoNext=true;
			this.setCanMove(true,0x10);
			GamingView.I.gameCtrl.forceMove();
		}

		/**
		*获取anime的显示索引
		*@return
		*/
		__proto.onGetAnimeIndex=function(){
			var tempIndex=this.getChildIndex(this._anime);
			return tempIndex <=0 ? 0 :tempIndex;
		}

		/**是否可以播放攻击动画*/
		__proto.canPlayerAttAni=function(){
			return (!this._isAttack && !this._isXuliAttack);
		}

		/**是否播放不能移动的动画*/
		__proto.isPlayingNoMoveAnime=function(){
			return this._isAttack || this._isXuliAttack;
		}

		/**是否播放站立以外的动画*/
		__proto.isPlayingOtherAnime=function(){
			return this._isAttack || this._isHurt || this.isMove || this._isXuliAttack;
		}

		/**切换动画动画-移动和站立之前切换*/
		__proto.onAniChg=function(){
			if (!this.isAniEnd){
				if (!this.isPlayingOtherAnime()){
					if (!this._isStand){
						this.animeStand();
					}
				}
				return;
			}
			this.isAniEnd=false;
			if (this._nextAction){
				if (this._nextAction >=5 && this._nextAction < 10){
					if (this.self==0)
						this.animeMoveMe(this._nextDir24 *15)
					else
					this.animeMove(this._nextDir);
				}
				this._nextAction=undefined;
			}
			if (!this.isPlayingOtherAnime()&& !this._isStand){
				this.animeStand();
			}
		}

		/**强制播放站立动画*/
		__proto.animeStand=function(){
			if (enumRoomType.nowType==100 && this.self==0){
				GuideMgrI.instance.isMove=false;
			}
			this._isStand=true;
			this._curAction=0+this._dirIndex;
			this.aniBool=true;
			this.playAnime(true);
		}

		/**
		*创建无敌动画
		*/
		__proto.createIvincibleAni=function(){this.aniInvincible=this.aniInvincible|| EffectPool.I.createSingleEffectAni("invincible");
			Player.I.roleForeLayer.addChild(this.aniInvincible);
			this.aniInvincible.pos(this._x+this.displayWidth / 2,this._y+this.displayHeight / 2,true);
			this._bSetTextPos=true;
			this.aniInvincible.visible=this.visible;
		}

		// 结束无敌
		__proto.endInvincible=function(){
			Laya.timer.clear(this,this.endInvincible);
			this.isInvincible=false;
			this.aniInvincible && this.aniInvincible.reset();
			this.aniInvincible=null;
		}

		__proto.get3_1=function(a,b){
			return Math.abs(a-b)/ 3 *1;
		}

		__proto.get5_2=function(a,b){
			return Math.abs(a-b)/ 5 *2;
		}

		/**
		*添加升级动画
		*@param upOrDown 标识当前是升级还是降级-true 升级， false降级
		*/
		__proto.addUpLevelAni=function(upOrDown){
			if (this.chkShowEff())return;
			if (this.self==0){
				if (upOrDown)
					SoundManager.playSound(ConfigData.soundCfg[56]);
				else
				SoundManager.playSound(ConfigData.soundCfg[42]);
			}
			if (upOrDown)this.timer.callLater(this,this.llasd);
		}

		//private static var guangTex:Texture ;
		__proto.llasd=function(){
			EffectPool.I.createEffectAni("upLevel",this._x+this.displayWidth / 2,this._y+this.displayHeight / 2,Player.I.roleForeLayer,this);
		}

		__proto.addEatFoodAni=function(){}
		__proto.removeEatFoodAni=function(){}
		/**吃水晶、宝石的效果*/
		__proto.addEatGemEff=function(){
			var _$this=this;
			if (this._uid==Player.curUID){
				SoundManager.playSound(ConfigData.soundCfg[127]);
			}
			if (this.chkShowEff()|| this._uid !=Player.curUID || this.isEatGem)return;
			this.isEatGem=true;
			var sbb=EffectPool.I.createEffectAni("eatHP",this._x+this.displayWidth / 2,this._y+this.displayHeight / 2,Player.I.roleForeLayer,this);
			Laya.timer.once(1000,this,asda=function(){
				_$this.isEatGem=false
			});
		}

		/**
		*添加吃血动画
		*/
		__proto.addEatHPAni=function(){
			if (this.chkShowEff()|| !this.inview)return;
			EffectPool.I.createEffectAni("eatHP",this._x+this.displayWidth / 2,this._y+this.displayHeight / 2,Player.I.roleForeLayer,this);
		}

		/**被击攻击圈特效播放完毕做销毁处理**/
		__proto.onBeHitAniComplete=function(){
			if (this._beHitAni){
				this._beHitAni.visible=false;
				this._beHitAni.stop();
			}
		}

		__proto.onShowBeHitShake=function(){
			if (this._isBeHitShake)return;
			this._startBeHitTimer=this.timer.currTimer;
			this._isBeHitShake=true;
		}

		__proto.chkShowBehitShake=function(){
			if (!this._isBeHitShake)return;
			var usedTimer=this.timer.currTimer-this._startBeHitTimer-0;
			if (usedTimer >=ActorObject.beHitShakeTime){
				this._isBeHitShake=false;
				this._anime.rotation=0;
				return;
			}
			this._curShakeNum=Math.round(SnowUtils.randRange(ActorObject.beHitShakeNumMax,ActorObject.beHitShakeNumMin));
			this._anime.rotation=this._curShakeNum;
		}

		//}
		__proto.addXuliAni=function(){}
		//addAniByName(enumEffectType.ANI_ZHILIAO);
		__proto.removeXuliAni=function(){
			this._xuliEff && this._xuliEff.reset();
			this._xuliEff=null;
		}

		__proto.addBtnXuliEffect=function(){
			GamingView.I.btnAttack.addXuliEff();
		}

		//btnXuliEff.y=GamingView.I.btnAttack.height / 2;
		__proto.removeBtnXuliEffect=function(){
			if (this.uid==Player.curUID && this.self==0){
				GamingView.I.btnAttack.removeXuliEff();
			}
		}

		/**
		*添加 伤害吸收 特效
		*/
		__proto.addShieldEff=function(){this._skillShieldEff=this._skillShieldEff|| EffectPool.I.createSingleEffectAni("shieldEff");
			Player.I.roleForeLayer.addChild(this._skillShieldEff);
			this._skillShieldEff.pos(this._x+this.displayWidth / 2,this._y+this.displayHeight / 2,true);
			this._bSetTextPos=true;
			this._bscaleChg=true;
			this._skillShieldEff.visible=this.visible;
			var sdt=ConfigData.skillCfg [3];
			Laya.timer.once(sdt.duration-1000,this,this.blink4,[this._skillShieldEff,3]);
		}

		//private function endInvincible():void
		__proto.removeShieldEff=function(){
			this._skillShieldEff && this._skillShieldEff.reset();
			this._skillShieldEff=null;
		}

		/**添加陨石雨 特效*/
		__proto.addYunShiYuEff=function(__xx,__yy){
			this.userTopView.setXuliEff(-1);
			if (this.chkShowEff()){
				return;
			}
			SoundManager.playSound(ConfigData.soundCfg[129]);
			EffectPool.I.createEffectAniByIDE("yunshiAni",__xx,__yy,Player.I.roleForeLayer,null);
		}

		//}
		__proto.removeUTV_eff=function(){
			this.userTopView.setXuliEff();
		}

		__proto.addOneAniByName=function(name){
			if (this.chkShowEff())return;
			EffectPool.I.createEffectAni(name,this._x+this.displayWidth / 2,this._y+this.displayHeight / 2,Player.I.roleForeLayer,this);
		}

		__proto.addDebuffAni=function(debuffid){
			Player.I.roleBackLayer.addChild
			this._bSetTextPos=true;
		}

		__proto.removeDebuffAni=function(){}
		/**
		*Buffer的改变
		*@param type
		*@param floors
		*/
		__proto.changeBuffer=function(type,floors){
			BufferManager.runBuffer(this,type,floors);
		}

		/**
		*潜行
		*@param b
		*/
		__proto.qianxing=function(b){
			this.canQX=b;
			this._chgAlphaByGlass();
		}

		/**
		*同步buff数据
		*@param btmArr 存储buff信息
		*/
		__proto.addBuff=function(buff){
			this.userTopView.addBuff(buff);
		}

		__proto.removeBuff=function(buff){
			this.userTopView.removeBuff(buff);
		}

		__proto.afterMove=function(){
			this.userTopView.stopBox();
			BufferManager.removeBuffer(this,0x200);
			BufferManager.removeBuffer(this,0x800);
		}

		/**
		*蓄力之后
		*/
		__proto.afterXuli=function(){
			this.userTopView.stopBox();
		}

		/**
		*受伤之后
		*/
		__proto.afterHurt=function(){
			this.userTopView.stopBox();
		}

		/**
		*挨打之后
		*/
		__proto.afterAttack=function(){
			this.userTopView.stopBox();
			BufferManager.removeBuffer(this,0x200);
			BufferManager.removeBuffer(this,0x800);
		}

		__proto.turnSnows=function(url){
			if (enumRoomType.nowType==100){
				url=URL.formatURL(WZTWOBuffer.skin);
			}this.snows=this.snows|| new Image();
			if (this.snows.skin!=url){
				this.snows.skin=null;
				this.snows.skin=url;
			}
			this.snows.removeSelf();
			this.addChild(this.snows);
			this.userTopView.visible=false;
			this._anime.visible=false;
			this.isSnow=true;
			this.isHide=true;
		}

		__proto.reSnows=function(){
			if (this.isSnow){
				this.snows.removeSelf();
				this.isSnow=false;
				this.isHide=false;
				this.userTopView.visible=true;
				this._anime.visible=true;
			}
		}

		__proto.bekillone=function(num,killer){}
		//------------------------------------------------------------------------------------------------
		__proto.clearDebuff=function(){}
		/*
		var img:Image;
		while (//_deBuffSp.numChildren){
		img=//_deBuffSp.removeChildAt(0)as Image;
		Pool.recover("roleDebuffImg",img);
	}


	//_deBuffSp.removeSelf();
	*/
	__proto.chkCanMove=function(type){
		switch (type){
			case 19:
				Log_Test.info("当前 眩晕状态 不能移动");
				return true;
			case 20:
				Log_Test.info("当前 睡眠状态 不能移动");
				return true;
			case 21:
				Log_Test.info("当前 陷阱状态 不能移动");
				return true;
			case 22:
				Log_Test.info("当前 击倒状态 不能移动");
				return true;
			}
		return false;
	}


	__proto.chkCanAttack=function(type){
		switch (type){
			case 19:
				Log_Test.info("当前 眩晕状态 不能攻击");
				return true;
			case 20:
				Log_Test.info("当前 睡眠状态 不能攻击");
				return true;
			case 22:
				Log_Test.info("当前 击倒状态 不能攻击");
				return true;
			}
		return false;
	}


	/**
	*可以拾取
	*/
	__proto.canPickUp=function(){
		if (this.self==0){
			GamingView.I.enablePick(true);
			console.log("可以拾取");
		}

	}


	__proto.endPickup=function(){
		if (this.self==0){
			console.log("拾取结束");
		}

	}


	/**
	*拾取成功
	*/
	__proto.pickUpSusse=function(){
		if (this.self==0){
			console.log("拾取成功");
		}

	}


	/**
	*开始拾取
	*/
	__proto.beginPickUp=function(num){
		this.userTopView.openBox(num);
		if (this.self==0){
			console.log("开始拾取");
		}

	}


	/**
	*开始拾取失败
	*/
	__proto.beginFaildPickUp=function(){
		if (this.self==0){
			console.log("开始拾取失败");
		}

	}


	/**
	*拾取结束失败
	*/
	__proto.endFaildPickUp=function(){
		if (this.self==0){
			console.log("拾取结束失败");
		}

	}


	//public var jituiNum:int=0;
	__proto._chgOneProperty=function(proD,uid){
		var data;
		switch (proD.propertyType){
			case 14:
				MsgManager.I._behitList[uid]=proD.propertyValue;
				break ;
			case 4:
				this.smaxSpeed=proD.propertyValue;
				(this.getPath())&& this.getPath().setSpeed();
				break ;
			case 5:
				Log_Test.error("碰撞获得子弹百分比 属性 被注释掉了");
				break ;
			case 17:
				this.changeXuliState(1);
				if (this.self==0){
					this.scale1(proD.propertyValue,proD.propertyValue);
				}
				else{
					this.scale(proD.propertyValue,proD.propertyValue);
				}
				this.scale(proD.propertyValue,proD.propertyValue);
				break ;
			case 2:
				this.maxHp=proD.propertyValue;
				break ;
			case 31:
				if (this.self==0){
					GamingView.I.changeChongNeng(proD.propertyValue);
				}
				break ;
			case 32:
			switch(proD.propertyValue%1000){
				case 0:
					this.canPickUp();
					break ;
				case 3:
					this.endPickup();
					break ;
				case 1:
					this.beginPickUp(0|(proD.propertyValue/1000));
					break ;
				case 2:
					this.beginFaildPickUp();
					break ;
					break ;
				}
			break ;
			case 30:
			if (this.self==0){
				GamingView.I.miniCD(proD.propertyValue);
			}
			break ;
			case 1:;
			var detla=proD.propertyValue-this.hp;
			this.hp=proD.propertyValue;
			if (this.self==0){
				if (detla < 0){
					ShowJiFen.create(detla,2,this,0,false);
				}
				else{
					ShowJiFen.create(detla,3,this,0,false);
				}
			}
			break ;
			case 25:{
				var bulletId=proD.propertyValue;
				var cfg=ConfigData.elementData[bulletId];
				var cfghand=ConfigData.elementData[300];
				if (this.dileiQuan){
					this.dileiQuan.size(cfg.explodeW,cfg.explodeH);
					this.dileiQuan.pivot(cfg.explodeW / 2,cfg.explodeH / 2);
				}
				break ;
			}
			case 20:
			if (this.self==0){
				this.preBalllen=proD.propertyValue;
			}
			break ;
			case 21:
			if (this.self==0){
				this._tempNum=this.preDiLeilen=proD.propertyValue;
				if (GamingView.I.gameCtrl.isTwo)this._tempNum > 0 && (this.attackCircle.setWidth(this._tempNum));
			}
			break ;
			case 26:
			if (this.self==0){
				this.attackCircle.setScale(proD.propertyValue);
			}
			break ;
			case 33:
			if (this.self==0){
				this.attackCircle.setDisScale(proD.propertyValue);
			}
			break ;
			case 22:
			break ;
			case 2:
			this.maxHp=proD.propertyValue;
			break ;
			case 1:
			this.hp=proD.propertyValue;
			break ;
			case 28:
			this.regian=proD.propertyValue;
			break ;
			case 27:;
			var _sc=proD.propertyValue;
			if (this.self==0)
				this.scale1(_sc,_sc);
			else
			this.scale(_sc,_sc);
			break ;
			case 34:
			this._hp=proD.propertyValue;
			break ;
			case 35:
			if (this.self==0){
				ShowJiFen.create(proD.propertyValue,3,this,0,false);
			}
			break ;
			default :
		}

	}


	__proto.hideDiLeiQuan=function(){
		console.log(">>>>>>>>>>>>>>>>>>>>>>>>>>hideDiLeiQuan");
		if (this.dileiQuan){
			this.dileiQuan.removeSelf();
			this.dileiQuan=null;
		}

	}


	__proto.changeDiLeiQuan=function(num){
		if (isNaN(num))return;this.dileiQuan=this.dileiQuan|| new Image();
		if (!this.dileiQuan.parent){
			Player.I.roleForeLayer.addChild(this.dileiQuan);
			this.dileiQuan.skin="gaming/dilei_quan.png";
			var cfg=ConfigData.elementData[309];
			this.dileiQuan.size(cfg.explodeW,cfg.explodeH);
			this.dileiQuan.pivot(cfg.explodeW / 2,cfg.explodeH / 2);
		}

		this._tempNum=num;
		this.updateDiLeiQuan();
		this._bSetTextPos=true;
	}


	/**
	*更新地雷圈的位置
	*/
	__proto.updateDiLeiQuan=function(){
		if (this.self==0){
			if (this.dileiQuan){
				var juli=this._tempNum;
			}
		}

	}


	/**
	*隐藏球
	*/
	__proto.hideBall=function(){
		console.log(">>>>>>>>>>>>>>>>>>>>>>>>>>hideBall");
		if (this.toushe){
			this.toushe.removeSelf();
			this.toushe=null;
		}

	}


	/**
	*沉默
	*/
	__proto.silent=function(){
		if (this.self==0){
			GamingView.I.silent();
		}

		this.addBuff(21001);
	}


	/**
	*解除沉默
	*/
	__proto.unSilent=function(){
		if (this.self==0){
			GamingView.I.unSilent();
		}

		this.removeBuff(21001);
	}


	__proto.iceBox=function(){
		if (this.self==0){
			GamingView.I.lockUser();
		}

		this.userTopView.visible=false;
		if (this.iceBox_eff){
			this.iceBox_eff.reset();
			this.iceBox_eff=null;
		}

		this.iceBox_eff=EffectPool.I.createSingleEffectAni("fakedie");
		Player.I.roleForeLayer.addChild(this.iceBox_eff);
		this.iceBox_eff.visible=this.visible;
		this.iceBox_eff.pos(this._x+1/2*this.displayWidth,this._y+1/2*this.displayHeight);
	}


	__proto.clearIceBox=function(){
		if (this.self==0){
			GamingView.I.unLockUser();
		}

		this.userTopView.visible=true;
		this.iceBox_eff.reset();
		this.iceBox_eff=null;
	}


	__proto.fakeDie=function(){
		if (this.self==0){
			GamingView.I.lockUser();
		}

		this.userTopView.visible=false;
		this._anime.alpha=0.5;
	}


	__proto.beginHuzhao=function(){
		if(this.huzhaoEff){
			this.huzhaoEff.reset();
			this.huzhaoEff=null;
		}

		this.huzhaoEff=EffectPool.I.createSingleEffectAni("huzhao");
		this.huzhaoEff.visible=this.visible;
		Player.I.roleForeLayer.addChild(this.huzhaoEff);
		this.huzhaoEff.pos(this._x+1 / 2 *this.displayWidth,this._y+1 / 2 *this.displayHeight);
		this.addFollow(this.huzhaoEff,0,0);
	}


	__proto.clearHuzhao=function(){
		if(this.huzhaoEff){
			this.removeFollow(this.huzhaoEff);
			this.huzhaoEff.reset();
			this.huzhaoEff=null;
		}

	}


	__proto.testFakeDie=function(t){
		Laya.timer.once(t *2,this,this.fakeDie,[t]);
	}


	/**
	*重生
	*/
	__proto.fakeRebir=function(){
		if (this.self==0){
			GamingView.I.unLockUser();
		}

		this.userTopView.visible=true;
		this._anime.alpha=1;
		EffectPool.I.createEffectAni("fh",this.x+1 / 2 *this.displayWidth,this.y+1 / 2 *this.displayHeight,Player.I.roleForeLayer,this);
	}


	__proto.changeBall=function(num){}
	/**
	*更新球的位置
	*/
	__proto.updateBall=function(){
		if (this.self==0){
			if (this.toushe){
			}
		}

	}


	/**
	*Ai锁定相关
	*@param ai
	*/
	__proto.aiLockMe=function(ai){
		if ((this._lockMeAi[0] !=ai)&& (this._lockMeAi[1] !=ai)){
			if (this._lockMeAi[0]==null)this._lockMeAi[0]=ai;
			else this._lockMeAi[1]=ai;
			this._lockMeAiNum++;
		}

	}


	__proto.aiUnLockMe=function(ai){
		if ((this._lockMeAi[0]==ai)|| (this._lockMeAi[1]==ai))
			this._lockMeAiNum--;
	}


	__proto.lockUserAiNum=function(){
		return this._lockMeAiNum;
	}


	__proto.clearLockAi=function(){
		this._lockMeAi[0]=null;
		this._lockMeAi[1]=null;
		this._lockMeAiNum=0;
	}


	/**
	*开始蓄力
	*@param target 作用对象
	*@param time 持续时间
	*@callBack 回调方法
	*/
	__proto.init=function(evt,time,callBack,index){
		this.preTouchId=evt.touchId;
		var target=evt.target;
		this._callBack=callBack;
		this._callBackTarget=target;
		Laya.timer.once(time,this,this.beginXuLi,[index]);
		target.on("mouseup",this,this.onTargetUp);
		(target)._touchId=evt.touchId;
		if (!(target).isDobuleContrl)
			target.on("mouseout",this,this.onTargetUp);
		target.on("keyup",this,this.onTargetUp);
	}


	__proto.buttonDown=function(target){
		this._callBackTarget=target;
	}


	__proto.buttonUp=function(){}
	/**
	*鼠标抬起来
	*@param evt
	*/
	__proto.onTargetUp=function(evt){
		if (evt.type=="mouseout" && (evt.target)._touchId !=evt.touchId){
			return;
		}

		if (evt && evt.type=="mouseup" && evt.currentTarget==Laya.stage)return;
		Laya.timer.clear(this,this.beginXuLi);
		this.onClearEvent(evt.target);
		this._callBack && this._callBack.run();
	}


	/**
	*清除注册的按键消息
	*@param target
	*/
	__proto.onClearEvent=function(target){
		target.off("mouseup",this,this.onTargetUp);
		target.off("keyup",this,this.onTargetUp);
		target.off("mouseout",this,this.onTargetUp);
	}


	/**
	*给服务器发送蓄力开始消息
	*@param index 0 普攻 1 技能 2 道具
	*/
	__proto.sendToSever=function(index){
		this.skillindex=index;
		SnowUtils.battleMsg.xuli(index);
	}


	/**
	*蓄力准备开始
	*@param target
	*@param index 0普攻 1技能 2道具
	*/
	__proto.beginXuLi=function(index){
		if (index==1)return;
		var item=ConfigData.skillCfg[this.skillIds[index]];
		if (!item || !item.xuliMaxScale){
			return;
		}

		this.currentScale=this.scaleX;
		this.changeScale=this.scaleX;
		this.sendToSever(index);
	}


	//private var //_xuliStart:EffectObject;
	__proto.addXuliStart=function(){}
	/*
	//_xuliStart ||=EffectPool.I.createSingleEffectAni(enumEffectType.ANI//_xuliStart)as EffectObject;
	Player.I.roleForeLayer.addChild//(//_xuliStart);
	_bSetTextPos=true;
	*/
	__proto.removeXuliStart=function(){}
	__proto.addXuliMan=function(flag){this.maxImage=this.maxImage|| new Image();
		this.maxImage.skin="gaming/max.png";
		this.maxImage.pivot(1 / 2 *this.maxImage.width,1 / 2 *this.maxImage.height);
		this.maxImage.pos(1 / 2 *this.width,1 / 2 *this.height);
		this.addChild(this.maxImage);
		this._xuliLevel=2;
		if (Player.I.posInView(this._x,this._y,300))
			Tween.to(this.maxImage,{y:-65},500,Ease.bounceInOut);
		else this.maxImage.y-=65;
		this._bSetTextPos=true;
	}


	/**
	*蓄力超时直接弹起发射
	*/
	__proto.onChaoShi=function(){
		var evt=new Event();
		evt.nativeEvent={};
		evt.type="mouseup";
		evt.target=this._callBackTarget;
		evt.touchId=this.preTouchId;
		this._callBackTarget.event("mouseup",[evt]);
	}


	//alert("jiba2"+userMoveAngle);
	__proto.removeXuliMan=function(){
		this.maxImage && this.maxImage.removeSelf();
	}


	/**
	*蓄力状态变化
	*@param level
	*/
	__proto.changeXuliState=function(level){
		this._xuliLevel=level;
	}


	/**
	*服务器端发送过来蓄力开始
	*/
	__proto.onBeginXuli=function(skillid){
		this.changeXuliState(1);
		var item=ConfigData.skillCfg[skillid];
		if (this.self==0){
			if (item && item.xuliScaleSpeed){
				var play=Player.I;
				var sv=play._mapScaleValues[0];
				play.setNewScale(item.xuliMaxScale *sv,1);
				play.setSpeed(item.xuliScaleSpeed,1);
				play.setSpeed(2 *item.xuliScaleSpeed,2);
				play.setIndex(1);
			}
		}

		if (this._anime)
			this.curS=this.scaleY;
		var arr=[];
		if (item && item.xuliEffect){
			arr=item.xuliEffect;
		};

		var id=0;
		if (arr && arr.length > 0){
			id=arr[0];
			var midX=this._x+this.displayWidth / 2;
			var midY=this._y+this.displayHeight / 2;
			if (id){
				SkillManger.end(id,this,arr);
				this._xuliEff=SkillManger.start(id,this,midX,midY,null,arr);
			}
		}

	}


	/**
	*服务器发来的蓄力结束
	*@param s
	*/
	__proto.onEndXuli=function(s,skillid){
		(s===void 0)&& (s=0);
		(skillid===void 0)&& (skillid=-1);
		if (skillid !=-1){
			var obj=ConfigData.skillCfg[skillid];
			if (obj){
				var arr=obj.xuliEffect;
				var id=0;
				if (arr && arr.length > 0){
					id=arr[0];
					var midX=this._x+this.displayWidth / 2;
					var midY=this._y+this.displayHeight / 2;
					id && SkillManger.end(id,this,arr);
					this._xuliEff=null;
				}
			}
		}

		else if(this._xuliEff){
			this._xuliEff.reset();
			this.removeFollow(this._xuliEff);
			SkillManger.endex(1,this,this._xuliEff);
			SkillManger.endex(5,this,this._xuliEff);
			this._xuliEff=null;
		}

		this.changeXuliState(0);
		if (this.self==0){
			this.removeBtnXuliEffect();
			var p=Player.I;
			p.setNewScale(p._mapScaleValues[0],2);
			p.setIndex(2);
			this.skillindex=-1;
		}

		this.curS=1;
		this.graphics.clear();
	}


	/**
	*服务器通知蓄力结束播放动画
	*/
	__proto.addXuliEnd=function(){
		var _$this=this;
		this.removeXuliStart();
		this.removeXuliMan();
		if (this._xuliLevel==2 && this.maxImage){
			if (this.self==0){
				Tween.to(this.maxImage,{alpha:0},500,Ease.bounceInOut,Handler.create(this,function(){
					_$this.maxImage.alpha=1;
					_$this.maxImage.removeSelf();
					_$this._xuliLevel=0;
				}));
			}
			else{
				this.maxImage.alpha=1;
				this.maxImage.removeSelf();
				this._xuliLevel=0;
			}
		}

	}


	/**
	*技能瞬移
	*@param deltax
	*@param deltay
	*/
	__proto.onShuiYi=function(desx,desy){
		if (this._anime && this._anime.count){
			var texture=Loader.getRes(this.animePath+"/"+ActorObject._animeArr[this._curAction]+(this._anime.count-1)+".png");
			if (this.moveShadowEff==null){
				this.moveShadowEff=new MoveShadowEffect();
				this.moveShadowEff.alpha=0.4;
			}
			this.moveShadowEff.effectContainer=Player.I.roleBackLayer;
			this.moveShadowEff.tex=texture;
			this.moveShadowEff.pos(this.x,this.y);
			this.moveShadowEff.move(0,0,desx-this.x,desy-this.y,300);
			this.moveRightNow(Point.TEMP.setTo(desx,desy));
			this._bSetTextPos=true;
		}

	}


	/**
	*移动动画
	*/
	__proto.animeMoveMe=function(angle){
		if (!this._anime)return;
		var dir=0 | ((angle+22.5)% 360 / 45);
		if (!ActorObject._ANILIB[this._sourceID] || this._isChgRabbit){
			this.animeMove(dir);
			return;
		};

		var dir24=0 | ((angle+7.5)% 360 / 15);
		if (enumRoomType.nowType==100){
			GuideMgrI.instance.isMove=true;
			if (GuideMgrI.instance.moveNum > GuideMgrI.instance.totalNum){
				GuideMgrI.instance.moveNum=0;
			}
		}

		if (this.canGoNext){
			this._isAttack=this._isXuliAttack=false;
			this.canGoNext=false;
		}

		this.gantan && this.removeGanTan();
		if (this.isPlayingNoMoveAnime()){
			this._nextAction=5+this._dirIndex;
			this._nextDir=dir;
			this._nextDir24=dir24
			return;
		}

		else{
			this._nextAction=0;
		}

		if ((this._curAction < 15 || this._curAction >=20)&& (this.isMove && (this._dir24==dir24))){
			return;
		}

		this._dir24=dir24;
		this._dir=dir;
		this.dirTurnIndexMe24();
		this.isMove=true;
		this._isStand=false;
		this._curAction=5+this._dirIndex;
		this.aniBool=true;
		var count=this._roleCfg.frameCount[1];
		if (this.preMove){
			(this._anime)._frames=Animation.framesMap[ActorObject._animeMoveMeArr[this._dir24Index]+this._sourceID];
		}

		else{
			this.playAnimeMe(true,0);
		}

	}


	/**
	*自己跑
	*@param loop
	*/
	__proto.playAnimeMe=function(loop,start){
		if (this.snowFlag)
			return;
		this.preMove=true;
		this._anime.interval=this._roleCfg.baseFrameRate[1] *this.scaleX / this.frameRate *0.36;
		this._anime.play(start,loop,ActorObject._animeMoveMeArr[this._dir24Index]+this._sourceID);
	}


	//Laya.timer.clear(this,_remove////paopao);
	__getset(0,__proto,'smaxSpeed',_super.prototype._$get_smaxSpeed,function(n){
		if (n !=this._smaxSpeed){
			this._smaxSpeed=n;
			if (n > 0.36)
				this.frameRate=0.2628;
			else
			this.frameRate=n *(1-n)+0.0324;
			if (n > 0 && this._anime){
				var i=Math.floor(this._curAction / 5);
				this._anime.interval=this._roleCfg.baseFrameRate[i] *this.scaleX / this.frameRate *0.36;
			}
		}

	});


	__getset(0,__proto,'level',_super.prototype._$get_level,function(level){
		this._level=level;
		if (this.self==0 && this._level > 0){
			var jj=ConfigData.LvData[level];
			this.cdTimes=isNaN(jj.bulletIntervalScale)? 1 :jj.bulletIntervalScale;
		}

	});


	__getset(0,__proto,'hp',_super.prototype._$get_hp,function(hp){
		if (hp > this._maxHp){
			hp=this._maxHp;
		}

		if (hp < this._hp){
			this.userTopView.updateCurrentB(this._hp,hp);
		}

		this._hp=hp;
	});


	__getset(0,__proto,'jifen',_super.prototype._$get_jifen,function(value){
		var _$this=this;
		_super.prototype._$set_jifen.call(this,value);
		var jj=ConfigData.LvData[this.level];
		if (jj){
			{
				var d=ActorObject.levelList[this.level];
				this.lv1=(value-d.before)/ d.fm;
				if (this.lv1 < 0)this.lv1=0;
				else if (this.lv1 > 1)this.lv1=1;
				if (this.self==0){
					if (this.curLevel !=this.level){
						var target=GamingView.I.levelProBar.getChildAt(1);
						var target1=GamingView.I.clipLv;
						Tween.to(target,{scaleY:1.2,alpha:0},500,Ease.sineOut,Handler.create(this,function(){
							target.scaleY=1;
							target.alpha=1;
							_$this.curLevel=_$this.level;
						}),0,true);
						Tween.to(target1,{scaleX:1.2,scaleY:1.2,alpha:0},500,Ease.sineOut,Handler.create(this,function(){
							target1.scale(1,1);
							target1.alpha=1;
							_$this.curLevel=_$this.level;
						}),0,true);
					}
					GamingView.I.clipLv.value=this.level+"";
					GamingView.I.levelProBar.value=this.lv1;
				}
			}
		}

		if (this.self==0){
			GamingView.I.viewInfo.updateExp(value);
		}

	});


	__getset(0,__proto,'alpha',_super.prototype._$get_alpha,function(value){
		_super.prototype._$set_alpha.call(this,value);
		this.aniInvincible && (this.aniInvincible.alpha=value);
		this._skillShieldEff && (this._skillShieldEff.alpha=value);
		this.attackCircle && this.attackCircle.setAlpha(value);
		(this._yunXingxing && this._yunXingxing.parent)&& (this._yunXingxing.alpha=value);
		for (var i=0,n=this._fllowSp.length;i < n;i++){
			(this._fllowSp [i]).alpha=value;
		}

	});


	__getset(0,__proto,'scaleX',_super.prototype._$get_scaleX,function(value){
		var style=this.getStyle();
		if (style._tf.scaleX===value)return;
		if (this._anime){
			var i=Math.floor(this._curAction / 5);
			this._anime.interval=this._roleCfg.baseFrameRate[i] *this.scaleX / this.frameRate *0.36;
		}

		_super.prototype._$set_scaleX.call(this,value);
		this._bscaleChg=true;
	});


	__getset(0,__proto,'scaleY',_super.prototype._$get_scaleY,function(value){
		var style=this.getStyle();
		if (style._tf.scaleY===value)return;
		_super.prototype._$set_scaleY.call(this,value);
		this._bscaleChg=true;
	});


	//}
	__getset(0,__proto,'DX',function(){
		if (this.self==0)
			return this._x+this.displayWidth / 2-Player.I.getViewportX();
		else
		return this._x+this.displayWidth / 2;
	});


	__getset(0,__proto,'visible',_super.prototype._$get_visible,function(value){
		if (this._style.visible !=value){
			_super.prototype._$set_visible.call(this,value);
			if (this._anime){
				this._anime.visible=(this.isSnow?false:value);
			}
			this.aniInvincible && (this.aniInvincible.visible=value);
			this._skillShieldEff && (this._skillShieldEff.visible=value);
			(this.attackCircle && this._uid==Player.curUID)&& this.attackCircle.setVisible(value);
			(this._yunXingxing && this._yunXingxing.parent)&& (this._yunXingxing.visible=value);
			for (var i=0,n=this._fllowSp.length;i < n;i++){
				(this._fllowSp [i]).visible=value;
			}
		}

	});


	__getset(0,__proto,'DY',function(){
		if (this.self==0)
			return this._y+this.displayHeight / 2-Player.I.getViewportY();
		else
		return this._y+this.displayHeight / 2;
	});


	ActorObject.releaseAll=function(){
		for (var i in ActorObject._ANILIB){
			if (isNaN(i)){
				var texture=Laya.loader.getRes("res/"+i+".atlas");
				if (texture){
					var arr=texture.pics;
					for (var j=0,len=arr.length;j < len;j++){
						var item=arr[j];
						item&&item.releaseResource();
					}
				}
			}
		}

	}


	ActorObject.ATTACKWITH=32;
	ActorObject.ATTACKHEIGHT=58;
	ActorObject.BACKDISTANCE=0;
	ActorObject.XULIBEGINTIME=500;
	ActorObject.HURTTIME=350;
	ActorObject.CANXULISCORE=300;
	ActorObject.BASESPEED=0.36;
	ActorObject.QuestList={};
	ActorObject.hasBlood=false;
	ActorObject.ANI_STAND=0;
	ActorObject.ANI_MOVE=5;
	ActorObject.ANI_ATTACK=10;
	ActorObject.ANI_HURT=15;
	ActorObject.ANI_XULI=20;
	ActorObject.ANI_DIE=30;
	ActorObject._regainTime=1000;
	ActorObject._animeArr1=["standDown","standXDown","standRight","standXUp","standUp","moveDown","moveXDown","moveRight","moveXUp","moveUp","attackDown","attackXDown","attackRight","attackXUp","attackUp","hurtDown","hurtXDown","hurtRight","hurtXUp","hurtUp","xuliDown","xuliXDown","xuliRight","xuliXUp","xuliUp","xuliattackDown","xuliattackXDown","xuliattackRight","xuliattackXUp","xuliattackUp","die"];
	ActorObject._animeArr2=["standDown","standXDown","standRight","standXUp","standUp","moveDown","moveXDown","moveRight","moveXUp","moveUp"];
	ActorObject._animeArr=[];
	ActorObject._animeMoveMeArr=[];
	ActorObject.JUJI=0x1;
	ActorObject.SNOWMAN=0x2;
	ActorObject.LOCK=0x4;
	ActorObject.CHONGZHUANG=0x8;
	ActorObject.ATTACK=0x10;
	ActorObject.oneToTop=0;
	ActorObject.levelList=null
	ActorObject._whiteColorFilter=[];
	ActorObject._ANILIB={};
	ActorObject.beHitShakeTime=300;
	ActorObject.beHitShakeNumMax=20;
	ActorObject.beHitShakeNumMin=-20;
	__static(ActorObject,
	['deltaRate',function(){return this.deltaRate=[0,1,0,0,1,0,0];},'ll',function(){return this.ll=91 / 93;},'ll1',function(){return this.ll1=2 / 93;},'_createView_resArr',function(){return this._createView_resArr=[{url:"ani/donghua/yunshi.ani",type:"json"},{url:"ani/donghua/SiWang.ani",type:"json"}];},'flipX',function(){return this.flipX=Matrix.create();}
	]);
	ActorObject.__init$=function(){
		//"x":35,"y":47,"zOrder":0,"pivot":3
		//class voSnowBallCfgItem
		voSnowBallCfgItem=(function(){
			function voSnowBallCfgItem(){
				this.x=0;
				this.y=0;
				this.zOrder=0;
				this.pivot=0;
			}
			__class(voSnowBallCfgItem,'');
			return voSnowBallCfgItem;
		})()

	}


	return ActorObject;
	})(RoleObject)


	/**
	*熊对象类
	*@author luohuantao
	*/
	//class laya8.client.player.game.BearObject extends laya8.client.player.game.RoleObject
	var BearObject=(function(_super){
		function BearObject(uid){
			this.isAtStatus=false;
			this.lv1=NaN;
			this.isBear=true;
			this.bearTopView=null;
			this.isPlayingBeHitAni=false;
			this._beHitAni=null;
			BearObject.__super.call(this,uid);
			this.bearTopView=new BearTopView();
			this.addChild(this.bearTopView);
		}

		__class(BearObject,'laya8.client.player.game.BearObject',_super);
		var __proto=BearObject.prototype;
		/**隐藏头顶信息*/
		__proto.hideUserTop=function(){
			this.bearTopView.hide();
		}

		/**显示头顶信息 */
		__proto.showUserTop=function(){
			this.bearTopView.show();
		}

		/**
		*显示对象
		*@param sourceID
		*/
		__proto.createView=function(sourceID,group){
			this.hasPath=true;
			this.isDie=false;
			this.isHide=false;
			this.alpha=1;
			this._sourceID=sourceID;
			var key="BearObject:"+sourceID;
			var aniPool=Pool.getItem(key);
			if (!aniPool){
				this._roleImg=new Image("res/role/default.png");
				this.addChild(this._roleImg);
			}
			this._anime=aniPool || SourceLib.newWithLib(null,sourceID,2,group);
			this._anime.poolID=key;
			this._animeWidth=this._anime.width;
			this._animeHeight=this._anime.height;
			this._anime.pivot(this._animeWidth / 2,this._animeHeight);
			this._anime.pos(this.__WW / 2,this.__HH);
			this._anime.loadData(Handler.create(this,this.createAnimation));
			this.bearTopView.start();
			if ((0 | (this._smaxSpeed *1000))/ 1000 > this._roleCfg.SmaxSpeed){
				this.isAtStatus=true;
			}
		}

		__proto.createAnimation=function(animePath){
			this._roleImg && this._roleImg.destroy();
			this._roleImg=null;
			if (this.destroyed)return;
			if (!BearObject._ANILIB[animePath]){
				var frameCounts=this._roleCfg.frameCount;
				BearObject._ANILIB[animePath]=true;
				var tempValue=0;
				for (var i=0;i < BearObject._animeArr.length;i++){
					tempValue=this.getActionNum(i);
					if (tempValue==-1)continue ;
					var urlArr=[];
					for (var j=0;j < frameCounts[tempValue];j++){
						urlArr.push(animePath+"/"+BearObject._animeArr[i]+j+".png");
					}
					Animation.createFrames(urlArr,BearObject._animeArr[i]+this._sourceID);
				}
			}
			this._anime.on("complete",this,this.onAniEnd);
			this.animeStand();
			this.addChild(this._anime);
		}

		/**
		*获取动作序号
		*@param index _animeArr数组中的动作 0-_animeArr.length 之间的值
		*@return 当前动作在表数据中对应数组下标值
		*/
		__proto.getActionNum=function(i){
			if (i >=0 && i < 5)return 0;
			else if (i >=5 && i < 10)return 1;
			else if (i >=10 && i < 15)return 2;
			else if (i >=15 && i < 20)return 3;
			else if (i >=20 && i < 25)return 4;
			else if (i==25)return 5;
			return-1;
		}

		/**是否播放不能移动的动画*/
		__proto.isPlayingNoMoveAnime=function(){
			return this._isAttack;
		}

		/**是否播放站立以外的动画*/
		__proto.isPlayingOtherAnime=function(){
			return this._isAttack || this._isHurt || this.isMove;
		}

		/**切换动画动画-移动和站立之前切换*/
		__proto.onAniChg=function(){
			if (!this.isAniEnd){
				if (!this.isPlayingOtherAnime()){
					if (!this._isStand){
						this.animeStand();
					}
				}
				return;
			}
			this.isAniEnd=false;
			if (this._nextAction){
				if (this._nextAction >=15 && this._nextAction < 20)
					this.animeAtMove(this._nextDir);
				else if (this._nextAction >=20)
				this.animeMove(this._nextDir);
				this._nextAction=undefined;
			}
			if (!this.isPlayingOtherAnime()){
				if (!this._isStand){
					this.animeStand();
				}
			}
		}

		/**每个动作播完调用-用于控制只播放一次的状态*/
		__proto.onAniEnd=function(){
			this.isAniEnd=true;
			this._isAttack=false;
			this._isHurt=false;
		}

		/**
		*播放动画
		*@param loop 是否循环播放。
		*@param start 从第几帧开始播
		*/
		__proto.playAnime=function(loop,start){
			(start===void 0)&& (start=0);
			if (this.isDie)return;
			var tempValue=this.getActionNum(this._curAction);
			this.preMove=(tempValue==3||tempValue==4);
			if (tempValue==-1)return;
			this._anime.interval=this._roleCfg.baseFrameRate[tempValue];
			this._anime.play(start,loop,BearObject._animeArr[this._curAction]+this._sourceID);
		}

		/**播放待机动画*/
		__proto.animeStand=function(){
			this._isStand=true;
			this.isMove=false;
			this.dirTurnIndex();
			this._curAction=0+this._dirIndex;
			this.playAnime(true);
		}

		/**
		*移动动画
		*/
		__proto.animeMove=function(dir){
			if (this.isAtStatus){
				this.animeAtMove(dir);
				return;
			}
			if (this.isPlayingNoMoveAnime()){
				this._nextAction=20+this._dirIndex;
				this._nextDir=dir;
				return;
			}
			else{
				this._nextAction=0;
			}
			this._dir=dir;
			this.dirTurnIndex();
			this._curAction=20+this._dirIndex;
			if (this.preMove){
				(this._anime)._frames=Animation.framesMap[BearObject._animeArr[this._curAction]+this._sourceID];
			}
			else{
				this.playAnime(true);
			}
			this.isMove=true;
			this._isStand=false;
		}

		/**
		*狂暴移动动画
		*/
		__proto.animeAtMove=function(dir){
			if (this.isPlayingNoMoveAnime()){
				this._nextAction=15+this._dirIndex;
				this._nextDir=dir;
				return;
			}
			else{
				this._nextAction=0;
			}
			this._dir=dir;
			this.dirTurnIndex();
			this._curAction=15+this._dirIndex;
			if (this.preMove){
				(this._anime)._frames=Animation.framesMap[BearObject._animeArr[this._curAction]+this._sourceID];
			}
			else{
				this.playAnime(true);
			}
			this.isMove=true;
			this._isStand=false;
		}

		/**
		*攻击动画
		*/
		__proto.animeAttck=function(dir){
			if (dir !=-1){
				this._dir=dir;
				this.dirTurnIndex();
			}
			this._isAttack=true;
			this.isMove=false;
			this._isStand=false;
			this._curAction=5+this._dirIndex;
			this.playAnime(false);
		}

		/**
		*受伤动画-攻击时不播放
		*@param bulletOwerID 子弹拥有者的uid--用于判断自己攻击到被人后播放声音
		*@param bulletSkillID 子弹携带的技能id--用于判断角色被击后的效果处理
		*/
		__proto.animeHurt=function(bulletOwerID,bulletSkillID){
			(bulletOwerID===void 0)&& (bulletOwerID=0);
			(bulletSkillID===void 0)&& (bulletSkillID=0);
			this.addRoleBeHitAni();
			if (this._isAttack || this._isHurt)return;
			if((this._curAction < 10)|| (this._curAction >=15)){
				this._nextAction=this._curAction;
			}
			this._nextDir=this._dir;
			this.inview && this.playHurtSound(bulletOwerID);
			this._isHurt=true;
			this._isStand=false;
			this.isMove=false;
			this._curAction=10+this._dirIndex;
			this.playAnime(false);
		}

		__proto.playHurtSound=function(bulletOwerID){
			if (bulletOwerID==Player.curUID){
				SoundManager.playSound(ConfigData.soundCfg[40]);
			}
		}

		/**
		*死亡动画
		*/
		__proto.animeDie=function(){
			_super.prototype.animeDie.call(this);
			this._curAction=25;
			var isLoop=(this._roleCfg.dieLoop==1);
			this.playAnime(isLoop);
		}

		//-------------------------------------------------------------------------------------------------------
		__proto._setTextPos=function(){
			var midX=this._x+this.displayWidth / 2;
			var midY=this._y+this.displayHeight / 2;
			this._setTextPosExt(midX,midY);
			(this._beHitAni && this._beHitAni.visible)&& this._beHitAni.pos(midX+8,midY+8,true);
		}

		__proto._sbsbsbsb=function(){
			this._anime.filters=null;
			this.isPlayingBeHitAni=false;
		}

		__proto.addRoleBeHitAni=function(){
			if(this.chkShowEff())return;
			if (this.isPlayingBeHitAni)return;
			if (!this.inview){
				return;
			}
			this.isPlayingBeHitAni=true;
			this._anime.filters=BearObject.red;
			this.timer.once(500,this,this._sbsbsbsb);
			var eff;
			eff=EffectPool.I.createEffectAni("hitEff",this._x+this.displayWidth / 2,this._y+this.displayHeight / 2+8,Player.I.roleForeLayer);
			eff.filters=null;
			eff.rotation=this.bulletAngleInHurt;
		}

		/**被击攻击圈特效播放完毕做销毁处理**/
		__proto.onBeHitAniComplete=function(){
			if(this._beHitAni){
				this._beHitAni.visible=false;
				this._beHitAni.stop();
			}
		}

		/**血条显示*/
		__proto.setlv1=function(){
			this.lv1=this._hp / this._maxHp;
		}

		__proto._chgOneProperty=function(proD,uid){
			var data;
			switch (proD.propertyType){
				case 4:;
					var nowSpeed=0 | (this._smaxSpeed *1000);
					var newSpeed=0 | (proD.propertyValue *1000);
					if (nowSpeed >=newSpeed){
						this.isAtStatus=false;
						this.animeMove(this._dir);
					}
					else if (nowSpeed < newSpeed){
						this.isAtStatus=true;
						this.animeAtMove(this._dir);
					}
					this.smaxSpeed=proD.propertyValue;
					this.getPath().setSpeed();
					break ;
				}
		}

		__proto.die=function(){
			this.timer.once(3000,this,this.destroy,[true]);
			this.animeDie();
			this._clear();
		}

		__proto.destroy=function(destroyChild){
			(destroyChild===void 0)&& (destroyChild=true);
			Player.curBear=null;
			this._clear();
			this.scale(1,1);
			this.resetStatus();
			this.removeSelf();
			this._inview=false;
			if (this._anime){
				this._anime.stop();
				this._anime.removeSelf();
				Pool.recover(this._anime.poolID,this._anime);
				this._anime=null;
			}
			if(this._beHitAni){
				this._beHitAni.stop();
				this._beHitAni.removeSelf();
				Pool.recover("BeHitAni.ani",this._beHitAni);
				this._beHitAni=null;
			}
			_super.prototype.destroy.call(this,destroyChild);
		}

		__proto._clear=function(){
			this.isDie=true;
			this._preX=this._preY=0;
			this.bIsInGlass=false;
			this.isAtStatus=false;
			this.hasPath=false;
			if (this._anime){
				this._anime.off("complete",this,this.onAniEnd);
				this._anime.filters=null;
			}
			this.bearTopView && this.bearTopView.resetState();
			this._roleImg && this._roleImg.destroy();
			this._roleImg=null;
		}

		//重置状态
		__proto.resetStatus=function(){
			this._dir=0;
			this._dirIndex=0;
			this._isStand=false;
			this.isMove=false;
			this._isAttack=false;
			this._isHurt=false;
			this._yunXingxing && this.removeYunEff();
		}

		__proto.update=function(t){
			if (this.isDie)return;
			this.inview=(Stat.loopCount % 5 !=0)? this.visible=Player.I.posInView(this.x,this.y,100):true;
			if (!this.isPlayingNoMoveAnime()){
				if(this.inview)laya8.client.player.NetObject.prototype.update.call(this,t);
				(this.isMove)&& (this._path)._setNetObjPos(t);
				this._inview || this.firstInView();
			}
			this.onAniChg();
			if (!this.visible || !this.inview)return;
			if(this._bSetTextPos || this._preX !=this._x || this._preY !=this._y){
				this._bSetTextPos=false;
				this._setTextPos();
				this._preX=this._x;
				this._preY=this._y;
				this.bIsInGlass=this.isInGlass();
			}
			if(Stat.loopCount%5===0)this._chgAlphaByGlass();
		}

		__proto.updatePath=function(t){
			if (this.isDie)return;
			if (!this.isPlayingNoMoveAnime()){
				if(this.inview)laya8.client.player.NetObject.prototype.update.call(this,t);
				(this.isMove)&& (this._path)._setNetObjPos(t);
			}
		}

		__getset(0,__proto,'hp',_super.prototype._$get_hp,function(value){
			if (value > this._maxHp){
				value=this._maxHp;
			}
			if (value < this._hp){
				this.bearTopView.updateCurrentB(this._hp,value);
			}
			this._hp=value;
			this.setlv1();
		});

		__getset(0,__proto,'maxHp',_super.prototype._$get_maxHp,function(value){
			_super.prototype._$set_maxHp.call(this,value);
		});

		BearObject.ANI_STAND=0;
		BearObject.ANI_ATTACK=5;
		BearObject.ANI_HURT=10;
		BearObject.ANI_MOVEAT=15;
		BearObject.ANI_MOVE=20;
		BearObject.ANI_DIE=25;
		BearObject._ANILIB={};
		__static(BearObject,
		['ANI_EXCEL',function(){return this.ANI_EXCEL={
				"0":0,
				"5":1,
				"10":2,
				"15":3,
				"20":4,
				"26":5
			};},'_animeArr',function(){return this._animeArr=[
			"standDown","standXDown","standRight","standXUp","standUp",
			"attackDown","attackXDown","attackRight","attackXUp","attackUp",
			"hurtDown","hurtXDown","hurtRight","hurtXUp","hurtUp",
			"moveAtDown","moveAtXDown","moveAtRight","moveAtXUp","moveAtUp",
			"moveDown","moveXDown","moveRight","moveXUp","moveUp",
			"Die"];},'red',function(){return this.red=[ new ColorFilter(
			[0,0.2,0.7,0.7,0.2,
			0,0.2,0,0,0.1,
			0,0,0.2,0,0.1,
			0,0,0,1,1])];}
		]);
		return BearObject;
	})(RoleObject)


	/**
	*...
	*@author
	*/
	//class laya8.client.player.game.DoorObject extends laya8.client.player.game.TreeObject
	var DoorObject=(function(_super){
		function DoorObject(uid){
			DoorObject.__super.call(this,uid);
			DoorObject.Door=this;
		}

		__class(DoorObject,'laya8.client.player.game.DoorObject',_super);
		DoorObject.Door=null
		return DoorObject;
	})(TreeObject)


	/**
	*<code>View</code> 是一个视图类。
	*@internal <p><code>View</code></p>
	*/
	//class laya.ui.View extends laya.ui.Box
	var View=(function(_super){
		function View(){
			this._idMap=null;
			this._aniList=null;
			View.__super.call(this);
		}

		__class(View,'laya.ui.View',_super);
		var __proto=View.prototype;
		/**
		*@private
		*通过视图数据创建视图。
		*@param uiView 视图数据信息。
		*/
		__proto.createView=function(uiView){
			if (uiView.animations && !this._idMap)this._idMap={};
			View.createComp(uiView,this,this);
			if (uiView.animations){
				var anilist=[];
				var animations=uiView.animations;
				var i=0,len=animations.length;
				var tAni;
				var tAniO;
				for (i=0;i < len;i++){
					tAni=new FrameAnimation();
					tAniO=animations[i];
					tAni._setUp(this._idMap,tAniO);
					this[tAniO.name]=tAni;
					tAni._setControlNode(this);
					switch (tAniO.action){
						case 1:
							tAni.play(0,false);
							break ;
						case 2:
							tAni.play(0,true);
							break ;
						}
					anilist.push(tAni);
				}
				this._aniList=anilist;
			}
			if (this._width > 0 && uiView.props.hitTestPrior==null && !this.mouseThrough)this.hitTestPrior=true;
		}

		/**
		*@private
		*装载UI视图。用于加载模式。
		*@param path UI资源地址。
		*/
		__proto.loadUI=function(path){
			var uiView=View.uiMap[path];
			uiView && this.createView(uiView);
		}

		/**
		*<p>销毁此对象。</p>
		*@param destroyChild 是否同时销毁子节点，若值为true,则销毁子节点，否则不销毁子节点。
		*/
		__proto.destroy=function(destroyChild){
			(destroyChild===void 0)&& (destroyChild=true);
			if (this._aniList)this._aniList.length=0;
			this._idMap=null;
			this._aniList=null;
			laya.ui.Component.prototype.destroy.call(this,destroyChild);
		}

		View._regs=function(){
			var key;
			for (key in View.uiClassMap){
				ClassUtils.regClass(key,View.uiClassMap[key]);
			}
		}

		View.createComp=function(uiView,comp,view){
			comp=comp || View.getCompInstance(uiView);
			if (!comp){
				console.warn("can not create:"+uiView.type);
				return null;
			};
			var child=uiView.child;
			if (child){
				for (var i=0,n=child.length;i < n;i++){
					var node=child[i];
					if (comp.hasOwnProperty("itemRender")&& (node.props.name=="render" || node.props.renderType==="render")){
						(comp).itemRender=node;
						}else if (node.type=="Graphic"){
						ClassUtils.addGraphicsToSprite(node,comp);
						}else if (ClassUtils.isDrawType(node.type)){
						ClassUtils.addGraphicToSprite(node,comp,true);
						}else {
						var tChild=View.createComp(node,null,view);
						if (node.type=="Script"){
							if ("owner" in tChild){
								tChild["owner"]=comp;
								}else if ("target" in tChild){
								tChild["target"]=comp;
							}
							}else if (node.props.renderType=="mask" || node.props.name=="mask"){
							comp.mask=tChild;
							}else {(
							tChild instanceof laya.display.Sprite )&& comp.addChild(tChild);
						}
					}
				}
			};
			var props=uiView.props;
			for (var prop in props){
				var value=props[prop];
				View.setCompValue(comp,prop,value,view);
			}
			if (Laya.__typeof(comp,'laya.ui.IItem'))(comp).initItems();
			if (uiView.compId && view && view._idMap){
				view._idMap[uiView.compId]=comp;
			}
			return comp;
		}

		View.setCompValue=function(comp,prop,value,view){
			if (prop==="var" && view){
				view[value]=comp;
				}else {
				comp[prop]=(value==="true" ? true :(value==="false" ? false :value))
			}
		}

		View.getCompInstance=function(json){
			var runtime=json.props?json.props.runtime:null;
			var compClass;
			compClass=runtime ? (View.viewClassMap[runtime] || View.uiClassMap[runtime]|| Laya["__classmap"][runtime]):View.uiClassMap[json.type];
			if (json.props && json.props.hasOwnProperty("renderType")&& json.props["renderType"]=="instance")return compClass["instance"];
			return compClass ? new compClass():null;
		}

		View.regComponent=function(key,compClass){
			View.uiClassMap[key]=compClass;
			ClassUtils.regClass(key,compClass);
		}

		View.regViewRuntime=function(key,compClass){
			View.viewClassMap[key]=compClass;
		}

		View.uiMap={};
		View.viewClassMap={};
		__static(View,
		['uiClassMap',function(){return this.uiClassMap={"ViewStack":ViewStack,"LinkButton":Button,"TextArea":TextArea,"ColorPicker":ColorPicker,"Box":Box,"Button":Button,"CheckBox":CheckBox,"Clip":Clip,"ComboBox":ComboBox,"Component":Component,"HScrollBar":HScrollBar,"HSlider":HSlider,"Image":Image,"Label":Label,"List":List,"Panel":Panel,"ProgressBar":ProgressBar,"Radio":Radio,"RadioGroup":RadioGroup,"ScrollBar":ScrollBar,"Slider":Slider,"Tab":Tab,"TextInput":TextInput,"View":View,"VScrollBar":VScrollBar,"VSlider":VSlider,"Tree":Tree,"HBox":HBox,"VBox":VBox,"Sprite":Sprite,"Animation":Animation,"Text":Text,"FontClip":FontClip};}
		]);
		View.__init$=function(){
			View._regs()
		}

		return View;
	})(Box)


	/**
	*兔子类
	*@author luohuantao
	*/
	//class laya8.client.player.game.HareObject extends laya8.client.player.game.RoleObject
	var HareObject=(function(_super){
		function HareObject(uid){
			HareObject.__super.call(this,uid);
			this._inview=false;
			HareObject.randomTalkArr=ConfigData.gameCfg["hareTalk"];
			HareObject.randomTalkTime=ConfigData.gameCfg["hareTalkTime"];
			HareObject.randomTalkTime1=ConfigData.gameCfg["hareTalkTime1"];
			HareObject.randomTalkTime2=ConfigData.gameCfg["hareTalkTime2"];
		}

		__class(HareObject,'laya8.client.player.game.HareObject',_super);
		var __proto=HareObject.prototype;
		/**
		*显示对象
		*@param sourceID
		*/
		__proto.createView=function(sourceID,group){
			this.hasPath=true;
			this.isDie=false;
			this.isHide=false;
			this.alpha=1;
			this._sourceID=sourceID;
			var key="hareAni:"+sourceID;
			var aniPool=Pool.getItem(key);
			if (!aniPool){
				this._roleImg=new Image("res/role/default.png");
				this.addChild(this._roleImg);
			}
			this._anime=aniPool || SourceLib.newWithLib(null,sourceID,2,group);
			this._anime.poolID=key;
			this._animeWidth=this._anime.width;
			this._animeHeight=this._anime.height;
			this._anime.pivot(this._animeWidth / 2,this._animeHeight);
			this._anime.pos(this.__WW / 2,this.__HH);
			this._anime.loadData(Handler.create(this,this.createAnimation));
			this.randowTalk();
		}

		__proto.createAnimation=function(animePath,isLoaded){
			this._roleImg && this._roleImg.destroy();
			this._roleImg=null;
			if (this.destroyed)return;
			if (!HareObject._ANILIB[animePath]){
				HareObject._ANILIB[animePath]=true;
				var frameCounts=this._roleCfg.frameCount;
				var tempValue=0;
				for (var i=0;i < HareObject._animeArr.length;i++){
					tempValue=this.getActionNum(i);
					if (tempValue==-1)continue ;
					var urlArr=[];
					for (var j=0;j < frameCounts[tempValue];j++){
						urlArr.push(animePath+"/"+HareObject._animeArr[i]+j+".png");
					}
					Animation.createFrames(urlArr,HareObject._animeArr[i]+this._sourceID);
				}
			}
			this._anime.on("complete",this,this.onAniEnd);
			this.animeBorn();
			this.addChild(this._anime);
		}

		__proto.randowTalk=function(){
			var t1t=(Math.round(Math.random()*(HareObject.randomTalkTime2 / 1000-1))+1)*1000;
			Laya.timer.once(t1t,this,this.randowTalk1);
			Laya.timer.once(HareObject.randomTalkTime,this,this.randowTalk);
		}

		__proto.randowTalk1=function(){
			if (this.destroyed)return;
			var index=Math.round(Math.random()*(HareObject.randomTalkArr.length-1));
			if (index < 0 || index >=HareObject.randomTalkArr.length){
				this.randowTalk1();
				return;
			}
			this._showQiPao(HareObject.randomTalkArr[index],HareObject.randomTalkTime1);
		}

		/**
		*逻辑状态处理
		*@param t
		*/
		__proto.update=function(t){
			if (this.isDie)return;
			this.inview=(Stat.loopCount % 5 !=0)? this.visible=Player.I.posInView(this.x,this.y,100):true;
			if(this.inview)laya8.client.player.NetObject.prototype.update.call(this,t);
			(this.isMove)&& (this._path)._setNetObjPos(t);
			this._inview || this.firstInView();
			this.onAniChg();
			if (!this.visible || !this.inview)return;
			if(this._bSetTextPos || this._preX !=this._x || this._preY !=this._y){
				this._bSetTextPos=false;
				this.bIsInGlass=this.isInGlass();
			}
			if(Stat.loopCount%5===0)this._chgAlphaByGlass();
		}

		__proto._chgOneProperty=function(proD,uid){
			var data;
			switch (proD.propertyType){
				case 4:
					this.smaxSpeed=proD.propertyValue;
					this.getPath().setSpeed();
					break ;
				}
		}

		//重置状态
		__proto.resetStatus=function(){
			this._dir=0;
			this._dirIndex=0;
			this._isStand=false;
			this.isMove=false;
			this._isAttack=false;
			this._isHurt=false;
		}

		//是否受伤
		__proto.die=function(){
			this.animeDie();
			this.timer.once(400,this,this.clearThis);
			if(this._inview)EffectPool.I.createEffectAni("harebehit" ,this._x+this.displayWidth / 2,this._y+this.displayHeight / 2,Player.I.roleForeLayer,this);
		}

		__proto.clearThis=function(){
			this.destroy();
		}

		__proto._clear=function(){
			this.isDie=true;
			this._preX=this._preY=0;
			this.bIsInGlass=false;
			this.hasPath=false;
			if (this._anime){
				this._anime.off("complete",this,this.onAniEnd);
				this._anime.filters=null;
			}
			this._roleImg && this._roleImg.destroy();
			this._roleImg=null;
		}

		__proto.destroy=function(destroyChild){
			(destroyChild===void 0)&& (destroyChild=true);
			this._clear();
			this.scale(1,1);
			this.resetStatus();
			this.removeSelf();
			this._inview=false;
			if (this._anime){
				this._anime.stop();
				this._anime.removeSelf();
				Pool.recover(this._anime.poolID,this._anime);
				this._anime=null;
			}
			_super.prototype.destroy.call(this,destroyChild);
		}

		/**
		*获取动作序号
		*@param index _animeArr数组中的动作 0-_animeArr.length 之间的值
		*@return 当前动作在表数据中对应数组下标值
		*/
		__proto.getActionNum=function(i){
			if (i >=0 && i < 5)return 0;
			else if (i >=5 && i < HareObject._animeArr.length)return 1;
			return-1;
		}

		__proto.onAniEnd=function(){
			this.isAniEnd=true;
			this._isAttack=false;
			this._isHurt=false;
		}

		/**
		*出生动画
		*/
		__proto.animeBorn=function(){
			this.animeStand();
		}

		/**
		*移动动画
		*/
		__proto.animeMove=function(dir){
			this._dir=dir;
			this.dirTurnIndex();
			this._curAction=5+this._dirIndex;
			this.playAnime(true,this.isMove ? this._anime.index :0);
			this.isMove=true;
			this._isStand=false;
		}

		/**
		*死亡动画
		*/
		__proto.animeDie=function(){}
		/**
		*播放动画
		*@param loop 是否循环播放。
		*@param start 从第几帧开始播
		*/
		__proto.playAnime=function(loop,start){
			(start===void 0)&& (start=0);
			if (this.isDie)return;
			var tempValue=this.getActionNum(this._curAction);
			if (tempValue==-1)return;
			this._anime.interval=this._roleCfg.baseFrameRate[tempValue];
			this._anime.play(start,loop,HareObject._animeArr[this._curAction]+this._sourceID);
		}

		/**是否播放站立以外的动画*/
		__proto.isPlayingOtherAnime=function(){
			return this._isHurt || this.isMove;
		}

		/**切换动画动画-移动和站立之前切换*/
		__proto.onAniChg=function(){
			if (!this.isAniEnd){
				if(!this.isPlayingOtherAnime()&& !this._isStand)this.animeStand();
				return;
			}
			this.isAniEnd=false;
			if (this._nextAction){
				if (this._nextAction >=5){
					this.animeMove(this._nextDir);
				}
				this._nextAction=undefined;
			}
			if (!this.isPlayingOtherAnime()&& !this._isStand){
				this.animeStand();
			}
		}

		/**强制播放站立动画*/
		__proto.animeStand=function(){
			this._isStand=true;
			this.isMove=false;
			this.dirTurnIndex();
			this._curAction=0+this._dirIndex;
			this.playAnime(true);
		}

		HareObject.ANI_STAND=0;
		HareObject.ANI_MOVE=5;
		HareObject._animeArr=[
		"standDown","standXDown","standRight","standXUp","standUp",
		"moveDown","moveXDown","moveRight","moveXUp","moveUp"];
		HareObject.randomTalkArr=null
		HareObject.randomTalkTime=0;
		HareObject.randomTalkTime1=0;
		HareObject.randomTalkTime2=0;
		HareObject._ANILIB={};
		return HareObject;
	})(RoleObject)


	/**
	*...
	*@author luohuantao
	*/
	//class laya8.client.player.game.MissileObject extends laya8.client.player.game.BulletObject
	var MissileObject=(function(_super){
		function MissileObject(uid){
			this.initAngle=0;
			MissileObject.__super.call(this,uid);
		}

		__class(MissileObject,'laya8.client.player.game.MissileObject',_super);
		MissileObject.MaxTrendAngle=0;
		MissileObject.TrendSpeed=NaN
		return MissileObject;
	})(BulletObject)


	/**
	*...
	*@author luohuantao
	*/
	//class laya8.client.player.game.EffectScoreExchangeAni extends laya8.client.player.game.EffectAni
	var EffectScoreExchangeAni=(function(_super){
		function EffectScoreExchangeAni(){
			this._startTimer=NaN;
			this._hitRole=null;
			this._beHitRole=null;
			this._bHR_x=-1;
			this._bHR_y=-1;
			this._maxScale=-1;
			EffectScoreExchangeAni.__super.call(this);
		}

		__class(EffectScoreExchangeAni,'laya8.client.player.game.EffectScoreExchangeAni',_super);
		var __proto=EffectScoreExchangeAni.prototype;
		__proto.setUsers=function(hitRole,beHitRole){
			this._hitRole=hitRole;
			this._beHitRole=beHitRole;
			var behitPo=this._beHitRole.getCenterPo();
			this._bHR_x=behitPo.x;
			this._bHR_y=behitPo.y;
			this._beHitRole.recoverCenterPo(behitPo);
		}

		__proto.init=function(key,ower,bIsRender,atlas){
			(bIsRender===void 0)&& (bIsRender=true);
			_super.prototype.init.call(this,key,ower);
		}

		__proto.createView=function(){
			if (!this._aniState)return;
			if (!this._hitRole || (!this._beHitRole && (this._bHR_x==-1 && this._bHR_y==-1))){
				this.reset();
				return;
			}
			this._aniState.play();
			this.addChild(this._aniState);
			this.state=1;
			var www=this._aniState.width;
			var hhh=this._aniState.height;
			this.size(www,hhh);
			this.pivot(0,hhh/2);
			var hitPo=this._hitRole.getCenterPo();
			this.pos(hitPo.x,hitPo.y,true);
			var aa=this._bHR_x-hitPo.x;
			var bb=this._bHR_y-hitPo.y;
			this._hitRole.recoverCenterPo(hitPo);
			var distance=Math.sqrt(aa *aa+bb *bb);
			this._maxScale=distance / www;
			this.scaleX=this._maxScale;
			this._startTimer=this.timer.currTimer;
			this.isLoaded=true;
			Player.I.roleForeLayer.addChild(this);
		}

		__proto.reset=function(){
			_super.prototype.reset.call(this);
			this._hitRole=null;
			this._beHitRole=null;
			this._bHR_x=-1;
			this._bHR_y=-1;
			this._maxScale=-1;
		}

		__proto.update=function(t){
			if (!this.isLoaded)return;
			var _ho=this._hitRole;
			if (!_ho || _ho.destroyed){
				this.state=2;
				return;
			};
			var hitPo=this._hitRole.getCenterPo();
			this.inview=(Stat.loopCount % 5 !=0)? this.visible=Player.I.posInView(hitPo.x,hitPo.y,200):true;
			if (this.inview){
				var usedTimer=this.timer.currTimer-this._startTimer;
				if (usedTimer < 0){this.state=2;return;}
					if (usedTimer >=2000){this.state=2;return;};
				var ratio=usedTimer > 0 ? usedTimer / 2000 :0;
				var curSclseX=this._style._tf.scaleX;
				this.scaleX+=(ratio *(-curSclseX));
				var _bho=this._beHitRole;
				var bro=_bho && !_bho.destroyed;
				var behitPo=bro ? _bho.getCenterPo():null;
				this._bHR_x=behitPo ? behitPo.x :this._bHR_x;
				this._bHR_y=behitPo ? behitPo.y :this._bHR_y;
				var aa=this._bHR_x-hitPo.x;
				var bb=this._bHR_y-hitPo.y;
				var radians=Math.atan2(bb,aa);
				this.rotation=radians *180 / Math.PI;
				this.pos(hitPo.x,hitPo.y,true);
				this._hitRole.recoverCenterPo(hitPo);
				behitPo && this._beHitRole.recoverCenterPo(behitPo);
			}
		}

		EffectScoreExchangeAni.durationTime=2000;
		return EffectScoreExchangeAni;
	})(EffectAni)


	/**
	*...
	*@author anling
	*/
	//class laya8.client.player.game.SBBulletObject extends laya8.client.player.game.BulletObject
	var SBBulletObject=(function(_super){
		function SBBulletObject(uid){
			this.curSprCircleAniKey=null;
			this._anime=null;
			this.curAction=0;
			SBBulletObject.__super.call(this,uid);
			this._renderType &=~0x400;
		}

		__class(SBBulletObject,'laya8.client.player.game.SBBulletObject',_super);
		var __proto=SBBulletObject.prototype;
		__proto.createViewAni=function(vo,id){
			var rs=new ViewAni();
			var str=vo.url.replace("(id)","boom"+id);
			rs.init(str,"bullet/boom"+id,vo._width,vo._height);
			rs.interval=vo._interval;
			return rs;
		}

		__proto.createView=function(sourceID,group){
			this._group=group;
			this._sourceID=sourceID;
			this.curSprCircleAniKey="SBBulletAni:"+this._sourceID;
			if (this._inview){
				this.curAction=0;
				var effdata=ConfigData.effectSource ["bigSnowballRoll"];
				var aniPool=Pool.getItem(this.curSprCircleAniKey);
				this._anime=aniPool || this.createViewAni(effdata,sourceID);
				this._anime.poolID=this.curSprCircleAniKey;
				this._anime.pivot(0,10);
				this.addChild(this._anime);
				var cfg=ConfigData.elementData[this.itemid];
				this.size(this._anime.width,this._anime.height);
				this._anime.loadData(Handler.create(this,this.createAnimation));
			}
		}

		__proto.createAnimation=function(animePath){
			if (!SBBulletObject._ANILIB[animePath]){
				SBBulletObject._ANILIB[animePath]=true;
				for (var i=0;i < SBBulletObject._animeArr.length;i++){
					var urlArr=[];
					var abc=0;
					if (i==0)
						abc=8;
					else if (i==1)
					abc=7;
					else
					abc=4;
					for (var j=0;j < abc;j++){
						urlArr.push(animePath+"/"+SBBulletObject._animeArr[i]+j+".png");
					}
					Animation.createFrames(urlArr,SBBulletObject._animeArr[i]+this._sourceID);
				}
			}
			if (!this._anime)return;
			this._anime.on("complete",this,this.onAniEnd);
			this.zOrder=this.y+1 / 2 *this._anime.height;
			this.animeBorn();
			this.realeTime();
		}

		__proto._realeTime=function(){
			this.curAction=2;
			if (this._anime){
				this._anime.interval=41;
				this.playAnimation(true);
			}
		}

		__proto.realeTime=function(){
			if (this.expime>0){
				Laya.timer.once(this.expime / 2,this,this._realeTime);
			}
		}

		__proto.playAnimation=function(loop){
			this._anime.play(0,loop,SBBulletObject._animeArr[this.curAction]+this._sourceID);
		}

		__proto.onAniEnd=function(){
			if (this.curAction==1){
				this.curAction=0;
				this._anime.interval=41;
				this.playAnimation(true);
			}
		}

		__proto.animeBorn=function(){
			this.curAction=1;
			this._anime.interval=41;
			this.playAnimation(false);
		}

		__proto.destroy=function(destroyChild){
			(destroyChild===void 0)&& (destroyChild=true);
			this._inview=false;
			if (this._anime){
				this._anime.off("complete",this,this.onAniEnd);
				this._anime.stop();
				this._anime.removeSelf();
				Pool.recover(this.curSprCircleAniKey,this._anime);
				this._anime=null;
				this.curSprCircleAniKey=null;
			}
			else{
			}
			_super.prototype.destroy.call(this,destroyChild);
		}

		__proto.update=function(t){
			var ef;
			if (this.hasPath && this._path){
				if (this._path.moveStep(t)){
					if (this._lifeCycle==1){
						var scence1=Player.I.curScene;
						if (scence1 && !scence1.destroyed){
							this.playBaoSound();
							var cfg=ConfigData.elementData[this.itemid];
							if (cfg&&cfg.boom&&cfg.boom.length>0){
								SkillManger.start(cfg.boom,Player.I.netObjects[this.ownerID],this.x,this.y,{angle:this.rotation-180},cfg.boom);
							}
							else{
								ef=EffectPool.I.createEffectAni("baoEff",this.x,this.y ,Player.I.roleForeLayer);
								ef.scale(this.areaLen / 110,this.areaLen / 110);
								ef.filters=null;
							}
						}
						Player.I.removeNetObj(this._uid,this);
						return;
					}
				}
				this._inview || this.firstInView();
			}
			switch(this.state){
				case 0:
					break ;
				case 1:;
					var scence=Player.I.curScene;
					if (scence && !scence.destroyed){
						this.playBaoSound();
						var cfg=ConfigData.elementData[this.itemid];
						if (cfg&&cfg.boom&&cfg.boom.length>0){
							SkillManger.start(cfg.boom[0],Player.I.netObjects[this.ownerID],this.x,this.y,{angle:this.rotation-180},cfg.boom);
							ef&&ef.scale(this.areaLen / cfg.boom[2],this.areaLen / cfg.boom[2]);
						}
					}
					if (this.itemid !=312){
						Player.I.removeNetObj(this._uid ,this);
					}
					else{
						this.state=0;
					}
					break ;
				}
		}

		SBBulletObject._ANILIB={};
		SBBulletObject.ANI_BOOM=0;
		SBBulletObject.ANI_BORN=1;
		SBBulletObject.ANI_DIE=2;
		SBBulletObject._animeArr=[
		"boom",
		"born",
		"die"];
		return SBBulletObject;
	})(BulletObject)


	/**
	*...
	*@author luohuantao
	*/
	//class laya8.client.player.game.SnowManObject extends laya8.client.player.game.TreeObject
	var SnowManObject=(function(_super){
		function SnowManObject(uid){
			SnowManObject.__super.call(this,uid);
			this._shakeNumMax+=5;
			this._shakeNumMin-=5;
		}

		__class(SnowManObject,'laya8.client.player.game.SnowManObject',_super);
		var __proto=SnowManObject.prototype;
		__proto.update=function(frameStep){
			if (!this.pushUpdates)return;
			if (this._curShakeTime >=this._shakeTime){
				this._viewSprite.rotation=0;
				return;
			}
			this._curShakeTime+=frameStep;
			this._curShakeNum=Math.round(SnowUtils.randRange(this._shakeNumMax,this._shakeNumMin));
			this._viewSprite.rotation=this._curShakeNum;
		}

		return SnowManObject;
	})(TreeObject)


	/**
	*角色被打生成的雪花 ；classid=19
	*弹打到尽头，打到墙生成的雪花 ；classid=19
	*<br> classid==19 时主角有吸附效果
	*熊死亡掉落的钻石 itemid=4118 classid=18
	*@author luohuantao
	*/
	//class laya8.client.player.game.FoodBulletObject extends laya8.client.player.game.SnowObject
	var FoodBulletObject=(function(_super){
		function FoodBulletObject(uid){
			FoodBulletObject.__super.call(this,uid);
		}

		__class(FoodBulletObject,'laya8.client.player.game.FoodBulletObject',_super);
		var __proto=FoodBulletObject.prototype;
		__proto.createView=function(sourceID,group){
			this.isDieByCurUser=false;
			_super.prototype.createView.call(this,sourceID,group);
		}

		__proto.onMoveToRole=function(role,compHandler){
			this.isDieByCurUser=true;
			var snowObj=FlySnowImg.getOne();
			snowObj.setData(this._x,this._y);
			snowObj.isCanMove=true;
			snowObj.startTimer=this.timer.currTimer;
			snowObj.txt=this._viewSprite.texture;
			snowObj.scale=this.scaleX;
			Player.I.snowFlyLayer.addChildFlySnowImg(snowObj);
			compHandler && compHandler.run();
		}

		__proto.destroy=function(destroyChild){
			(destroyChild===void 0)&& (destroyChild=true);
			if (this.isDieByCurUser)
				this.superDestroy(destroyChild);
			else{
				Tween.to(this,{alpha:0},200,null,Handler.create(this,this.superDestroy,[destroyChild]));
			}
		}

		__proto.superDestroy=function(destroyChild){
			this.alpha=1;
			_super.prototype.destroy.call(this);
		}

		return FoodBulletObject;
	})(SnowObject)


	/**
	*...
	*@author luohuantao
	*/
	//class laya8.client.player.game.SnowGroupObject extends laya8.client.player.game.SnowObject
	var SnowGroupObject=(function(_super){
		var AwayRole;
		function SnowGroupObject(uid){
			this._comH=null;
			this.snowArr=null;
			SnowGroupObject.__super.call(this,uid);
		}

		__class(SnowGroupObject,'laya8.client.player.game.SnowGroupObject',_super);
		var __proto=SnowGroupObject.prototype;
		__proto.destroy=function(destroyChild){
			(destroyChild===void 0)&& (destroyChild=true);
			if (this.isDieByCurUser)this.superDestroy(destroyChild);
			else{
				this._delTime=Laya.timer.currTimer;
				this.destroyed=true;
			}
		}

		__proto.superDestroy=function(destroyChild){
			(destroyChild===void 0)&& (destroyChild=true);
			this.destorySnowArr();
			_super.prototype.destroy.call(this,destroyChild);
		}

		__proto.onMoveToRole=function(role,compHandler){
			this.isDieByCurUser=true;
			if (!Player.curUser){
				compHandler && compHandler.run();
				return;
			};
			var arr=ConfigData.elementData[this.itemid].children;this.snowArr=this.snowArr|| [];
			role=Player.curUser;
			var po=role.getCenterPo();
			var aw;
			for (var i=0,j=arr.length;i < j;i++){
				var snowObj=FlySnowImg.getOne();
				snowObj.setData(this._x+arr[i].x,this._y+arr[i].y);
				Player.I.snowFlyLayer.addChildFlySnowImg(snowObj);
				Point.TEMP.setTo(arr[i].x+this.x,arr[i].y+this.y);
				aw=AwayRole.getOne();
				aw.away=GrahamScan.dis(po,Point.TEMP);
				aw.snowObj=snowObj;
				this.snowArr.push(aw);
			}
			role.recoverCenterPo(po);
			this.snowArr.sort(aaa=function(a,b){
				return (a.away-b.away);
			});
			this.visible=false;
			this.timer.loop(50,this,this.showFlySonwImg,[compHandler]);
		}

		__proto.showFlySonwImg=function(compHandler){
			if (!this.snowArr.length){
				this.timer.clear(this,this.showFlySonwImg);
				compHandler && compHandler.run();
				return;
			};
			var aw=this.snowArr.shift();
			(aw.snowObj).isCanMove=true;
			(aw.snowObj).startTimer=this.timer.currTimer;
			aw.recover();
		}

		__proto.destorySnowArr=function(){
			if (!this.snowArr || !this.snowArr.length)return;
			var aw;
			while (this.snowArr.length){
				aw=this.snowArr.shift();
				(aw.snowObj).recover();
				aw.recover();
			}
		}

		__getset(0,__proto,'visible',_super.prototype._$get_visible,function(value){
			this._delTime=0;
			_super.prototype._$set_visible.call(this,value);
		});

		SnowGroupObject.__init$=function(){
			//class AwayRole
			AwayRole=(function(){
				function AwayRole(){
					this.away=0;
					this.snowObj=null;
				}
				__class(AwayRole,'');
				var __proto=AwayRole.prototype;
				__proto.recover=function(){
					this.away=0;
					this.snowObj=null;
					Pool.recover("SnowGroupObject_AwayRole",this);
				}
				AwayRole.getOne=function(){
					return Pool.getItemByClass("SnowGroupObject_AwayRole",AwayRole);
				}
				return AwayRole;
			})()
		}

		return SnowGroupObject;
	})(SnowObject)


	/**
	*<code>List</code> 控件可显示项目列表。默认为垂直方向列表。可通过UI编辑器自定义列表。
	*
	*@example <caption>以下示例代码，创建了一个 <code>List</code> 实例。</caption>
	*package
	*{
		*import laya.ui.List;
		*import laya.utils.Handler;
		*public class List_Example
		*{
			*public function List_Example()
			*{
				*Laya.init(640,800,"false");//设置游戏画布宽高、渲染模式。
				*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
				*Laya.loader.load(["resource/ui/vscroll.png","resource/ui/vscroll$bar.png","resource/ui/vscroll$down.png","resource/ui/vscroll$up.png"],Handler.create(this,onLoadComplete));
				*}
			*private function onLoadComplete():void
			*{
				*var arr:Array=[];//创建一个数组，用于存贮列表的数据信息。
				*for (var i:int=0;i &lt;20;i++)
				*{
					*arr.push({label:"item"+i});
					*}
				*var list:List=new List();//创建一个 List 类的实例对象 list 。
				*list.itemRender=Item;//设置 list 的单元格渲染器。
				*list.repeatX=1;//设置 list 的水平方向单元格数量。
				*list.repeatY=10;//设置 list 的垂直方向单元格数量。
				*list.vScrollBarSkin="resource/ui/vscroll.png";//设置 list 的垂直方向滚动条皮肤。
				*list.array=arr;//设置 list 的列表数据源。
				*list.pos(100,100);//设置 list 的位置。
				*list.selectEnable=true;//设置 list 可选。
				*list.selectHandler=new Handler(this,onSelect);//设置 list 改变选择项执行的处理器。
				*Laya.stage.addChild(list);//将 list 添加到显示列表。
				*}
			*private function onSelect(index:int):void
			*{
				*trace("当前选择的项目索引： index= ",index);
				*}
			*}
		*}
	*import laya.ui.Box;
	*import laya.ui.Label;
	*class Item extends Box
	*{
		*public function Item()
		*{
			*graphics.drawRect(0,0,100,20,null,"#ff0000");
			*var label:Label=new Label();
			*label.text="100000";
			*label.name="label";//设置 label 的name属性值。
			*label.size(100,20);
			*addChild(label);
			*}
		*}
	*@example
	*(function (_super){
		*function Item(){
			*Item.__super.call(this);//初始化父类
			*this.graphics.drawRect(0,0,100,20,"#ff0000");
			*var label=new laya.ui.Label();//创建一个 Label 类的实例对象 label 。
			*label.text="100000";//设置 label 的文本内容。
			*label.name="label";//设置 label 的name属性值。
			*label.size(100,20);//设置 label 的宽度、高度。
			*this.addChild(label);//将 label 添加到显示列表。
			*};
		*Laya.class(Item,"mypackage.listExample.Item",_super);//注册类 Item 。
		*})(laya.ui.Box);
	*Laya.init(640,800);//设置游戏画布宽高、渲染模式。
	*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
	*var res=["resource/ui/vscroll.png","resource/ui/vscroll$bar.png","resource/ui/vscroll$down.png","resource/ui/vscroll$up.png"];
	*Laya.loader.load(res,new laya.utils.Handler(this,onLoadComplete));//加载资源。
	*function onLoadComplete(){
		*var arr=[];//创建一个数组，用于存贮列表的数据信息。
		*for (var i=0;i &lt;20;i++){
			*arr.push({label:"item"+i});
			*}
		*var list=new laya.ui.List();//创建一个 List 类的实例对象 list 。
		*list.itemRender=mypackage.listExample.Item;//设置 list 的单元格渲染器。
		*list.repeatX=1;//设置 list 的水平方向单元格数量。
		*list.repeatY=10;//设置 list 的垂直方向单元格数量。
		*list.vScrollBarSkin="resource/ui/vscroll.png";//设置 list 的垂直方向滚动条皮肤。
		*list.array=arr;//设置 list 的列表数据源。
		*list.pos(100,100);//设置 list 的位置。
		*list.selectEnable=true;//设置 list 可选。
		*list.selectHandler=new laya.utils.Handler(this,onSelect);//设置 list 改变选择项执行的处理器。
		*Laya.stage.addChild(list);//将 list 添加到显示列表。
		*}
	*function onSelect(index)
	*{
		*console.log("当前选择的项目索引： index= ",index);
		*}
	*
	*@example
	*import List=laya.ui.List;
	*import Handler=laya.utils.Handler;
	*public class List_Example {
		*public List_Example(){
			*Laya.init(640,800);//设置游戏画布宽高。
			*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
			*Laya.loader.load(["resource/ui/vscroll.png","resource/ui/vscroll$bar.png","resource/ui/vscroll$down.png","resource/ui/vscroll$up.png"],Handler.create(this,this.onLoadComplete));
			*}
		*private onLoadComplete():void {
			*var arr=[];//创建一个数组，用于存贮列表的数据信息。
			*for (var i:number=0;i &lt;20;i++)
			*{
				*arr.push({label:"item"+i });
				*}
			*var list:List=new List();//创建一个 List 类的实例对象 list 。
			*list.itemRender=Item;//设置 list 的单元格渲染器。
			*list.repeatX=1;//设置 list 的水平方向单元格数量。
			*list.repeatY=10;//设置 list 的垂直方向单元格数量。
			*list.vScrollBarSkin="resource/ui/vscroll.png";//设置 list 的垂直方向滚动条皮肤。
			*list.array=arr;//设置 list 的列表数据源。
			*list.pos(100,100);//设置 list 的位置。
			*list.selectEnable=true;//设置 list 可选。
			*list.selectHandler=new Handler(this,this.onSelect);//设置 list 改变选择项执行的处理器。
			*Laya.stage.addChild(list);//将 list 添加到显示列表。
			*}
		*private onSelect(index:number):void {
			*console.log("当前选择的项目索引： index= ",index);
			*}
		*}
	*import Box=laya.ui.Box;
	*import Label=laya.ui.Label;
	*class Item extends Box {
		*constructor(){
			*this.graphics.drawRect(0,0,100,20,null,"#ff0000");
			*var label:Label=new Label();
			*label.text="100000";
			*label.name="label";//设置 label 的name属性值。
			*label.size(100,20);
			*this.addChild(label);
			*}
		*}
	*/
	//class laya.ui.List extends laya.ui.Box
	var List=(function(_super){
		function List(){
			this.selectHandler=null;
			this.renderHandler=null;
			this.mouseHandler=null;
			this.selectEnable=false;
			this.totalPage=0;
			this._content=null;
			this._scrollBar=null;
			this._itemRender=null;
			this._repeatX=0;
			this._repeatY=0;
			this._repeatX2=0;
			this._repeatY2=0;
			this._spaceX=0;
			this._spaceY=0;
			this._array=null;
			this._startIndex=0;
			this._selectedIndex=-1;
			this._page=0;
			this._isVertical=true;
			this._cellSize=20;
			this._cellOffset=0;
			this._isMoved=false;
			this.cacheContent=false;
			this._createdLine=0;
			this._cellChanged=false;
			List.__super.call(this);
			this._cells=[];
			this._offset=new Point();
		}

		__class(List,'laya.ui.List',_super);
		var __proto=List.prototype;
		Laya.imps(__proto,{"laya.ui.IRender":true,"laya.ui.IItem":true})
		/**@inheritDoc */
		__proto.destroy=function(destroyChild){
			(destroyChild===void 0)&& (destroyChild=true);
			this._content && this._content.destroy(destroyChild);
			this._scrollBar && this._scrollBar.destroy(destroyChild);
			laya.ui.Component.prototype.destroy.call(this,destroyChild);
			this._content=null;
			this._scrollBar=null;
			this._itemRender=null;
			this._cells=null;
			this._array=null;
			this.selectHandler=this.renderHandler=this.mouseHandler=null;
		}

		/**@inheritDoc */
		__proto.createChildren=function(){
			this.addChild(this._content=new Box());
		}

		__proto.onScrollStart=function(){
			this._$P.cacheAs || (this._$P.cacheAs=_super.prototype._$get_cacheAs.call(this));
			_super.prototype._$set_cacheAs.call(this,"none");
			this._scrollBar.once("end",this,this.onScrollEnd);
		}

		__proto.onScrollEnd=function(){
			_super.prototype._$set_cacheAs.call(this,this._$P.cacheAs);
		}

		__proto._removePreScrollBar=function(){
			var preNode=this.removeChildByName("scrollBar");
			if (preNode)preNode.destroy(true);
		}

		/**
		*@private
		*更改单元格的信息。
		*@internal 在此销毁、创建单元格，并设置单元格的位置等属性。相当于此列表内容发送改变时调用此函数。
		*/
		__proto.changeCells=function(){
			this._cellChanged=false;
			if (this._itemRender){
				this.scrollBar=this.getChildByName("scrollBar");
				var cell=this._getOneCell();
				var cellWidth=(cell.width+this._spaceX)|| 1;
				var cellHeight=(cell.height+this._spaceY)|| 1;
				if (this._width > 0)this._repeatX2=this._isVertical ? Math.round(this._width / cellWidth):Math.ceil(this._width / cellWidth);
				if (this._height > 0)this._repeatY2=this._isVertical ? Math.ceil(this._height / cellHeight):Math.round(this._height / cellHeight);
				var listWidth=this._width ? this._width :(cellWidth *this.repeatX-this._spaceX);
				var listHeight=this._height ? this._height :(cellHeight *this.repeatY-this._spaceY);
				this._cellSize=this._isVertical ? cellHeight :cellWidth;
				this._cellOffset=this._isVertical ? (cellHeight *Math.max(this._repeatY2,this._repeatY)-listHeight-this._spaceY):(cellWidth *Math.max(this._repeatX2,this._repeatX)-listWidth-this._spaceX);
				if (this._isVertical && this._scrollBar)this._scrollBar.height=listHeight;
				else if (!this._isVertical && this._scrollBar)this._scrollBar.width=listWidth;
				this.setContentSize(listWidth,listHeight);
				var numX=this._isVertical ? this.repeatX :this.repeatY;
				var numY=(this._isVertical ? this.repeatY :this.repeatX)+(this._scrollBar ? 1 :0);
				this._createItems(0,numX,numY);
				this._createdLine=numY;
				if (this._array){
					this.array=this._array;
					this.runCallLater(this.renderItems);
				}
			}
		}

		__proto._getOneCell=function(){
			if (this._cells.length===0){
				var item=this.createItem();
				this._offset.setTo(item.x,item.y);
				this._cells.push(item);
			}
			return this._cells[0];
		}

		__proto._createItems=function(startY,numX,numY){
			var box=this._content;
			var cell=this._getOneCell();
			var cellWidth=cell.width+this._spaceX;
			var cellHeight=cell.height+this._spaceY;
			if (this.cacheContent){
				var cacheBox=new Box();
				cacheBox.cacheAsBitmap=true;
				cacheBox.pos((this._isVertical ? 0 :startY)*cellWidth,(this._isVertical ? startY :0)*cellHeight);
				this._content.addChild(cacheBox);
				this._content.optimizeScrollRect=true;
				box=cacheBox;
			};
			var arr=[];
			for (var i=this._cells.length-1;i >-1;i--){
				var item=this._cells[i];
				item.removeSelf();
				arr.push(item);
			}
			this._cells.length=0;
			for (var k=startY;k < numY;k++){
				for (var l=0;l < numX;l++){
					if (arr.length){
						cell=arr.pop();
						}else {
						cell=this.createItem();
					}
					cell.x=(this._isVertical ? l :k)*cellWidth-box.x;
					cell.y=(this._isVertical ? k :l)*cellHeight-box.y;
					cell.name="item"+(k *numX+l);
					box.addChild(cell);
					this.addCell(cell);
				}
			}
		}

		__proto.createItem=function(){
			return (typeof this._itemRender=='function')? new this._itemRender():View.createComp(this._itemRender);
		}

		/**
		*@private
		*添加单元格。
		*@param cell 需要添加的单元格对象。
		*/
		__proto.addCell=function(cell){
			cell.on("click",this,this.onCellMouse);
			cell.on("rightclick",this,this.onCellMouse);
			cell.on("mouseover",this,this.onCellMouse);
			cell.on("mouseout",this,this.onCellMouse);
			cell.on("mousedown",this,this.onCellMouse);
			cell.on("mouseup",this,this.onCellMouse);
			this._cells.push(cell);
		}

		/**
		*初始化单元格信息。
		*/
		__proto.initItems=function(){
			if (!this._itemRender && this.getChildByName("item0")!=null){
				this.repeatX=1;
				var count=0;
				count=0;
				for (var i=0;i < 10000;i++){
					var cell=this.getChildByName("item"+i);
					if (cell){
						this.addCell(cell);
						count++;
						continue ;
					}
					break ;
				}
				this.repeatY=count;
			}
		}

		/**
		*设置可视区域大小。
		*<p>以（0，0，width参数，height参数）组成的矩形区域为可视区域。</p>
		*@param width 可视区域宽度。
		*@param height 可视区域高度。
		*/
		__proto.setContentSize=function(width,height){
			this._content.width=width;
			this._content.height=height;
			if (this._scrollBar||this._offset.x!=0||this._offset.y!=0){
				this._content.scrollRect || (this._content.scrollRect=new Rectangle());
				this._content.scrollRect.setTo(-this._offset.x,-this._offset.y,width,height);
				this._content.conchModel && this._content.conchModel.scrollRect(-this._offset.x,-this._offset.y,width,height);
			}
			this.event("resize");
		}

		/**
		*@private
		*单元格的鼠标事件侦听处理函数。
		*/
		__proto.onCellMouse=function(e){
			if (e.type==="mousedown")this._isMoved=false;
			var cell=e.currentTarget;
			var index=this._startIndex+this._cells.indexOf(cell);
			if (index < 0)return;
			if (e.type==="click" || e.type==="rightclick"){
				if (this.selectEnable && !this._isMoved)this.selectedIndex=index;
				else this.changeCellState(cell,true,0);
				}else if ((e.type==="mouseover" || e.type==="mouseout")&& this._selectedIndex!==index){
				this.changeCellState(cell,e.type==="mouseover",0);
			}
			this.mouseHandler && this.mouseHandler.runWith([e,index]);
		}

		/**
		*@private
		*改变单元格的可视状态。
		*@param cell 单元格对象。
		*@param visable 是否显示。
		*@param index 单元格的属性 <code>index</code> 值。
		*/
		__proto.changeCellState=function(cell,visable,index){
			var selectBox=cell.getChildByName("selectBox");
			if (selectBox){
				this.selectEnable=true;
				selectBox.visible=visable;
				selectBox.index=index;
			}
		}

		/**@inheritDoc */
		__proto.changeSize=function(){
			laya.ui.Component.prototype.changeSize.call(this);
			this.setContentSize(this.width,this.height);
			if (this._scrollBar)this.callLater(this.onScrollBarChange);
		}

		/**
		*@private
		*滚动条的 <code>Event.CHANGE</code> 事件侦听处理函数。
		*/
		__proto.onScrollBarChange=function(e){
			this.runCallLater(this.changeCells);
			var scrollValue=this._scrollBar.value;
			var lineX=(this._isVertical ? this.repeatX :this.repeatY);
			var lineY=(this._isVertical ? this.repeatY :this.repeatX);
			var scrollLine=Math.floor(scrollValue / this._cellSize);
			if (!this.cacheContent){
				var index=scrollLine *lineX;
				var num=0;
				if (index > this._startIndex){
					num=index-this._startIndex;
					var down=true;
					var toIndex=this._startIndex+lineX *(lineY+1);
					this._isMoved=true;
					}else if (index < this._startIndex){
					num=this._startIndex-index;
					down=false;
					toIndex=this._startIndex-1;
					this._isMoved=true;
				}
				for (var i=0;i < num;i++){
					if (down){
						var cell=this._cells.shift();
						this._cells[this._cells.length]=cell;
						var cellIndex=toIndex+i;
						}else {
						cell=this._cells.pop();
						this._cells.unshift(cell);
						cellIndex=toIndex-i;
					};
					var pos=Math.floor(cellIndex / lineX)*this._cellSize;
					this._isVertical ? cell.y=pos :cell.x=pos;
					this.renderItem(cell,cellIndex);
				}
				this._startIndex=index;
				this.changeSelectStatus();
				}else {
				num=(lineY+1);
				if (this._createdLine-scrollLine < num){
					this._createItems(this._createdLine,lineX,this._createdLine+num);
					this._createdLine+=num;
					this.renderItems(this._createdLine *lineX,0);
				}
			};
			var r=this._content.scrollRect;
			if (this._isVertical){
				r.y=scrollValue-this._offset.y;
				r.x=-this._offset.x;
				}else {
				r.y=-this._offset.y;
				r.x=scrollValue-this._offset.x;
			}
			this._content.conchModel && this._content.conchModel.scrollRect(r.x,r.y,r.width,r.height);
			this.repaint();
		}

		__proto.posCell=function(cell,cellIndex){
			if (!this._scrollBar)return;
			var lineX=(this._isVertical ? this.repeatX :this.repeatY);
			var lineY=(this._isVertical ? this.repeatY :this.repeatX);
			var pos=Math.floor(cellIndex / lineX)*this._cellSize;
			this._isVertical ? cell.y=pos :cell.x=pos;
		}

		/**
		*@private
		*改变单元格的选择状态。
		*/
		__proto.changeSelectStatus=function(){
			for (var i=0,n=this._cells.length;i < n;i++){
				this.changeCellState(this._cells[i],this._selectedIndex===this._startIndex+i,1);
			}
		}

		/**
		*@private
		*渲染单元格列表。
		*/
		__proto.renderItems=function(from,to){
			(from===void 0)&& (from=0);
			(to===void 0)&& (to=0);
			for (var i=from,n=to || this._cells.length;i < n;i++){
				this.renderItem(this._cells[i],this._startIndex+i);
			}
			this.changeSelectStatus();
		}

		/**
		*渲染一个单元格。
		*@param cell 需要渲染的单元格对象。
		*@param index 单元格索引。
		*/
		__proto.renderItem=function(cell,index){
			if (this._array&&index >=0 && index < this._array.length){
				cell.visible=true;
				cell.dataSource=this._array[index];
				if (!this.cacheContent){
					this.posCell(cell,index);
				}
				if (this.hasListener("render"))this.event("render",[cell,index]);
				if (this.renderHandler)this.renderHandler.runWith([cell,index]);
				}else {
				cell.visible=false;
				cell.dataSource=null;
			}
		}

		/**
		*刷新列表数据源。
		*/
		__proto.refresh=function(){
			this.startIndex=this._startIndex;
		}

		/**
		*获取单元格数据源。
		*@param index 单元格索引。
		*/
		__proto.getItem=function(index){
			if (index >-1 && index < this._array.length){
				return this._array[index];
			}
			return null;
		}

		/**
		*修改单元格数据源。
		*@param index 单元格索引。
		*@param source 单元格数据源。
		*/
		__proto.changeItem=function(index,source){
			if (index >-1 && index < this._array.length){
				this._array[index]=source;
				if (index >=this._startIndex && index < this._startIndex+this._cells.length){
					this.renderItem(this.getCell(index),index);
				}
			}
		}

		/**
		*设置单元格数据源。
		*@param index 单元格索引。
		*@param source 单元格数据源。
		*/
		__proto.setItem=function(index,source){
			this.changeItem(index,source);
		}

		/**
		*添加单元格数据源。
		*@param souce 数据源。
		*/
		__proto.addItem=function(souce){
			this._array.push(souce);
			this.array=this._array;
		}

		/**
		*添加单元格数据源到对应的数据索引处。
		*@param souce 单元格数据源。
		*@param index 索引。
		*/
		__proto.addItemAt=function(souce,index){
			this._array.splice(index,0,souce);
			this.array=this._array;
		}

		/**
		*通过数据源索引删除单元格数据源。
		*@param index 需要删除的数据源索引值。
		*/
		__proto.deleteItem=function(index){
			this._array.splice(index,1);
			this.array=this._array;
		}

		/**
		*通过可视单元格索引，获取单元格。
		*@param index 可视单元格索引。
		*@return 单元格对象。
		*/
		__proto.getCell=function(index){
			this.runCallLater(this.changeCells);
			if (index >-1 && this._cells){
				return this._cells[(index-this._startIndex)% this._cells.length];
			}
			return null;
		}

		/**
		*<p>滚动列表，以设定的数据索引对应的单元格为当前可视列表的第一项。</p>
		*@param index 单元格在数据列表中的索引。
		*/
		__proto.scrollTo=function(index){
			if (this._scrollBar){
				var numX=this._isVertical ? this.repeatX :this.repeatY;
				this._scrollBar.value=Math.floor(index / numX)*this._cellSize;
				}else {
				this.startIndex=index;
			}
		}

		/**
		*<p>缓动滚动列表，以设定的数据索引对应的单元格为当前可视列表的第一项。</p>
		*@param index 单元格在数据列表中的索引。
		*@param time 缓动时间。
		*@param complete 缓动结束回掉
		*/
		__proto.tweenTo=function(index,time,complete){
			(time===void 0)&& (time=200);
			if (this._scrollBar){
				var numX=this._isVertical ? this.repeatX :this.repeatY;
				Tween.to(this._scrollBar,{value:Math.floor(index / numX)*this._cellSize},time,null,complete,0,true);
				}else {
				this.startIndex=index;
				if (complete)complete.run();
			}
		}

		/**@private */
		__proto._setCellChanged=function(){
			if (!this._cellChanged){
				this._cellChanged=true;
				this.callLater(this.changeCells);
			}
		}

		__proto.commitMeasure=function(){
			this.runCallLater(this.changeCells);
		}

		/**@inheritDoc */
		__getset(0,__proto,'cacheAs',_super.prototype._$get_cacheAs,function(value){
			_super.prototype._$set_cacheAs.call(this,value);
			if (this._scrollBar){
				this._$P.cacheAs=null;
				if (value!=="none")this._scrollBar.on("start",this,this.onScrollStart);
				else this._scrollBar.off("start",this,this.onScrollStart);
			}
		});

		/**
		*获取对 <code>List</code> 组件所包含的内容容器 <code>Box</code> 组件的引用。
		*/
		__getset(0,__proto,'content',function(){
			return this._content;
		});

		/**@inheritDoc */
		__getset(0,__proto,'height',_super.prototype._$get_height,function(value){
			if (value !=this._height){
				_super.prototype._$set_height.call(this,value);
				this._setCellChanged();
			}
		});

		/**
		*单元格渲染器。
		*<p><b>取值：</b>
		*<ol>
		*<li>单元格类对象。</li>
		*<li> UI 的 JSON 描述。</li>
		*</ol></p>
		*/
		__getset(0,__proto,'itemRender',function(){
			return this._itemRender;
			},function(value){
			if (this._itemRender !=value){
				this._itemRender=value;
				for (var i=this._cells.length-1;i >-1;i--){
					this._cells[i].destroy();
				}
				this._cells.length=0;
				this._setCellChanged();
			}
		});

		/**
		*垂直方向滚动条皮肤。
		*/
		__getset(0,__proto,'vScrollBarSkin',function(){
			return this._scrollBar ? this._scrollBar.skin :null;
			},function(value){
			this._removePreScrollBar();
			var scrollBar=new VScrollBar();
			scrollBar.name="scrollBar";
			scrollBar.right=0;
			if (value && value !=" ")
				scrollBar.skin=value;
			this.scrollBar=scrollBar;
			this.addChild(scrollBar);
			this._setCellChanged();
		});

		/**
		*列表的当前页码。
		*/
		__getset(0,__proto,'page',function(){
			return this._page;
			},function(value){
			this._page=value
			if (this._array){
				this._page=value > 0 ? value :0;
				this._page=this._page < this.totalPage ? this._page :this.totalPage-1;
				this.startIndex=this._page *this.repeatX *this.repeatY;
			}
		});

		/**
		*水平方向滚动条皮肤。
		*/
		__getset(0,__proto,'hScrollBarSkin',function(){
			return this._scrollBar ? this._scrollBar.skin :null;
			},function(value){
			this._removePreScrollBar();
			var scrollBar=new HScrollBar();
			scrollBar.name="scrollBar";
			scrollBar.bottom=0;
			if (value && value !=" ")
				scrollBar.skin=value;
			this.scrollBar=scrollBar;
			this.addChild(scrollBar);
			this._setCellChanged();
		});

		/**
		*水平方向显示的单元格数量。
		*/
		__getset(0,__proto,'repeatX',function(){
			return this._repeatX > 0 ? this._repeatX :this._repeatX2 > 0 ? this._repeatX2 :1;
			},function(value){
			this._repeatX=value;
			this._setCellChanged();
		});

		/**
		*获取对 <code>List</code> 组件所包含的滚动条 <code>ScrollBar</code> 组件的引用。
		*/
		__getset(0,__proto,'scrollBar',function(){
			return this._scrollBar;
			},function(value){
			if (this._scrollBar !=value){
				this._scrollBar=value;
				if (value){
					this._isVertical=this._scrollBar.isVertical;
					this.addChild(this._scrollBar);
					this._scrollBar.on("change",this,this.onScrollBarChange);
				}
			}
		});

		/**@inheritDoc */
		__getset(0,__proto,'width',_super.prototype._$get_width,function(value){
			if (value !=this._width){
				_super.prototype._$set_width.call(this,value);
				this._setCellChanged();
			}
		});

		/**
		*垂直方向显示的单元格数量。
		*/
		__getset(0,__proto,'repeatY',function(){
			return this._repeatY > 0 ? this._repeatY :this._repeatY2 > 0 ? this._repeatY2 :1;
			},function(value){
			this._repeatY=value;
			this._setCellChanged();
		});

		/**
		*水平方向显示的单元格之间的间距（以像素为单位）。
		*/
		__getset(0,__proto,'spaceX',function(){
			return this._spaceX;
			},function(value){
			this._spaceX=value;
			this._setCellChanged();
		});

		/**
		*垂直方向显示的单元格之间的间距（以像素为单位）。
		*/
		__getset(0,__proto,'spaceY',function(){
			return this._spaceY;
			},function(value){
			this._spaceY=value;
			this._setCellChanged();
		});

		/**
		*表示当前选择的项索引。selectedIndex值更改会引起list重新渲染
		*/
		__getset(0,__proto,'selectedIndex',function(){
			return this._selectedIndex;
			},function(value){
			if (this._selectedIndex !=value){
				this._selectedIndex=value;
				this.changeSelectStatus();
				this.event("change");
				this.selectHandler && this.selectHandler.runWith(value);
				this.startIndex=this._startIndex;
			}
		});

		/**
		*当前选中的单元格数据源。
		*/
		__getset(0,__proto,'selectedItem',function(){
			return this._selectedIndex !=-1 ? this._array[this._selectedIndex] :null;
			},function(value){
			this.selectedIndex=this._array.indexOf(value);
		});

		/**
		*列表的数据总个数。
		*/
		__getset(0,__proto,'length',function(){
			return this._array ? this._array.length :0;
		});

		/**
		*获取或设置当前选择的单元格对象。
		*/
		__getset(0,__proto,'selection',function(){
			return this.getCell(this._selectedIndex);
			},function(value){
			this.selectedIndex=this._startIndex+this._cells.indexOf(value);
		});

		/**
		*当前显示的单元格列表的开始索引。
		*/
		__getset(0,__proto,'startIndex',function(){
			return this._startIndex;
			},function(value){
			this._startIndex=value > 0 ? value :0;
			this.callLater(this.renderItems);
		});

		/**
		*列表数据源。
		*/
		__getset(0,__proto,'array',function(){
			return this._array;
			},function(value){
			this.runCallLater(this.changeCells);
			this._array=value || [];
			var length=this._array.length;
			this.totalPage=Math.ceil(length / (this.repeatX *this.repeatY));
			this._selectedIndex=this._selectedIndex < length ? this._selectedIndex :length-1;
			this.startIndex=this._startIndex;
			if (this._scrollBar){
				this._scrollBar.stopScroll();
				var numX=this._isVertical ? this.repeatX :this.repeatY;
				var numY=this._isVertical ? this.repeatY :this.repeatX;
				var lineCount=Math.ceil(length / numX);
				var total=this._cellOffset > 0 ? this.totalPage+1 :this.totalPage;
				if (total > 1){
					this._scrollBar.scrollSize=this._cellSize;
					this._scrollBar.thumbPercent=numY / lineCount;
					this._scrollBar.setScroll(0,(lineCount-numY)*this._cellSize+this._cellOffset,this._scrollBar.value);
					this._scrollBar.target=this._content;
					}else {
					this._scrollBar.setScroll(0,0,0);
					this._scrollBar.target=this._content;
				}
			}
		});

		/**@inheritDoc */
		__getset(0,__proto,'dataSource',_super.prototype._$get_dataSource,function(value){
			this._dataSource=value;
			if (((typeof value=='number')&& Math.floor(value)==value)|| (typeof value=='string'))this.selectedIndex=parseInt(value);
			else if ((value instanceof Array))this.array=value
			else _super.prototype._$set_dataSource.call(this,value);
		});

		/**
		*单元格集合。
		*/
		__getset(0,__proto,'cells',function(){
			this.runCallLater(this.changeCells);
			return this._cells;
		});

		return List;
	})(Box)


	/**
	*<code>Tree</code> 控件使用户可以查看排列为可扩展树的层次结构数据。
	*
	*@example
	*package
	*{
		*import laya.ui.Tree;
		*import laya.utils.Browser;
		*import laya.utils.Handler;
		*public class Tree_Example
		*{
			*public function Tree_Example()
			*{
				*Laya.init(640,800);
				*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
				*Laya.loader.load(["resource/ui/vscroll.png","resource/ui/vscroll$bar.png","resource/ui/vscroll$down.png","resource/ui/vscroll$up.png","resource/ui/clip_selectBox.png","resource/ui/clip_tree_folder.png","resource/ui/clip_tree_arrow.png"],Handler.create(this,onLoadComplete));
				*}
			*private function onLoadComplete():void
			*{
				*var xmlString:String;//创建一个xml字符串，用于存储树结构数据。
				*xmlString="&lt;root&gt;&lt;item label='box1'&gt;&lt;abc label='child1'/&gt;&lt;abc label='child2'/&gt;&lt;abc label='child3'/&gt;&lt;abc label='child4'/&gt;&lt;abc label='child5'/&gt;&lt;/item&gt;&lt;item label='box2'&gt;&lt;abc label='child1'/&gt;&lt;abc label='child2'/&gt;&lt;abc label='child3'/&gt;&lt;abc label='child4'/&gt;&lt;/item&gt;&lt;/root&gt;";
				*var domParser:*=new Browser.window.DOMParser();//创建一个DOMParser实例domParser。
				*var xml:*=domParser.parseFromString(xmlString,"text/xml");//解析xml字符。
				*var tree:Tree=new Tree();//创建一个 Tree 类的实例对象 tree 。
				*tree.scrollBarSkin="resource/ui/vscroll.png";//设置 tree 的皮肤。
				*tree.itemRender=Item;//设置 tree 的项渲染器。
				*tree.xml=xml;//设置 tree 的树结构数据。
				*tree.x=100;//设置 tree 对象的属性 x 的值，用于控制 tree 对象的显示位置。
				*tree.y=100;//设置 tree 对象的属性 y 的值，用于控制 tree 对象的显示位置。
				*tree.width=200;//设置 tree 的宽度。
				*tree.height=100;//设置 tree 的高度。
				*Laya.stage.addChild(tree);//将 tree 添加到显示列表。
				*}
			*}
		*}
	*import laya.ui.Box;
	*import laya.ui.Clip;
	*import laya.ui.Label;
	*class Item extends Box
	*{
		*public function Item()
		*{
			*this.name="render";
			*this.right=0;
			*this.left=0;
			*var selectBox:Clip=new Clip("resource/ui/clip_selectBox.png",1,2);
			*selectBox.name="selectBox";
			*selectBox.height=24;
			*selectBox.x=13;
			*selectBox.y=0;
			*selectBox.left=12;
			*addChild(selectBox);
			*var folder:Clip=new Clip("resource/ui/clip_tree_folder.png",1,3);
			*folder.name="folder";
			*folder.x=14;
			*folder.y=4;
			*addChild(folder);
			*var label:Label=new Label("treeItem");
			*label.name="label";
			*label.color="#ffff00";
			*label.width=150;
			*label.height=22;
			*label.x=33;
			*label.y=1;
			*label.left=33;
			*label.right=0;
			*addChild(label);
			*var arrow:Clip=new Clip("resource/ui/clip_tree_arrow.png",1,2);
			*arrow.name="arrow";
			*arrow.x=0;
			*arrow.y=5;
			*addChild(arrow);
			*}
		*}
	*@example
	*Laya.init(640,800);//设置游戏画布宽高、渲染模式
	*Laya.stage.bgColor="#efefef";//设置画布的背景颜色
	*var res=["resource/ui/vscroll.png","resource/ui/vscroll$bar.png","resource/ui/vscroll$down.png","resource/ui/vscroll$up.png","resource/ui/clip_selectBox.png","resource/ui/clip_tree_folder.png","resource/ui/clip_tree_arrow.png"];
	*Laya.loader.load(res,new laya.utils.Handler(this,onLoadComplete));
	*function onLoadComplete(){
		*var xmlString;//创建一个xml字符串，用于存储树结构数据。
		*xmlString="&lt;root&gt;&lt;item label='box1'&gt;&lt;abc label='child1'/&gt;&lt;abc label='child2'/&gt;&lt;abc label='child3'/&gt;&lt;abc label='child4'/&gt;&lt;abc label='child5'/&gt;&lt;/item&gt;&lt;item label='box2'&gt;&lt;abc label='child1'/&gt;&lt;abc label='child2'/&gt;&lt;abc label='child3'/&gt;&lt;abc label='child4'/&gt;&lt;/item&gt;&lt;/root&gt;";
		*var domParser=new laya.utils.Browser.window.DOMParser();//创建一个DOMParser实例domParser。
		*var xml=domParser.parseFromString(xmlString,"text/xml");//解析xml字符。
		*var tree=new laya.ui.Tree();//创建一个 Tree 类的实例对象 tree 。
		*tree.scrollBarSkin="resource/ui/vscroll.png";//设置 tree 的皮肤。
		*tree.itemRender=mypackage.treeExample.Item;//设置 tree 的项渲染器。
		*tree.xml=xml;//设置 tree 的树结构数据。
		*tree.x=100;//设置 tree 对象的属性 x 的值，用于控制 tree 对象的显示位置。
		*tree.y=100;//设置 tree 对象的属性 y 的值，用于控制 tree 对象的显示位置。
		*tree.width=200;//设置 tree 的宽度。
		*tree.height=100;//设置 tree 的高度。
		*Laya.stage.addChild(tree);//将 tree 添加到显示列表。
		*}
	*(function (_super){
		*function Item(){
			*Item.__super.call(this);//初始化父类。
			*this.right=0;
			*this.left=0;
			*var selectBox=new laya.ui.Clip("resource/ui/clip_selectBox.png",1,2);
			*selectBox.name="selectBox";//设置 selectBox 的name 为“selectBox”时，将被识别为树结构的项的背景。2帧：悬停时背景、选中时背景。
			*selectBox.height=24;
			*selectBox.x=13;
			*selectBox.y=0;
			*selectBox.left=12;
			*this.addChild(selectBox);//需要使用this.访问父类的属性或方法。
			*var folder=new laya.ui.Clip("resource/ui/clip_tree_folder.png",1,3);
			*folder.name="folder";//设置 folder 的name 为“folder”时，将被识别为树结构的文件夹开启状态图表。2帧：折叠状态、打开状态。
			*folder.x=14;
			*folder.y=4;
			*this.addChild(folder);
			*var label=new laya.ui.Label("treeItem");
			*label.name="label";//设置 label 的name 为“label”时，此值将用于树结构数据赋值。
			*label.color="#ffff00";
			*label.width=150;
			*label.height=22;
			*label.x=33;
			*label.y=1;
			*label.left=33;
			*label.right=0;
			*this.addChild(label);
			*var arrow=new laya.ui.Clip("resource/ui/clip_tree_arrow.png",1,2);
			*arrow.name="arrow";//设置 arrow 的name 为“arrow”时，将被识别为树结构的文件夹开启状态图表。2帧：折叠状态、打开状态。
			*arrow.x=0;
			*arrow.y=5;
			*this.addChild(arrow);
			*};
		*Laya.class(Item,"mypackage.treeExample.Item",_super);//注册类 Item 。
		*})(laya.ui.Box);
	*@example
	*import Tree=laya.ui.Tree;
	*import Browser=laya.utils.Browser;
	*import Handler=laya.utils.Handler;
	*class Tree_Example {
		*constructor(){
			*Laya.init(640,800);
			*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
			*Laya.loader.load(["resource/ui/vscroll.png","resource/ui/vscroll$bar.png","resource/ui/vscroll$down.png","resource/ui/vscroll$up.png","resource/ui/vscroll$up.png","resource/ui/clip_selectBox.png","resource/ui/clip_tree_folder * . * png","resource/ui/clip_tree_arrow.png"],Handler.create(this,this.onLoadComplete));
			*}
		*private onLoadComplete():void {
			*var xmlString:String;//创建一个xml字符串，用于存储树结构数据。
			*xmlString="&lt;root&gt;&lt;item label='box1'&gt;&lt;abc label='child1'/&gt;&lt;abc label='child2'/&gt;&lt;abc label='child3'/&gt;&lt;abc label='child4'/&gt;&lt;abc label='child5'/&gt;&lt;/item&gt;&lt;item label='box2'&gt;&lt;abc  * label='child1'/&gt;&lt;abc label='child2'/&gt;&lt;abc label='child3'/&gt;&lt;abc label='child4'/&gt;&lt;/item&gt;&lt;/root&gt;";
			*var domParser:any=new Browser.window.DOMParser();//创建一个DOMParser实例domParser。
			*var xml:any=domParser.parseFromString(xmlString,"text/xml");//解析xml字符。
			*var tree:Tree=new Tree();//创建一个 Tree 类的实例对象 tree 。
			*tree.scrollBarSkin="resource/ui/vscroll.png";//设置 tree 的皮肤。
			*tree.itemRender=Item;//设置 tree 的项渲染器。
			*tree.xml=xml;//设置 tree 的树结构数据。
			*tree.x=100;//设置 tree 对象的属性 x 的值，用于控制 tree 对象的显示位置。
			*tree.y=100;//设置 tree 对象的属性 y 的值，用于控制 tree 对象的显示位置。
			*tree.width=200;//设置 tree 的宽度。
			*tree.height=100;//设置 tree 的高度。
			*Laya.stage.addChild(tree);//将 tree 添加到显示列表。
			*}
		*}
	*import Box=laya.ui.Box;
	*import Clip=laya.ui.Clip;
	*import Label=laya.ui.Label;
	*class Item extends Box {
		*constructor(){
			*super();
			*this.name="render";
			*this.right=0;
			*this.left=0;
			*var selectBox:Clip=new Clip("resource/ui/clip_selectBox.png",1,2);
			*selectBox.name="selectBox";
			*selectBox.height=24;
			*selectBox.x=13;
			*selectBox.y=0;
			*selectBox.left=12;
			*this.addChild(selectBox);
			*var folder:Clip=new Clip("resource/ui/clip_tree_folder.png",1,3);
			*folder.name="folder";
			*folder.x=14;
			*folder.y=4;
			*this.addChild(folder);
			*var label:Label=new Label("treeItem");
			*label.name="label";
			*label.color="#ffff00";
			*label.width=150;
			*label.height=22;
			*label.x=33;
			*label.y=1;
			*label.left=33;
			*label.right=0;
			*this.addChild(label);
			*var arrow:Clip=new Clip("resource/ui/clip_tree_arrow.png",1,2);
			*arrow.name="arrow";
			*arrow.x=0;
			*arrow.y=5;
			*this.addChild(arrow);
			*}
		*}
	*/
	//class laya.ui.Tree extends laya.ui.Box
	var Tree=(function(_super){
		function Tree(){
			this._list=null;
			this._source=null;
			this._renderHandler=null;
			this._spaceLeft=10;
			this._spaceBottom=0;
			this._keepStatus=true;
			Tree.__super.call(this);
			this.width=this.height=200;
		}

		__class(Tree,'laya.ui.Tree',_super);
		var __proto=Tree.prototype;
		Laya.imps(__proto,{"laya.ui.IRender":true})
		/**@inheritDoc */
		__proto.destroy=function(destroyChild){
			(destroyChild===void 0)&& (destroyChild=true);
			laya.ui.Component.prototype.destroy.call(this,destroyChild);
			this._list && this._list.destroy(destroyChild);
			this._list=null;
			this._source=null;
			this._renderHandler=null;
		}

		/**@inheritDoc */
		__proto.createChildren=function(){
			this.addChild(this._list=new List());
			this._list.renderHandler=Handler.create(this,this.renderItem,null,false);
			this._list.repeatX=1;
			this._list.on("change",this,this.onListChange);
		}

		/**
		*@private
		*此对象包含的<code>List</code>实例的<code>Event.CHANGE</code>事件侦听处理函数。
		*/
		__proto.onListChange=function(e){
			this.event("change");
		}

		/**
		*@private
		*获取数据源集合。
		*/
		__proto.getArray=function(){
			var arr=[];
			var item;
			for(var $each_item in this._source){
				item=this._source[$each_item];
				if (this.getParentOpenStatus(item)){
					item.x=this._spaceLeft *this.getDepth(item);
					arr.push(item);
				}
			}
			return arr;
		}

		/**
		*@private
		*获取项对象的深度。
		*/
		__proto.getDepth=function(item,num){
			(num===void 0)&& (num=0);
			if (item.nodeParent==null)return num;
			else return this.getDepth(item.nodeParent,num+1);
		}

		/**
		*@private
		*获取项对象的上一级的打开状态。
		*/
		__proto.getParentOpenStatus=function(item){
			var parent=item.nodeParent;
			if (parent==null){
				return true;
				}else {
				if (parent.isOpen){
					if (parent.nodeParent !=null)return this.getParentOpenStatus(parent);
					else return true;
					}else {
					return false;
				}
			}
		}

		/**
		*@private
		*渲染一个项对象。
		*@param cell 一个项对象。
		*@param index 项的索引。
		*/
		__proto.renderItem=function(cell,index){
			var item=cell.dataSource;
			if (item){
				cell.left=item.x;
				var arrow=cell.getChildByName("arrow");
				if (arrow){
					if (item.hasChild){
						arrow.visible=true;
						arrow.index=item.isOpen ? 1 :0;
						arrow.tag=index;
						arrow.off("click",this,this.onArrowClick);
						arrow.on("click",this,this.onArrowClick);
						}else {
						arrow.visible=false;
					}
				};
				var folder=cell.getChildByName("folder");
				if (folder){
					if (folder.clipY==2){
						folder.index=item.isDirectory ? 0 :1;
						}else {
						folder.index=item.isDirectory ? item.isOpen ? 1 :0 :2;
					}
				}
				this._renderHandler && this._renderHandler.runWith([cell,index]);
			}
		}

		/**
		*@private
		*/
		__proto.onArrowClick=function(e){
			var arrow=e.currentTarget;
			var index=arrow.tag;
			this._list.array[index].isOpen=!this._list.array[index].isOpen;
			this.event("open");
			this._list.array=this.getArray();
		}

		/**
		*设置指定项索引的项对象的打开状态。
		*@param index 项索引。
		*@param isOpen 是否处于打开状态。
		*/
		__proto.setItemState=function(index,isOpen){
			if (!this._list.array[index])return;
			this._list.array[index].isOpen=isOpen;
			this._list.array=this.getArray();
		}

		/**
		*刷新项列表。
		*/
		__proto.fresh=function(){
			this._list.array=this.getArray();
			this.repaint();
		}

		/**
		*@private
		*解析并处理XML类型的数据源。
		*/
		__proto.parseXml=function(xml,source,nodeParent,isRoot){
			var obj;
			var list=xml.childNodes;
			var childCount=list.length;
			if (!isRoot){
				obj={};
				var list2=xml.attributes;
				var attrs;
				for(var $each_attrs in list2){
					attrs=list2[$each_attrs];
					var prop=attrs.nodeName;
					var value=attrs.nodeValue;
					obj[prop]=value=="true" ? true :value=="false" ? false :value;
				}
				obj.nodeParent=nodeParent;
				if (childCount > 0)obj.isDirectory=true;
				obj.hasChild=childCount > 0;
				source.push(obj);
			}
			for (var i=0;i < childCount;i++){
				var node=list[i];
				this.parseXml(node,source,obj,false);
			}
		}

		/**
		*@private
		*处理数据项的打开状态。
		*/
		__proto.parseOpenStatus=function(oldSource,newSource){
			for (var i=0,n=newSource.length;i < n;i++){
				var newItem=newSource[i];
				if (newItem.isDirectory){
					for (var j=0,m=oldSource.length;j < m;j++){
						var oldItem=oldSource[j];
						if (oldItem.isDirectory && this.isSameParent(oldItem,newItem)&& newItem.label==oldItem.label){
							newItem.isOpen=oldItem.isOpen;
							break ;
						}
					}
				}
			}
		}

		/**
		*@private
		*判断两个项对象在树结构中的父节点是否相同。
		*@param item1 项对象。
		*@param item2 项对象。
		*@return 如果父节点相同值为true，否则值为false。
		*/
		__proto.isSameParent=function(item1,item2){
			if (item1.nodeParent==null && item2.nodeParent==null)return true;
			else if (item1.nodeParent==null || item2.nodeParent==null)return false
			else {
				if (item1.nodeParent.label==item2.nodeParent.label)return this.isSameParent(item1.nodeParent,item2.nodeParent);
				else return false;
			}
		}

		/**
		*更新项列表，显示指定键名的数据项。
		*@param key 键名。
		*/
		__proto.filter=function(key){
			if (Boolean(key)){
				var result=[];
				this.getFilterSource(this._source,result,key);
				this._list.array=result;
				}else {
				this._list.array=this.getArray();
			}
		}

		/**
		*@private
		*获取数据源中指定键名的值。
		*/
		__proto.getFilterSource=function(array,result,key){
			key=key.toLocaleLowerCase();
			var item;
			for(var $each_item in array){
				item=array[$each_item];
				if (!item.isDirectory && String(item.label).toLowerCase().indexOf(key)>-1){
					item.x=0;
					result.push(item);
				}
				if (item.child && item.child.length > 0){
					this.getFilterSource(item.child,result,key);
				}
			}
		}

		/**
		*每一项之间的间隔距离（以像素为单位）。
		*/
		__getset(0,__proto,'spaceBottom',function(){
			return this._list.spaceY;
			},function(value){
			this._list.spaceY=value;
		});

		/**
		*数据源发生变化后，是否保持之前打开状态，默认为true。
		*<p><b>取值：</b>
		*<li>true：保持之前打开状态。</li>
		*<li>false：不保持之前打开状态。</li>
		*</p>
		*/
		__getset(0,__proto,'keepStatus',function(){
			return this._keepStatus;
			},function(value){
			this._keepStatus=value;
		});

		/**
		*此对象包含的<code>List</code>实例的单元格渲染器。
		*<p><b>取值：</b>
		*<ol>
		*<li>单元格类对象。</li>
		*<li> UI 的 JSON 描述。</li>
		*</ol></p>
		*/
		__getset(0,__proto,'itemRender',function(){
			return this._list.itemRender;
			},function(value){
			this._list.itemRender=value;
		});

		/**
		*列表数据源，只包含当前可视节点数据。
		*/
		__getset(0,__proto,'array',function(){
			return this._list.array;
			},function(value){
			if (this._keepStatus && this._list.array && value){
				this.parseOpenStatus(this._list.array,value);
			}
			this._source=value;
			this._list.array=this.getArray();
		});

		/**
		*单元格鼠标事件处理器。
		*<p>默认返回参数（e:Event,index:int）。</p>
		*/
		__getset(0,__proto,'mouseHandler',function(){
			return this._list.mouseHandler;
			},function(value){
			this._list.mouseHandler=value;
		});

		/**@inheritDoc */
		__getset(0,__proto,'dataSource',_super.prototype._$get_dataSource,function(value){
			this._dataSource=value;
			_super.prototype._$set_dataSource.call(this,value);
		});

		/**
		*数据源，全部节点数据。
		*/
		__getset(0,__proto,'source',function(){
			return this._source;
		});

		/**滚动条*/
		__getset(0,__proto,'scrollBar',function(){
			return this._list.scrollBar;
		});

		/**
		*此对象包含的<code>List</code>实例对象。
		*/
		__getset(0,__proto,'list',function(){
			return this._list;
		});

		/**
		*滚动条皮肤。
		*/
		__getset(0,__proto,'scrollBarSkin',function(){
			return this._list.vScrollBarSkin;
			},function(value){
			this._list.vScrollBarSkin=value;
		});

		/**
		*<code>Tree</code> 实例的渲染处理器。
		*/
		__getset(0,__proto,'renderHandler',function(){
			return this._renderHandler;
			},function(value){
			this._renderHandler=value;
		});

		/**
		*表示当前选择的项索引。
		*/
		__getset(0,__proto,'selectedIndex',function(){
			return this._list.selectedIndex;
			},function(value){
			this._list.selectedIndex=value;
		});

		/**
		*左侧缩进距离（以像素为单位）。
		*/
		__getset(0,__proto,'spaceLeft',function(){
			return this._spaceLeft;
			},function(value){
			this._spaceLeft=value;
		});

		/**
		*当前选中的项对象的数据源。
		*/
		__getset(0,__proto,'selectedItem',function(){
			return this._list.selectedItem;
			},function(value){
			this._list.selectedItem=value;
		});

		/**
		*@inheritDoc
		*/
		__getset(0,__proto,'width',_super.prototype._$get_width,function(value){
			_super.prototype._$set_width.call(this,value);
			this._list.width=value;
		});

		/**@inheritDoc */
		__getset(0,__proto,'height',_super.prototype._$get_height,function(value){
			_super.prototype._$set_height.call(this,value);
			this._list.height=value;
		});

		/**
		*xml结构的数据源。
		*/
		__getset(0,__proto,'xml',null,function(value){
			var arr=[];
			this.parseXml(value.childNodes[0],arr,null,true);
			this.array=arr;
		});

		/**
		*表示选择的树节点项的<code>path</code>属性值。
		*/
		__getset(0,__proto,'selectedPath',function(){
			if (this._list.selectedItem){
				return this._list.selectedItem.path;
			}
			return null;
		});

		return Tree;
	})(Box)


	/**
	*<code>CheckBox</code> 组件显示一个小方框，该方框内可以有选中标记。
	*<code>CheckBox</code> 组件还可以显示可选的文本标签，默认该标签位于 CheckBox 右侧。
	*<p><code>CheckBox</code> 使用 <code>dataSource</code>赋值时的的默认属性是：<code>selected</code>。</p>
	*
	*@example <caption>以下示例代码，创建了一个 <code>CheckBox</code> 实例。</caption>
	*package
	*{
		*import laya.ui.CheckBox;
		*import laya.utils.Handler;
		*public class CheckBox_Example
		*{
			*public function CheckBox_Example()
			*{
				*Laya.init(640,800);//设置游戏画布宽高。
				*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
				*Laya.loader.load("resource/ui/check.png",Handler.create(this,onLoadComplete));//加载资源。
				*}
			*private function onLoadComplete():void
			*{
				*trace("资源加载完成！");
				*var checkBox:CheckBox=new CheckBox("resource/ui/check.png","这个是一个CheckBox组件。");//创建一个 CheckBox 类的实例对象 checkBox ,传入它的皮肤skin和标签label。
				*checkBox.x=100;//设置 checkBox 对象的属性 x 的值，用于控制 checkBox 对象的显示位置。
				*checkBox.y=100;//设置 checkBox 对象的属性 y 的值，用于控制 checkBox 对象的显示位置。
				*checkBox.clickHandler=new Handler(this,onClick,[checkBox]);//设置 checkBox 的点击事件处理器。
				*Laya.stage.addChild(checkBox);//将此 checkBox 对象添加到显示列表。
				*}
			*private function onClick(checkBox:CheckBox):void
			*{
				*trace("输出选中状态: checkBox.selected = "+checkBox.selected);
				*}
			*}
		*}
	*@example
	*Laya.init(640,800);//设置游戏画布宽高
	*Laya.stage.bgColor="#efefef";//设置画布的背景颜色
	*Laya.loader.load("resource/ui/check.png",laya.utils.Handler.create(this,loadComplete));//加载资源
	*function loadComplete()
	*{
		*console.log("资源加载完成！");
		*var checkBox:laya.ui.CheckBox=new laya.ui.CheckBox("resource/ui/check.png","这个是一个CheckBox组件。");//创建一个 CheckBox 类的类的实例对象 checkBox ,传入它的皮肤skin和标签label。
		*checkBox.x=100;//设置 checkBox 对象的属性 x 的值，用于控制 checkBox 对象的显示位置。
		*checkBox.y=100;//设置 checkBox 对象的属性 y 的值，用于控制 checkBox 对象的显示位置。
		*checkBox.clickHandler=new laya.utils.Handler(this,this.onClick,[checkBox],false);//设置 checkBox 的点击事件处理器。
		*Laya.stage.addChild(checkBox);//将此 checkBox 对象添加到显示列表。
		*}
	*function onClick(checkBox)
	*{
		*console.log("checkBox.selected = ",checkBox.selected);
		*}
	*@example
	*import CheckBox=laya.ui.CheckBox;
	*import Handler=laya.utils.Handler;
	*class CheckBox_Example{
		*constructor()
		*{
			*Laya.init(640,800);
			*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
			*Laya.loader.load("resource/ui/check.png",Handler.create(this,this.onLoadComplete));//加载资源。
			*}
		*private onLoadComplete()
		*{
			*var checkBox:CheckBox=new CheckBox("resource/ui/check.png","这个是一个CheckBox组件。");//创建一个 CheckBox 类的实例对象 checkBox ,传入它的皮肤skin和标签label。
			*checkBox.x=100;//设置 checkBox 对象的属性 x 的值，用于控制 checkBox 对象的显示位置。
			*checkBox.y=100;//设置 checkBox 对象的属性 y 的值，用于控制 checkBox 对象的显示位置。
			*checkBox.clickHandler=new Handler(this,this.onClick,[checkBox]);//设置 checkBox 的点击事件处理器。
			*Laya.stage.addChild(checkBox);//将此 checkBox 对象添加到显示列表。
			*}
		*private onClick(checkBox:CheckBox):void
		*{
			*console.log("输出选中状态: checkBox.selected = "+checkBox.selected);
			*}
		*}
	*/
	//class laya.ui.CheckBox extends laya.ui.Button
	var CheckBox=(function(_super){
		/**
		*创建一个新的 <code>CheckBox</code> 组件实例。
		*@param skin 皮肤资源地址。
		*@param label 文本标签的内容。
		*/
		function CheckBox(skin,label){
			(label===void 0)&& (label="");
			CheckBox.__super.call(this,skin,label);
		}

		__class(CheckBox,'laya.ui.CheckBox',_super);
		var __proto=CheckBox.prototype;
		/**@inheritDoc */
		__proto.preinitialize=function(){
			laya.ui.Component.prototype.preinitialize.call(this);
			this.toggle=true;
			this._autoSize=false;
		}

		/**@inheritDoc */
		__proto.initialize=function(){
			_super.prototype.initialize.call(this);
			this.createText();
			this._text.align="left";
			this._text.valign="top";
			this._text.width=0;
		}

		/**@inheritDoc */
		__getset(0,__proto,'dataSource',_super.prototype._$get_dataSource,function(value){
			this._dataSource=value;
			if ((typeof value=='boolean'))this.selected=value;
			else if ((typeof value=='string'))this.selected=value==="true";
			else _super.prototype._$set_dataSource.call(this,value);
		});

		return CheckBox;
	})(Button)


	/**
	*<code>LayoutBox</code> 是一个布局容器类。
	*/
	//class laya.ui.LayoutBox extends laya.ui.Box
	var LayoutBox=(function(_super){
		function LayoutBox(){
			this._space=0;
			this._align="none";
			this._itemChanged=false;
			LayoutBox.__super.call(this);
		}

		__class(LayoutBox,'laya.ui.LayoutBox',_super);
		var __proto=LayoutBox.prototype;
		/**@inheritDoc */
		__proto.addChild=function(child){
			child.on("resize",this,this.onResize);
			this._setItemChanged();
			return laya.display.Node.prototype.addChild.call(this,child);
		}

		__proto.onResize=function(e){
			this._setItemChanged();
		}

		/**@inheritDoc */
		__proto.addChildAt=function(child,index){
			child.on("resize",this,this.onResize);
			this._setItemChanged();
			return laya.display.Node.prototype.addChildAt.call(this,child,index);
		}

		/**@inheritDoc */
		__proto.removeChild=function(child){
			child.off("resize",this,this.onResize);
			this._setItemChanged();
			return laya.display.Node.prototype.removeChild.call(this,child);
		}

		/**@inheritDoc */
		__proto.removeChildAt=function(index){
			this.getChildAt(index).off("resize",this,this.onResize);
			this._setItemChanged();
			return laya.display.Node.prototype.removeChildAt.call(this,index);
		}

		/**刷新。*/
		__proto.refresh=function(){
			this._setItemChanged();
		}

		/**
		*改变子对象的布局。
		*/
		__proto.changeItems=function(){
			this._itemChanged=false;
		}

		/**
		*排序项目列表。可通过重写改变默认排序规则。
		*@param items 项目列表。
		*/
		__proto.sortItem=function(items){
			if (items)items.sort(function(a,b){return a.y-b.y;});
		}

		__proto._setItemChanged=function(){
			if (!this._itemChanged){
				this._itemChanged=true;
				this.callLater(this.changeItems);
			}
		}

		/**子对象的间隔。*/
		__getset(0,__proto,'space',function(){
			return this._space;
			},function(value){
			this._space=value;
			this._setItemChanged();
		});

		/**子对象对齐方式。*/
		__getset(0,__proto,'align',function(){
			return this._align;
			},function(value){
			this._align=value;
			this._setItemChanged();
		});

		return LayoutBox;
	})(Box)


	/**
	*<code>Radio</code> 控件使用户可在一组互相排斥的选择中做出一种选择。
	*用户一次只能选择 <code>Radio</code> 组中的一个成员。选择未选中的组成员将取消选择该组中当前所选的 <code>Radio</code> 控件。
	*@see laya.ui.RadioGroup
	*/
	//class laya.ui.Radio extends laya.ui.Button
	var Radio=(function(_super){
		function Radio(skin,label){
			this._value=null;
			(label===void 0)&& (label="");
			Radio.__super.call(this,skin,label);
		}

		__class(Radio,'laya.ui.Radio',_super);
		var __proto=Radio.prototype;
		/**@inheritDoc */
		__proto.destroy=function(destroyChild){
			(destroyChild===void 0)&& (destroyChild=true);
			_super.prototype.destroy.call(this,destroyChild);
			this._value=null;
		}

		/**@inheritDoc */
		__proto.preinitialize=function(){
			laya.ui.Component.prototype.preinitialize.call(this);
			this.toggle=false;
			this._autoSize=false;
		}

		/**@inheritDoc */
		__proto.initialize=function(){
			_super.prototype.initialize.call(this);
			this.createText();
			this._text.align="left";
			this._text.valign="top";
			this._text.width=0;
			this.on("click",this,this.onClick);
		}

		/**
		*@private
		*对象的<code>Event.CLICK</code>事件侦听处理函数。
		*/
		__proto.onClick=function(e){
			this.selected=true;
		}

		/**
		*获取或设置 <code>Radio</code> 关联的可选用户定义值。
		*/
		__getset(0,__proto,'value',function(){
			return this._value !=null ? this._value :this.label;
			},function(obj){
			this._value=obj;
		});

		return Radio;
	})(Button)


	/**
	*<code>Panel</code> 是一个面板容器类。
	*/
	//class laya.ui.Panel extends laya.ui.Box
	var Panel=(function(_super){
		function Panel(){
			this._content=null;
			this._vScrollBar=null;
			this._hScrollBar=null;
			this._scrollChanged=false;
			Panel.__super.call(this);
			this.width=this.height=100;
			this._content.optimizeScrollRect=true;
		}

		__class(Panel,'laya.ui.Panel',_super);
		var __proto=Panel.prototype;
		/**@inheritDoc */
		__proto.destroy=function(destroyChild){
			(destroyChild===void 0)&& (destroyChild=true);
			laya.ui.Component.prototype.destroy.call(this,destroyChild);
			this._content && this._content.destroy(destroyChild);
			this._vScrollBar && this._vScrollBar.destroy(destroyChild);
			this._hScrollBar && this._hScrollBar.destroy(destroyChild);
			this._vScrollBar=null;
			this._hScrollBar=null;
			this._content=null;
		}

		/**@inheritDoc */
		__proto.destroyChildren=function(){
			this._content.destroyChildren();
		}

		/**@inheritDoc */
		__proto.createChildren=function(){
			laya.display.Node.prototype.addChild.call(this,this._content=new Box());
		}

		/**@inheritDoc */
		__proto.addChild=function(child){
			child.on("resize",this,this.onResize);
			this._setScrollChanged();
			return this._content.addChild(child);
		}

		/**
		*@private
		*子对象的 <code>Event.RESIZE</code> 事件侦听处理函数。
		*/
		__proto.onResize=function(){
			this._setScrollChanged();
		}

		/**@inheritDoc */
		__proto.addChildAt=function(child,index){
			child.on("resize",this,this.onResize);
			this._setScrollChanged();
			return this._content.addChildAt(child,index);
		}

		/**@inheritDoc */
		__proto.removeChild=function(child){
			child.off("resize",this,this.onResize);
			this._setScrollChanged();
			return this._content.removeChild(child);
		}

		/**@inheritDoc */
		__proto.removeChildAt=function(index){
			this.getChildAt(index).off("resize",this,this.onResize);
			this._setScrollChanged();
			return this._content.removeChildAt(index);
		}

		/**@inheritDoc */
		__proto.removeChildren=function(beginIndex,endIndex){
			(beginIndex===void 0)&& (beginIndex=0);
			(endIndex===void 0)&& (endIndex=0x7fffffff);
			for (var i=this._content.numChildren-1;i >-1;i--){
				this._content.removeChildAt(i);
			}
			this._setScrollChanged();
			return this;
		}

		/**@inheritDoc */
		__proto.getChildAt=function(index){
			return this._content.getChildAt(index);
		}

		/**@inheritDoc */
		__proto.getChildByName=function(name){
			return this._content.getChildByName(name);
		}

		/**@inheritDoc */
		__proto.getChildIndex=function(child){
			return this._content.getChildIndex(child);
		}

		/**@private */
		__proto.changeScroll=function(){
			this._scrollChanged=false;
			var contentW=this.contentWidth || 1;
			var contentH=this.contentHeight || 1;
			var vscroll=this._vScrollBar;
			var hscroll=this._hScrollBar;
			var vShow=vscroll && contentH > this._height;
			var hShow=hscroll && contentW > this._width;
			var showWidth=vShow ? this._width-vscroll.width :this._width;
			var showHeight=hShow ? this._height-hscroll.height :this._height;
			if (vscroll){
				vscroll.x=this._width-vscroll.width;
				vscroll.y=0;
				vscroll.height=this._height-(hShow ? hscroll.height :0);
				vscroll.scrollSize=Math.max(this._height *0.033,1);
				vscroll.thumbPercent=showHeight / contentH;
				vscroll.setScroll(0,contentH-showHeight,vscroll.value);
			}
			if (hscroll){
				hscroll.x=0;
				hscroll.y=this._height-hscroll.height;
				hscroll.width=this._width-(vShow ? vscroll.width :0);
				hscroll.scrollSize=Math.max(this._width *0.033,1);
				hscroll.thumbPercent=showWidth / contentW;
				hscroll.setScroll(0,contentW-showWidth,hscroll.value);
			}
		}

		/**@inheritDoc */
		__proto.changeSize=function(){
			laya.ui.Component.prototype.changeSize.call(this);
			this.setContentSize(this._width,this._height);
		}

		/**
		*@private
		*设置内容的宽度、高度（以像素为单位）。
		*@param width 宽度。
		*@param height 高度。
		*/
		__proto.setContentSize=function(width,height){
			var content=this._content;
			content.width=width;
			content.height=height;
			content.scrollRect || (content.scrollRect=new Rectangle());
			content.scrollRect.setTo(0,0,width,height);
			content.conchModel&&content.conchModel.scrollRect(0,0,width,height);
		}

		/**
		*@private
		*滚动条的<code><code>Event.MOUSE_DOWN</code>事件侦听处理函数。</code>事件侦听处理函数。
		*@param scrollBar 滚动条对象。
		*@param e Event 对象。
		*/
		__proto.onScrollBarChange=function(scrollBar){
			var rect=this._content.scrollRect;
			if (rect){
				var start=Math.round(scrollBar.value);
				scrollBar.isVertical ? rect.y=start :rect.x=start;
				this._content.conchModel&&this._content.conchModel.scrollRect(rect.x,rect.y,rect.width,rect.height);
			}
		}

		/**
		*<p>滚动内容容器至设定的垂直、水平方向滚动条位置。</p>
		*@param x 水平方向滚动条属性value值。滚动条位置数字。
		*@param y 垂直方向滚动条属性value值。滚动条位置数字。
		*/
		__proto.scrollTo=function(x,y){
			(x===void 0)&& (x=0);
			(y===void 0)&& (y=0);
			if (this.vScrollBar)this.vScrollBar.value=y;
			if (this.hScrollBar)this.hScrollBar.value=x;
		}

		/**
		*刷新滚动内容。
		*/
		__proto.refresh=function(){
			this.changeScroll();
		}

		__proto.onScrollStart=function(){
			this._$P.cacheAs || (this._$P.cacheAs=_super.prototype._$get_cacheAs.call(this));
			_super.prototype._$set_cacheAs.call(this,"none");
			this._hScrollBar && this._hScrollBar.once("end",this,this.onScrollEnd);
			this._vScrollBar && this._vScrollBar.once("end",this,this.onScrollEnd);
		}

		__proto.onScrollEnd=function(){
			_super.prototype._$set_cacheAs.call(this,this._$P.cacheAs);
		}

		/**@private */
		__proto._setScrollChanged=function(){
			if (!this._scrollChanged){
				this._scrollChanged=true;
				this.callLater(this.changeScroll);
			}
		}

		/**@inheritDoc */
		__getset(0,__proto,'numChildren',function(){
			return this._content.numChildren;
		});

		/**
		*水平方向滚动条皮肤。
		*/
		__getset(0,__proto,'hScrollBarSkin',function(){
			return this._hScrollBar ? this._hScrollBar.skin :null;
			},function(value){
			if (this._hScrollBar==null){
				laya.display.Node.prototype.addChild.call(this,this._hScrollBar=new HScrollBar());
				this._hScrollBar.on("change",this,this.onScrollBarChange,[this._hScrollBar]);
				this._hScrollBar.target=this._content;
				this._setScrollChanged();
			}
			this._hScrollBar.skin=value;
		});

		/**
		*@private
		*获取内容宽度（以像素为单位）。
		*/
		__getset(0,__proto,'contentWidth',function(){
			var max=0;
			for (var i=this._content.numChildren-1;i >-1;i--){
				var comp=this._content.getChildAt(i);
				max=Math.max(comp.x+comp.width *comp.scaleX,max);
			}
			return max;
		});

		/**
		*@private
		*获取内容高度（以像素为单位）。
		*/
		__getset(0,__proto,'contentHeight',function(){
			var max=0;
			for (var i=this._content.numChildren-1;i >-1;i--){
				var comp=this._content.getChildAt(i);
				max=Math.max(comp.y+comp.height *comp.scaleY,max);
			}
			return max;
		});

		/**
		*@inheritDoc
		*/
		__getset(0,__proto,'width',_super.prototype._$get_width,function(value){
			_super.prototype._$set_width.call(this,value);
			this._setScrollChanged();
		});

		/**
		*水平方向滚动条对象。
		*/
		__getset(0,__proto,'hScrollBar',function(){
			return this._hScrollBar;
		});

		/**
		*获取内容容器对象。
		*/
		__getset(0,__proto,'content',function(){
			return this._content;
		});

		/**@inheritDoc */
		__getset(0,__proto,'height',_super.prototype._$get_height,function(value){
			_super.prototype._$set_height.call(this,value);
			this._setScrollChanged();
		});

		/**
		*垂直方向滚动条皮肤。
		*/
		__getset(0,__proto,'vScrollBarSkin',function(){
			return this._vScrollBar ? this._vScrollBar.skin :null;
			},function(value){
			if (this._vScrollBar==null){
				laya.display.Node.prototype.addChild.call(this,this._vScrollBar=new VScrollBar());
				this._vScrollBar.on("change",this,this.onScrollBarChange,[this._vScrollBar]);
				this._vScrollBar.target=this._content;
				this._setScrollChanged();
			}
			this._vScrollBar.skin=value;
		});

		/**
		*垂直方向滚动条对象。
		*/
		__getset(0,__proto,'vScrollBar',function(){
			return this._vScrollBar;
		});

		/**@inheritDoc */
		__getset(0,__proto,'cacheAs',_super.prototype._$get_cacheAs,function(value){
			_super.prototype._$set_cacheAs.call(this,value);
			this._$P.cacheAs=null;
			if (value!=="none"){
				this._hScrollBar && this._hScrollBar.on("start",this,this.onScrollStart);
				this._vScrollBar && this._vScrollBar.on("start",this,this.onScrollStart);
				}else {
				this._hScrollBar && this._hScrollBar.off("start",this,this.onScrollStart);
				this._vScrollBar && this._vScrollBar.off("start",this,this.onScrollStart);
			}
		});

		return Panel;
	})(Box)


	/**
	*<code>Group</code> 是一个可以自动布局的项集合控件。
	*<p> <code>Group</code> 的默认项对象为 <code>Button</code> 类实例。
	*<code>Group</code> 是 <code>Tab</code> 和 <code>RadioGroup</code> 的基类。</p>
	*/
	//class laya.ui.UIGroup extends laya.ui.Box
	var UIGroup=(function(_super){
		function UIGroup(labels,skin){
			this.selectHandler=null;
			this._items=null;
			this._selectedIndex=-1;
			this._skin=null;
			this._direction="horizontal";
			this._space=0;
			this._labels=null;
			this._labelColors=null;
			this._labelFont=null;
			this._labelStrokeColor=null;
			this._strokeColors=null;
			this._labelStroke=NaN;
			this._labelSize=0;
			this._labelBold=false;
			this._labelPadding=null;
			this._labelAlign=null;
			this._stateNum=0;
			this._labelChanged=false;
			UIGroup.__super.call(this);
			this.skin=skin;
			this.labels=labels;
		}

		__class(UIGroup,'laya.ui.UIGroup',_super);
		var __proto=UIGroup.prototype;
		Laya.imps(__proto,{"laya.ui.IItem":true})
		/**@inheritDoc */
		__proto.preinitialize=function(){
			this.mouseEnabled=true;
		}

		/**@inheritDoc */
		__proto.destroy=function(destroyChild){
			(destroyChild===void 0)&& (destroyChild=true);
			laya.ui.Component.prototype.destroy.call(this,destroyChild);
			this._items && (this._items.length=0);
			this._items=null;
			this.selectHandler=null;
		}

		/**
		*添加一个项对象，返回此项对象的索引id。
		*
		*@param item 需要添加的项对象。
		*@param autoLayOut 是否自动布局，如果为true，会根据 <code>direction</code> 和 <code>space</code> 属性计算item的位置。
		*@return
		*/
		__proto.addItem=function(item,autoLayOut){
			(autoLayOut===void 0)&& (autoLayOut=true);
			var display=item;
			var index=this._items.length;
			display.name="item"+index;
			this.addChild(display);
			this.initItems();
			if (autoLayOut && index > 0){
				var preItem=this._items [index-1];
				if (this._direction=="horizontal"){
					display.x=preItem.x+preItem.width+this._space;
					}else {
					display.y=preItem.y+preItem.height+this._space;
				}
				}else {
				if (autoLayOut){
					display.x=0;
					display.y=0;
				}
			}
			return index;
		}

		/**
		*删除一个项对象。
		*@param item 需要删除的项对象。
		*@param autoLayOut 是否自动布局，如果为true，会根据 <code>direction</code> 和 <code>space</code> 属性计算item的位置。
		*/
		__proto.delItem=function(item,autoLayOut){
			(autoLayOut===void 0)&& (autoLayOut=true);
			var index=this._items.indexOf(item);
			if (index !=-1){
				var display=item;
				this.removeChild(display);
				for (var i=index+1,n=this._items.length;i < n;i++){
					var child=this._items [i];
					child.name="item"+(i-1);
					if (autoLayOut){
						if (this._direction=="horizontal"){
							child.x-=display.width+this._space;
							}else {
							child.y-=display.height+this._space;
						}
					}
				}
				this.initItems();
				if (this._selectedIndex >-1){
					var newIndex=0;
					newIndex=this._selectedIndex < this._items.length ? this._selectedIndex :(this._selectedIndex-1);
					this._selectedIndex=-1;
					this.selectedIndex=newIndex;
				}
			}
		}

		/**
		*初始化项对象们。
		*/
		__proto.initItems=function(){
			this._items || (this._items=[]);
			this._items.length=0;
			for (var i=0;i < 10000;i++){
				var item=this.getChildByName("item"+i);
				if (item==null)break ;
				this._items.push(item);
				item.selected=(i===this._selectedIndex);
				item.clickHandler=Handler.create(this,this.itemClick,[i],false);
			}
		}

		/**
		*@private
		*项对象的点击事件侦听处理函数。
		*@param index 项索引。
		*/
		__proto.itemClick=function(index){
			this.selectedIndex=index;
		}

		/**
		*@private
		*通过对象的索引设置项对象的 <code>selected</code> 属性值。
		*@param index 需要设置的项对象的索引。
		*@param selected 表示项对象的选中状态。
		*/
		__proto.setSelect=function(index,selected){
			if (this._items && index >-1 && index < this._items.length)this._items[index].selected=selected;
		}

		/**
		*@private
		*创建一个项显示对象。
		*@param skin 项对象的皮肤。
		*@param label 项对象标签。
		*/
		__proto.createItem=function(skin,label){
			return null;
		}

		/**
		*@private
		*更改项对象的属性值。
		*/
		__proto.changeLabels=function(){
			this._labelChanged=false;
			if (this._items){
				var left=0
				for (var i=0,n=this._items.length;i < n;i++){
					var btn=this._items [i];
					this._skin && (btn.skin=this._skin);
					this._labelColors && (btn.labelColors=this._labelColors);
					this._labelSize && (btn.labelSize=this._labelSize);
					this._labelStroke && (btn.labelStroke=this._labelStroke);
					this._labelStrokeColor && (btn.labelStrokeColor=this._labelStrokeColor);
					this._strokeColors && (btn.strokeColors=this._strokeColors);
					this._labelBold && (btn.labelBold=this._labelBold);
					this._labelPadding && (btn.labelPadding=this._labelPadding);
					this._labelAlign && (btn.labelAlign=this._labelAlign);
					this._stateNum && (btn.stateNum=this._stateNum);
					this._labelFont && (btn.labelFont=this._labelFont);
					if (this._direction==="horizontal"){
						btn.y=0;
						btn.x=left;
						left+=btn.width+this._space;
						}else {
						btn.x=0;
						btn.y=left;
						left+=btn.height+this._space;
					}
				}
			}
			this.changeSize();
		}

		/**@inheritDoc */
		__proto.commitMeasure=function(){
			this.runCallLater(this.changeLabels);
		}

		/**@private */
		__proto._setLabelChanged=function(){
			if (!this._labelChanged){
				this._labelChanged=true;
				this.callLater(this.changeLabels);
			}
		}

		/**
		*<p>描边颜色，以字符串表示。</p>
		*默认值为 "#000000"（黑色）;
		*@see laya.display.Text.strokeColor()
		*/
		__getset(0,__proto,'labelStrokeColor',function(){
			return this._labelStrokeColor;
			},function(value){
			if (this._labelStrokeColor !=value){
				this._labelStrokeColor=value;
				this._setLabelChanged();
			}
		});

		/**
		*@copy laya.ui.Image#skin
		*/
		__getset(0,__proto,'skin',function(){
			return this._skin;
			},function(value){
			if (this._skin !=value){
				this._skin=value;
				this._setLabelChanged();
			}
		});

		/**
		*表示当前选择的项索引。默认值为-1。
		*/
		__getset(0,__proto,'selectedIndex',function(){
			return this._selectedIndex;
			},function(value){
			if (this._selectedIndex !=value){
				this.setSelect(this._selectedIndex,false);
				this._selectedIndex=value;
				this.setSelect(value,true);
				this.event("change");
				this.selectHandler && this.selectHandler.runWith(this._selectedIndex);
			}
		});

		/**
		*标签集合字符串。以逗号做分割，如"item0,item1,item2,item3,item4,item5"。
		*/
		__getset(0,__proto,'labels',function(){
			return this._labels;
			},function(value){
			if (this._labels !=value){
				this._labels=value;
				this.removeChildren();
				this._setLabelChanged();
				if (this._labels){
					var a=this._labels.split(",");
					for (var i=0,n=a.length;i < n;i++){
						var item=this.createItem(this._skin,a[i]);
						item.name="item"+i;
						this.addChild(item);
					}
				}
				this.initItems();
			}
		});

		/**
		*<p>表示各个状态下的描边颜色。</p>
		*@see laya.display.Text.strokeColor()
		*/
		__getset(0,__proto,'strokeColors',function(){
			return this._strokeColors;
			},function(value){
			if (this._strokeColors !=value){
				this._strokeColors=value;
				this._setLabelChanged();
			}
		});

		/**
		*@copy laya.ui.Button#labelColors()
		*/
		__getset(0,__proto,'labelColors',function(){
			return this._labelColors;
			},function(value){
			if (this._labelColors !=value){
				this._labelColors=value;
				this._setLabelChanged();
			}
		});

		/**
		*<p>描边宽度（以像素为单位）。</p>
		*默认值0，表示不描边。
		*@see laya.display.Text.stroke()
		*/
		__getset(0,__proto,'labelStroke',function(){
			return this._labelStroke;
			},function(value){
			if (this._labelStroke !=value){
				this._labelStroke=value;
				this._setLabelChanged();
			}
		});

		/**
		*表示按钮文本标签的字体大小。
		*/
		__getset(0,__proto,'labelSize',function(){
			return this._labelSize;
			},function(value){
			if (this._labelSize !=value){
				this._labelSize=value;
				this._setLabelChanged();
			}
		});

		/**
		*表示按钮的状态值，以数字表示，默认为3态。
		*@see laya.ui.Button#stateNum
		*/
		__getset(0,__proto,'stateNum',function(){
			return this._stateNum;
			},function(value){
			if (this._stateNum !=value){
				this._stateNum=value;
				this._setLabelChanged();
			}
		});

		/**
		*表示按钮文本标签是否为粗体字。
		*/
		__getset(0,__proto,'labelBold',function(){
			return this._labelBold;
			},function(value){
			if (this._labelBold !=value){
				this._labelBold=value;
				this._setLabelChanged();
			}
		});

		/**
		*表示按钮文本标签的字体名称，以字符串形式表示。
		*@see laya.display.Text.font()
		*/
		__getset(0,__proto,'labelFont',function(){
			return this._labelFont;
			},function(value){
			if (this._labelFont !=value){
				this._labelFont=value;
				this._setLabelChanged();
			}
		});

		/**
		*表示按钮文本标签的边距。
		*<p><b>格式：</b>"上边距,右边距,下边距,左边距"。</p>
		*/
		__getset(0,__proto,'labelPadding',function(){
			return this._labelPadding;
			},function(value){
			if (this._labelPadding !=value){
				this._labelPadding=value;
				this._setLabelChanged();
			}
		});

		/**
		*布局方向。
		*<p>默认值为"horizontal"。</p>
		*<p><b>取值：</b>
		*<li>"horizontal"：表示水平布局。</li>
		*<li>"vertical"：表示垂直布局。</li>
		*</p>
		*/
		__getset(0,__proto,'direction',function(){
			return this._direction;
			},function(value){
			this._direction=value;
			this._setLabelChanged();
		});

		/**
		*项对象们之间的间隔（以像素为单位）。
		*/
		__getset(0,__proto,'space',function(){
			return this._space;
			},function(value){
			this._space=value;
			this._setLabelChanged();
		});

		/**
		*项对象们的存放数组。
		*/
		__getset(0,__proto,'items',function(){
			return this._items;
		});

		/**
		*获取或设置当前选择的项对象。
		*/
		__getset(0,__proto,'selection',function(){
			return this._selectedIndex >-1 && this._selectedIndex < this._items.length ? this._items[this._selectedIndex] :null;
			},function(value){
			this.selectedIndex=this._items.indexOf(value);
		});

		/**@inheritDoc */
		__getset(0,__proto,'dataSource',_super.prototype._$get_dataSource,function(value){
			this._dataSource=value;
			if (((typeof value=='number')&& Math.floor(value)==value)|| (typeof value=='string'))this.selectedIndex=parseInt(value);
			else if ((value instanceof Array))this.labels=(value).join(",");
			else _super.prototype._$set_dataSource.call(this,value);
		});

		return UIGroup;
	})(Box)


	/**
	*@private
	*/
	//class laya.utils.GraphicAnimation extends laya.display.FrameAnimation
	var GraphicAnimation=(function(_super){
		var GraphicNode;
		function GraphicAnimation(){
			this.animationList=null;
			this.animationDic=null;
			this._nodeList=null;
			this._nodeDefaultProps=null;
			this._gList=null;
			this._nodeIDAniDic={};
			this._rootNode=null;
			this._nodeGDic=null;
			GraphicAnimation.__super.call(this);
		}

		__class(GraphicAnimation,'laya.utils.GraphicAnimation',_super);
		var __proto=GraphicAnimation.prototype;
		/**
		*@private
		*/
		__proto._parseNodeList=function(uiView){
			if (!this._nodeList){
				this._nodeList=[];
			}
			this._nodeDefaultProps[uiView.compId]=uiView.props;
			if (uiView.compId)
				this._nodeList.push(uiView.compId);
			var childs=uiView.child;
			if (childs){
				var i=0,len=childs.length;
				for (i=0;i < len;i++){
					this._parseNodeList(childs[i]);
				}
			}
		}

		/**
		*@private
		*/
		__proto._calGraphicData=function(aniData){
			this._setUp(null,aniData);
			this._createGraphicData();
		}

		/**
		*@private
		*/
		__proto._createGraphicData=function(){
			var gList=[];
			var i=0,len=this.count;
			var animationDataNew=this._animationNewFrames;
			if (!animationDataNew)animationDataNew=[];
			var preGraphic;
			for (i=0;i < len;i++){
				if (animationDataNew[i] || !preGraphic){
					preGraphic=this._createFrameGraphic(i);
				}
				gList.push(preGraphic);
			}
			this._gList=gList;
		}

		/**
		*@private
		*/
		__proto._createFrameGraphic=function(frame){
			var g=new Graphics();
			if (!GraphicAnimation._rootMatrix)
				GraphicAnimation._rootMatrix=new Matrix();
			this._updateNodeGraphic(this._rootNode,frame,GraphicAnimation._rootMatrix,g);
			return g;
		}

		__proto._updateNodeGraphic=function(node,frame,parentTransfrom,g,alpha){
			(alpha===void 0)&& (alpha=1);
			var tNodeG;
			tNodeG=this._nodeGDic[node.compId]=this._getNodeGraphicData(node.compId,frame,this._nodeGDic[node.compId]);
			var tGraphicAlpha=tNodeG.alpha *alpha;
			if (tGraphicAlpha < 0.01)return;
			if (!tNodeG.resultTransform){
				tNodeG.resultTransform=Matrix.create();
			};
			var tResultTransform;
			tResultTransform=tNodeG.resultTransform;
			Matrix.mul(tNodeG.transform,parentTransfrom,tResultTransform);
			var tTex;
			if (tNodeG.skin){
				tTex=this._getTextureByUrl(tNodeG.skin);
				if (tTex){
					if (tResultTransform._checkTransform()){
						g.drawTexture(tTex,0,0,tNodeG.width,tNodeG.height,tResultTransform,tGraphicAlpha);
						tNodeG.resultTransform=null;
						}else {
						g.drawTexture(tTex,tResultTransform.tx,tResultTransform.ty,tNodeG.width,tNodeG.height,null,tGraphicAlpha);
					}
				}
			};
			var childs;
			childs=node.child;
			if (!childs)
				return;
			var i=0,len=0;
			len=childs.length;
			for (i=0;i < len;i++){
				this._updateNodeGraphic(childs[i],frame,tResultTransform,g,tGraphicAlpha);
			}
		}

		__proto._updateNoChilds=function(tNodeG,g){
			if (!tNodeG.skin)
				return;
			var tTex=this._getTextureByUrl(tNodeG.skin);
			if (!tTex)
				return;
			var tTransform=tNodeG.transform;
			tTransform._checkTransform();
			var onlyTranslate=false;
			onlyTranslate=!tTransform.bTransform;
			if (!onlyTranslate){
				g.drawTexture(tTex,0,0,tNodeG.width,tNodeG.height,tTransform.clone(),tNodeG.alpha);
				}else {
				g.drawTexture(tTex,tTransform.tx,tTransform.ty,tNodeG.width,tNodeG.height,null,tNodeG.alpha);
			}
		}

		__proto._updateNodeGraphic2=function(node,frame,g){
			var tNodeG;
			tNodeG=this._nodeGDic[node.compId]=this._getNodeGraphicData(node.compId,frame,this._nodeGDic[node.compId]);
			if (!node.child){
				this._updateNoChilds(tNodeG,g);
				return;
			};
			var tTransform=tNodeG.transform;
			tTransform._checkTransform();
			var onlyTranslate=false;
			onlyTranslate=!tTransform.bTransform;
			var hasTrans=false;
			hasTrans=onlyTranslate && (tTransform.tx !=0 || tTransform.ty !=0);
			var ifSave=false;
			ifSave=(tTransform.bTransform)|| tNodeG.alpha !=1;
			if (ifSave){
				g.save();
			}
			if (tNodeG.alpha !=1){
				g.alpha(tNodeG.alpha);
			}
			if (!onlyTranslate){
				g.transform(tTransform.clone());
				}else if (hasTrans){
				g.translate(tTransform.tx,tTransform.ty);
			};
			var childs;
			childs=node.child;
			var tTex;
			if (tNodeG.skin){
				tTex=this._getTextureByUrl(tNodeG.skin);
				if (tTex){
					g.drawTexture(tTex,0,0,tNodeG.width,tNodeG.height);
				}
			}
			if (childs){
				var i=0,len=0;
				len=childs.length;
				for (i=0;i < len;i++){
					this._updateNodeGraphic2(childs[i],frame,g);
				}
			}
			if (ifSave){
				g.restore();
				}else {
				if (!onlyTranslate){
					g.transform(tTransform.clone().invert());
					}else if (hasTrans){
					g.translate(-tTransform.tx,-tTransform.ty);
				}
			}
		}

		/**
		*@private
		*/
		__proto._calculateNodeKeyFrames=function(node){
			_super.prototype._calculateNodeKeyFrames.call(this,node);
			this._nodeIDAniDic[node.target]=node;
		}

		/**
		*@private
		*/
		__proto.getNodeDataByID=function(nodeID){
			return this._nodeIDAniDic[nodeID];
		}

		/**
		*@private
		*/
		__proto._getParams=function(obj,params,frame,obj2){
			var rst=GraphicAnimation._temParam;
			rst.length=params.length;
			var i=0,len=params.length;
			for (i=0;i < len;i++){
				rst[i]=this._getObjVar(obj,params[i][0],frame,params[i][1],obj2);
			}
			return rst;
		}

		/**
		*@private
		*/
		__proto._getObjVar=function(obj,key,frame,noValue,obj2){
			if (obj.hasOwnProperty(key)){
				var vArr=obj[key];
				if (frame >=vArr.length)
					frame=vArr.length-1;
				return obj[key][frame];
			}
			if (obj2.hasOwnProperty(key)){
				return obj2[key];
			}
			return noValue;
		}

		__proto._getNodeGraphicData=function(nodeID,frame,rst){
			if (!rst)
				rst=GraphicNode.create();
			if (!rst.transform){
				rst.transform=Matrix.create();
				}else{
				rst.transform.identity();
			};
			var node=this.getNodeDataByID(nodeID);
			if (!node)
				return rst;
			var frameData=node.frames;
			var params=this._getParams(frameData,GraphicAnimation._drawTextureCmd,frame,this._nodeDefaultProps[nodeID]);
			var url=params[0];
			var width=NaN,height=NaN;
			var px=params[5],py=params[6];
			var aX=params[13],aY=params[14];
			var sx=params[7],sy=params[8];
			var rotate=params[9];
			var skewX=params[11],skewY=params[12]
			width=params[3];
			height=params[4];
			var tex;
			rst.skin=url;
			rst.width=width;
			rst.height=height;
			if (url){
				tex=this._getTextureByUrl(url);
				if (tex){
					if (!width)
						width=tex.sourceWidth;
					if (!height)
						height=tex.sourceHeight;
					}else {
					console.warn("lost skin:",url,",you may load pics first");
				}
			}
			rst.alpha=params[10];
			var m;
			m=rst.transform;
			if (aX !=0){
				px=aX *width;
			}
			if (aY !=0){
				py=aY *height;
			}
			if (px !=0 || py !=0){
				m.translate(-px,-py);
			};
			var tm=null;
			if (rotate || sx!==1 || sy!==1 || skewX || skewY){
				tm=GraphicAnimation._tempMt;
				tm.identity();
				tm.bTransform=true;
				var skx=(rotate-skewX)*0.0174532922222222;
				var sky=(rotate+skewY)*0.0174532922222222;
				var cx=Math.cos(sky);
				var ssx=Math.sin(sky);
				var cy=Math.sin(skx);
				var ssy=Math.cos(skx);
				tm.a=sx *cx;
				tm.b=sx *ssx;
				tm.c=-sy *cy;
				tm.d=sy *ssy;
				tm.tx=tm.ty=0;
			}
			if (tm){
				m=Matrix.mul(m,tm,m);
			}
			m.translate(params[1],params[2]);
			return rst;
		}

		/**
		*@private
		*/
		__proto._getTextureByUrl=function(url){
			return Loader.getRes(url);
		}

		/**
		*@private
		*/
		__proto.setAniData=function(uiView,aniName){
			if (uiView.animations){
				this._nodeDefaultProps={};
				this._nodeGDic={};
				if (this._nodeList)
					this._nodeList.length=0;
				this._rootNode=uiView;
				this._parseNodeList(uiView);
				var aniDic={};
				var anilist=[];
				var animations=uiView.animations;
				var i=0,len=animations.length;
				var tAniO;
				for (i=0;i < len;i++){
					tAniO=animations[i];
					this._labels=null;
					if (aniName && aniName !=tAniO.name){
						continue ;
					}
					if (!tAniO)
						continue ;
					try {
						this._calGraphicData(tAniO);
						}catch (e){
						console.warn("parse animation fail:"+tAniO.name+",empty animation created");
						this._gList=[];
					};
					var frameO={};
					frameO.interval=1000 / tAniO["frameRate"];
					frameO.frames=this._gList;
					frameO.labels=this._labels;
					frameO.name=tAniO.name;
					anilist.push(frameO);
					aniDic[tAniO.name]=frameO;
				}
				this.animationList=anilist;
				this.animationDic=aniDic;
			}
			GraphicAnimation._temParam.length=0;
		}

		__proto.parseByData=function(aniData){
			var rootNode,aniO;
			rootNode=aniData.nodeRoot;
			aniO=aniData.aniO;
			delete aniData.nodeRoot;
			delete aniData.aniO;
			this._nodeDefaultProps={};
			this._nodeGDic={};
			if (this._nodeList)
				this._nodeList.length=0;
			this._rootNode=rootNode;
			this._parseNodeList(rootNode);
			this._labels=null;
			try {
				this._calGraphicData(aniO);
				}catch (e){
				console.warn("parse animation fail:"+aniO.name+",empty animation created");
				this._gList=[];
			};
			var frameO=aniData;
			frameO.interval=1000 / aniO["frameRate"];
			frameO.frames=this._gList;
			frameO.labels=this._labels;
			frameO.name=aniO.name;
			return frameO;
		}

		/**
		*@private
		*/
		__proto.setUpAniData=function(uiView){
			if (uiView.animations){
				var aniDic={};
				var anilist=[];
				var animations=uiView.animations;
				var i=0,len=animations.length;
				var tAniO;
				for (i=0;i < len;i++){
					tAniO=animations[i];
					if (!tAniO)
						continue ;
					var frameO={};
					frameO.name=tAniO.name;
					frameO.aniO=tAniO;
					frameO.nodeRoot=uiView;
					anilist.push(frameO);
					aniDic[tAniO.name]=frameO;
				}
				this.animationList=anilist;
				this.animationDic=aniDic;
			}
		}

		/**
		*@private
		*/
		__proto._clear=function(){
			this.animationList=null;
			this.animationDic=null;
			this._gList=null;
			if (this._nodeGDic){
				var key;
				var tGNode;
				for (key in this._nodeGDic){
					tGNode=this._nodeGDic[key];
					if (tGNode)tGNode.recover();
				}
			}
			this._nodeGDic=null;
		}

		GraphicAnimation.parseAnimationByData=function(animationObject){
			if (!GraphicAnimation._I)
				GraphicAnimation._I=new GraphicAnimation();
			var rst;
			rst=GraphicAnimation._I.parseByData(animationObject);
			GraphicAnimation._I._clear();
			return rst;
		}

		GraphicAnimation.parseAnimationData=function(aniData){
			if (!GraphicAnimation._I)
				GraphicAnimation._I=new GraphicAnimation();
			GraphicAnimation._I.setUpAniData(aniData);
			var rst;
			rst={};
			rst.animationList=GraphicAnimation._I.animationList;
			rst.animationDic=GraphicAnimation._I.animationDic;
			GraphicAnimation._I._clear();
			return rst;
		}

		GraphicAnimation._temParam=[];
		GraphicAnimation._I=null
		GraphicAnimation._rootMatrix=null
		__static(GraphicAnimation,
		['_drawTextureCmd',function(){return this._drawTextureCmd=[["skin",null],["x",0],["y",0],["width",0],["height",0],["pivotX",0],["pivotY",0],["scaleX",1],["scaleY",1],["rotation",0],["alpha",1],["skewX",0],["skewY",0],["anchorX",0],["anchorY",0]];},'_tempMt',function(){return this._tempMt=new Matrix();}
		]);
		GraphicAnimation.__init$=function(){
			//class GraphicNode
			GraphicNode=(function(){
				function GraphicNode(){
					this.skin=null;
					this.transform=null;
					this.resultTransform=null;
					this.width=NaN;
					this.height=NaN;
					this.alpha=1;
				}
				__class(GraphicNode,'');
				var __proto=GraphicNode.prototype;
				__proto.recover=function(){
					this.skin=null;
					this.width=0;
					this.height=0;
					this.alpha=1;
					if (this.transform){
						this.transform.destroy();
						this.transform=null;
					}
					if (this.resultTransform){
						this.resultTransform.destroy();
						this.resultTransform=null;
					}
					Pool.recover("GraphicNode",this);
				}
				GraphicNode.create=function(){
					return Pool.getItemByClass("GraphicNode",GraphicNode);
				}
				return GraphicNode;
			})()
		}

		return GraphicAnimation;
	})(FrameAnimation)


	/**
	*字体切片，简化版的位图字体，只需设置一个切片图片和文字内容即可使用，效果同位图字体
	*使用方式：设置位图字体皮肤skin，设置皮肤对应的字体内容sheet（如果多行，可以使用空格换行），示例：
	*fontClip.skin="font1.png";//设置皮肤
	*fontClip.sheet="abc123 456";//设置皮肤对应的内容，空格换行。此皮肤为2行5列（显示时skin会被等分为2行5列），第一行对应的文字为"abc123"，第二行为"456"
	*fontClip.value="a1326";//显示"a1326"文字
	*/
	//class laya.ui.FontClip extends laya.ui.Clip
	var FontClip=(function(_super){
		function FontClip(skin,sheet){
			this._valueArr=null;
			this._indexMap=null;
			this._sheet=null;
			this._direction="horizontal";
			this._spaceX=0;
			this._spaceY=0;
			this._align="left";
			this._wordsW=0;
			this._wordsH=0;
			FontClip.__super.call(this);
			if (skin)this.skin=skin;
			if (sheet)this.sheet=sheet;
		}

		__class(FontClip,'laya.ui.FontClip',_super);
		var __proto=FontClip.prototype;
		__proto.createChildren=function(){
			this._bitmap=new AutoBitmap();
			this.on("loaded",this,this._onClipLoaded);
		}

		/**
		*资源加载完毕
		*/
		__proto._onClipLoaded=function(){
			this.callLater(this.changeValue);
		}

		/**渲染数值*/
		__proto.changeValue=function(){
			if (!this._sources)return;
			if (!this._valueArr)return;
			this.graphics.clear(true);
			var texture;
			texture=this._sources[0];
			if (!texture)return;
			var isHorizontal=(this._direction==="horizontal");
			if (isHorizontal){
				this._wordsW=this._valueArr.length *(texture.sourceWidth+this.spaceX);
				this._wordsH=texture.sourceHeight;
				}else{
				this._wordsW=texture.sourceWidth;
				this._wordsH=(texture.sourceHeight+this.spaceY)*this._valueArr.length;
			};
			var dX=0;
			if (this._width){
				switch(this._align){
					case "center":
						dX=0.5 *(this._width-this._wordsW);
						break ;
					case "right":
						dX=this._width-this._wordsW;
						break ;
					default :
						dX=0;
					}
			}
			for (var i=0,sz=this._valueArr.length;i < sz;i++){
				var index=this._indexMap[this._valueArr.charAt(i)];
				if (!this.sources[index])continue ;
				texture=this.sources[index];
				if (isHorizontal)this.graphics.drawTexture(texture,dX+i *(texture.sourceWidth+this.spaceX),0,texture.sourceWidth,texture.sourceHeight);
				else this.graphics.drawTexture(texture,0+dX,i *(texture.sourceHeight+this.spaceY),texture.sourceWidth,texture.sourceHeight);
			}
			if (!this._width){
				this.resetLayoutX();
				this.callLater(this.changeSize);
			}
			if (!this._height){
				this.resetLayoutY();
				this.callLater(this.changeSize);
			}
		}

		__proto.destroy=function(destroyChild){
			(destroyChild===void 0)&& (destroyChild=true);
			this._valueArr=null;
			this._indexMap=null;
			this.graphics.clear(true);
			this.removeSelf();
			this.off("loaded",this,this._onClipLoaded);
			_super.prototype.destroy.call(this,destroyChild);
		}

		/**
		*设置位图字体内容，空格代表换行。比如"abc123 456"，代表第一行对应的文字为"abc123"，第二行为"456"
		*/
		__getset(0,__proto,'sheet',function(){
			return this._sheet;
			},function(value){
			value+="";
			this._sheet=value;
			var arr=value.split(" ");
			this._clipX=String(arr[0]).length;
			this.clipY=arr.length;
			this._indexMap={};
			for (var i=0;i < this._clipY;i++){
				var line=arr[i].split("");
				for (var j=0,n=line.length;j < n;j++){
					this._indexMap[line[j]]=i *this._clipX+j;
				}
			}
		});

		__getset(0,__proto,'height',_super.prototype._$get_height,function(value){
			_super.prototype._$set_height.call(this,value);
			this.callLater(this.changeValue);
		});

		/**
		*布局方向。
		*<p>默认值为"horizontal"。</p>
		*<p><b>取值：</b>
		*<li>"horizontal"：表示水平布局。</li>
		*<li>"vertical"：表示垂直布局。</li>
		*</p>
		*/
		__getset(0,__proto,'direction',function(){
			return this._direction;
			},function(value){
			this._direction=value;
			this.callLater(this.changeValue);
		});

		/**
		*设置位图字体的显示内容
		*/
		__getset(0,__proto,'value',function(){
			if (!this._valueArr)return "";
			return this._valueArr;
			},function(value){
			value+="";
			this._valueArr=value;
			this.callLater(this.changeValue);
		});

		__getset(0,__proto,'width',_super.prototype._$get_width,function(value){
			_super.prototype._$set_width.call(this,value);
			this.callLater(this.changeValue);
		});

		/**X方向文字间隙*/
		__getset(0,__proto,'spaceX',function(){
			return this._spaceX;
			},function(value){
			this._spaceX=value;
			if (this._direction==="horizontal")this.callLater(this.changeValue);
		});

		/**Y方向文字间隙*/
		__getset(0,__proto,'spaceY',function(){
			return this._spaceY;
			},function(value){
			this._spaceY=value;
			if (!(this._direction==="horizontal"))this.callLater(this.changeValue);
		});

		/**水平对齐方式*/
		__getset(0,__proto,'align',function(){
			return this._align;
			},function(v){
			this._align=v;
			this.callLater(this.changeValue);
		});

		__getset(0,__proto,'measureWidth',function(){
			return this._wordsW;
		});

		__getset(0,__proto,'measureHeight',function(){
			return this._wordsH;
		});

		return FontClip;
	})(Clip)


	/**
	*使用 <code>HScrollBar</code> （水平 <code>ScrollBar</code> ）控件，可以在因数据太多而不能在显示区域完全显示时控制显示的数据部分。
	*@example <caption>以下示例代码，创建了一个 <code>HScrollBar</code> 实例。</caption>
	*package
	*{
		*import laya.ui.HScrollBar;
		*import laya.utils.Handler;
		*public class HScrollBar_Example
		*{
			*private var hScrollBar:HScrollBar;
			*public function HScrollBar_Example()
			*{
				*Laya.init(640,800);//设置游戏画布宽高。
				*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
				*Laya.loader.load(["resource/ui/hscroll.png","resource/ui/hscroll$bar.png","resource/ui/hscroll$down.png","resource/ui/hscroll$up.png"],Handler.create(this,onLoadComplete));//加载资源。
				*}
			*private function onLoadComplete():void
			*{
				*hScrollBar=new HScrollBar();//创建一个 HScrollBar 类的实例对象 hScrollBar 。
				*hScrollBar.skin="resource/ui/hscroll.png";//设置 hScrollBar 的皮肤。
				*hScrollBar.x=100;//设置 hScrollBar 对象的属性 x 的值，用于控制 hScrollBar 对象的显示位置。
				*hScrollBar.y=100;//设置 hScrollBar 对象的属性 y 的值，用于控制 hScrollBar 对象的显示位置。
				*hScrollBar.changeHandler=new Handler(this,onChange);//设置 hScrollBar 的滚动变化处理器。
				*Laya.stage.addChild(hScrollBar);//将此 hScrollBar 对象添加到显示列表。
				*}
			*private function onChange(value:Number):void
			*{
				*trace("滚动条的位置： value="+value);
				*}
			*}
		*}
	*@example
	*Laya.init(640,800);//设置游戏画布宽高
	*Laya.stage.bgColor="#efefef";//设置画布的背景颜色
	*var hScrollBar;
	*var res=["resource/ui/hscroll.png","resource/ui/hscroll$bar.png","resource/ui/hscroll$down.png","resource/ui/hscroll$up.png"];
	*Laya.loader.load(res,laya.utils.Handler.create(this,onLoadComplete));//加载资源。
	*function onLoadComplete(){
		*console.log("资源加载完成！");
		*hScrollBar=new laya.ui.HScrollBar();//创建一个 HScrollBar 类的实例对象 hScrollBar 。
		*hScrollBar.skin="resource/ui/hscroll.png";//设置 hScrollBar 的皮肤。
		*hScrollBar.x=100;//设置 hScrollBar 对象的属性 x 的值，用于控制 hScrollBar 对象的显示位置。
		*hScrollBar.y=100;//设置 hScrollBar 对象的属性 y 的值，用于控制 hScrollBar 对象的显示位置。
		*hScrollBar.changeHandler=new laya.utils.Handler(this,onChange);//设置 hScrollBar 的滚动变化处理器。
		*Laya.stage.addChild(hScrollBar);//将此 hScrollBar 对象添加到显示列表。
		*}
	*function onChange(value)
	*{
		*console.log("滚动条的位置： value="+value);
		*}
	*@example
	*import HScrollBar=laya.ui.HScrollBar;
	*import Handler=laya.utils.Handler;
	*class HScrollBar_Example {
		*private hScrollBar:HScrollBar;
		*constructor(){
			*Laya.init(640,800);//设置游戏画布宽高。
			*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
			*Laya.loader.load(["resource/ui/hscroll.png","resource/ui/hscroll$bar.png","resource/ui/hscroll$down.png","resource/ui/hscroll$up.png"],Handler.create(this,this.onLoadComplete));//加载资源。
			*}
		*private onLoadComplete():void {
			*this.hScrollBar=new HScrollBar();//创建一个 HScrollBar 类的实例对象 hScrollBar 。
			*this.hScrollBar.skin="resource/ui/hscroll.png";//设置 hScrollBar 的皮肤。
			*this.hScrollBar.x=100;//设置 hScrollBar 对象的属性 x 的值，用于控制 hScrollBar 对象的显示位置。
			*this.hScrollBar.y=100;//设置 hScrollBar 对象的属性 y 的值，用于控制 hScrollBar 对象的显示位置。
			*this.hScrollBar.changeHandler=new Handler(this,this.onChange);//设置 hScrollBar 的滚动变化处理器。
			*Laya.stage.addChild(this.hScrollBar);//将此 hScrollBar 对象添加到显示列表。
			*}
		*private onChange(value:number):void {
			*console.log("滚动条的位置： value="+value);
			*}
		*}
	*/
	//class laya.ui.HScrollBar extends laya.ui.ScrollBar
	var HScrollBar=(function(_super){
		function HScrollBar(){HScrollBar.__super.call(this);;
		};

		__class(HScrollBar,'laya.ui.HScrollBar',_super);
		var __proto=HScrollBar.prototype;
		/**@inheritDoc */
		__proto.initialize=function(){
			_super.prototype.initialize.call(this);
			this.slider.isVertical=false;
		}

		return HScrollBar;
	})(ScrollBar)


	/**
	*使用 <code>HSlider</code> 控件，用户可以通过在滑块轨道的终点之间移动滑块来选择值。
	*<p> <code>HSlider</code> 控件采用水平方向。滑块轨道从左向右扩展，而标签位于轨道的顶部或底部。</p>
	*
	*@example <caption>以下示例代码，创建了一个 <code>HSlider</code> 实例。</caption>
	*package
	*{
		*import laya.ui.HSlider;
		*import laya.utils.Handler;
		*public class HSlider_Example
		*{
			*private var hSlider:HSlider;
			*public function HSlider_Example()
			*{
				*Laya.init(640,800);//设置游戏画布宽高。
				*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
				*Laya.loader.load(["resource/ui/hslider.png","resource/ui/hslider$bar.png"],Handler.create(this,onLoadComplete));//加载资源。
				*}
			*private function onLoadComplete():void
			*{
				*hSlider=new HSlider();//创建一个 HSlider 类的实例对象 hSlider 。
				*hSlider.skin="resource/ui/hslider.png";//设置 hSlider 的皮肤。
				*hSlider.min=0;//设置 hSlider 最低位置值。
				*hSlider.max=10;//设置 hSlider 最高位置值。
				*hSlider.value=2;//设置 hSlider 当前位置值。
				*hSlider.tick=1;//设置 hSlider 刻度值。
				*hSlider.x=100;//设置 hSlider 对象的属性 x 的值，用于控制 hSlider 对象的显示位置。
				*hSlider.y=100;//设置 hSlider 对象的属性 y 的值，用于控制 hSlider 对象的显示位置。
				*hSlider.changeHandler=new Handler(this,onChange);//设置 hSlider 位置变化处理器。
				*Laya.stage.addChild(hSlider);//把 hSlider 添加到显示列表。
				*}
			*private function onChange(value:Number):void
			*{
				*trace("滑块的位置： value="+value);
				*}
			*}
		*}
	*@example
	*Laya.init(640,800,"canvas");//设置游戏画布宽高、渲染模式
	*Laya.stage.bgColor="#efefef";//设置画布的背景颜色
	*var hSlider;
	*var res=["resource/ui/hslider.png","resource/ui/hslider$bar.png"];
	*Laya.loader.load(res,laya.utils.Handler.create(this,onLoadComplete));
	*function onLoadComplete(){
		*console.log("资源加载完成！");
		*hSlider=new laya.ui.HSlider();//创建一个 HSlider 类的实例对象 hSlider 。
		*hSlider.skin="resource/ui/hslider.png";//设置 hSlider 的皮肤。
		*hSlider.min=0;//设置 hSlider 最低位置值。
		*hSlider.max=10;//设置 hSlider 最高位置值。
		*hSlider.value=2;//设置 hSlider 当前位置值。
		*hSlider.tick=1;//设置 hSlider 刻度值。
		*hSlider.x=100;//设置 hSlider 对象的属性 x 的值，用于控制 hSlider 对象的显示位置。
		*hSlider.y=100;//设置 hSlider 对象的属性 y 的值，用于控制 hSlider 对象的显示位置。
		*hSlider.changeHandler=new laya.utils.Handler(this,onChange);//设置 hSlider 位置变化处理器。
		*Laya.stage.addChild(hSlider);//把 hSlider 添加到显示列表。
		*}
	*function onChange(value)
	*{
		*console.log("滑块的位置： value="+value);
		*}
	*@example
	*import Handler=laya.utils.Handler;
	*import HSlider=laya.ui.HSlider;
	*class HSlider_Example {
		*private hSlider:HSlider;
		*constructor(){
			*Laya.init(640,800);//设置游戏画布宽高。
			*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
			*Laya.loader.load(["resource/ui/hslider.png","resource/ui/hslider$bar.png"],Handler.create(this,this.onLoadComplete));//加载资源。
			*}
		*private onLoadComplete():void {
			*this.hSlider=new HSlider();//创建一个 HSlider 类的实例对象 hSlider 。
			*this.hSlider.skin="resource/ui/hslider.png";//设置 hSlider 的皮肤。
			*this.hSlider.min=0;//设置 hSlider 最低位置值。
			*this.hSlider.max=10;//设置 hSlider 最高位置值。
			*this.hSlider.value=2;//设置 hSlider 当前位置值。
			*this.hSlider.tick=1;//设置 hSlider 刻度值。
			*this.hSlider.x=100;//设置 hSlider 对象的属性 x 的值，用于控制 hSlider 对象的显示位置。
			*this.hSlider.y=100;//设置 hSlider 对象的属性 y 的值，用于控制 hSlider 对象的显示位置。
			*this.hSlider.changeHandler=new Handler(this,this.onChange);//设置 hSlider 位置变化处理器。
			*Laya.stage.addChild(this.hSlider);//把 hSlider 添加到显示列表。
			*}
		*private onChange(value:number):void {
			*console.log("滑块的位置： value="+value);
			*}
		*}
	*
	*@see laya.ui.Slider
	*/
	//class laya.ui.HSlider extends laya.ui.Slider
	var HSlider=(function(_super){
		/**
		*创建一个 <code>HSlider</code> 类实例。
		*@param skin 皮肤。
		*/
		function HSlider(skin){
			HSlider.__super.call(this,skin);
			this.isVertical=false;
		}

		__class(HSlider,'laya.ui.HSlider',_super);
		return HSlider;
	})(Slider)


	/**
	*
	*使用 <code>VScrollBar</code> （垂直 <code>ScrollBar</code> ）控件，可以在因数据太多而不能在显示区域完全显示时控制显示的数据部分。
	*
	*@example <caption>以下示例代码，创建了一个 <code>VScrollBar</code> 实例。</caption>
	*package
	*{
		*import laya.ui.vScrollBar;
		*import laya.ui.VScrollBar;
		*import laya.utils.Handler;
		*public class VScrollBar_Example
		*{
			*private var vScrollBar:VScrollBar;
			*public function VScrollBar_Example()
			*{
				*Laya.init(640,800);//设置游戏画布宽高、渲染模式。
				*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
				*Laya.loader.load(["resource/ui/vscroll.png","resource/ui/vscroll$bar.png","resource/ui/vscroll$down.png","resource/ui/vscroll$up.png"],Handler.create(this,onLoadComplete));
				*}
			*private function onLoadComplete():void
			*{
				*vScrollBar=new VScrollBar();//创建一个 vScrollBar 类的实例对象 hScrollBar 。
				*vScrollBar.skin="resource/ui/vscroll.png";//设置 vScrollBar 的皮肤。
				*vScrollBar.x=100;//设置 vScrollBar 对象的属性 x 的值，用于控制 vScrollBar 对象的显示位置。
				*vScrollBar.y=100;//设置 vScrollBar 对象的属性 y 的值，用于控制 vScrollBar 对象的显示位置。
				*vScrollBar.changeHandler=new Handler(this,onChange);//设置 vScrollBar 的滚动变化处理器。
				*Laya.stage.addChild(vScrollBar);//将此 vScrollBar 对象添加到显示列表。
				*}
			*private function onChange(value:Number):void
			*{
				*trace("滚动条的位置： value="+value);
				*}
			*}
		*}
	*@example
	*Laya.init(640,800);//设置游戏画布宽高
	*Laya.stage.bgColor="#efefef";//设置画布的背景颜色
	*var vScrollBar;
	*var res=["resource/ui/vscroll.png","resource/ui/vscroll$bar.png","resource/ui/vscroll$down.png","resource/ui/vscroll$up.png"];
	*Laya.loader.load(res,laya.utils.Handler.create(this,onLoadComplete));//加载资源。
	*function onLoadComplete(){
		*vScrollBar=new laya.ui.VScrollBar();//创建一个 vScrollBar 类的实例对象 hScrollBar 。
		*vScrollBar.skin="resource/ui/vscroll.png";//设置 vScrollBar 的皮肤。
		*vScrollBar.x=100;//设置 vScrollBar 对象的属性 x 的值，用于控制 vScrollBar 对象的显示位置。
		*vScrollBar.y=100;//设置 vScrollBar 对象的属性 y 的值，用于控制 vScrollBar 对象的显示位置。
		*vScrollBar.changeHandler=new laya.utils.Handler(this,onChange);//设置 vScrollBar 的滚动变化处理器。
		*Laya.stage.addChild(vScrollBar);//将此 vScrollBar 对象添加到显示列表。
		*}
	*function onChange(value){
		*console.log("滚动条的位置： value="+value);
		*}
	*@example
	*import VScrollBar=laya.ui.VScrollBar;
	*import Handler=laya.utils.Handler;
	*class VScrollBar_Example {
		*private vScrollBar:VScrollBar;
		*constructor(){
			*Laya.init(640,800);//设置游戏画布宽高、渲染模式。
			*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
			*Laya.loader.load(["resource/ui/vscroll.png","resource/ui/vscroll$bar.png","resource/ui/vscroll$down.png","resource/ui/vscroll$up.png"],Handler.create(this,this.onLoadComplete));
			*}
		*private onLoadComplete():void {
			*this.vScrollBar=new VScrollBar();//创建一个 vScrollBar 类的实例对象 hScrollBar 。
			*this.vScrollBar.skin="resource/ui/vscroll.png";//设置 vScrollBar 的皮肤。
			*this.vScrollBar.x=100;//设置 vScrollBar 对象的属性 x 的值，用于控制 vScrollBar 对象的显示位置。
			*this.vScrollBar.y=100;//设置 vScrollBar 对象的属性 y 的值，用于控制 vScrollBar 对象的显示位置。
			*this.vScrollBar.changeHandler=new Handler(this,this.onChange);//设置 vScrollBar 的滚动变化处理器。
			*Laya.stage.addChild(this.vScrollBar);//将此 vScrollBar 对象添加到显示列表。
			*}
		*private onChange(value:number):void {
			*console.log("滚动条的位置： value="+value);
			*}
		*}
	*/
	//class laya.ui.VScrollBar extends laya.ui.ScrollBar
	var VScrollBar=(function(_super){
		function VScrollBar(){VScrollBar.__super.call(this);;
		};

		__class(VScrollBar,'laya.ui.VScrollBar',_super);
		return VScrollBar;
	})(ScrollBar)


	/**
	*<code>TextInput</code> 类用于创建显示对象以显示和输入文本。
	*
	*@example <caption>以下示例代码，创建了一个 <code>TextInput</code> 实例。</caption>
	*package
	*{
		*import laya.display.Stage;
		*import laya.ui.TextInput;
		*import laya.utils.Handler;
		*public class TextInput_Example
		*{
			*public function TextInput_Example()
			*{
				*Laya.init(640,800);//设置游戏画布宽高、渲染模式。
				*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
				*Laya.loader.load(["resource/ui/input.png"],Handler.create(this,onLoadComplete));//加载资源。
				*}
			*private function onLoadComplete():void
			*{
				*var textInput:TextInput=new TextInput("这是一个TextInput实例。");//创建一个 TextInput 类的实例对象 textInput 。
				*textInput.skin="resource/ui/input.png";//设置 textInput 的皮肤。
				*textInput.sizeGrid="4,4,4,4";//设置 textInput 的网格信息。
				*textInput.color="#008fff";//设置 textInput 的文本颜色。
				*textInput.font="Arial";//设置 textInput 的文本字体。
				*textInput.bold=true;//设置 textInput 的文本显示为粗体。
				*textInput.fontSize=30;//设置 textInput 的字体大小。
				*textInput.wordWrap=true;//设置 textInput 的文本自动换行。
				*textInput.x=100;//设置 textInput 对象的属性 x 的值，用于控制 textInput 对象的显示位置。
				*textInput.y=100;//设置 textInput 对象的属性 y 的值，用于控制 textInput 对象的显示位置。
				*textInput.width=300;//设置 textInput 的宽度。
				*textInput.height=200;//设置 textInput 的高度。
				*Laya.stage.addChild(textInput);//将 textInput 添加到显示列表。
				*}
			*}
		*}
	*@example
	*Laya.init(640,800);//设置游戏画布宽高
	*Laya.stage.bgColor="#efefef";//设置画布的背景颜色
	*Laya.loader.load(["resource/ui/input.png"],laya.utils.Handler.create(this,onLoadComplete));//加载资源。
	*function onLoadComplete(){
		*var textInput=new laya.ui.TextInput("这是一个TextInput实例。");//创建一个 TextInput 类的实例对象 textInput 。
		*textInput.skin="resource/ui/input.png";//设置 textInput 的皮肤。
		*textInput.sizeGrid="4,4,4,4";//设置 textInput 的网格信息。
		*textInput.color="#008fff";//设置 textInput 的文本颜色。
		*textInput.font="Arial";//设置 textInput 的文本字体。
		*textInput.bold=true;//设置 textInput 的文本显示为粗体。
		*textInput.fontSize=30;//设置 textInput 的字体大小。
		*textInput.wordWrap=true;//设置 textInput 的文本自动换行。
		*textInput.x=100;//设置 textInput 对象的属性 x 的值，用于控制 textInput 对象的显示位置。
		*textInput.y=100;//设置 textInput 对象的属性 y 的值，用于控制 textInput 对象的显示位置。
		*textInput.width=300;//设置 textInput 的宽度。
		*textInput.height=200;//设置 textInput 的高度。
		*Laya.stage.addChild(textInput);//将 textInput 添加到显示列表。
		*}
	*@example
	*import Stage=laya.display.Stage;
	*import TextInput=laya.ui.TextInput;
	*import Handler=laya.utils.Handler;
	*class TextInput_Example {
		*constructor(){
			*Laya.init(640,800);//设置游戏画布宽高、渲染模式。
			*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
			*Laya.loader.load(["resource/ui/input.png"],Handler.create(this,this.onLoadComplete));//加载资源。
			*}
		*private onLoadComplete():void {
			*var textInput:TextInput=new TextInput("这是一个TextInput实例。");//创建一个 TextInput 类的实例对象 textInput 。
			*textInput.skin="resource/ui/input.png";//设置 textInput 的皮肤。
			*textInput.sizeGrid="4,4,4,4";//设置 textInput 的网格信息。
			*textInput.color="#008fff";//设置 textInput 的文本颜色。
			*textInput.font="Arial";//设置 textInput 的文本字体。
			*textInput.bold=true;//设置 textInput 的文本显示为粗体。
			*textInput.fontSize=30;//设置 textInput 的字体大小。
			*textInput.wordWrap=true;//设置 textInput 的文本自动换行。
			*textInput.x=100;//设置 textInput 对象的属性 x 的值，用于控制 textInput 对象的显示位置。
			*textInput.y=100;//设置 textInput 对象的属性 y 的值，用于控制 textInput 对象的显示位置。
			*textInput.width=300;//设置 textInput 的宽度。
			*textInput.height=200;//设置 textInput 的高度。
			*Laya.stage.addChild(textInput);//将 textInput 添加到显示列表。
			*}
		*}
	*/
	//class laya.ui.TextInput extends laya.ui.Label
	var TextInput=(function(_super){
		function TextInput(text){
			this._bg=null;
			this._skin=null;
			TextInput.__super.call(this);
			(text===void 0)&& (text="");
			this.text=text;
			this.skin=this.skin;
		}

		__class(TextInput,'laya.ui.TextInput',_super);
		var __proto=TextInput.prototype;
		/**@inheritDoc */
		__proto.preinitialize=function(){
			this.mouseEnabled=true;
		}

		/**@inheritDoc */
		__proto.destroy=function(destroyChild){
			(destroyChild===void 0)&& (destroyChild=true);
			_super.prototype.destroy.call(this,destroyChild);
			this._bg && this._bg.destroy();
			this._bg=null;
		}

		/**@inheritDoc */
		__proto.createChildren=function(){
			this.addChild(this._tf=new Input());
			this._tf.padding=Styles.inputLabelPadding;
			this._tf.on("input",this,this._onInput);
			this._tf.on("enter",this,this._onEnter);
			this._tf.on("blur",this,this._onBlur);
			this._tf.on("focus",this,this._onFocus);
		}

		/**
		*@private
		*/
		__proto._onFocus=function(){
			this.event("focus",this);
		}

		/**
		*@private
		*/
		__proto._onBlur=function(){
			this.event("blur",this);
		}

		/**
		*@private
		*/
		__proto._onInput=function(){
			this.event("input",this);
		}

		/**
		*@private
		*/
		__proto._onEnter=function(){
			this.event("enter",this);
		}

		/**@inheritDoc */
		__proto.initialize=function(){
			this.width=128;
			this.height=22;
		}

		/**选中输入框内的文本。*/
		__proto.select=function(){
			(this._tf).select();
		}

		__proto.setSelection=function(startIndex,endIndex){
			(this._tf).setSelection(startIndex,endIndex);
		}

		/**
		*当前文本内容字符串。
		*@see laya.display.Text.text
		*/
		__getset(0,__proto,'text',_super.prototype._$get_text,function(value){
			if (this._tf.text !=value){
				value=value+"";
				this._tf.text=value;
				this.event("change");
			}
		});

		/**
		*表示此对象包含的文本背景 <code>AutoBitmap</code> 组件实例。
		*/
		__getset(0,__proto,'bg',function(){
			return this._bg;
			},function(value){
			this.graphics=this._bg=value;
		});

		/**
		*设置原生input输入框的y坐标偏移。
		*/
		__getset(0,__proto,'inputElementYAdjuster',function(){
			return (this._tf).inputElementYAdjuster;
			},function(value){
			(this._tf).inputElementYAdjuster=value;
		});

		/**
		*<p>指示当前是否是文本域。</p>
		*值为true表示当前是文本域，否则不是文本域。
		*/
		__getset(0,__proto,'multiline',function(){
			return (this._tf).multiline;
			},function(value){
			(this._tf).multiline=value;
		});

		/**
		*@copy laya.ui.Image#skin
		*/
		__getset(0,__proto,'skin',function(){
			return this._skin;
			},function(value){
			if (this._skin !=value){
				this._skin=value;
				this._bg || (this.graphics=this._bg=new AutoBitmap());
				this._bg.source=Loader.getRes(this._skin);
				this._width && (this._bg.width=this._width);
				this._height && (this._bg.height=this._height);
			}
		});

		/**
		*<p>当前实例的背景图（ <code>AutoBitmap</code> ）实例的有效缩放网格数据。</p>
		*<p>数据格式："上边距,右边距,下边距,左边距,是否重复填充(值为0：不重复填充，1：重复填充)"，以逗号分隔。
		*<ul><li>例如："4,4,4,4,1"</li></ul></p>
		*@see laya.ui.AutoBitmap.sizeGrid
		*/
		__getset(0,__proto,'sizeGrid',function(){
			return this._bg && this._bg.sizeGrid ? this._bg.sizeGrid.join(","):null;
			},function(value){
			this._bg || (this.graphics=this._bg=new AutoBitmap());
			this._bg.sizeGrid=UIUtils.fillArray(Styles.defaultSizeGrid,value,Number);
		});

		/**
		*设置原生input输入框的x坐标偏移。
		*/
		__getset(0,__proto,'inputElementXAdjuster',function(){
			return (this._tf).inputElementXAdjuster;
			},function(value){
			(this._tf).inputElementXAdjuster=value;
		});

		/**@inheritDoc */
		__getset(0,__proto,'width',_super.prototype._$get_width,function(value){
			_super.prototype._$set_width.call(this,value);
			this._bg && (this._bg.width=value);
		});

		/**@inheritDoc */
		__getset(0,__proto,'height',_super.prototype._$get_height,function(value){
			_super.prototype._$set_height.call(this,value);
			this._bg && (this._bg.height=value);
		});

		/**
		*设置可编辑状态。
		*/
		__getset(0,__proto,'editable',function(){
			return (this._tf).editable;
			},function(value){
			(this._tf).editable=value;
		});

		/**限制输入的字符。*/
		__getset(0,__proto,'restrict',function(){
			return (this._tf).restrict;
			},function(pattern){
			(this._tf).restrict=pattern;
		});

		/**
		*@copy laya.display.Input#prompt
		*/
		__getset(0,__proto,'prompt',function(){
			return (this._tf).prompt;
			},function(value){
			(this._tf).prompt=value;
		});

		/**
		*@copy laya.display.Input#promptColor
		*/
		__getset(0,__proto,'promptColor',function(){
			return (this._tf).promptColor;
			},function(value){
			(this._tf).promptColor=value;
		});

		/**
		*@copy laya.display.Input#maxChars
		*/
		__getset(0,__proto,'maxChars',function(){
			return (this._tf).maxChars;
			},function(value){
			(this._tf).maxChars=value;
		});

		/**
		*@copy laya.display.Input#focus
		*/
		__getset(0,__proto,'focus',function(){
			return (this._tf).focus;
			},function(value){
			(this._tf).focus=value;
		});

		/**
		*@copy laya.display.Input#type
		*/
		__getset(0,__proto,'type',function(){
			return (this._tf).type;
			},function(value){
			(this._tf).type=value;
		});

		/**
		*@copy laya.display.Input#asPassword
		*/
		__getset(0,__proto,'asPassword',function(){
			return (this._tf).asPassword;
			},function(value){
			(this._tf).asPassword=value;
		});

		return TextInput;
	})(Label)


	/**
	*使用 <code>VSlider</code> 控件，用户可以通过在滑块轨道的终点之间移动滑块来选择值。
	*<p> <code>VSlider</code> 控件采用垂直方向。滑块轨道从下往上扩展，而标签位于轨道的左右两侧。</p>
	*
	*@example <caption>以下示例代码，创建了一个 <code>VSlider</code> 实例。</caption>
	*package
	*{
		*import laya.ui.HSlider;
		*import laya.ui.VSlider;
		*import laya.utils.Handler;
		*public class VSlider_Example
		*{
			*private var vSlider:VSlider;
			*public function VSlider_Example()
			*{
				*Laya.init(640,800);//设置游戏画布宽高。
				*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
				*Laya.loader.load(["resource/ui/vslider.png","resource/ui/vslider$bar.png"],Handler.create(this,onLoadComplete));//加载资源。
				*}
			*private function onLoadComplete():void
			*{
				*vSlider=new VSlider();//创建一个 VSlider 类的实例对象 vSlider 。
				*vSlider.skin="resource/ui/vslider.png";//设置 vSlider 的皮肤。
				*vSlider.min=0;//设置 vSlider 最低位置值。
				*vSlider.max=10;//设置 vSlider 最高位置值。
				*vSlider.value=2;//设置 vSlider 当前位置值。
				*vSlider.tick=1;//设置 vSlider 刻度值。
				*vSlider.x=100;//设置 vSlider 对象的属性 x 的值，用于控制 vSlider 对象的显示位置。
				*vSlider.y=100;//设置 vSlider 对象的属性 y 的值，用于控制 vSlider 对象的显示位置。
				*vSlider.changeHandler=new Handler(this,onChange);//设置 vSlider 位置变化处理器。
				*Laya.stage.addChild(vSlider);//把 vSlider 添加到显示列表。
				*}
			*private function onChange(value:Number):void
			*{
				*trace("滑块的位置： value="+value);
				*}
			*}
		*}
	*@example
	*Laya.init(640,800);//设置游戏画布宽高
	*Laya.stage.bgColor="#efefef";//设置画布的背景颜色
	*var vSlider;
	*Laya.loader.load(["resource/ui/vslider.png","resource/ui/vslider$bar.png"],laya.utils.Handler.create(this,onLoadComplete));//加载资源。
	*function onLoadComplete(){
		*vSlider=new laya.ui.VSlider();//创建一个 VSlider 类的实例对象 vSlider 。
		*vSlider.skin="resource/ui/vslider.png";//设置 vSlider 的皮肤。
		*vSlider.min=0;//设置 vSlider 最低位置值。
		*vSlider.max=10;//设置 vSlider 最高位置值。
		*vSlider.value=2;//设置 vSlider 当前位置值。
		*vSlider.tick=1;//设置 vSlider 刻度值。
		*vSlider.x=100;//设置 vSlider 对象的属性 x 的值，用于控制 vSlider 对象的显示位置。
		*vSlider.y=100;//设置 vSlider 对象的属性 y 的值，用于控制 vSlider 对象的显示位置。
		*vSlider.changeHandler=new laya.utils.Handler(this,onChange);//设置 vSlider 位置变化处理器。
		*Laya.stage.addChild(vSlider);//把 vSlider 添加到显示列表。
		*}
	*function onChange(value){
		*console.log("滑块的位置： value="+value);
		*}
	*@example
	*import HSlider=laya.ui.HSlider;
	*import VSlider=laya.ui.VSlider;
	*import Handler=laya.utils.Handler;
	*class VSlider_Example {
		*private vSlider:VSlider;
		*constructor(){
			*Laya.init(640,800);//设置游戏画布宽高。
			*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
			*Laya.loader.load(["resource/ui/vslider.png","resource/ui/vslider$bar.png"],Handler.create(this,this.onLoadComplete));//加载资源。
			*}
		*private onLoadComplete():void {
			*this.vSlider=new VSlider();//创建一个 VSlider 类的实例对象 vSlider 。
			*this.vSlider.skin="resource/ui/vslider.png";//设置 vSlider 的皮肤。
			*this.vSlider.min=0;//设置 vSlider 最低位置值。
			*this.vSlider.max=10;//设置 vSlider 最高位置值。
			*this.vSlider.value=2;//设置 vSlider 当前位置值。
			*this.vSlider.tick=1;//设置 vSlider 刻度值。
			*this.vSlider.x=100;//设置 vSlider 对象的属性 x 的值，用于控制 vSlider 对象的显示位置。
			*this.vSlider.y=100;//设置 vSlider 对象的属性 y 的值，用于控制 vSlider 对象的显示位置。
			*this.vSlider.changeHandler=new Handler(this,this.onChange);//设置 vSlider 位置变化处理器。
			*Laya.stage.addChild(this.vSlider);//把 vSlider 添加到显示列表。
			*}
		*private onChange(value:number):void {
			*console.log("滑块的位置： value="+value);
			*}
		*}
	*@see laya.ui.Slider
	*/
	//class laya.ui.VSlider extends laya.ui.Slider
	var VSlider=(function(_super){
		function VSlider(){VSlider.__super.call(this);;
		};

		__class(VSlider,'laya.ui.VSlider',_super);
		return VSlider;
	})(Slider)


	//class laya.webgl.resource.WebGLImage extends laya.resource.HTMLImage
	var WebGLImage=(function(_super){
		function WebGLImage(src,def){
			this._image=null;
			this._allowMerageInAtlas=false;
			this._enableMerageInAtlas=false;
			this.repeat=false;
			this.mipmap=false;
			this.minFifter=0;
			this.magFifter=0;
			WebGLImage.__super.call(this,src,def);
			this.repeat=false;
			this.mipmap=false;
			this.minFifter=-1;
			this.magFifter=-1;
			if ((typeof src=='string')){
				this.url=src;
				this._src=src;
				this._image=new Browser.window.Image();
				if (def){
					def.onload && (this.onload=def.onload);
					def.onerror && (this.onerror=def.onerror);
					def.onCreate && def.onCreate(this);
				}
				this._image.crossOrigin=(src && (src.indexOf("data:")==0))? null :"";
				(src)&& (this._image.src=src);
				}else {
				this._src=def;
				this._image=src["source"]||src;
				this.onresize();
			}
			this._enableMerageInAtlas=true;
		}

		__class(WebGLImage,'laya.webgl.resource.WebGLImage',_super);
		var __proto=WebGLImage.prototype;
		Laya.imps(__proto,{"laya.webgl.resource.IMergeAtlasBitmap":true})
		__proto._init_=function(src,def){}
		__proto._createWebGlTexture=function(){
			if (!this._image){
				throw "create GLTextur err:no data:"+this._image;
			};
			var gl=WebGL.mainContext;
			var glTex=this._source=gl.createTexture();
			var preTarget=WebGLContext.curBindTexTarget;
			var preTexture=WebGLContext.curBindTexValue;
			WebGLContext.bindTexture(gl,0x0DE1,glTex);
			gl.texImage2D(0x0DE1,0,0x1908,0x1908,0x1401,this._image);
			var minFifter=this.minFifter;
			var magFifter=this.magFifter;
			var repeat=this.repeat ? 0x2901 :0x812F;
			var isPot=Arith.isPOT(this._w,this._h);
			if (isPot){
				if (this.mipmap)
					(minFifter!==-1)|| (minFifter=0x2703);
				else
				(minFifter!==-1)|| (minFifter=0x2601);
				(magFifter!==-1)|| (magFifter=0x2601);
				gl.texParameteri(0x0DE1,0x2801,minFifter);
				gl.texParameteri(0x0DE1,0x2800,magFifter);
				gl.texParameteri(0x0DE1,0x2802,repeat);
				gl.texParameteri(0x0DE1,0x2803,repeat);
				this.mipmap && gl.generateMipmap(0x0DE1);
				}else {
				(minFifter!==-1)|| (minFifter=0x2601);
				(magFifter!==-1)|| (magFifter=0x2601);
				gl.texParameteri(0x0DE1,0x2801,minFifter);
				gl.texParameteri(0x0DE1,0x2800,magFifter);
				gl.texParameteri(0x0DE1,0x2802,0x812F);
				gl.texParameteri(0x0DE1,0x2803,0x812F);
			}
			(preTarget && preTexture)&& (WebGLContext.bindTexture(gl,preTarget,preTexture));
			this._image.onload=null;
			this._image=null;
			if (isPot)
				this.memorySize=this._w *this._h *4 *(1+1 / 3);
			else
			this.memorySize=this._w *this._h *4;
			this._recreateLock=false;
		}

		/***重新创建资源，如果异步创建中被强制释放再创建，则需等待释放完成后再重新加载创建。*/
		__proto.recreateResource=function(){
			var _$this=this;
			if (this._src==null || this._src==="")
				return;
			this._needReleaseAgain=false;
			if (!this._image){
				this._recreateLock=true;
				this.startCreate();
				var _this=this;
				this._image=new Browser.window.Image();
				this._image.crossOrigin=this._src.indexOf("data:")==0 ? null :"";
				this._image.onload=function (){
					if (_this._needReleaseAgain){
						_this._needReleaseAgain=false;
						_this._image.onload=null;
						_this._image=null;
						return;
					}
					(!(_this._allowMerageInAtlas && _this._enableMerageInAtlas))? (_this._createWebGlTexture()):(_$this.memorySize=0,_$this._recreateLock=false);
					_this.completeCreate();
				};
				this._image.src=this._src;
				}else {
				if (this._recreateLock){
					return;
				}
				this.startCreate();
				(!(this._allowMerageInAtlas && this._enableMerageInAtlas))? (this._createWebGlTexture()):(this.memorySize=0,this._recreateLock=false);
				this.completeCreate();
			}
		}

		/***销毁资源*/
		__proto.detoryResource=function(){
			if (this._recreateLock){
				this._needReleaseAgain=true;
			}
			if (this._source){
				WebGL.mainContext.deleteTexture(this._source);
				this._source=null;
				this._image=null;
				this.memorySize=0;
			}
		}

		/***调整尺寸*/
		__proto.onresize=function(){
			this._w=this._image.width;
			this._h=this._image.height;
			(AtlasResourceManager.enabled)&& (this._w < AtlasResourceManager.atlasLimitWidth && this._h < AtlasResourceManager.atlasLimitHeight)? this._allowMerageInAtlas=true :this._allowMerageInAtlas=false;
		}

		__proto.clearAtlasSource=function(){
			this._image=null;
		}

		/**
		*返回HTML Image,as3无internal货friend，通常禁止开发者修改image内的任何属性
		*@param HTML Image
		*/
		__getset(0,__proto,'image',function(){
			return this._image;
		});

		/**
		*是否创建私有Source
		*@return 是否创建
		*/
		__getset(0,__proto,'allowMerageInAtlas',function(){
			return this._allowMerageInAtlas;
		});

		__getset(0,__proto,'atlasSource',function(){
			return this._image;
		});

		/**
		*是否创建私有Source,通常禁止修改
		*@param value 是否创建
		*/
		/**
		*是否创建私有Source
		*@return 是否创建
		*/
		__getset(0,__proto,'enableMerageInAtlas',function(){
			return this._enableMerageInAtlas;
			},function(value){
			this._enableMerageInAtlas=value;
		});

		/***
		*设置onload函数
		*@param value onload函数
		*/
		__getset(0,__proto,'onload',null,function(value){
			var _$this=this;
			this._onload=value;
			this._image && (this._image.onload=this._onload !=null ? (function(){
				_$this.onresize();
				_$this._onload();
			}):null);
		});

		/***
		*设置onerror函数
		*@param value onerror函数
		*/
		__getset(0,__proto,'onerror',null,function(value){
			var _$this=this;
			this._onerror=value;
			this._image && (this._image.onerror=this._onerror !=null ? (function(){
				_$this._onerror()
			}):null);
		});

		return WebGLImage;
	})(HTMLImage)


	//class laya8.client.player.view.ViewAni extends engine.SnowAnimation
	var ViewAni=(function(_super){
		function ViewAni(){
			this._url_1=null;
			this._animeRoot=null;
			this._onLoadCompleteCallback=null;
			this.poolID=null;
			ViewAni.__super.call(this);
		}

		__class(ViewAni,'laya8.client.player.view.ViewAni',_super);
		var __proto=ViewAni.prototype;
		__proto.clearCallBack=function(){
			this._onLoadCompleteCallback && this._onLoadCompleteCallback.clear();
			this._onLoadCompleteCallback=null;
		}

		__proto.init=function(url,animeRoot,w,h){
			this._url_1=url;
			this._animeRoot=animeRoot;
			this.size(w,h);
		}

		__proto.loadData=function(callback){
			this._onLoadCompleteCallback=callback;
			SnowLoad.I.load(this._url_1,Handler.create(this,this.onCompleteLoad),null,"atlas");
		}

		__proto.onCompleteLoad=function(){
			if (this.destroyed)return;
			if (!Laya.loader.getRes(this._url_1)){
				SnowLoad.I.load(this._url_1,Handler.create(this,this.onCompleteLoad),null,"atlas");
				return;
			}
			this._onLoadCompleteCallback && this._onLoadCompleteCallback.runWith(this._animeRoot);
		}

		__getset(0,__proto,'url_1',function(){
			return this._url_1;
		});

		__getset(0,__proto,'actionName',function(){
			return this._actionName;
		});

		ViewAni.createAniFromCfg=function(args,aniName){
			(aniName===void 0)&& (aniName="");
			var animArr=[];
			for (var j=args._sFrame;j <=args._eFrame;j++){
				animArr.push(args.effect+j+".png");
			};
			var anim=aniName.length ? Pool.getItemByClass(aniName,RenderAnimation):new RenderAnimation();
			anim.loadImages(animArr,args.name);
			anim.interval=args._interval;
			anim.index=args._index;
			anim.alpha=args._alpha;
			anim.width=args._width;
			anim.height=args._height;
			anim.scale(args._scale,args._scale,true);
			anim.pivot(anim.width / 2,anim.height / 2);
			return anim;
		}

		ViewAni.createAniFromCfgNew=function(args,aniName){
			(aniName===void 0)&& (aniName="");
			var animArr=[];
			for (var j=args._sFrame;j <=args._eFrame;j++){
				animArr.push(args.effect+j+".png");
			};
			var anim=aniName.length ? Pool.getItemByClass(aniName,Animation):new Animation();
			anim.loadImages(animArr,args.name);
			anim.interval=args._interval;
			anim.index=args._index;
			anim.width=args._width;
			anim.height=args._height;
			anim.scale(args._scale,args._scale,true);
			anim.pivot(anim.width / 2,anim.height / 2);
			return anim;
		}

		ViewAni.crtAniByIDE=function(vo,aniName,loaded,atlas){
			(aniName===void 0)&& (aniName="");
			var anim=aniName.length ? Pool.getItemByClass(aniName,Animation):new Animation();
			anim.alpha=vo._alpha;
			anim.scale(vo._scale,vo._scale,true);
			anim.size(vo._width,vo._height);
			anim.alpha=vo._alpha;
			if(vo._interval)anim.interval=vo._interval;
			anim.loadAnimation(vo.url,loaded,atlas);
			return anim;
		}

		return ViewAni;
	})(SnowAnimation)


	/**
	*...
	*@author 贾艳昭
	*/
	//class view.UIBase0 extends laya.ui.View
	var UIBase0=(function(_super){
		function UIBase0(){
			this.uiView=null;
			this.resList=[];
			this.isCrOpen=true;
			this.isOpen=true;
			this.isloaded=false;
			this.uiNum=0;
			this.uiName=null;
			this.isShowBg=false;
			this.netWorkControl=null;
			this.layerName=null;
			this.layerParent=null;
			UIBase0.__super.call(this);
		}

		__class(UIBase0,'view.UIBase0',_super);
		var __proto=UIBase0.prototype;
		__proto.createView=function(uiView){
			this.uiView=uiView;
			this.createBj();
		}

		/**
		*注意： 调用onOpen方法添加页面时，如果在onOpen方法里有发送信息跟服务端获取数据的需求，你需要在数据
		*请求返回后执行 addToParent(this);
		*/
		__proto.onOpen=function(){
			this.onCompResize();
			if (this.isShowBg){
				UIMgr.openUI(BjView,"layer_bg");
			}
			Log_Test.debug(1,"onOpen    uiNum:"+this.uiNum);
			if (this.uiName !="BjView"){this.netWorkControl=this.netWorkControl|| new NetWorkControl(this.uiName);
				this.netWorkControl._reSet(2000);
			}
		}

		/**
		*添加子容器到父容器
		*@param uibase
		*/
		__proto.addToParent=function(uibase){
			MouseManager.enabled=true;
			LoadingPage.getInstance().hide();
			this.netWorkControl._detroy();
			if (uibase && uibase.parent==null){
				UIMgr.autoCloseUI(this.layerName,true);
				this.layerParent.addChild(uibase);
				Log_Test.debug(1,"addToParent    uiNum:"+this.uiNum);
			}
		}

		__proto.onClose=function(){
			Log_Test.debug(1,"onClose    uiNum:"+this.uiNum);
			this.netWorkControl && this.netWorkControl._detroy();
			this.removeSelf();
		}

		/**
		*是否关闭底层背景
		*@param type 默认 true 显示背景
		*/
		__proto.onCloseBg=function(type){
			(type===void 0)&& (type=true);
		}

		// bjView.visible=type;
		__proto.onCreated=function(){
			Log_Test.debug(1,"onCreated    uiNum:"+this.uiNum);
			_super.prototype.createView.call(this,this.uiView);
			this.isOpen=false;
			if (this.isCrOpen){
				this.isShowBg? Laya.timer.frameOnce(1,this,this.onOpen):this.onOpen();
			}
		}

		__proto.createBj=function(){
			this.isShowBg=true;
		}

		__proto.loadRes=function(isOpen){
			(isOpen===void 0)&& (isOpen=false);
			Log_Test.debug(1,"loadRes    uiNum:"+this.uiNum);
			var arr=(this).__className.split('.');
			this.uiName=arr[arr.length-1];
			if (this.resList.length > 0){
				if(!isOpen)LoadingPage.getInstance().show(this.uiName);
				Laya.loader.retryDelay=1000;
				Laya.loader.retryNum=3;
				Laya.loader.load(this.resList,Handler.create(this,this.onLoadResComplete),null,null,0);
				return true;
				}else{
				this.onCreated();
				return true;
			}
			return false;
		}

		/**
		*资源加载完毕
		*@param type false 加载路径中有资源没有加载成功
		*/
		__proto.onLoadResComplete=function(type){
			(type===void 0)&& (type=true);
			if(!type){
				var array=UIMgr.openingUIArray[this.layerName];
				if (array){
					var uiIndex=array.indexOf(this);
					if (uiIndex >-1){
						array.splice(uiIndex,1);
					}
				}
				this.netWorkControl && this.netWorkControl._detroy();
				TipsView.showMe("","加载配置文件失败,换个网络重试下吧",1,false);
				LoadUI.instance.onShow();
				LoadingPage.getInstance().hide();
				return;
			}
			this.onCreated();
		}

		return UIBase0;
	})(View)


	//class ui.gaming.centerTips.gam1UI extends laya.ui.View
	var gam1UI=(function(_super){
		function gam1UI(){gam1UI.__super.call(this);;
		};

		__class(gam1UI,'ui.gaming.centerTips.gam1UI',_super);
		var __proto=gam1UI.prototype;
		__proto.createChildren=function(){
			View.regComponent("Text",Text);
			laya.ui.Component.prototype.createChildren.call(this);
			this.loadUI("gaming/centerTips/gam1");
		}

		return gam1UI;
	})(View)


	//class ui.gaming.centerTips.gam2UI extends laya.ui.View
	var gam2UI=(function(_super){
		function gam2UI(){gam2UI.__super.call(this);;
		};

		__class(gam2UI,'ui.gaming.centerTips.gam2UI',_super);
		var __proto=gam2UI.prototype;
		__proto.createChildren=function(){
			View.regComponent("Text",Text);
			laya.ui.Component.prototype.createChildren.call(this);
			this.loadUI("gaming/centerTips/gam2");
		}

		return gam2UI;
	})(View)


	//class ui.gaming.GameInfoUI extends laya.ui.View
	var GameInfoUI=(function(_super){
		function GameInfoUI(){
			this.miniMap=null;
			this.img_shuijiT=null;
			this.backHomeBtn=null;
			this.textScore=null;
			this.lab_shuijingT=null;
			GameInfoUI.__super.call(this);
		}

		__class(GameInfoUI,'ui.gaming.GameInfoUI',_super);
		var __proto=GameInfoUI.prototype;
		__proto.createChildren=function(){
			View.regComponent("view.gaming.MiniMapView",MiniMapView);
			View.regComponent("Text",Text);
			laya.ui.Component.prototype.createChildren.call(this);
			this.loadUI("gaming/GameInfo");
		}

		return GameInfoUI;
	})(View)


	//class ui.gaming.GameRankUI extends laya.ui.View
	var GameRankUI=(function(_super){
		function GameRankUI(){
			this.title=null;
			this.lab_title=null;
			this.img_bj=null;
			this.normalRank=null;
			this.box_aalsdaa=null;
			this.btnSwitch=null;
			this.jf=null;
			this.js=null;
			this.ownItem=null;
			this.ownIcon=null;
			this.ownNum=null;
			this.listTopTen=null;
			this.firstTag=null;
			this.secondTag=null;
			this.thirdTag=null;
			this.listRank=null;
			GameRankUI.__super.call(this);
		}

		__class(GameRankUI,'ui.gaming.GameRankUI',_super);
		var __proto=GameRankUI.prototype;
		__proto.createChildren=function(){
			View.regComponent("Text",Text);
			laya.ui.Component.prototype.createChildren.call(this);
			this.loadUI("gaming/GameRank");
		}

		return GameRankUI;
	})(View)


	//class ui.gaming.mainAttackUI extends laya.ui.View
	var mainAttackUI=(function(_super){
		function mainAttackUI(){
			this.skillXl=null;
			this.clipAttack=null;
			this.maskSkill0=null;
			this.tishiSprite=null;
			this.skillButt=null;
			mainAttackUI.__super.call(this);
		}

		__class(mainAttackUI,'ui.gaming.mainAttackUI',_super);
		var __proto=mainAttackUI.prototype;
		__proto.createChildren=function(){
			View.regComponent("Text",Text);
			laya.ui.Component.prototype.createChildren.call(this);
			this.loadUI("gaming/mainAttack");
		}

		return mainAttackUI;
	})(View)


	//class ui.gaming.MiniMapUI extends laya.ui.View
	var MiniMapUI=(function(_super){
		function MiniMapUI(){
			this.miniImage=null;
			this.box_=null;
			MiniMapUI.__super.call(this);
		}

		__class(MiniMapUI,'ui.gaming.MiniMapUI',_super);
		var __proto=MiniMapUI.prototype;
		__proto.createChildren=function(){
			laya.ui.Component.prototype.createChildren.call(this);
			this.loadUI("gaming/MiniMap");
		}

		return MiniMapUI;
	})(View)


	//class ui.gaming.NewPaopaoUI extends laya.ui.View
	var NewPaopaoUI=(function(_super){
		function NewPaopaoUI(){
			this.box1=null;
			this.bg=null;
			this.paotouImg=null;
			this.content=null;
			NewPaopaoUI.__super.call(this);
		}

		__class(NewPaopaoUI,'ui.gaming.NewPaopaoUI',_super);
		var __proto=NewPaopaoUI.prototype;
		__proto.createChildren=function(){
			View.regComponent("Text",Text);
			laya.ui.Component.prototype.createChildren.call(this);
			this.loadUI("gaming/NewPaopao");
		}

		return NewPaopaoUI;
	})(View)


	//class ui.gaming.PlayFontClipViewUI extends laya.ui.View
	var PlayFontClipViewUI=(function(_super){
		function PlayFontClipViewUI(){
			this.fontClipTxt=null;
			this.img1=null;
			this.img2=null;
			PlayFontClipViewUI.__super.call(this);
		}

		__class(PlayFontClipViewUI,'ui.gaming.PlayFontClipViewUI',_super);
		var __proto=PlayFontClipViewUI.prototype;
		__proto.createChildren=function(){
			laya.ui.Component.prototype.createChildren.call(this);
			this.loadUI("gaming/PlayFontClipView");
		}

		return PlayFontClipViewUI;
	})(View)


	//class ui.gaming.skillboxUI extends laya.ui.View
	var skillboxUI=(function(_super){
		function skillboxUI(){
			this.skillXl=null;
			this.btnskill=null;
			this.maskSkill=null;
			this.topmaskSkill=null;
			this.skillNum=null;
			this.box_skillTip=null;
			this.skillButt=null;
			this.skillcf=null;
			this.jt=null;
			skillboxUI.__super.call(this);
		}

		__class(skillboxUI,'ui.gaming.skillboxUI',_super);
		var __proto=skillboxUI.prototype;
		__proto.createChildren=function(){
			View.regComponent("Text",Text);
			laya.ui.Component.prototype.createChildren.call(this);
			this.loadUI("gaming/skillbox");
		}

		return skillboxUI;
	})(View)


	//class ui.guide.GuideAttackViewUI extends laya.ui.View
	var GuideAttackViewUI=(function(_super){
		function GuideAttackViewUI(){
			this.jiantou=null;
			GuideAttackViewUI.__super.call(this);
		}

		__class(GuideAttackViewUI,'ui.guide.GuideAttackViewUI',_super);
		var __proto=GuideAttackViewUI.prototype;
		__proto.createChildren=function(){
			laya.ui.Component.prototype.createChildren.call(this);
			this.loadUI("guide/GuideAttackView");
		}

		return GuideAttackViewUI;
	})(View)


	//class ui.guide.GuideHeadTipsUI extends laya.ui.View
	var GuideHeadTipsUI=(function(_super){
		function GuideHeadTipsUI(){
			this.box1=null;
			this.bg=null;
			this.paotouImg=null;
			this.content=null;
			GuideHeadTipsUI.__super.call(this);
		}

		__class(GuideHeadTipsUI,'ui.guide.GuideHeadTipsUI',_super);
		var __proto=GuideHeadTipsUI.prototype;
		__proto.createChildren=function(){
			laya.ui.Component.prototype.createChildren.call(this);
			this.loadUI("guide/GuideHeadTips");
		}

		return GuideHeadTipsUI;
	})(View)


	//class ui.guide.GuideJTUI extends laya.ui.View
	var GuideJTUI=(function(_super){
		function GuideJTUI(){
			this.jt=null;
			GuideJTUI.__super.call(this);
		}

		__class(GuideJTUI,'ui.guide.GuideJTUI',_super);
		var __proto=GuideJTUI.prototype;
		__proto.createChildren=function(){
			laya.ui.Component.prototype.createChildren.call(this);
			this.loadUI("guide/GuideJT");
		}

		return GuideJTUI;
	})(View)


	//class ui.guide.GuideMoveUI extends laya.ui.View
	var GuideMoveUI=(function(_super){
		function GuideMoveUI(){
			this.moveAni=null;
			GuideMoveUI.__super.call(this);
		}

		__class(GuideMoveUI,'ui.guide.GuideMoveUI',_super);
		var __proto=GuideMoveUI.prototype;
		__proto.createChildren=function(){
			laya.ui.Component.prototype.createChildren.call(this);
			this.loadUI("guide/GuideMove");
		}

		return GuideMoveUI;
	})(View)


	//class ui.guide.GuideTipsUI extends laya.ui.View
	var GuideTipsUI=(function(_super){
		function GuideTipsUI(){
			this.tipText=null;
			GuideTipsUI.__super.call(this);
		}

		__class(GuideTipsUI,'ui.guide.GuideTipsUI',_super);
		var __proto=GuideTipsUI.prototype;
		__proto.createChildren=function(){
			laya.ui.Component.prototype.createChildren.call(this);
			this.loadUI("guide/GuideTips");
		}

		return GuideTipsUI;
	})(View)


	//class ui.guide.GuideXuliUI extends laya.ui.View
	var GuideXuliUI=(function(_super){
		function GuideXuliUI(){
			this.xuli=null;
			GuideXuliUI.__super.call(this);
		}

		__class(GuideXuliUI,'ui.guide.GuideXuliUI',_super);
		var __proto=GuideXuliUI.prototype;
		__proto.createChildren=function(){
			laya.ui.Component.prototype.createChildren.call(this);
			this.loadUI("guide/GuideXuli");
		}

		return GuideXuliUI;
	})(View)


	//class ui.hall.items.Item2UI extends laya.ui.View
	var Item2UI=(function(_super){
		function Item2UI(){
			this.iBg=null;
			this.img_icon=null;
			this.lab_name=null;
			this.lab_num=null;
			this.ts=null;
			Item2UI.__super.call(this);
		}

		__class(Item2UI,'ui.hall.items.Item2UI',_super);
		var __proto=Item2UI.prototype;
		__proto.createChildren=function(){
			laya.ui.Component.prototype.createChildren.call(this);
			this.loadUI("hall/items/Item2");
		}

		return Item2UI;
	})(View)


	//class ui.hall.page.activity.JitemUI extends laya.ui.View
	var JitemUI=(function(_super){
		function JitemUI(){
			this.ani1=null;
			this.kuang=null;
			this.myIcon=null;
			this.myLabel=null;
			JitemUI.__super.call(this);
		}

		__class(JitemUI,'ui.hall.page.activity.JitemUI',_super);
		var __proto=JitemUI.prototype;
		__proto.createChildren=function(){
			laya.ui.Component.prototype.createChildren.call(this);
			this.loadUI("hall/page/activity/Jitem");
		}

		return JitemUI;
	})(View)


	//class ui.hall.page.gameBalance.Team3V3ItemUI extends laya.ui.View
	var Team3V3ItemUI=(function(_super){
		function Team3V3ItemUI(){
			this.itemBg=null;
			this.zanBtn=null;
			this.uHead=null;
			this.uName=null;
			this.skillList=null;
			this.kNum=null;
			this.dNum=null;
			this.sNum=null;
			this.mvp=null;
			Team3V3ItemUI.__super.call(this);
		}

		__class(Team3V3ItemUI,'ui.hall.page.gameBalance.Team3V3ItemUI',_super);
		var __proto=Team3V3ItemUI.prototype;
		__proto.createChildren=function(){
			laya.ui.Component.prototype.createChildren.call(this);
			this.loadUI("hall/page/gameBalance/Team3V3Item");
		}

		return Team3V3ItemUI;
	})(View)


	//class ui.hall.page.loadingUI extends laya.ui.View
	var loadingUI=(function(_super){
		function loadingUI(){
			this.snow=null;
			this.msg=null;
			loadingUI.__super.call(this);
		}

		__class(loadingUI,'ui.hall.page.loadingUI',_super);
		var __proto=loadingUI.prototype;
		__proto.createChildren=function(){
			laya.ui.Component.prototype.createChildren.call(this);
			this.loadUI("hall/page/loading");
		}

		return loadingUI;
	})(View)


	//class ui.hall.page.roomList.dwIconUI extends laya.ui.View
	var dwIconUI=(function(_super){
		function dwIconUI(){
			this.dwBg=null;
			this.dwNum=null;
			dwIconUI.__super.call(this);
		}

		__class(dwIconUI,'ui.hall.page.roomList.dwIconUI',_super);
		var __proto=dwIconUI.prototype;
		__proto.createChildren=function(){
			laya.ui.Component.prototype.createChildren.call(this);
			this.loadUI("hall/page/roomList/dwIcon");
		}

		return dwIconUI;
	})(View)


	//class ui.hall.page.roomList.HandViewUI extends laya.ui.View
	var HandViewUI=(function(_super){
		function HandViewUI(){
			this.handAni=null;
			HandViewUI.__super.call(this);
		}

		__class(HandViewUI,'ui.hall.page.roomList.HandViewUI',_super);
		var __proto=HandViewUI.prototype;
		__proto.createChildren=function(){
			laya.ui.Component.prototype.createChildren.call(this);
			this.loadUI("hall/page/roomList/HandView");
		}

		return HandViewUI;
	})(View)


	//class ui.hall.page.roomList.HeadImgUI extends laya.ui.View
	var HeadImgUI=(function(_super){
		function HeadImgUI(){
			this.imgBg=null;
			this.imgAvtor=null;
			this.img_QQ=null;
			HeadImgUI.__super.call(this);
		}

		__class(HeadImgUI,'ui.hall.page.roomList.HeadImgUI',_super);
		var __proto=HeadImgUI.prototype;
		__proto.createChildren=function(){
			laya.ui.Component.prototype.createChildren.call(this);
			this.loadUI("hall/page/roomList/HeadImg");
		}

		return HeadImgUI;
	})(View)


	//class ui.hall.page.roomList.StarViewUI extends laya.ui.View
	var StarViewUI=(function(_super){
		function StarViewUI(){
			this.ani1=null;
			StarViewUI.__super.call(this);
		}

		__class(StarViewUI,'ui.hall.page.roomList.StarViewUI',_super);
		var __proto=StarViewUI.prototype;
		__proto.createChildren=function(){
			laya.ui.Component.prototype.createChildren.call(this);
			this.loadUI("hall/page/roomList/StarView");
		}

		return StarViewUI;
	})(View)


	//class ui.hall.page.roomList.TitleBarUI extends laya.ui.View
	var TitleBarUI=(function(_super){
		function TitleBarUI(){
			this.bg=null;
			this.boxMoney=null;
			this.sjBox=null;
			this.DfuW=null;
			this.ICrystal=null;
			this.spIcon=null;
			this.boxDimad=null;
			this.lDiamond=null;
			this.backBtn=null;
			this.titleBg=null;
			this.imgtitle=null;
			TitleBarUI.__super.call(this);
		}

		__class(TitleBarUI,'ui.hall.page.roomList.TitleBarUI',_super);
		var __proto=TitleBarUI.prototype;
		__proto.createChildren=function(){
			View.regComponent("laya.customUI.ButtonScaleI",ButtonScaleI);
			laya.ui.Component.prototype.createChildren.call(this);
			this.loadUI("hall/page/roomList/TitleBar");
		}

		return TitleBarUI;
	})(View)


	//class ui.hall.page.shareShots.ShareAchieveUI extends laya.ui.View
	var ShareAchieveUI=(function(_super){
		function ShareAchieveUI(){
			this.bg=null;
			this.acIcon=null;
			this.caption=null;
			this.date=null;
			this.btnG=null;
			this.back=null;
			this.share=null;
			this.xy=null;
			ShareAchieveUI.__super.call(this);
		}

		__class(ShareAchieveUI,'ui.hall.page.shareShots.ShareAchieveUI',_super);
		var __proto=ShareAchieveUI.prototype;
		__proto.createChildren=function(){
			View.regComponent("Text",Text);
			laya.ui.Component.prototype.createChildren.call(this);
			this.loadUI("hall/page/shareShots/ShareAchieve");
		}

		return ShareAchieveUI;
	})(View)


	//class ui.hall.page.shareShots.ShareDuanweiUI extends laya.ui.View
	var ShareDuanweiUI=(function(_super){
		function ShareDuanweiUI(){
			this.bg=null;
			this.nkName=null;
			this.headImg=null;
			this.duanwei=null;
			this.typeName=null;
			this.paiLevelClip1=null;
			this.levelClip1=null;
			this.btnG=null;
			this.back=null;
			this.share=null;
			this.xy=null;
			ShareDuanweiUI.__super.call(this);
		}

		__class(ShareDuanweiUI,'ui.hall.page.shareShots.ShareDuanweiUI',_super);
		var __proto=ShareDuanweiUI.prototype;
		__proto.createChildren=function(){
			View.regComponent("Text",Text);
			View.regComponent("view.page.HeadImg",HeadImg);
			laya.ui.Component.prototype.createChildren.call(this);
			this.loadUI("hall/page/shareShots/ShareDuanwei");
		}

		return ShareDuanweiUI;
	})(View)


	//class ui.hall.page.shareShots.ShareTitleUI extends laya.ui.View
	var ShareTitleUI=(function(_super){
		function ShareTitleUI(){
			this.bg=null;
			this.heroH=null;
			this.myTitle=null;
			this.kill=null;
			this.death=null;
			this.jifen=null;
			this.heroIcon=null;
			this.headImg=null;
			this.nkName=null;
			this.btnG=null;
			this.back=null;
			this.share=null;
			this.xy=null;
			ShareTitleUI.__super.call(this);
		}

		__class(ShareTitleUI,'ui.hall.page.shareShots.ShareTitleUI',_super);
		var __proto=ShareTitleUI.prototype;
		__proto.createChildren=function(){
			View.regComponent("Text",Text);
			View.regComponent("view.page.HeadImg",HeadImg);
			laya.ui.Component.prototype.createChildren.call(this);
			this.loadUI("hall/page/shareShots/ShareTitle");
		}

		return ShareTitleUI;
	})(View)


	//class ui.hall.page.shop.DbItemUI extends laya.ui.View
	var DbItemUI=(function(_super){
		function DbItemUI(){
			this.ani1=null;
			this.dbBg=null;
			this.itemIcon=null;
			this.numVal=null;
			this.guang=null;
			this.xyt=null;
			this.ts=null;
			this.heroName=null;
			DbItemUI.__super.call(this);
		}

		__class(DbItemUI,'ui.hall.page.shop.DbItemUI',_super);
		var __proto=DbItemUI.prototype;
		__proto.createChildren=function(){
			laya.ui.Component.prototype.createChildren.call(this);
			this.loadUI("hall/page/shop/DbItem");
		}

		return DbItemUI;
	})(View)


	//class ui.hall.page.shop.HeroCardItemUI extends laya.ui.View
	var HeroCardItemUI=(function(_super){
		function HeroCardItemUI(){
			this.ani1=null;
			this.fitem=null;
			this.itemH=null;
			this.hs=null;
			this.hd=null;
			HeroCardItemUI.__super.call(this);
		}

		__class(HeroCardItemUI,'ui.hall.page.shop.HeroCardItemUI',_super);
		var __proto=HeroCardItemUI.prototype;
		__proto.createChildren=function(){
			laya.ui.Component.prototype.createChildren.call(this);
			this.loadUI("hall/page/shop/HeroCardItem");
		}

		return HeroCardItemUI;
	})(View)


	//class ui.hall.page.shop.ShopDiamondUI extends laya.ui.View
	var ShopDiamondUI=(function(_super){
		function ShopDiamondUI(){
			this.amoutIco=null;
			this.icon=null;
			this.buyBtn=null;
			this.payVal=null;
			this.giftTxt=null;
			this.zs=null;
			ShopDiamondUI.__super.call(this);
		}

		__class(ShopDiamondUI,'ui.hall.page.shop.ShopDiamondUI',_super);
		var __proto=ShopDiamondUI.prototype;
		__proto.createChildren=function(){
			View.regComponent("laya.customUI.ButtonScaleI",ButtonScaleI);
			laya.ui.Component.prototype.createChildren.call(this);
			this.loadUI("hall/page/shop/ShopDiamond");
		}

		return ShopDiamondUI;
	})(View)


	//class ui.hall.page.team.LoadingItemUI extends laya.ui.View
	var LoadingItemUI=(function(_super){
		function LoadingItemUI(){
			this.teamBg=null;
			this.Avtor=null;
			this.uName=null;
			LoadingItemUI.__super.call(this);
		}

		__class(LoadingItemUI,'ui.hall.page.team.LoadingItemUI',_super);
		var __proto=LoadingItemUI.prototype;
		__proto.createChildren=function(){
			laya.ui.Component.prototype.createChildren.call(this);
			this.loadUI("hall/page/team/LoadingItem");
		}

		return LoadingItemUI;
	})(View)


	//class ui.hall.page.team.MatchTeamItem3UI extends laya.ui.View
	var MatchTeamItem3UI=(function(_super){
		function MatchTeamItem3UI(){
			this.imgHeadBg=null;
			this.teamBg=null;
			this.imgHead=null;
			this.btnChangeOther=null;
			this.chgHero=null;
			this.Avtor1=null;
			this.roomMaker=null;
			this.uName=null;
			this.txtReady=null;
			this.btnDelete=null;
			MatchTeamItem3UI.__super.call(this);
		}

		__class(MatchTeamItem3UI,'ui.hall.page.team.MatchTeamItem3UI',_super);
		var __proto=MatchTeamItem3UI.prototype;
		__proto.createChildren=function(){
			View.regComponent("laya.customUI.ButtonScaleI",ButtonScaleI);
			laya.ui.Component.prototype.createChildren.call(this);
			this.loadUI("hall/page/team/MatchTeamItem3");
		}

		return MatchTeamItem3UI;
	})(View)


	//class ui.hall.page.wheel.DianZanUI extends laya.ui.View
	var DianZanUI=(function(_super){
		function DianZanUI(){
			this.msgBg=null;
			this.sb=null;
			DianZanUI.__super.call(this);
		}

		__class(DianZanUI,'ui.hall.page.wheel.DianZanUI',_super);
		var __proto=DianZanUI.prototype;
		__proto.createChildren=function(){
			View.regComponent("HTMLDivElement",HTMLDivElement);
			laya.ui.Component.prototype.createChildren.call(this);
			this.loadUI("hall/page/wheel/DianZan");
		}

		return DianZanUI;
	})(View)


	//class ui.hall.page.wheel.WheelFontClipViewUI extends laya.ui.View
	var WheelFontClipViewUI=(function(_super){
		function WheelFontClipViewUI(){
			this.fontClipTxt=null;
			WheelFontClipViewUI.__super.call(this);
		}

		__class(WheelFontClipViewUI,'ui.hall.page.wheel.WheelFontClipViewUI',_super);
		var __proto=WheelFontClipViewUI.prototype;
		__proto.createChildren=function(){
			laya.ui.Component.prototype.createChildren.call(this);
			this.loadUI("hall/page/wheel/WheelFontClipView");
		}

		return WheelFontClipViewUI;
	})(View)


	//class ui.hall.page.wheel.WheelTipsViewUI extends laya.ui.View
	var WheelTipsViewUI=(function(_super){
		function WheelTipsViewUI(){
			this.msgBg=null;
			this.tipsTxt=null;
			WheelTipsViewUI.__super.call(this);
		}

		__class(WheelTipsViewUI,'ui.hall.page.wheel.WheelTipsViewUI',_super);
		var __proto=WheelTipsViewUI.prototype;
		__proto.createChildren=function(){
			laya.ui.Component.prototype.createChildren.call(this);
			this.loadUI("hall/page/wheel/WheelTipsView");
		}

		return WheelTipsViewUI;
	})(View)


	//class ui.load.LoadIngViewUI extends laya.ui.View
	var LoadIngViewUI=(function(_super){
		function LoadIngViewUI(){
			this.boxcen=null;
			this.box1=null;
			this.label_msg=null;
			this.loadingAni=null;
			this.box2=null;
			this.msg2=null;
			LoadIngViewUI.__super.call(this);
		}

		__class(LoadIngViewUI,'ui.load.LoadIngViewUI',_super);
		var __proto=LoadIngViewUI.prototype;
		__proto.createChildren=function(){
			View.regComponent("Text",Text);
			laya.ui.Component.prototype.createChildren.call(this);
			this.loadUI("load/LoadIngView");
		}

		return LoadIngViewUI;
	})(View)


	//class ui.SkillinfoTipsUI extends laya.ui.View
	var SkillinfoTipsUI=(function(_super){
		function SkillinfoTipsUI(){
			this.iBg=null;
			this.iName=null;
			this.iContent=null;
			SkillinfoTipsUI.__super.call(this);
		}

		__class(SkillinfoTipsUI,'ui.SkillinfoTipsUI',_super);
		var __proto=SkillinfoTipsUI.prototype;
		__proto.createChildren=function(){
			View.regComponent("Text",Text);
			laya.ui.Component.prototype.createChildren.call(this);
			this.loadUI("SkillinfoTips");
		}

		return SkillinfoTipsUI;
	})(View)


	//class ui.WpTipsUI extends laya.ui.View
	var WpTipsUI=(function(_super){
		function WpTipsUI(){
			this.iBg=null;
			this.iImage=null;
			this.iName=null;
			this.iCount=null;
			this.iContent=null;
			WpTipsUI.__super.call(this);
		}

		__class(WpTipsUI,'ui.WpTipsUI',_super);
		var __proto=WpTipsUI.prototype;
		__proto.createChildren=function(){
			View.regComponent("Text",Text);
			View.regComponent("HTMLDivElement",HTMLDivElement);
			laya.ui.Component.prototype.createChildren.call(this);
			this.loadUI("WpTips");
		}

		return WpTipsUI;
	})(View)


	/**
	*...
	*@author 贾艳昭
	*/
	//class ui.UIBase extends laya.ui.View
	var UIBase=(function(_super){
		function UIBase(){
			this.CustomizeFieldName=null;
			this.originUIView=null;
			this.isCreated=false;
			UIBase.__super.call(this);
			UIBase._game=GameManager.GetCurrentGame();
		}

		__class(UIBase,'ui.UIBase',_super);
		var __proto=UIBase.prototype;
		/**
		*将默认的CreateView函数替空
		*@param uiView
		*/
		__proto.createView=function(uiView){
			this.originUIView=uiView;
		}

		//super.createView(uiView);
		__proto.laya8CreateView=function(uiView){
			_super.prototype.createView.call(this,uiView);
			Method.log('createview:'+this.name);
			this.onCreated();
		}

		__proto.onCreated=function(){
			this.isCreated=true;
			this.event('created');
		}

		__proto.createCustomView=function(removeStart,basePath,uiViewString){
			if (basePath !=null){}
				if(Browser.onMiniGame){
				this.laya8CreateView(Laya.loader.getRes(basePath));
				}else{
				this.laya8CreateView(JSON.parse(uiViewString));
			}
			if (basePath!=null){}
				if (removeStart){
				this.onOpen();
				UIBase._game.showStartScreen(false);
			}
		}

		__proto.loadCustomView=function(removeStart){
			(removeStart===void 0)&& (removeStart=true);
			if (this.CustomizeFieldName && UIBase._game.config.customUI && UIBase._game.config.customUI[this.CustomizeFieldName]){
				Method.log('有自定义界面',this);
				if(Browser.onMiniGame){
					var url="laya8/MessageBox.json";
					Laya.loader.load(url,Handler.create(this,this.createCustomView,[removeStart,url]),null,"json");
				}else
				UITools.loadRemoteUI(Conf.CUSTOMUI_BASE_URL+this.game.getCustomUIPath(),UIBase._game.config.customUI[this.CustomizeFieldName],Handler.create(this,this.createCustomView,[removeStart,Conf.CUSTOMUI_BASE_URL+this.game.getCustomUIPath()]));
				return true;
				}else{
				Method.log('无自定义界面',this);
				this.laya8CreateView(this.originUIView);
				UIBase._game.showStartScreen(false);
				return false;
			}
		}

		__proto.onOpen=function(){
			MouseManager.enabled=true;
		}

		//_game.removeStartScreen();
		__proto.onClose=function(){}
		__getset(0,__proto,'game',function(){
			return UIBase._game;
		});

		UIBase._game=null
		return UIBase;
	})(View)


	//class ui.hall.page.newRank.RankItemUI extends laya.ui.View
	var RankItemUI=(function(_super){
		function RankItemUI(){
			this.rank_mark=null;
			this.img_head=null;
			this.headImg=null;
			this.nameTxt=null;
			this.countTxt=null;
			this.rankTxt=null;
			RankItemUI.__super.call(this);
		}

		__class(RankItemUI,'ui.hall.page.newRank.RankItemUI',_super);
		var __proto=RankItemUI.prototype;
		__proto.createChildren=function(){
			laya.ui.Component.prototype.createChildren.call(this);
			this.createView(RankItemUI.uiView);
		}

		RankItemUI.uiView={"type":"View","props":{"width":737,"visible":false,"height":136},"child":[{"type":"Image","props":{"y":0,"x":0,"width":737,"skin":"layacommon/img_item.png","sizeGrid":"0,54,0,140","height":136}},{"type":"Image","props":{"y":61,"x":63,"var":"rank_mark","skin":"layacommon/img_1.png","anchorY":0.5,"anchorX":0.5}},{"type":"Image","props":{"y":10,"x":124,"width":112,"var":"img_head","skin":"layacommon/img_cir.png","height":112}},{"type":"Image","props":{"y":66,"x":180,"width":105,"var":"headImg","skin":"layacommon/img_cir.png","height":105,"anchorY":0.5,"anchorX":0.5}},{"type":"Label","props":{"y":62,"x":355,"width":216,"var":"nameTxt","valign":"middle","overflow":"hidden","height":47,"fontSize":32,"color":"#ffffff","bold":true,"anchorY":0.5,"anchorX":0.5,"align":"center"}},{"type":"Label","props":{"y":60,"x":610,"width":211,"var":"countTxt","valign":"middle","height":47,"fontSize":32,"color":"#fffe8d","bold":true,"anchorY":0.5,"anchorX":0.5,"align":"center"}},{"type":"Label","props":{"y":62,"x":62,"width":113,"visible":false,"var":"rankTxt","valign":"middle","height":48,"fontSize":50,"color":"#a1e8fc","bold":true,"anchorY":0.5,"anchorX":0.5,"align":"center"}}]};
		return RankItemUI;
	})(View)


	//class ui.hall.page.newRank.RankListUI extends laya.ui.View
	var RankListUI=(function(_super){
		function RankListUI(){
			this.list_rank=null;
			this.loadTxt=null;
			RankListUI.__super.call(this);
		}

		__class(RankListUI,'ui.hall.page.newRank.RankListUI',_super);
		var __proto=RankListUI.prototype;
		__proto.createChildren=function(){
			View.regComponent("view.page.newRank.RankItem",RankItem);
			laya.ui.Component.prototype.createChildren.call(this);
			this.createView(RankListUI.uiView);
		}

		RankListUI.uiView={"type":"View","props":{"y":0,"x":0,"width":737,"top":0,"right":0,"left":0,"height":435,"bottom":0},"child":[{"type":"List","props":{"var":"list_rank","spaceY":12,"repeatY":3,"repeatX":1},"child":[{"type":"RankItem","props":{"y":0,"x":0,"runtime":"view.page.newRank.RankItem","renderType":"render"}}]},{"type":"Label","props":{"y":203,"width":729,"var":"loadTxt","valign":"middle","text":"数据请求中...","height":72,"fontSize":50,"color":"#c9fbff","centerX":0.5,"bold":true,"anchorY":0.5,"anchorX":0.5,"align":"center"}}]};
		return RankListUI;
	})(View)


	//class ui.hall.page.newRank2.RankList1ItemUI extends laya.ui.View
	var RankList1ItemUI=(function(_super){
		function RankList1ItemUI(){
			this.rank_mark=null;
			this.nameTxt=null;
			this.scoreTxt=null;
			this.headImg=null;
			this.rankFontClip=null;
			RankList1ItemUI.__super.call(this);
		}

		__class(RankList1ItemUI,'ui.hall.page.newRank2.RankList1ItemUI',_super);
		var __proto=RankList1ItemUI.prototype;
		__proto.createChildren=function(){
			laya.ui.Component.prototype.createChildren.call(this);
			this.createView(RankList1ItemUI.uiView);
		}

		RankList1ItemUI.uiView={"type":"View","props":{"width":602,"visible":false,"height":89},"child":[{"type":"Image","props":{"y":44,"x":51,"var":"rank_mark","skin":"layacommon/img_r1.png","anchorY":0.5,"anchorX":0.5}},{"type":"Label","props":{"y":44,"x":256,"width":161,"var":"nameTxt","valign":"middle","overflow":"hidden","height":47,"fontSize":24,"color":"#ffffff","bold":true,"anchorY":0.5,"anchorX":0.5,"align":"center"}},{"type":"Label","props":{"y":46,"x":470,"width":263,"var":"scoreTxt","valign":"middle","height":47,"fontSize":20,"color":"#ffffff","bold":true,"anchorY":0.5,"anchorX":0.5,"align":"center"}},{"type":"Box","props":{"y":48,"x":131,"scaleY":0.95,"scaleX":0.95,"anchorY":0.5,"anchorX":0.5},"child":[{"type":"Image","props":{"skin":"layacommon/img_headbg2.png"}},{"type":"Image","props":{"y":4,"x":6,"width":71,"var":"headImg","height":71}}]},{"type":"FontClip","props":{"y":43,"x":48,"width":17,"visible":false,"var":"rankFontClip","value":"0","spaceX":-3,"skin":"layacommon/fontclip_1.png","sheet":"0123456789","height":24,"anchorY":0.5,"anchorX":0.5}}]};
		return RankList1ItemUI;
	})(View)


	//class ui.hall.page.newRank2.RankList1ViewUI extends laya.ui.View
	var RankList1ViewUI=(function(_super){
		function RankList1ViewUI(){
			this.list_rank=null;
			this.box1=null;
			this.rank_mark=null;
			this.nameTxt=null;
			this.scoreTxt=null;
			this.headImg=null;
			this.rankFontClip=null;
			RankList1ViewUI.__super.call(this);
		}

		__class(RankList1ViewUI,'ui.hall.page.newRank2.RankList1ViewUI',_super);
		var __proto=RankList1ViewUI.prototype;
		__proto.createChildren=function(){
			View.regComponent("view.page.newRank2.RankList1Item",RankList1Item);
			laya.ui.Component.prototype.createChildren.call(this);
			this.createView(RankList1ViewUI.uiView);
		}

		RankList1ViewUI.uiView={"type":"View","props":{"width":606,"height":531},"child":[{"type":"List","props":{"y":91,"x":0,"width":606,"var":"list_rank","height":440},"child":[{"type":"RankList1Item","props":{"runtime":"view.page.newRank2.RankList1Item","renderType":"render"}}]},{"type":"Box","props":{"y":-5,"x":0,"width":604,"visible":false,"var":"box1","height":98},"child":[{"type":"Image","props":{"y":0,"x":0,"width":611,"skin":"layacommon/img_own.png","height":96}},{"type":"Image","props":{"y":46,"x":51,"visible":false,"var":"rank_mark","skin":"layacommon/img_r1.png","anchorY":0.5,"anchorX":0.5}},{"type":"Label","props":{"y":49,"x":256,"width":161,"var":"nameTxt","valign":"middle","overflow":"hidden","height":47,"fontSize":24,"color":"#ffffff","bold":true,"anchorY":0.5,"anchorX":0.5,"align":"center"}},{"type":"Label","props":{"y":51,"x":468,"width":261,"var":"scoreTxt","valign":"middle","height":47,"fontSize":20,"color":"#ffffff","bold":true,"anchorY":0.5,"anchorX":0.5,"align":"center"}},{"type":"Box","props":{"y":51,"x":131,"scaleY":0.95,"scaleX":0.95,"anchorY":0.5,"anchorX":0.5},"child":[{"type":"Image","props":{"skin":"layacommon/img_headbg2.png"}},{"type":"Image","props":{"y":4,"x":6,"width":71,"var":"headImg","height":71}}]},{"type":"FontClip","props":{"y":46,"x":50,"width":17,"visible":false,"var":"rankFontClip","value":"0","spaceX":-3,"skin":"layacommon/fontclip_1.png","sheet":"0123456789","height":24,"anchorY":0.5,"anchorX":0.5}}]}]};
		return RankList1ViewUI;
	})(View)


	//class ui.hall.page.newRank2.RankList2ItemUI extends laya.ui.View
	var RankList2ItemUI=(function(_super){
		function RankList2ItemUI(){
			this.img_head=null;
			this.rank_mark=null;
			RankList2ItemUI.__super.call(this);
		}

		__class(RankList2ItemUI,'ui.hall.page.newRank2.RankList2ItemUI',_super);
		var __proto=RankList2ItemUI.prototype;
		__proto.createChildren=function(){
			laya.ui.Component.prototype.createChildren.call(this);
			this.createView(RankList2ItemUI.uiView);
		}

		RankList2ItemUI.uiView={"type":"View","props":{"width":83,"visible":false,"height":86},"child":[{"type":"Image","props":{"skin":"layacommon/img_headbg2.png"}},{"type":"Image","props":{"y":4,"x":6,"width":71,"var":"img_head","height":71}},{"type":"Image","props":{"y":12,"x":19,"var":"rank_mark","skin":"layacommon/img_r1.png","anchorY":0.5,"anchorX":0.5}}]};
		return RankList2ItemUI;
	})(View)


	//class ui.hall.page.newRank2.RankList2ViewUI extends laya.ui.View
	var RankList2ViewUI=(function(_super){
		function RankList2ViewUI(){
			this.list_rank=null;
			RankList2ViewUI.__super.call(this);
		}

		__class(RankList2ViewUI,'ui.hall.page.newRank2.RankList2ViewUI',_super);
		var __proto=RankList2ViewUI.prototype;
		__proto.createChildren=function(){
			View.regComponent("view.page.newRank2.RankList2Item",RankList2Item);
			laya.ui.Component.prototype.createChildren.call(this);
			this.createView(RankList2ViewUI.uiView);
		}

		RankList2ViewUI.uiView={"type":"View","props":{"width":87,"height":345},"child":[{"type":"List","props":{"y":6,"x":4,"width":83,"var":"list_rank","height":339},"child":[{"type":"RankList2Item","props":{"runtime":"view.page.newRank2.RankList2Item","renderType":"render"}}]}]};
		return RankList2ViewUI;
	})(View)


	/**
	*<code>VBox</code> 是一个垂直布局容器类。
	*/
	//class laya.ui.HBox extends laya.ui.LayoutBox
	var HBox=(function(_super){
		function HBox(){HBox.__super.call(this);;
		};

		__class(HBox,'laya.ui.HBox',_super);
		var __proto=HBox.prototype;
		/**@inheritDoc */
		__proto.sortItem=function(items){
			if (items)items.sort(function(a,b){return a.x-b.x;});
		}

		/**@inheritDoc */
		__proto.changeItems=function(){
			this._itemChanged=false;
			var items=[];
			var maxHeight=0;
			for (var i=0,n=this.numChildren;i < n;i++){
				var item=this.getChildAt(i);
				if (item&&item.layoutEnabled){
					items.push(item);
					maxHeight=this._height?this._height:Math.max(maxHeight,item.height *item.scaleY);
				}
			}
			this.sortItem(items);
			var left=0;
			for (i=0,n=items.length;i < n;i++){
				item=items[i];
				item.x=left;
				left+=item.width *item.scaleX+this._space;
				if (this._align=="top"){
					item.y=0;
					}else if (this._align=="middle"){
					item.y=(maxHeight-item.height *item.scaleY)*0.5;
					}else if (this._align=="bottom"){
					item.y=maxHeight-item.height *item.scaleY;
				}
			}
			this.changeSize();
		}

		__getset(0,__proto,'height',_super.prototype._$get_height,function(value){
			if (this._height !=value){
				_super.prototype._$set_height.call(this,value);
				this.callLater(this.changeItems);
			}
		});

		HBox.NONE="none";
		HBox.TOP="top";
		HBox.MIDDLE="middle";
		HBox.BOTTOM="bottom";
		return HBox;
	})(LayoutBox)


	/**
	*<code>VBox</code> 是一个垂直布局容器类。
	*/
	//class laya.ui.VBox extends laya.ui.LayoutBox
	var VBox=(function(_super){
		function VBox(){VBox.__super.call(this);;
		};

		__class(VBox,'laya.ui.VBox',_super);
		var __proto=VBox.prototype;
		/**@inheritDoc */
		__proto.changeItems=function(){
			this._itemChanged=false;
			var items=[];
			var maxWidth=0;
			for (var i=0,n=this.numChildren;i < n;i++){
				var item=this.getChildAt(i);
				if (item&&item.layoutEnabled){
					items.push(item);
					maxWidth=this._width?this._width:Math.max(maxWidth,item.width *item.scaleX);
				}
			}
			this.sortItem(items);
			var top=0;
			for (i=0,n=items.length;i < n;i++){
				item=items[i];
				item.y=top;
				top+=item.height *item.scaleY+this._space;
				if (this._align=="left"){
					item.x=0;
					}else if (this._align=="center"){
					item.x=(maxWidth-item.width *item.scaleX)*0.5;
					}else if (this._align=="right"){
					item.x=maxWidth-item.width *item.scaleX;
				}
			}
			this.changeSize();
		}

		__getset(0,__proto,'width',_super.prototype._$get_width,function(value){
			if (this._width !=value){
				_super.prototype._$set_width.call(this,value);
				this.callLater(this.changeItems);
			}
		});

		VBox.NONE="none";
		VBox.LEFT="left";
		VBox.CENTER="center";
		VBox.RIGHT="right";
		return VBox;
	})(LayoutBox)


	/**
	*<code>RadioGroup</code> 控件定义一组 <code>Radio</code> 控件，这些控件相互排斥；
	*因此，用户每次只能选择一个 <code>Radio</code> 控件。
	*
	*@example <caption>以下示例代码，创建了一个 <code>RadioGroup</code> 实例。</caption>
	*package
	*{
		*import laya.ui.Radio;
		*import laya.ui.RadioGroup;
		*import laya.utils.Handler;
		*public class RadioGroup_Example
		*{
			*public function RadioGroup_Example()
			*{
				*Laya.init(640,800);//设置游戏画布宽高。
				*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
				*Laya.loader.load(["resource/ui/radio.png"],Handler.create(this,onLoadComplete));//加载资源。
				*}
			*private function onLoadComplete():void
			*{
				*var radioGroup:RadioGroup=new RadioGroup();//创建一个 RadioGroup 类的实例对象 radioGroup 。
				*radioGroup.pos(100,100);//设置 radioGroup 的位置信息。
				*radioGroup.labels="item0,item1,item2";//设置 radioGroup 的标签集。
				*radioGroup.skin="resource/ui/radio.png";//设置 radioGroup 的皮肤。
				*radioGroup.space=10;//设置 radioGroup 的项间隔距离。
				*radioGroup.selectHandler=new Handler(this,onSelect);//设置 radioGroup 的选择项发生改变时执行的处理器。
				*Laya.stage.addChild(radioGroup);//将 radioGroup 添加到显示列表。
				*}
			*private function onSelect(index:int):void
			*{
				*trace("当前选择的单选按钮索引: index= ",index);
				*}
			*}
		*}
	*@example
	*Laya.init(640,800);//设置游戏画布宽高、渲染模式
	*Laya.stage.bgColor="#efefef";//设置画布的背景颜色
	*Laya.loader.load(["resource/ui/radio.png"],laya.utils.Handler.create(this,onLoadComplete));
	*function onLoadComplete(){
		*var radioGroup=new laya.ui.RadioGroup();//创建一个 RadioGroup 类的实例对象 radioGroup 。
		*radioGroup.pos(100,100);//设置 radioGroup 的位置信息。
		*radioGroup.labels="item0,item1,item2";//设置 radioGroup 的标签集。
		*radioGroup.skin="resource/ui/radio.png";//设置 radioGroup 的皮肤。
		*radioGroup.space=10;//设置 radioGroup 的项间隔距离。
		*radioGroup.selectHandler=new laya.utils.Handler(this,onSelect);//设置 radioGroup 的选择项发生改变时执行的处理器。
		*Laya.stage.addChild(radioGroup);//将 radioGroup 添加到显示列表。
		*}
	*function onSelect(index){
		*console.log("当前选择的单选按钮索引: index= ",index);
		*}
	*@example
	*import Radio=laya.ui.Radio;
	*import RadioGroup=laya.ui.RadioGroup;
	*import Handler=laya.utils.Handler;
	*class RadioGroup_Example {
		*constructor(){
			*Laya.init(640,800);//设置游戏画布宽高。
			*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
			*Laya.loader.load(["resource/ui/radio.png"],Handler.create(this,this.onLoadComplete));//加载资源。
			*}
		*private onLoadComplete():void {
			*var radioGroup:RadioGroup=new RadioGroup();//创建一个 RadioGroup 类的实例对象 radioGroup 。
			*radioGroup.pos(100,100);//设置 radioGroup 的位置信息。
			*radioGroup.labels="item0,item1,item2";//设置 radioGroup 的标签集。
			*radioGroup.skin="resource/ui/radio.png";//设置 radioGroup 的皮肤。
			*radioGroup.space=10;//设置 radioGroup 的项间隔距离。
			*radioGroup.selectHandler=new Handler(this,this.onSelect);//设置 radioGroup 的选择项发生改变时执行的处理器。
			*Laya.stage.addChild(radioGroup);//将 radioGroup 添加到显示列表。
			*}
		*private onSelect(index:number):void {
			*console.log("当前选择的单选按钮索引: index= ",index);
			*}
		*}
	*/
	//class laya.ui.RadioGroup extends laya.ui.UIGroup
	var RadioGroup=(function(_super){
		function RadioGroup(){RadioGroup.__super.call(this);;
		};

		__class(RadioGroup,'laya.ui.RadioGroup',_super);
		var __proto=RadioGroup.prototype;
		/**@inheritDoc */
		__proto.createItem=function(skin,label){
			return new Radio(skin,label);
		}

		return RadioGroup;
	})(UIGroup)


	/**
	*<code>Tab</code> 组件用来定义选项卡按钮组。 *
	*@internal <p>属性：<code>selectedIndex</code> 的默认值为-1。</p>
	*
	*@example <caption>以下示例代码，创建了一个 <code>Tab</code> 实例。</caption>
	*package
	*{
		*import laya.ui.Tab;
		*import laya.utils.Handler;
		*public class Tab_Example
		*{
			*public function Tab_Example()
			*{
				*Laya.init(640,800);//设置游戏画布宽高。
				*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
				*Laya.loader.load(["resource/ui/tab.png"],Handler.create(this,onLoadComplete));//加载资源。
				*}
			*private function onLoadComplete():void
			*{
				*var tab:Tab=new Tab();//创建一个 Tab 类的实例对象 tab 。
				*tab.skin="resource/ui/tab.png";//设置 tab 的皮肤。
				*tab.labels="item0,item1,item2";//设置 tab 的标签集。
				*tab.x=100;//设置 tab 对象的属性 x 的值，用于控制 tab 对象的显示位置。
				*tab.y=100;//设置 tab 对象的属性 y 的值，用于控制 tab 对象的显示位置。
				*tab.selectHandler=new Handler(this,onSelect);//设置 tab 的选择项发生改变时执行的处理器。
				*Laya.stage.addChild(tab);//将 tab 添到显示列表。
				*}
			*private function onSelect(index:int):void
			*{
				*trace("当前选择的表情页索引: index= ",index);
				*}
			*}
		*}
	*@example
	*Laya.init(640,800);//设置游戏画布宽高
	*Laya.stage.bgColor="#efefef";//设置画布的背景颜色
	*Laya.loader.load(["resource/ui/tab.png"],laya.utils.Handler.create(this,onLoadComplete));
	*function onLoadComplete(){
		*var tab=new laya.ui.Tab();//创建一个 Tab 类的实例对象 tab 。
		*tab.skin="resource/ui/tab.png";//设置 tab 的皮肤。
		*tab.labels="item0,item1,item2";//设置 tab 的标签集。
		*tab.x=100;//设置 tab 对象的属性 x 的值，用于控制 tab 对象的显示位置。
		*tab.y=100;//设置 tab 对象的属性 y 的值，用于控制 tab 对象的显示位置。
		*tab.selectHandler=new laya.utils.Handler(this,onSelect);//设置 tab 的选择项发生改变时执行的处理器。
		*Laya.stage.addChild(tab);//将 tab 添到显示列表。
		*}
	*function onSelect(index){
		*console.log("当前选择的标签页索引: index= ",index);
		*}
	*@example
	*import Tab=laya.ui.Tab;
	*import Handler=laya.utils.Handler;
	*class Tab_Example {
		*constructor(){
			*Laya.init(640,800);//设置游戏画布宽高。
			*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
			*Laya.loader.load(["resource/ui/tab.png"],Handler.create(this,this.onLoadComplete));//加载资源。
			*}
		*private onLoadComplete():void {
			*var tab:Tab=new Tab();//创建一个 Tab 类的实例对象 tab 。
			*tab.skin="resource/ui/tab.png";//设置 tab 的皮肤。
			*tab.labels="item0,item1,item2";//设置 tab 的标签集。
			*tab.x=100;//设置 tab 对象的属性 x 的值，用于控制 tab 对象的显示位置。
			*tab.y=100;//设置 tab 对象的属性 y 的值，用于控制 tab 对象的显示位置。
			*tab.selectHandler=new Handler(this,this.onSelect);//设置 tab 的选择项发生改变时执行的处理器。
			*Laya.stage.addChild(tab);//将 tab 添到显示列表。
			*}
		*private onSelect(index:number):void {
			*console.log("当前选择的表情页索引: index= ",index);
			*}
		*}
	*/
	//class laya.ui.Tab extends laya.ui.UIGroup
	var Tab=(function(_super){
		function Tab(){Tab.__super.call(this);;
		};

		__class(Tab,'laya.ui.Tab',_super);
		var __proto=Tab.prototype;
		/**
		*@private
		*@inheritDoc
		*/
		__proto.createItem=function(skin,label){
			return new Button(skin,label);
		}

		return Tab;
	})(UIGroup)


	/**
	*<code>TextArea</code> 类用于创建显示对象以显示和输入文本。
	*@example <caption>以下示例代码，创建了一个 <code>TextArea</code> 实例。</caption>
	*package
	*{
		*import laya.ui.TextArea;
		*import laya.utils.Handler;
		*public class TextArea_Example
		*{
			*public function TextArea_Example()
			*{
				*Laya.init(640,800);//设置游戏画布宽高。
				*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
				*Laya.loader.load(["resource/ui/input.png"],Handler.create(this,onLoadComplete));//加载资源。
				*}
			*private function onLoadComplete():void
			*{
				*var textArea:TextArea=new TextArea("这个一个TextArea实例。");//创建一个 TextArea 类的实例对象 textArea 。
				*textArea.skin="resource/ui/input.png";//设置 textArea 的皮肤。
				*textArea.sizeGrid="4,4,4,4";//设置 textArea 的网格信息。
				*textArea.color="#008fff";//设置 textArea 的文本颜色。
				*textArea.font="Arial";//设置 textArea 的字体。
				*textArea.bold=true;//设置 textArea 的文本显示为粗体。
				*textArea.fontSize=20;//设置 textArea 的文本字体大小。
				*textArea.wordWrap=true;//设置 textArea 的文本自动换行。
				*textArea.x=100;//设置 textArea 对象的属性 x 的值，用于控制 textArea 对象的显示位置。
				*textArea.y=100;//设置 textArea 对象的属性 y 的值，用于控制 textArea 对象的显示位置。
				*textArea.width=300;//设置 textArea 的宽度。
				*textArea.height=200;//设置 textArea 的高度。
				*Laya.stage.addChild(textArea);//将 textArea 添加到显示列表。
				*}
			*}
		*}
	*@example
	*Laya.init(640,800);//设置游戏画布宽高、渲染模式
	*Laya.stage.bgColor="#efefef";//设置画布的背景颜色
	*Laya.loader.load(["resource/ui/input.png"],laya.utils.Handler.create(this,onLoadComplete));//加载资源。
	*function onLoadComplete(){
		*var textArea=new laya.ui.TextArea("这个一个TextArea实例。");//创建一个 TextArea 类的实例对象 textArea 。
		*textArea.skin="resource/ui/input.png";//设置 textArea 的皮肤。
		*textArea.sizeGrid="4,4,4,4";//设置 textArea 的网格信息。
		*textArea.color="#008fff";//设置 textArea 的文本颜色。
		*textArea.font="Arial";//设置 textArea 的字体。
		*textArea.bold=true;//设置 textArea 的文本显示为粗体。
		*textArea.fontSize=20;//设置 textArea 的文本字体大小。
		*textArea.wordWrap=true;//设置 textArea 的文本自动换行。
		*textArea.x=100;//设置 textArea 对象的属性 x 的值，用于控制 textArea 对象的显示位置。
		*textArea.y=100;//设置 textArea 对象的属性 y 的值，用于控制 textArea 对象的显示位置。
		*textArea.width=300;//设置 textArea 的宽度。
		*textArea.height=200;//设置 textArea 的高度。
		*Laya.stage.addChild(textArea);//将 textArea 添加到显示列表。
		*}
	*@example
	*import TextArea=laya.ui.TextArea;
	*import Handler=laya.utils.Handler;
	*class TextArea_Example {
		*constructor(){
			*Laya.init(640,800);//设置游戏画布宽高、渲染模式。
			*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
			*Laya.loader.load(["resource/ui/input.png"],Handler.create(this,this.onLoadComplete));//加载资源。
			*}
		*private onLoadComplete():void {
			*var textArea:TextArea=new TextArea("这个一个TextArea实例。");//创建一个 TextArea 类的实例对象 textArea 。
			*textArea.skin="resource/ui/input.png";//设置 textArea 的皮肤。
			*textArea.sizeGrid="4,4,4,4";//设置 textArea 的网格信息。
			*textArea.color="#008fff";//设置 textArea 的文本颜色。
			*textArea.font="Arial";//设置 textArea 的字体。
			*textArea.bold=true;//设置 textArea 的文本显示为粗体。
			*textArea.fontSize=20;//设置 textArea 的文本字体大小。
			*textArea.wordWrap=true;//设置 textArea 的文本自动换行。
			*textArea.x=100;//设置 textArea 对象的属性 x 的值，用于控制 textArea 对象的显示位置。
			*textArea.y=100;//设置 textArea 对象的属性 y 的值，用于控制 textArea 对象的显示位置。
			*textArea.width=300;//设置 textArea 的宽度。
			*textArea.height=200;//设置 textArea 的高度。
			*Laya.stage.addChild(textArea);//将 textArea 添加到显示列表。
			*}
		*}
	*/
	//class laya.ui.TextArea extends laya.ui.TextInput
	var TextArea=(function(_super){
		function TextArea(text){
			this._vScrollBar=null;
			this._hScrollBar=null;
			(text===void 0)&& (text="");
			TextArea.__super.call(this,text);
		}

		__class(TextArea,'laya.ui.TextArea',_super);
		var __proto=TextArea.prototype;
		__proto.destroy=function(destroyChild){
			(destroyChild===void 0)&& (destroyChild=true);
			_super.prototype.destroy.call(this,destroyChild);
			this._vScrollBar && this._vScrollBar.destroy();
			this._hScrollBar && this._hScrollBar.destroy();
			this._vScrollBar=null;
			this._hScrollBar=null;
		}

		__proto.initialize=function(){
			this.width=180;
			this.height=150;
			this._tf.wordWrap=true;
			this.multiline=true;
		}

		__proto.onVBarChanged=function(e){
			if (this._tf.scrollY !=this._vScrollBar.value){
				this._tf.scrollY=this._vScrollBar.value;
			}
		}

		__proto.onHBarChanged=function(e){
			if (this._tf.scrollX !=this._hScrollBar.value){
				this._tf.scrollX=this._hScrollBar.value;
			}
		}

		__proto.changeScroll=function(){
			var vShow=this._vScrollBar && this._tf.maxScrollY > 0;
			var hShow=this._hScrollBar && this._tf.maxScrollX > 0;
			var showWidth=vShow ? this._width-this._vScrollBar.width :this._width;
			var showHeight=hShow ? this._height-this._hScrollBar.height :this._height;
			var padding=this._tf.padding || Styles.labelPadding;
			this._tf.width=showWidth;
			this._tf.height=showHeight;
			if (this._vScrollBar){
				this._vScrollBar.x=this._width-this._vScrollBar.width-padding[2];
				this._vScrollBar.y=padding[1];
				this._vScrollBar.height=this._height-(hShow ? this._hScrollBar.height :0)-padding[1]-padding[3];
				this._vScrollBar.scrollSize=1;
				this._vScrollBar.thumbPercent=showHeight / Math.max(this._tf.textHeight,showHeight);
				this._vScrollBar.setScroll(1,this._tf.maxScrollY,this._tf.scrollY);
				this._vScrollBar.visible=vShow;
			}
			if (this._hScrollBar){
				this._hScrollBar.x=padding[0];
				this._hScrollBar.y=this._height-this._hScrollBar.height-padding[3];
				this._hScrollBar.width=this._width-(vShow ? this._vScrollBar.width :0)-padding[0]-padding[2];
				this._hScrollBar.scrollSize=Math.max(showWidth *0.033,1);
				this._hScrollBar.thumbPercent=showWidth / Math.max(this._tf.textWidth,showWidth);
				this._hScrollBar.setScroll(0,this.maxScrollX,this.scrollX);
				this._hScrollBar.visible=hShow;
			}
		}

		/**滚动到某个位置*/
		__proto.scrollTo=function(y){
			this.commitMeasure();
			this._tf.scrollY=y;
		}

		/**垂直滚动值*/
		__getset(0,__proto,'scrollY',function(){
			return this._tf.scrollY;
		});

		__getset(0,__proto,'width',_super.prototype._$get_width,function(value){
			_super.prototype._$set_width.call(this,value);
			this.callLater(this.changeScroll);
		});

		/**水平滚动条实体*/
		__getset(0,__proto,'hScrollBar',function(){
			return this._hScrollBar;
		});

		__getset(0,__proto,'height',_super.prototype._$get_height,function(value){
			_super.prototype._$set_height.call(this,value);
			this.callLater(this.changeScroll);
		});

		/**水平滚动最大值*/
		__getset(0,__proto,'maxScrollX',function(){
			return this._tf.maxScrollX;
		});

		/**垂直滚动条皮肤*/
		__getset(0,__proto,'vScrollBarSkin',function(){
			return this._vScrollBar ? this._vScrollBar.skin :null;
			},function(value){
			if (this._vScrollBar==null){
				this.addChild(this._vScrollBar=new VScrollBar());
				this._vScrollBar.on("change",this,this.onVBarChanged);
				this._vScrollBar.target=this._tf;
				this.callLater(this.changeScroll);
			}
			this._vScrollBar.skin=value;
		});

		/**水平滚动条皮肤*/
		__getset(0,__proto,'hScrollBarSkin',function(){
			return this._hScrollBar ? this._hScrollBar.skin :null;
			},function(value){
			if (this._hScrollBar==null){
				this.addChild(this._hScrollBar=new HScrollBar());
				this._hScrollBar.on("change",this,this.onHBarChanged);
				this._hScrollBar.mouseWheelEnable=false;
				this._hScrollBar.target=this._tf;
				this.callLater(this.changeScroll);
			}
			this._hScrollBar.skin=value;
		});

		/**垂直滚动条实体*/
		__getset(0,__proto,'vScrollBar',function(){
			return this._vScrollBar;
		});

		/**垂直滚动最大值*/
		__getset(0,__proto,'maxScrollY',function(){
			return this._tf.maxScrollY;
		});

		/**水平滚动值*/
		__getset(0,__proto,'scrollX',function(){
			return this._tf.scrollX;
		});

		return TextArea;
	})(TextInput)


	//class ui.BjViewUI extends view.UIBase0
	var BjViewUI=(function(_super){
		function BjViewUI(){
			this.imgbg=null;
			BjViewUI.__super.call(this);
		}

		__class(BjViewUI,'ui.BjViewUI',_super);
		var __proto=BjViewUI.prototype;
		__proto.createChildren=function(){
			laya.ui.Component.prototype.createChildren.call(this);
			this.loadUI("BjView");
		}

		return BjViewUI;
	})(UIBase0)


	//class ui.gameAgain.gameAgainUI extends view.UIBase0
	var gameAgainUI=(function(_super){
		function gameAgainUI(){
			this.boxCenter=null;
			this.tipsBg=null;
			this.hero=null;
			this.btnRebirth=null;
			this.helpTips=null;
			this.btnBackHall=null;
			this.labelInfo=null;
			gameAgainUI.__super.call(this);
		}

		__class(gameAgainUI,'ui.gameAgain.gameAgainUI',_super);
		var __proto=gameAgainUI.prototype;
		__proto.createChildren=function(){
			laya.ui.Component.prototype.createChildren.call(this);
			this.loadUI("gameAgain/gameAgain");
		}

		return gameAgainUI;
	})(UIBase0)


	//class ui.gameBalance.TrainingEndUI extends view.UIBase0
	var TrainingEndUI=(function(_super){
		function TrainingEndUI(){
			this.jixu=null;
			this.guang=null;
			this.imgbg=null;
			this.resultImg=null;
			TrainingEndUI.__super.call(this);
		}

		__class(TrainingEndUI,'ui.gameBalance.TrainingEndUI',_super);
		var __proto=TrainingEndUI.prototype;
		__proto.createChildren=function(){
			laya.ui.Component.prototype.createChildren.call(this);
			this.loadUI("gameBalance/TrainingEnd");
		}

		return TrainingEndUI;
	})(UIBase0)


	//class ui.gaming.FightSetUI extends view.UIBase0
	var FightSetUI=(function(_super){
		function FightSetUI(){
			this.dialog=null;
			this.img_zidong=null;
			this.img_banzidong=null;
			this.img_ziyou=null;
			this.img_gou_zidong=null;
			this.img_gou_banzidong=null;
			this.img_gou_ziyou=null;
			this.btn_close=null;
			FightSetUI.__super.call(this);
		}

		__class(FightSetUI,'ui.gaming.FightSetUI',_super);
		var __proto=FightSetUI.prototype;
		__proto.createChildren=function(){
			laya.ui.Component.prototype.createChildren.call(this);
			this.loadUI("gaming/FightSet");
		}

		return FightSetUI;
	})(UIBase0)


	//class ui.gaming.GameResultNUI extends view.UIBase0
	var GameResultNUI=(function(_super){
		function GameResultNUI(){
			this.ani1=null;
			this.jixuBtn=null;
			GameResultNUI.__super.call(this);
		}

		__class(GameResultNUI,'ui.gaming.GameResultNUI',_super);
		var __proto=GameResultNUI.prototype;
		__proto.createChildren=function(){
			View.regComponent("laya.customUI.ButtonScaleI",ButtonScaleI);
			laya.ui.Component.prototype.createChildren.call(this);
			this.loadUI("gaming/GameResultN");
		}

		return GameResultNUI;
	})(UIBase0)


	//class ui.gaming.GameResultUI extends view.UIBase0
	var GameResultUI=(function(_super){
		function GameResultUI(){
			this.jixu=null;
			this.guang=null;
			this.imgbg=null;
			this.selfBox=null;
			this.resultImg=null;
			this.tState=null;
			this.paiziBox=null;
			this.paizi1=null;
			this.paiLevelClip1=null;
			this.levelClip1=null;
			this.typeName=null;
			this.starMbox1=null;
			this.starNum1=null;
			this.dh1=null;
			this.dh2=null;
			this.dh3=null;
			this.dh4=null;
			this.dh5=null;
			this.dh6=null;
			this.dh7=null;
			this.s1=null;
			this.s2=null;
			this.s3=null;
			this.s4=null;
			this.s5=null;
			this.s6=null;
			this.s7=null;
			this.rwBox=null;
			this.rwb1=null;
			this.star1=null;
			this.text_rw1=null;
			this.rwb2=null;
			this.star2=null;
			this.text_rw2=null;
			this.jsTt=null;
			this.jsTt2=null;
			GameResultUI.__super.call(this);
		}

		__class(GameResultUI,'ui.gaming.GameResultUI',_super);
		var __proto=GameResultUI.prototype;
		__proto.createChildren=function(){
			View.regComponent("Text",Text);
			laya.ui.Component.prototype.createChildren.call(this);
			this.loadUI("gaming/GameResult");
		}

		return GameResultUI;
	})(UIBase0)


	//class ui.gaming.GamingUI extends view.UIBase0
	var GamingUI=(function(_super){
		function GamingUI(){
			this.FSTips=null;
			this.a2=null;
			this.a0=null;
			this.a1=null;
			this.sTips=null;
			this.hTips=null;
			this.dh0=null;
			this.dh1=null;
			this.dh2=null;
			this.dh3=null;
			this.battleBg=null;
			this.timeFont=null;
			this.ownFontClip=null;
			this.otherFontClip=null;
			this.arrows=null;
			this.foe=null;
			this.first=null;
			this.bearDir=null;
			this.bearPos=null;
			this.snowOctopusImg=null;
			this.imgsnowword=null;
			this.ctrlLayer=null;
			this.chooseSkill=null;
			this.choose0=null;
			this.choose1=null;
			this.choose2=null;
			this.skilldesc=null;
			this.skilldescText=null;
			this.haveSkill=null;
			this.box_eff=null;
			this.viewRank=null;
			this.viewInfo=null;
			this.btn_fightSet=null;
			this.box_fightSetTips=null;
			this.FSImg=null;
			this.skillbox2=null;
			this.btnAttack=null;
			this.boxShake=null;
			this.wiffi=null;
			this.ping=null;
			this.b1=null;
			this.team1_2=null;
			this.team1_1=null;
			this.team1_0=null;
			this.selfk1=null;
			this.b2=null;
			this.team2_0=null;
			this.team2_1=null;
			this.team2_2=null;
			this.selfk2=null;
			this.no1=null;
			this.no1Text=null;
			this.bearRefresh=null;
			this.kill=null;
			this.jsbg=null;
			this.killer=null;
			this.bekiller=null;
			this.img_beKiller=null;
			this.bear=null;
			this.txtbekiller=null;
			this.txtkiller=null;
			this.killType=null;
			this.speakList=null;
			this.skillbox1=null;
			this.skillbox3=null;
			this.speakMain=null;
			this.speak1=null;
			this.maskSkill5=null;
			this.speak2=null;
			this.maskSkill6=null;
			this.speak3=null;
			this.maskSkill4=null;
			this.speakBox=null;
			this.worldList=null;
			this.speakSelf=null;
			this.speakAll=null;
			this.tipsObj=null;
			this.tipsLabel=null;
			this.bgEnd=null;
			this.labelEnd=null;
			this.levelProBar=null;
			this.clipLv=null;
			this.tabmoshi=null;
			GamingUI.__super.call(this);
		}

		__class(GamingUI,'ui.gaming.GamingUI',_super);
		var __proto=GamingUI.prototype;
		__proto.createChildren=function(){
			View.regComponent("view.gaming.GameRankView",GameRankView);
			View.regComponent("view.gaming.GameInfoView",GameInfoView);
			View.regComponent("view.page.gaming.SupportSkillBox",SupportSkillBox);
			View.regComponent("view.page.gaming.MainSkillBox",MainSkillBox);
			View.regComponent("Text",Text);
			View.regComponent("HTMLDivElement",HTMLDivElement);
			View.regComponent("view.page.gaming.SkillBox",SkillBox);
			View.regComponent("view.page.gaming.GetSnow",GetSnow);
			laya.ui.Component.prototype.createChildren.call(this);
			this.loadUI("gaming/Gaming");
		}

		return GamingUI;
	})(UIBase0)


	//class ui.hall.page.activity.ShareInfoUI extends view.UIBase0
	var ShareInfoUI=(function(_super){
		function ShareInfoUI(){
			this.boxMy=null;
			this.btnShare=null;
			this.btnClose=null;
			this.leftCard=null;
			this.list1=null;
			this.rightCard=null;
			this.list2=null;
			this.imgHisitry=null;
			this.canGet=null;
			this.jd=null;
			ShareInfoUI.__super.call(this);
		}

		__class(ShareInfoUI,'ui.hall.page.activity.ShareInfoUI',_super);
		var __proto=ShareInfoUI.prototype;
		__proto.createChildren=function(){
			View.regComponent("laya.customUI.ButtonScaleI",ButtonScaleI);
			View.regComponent("view.items.Jitem",Jitem);
			laya.ui.Component.prototype.createChildren.call(this);
			this.loadUI("hall/page/activity/ShareInfo");
		}

		return ShareInfoUI;
	})(UIBase0)


	//class ui.hall.page.email.ItemShowUI extends view.UIBase0
	var ItemShowUI=(function(_super){
		function ItemShowUI(){
			this.bg=null;
			this.myBox=null;
			this.btnYes=null;
			this.closeBtn=null;
			this.itemBox=null;
			this.title=null;
			ItemShowUI.__super.call(this);
		}

		__class(ItemShowUI,'ui.hall.page.email.ItemShowUI',_super);
		var __proto=ItemShowUI.prototype;
		__proto.createChildren=function(){
			View.regComponent("laya.customUI.ButtonScaleI",ButtonScaleI);
			laya.ui.Component.prototype.createChildren.call(this);
			this.loadUI("hall/page/email/ItemShow");
		}

		return ItemShowUI;
	})(UIBase0)


	//class ui.hall.page.gameBalance.AttactEndUI extends view.UIBase0
	var AttactEndUI=(function(_super){
		function AttactEndUI(){
			this.jixu=null;
			this.guang=null;
			this.imgbg=null;
			this.resultImg=null;
			AttactEndUI.__super.call(this);
		}

		__class(AttactEndUI,'ui.hall.page.gameBalance.AttactEndUI',_super);
		var __proto=AttactEndUI.prototype;
		__proto.createChildren=function(){
			laya.ui.Component.prototype.createChildren.call(this);
			this.loadUI("hall/page/gameBalance/AttactEnd");
		}

		return AttactEndUI;
	})(UIBase0)


	//class ui.hall.page.gameBalance.Team3V3BalanceUI extends view.UIBase0
	var Team3V3BalanceUI=(function(_super){
		function Team3V3BalanceUI(){
			this.slt=null;
			this.rStat=null;
			this.goBack=null;
			this.gShare=null;
			this.addVal=null;
			this.zhouTxt=null;
			this.myList1=null;
			this.myList2=null;
			this.f2=null;
			this.f1=null;
			Team3V3BalanceUI.__super.call(this);
		}

		__class(Team3V3BalanceUI,'ui.hall.page.gameBalance.Team3V3BalanceUI',_super);
		var __proto=Team3V3BalanceUI.prototype;
		__proto.createChildren=function(){
			View.regComponent("laya.customUI.ButtonScaleI",ButtonScaleI);
			View.regComponent("ui.hall.page.gameBalance.Team3V3ItemUI",Team3V3ItemUI);
			laya.ui.Component.prototype.createChildren.call(this);
			this.loadUI("hall/page/gameBalance/Team3V3Balance");
		}

		return Team3V3BalanceUI;
	})(UIBase0)


	//class ui.hall.page.newRank.RankListViewUI extends view.UIBase0
	var RankListViewUI=(function(_super){
		function RankListViewUI(){
			this.box_rank=null;
			this.startBtn=null;
			this.tab_rank=null;
			this.imgType=null;
			RankListViewUI.__super.call(this);
		}

		__class(RankListViewUI,'ui.hall.page.newRank.RankListViewUI',_super);
		var __proto=RankListViewUI.prototype;
		__proto.createChildren=function(){
			View.regComponent("laya.customUI.ButtonScaleI",ButtonScaleI);
			laya.ui.Component.prototype.createChildren.call(this);
			this.loadUI("hall/page/newRank/RankListView");
		}

		return RankListViewUI;
	})(UIBase0)


	//class ui.hall.page.playerList.PlayerListViewUI extends view.UIBase0
	var PlayerListViewUI=(function(_super){
		function PlayerListViewUI(){
			this.topPanel=null;
			this.viewStack=null;
			this.img_shuxing=null;
			this.poly=null;
			this.imgAvtor=null;
			this.nameTxt=null;
			this.highest=null;
			this.kill2=null;
			this.average=null;
			this.rising=null;
			this.match=null;
			this.mvp=null;
			this.kill=null;
			this.even=null;
			this.dzNum=null;
			this.uidTxt=null;
			this.zhanjiList=null;
			this.btn1=null;
			this.btn0=null;
			this.btnshare=null;
			this.loading=null;
			PlayerListViewUI.__super.call(this);
		}

		__class(PlayerListViewUI,'ui.hall.page.playerList.PlayerListViewUI',_super);
		var __proto=PlayerListViewUI.prototype;
		__proto.createChildren=function(){
			View.regComponent("view.page.TitleBar",TitleBar);
			View.regComponent("view.page.HeadImg",HeadImg);
			View.regComponent("Text",Text);
			View.regComponent("laya.customUI.ButtonScaleI",ButtonScaleI);
			laya.ui.Component.prototype.createChildren.call(this);
			this.loadUI("hall/page/playerList/PlayerListView");
		}

		return PlayerListViewUI;
	})(UIBase0)


	//class ui.hall.page.prompt.NoticeHouViewUI extends view.UIBase0
	var NoticeHouViewUI=(function(_super){
		function NoticeHouViewUI(){
			this.dialog=null;
			this.htmlEle=null;
			this.btnYes=null;
			NoticeHouViewUI.__super.call(this);
		}

		__class(NoticeHouViewUI,'ui.hall.page.prompt.NoticeHouViewUI',_super);
		var __proto=NoticeHouViewUI.prototype;
		__proto.createChildren=function(){
			View.regComponent("HTMLDivElement",HTMLDivElement);
			View.regComponent("laya.customUI.ButtonScaleI",ButtonScaleI);
			laya.ui.Component.prototype.createChildren.call(this);
			this.loadUI("hall/page/prompt/NoticeHouView");
		}

		return NoticeHouViewUI;
	})(UIBase0)


	//class ui.hall.page.roomList.menuListUI extends view.UIBase0
	var menuListUI=(function(_super){
		function menuListUI(){
			this.menuAni=null;
			this.rank1Ani=null;
			this.rank2Ani=null;
			this.imgBg=null;
			this.btnrank=null;
			this.btnteam=null;
			this.btnfree=null;
			this.roleRoom=null;
			this.imgAvtor=null;
			this.lNkName=null;
			this.ICrystal=null;
			this.lMoney=null;
			this.exitBtn=null;
			this.soundBtn=null;
			this.rankPkBtn=null;
			this.btnShop=null;
			this.libaoBtn=null;
			this.starView=null;
			this.scHd=null;
			this.snowBox=null;
			this.maskBox=null;
			this.rankbg1=null;
			this.shareBtn2=null;
			this.rankSprite1=null;
			this.rankbg2=null;
			this.rankSprite2=null;
			this.chongzhiBtn=null;
			menuListUI.__super.call(this);
		}

		__class(menuListUI,'ui.hall.page.roomList.menuListUI',_super);
		var __proto=menuListUI.prototype;
		__proto.createChildren=function(){
			View.regComponent("laya.customUI.ButtonScaleI",ButtonScaleI);
			View.regComponent("view.page.HeadImg",HeadImg);
			View.regComponent("ui.hall.page.roomList.StarViewUI",StarViewUI);
			laya.ui.Component.prototype.createChildren.call(this);
			this.loadUI("hall/page/roomList/menuList");
		}

		return menuListUI;
	})(UIBase0)


	//class ui.hall.page.roomList.SendDeskTopUI extends view.UIBase0
	var SendDeskTopUI=(function(_super){
		function SendDeskTopUI(){
			this.myBox=null;
			this.btnClose=null;
			this.btnSend=null;
			SendDeskTopUI.__super.call(this);
		}

		__class(SendDeskTopUI,'ui.hall.page.roomList.SendDeskTopUI',_super);
		var __proto=SendDeskTopUI.prototype;
		__proto.createChildren=function(){
			View.regComponent("laya.customUI.ButtonScaleI",ButtonScaleI);
			laya.ui.Component.prototype.createChildren.call(this);
			this.loadUI("hall/page/roomList/SendDeskTop");
		}

		return SendDeskTopUI;
	})(UIBase0)


	//class ui.hall.page.roomList.ShouChongViewUI extends view.UIBase0
	var ShouChongViewUI=(function(_super){
		function ShouChongViewUI(){
			this.myBox=null;
			this.bg=null;
			this.czBtn=null;
			this.closeBtn=null;
			ShouChongViewUI.__super.call(this);
		}

		__class(ShouChongViewUI,'ui.hall.page.roomList.ShouChongViewUI',_super);
		var __proto=ShouChongViewUI.prototype;
		__proto.createChildren=function(){
			View.regComponent("laya.customUI.ButtonScaleI",ButtonScaleI);
			laya.ui.Component.prototype.createChildren.call(this);
			this.loadUI("hall/page/roomList/ShouChongView");
		}

		return ShouChongViewUI;
	})(UIBase0)


	//class ui.hall.page.roomList.ShowCzViewUI extends view.UIBase0
	var ShowCzViewUI=(function(_super){
		function ShowCzViewUI(){
			this.closeBg=null;
			this.myBox=null;
			this.closeBtn=null;
			this.myList=null;
			this.closeBtn2=null;
			ShowCzViewUI.__super.call(this);
		}

		__class(ShowCzViewUI,'ui.hall.page.roomList.ShowCzViewUI',_super);
		var __proto=ShowCzViewUI.prototype;
		__proto.createChildren=function(){
			View.regComponent("view.page.ShopDiamond",ShopDiamond);
			View.regComponent("laya.customUI.ButtonScaleI",ButtonScaleI);
			laya.ui.Component.prototype.createChildren.call(this);
			this.loadUI("hall/page/roomList/ShowCzView");
		}

		return ShowCzViewUI;
	})(UIBase0)


	//class ui.hall.page.roomList.ShowLbUI extends view.UIBase0
	var ShowLbUI=(function(_super){
		function ShowLbUI(){
			this.myBox=null;
			this.payBtn=null;
			this.closeBtn=null;
			this.img=null;
			this.updateTxt=null;
			this.rewardTxt=null;
			ShowLbUI.__super.call(this);
		}

		__class(ShowLbUI,'ui.hall.page.roomList.ShowLbUI',_super);
		var __proto=ShowLbUI.prototype;
		__proto.createChildren=function(){
			View.regComponent("laya.customUI.ButtonScaleI",ButtonScaleI);
			laya.ui.Component.prototype.createChildren.call(this);
			this.loadUI("hall/page/roomList/ShowLb");
		}

		return ShowLbUI;
	})(UIBase0)


	//class ui.hall.page.shareSingle.ShareSingleFUI extends view.UIBase0
	var ShareSingleFUI=(function(_super){
		function ShareSingleFUI(){
			this.ownHead=null;
			this.otherHead=null;
			this.btn_challenge=null;
			this.img_shuxing=null;
			this.poly1=null;
			this.poly2=null;
			this.ownerName=null;
			this.otherName=null;
			ShareSingleFUI.__super.call(this);
		}

		__class(ShareSingleFUI,'ui.hall.page.shareSingle.ShareSingleFUI',_super);
		var __proto=ShareSingleFUI.prototype;
		__proto.createChildren=function(){
			View.regComponent("laya.customUI.ButtonScaleI",ButtonScaleI);
			laya.ui.Component.prototype.createChildren.call(this);
			this.loadUI("hall/page/shareSingle/ShareSingleF");
		}

		return ShareSingleFUI;
	})(UIBase0)


	//class ui.hall.page.ShareTipsUI extends view.UIBase0
	var ShareTipsUI=(function(_super){
		function ShareTipsUI(){
			this.imgBg=null;
			this.sbg=null;
			this.hero=null;
			ShareTipsUI.__super.call(this);
		}

		__class(ShareTipsUI,'ui.hall.page.ShareTipsUI',_super);
		var __proto=ShareTipsUI.prototype;
		__proto.createChildren=function(){
			laya.ui.Component.prototype.createChildren.call(this);
			this.loadUI("hall/page/ShareTips");
		}

		return ShareTipsUI;
	})(UIBase0)


	//class ui.hall.page.shop.DuoBaoViewUI extends view.UIBase0
	var DuoBaoViewUI=(function(_super){
		function DuoBaoViewUI(){
			this.closeBg=null;
			this.item0=null;
			this.item1=null;
			this.item2=null;
			this.item3=null;
			this.item4=null;
			this.item5=null;
			this.item6=null;
			this.item7=null;
			this.item8=null;
			this.item9=null;
			this.item10=null;
			this.item11=null;
			this.dbBtn1=null;
			this.dbBtn5=null;
			this.db1t=null;
			this.db5t=null;
			DuoBaoViewUI.__super.call(this);
		}

		__class(DuoBaoViewUI,'ui.hall.page.shop.DuoBaoViewUI',_super);
		var __proto=DuoBaoViewUI.prototype;
		__proto.createChildren=function(){
			View.regComponent("view.shop.DbItem",DbItem);
			View.regComponent("laya.customUI.ButtonScaleI",ButtonScaleI);
			laya.ui.Component.prototype.createChildren.call(this);
			this.loadUI("hall/page/shop/DuoBaoView");
		}

		return DuoBaoViewUI;
	})(UIBase0)


	//class ui.hall.page.shop.HeroCardViewUI extends view.UIBase0
	var HeroCardViewUI=(function(_super){
		function HeroCardViewUI(){
			this.hsani0=null;
			this.hsani1=null;
			this.hsani2=null;
			this.hsani3=null;
			this.moneyImg=null;
			this.moneyTxt=null;
			this.uName=null;
			this.sc=null;
			this.sct=null;
			this.gj=null;
			this.gjt=null;
			this.bf=null;
			this.bft=null;
			this.lm=null;
			this.lmt=null;
			this.pgSk=null;
			this.xlSk=null;
			this.btn_use=null;
			this.btn_Db=null;
			this.bgDw=null;
			this.dwImg=null;
			this.buyBox=null;
			this.icon=null;
			this.btn_buy=null;
			this.needVal=null;
			this.tfSk=null;
			this.Avtor=null;
			this.hList=null;
			this.qdBox=null;
			this.btn_qd=null;
			this.btn_buy1=null;
			this.icon1=null;
			this.needVal1=null;
			this.qdPn=null;
			this.topPanel=null;
			HeroCardViewUI.__super.call(this);
		}

		__class(HeroCardViewUI,'ui.hall.page.shop.HeroCardViewUI',_super);
		var __proto=HeroCardViewUI.prototype;
		__proto.createChildren=function(){
			View.regComponent("laya.customUI.ButtonScaleI",ButtonScaleI);
			View.regComponent("ui.hall.page.shop.HeroCardItemUI",HeroCardItemUI);
			View.regComponent("view.page.TitleBar",TitleBar);
			laya.ui.Component.prototype.createChildren.call(this);
			this.loadUI("hall/page/shop/HeroCardView");
		}

		return HeroCardViewUI;
	})(UIBase0)


	//class ui.hall.page.shop.HuoDeTuJingViewUI extends view.UIBase0
	var HuoDeTuJingViewUI=(function(_super){
		function HuoDeTuJingViewUI(){
			this.myBox=null;
			this.btnYes=null;
			this.btnNo=null;
			this.typeImg=null;
			this.tujingList=null;
			this.btnClose=null;
			this.msgTxt=null;
			HuoDeTuJingViewUI.__super.call(this);
		}

		__class(HuoDeTuJingViewUI,'ui.hall.page.shop.HuoDeTuJingViewUI',_super);
		var __proto=HuoDeTuJingViewUI.prototype;
		__proto.createChildren=function(){
			View.regComponent("laya.customUI.ButtonScaleI",ButtonScaleI);
			laya.ui.Component.prototype.createChildren.call(this);
			this.loadUI("hall/page/shop/HuoDeTuJingView");
		}

		return HuoDeTuJingViewUI;
	})(UIBase0)


	//class ui.hall.page.shop.ShopNewBuyRoleUI extends view.UIBase0
	var ShopNewBuyRoleUI=(function(_super){
		function ShopNewBuyRoleUI(){
			this.bg=null;
			this.dialog=null;
			this.btnClose=null;
			this.img_quality=null;
			this.btn_sendFriend=null;
			this.bj_goodat=null;
			this.btn_buyAndUse=null;
			this.img_role=null;
			this.img_goodat=null;
			this.img_sex=null;
			this.img_icon=null;
			this.lab_num=null;
			this.lab_dec=null;
			this.lab_name=null;
			ShopNewBuyRoleUI.__super.call(this);
		}

		__class(ShopNewBuyRoleUI,'ui.hall.page.shop.ShopNewBuyRoleUI',_super);
		var __proto=ShopNewBuyRoleUI.prototype;
		__proto.createChildren=function(){
			View.regComponent("laya.customUI.ButtonScaleI",ButtonScaleI);
			laya.ui.Component.prototype.createChildren.call(this);
			this.loadUI("hall/page/shop/ShopNewBuyRole");
		}

		return ShopNewBuyRoleUI;
	})(UIBase0)


	//class ui.hall.page.team.FreeChooseUI extends view.UIBase0
	var FreeChooseUI=(function(_super){
		function FreeChooseUI(){
			this.btnSingle=null;
			this.btnTeam=null;
			this.btn_close=null;
			FreeChooseUI.__super.call(this);
		}

		__class(FreeChooseUI,'ui.hall.page.team.FreeChooseUI',_super);
		var __proto=FreeChooseUI.prototype;
		__proto.createChildren=function(){
			View.regComponent("laya.customUI.ButtonScaleI",ButtonScaleI);
			laya.ui.Component.prototype.createChildren.call(this);
			this.loadUI("hall/page/team/FreeChoose");
		}

		return FreeChooseUI;
	})(UIBase0)


	//class ui.hall.page.team.FreeMatchUI extends view.UIBase0
	var FreeMatchUI=(function(_super){
		function FreeMatchUI(){
			this.titbg=null;
			this.btnBack=null;
			this.imgtitme=null;
			this.titips=null;
			this.boxTeam3=null;
			this.team1=null;
			this.team2=null;
			this.boxChange=null;
			this.txtChangeP=null;
			this.btnEnter=null;
			this.btnCancle=null;
			this.bottomPanel=null;
			this.btnYq=null;
			this.btn_qiehuan=null;
			this.btnStart=null;
			FreeMatchUI.__super.call(this);
		}

		__class(FreeMatchUI,'ui.hall.page.team.FreeMatchUI',_super);
		var __proto=FreeMatchUI.prototype;
		__proto.createChildren=function(){
			View.regComponent("laya.customUI.ButtonScaleI",ButtonScaleI);
			View.regComponent("view.items.MatchTeamItem3",MatchTeamItem3);
			laya.ui.Component.prototype.createChildren.call(this);
			this.loadUI("hall/page/team/FreeMatch");
		}

		return FreeMatchUI;
	})(UIBase0)


	//class ui.hall.page.team.GameTipsUI extends view.UIBase0
	var GameTipsUI=(function(_super){
		function GameTipsUI(){
			this.imgbg=null;
			this.btnKnow=null;
			this.btnCheck=null;
			GameTipsUI.__super.call(this);
		}

		__class(GameTipsUI,'ui.hall.page.team.GameTipsUI',_super);
		var __proto=GameTipsUI.prototype;
		__proto.createChildren=function(){
			View.regComponent("laya.customUI.ButtonScaleI",ButtonScaleI);
			laya.ui.Component.prototype.createChildren.call(this);
			this.loadUI("hall/page/team/GameTips");
		}

		return GameTipsUI;
	})(UIBase0)


	//class ui.hall.page.team.GroupModeUI extends view.UIBase0
	var GroupModeUI=(function(_super){
		function GroupModeUI(){
			this.btn_2=null;
			this.btn_5=null;
			this.btn_close=null;
			GroupModeUI.__super.call(this);
		}

		__class(GroupModeUI,'ui.hall.page.team.GroupModeUI',_super);
		var __proto=GroupModeUI.prototype;
		__proto.createChildren=function(){
			View.regComponent("laya.customUI.ButtonScaleI",ButtonScaleI);
			laya.ui.Component.prototype.createChildren.call(this);
			this.loadUI("hall/page/team/GroupMode");
		}

		return GroupModeUI;
	})(UIBase0)


	//class ui.hall.page.team.TeamUI extends view.UIBase0
	var TeamUI=(function(_super){
		function TeamUI(){
			this.ani1=null;
			this.imgtitme=null;
			this.btnBack=null;
			this.btnCancle=null;
			this.btnReady=null;
			this.pList=null;
			this.bottomPanel=null;
			this.btnStart=null;
			this.btnStore=null;
			this.btnIvt=null;
			this.ppLayer=null;
			this.timeVal=null;
			this.btnQx=null;
			TeamUI.__super.call(this);
		}

		__class(TeamUI,'ui.hall.page.team.TeamUI',_super);
		var __proto=TeamUI.prototype;
		__proto.createChildren=function(){
			View.regComponent("laya.customUI.ButtonScaleI",ButtonScaleI);
			View.regComponent("ui.hall.page.team.MatchTeamItem3UI",MatchTeamItem3UI);
			laya.ui.Component.prototype.createChildren.call(this);
			this.loadUI("hall/page/team/Team");
		}

		return TeamUI;
	})(UIBase0)


	//class ui.load.LoadingUI extends view.UIBase0
	var LoadingUI=(function(_super){
		function LoadingUI(){
			this.ani1=null;
			this.imgBg=null;
			this.txtTeach=null;
			this.renyiImg=null;
			this.precent=null;
			this.boxShow=null;
			this.imglogo=null;
			this.message=null;
			this.jdtBox=null;
			this.prog=null;
			this.daoTime=null;
			this.ttLayer=null;
			this.leftBox=null;
			this.lbg=null;
			this.l0=null;
			this.l1=null;
			this.l2=null;
			this.ls0=null;
			this.ls1=null;
			this.ls2=null;
			this.nl0=null;
			this.nl1=null;
			this.nl2=null;
			this.rightBox=null;
			this.rbg=null;
			this.r0=null;
			this.r1=null;
			this.r2=null;
			this.rs0=null;
			this.rs1=null;
			this.rs2=null;
			this.nr0=null;
			this.nr1=null;
			this.nr2=null;
			this.VsImg=null;
			this.msg=null;
			LoadingUI.__super.call(this);
		}

		__class(LoadingUI,'ui.load.LoadingUI',_super);
		var __proto=LoadingUI.prototype;
		__proto.createChildren=function(){
			laya.ui.Component.prototype.createChildren.call(this);
			this.loadUI("load/Loading");
		}

		return LoadingUI;
	})(UIBase0)


	//class ui.ShareRewordUI extends view.UIBase0
	var ShareRewordUI$1=(function(_super){
		function ShareRewordUI(){
			this.myBox=null;
			this.list1=null;
			ShareRewordUI.__super.call(this);
		}

		__class(ShareRewordUI,'ui.ShareRewordUI',_super,'ShareRewordUI$1');
		var __proto=ShareRewordUI.prototype;
		__proto.createChildren=function(){
			View.regComponent("ui.hall.page.activity.JitemUI",JitemUI);
			laya.ui.Component.prototype.createChildren.call(this);
			this.loadUI("ShareReword");
		}

		return ShareRewordUI;
	})(UIBase0)


	//class ui.TipsViewUI extends view.UIBase0
	var TipsViewUI=(function(_super){
		function TipsViewUI(){
			this.bg=null;
			this.myBox=null;
			this.title=null;
			this.btnYes=null;
			this.btnNo=null;
			this.btnClose=null;
			this.msg=null;
			TipsViewUI.__super.call(this);
		}

		__class(TipsViewUI,'ui.TipsViewUI',_super);
		var __proto=TipsViewUI.prototype;
		__proto.createChildren=function(){
			View.regComponent("laya.customUI.ButtonScaleI",ButtonScaleI);
			laya.ui.Component.prototype.createChildren.call(this);
			this.loadUI("TipsView");
		}

		return TipsViewUI;
	})(UIBase0)


	/**
	*...
	*@author anling
	*/
	//class view.gaming.GameInfoView extends ui.gaming.GameInfoUI
	var GameInfoView=(function(_super){
		function GameInfoView(){
			this.djs=10;
			GameInfoView.__super.call(this);
		}

		__class(GameInfoView,'view.gaming.GameInfoView',_super);
		var __proto=GameInfoView.prototype;
		/**
		*
		*@param data {score:当前积分}
		*/
		__proto.updateExp=function(num){
			this.textScore.changeText(num+"");
		}

		// 获得积分
		__proto.getScore=function(){
			return parseInt(this.textScore.text);
		}

		/**重置数据*/
		__proto.restart=function(){
			this.updateExp(0);
			this.cleanDaojishi();
		}

		__proto.cleanDaojishi=function(){
			this.lab_shuijingT.visible=false;
			this.img_shuijiT.visible=false;
			this.djs=10;
			this.timer.clear(this,this.daojishi);
		}

		__proto.showShuiJingBaoShi=function(){
			this.djs=10;
			this.timer.loop(1000,this,this.daojishi);
			this.daojishi();
		}

		__proto.daojishi=function(){
			if (this.djs <=0){
				HotPanelItem.createStrongTips(2);
				this.cleanDaojishi();
				return;
			}
			this.djs--;
			this.lab_shuijingT.changeText(this.djs+"");
			if (this.djs==3){
				HotPanelItem.createStrongTips(1);
			}
		}

		return GameInfoView;
	})(GameInfoUI)


	/**战斗内排行榜
	*...
	*@author luohuantao
	*/
	//class view.gaming.GameRankView extends ui.gaming.GameRankUI
	var GameRankView=(function(_super){
		function GameRankView(){
			this.itemLen=NaN;
			GameRankView.__super.call(this);
			this.cacheAs="normal";
			this.visible=false;
			this.btnSwitch.rotation=0;
			this.listRank.renderHandler=new Handler(this,this.listRander);
			this.normalRank.on("click",this,this.turnListVislble);
		}

		__class(GameRankView,'view.gaming.GameRankView',_super);
		var __proto=GameRankView.prototype;
		__proto.updateTitle=function(){
			this.listRank.array=[];
			this.ownItem.dataSource={num:"",name:"",score:""};
			this.title.visible=false;
			this.box_aalsdaa.visible=true;
			if (enumRoomType.nowType==enumRoomType.ROOMTYPE_QUEEN){
				this.jf.changeText("冰雪积分");
				this.js.changeText("");
			}
			else if (enumRoomType.nowType==enumRoomType.ROOMTYPE_GEM){
				this.jf.changeText("冰晶");
				this.js.changeText("");
			}
			else{
				this.jf.changeText("积分");
				this.js.changeText("击败");
			}
			if (enumRoomType.isTeam()){
				this.normalRank.x=0;
				this.normalRank.visible=true;
				this.ownItem.visible=true;;
				this.btnSwitch.visible=true;
				this.lab_title.changeText("组队模式");
			}
			else {
				this.normalRank.visible=true;
				this.ownItem.visible=true;
				this.btnSwitch.visible=true;
				this.normalRank.x=0;
				switch(enumRoomType.nowType){
					case 100:
						this.lab_title.changeText("教学模式");
						break ;
					case enumRoomType.ROOMTYPE_NONE:
						this.lab_title.changeText("");
						this.ownItem.visible=false;
						this.listTopTen.visible=false;
						this.btnSwitch.visible=false;
						break ;
					default :
						this.lab_title.changeText("自由模式");
						break ;
					}
			}
		}

		/**
		*女王模式
		*@param data
		*/
		__proto.updateQueenList=function(data){
			var arr=[];
			var listArr=data.teamRankList;
			if (listArr.length > 10)listArr.length=10;
			var listNum=listArr.length<5?listArr.length:5;
			var _data;
			var selfrank=1;
			for (var i=0;i < listNum;i++){
				_data=listArr [i];
				if (_data.id==Player.teamID){
					selfrank=i+1;
				}
				arr.push({num:i+1,id:_data.id,name:SnowUtils.cutString(_data.id+"",6),score:_data.queenScore,kills:"",teamRoleNum:_data.teammatesNum});
			}
			if (listNum < 3){
				this.thirdTag.visible=false;
				if (listNum < 2){
					this.secondTag.visible=false;
					}else {
					this.secondTag.visible=true;
				}
				}else {
				this.secondTag.visible=true;
				this.thirdTag.visible=true;
			}
			this.listRank.array=arr;
			this.ownItem.y=this.itemLen *listNum+0+this.listTopTen.y+10;
			this.updateRankOneMy({id:Player.curUID,rank:selfrank,score:data.myQueenScore,kills:""});
		}

		/**
		*钻石模式排行榜
		*@param data
		*/
		__proto.updateGemList=function(data){
			var arr=[];
			var listArr=data.teamRankList;
			if (listArr.length > 10)listArr.length=10;
			var listNum=listArr.length<5?listArr.length:5;
			var _data;
			var selfrank=1;
			for (var i=0;i < listNum;i++){
				_data=listArr [i];
				if (_data.id==Player.teamID){
					selfrank=i+1;
				}
				arr.push({num:i+1,id:_data.id,name:SnowUtils.cutString(_data.id+"",6),score:_data.gem,kills:"",teamRoleNum:_data.teammatesNum});
			}
			if (listNum < 3){
				this.thirdTag.visible=false;
				if (listNum < 2){
					this.secondTag.visible=false;
					}else {
					this.secondTag.visible=true;
				}
				}else {
				this.secondTag.visible=true;
				this.thirdTag.visible=true;
			}
			this.listRank.array=arr;
			this.chkUI();
			this.updateRankOneMy({id:Player.curUID,rank:selfrank,score:data.myGem,kills:""});
		}

		//更新排行榜
		__proto.updateRankOne=function(data){
			var arr=[];
			var listArr=data.rankList;
			var listNum=listArr.length<5?listArr.length:5;
			var _data;
			for (var i=0;i < listNum;i++){
				_data=listArr [i];
				if (enumRoomType.isTeam()){
					_data.name=(_data.name || _data.id)+"";
					if (_data.id==Player.teamID){
						data.myRank.rank=_data.rank=i+1;
					}
					arr.push({num:i+1,id:_data.id,name:SnowUtils.cutString(_data.name,6),score:_data.score,kills:_data.kills,teamRoleNum:_data.teammatesNum});
				}
				else{
					_data.name=(_data.name || MsgManager.I._nameList[_data.id])+"";
					if (!_data.name)continue ;
					arr.push({num:i+1,id:_data.id,name:SnowUtils.cutString(_data.name,6),score:_data.score,kills:_data.kills,teamRoleNum:_data.teammatesNum});
				}
			}
			if (listNum < 3){
				this.thirdTag.visible=false;
				if (listNum < 2){
					this.secondTag.visible=false;
					}else {
					this.secondTag.visible=true;
				}
				}else {
				this.secondTag.visible=true;
				this.thirdTag.visible=true;
			}
			this.listRank.array=arr;
			this.chkUI();
			if (!data.myRank)return;
			this.updateRankOneMy(data.myRank);
		}

		/**检查是否显示自己，设置UI*/
		__proto.chkUI=function(){
			if (this.listTopTen.visible && this.listRank.array){
				this.listTopTen.y=40;
				this.itemLen=(this.listRank.height-0)/ this.listRank.repeatY;
				var arrLen=this.listRank.array.length;
				var listNum=arrLen<5?arrLen:5;
				this.ownItem.y=this.itemLen *listNum+0+this.listTopTen.y;
				var a=this.itemLen *listNum+3;
				this.img_bj.height=75+(a > this.height ? this.height:a);
				}else{
				this.ownItem.y=40;
				this.img_bj.height=75;
			}
		}

		/**更新自己排行榜-大排行榜不打开的情况下服务器发送该数据*/
		__proto.updateRankOneMy=function(_data){
			_data.name=_data.name||MsgManager.I._nameList[_data.id];
			if (_data.rank <=3){
				this.ownIcon.visible=true;
				this.ownNum.visible=false;
				this.ownIcon.skin="gaming/icon_"+_data.rank+".png";
				}else {
				this.ownIcon.visible=false;
				this.ownNum.visible=true;
			}
			this.renderOwnItem({num:_data.rank,id:_data.id,name:SnowUtils.cutString(MsgManager.I._nameList[_data.id],6),score:_data.score,kills:_data.kills,teamRoleNum:_data.teammatesNum});
		}

		// Player.curUser && (Player.curUser.jifen=_data.score);
		__proto.renderOwnItem=function(obj){
			var name=this.ownItem.getChildByName("name0");
			var score=this.ownItem.getChildByName("score0");
			var kills=this.ownItem.getChildByName("kills");
			var team_icon=this.ownItem.getChildByName("team_icon");
			var team_name=this.ownItem.getChildByName("team_name");
			name.changeText(obj.name);
			this.ownNum.changeText(obj.num);
			score.changeText(SnowUtils.setIntToThousandth(obj.score));
			kills.changeText(obj.kills);
			if (enumRoomType.isTeam()){
				name.visible=false;
				if (Player.curUser){
					var cfg=ConfigData.teamDataCfg [Player.curUser.teamId];
					team_icon.skin=cfg.icon;
					team_name.changeText(obj.name);
					team_name.visible=true;
					team_icon.visible=true;
					team_name.color="#fffd38";
				}
				}else{
				name.visible=true;
				team_name.visible=team_icon.visible=false;
			}
			score.color=name.color=kills.color="#fffd38";
		}

		// 显示/隐藏前十排行榜
		__proto.turnListVislble=function(evt,flag){
			(flag===void 0)&& (flag=false);
			!flag && (this.listTopTen.visible=!this.listTopTen.visible);
			SnowUtils.setDataInLocalStorage("sxCMsgChgRank"+RoleCenter.I.userId,this.listTopTen.visible+"");
			if (this.listTopTen.visible){
				this.btnSwitch.rotation=-180;
				}else {
				this.btnSwitch.rotation=0;
			}
			this.chkUI();
		}

		__proto.listRander=function(item,index){
			if (!item.dataSource)return;
			var obj=item.dataSource;
			var name=item.getChildByName("name0");
			var num=item.getChildByName("num0");
			var score=item.getChildByName("score0");
			var kills=item.getChildByName("kills");
			var team_icon=item.getChildByName("team_icon");
			var team_name=item.getChildByName("team_name");
			if (obj.name !="undef..")name.changeText(obj.name);
			num.changeText(obj.num);
			score.changeText(SnowUtils.setIntToThousandth(obj.score));
			kills.changeText(obj.kills);
			if (enumRoomType.isTeam()){
				name.visible=false;
				var cfg=ConfigData.teamDataCfg [obj.id];
				team_icon.skin=cfg.icon;
				team_name.changeText(cfg.name+"("+obj.teamRoleNum+")");
				team_name.visible=true;
				team_icon.visible=true;
				if (Player.curUser&&Player.curUser.teamId==obj.id){
					name.color=team_name.color=num.color=score.color=kills.color="#fffd38";
				}
				else{
					name.color=team_name.color=num.color=score.color=kills.color="#ffffff";
				}
				}else{
				name.visible=true;
				team_name.visible=team_icon.visible=false;
			}
			if (index < 3){
				num.visible=false;
			}
		}

		__proto.restart=function(){
			var val=SnowUtils.getDataInLocalStorage("sxCMsgChgRank"+RoleCenter.I.userId);
			if (val=="true"){
				this.listTopTen.visible=true;
				this.btnSwitch.rotation=-180;
			}
			else if(val=="false"){
				this.listTopTen.visible=false;
				this.btnSwitch.rotation=0;
			}
			else{
				this.listTopTen.visible=true;
				this.btnSwitch.rotation=-180;
			}
			this.turnListVislble(null,true);
		}

		GameRankView.TOPANDBOTTOM=0;
		GameRankView.SELFCOLOR="#fffd38";
		GameRankView.DEFAULTCOLOR="#ffffff";
		return GameRankView;
	})(GameRankUI)


	/**view.gaming.MiniMapView
	*...
	*@author luohuantao
	*/
	//class view.gaming.MiniMapView extends ui.gaming.MiniMapUI
	var MiniMapView=(function(_super){
		var MiniPo;
		function MiniMapView(){
			this.miniPoObj=null;
			this.selfIn=false;
			this.texture_1=null;
			this.texture_2=null;
			this.texture_3=null;
			this.texture_n=null;
			this.texture_self=null;
			this.texture_foe=null;
			this.texture_strawberry=null;
			this.texture_nvKing=null;
			this.texture_Bear=null;
			this.texture_skill=null;
			this.miniMapScaleX=NaN;
			this.miniMapScaleY=NaN;
			this.__top=0;
			this.__left=0;
			this.needSetHgIcon=false;
			this.rankList=null;
			this.b=false;
			this.posArr=[];
			this.posArrN=[];
			MiniMapView.__super.call(this);
			MiniMapView.HGObjs=[];
		}

		__class(MiniMapView,'view.gaming.MiniMapView',_super);
		var __proto=MiniMapView.prototype;
		__proto.init=function(){
			this.rankList=null;
			var mapId=Player._curMapSourceId;
			if (mapId>=3||mapId<1){
				this.miniImage.skin="map/mini"+mapId+".png";
			}
			else{
				this.miniImage.skin="map/mini"+mapId+".png";
			}
			switch(enumRoomType.nowType){
				case enumRoomType.ROOMTYPE_FREE:
					this.needSetHgIcon=true;
					break ;
				default :
					this.needSetHgIcon=false;
				}
			Laya.timer.loop(100,this ,this._init);
			Laya.timer.loop(1000,this,this.upDateRoleByMsgLoop);
		}

		__proto._init=function(){
			if (!Player.isStartGame)return;
			Laya.timer.clear(this,this._init);
			this.miniPoObj=[];
			this.texture_foe=Laya.loader.getRes("gaming/icon_foe.png");
			this.texture_skill=Laya.loader.getRes("gaming/icon_box.png");
			for (var i=0;i <=5;i++){
				var temp=MiniMapView.teamData[i]=[];
				temp[0]=Laya.loader.getRes("gaming/icon_n"+i+".png");
				temp[1]=Laya.loader.getRes("gaming/icon_self"+i+".png");
			}
			if (!this.texture_1){
				this.texture_1=Laya.loader.getRes("gaming/icon_1.png");
				this.texture_2=Laya.loader.getRes("gaming/icon_2.png");
				this.texture_3=Laya.loader.getRes("gaming/icon_3.png");
				this.texture_n=Laya.loader.getRes("gaming/icon_n0.png");
				this.texture_self=Laya.loader.getRes("gaming/icon_self0.png");
				this.texture_strawberry=Laya.loader.getRes("gaming/strawberry.png");
				this.texture_nvKing=Laya.loader.getRes("gaming/nvwanghuangguan.png");
				this.texture_Bear=Laya.loader.getRes("gaming/bear.png");
				MiniMapView.HGObjs[0]={tex:this.texture_1,owner:null};
				MiniMapView.HGObjs[1]={tex:this.texture_2,owner:null};
				MiniMapView.HGObjs[2]={tex:this.texture_3,owner:null};
				MiniMapView.HGObjs[3]={tex:this.texture_foe,owner:null};
			}
			this.miniPoObj[0]={img:this.texture_1,x:0,y:0,show:false};
			this.miniPoObj[1]={img:this.texture_2,x:0,y:0,show:false};
			this.miniPoObj[2]={img:this.texture_3,x:0,y:0,show:false};
			this.miniPoObj[4]={img:this.texture_self,x:0,y:0,show:false};
			this.miniPoObj[3]={img:this.texture_foe,x:0,y:0,show:false};
			GameSocket.I.on("updateMinMap",this,this.upDateRoleByMsg);
			var mapData=ConfigData.mapData;
			this.__top=mapData.top;
			this.__left=mapData.left;
			var _ww=mapData.width-mapData.right-mapData.left;
			var _hh=mapData.height-mapData.bottom-mapData.top;
			this.miniMapScaleX=this.box_.width / _ww;
			this.miniMapScaleY=this.box_.height / _hh;
		}

		// Teach.isTeach && Laya.timer.loop(100,this,onUpdataRole);
		__proto.initMiniPoObj=function(i,o){
			if (!o)return;
			if (i==4)this.selfIn=true;
			this.miniPoObj[i].show=true;
			var tex=this.miniPoObj[i].img;
			this.miniPoObj[i].x=Math.floor((o.x-this.__left)*this.miniMapScaleX)-tex.sourceWidth / 2;
			this.miniPoObj[i].y=Math.floor((o.y-this.__top)*this.miniMapScaleY)-tex.sourceHeight / 2;
		}

		__proto.upDateRoleByMsg=function(rankList,b){
			(b===void 0)&& (b=true);
			this.rankList=rankList;
			this.b=b;
		}

		__proto.upDateRoleByMsgLoop=function(){
			if (!this.miniPoObj||!this.rankList)return;
			var i=0,sn=0,t=0;
			var o;
			var teamid=0;
			this.box_.graphics.clear();
			this.selfIn=false;
			var foe=false;
			for (i=0,sn=this.miniPoObj.length;i <sn;i++){
				this.miniPoObj[i].show=false;
			}
			if (!this.visible)return;
			var arr=this.rankList;
			this.posArr.length=0;
			this.posArrN.length=0;
			var posObj={};
			for (i=0,sn=arr.length;i<sn;i++){
				o=Player.I.netObjects [arr[i].id];
				if (o && !o.destroyed){
					var grass=o.isHide && o.alpha !=0.5;
					teamid=this.b?0:o.teamId;
					if (o.uid==Player.curUID){
						if (!MiniMapView.teamData[teamid]){
							console.warn("o.teamId"+teamid);
							continue ;
						}
						this.miniPoObj[4].img=MiniMapView.teamData[teamid][1];
						this.initMiniPoObj(4,o);
						if (t < 3&&this.needSetHgIcon){
							o.setHgIcon(MiniMapView.HGObjs[t]);
						}
						t++;
						continue ;
					}
					else if (Player.curUser&&Player.curBeKillUid==o.uid){
						foe=true;
						t++;
						if (grass)continue ;
						this.initMiniPoObj(3,o);
						continue ;
					}
					if ((this.b || teamid !=Player.teamID)&& grass){
						t++;
						continue ;
					}
					switch(t){
						case 0:
							this.initMiniPoObj(0,o);
							break ;
						case 1:
							this.initMiniPoObj(1,o);
							break ;
						case 2:
							this.initMiniPoObj(2,o);
							break ;
						default :
							if (o.hasFallSkill){
								this.getPo(i,o.uid,Math.floor((o.x-this.__left)*this.miniMapScaleX),Math.floor((o.y-this.__top)*this.miniMapScaleX),this.posArrN);
							}
							else{
								if(this.b)
									this.getPo(i,o.uid,Math.floor((o.x-this.__left)*this.miniMapScaleX),Math.floor((o.y-this.__top)*this.miniMapScaleX),this.posArr);
								else
								this.getPoEx(o.teamId,Math.floor((o.x-this.__left)*this.miniMapScaleY),Math.floor((o.y-this.__top)*this.miniMapScaleY),posObj);
							}
							break ;
						}
					t++;
				}
				else{}
			}
			if(this.b)
				this.box_.graphics.drawTextures(this.texture_n,this.posArr);
			else{
				for (var ts in posObj){
					this.box_.graphics.drawTextures(MiniMapView.teamData[ts][0],posObj[ts]);
				}
			}
			this.box_.graphics.drawTextures(this.texture_skill,this.posArrN);
			if (!this.selfIn){
				o=Player.curUser;
				if (o && !o.destroyed){
					teamid=this.b?0:o.teamId;
					if (!MiniMapView.teamData[teamid]){
						console.warn("o.teamId"+teamid);
					}
					else{
						this.miniPoObj[4].img=MiniMapView.teamData[teamid][1];
						this.initMiniPoObj(4,o);
					}
				}
			};
			var diebyuid=Player.curBeKillUid;
			if (!foe && Player.curUser && diebyuid){
				foe=true;
				var foeObj=Player.I.netObjects [diebyuid];
				if (foeObj&&!(foeObj.isHide && foeObj.alpha !=0.5)){
					this.initMiniPoObj(3,foeObj);
				}
			}
			for (i=0,sn=this.miniPoObj.length;i < sn;i++){
				var d=this.miniPoObj[i];
				if (d.show){
					this.box_.graphics.drawTexture(d.img,d.x,d.y);
				}
			};
			var bear=Player.curBear;
			if (bear&&!(bear.isHide && bear.alpha !=0.5)){
				var tx=0|((bear.x-this.__left)*this.miniMapScaleX)-this.texture_Bear.sourceWidth / 2;
				var ty=0|((bear.y-this.__top)*this.miniMapScaleY)-this.texture_Bear.sourceHeight / 2;
				this.box_.graphics.drawTexture(this.texture_Bear,tx,ty);
			}
		}

		/**
		*显示女王
		*/
		__proto.showQueen=function(){
			for (var id in ActorObject.QuestList){
				var queen=Player.I.roleObjectsBySelfId[ActorObject.QuestList[id]];
				if (queen&&queen!=Player.curUser){
					var tx=0|((queen.x-this.__left)*this.miniMapScaleX)-this.texture_nvKing.sourceWidth / 2;
					var ty=0|((queen.y-this.__top)*this.miniMapScaleY)-this.texture_nvKing.sourceHeight / 2;
					this.box_.graphics.drawTexture(this.texture_nvKing,tx,ty);
				}
			}
		}

		__proto.getPo=function(index,_uid,__xx,__yy,posArr){
			if (_uid==Player.curUID){
				this.box_.graphics.drawTexture(this.texture_self,__xx-this.texture_self.sourceWidth / 2,__yy-this.texture_self.sourceHeight / 2);
			}
			else {
				posArr.push(__xx-this.texture_n.sourceWidth / 2);
				posArr.push(__yy-this.texture_n.sourceHeight / 2);
			}
		}

		__proto.getPoEx=function(teamId,__xx,__yy,posObj){
			var o=MiniMapView.teamData[teamId];
			if (!o)return;
			var temp=posObj[teamId] || (posObj[teamId]=[]);
			temp.push(__xx-o[0].sourceWidth / 2);
			temp.push(__yy-o[0].sourceHeight / 2);
		}

		__proto.restart=function(){
			Laya.timer.clear(this,this._init);
			Laya.timer.clear(this,this.upDateRoleByMsgLoop);
			this.rankList=null;
			this.needSetHgIcon=false;
		}

		MiniMapView.img_1="gaming/icon_1.png";
		MiniMapView.img_2="gaming/icon_2.png";
		MiniMapView.img_3="gaming/icon_3.png";
		MiniMapView.img_n="gaming/icon_n0.png";
		MiniMapView.img_skill="gaming/icon_box.png";
		MiniMapView.img_self="gaming/icon_self0.png";
		MiniMapView.img_foe="gaming/icon_foe.png";
		MiniMapView.img_strawberry="gaming/strawberry.png";
		MiniMapView.img_nvKing="gaming/nvwanghuangguan.png";
		MiniMapView.img_Bear="gaming/bear.png";
		MiniMapView.THREE=0;
		MiniMapView.SECOND=1;
		MiniMapView.FIRST=2;
		MiniMapView.SELF=4;
		MiniMapView.FOE=3;
		MiniMapView.QUEEN=5;
		MiniMapView.HGObjs=null
		MiniMapView.ICONN_PNG="gaming/icon_n";
		MiniMapView.ICON_SELFPNG="gaming/icon_self";
		MiniMapView.ICON_QUEENPNG="gaming/queen";
		MiniMapView.MAXTEAM=5;
		MiniMapView.teamData={};
		MiniMapView.__init$=function(){
			//class MiniPo
			MiniPo=(function(){
				function MiniPo(){
					this.uid=0;
					this.x=0;
					this.y=0;
				}
				__class(MiniPo,'');
				return MiniPo;
			})()
		}

		return MiniMapView;
	})(MiniMapUI)


	//class view.gaming.PlayFontClip extends ui.gaming.PlayFontClipViewUI
	var PlayFontClip=(function(_super){
		function PlayFontClip(){
			PlayFontClip.__super.call(this);
		}

		__class(PlayFontClip,'view.gaming.PlayFontClip',_super);
		var __proto=PlayFontClip.prototype;
		/**
		*初始化显示数据
		*@param type 1减血；2加血
		*@param value 血量值
		*@param self 是否是自己
		*/
		__proto.init=function(type,value,self){
			this.fontClipTxt.value=Math.abs(value)+"";
			if (self==0){
				this.fontClipTxt.scale(0.7,0.7);
			}
			else{
				this.fontClipTxt.scale(1,1);
			}
			if(type==1){
				this.fontClipTxt.skin="gaming/fontclip_jian.png";
				}else if (type==0){
				this.fontClipTxt.skin="gaming/fontclip_blood.png";
			}
			else{
				this.fontClipTxt.skin="gaming/fontclip_add.png";
			}
		}

		return PlayFontClip;
	})(PlayFontClipViewUI)


	/**view.items.Item2
	*带背景和带名字的高配版物品模版
	*@author lifei
	*/
	//class view.items.Item2 extends ui.hall.items.Item2UI
	var Item2=(function(_super){
		function Item2(){
			Item2.__super.call(this);
			this.iDt=new WpData();
		}

		__class(Item2,'view.items.Item2',_super);
		var __proto=Item2.prototype;
		/**
		*
		*@param id icon的id
		*@param num 数量
		*@param bgSkin 背景图片默认为半透明黑色背景
		*@param numColor 数量文字颜色 默认绿色
		*@param nameColor 名字文字颜色 默认白色
		*/
		__proto.init=function(id,num,bgSkin,nameColor){
			(bgSkin===void 0)&& (bgSkin="common/item_bg3.png");
			(nameColor===void 0)&& (nameColor="#bff7ff");
			this.img_icon.skin=SnowUtils.itemIconUrl(id+"");
			var itemData=ConfigData.itemData[id];
			var dayNum=Math.floor(itemData.deadline / 24);
			this.ts.visible=false;
			if(dayNum){
				this.ts.visible=true;
				this.ts.skin=dayNum==1 ? "common/one.png" :"common/three.png";
			}
			if(itemData.type==1 || itemData.type==100){
				this.img_icon.skin=SnowUtils.itemIconUrl("db_"+itemData.defId);
				this.ts.visible=true;
				this.ts.skin="common/yj.png";
				}else if(itemData.type==7 || itemData.type==700){
				this.img_icon.skin=SnowUtils.itemIconUrl("db_"+itemData.communalId[0]);
			}
			if(num==0){
				this.lab_num.visible=false;
				}else{
				this.lab_num.visible=true;
				this.lab_num.value=(num+"");
			}
			this.iBg.skin=bgSkin;
			this.lab_name.color=nameColor;
			var wpDt=SnowUtils.itemData(id);
			if (wpDt){
				this.lab_name.changeText(SnowUtils.geti18nStr(ConfigData.thingName[id]));
				this.on("mousedown",this,this.onMouseDown,[id]);
			}
			else
			Log_Test.error("物品不存在！+id:"+id);
		}

		/**
		*按下
		*/
		__proto.onMouseDown=function(id){
			WpTips.I.onShow(this,id);
		}

		return Item2;
	})(Item2UI)


	/**
	*...
	*@author ...
	*/
	//class view.items.Jitem extends ui.hall.page.activity.JitemUI
	var Jitem=(function(_super){
		function Jitem(){
			Jitem.__super.call(this);
		}

		__class(Jitem,'view.items.Jitem',_super);
		var __proto=Jitem.prototype;
		/**
		*按下
		*/
		__proto.onMouseDown=function(id){
			WpTips.I.onShow(this,id);
		}

		__getset(0,__proto,'dataSource',_super.prototype._$get_dataSource,function(value){
			_super.prototype._$set_dataSource.call(this,value);
			if (!value)
				return;
			this.myIcon.skin=value.skin;
			this.myLabel.text=value.str;
			var id=value.dtId;
			var wpDt=SnowUtils.itemData(id);
			if (wpDt){
				this.on("mousedown",this,this.onMouseDown,[id]);
			}
			else
			Log_Test.error("物品不存在！+id:"+id);
		});

		return Jitem;
	})(JitemUI)


	/**
	*...
	*@author
	*/
	//class view.page.gaming.MainSkillBox extends ui.gaming.mainAttackUI
	var MainSkillBox=(function(_super){
		function MainSkillBox(){
			this.index=-1;
			this.r=65;
			this.beginTime=0;
			this.duration=0;
			this.cd=0;
			this.offx=40;
			this.offy=80;
			MainSkillBox.__super.call(this);
			this.maskSkill0.visible=false;
		}

		__class(MainSkillBox,'view.page.gaming.MainSkillBox',_super);
		var __proto=MainSkillBox.prototype;
		Laya.imps(__proto,{"view.page.gaming.ISkillAttack":true})
		/**
		*蓄力按钮特效
		*/
		__proto.addXuliEff=function(){
			this.skillXl.visible=true;
			this.skillXl.play();
		}

		/**
		*取消蓄力特效
		*/
		__proto.removeXuliEff=function(){
			this.skillXl.visible=false;
			this.skillXl.stop();
		}

		__proto.onDown=function(){
			this.skillButt.visible=true;
			this.skillButt.play(1,true);
		}

		__proto.onUp=function(){
			this.skillButt.stop();
			this.skillButt.visible=false;
		}

		/*INTERFACE view.page.gaming.ISkillAttack */
		__proto.emptyClck=function(){}
		__proto.removeBtnState=function(){
			this.mouseEnabled=true;
			this.clipAttack.mouseEnabled=true;
			(this.clipAttack).isEmpty=true;
			(this.clipAttack).isXuli=false;
		}

		__proto.beginCD=function(beginTime,duration,cd,delay){
			this.beginTime=beginTime;
			this.duration=duration;
			this.cd=cd;
			Laya.timer.loop(delay,this,this.loopcd);
			this.loopcd();
		}

		__proto.endCD=function(){
			this.maskSkill0.graphics.clear();
			Laya.timer.clear(this,this.loopcd);
		}

		__proto.loopcd=function(){
			var g;
			var now=Laya.timer.currTimer;
			var btn=this.clipAttack;
			var i=0;
			var t;
			var lv=NaN;
			if (this.beginTime !=this.duration){
				if (now < this.duration){
				}
				else{
					btn.mouseEnabled=true;
					btn.event("duration");
					this.endCD();
				}
			}
			else{
				if(now<this.cd){
					{
						this.graphics.clear();
						g=this.maskSkill0.graphics;
						this.maskSkill0.scaleX=-1;
						g.clear();
						lv=(now-this.beginTime)/ (this.cd-this.beginTime);
						i=0 | ((1-lv)*72);
						t=Laya.loader.getRes("skillCd/"+i+".png");
						if(this.r==65)
							g.drawTexture(t,-this.r *2+6,6.5,(this.r-7)*2,(this.r-7)*2,null,1);
						else if (this.r==39)
						g.drawTexture(t,-this.r *2+14,-2,(this.r-7)*2,(this.r-7)*2,null,1);
						else
						g.drawTexture(t,-this.r *2+7,3,(this.r-5)*2,(this.r-5)*2,null,1);
					}
				}
				else{
					btn.mouseEnabled=true;
					this.endCD();
				}
			}
		}

		/**
		*初始化按钮点击事件
		*@param index
		*@param isDoubleContrl
		*/
		__proto.initSKillButton=function(index,isDoubleContrl,list){
			var btn=this.clipAttack;
			if (this.index==index && (btn).isDobuleContrl==isDoubleContrl){
				return;
			}
			this.index=index;
			list[index]=btn;
			SkillButtonUtils.initSKillButton(this,btn,isDoubleContrl);
		}

		__proto._doubleContrl=function(checkMove,e){
			this.onDown();
			if ((this.clipAttack).isEmpty){
				this.emptyClck();
				return;
			}
			this._checkxuli(false,e);
		}

		__proto._checkxuli=function(checkMove,e){
			SkillButtonUtils._checkxuli(this,this.clipAttack,this.index,checkMove,e);
		}

		/**
		*鼠标抬起
		*@param e
		*/
		__proto.onButtonUp=function(e){
			Laya.stage.off("mouseup",this,this.overMouseUp);
			SkillButtonUtils.onButtonUp(this,this.clipAttack,e);
		}

		/*INTERFACE view.page.gaming.ISkillAttack */
		__proto.calRadius=function(){
			return GamingView.I.gameCtrl.attackCtrl.getRadiu();
		}

		/*INTERFACE view.page.gaming.ISkillAttack */
		__proto.overMouseUp=function(edTouchID,eu){
			if (!System.ISMOBILE || (edTouchID==eu.touchId)){
				this.onButtonUp(eu);
			}
		}

		__proto.getStyle=function(){
			this._style===Style.EMPTY && (this._style=new Style());
			return this._style;
		}

		return MainSkillBox;
	})(mainAttackUI)


	/**
	*拾取雪堆
	*@author
	*/
	//class view.page.gaming.GetSnow extends ui.gaming.skillboxUI
	var GetSnow=(function(_super){
		function GetSnow(){
			this.canget=false;
			GetSnow.__super.call(this);
			this.btnskill.skin="gaming/getSnow.png";
			this.skillNum.visible=false;
			this.on("click",this,this.pickUpSnow);
			this.on("mousedown",this,this.onDown);
			this.on("mouseup",this,this.onUp);
			this.on("mouseout",this,this.onUp);
		}

		__class(GetSnow,'view.page.gaming.GetSnow',_super);
		var __proto=GetSnow.prototype;
		/**
		*清空状态
		*/
		__proto.clearState=function(){
			this.mouseEnabled=true;
			this.canget=true;
		}

		/**
		*是否可以拾取
		*@param b
		*/
		__proto.enablePick=function(b){
			var mask=(this.btnskill.getChildByName("maskSkill"));
			var g=mask.graphics;
			if (b){
				this.canget=true;
				g.clear();
			}
			else{
				this.canget=false;
				var t=Laya.loader.getRes("skillCd/72.png");
				mask.scaleX=-1;
				mask.alpha=0.6;
				var r=50;
				g.clear();
				g.drawTexture(t,-r *2+7,3,(r-5)*2,(r-5)*2,null,1);
			}
		}

		/**
		*捡雪花
		*@param e
		*/
		__proto.pickUpSnow=function(e){
			if (this.canget){
				var msg=MsgTemplate.createWithClass(CMsgPickUpSnow);
				GameSocket.sendClientMsg(msg);
				msg.release();
			}
		}

		__proto.onDown=function(){
			this.skillButt.visible=true;
			this.skillButt.play(1,true);
		}

		__proto.onUp=function(){
			this.skillButt.stop();
			this.skillButt.visible=false;
		}

		return GetSnow;
	})(skillboxUI)


	/**
	*技能按钮相关
	*@author
	*/
	//class view.page.gaming.SkillBox extends ui.gaming.skillboxUI
	var SkillBox=(function(_super){
		function SkillBox(){
			this.skillFlag=false;
			this.beginTime=0;
			this.duration=0;
			this.cd=0;
			this.index=-1;
			this.offx=NaN;
			this.offy=NaN;
			this.r=50;
			this.topMask=null;
			SkillBox.__super.call(this);
			this.daoword=new WordText();
			this.topMask=this.btnskill.getChildByName("topmaskSkill");
			this.on("mouseout",this,this.onUp);
		}

		__class(SkillBox,'view.page.gaming.SkillBox',_super);
		var __proto=SkillBox.prototype;
		Laya.imps(__proto,{"view.page.gaming.ISkillAttack":true})
		/**
		*cd函数
		*/
		__proto.loopcd=function(){
			var g;
			var now=Laya.timer.currTimer;
			var beforeMask=this.maskSkill;
			var top=this.topMask;
			var btn=this.btnskill;
			var t;
			var i=0;
			var lv=NaN;
			if (this.beginTime !=this.duration){
				if (now < this.duration){
					g=beforeMask.graphics;
					beforeMask.scaleX=-1
					g.clear();
					lv=(now-this.beginTime)/ (this.duration-this.beginTime);
					i=0|(1-lv)*72
					t=Laya.loader.getRes("skillCd/"+i+".png");
					if(this.r==65)
						g.drawTexture(t,-this.r *2+6,6.5,(this.r-7)*2,(this.r-7)*2,null,1);
					else
					g.drawTexture(t,-this.r *2+7.5,5,(this.r-7)*2,(this.r-7)*2,null,1);
					if (top){
						var dao=(0 | (this.duration-now)/ 1000)+"";
						if (this.daoword.toString()!=dao){
							this.daoword.setText(dao);
							top.graphics.clear();
							top.graphics.fillText(this.daoword,48,20,"bold 50px Arial","#ffffff","center");
						}
					}
					this.skillFlag=true;
				}
				else{
					btn.mouseEnabled=true;
					btn.event("duration");
					this.endCD();
				}
			}
			else{
				if(now<this.cd){
					{
						this.graphics.clear();
						g=beforeMask.graphics;
						beforeMask.scaleX=-1;
						g.clear();
						lv=(now-this.beginTime)/ (this.cd-this.beginTime);
						i=0 | ((1-lv)*72);
						t=Laya.loader.getRes("skillCd/"+i+".png");
						if(this.r==65)
							g.drawTexture(t,-this.r *2+6,6.5,(this.r-7)*2,(this.r-7)*2,null,1);
						else if (this.r==39)
						g.drawTexture(t,-this.r *2+14,-2,(this.r-7)*2,(this.r-7)*2,null,1);
						else
						g.drawTexture(t,-this.r *2+7,3,(this.r-5)*2,(this.r-5)*2,null,1);
					}
					this.skillFlag=true;
				}
				else{
					this.skillFlag=false;
					this.skillcf.visible=false;
					btn.mouseEnabled=true;
					this.endCD();
				}
			}
		}

		/**
		*开始CD
		*/
		__proto.beginCD=function(beginTime,duration,cd,delay){
			this.beginTime=beginTime;
			this.duration=duration;
			this.cd=cd;
			this.skillcf.visible=false;
			Laya.timer.loop(delay,this,this.loopcd);
			this.loopcd();
		}

		/**
		*结束CD
		*/
		__proto.endCD=function(){
			this.maskSkill.graphics.clear();
			this.topMask.graphics.clear();
			Laya.timer.clear(this,this.loopcd);
		}

		/**
		*重置技能按钮状态
		*/
		__proto.removeBtnState=function(){
			this.mouseEnabled=true;
			var skillNum=this.btnskill.getChildByName("skillNum");
			this.btnskill.mouseEnabled=true;
			if (skillNum){
				skillNum.visible=false;
				this.btnskill.skin="gaming/imgnot.png";
			}
			(this.btnskill).isEmpty=true;
			(this.btnskill).isXuli=false;
			this.skillcf.visible=false;
		}

		/**
		*充能替换成x10
		*/
		__proto.changeSkillText=function(){
			var txt=this.btnskill.getChildByName("skillNum");
			if (txt){
				txt.visible=true;
			}
		}

		/**
		*初始化按钮点击事件
		*@param index
		*@param isDoubleContrl
		*/
		__proto.initSKillButton=function(index,isDoubleContrl,list){
			var btn=this.btnskill;
			if (this.index==index && (btn).isDobuleContrl==isDoubleContrl){
				return;
			}
			if (index==2){
				this.offx=30;
				this.offy=70;
			}
			else if (index==1){
				this.offx=70;
				this.offy=70;
			}
			this.index=index;
			list[index]=this.btnskill;
			SkillButtonUtils.initSKillButton(this,this.btnskill,isDoubleContrl);
		}

		__proto._doubleContrl=function(checkMove,e){
			this.onDown();
			if ((this.btnskill).isEmpty){
				this.emptyClck();
				return;
			}
			this._checkxuli(false,e);
		}

		__proto._checkxuli=function(checkMove,e){
			SkillButtonUtils._checkxuli(this,this.btnskill,this.index,checkMove,e);
		}

		/**
		*鼠标抬起
		*@param e
		*/
		__proto.onButtonUp=function(e){
			Laya.stage.off("mouseup",this,this.overMouseUp);
			SkillButtonUtils.onButtonUp(this,this.btnskill,e);
		}

		__proto.emptyClck=function(){}
		//showMessge("获取技能",3000);
		__proto.showMessge=function(txt,time){
			var box_skillTip=this.btnskill.getChildByName("box_skillTip");
			var lab_skillTip=box_skillTip.getChildByName("lab_skillTip");
			lab_skillTip.changeText(txt);
			box_skillTip.visible=false;
			this.timer.once(time,this,hideTip=function(box){box.visible=false;},[box_skillTip]);
		}

		__proto.onDown=function(){
			this.skillButt.visible=true;
			this.skillButt.play(1,true);
		}

		__proto.onUp=function(){
			this.skillButt.stop();
			this.skillButt.visible=false;
		}

		__proto.miniCD=function(cdDelta){
			var tcd=this.cd-cdDelta;
			if (Laya.timer.currTimer > tcd){
				tcd=Laya.timer.currTimer;
			}
			this.cd=tcd;
		}

		/*INTERFACE view.page.gaming.ISkillAttack */
		__proto.calRadius=function(){
			return GamingView.I.gameCtrl.attackCtrl.getRadiu();
		}

		/*INTERFACE view.page.gaming.ISkillAttack */
		__proto.overMouseUp=function(edTouchID,eu){
			if (!System.ISMOBILE || (edTouchID==eu.touchId)){
				this.onButtonUp(eu);
			}
		}

		SkillBox.bgStr="gaming/imgnot.png";
		return SkillBox;
	})(skillboxUI)


	/**
	*...
	*@author lifei
	*/
	//class view.page.dwIcon extends ui.hall.page.roomList.dwIconUI
	var dwIcon=(function(_super){
		function dwIcon(){
			dwIcon.__super.call(this);
		}

		__class(dwIcon,'view.page.dwIcon',_super);
		var __proto=dwIcon.prototype;
		__proto.setVal=function(star){
			var dt;
			if (star >=1000 && false){
				if (star > 2200)
					dt=ConfigData.duanweiCfgByID[2200];
				else
				dt=ConfigData.duanweiCfgByID[star];
			}
			else{
				if (star > dwIcon.MAX_STAR)
					dt=ConfigData.duanweiCfgByStar[dwIcon.MAX_STAR];
				else
				dt=ConfigData.duanweiCfgByStar[star];
			}
			if (!dt){
				Log_Test.error("id或star不正确");
				return;
			}
			this.dwBg.skin="common/hz_"+dt.rankLv+".png";
			this.dwNum.value=Math.floor((dt.id % 100)/ 10)+"";
			if (dt.starReq==dwIcon.MAX_STAR)
				this.dwNum.visible=false;
			else
			this.dwNum.visible=true;
		}

		/**数据表中最大星星数**/
		__getset(1,dwIcon,'MAX_STAR',function(){
			return Object.keys(ConfigData.duanweiCfgByID).length-1;
		},ui.hall.page.roomList.dwIconUI._$SET_MAX_STAR);

		dwIcon.MAX_ID=2200;
		return dwIcon;
	})(dwIconUI)


	/**
	*...
	*@author ...
	*/
	//class view.items.MatchTeamItem3 extends ui.hall.page.team.MatchTeamItem3UI
	var MatchTeamItem3=(function(_super){
		function MatchTeamItem3(){
			MatchTeamItem3.__super.call(this);
			this.btnChangeOther.on("click",this,this.onBtnChange);
			this.btnDelete.on("click",this,this.onBtnDelete);
			this.chgHero.on("click",this,this.onChgHero)
		}

		__class(MatchTeamItem3,'view.items.MatchTeamItem3',_super);
		var __proto=MatchTeamItem3.prototype;
		__proto.onChgHero=function(){
			HeroCardView.onShow();
		}

		__proto.onSearchData=function(value){
			if(this.dataSource&&value&&this.dataSource.userId==value.targetId){
				if (value.userBasicData){
					if (value.userBasicData.Avtor==1)
						value.userBasicData.Avtor=36;
					this.imgHead.skin=HallUtil.getHeadIcon(value.userBasicData);
					this.Avtor1.skin=SnowUtils.roleHalfUrlNew2(value.userBasicData.Avtor);
					var index=0;
					if(FreeMatch.freeMatchData.userList_1.indexOf(this.dataSource.userId)!=-1){
						index=1;
					}
					if(FreeMatch.freeMatchData.userList_2.indexOf(this.dataSource.userId)!=-1){
						index=2;
					}
					FreeMatch["uAvtor"+index][this.dataSource.userId]=value.userBasicData.Avtor;
					SnowUtils.setDataInLocalStorage(RoleCenter.I.userId+"uAvtor"+index,FreeMatch["uAvtor"+index]);
					var arr=SnowUtils.deComposeAvatar(value.userBasicData.Avtor||1);
					if(!arr || arr.length <=0){
						}else{
						this.uName.skin=SnowUtils.itemHalfUrlNew2(arr[0]+"_n");
					}
				}
				else
				this.imgHead.skin=null;
			}
		}

		/**
		*更新其他玩家基础信息
		*@param dat
		*
		*/
		__proto.onOtherUserBasicdataChange=function(dat){
			if(this.dataSource && this.dataSource.userId !=dat.playerUid){
				HallApp.searchByUId(dat.playerUid);
			}
		}

		/**
		*刷新人物数据
		*
		*/
		__proto.onUserBasicDataChg=function(){
			var myBasicData=NotifyCenter.I.Query("on_BasicDataChg");
			if (this.dataSource && this.dataSource.userId==RoleCenter.I.userId){
				this.imgHead.skin=HallUtil.getHeadIcon(myBasicData);
				this.Avtor1.skin=SnowUtils.roleHalfUrlNew2(myBasicData.Avtor);
				var index=0;
				if(FreeMatch.freeMatchData.userList_1.indexOf(this.dataSource.userId)!=-1){
					index=1;
				}
				if(FreeMatch.freeMatchData.userList_2.indexOf(this.dataSource.userId)!=-1){
					index=2;
				}
				FreeMatch["uAvtor"+index][this.dataSource.userId]=myBasicData.Avtor;
				SnowUtils.setDataInLocalStorage(RoleCenter.I.userId+"uAvtor"+index,FreeMatch["uAvtor"+index]);
				var arr=SnowUtils.deComposeAvatar(myBasicData.Avtor||1);
				if(!arr || arr.length <=0){
					}else{
					this.uName.skin=SnowUtils.itemHalfUrlNew2(arr[0]+"_n");
				};
				var cmd=new CMsgTeamAvatar();
				GameSocket.sendClientMsg(cmd);
			}
		}

		/**
		*切换空位置
		*
		*/
		__proto.onBtnChange=function(){
			var cmd=new CMsgChangeCustomRoomPosition();
			cmd.index=this.dataSource.index;
			cmd.userTeamId=this.dataSource.id;
			GameSocket.sendClientMsg(cmd);
		}

		/**
		*踢出队伍
		*
		*/
		__proto.onBtnDelete=function(){
			var cmd=new CMsgKickPlayerByOwner();
			cmd.index=this.dataSource.index;
			cmd.userTeamId=this.dataSource.id;
			GameSocket.sendClientMsg(cmd);
		}

		/**
		*跟其他人换位置
		*
		*/
		__proto.onBtnChangeOther=function(){
			var cmd=new CMsgSwitchCustomRoomPosition();
			cmd.myIndex=FreeMatch.myIndex;
			cmd.myTeamId=FreeMatch.myTeamId;
			cmd.changeTeamId=this.dataSource.id;
			cmd.changeIndex=this.dataSource.index;
			GameSocket.sendClientMsg(cmd);
			this.btnChangeOther.disabled=true;
			FreeMatch.I.changeTime();
		}

		__proto.destroy=function(destroyChild){
			(destroyChild===void 0)&& (destroyChild=true);
			laya.ui.View.prototype.destroy.call(this,destroyChild);
			RoleCenter.I.off("roleChangeEvent",this,this.onUserBasicDataChg);
			NotifyCenter.I.off("onOtherUserBasicdataChange",this,this.onOtherUserBasicdataChange);
		}

		__getset(0,__proto,'dataSource',_super.prototype._$get_dataSource,function(value){
			_super.prototype._$set_dataSource.call(this,value);
			if (!value)return;
			RoleCenter.I.on("roleChangeEvent",this,this.onUserBasicDataChg);
			NotifyCenter.I.on("onTeamAvtor",this,this.onOtherUserBasicdataChange);
			if(FreeMatch.uState[value.userId] && FreeMatch.uState[value.userId].state1)
				this.txtReady.visible=true;
			else
			this.txtReady.visible=false;
			this.btnChangeOther.offAll("click");
			this.btnDelete.visible=false;
			this.chgHero.visible=false;
			this.btnChangeOther.visible=true;
			this.roomMaker.visible=false;
			if(value.id==2){
				this.teamBg.skin="freematch/bg3V3_2.png";
				this.imgHeadBg.skin="freematch/24_2.png";
				}else{
				this.teamBg.skin="freematch/bg3V3.png";
				this.imgHeadBg.skin="freematch/24.png";
			}
			if (value.userId && value.userId !=-1){
				this.btnChangeOther.on("click",this,this.onBtnChangeOther);
				if(value.userId==RoleCenter.I.userId){
					this.imgHead.skin=HallUtil.getHeadIcon(RoleCenter.I.myBasicData);
					this.btnChangeOther.visible=false;
					this.chgHero.visible=true;
					this.Avtor1.skin=SnowUtils.roleHalfUrlNew2(RoleCenter.I.myBasicData.Avtor);
					var arr=SnowUtils.deComposeAvatar(RoleCenter.I.myBasicData.Avtor||1);
					if(!arr || arr.length <=0){
						}else{
						this.uName.skin=SnowUtils.itemHalfUrlNew2(arr[0]+"_n");
					}
					}else{
					NotifyCenter.I.on('searchByUIdResult',this,this.onSearchData);
					HallApp.searchByUId(value.userId);
					this.btnChangeOther.disabled=FreeMatch.I.leftTime > 0;
				}
				if(FreeMatch.roomMaker==RoleCenter.I.userId && value.userId !=RoleCenter.I.userId){
					this.btnDelete.visible=true;
				}
				if(FreeMatch.roomMaker==value.userId){
					this.roomMaker.visible=true;
				}
				}else{
				this.btnChangeOther.on("click",this,this.onBtnChange);
				this.btnChangeOther.disabled=false;
				this.Avtor1.skin="";
				this.uName.skin="";
				this.imgHead.skin="";
			}
		});

		return MatchTeamItem3;
	})(MatchTeamItem3UI)


	/**
	*新手引导UI
	*@author xiaosong
	*@date-2017-03-20
	*/
	//class view.page.HandUI extends ui.hall.page.roomList.HandViewUI
	var HandUI=(function(_super){
		function HandUI(){
			HandUI.__super.call(this);
		}

		__class(HandUI,'view.page.HandUI',_super);
		var __proto=HandUI.prototype;
		/**
		*控制动画播放状态
		*@param value
		*/
		__proto.onSetPlay=function(value){
			this.visible=value;
			this.handAni.visible=value;
			if(value)
				this.handAni.play(0);
			else
			this.handAni.stop();
		}

		/**销毁**/
		__proto.dispose=function(){
			this.onSetPlay(false);
			this.handAni.removeChildren();
			this.handAni=null;
			this.removeChildren();
			this.removeSelf();
		}

		return HandUI;
	})(HandViewUI)


	//class view.page.HeadImg extends ui.hall.page.roomList.HeadImgUI
	var HeadImg=(function(_super){
		function HeadImg(){
			this._skin=null;
			this._url=null;
			this._showBG=false;
			this._bgSkin
			HeadImg.__super.call(this);
			this.img_QQ.visible=false;
			if(Browser.onMiniGame && Browser.onAndriod){
				this.imgAvtor.mask=null;
				this.imgBg.visible=false;
			}
		}

		__class(HeadImg,'view.page.HeadImg',_super);
		var __proto=HeadImg.prototype;
		/**判断是否是关系链好友，显示哪的关系链*/
		__proto.showQQ=function(){
			if (NotifyCenter.I.isGXLFriend[this._skin.userId]){
				if (SnowUtils.isWxApp()|| Browser.onMiniGame){
					this.img_QQ.skin="common/WX.png";
					}else{
					this.img_QQ.skin="common/QQ.png";
				}
				this.img_QQ.visible=true;
				}else{
				this.img_QQ.visible=false;
			}
		}

		/**
		*单路径传数据
		*@param value
		*
		*/
		// imgBg2.visible=true;
		__getset(0,__proto,'skin',function(){
			return this._skin;
			},function(value){
			if(!value)return;
			this._skin=value;
			this.imgAvtor && (this.imgAvtor.skin=HallUtil.getHeadIcon(value));
			this.imgAvtor && (this.imgAvtor.visible=true);
			this.img_QQ.visible=false;
		});

		/**
		*全路径的资源
		*@param value
		*
		*/
		__getset(0,__proto,'url',function(){
			return this._url;
			},function(value){
			if(!value)return;
			this._url=value;
			if(this._url){
				this.imgAvtor&&(this.imgAvtor.skin=value);
				}else{
				this.imgAvtor&&(this.imgAvtor.skin="");
			}
			this.img_QQ.visible=false;
		});

		__getset(0,__proto,'showBG',function(){
			return this._showBG;
			},function(value){
			this._showBG=value;
			this.imgBg&&(this.imgBg.visible=value);
		});

		__getset(0,__proto,'bgSkin',function(){
			return this._bgSkin;
			},function(value){
			this._bgSkin=value;
			if(value){
				this.imgBg&&(this.imgBg.skin=value);
				}else{
				this.imgBg&&(this.imgBg.skin="");
			}
		});

		return HeadImg;
	})(HeadImgUI)


	/**
	*...
	*@author anling
	*/
	//class view.page.LoadingPage extends ui.hall.page.loadingUI
	var LoadingPage=(function(_super){
		function LoadingPage(){
			LoadingPage.__super.call(this);
		}

		__class(LoadingPage,'view.page.LoadingPage',_super);
		var __proto=LoadingPage.prototype;
		__proto.show=function(name){
			this.visible=true;
			this.timerLoop(30,this,this.load);
		}

		__proto.hide=function(){
			this.visible=false;
			this.timer.clear(this,this.load);
		}

		__proto.load=function(){
			this.snow.rotation+=5;
		}

		LoadingPage.getInstance=function(){
			if (!LoadingPage._instance){
				LoadingPage._instance=new LoadingPage();
				LoadingPage._instance.msg.text=SnowUtils.chkIsFB()?"Loading...":"数据请求中...";
				UIMgr.getLayer("layer_nonet").addChild(LoadingPage._instance);
			}
			return LoadingPage._instance;
		}

		LoadingPage.getInstance2=function(){
			if (!LoadingPage._instance2){
				LoadingPage._instance2=new LoadingPage();
				LoadingPage._instance2.msg.text=SnowUtils.chkIsFB()?"Loading...":"数据请求中...";
				UIMgr.getLayer("layer_nonet").addChild(LoadingPage._instance2);
			}
			return LoadingPage._instance2;
		}

		LoadingPage._instance=null
		LoadingPage._instance2=null
		LoadingPage.loadingBjView=null
		return LoadingPage;
	})(loadingUI)


	/**
	*成就截屏分享
	*@author ...
	*/
	//class view.page.ShareAchieve extends ui.hall.page.shareShots.ShareAchieveUI
	var ShareAchieve=(function(_super){
		function ShareAchieve(){
			ShareAchieve.__super.call(this);
		}

		__class(ShareAchieve,'view.page.ShareAchieve',_super);
		var __proto=ShareAchieve.prototype;
		__proto.onbtnBack=function(){
			SnowUtils.releaseImgSourse(this.bg);
			this.removeSelf();
			NotifyCenter.I.off("onShareFinish",this,this.onReplyBtn);
			this.bg.off("click",this,this.onbtnBack);
			if(ShareAchieve.datacmd && ShareAchieve.datacmd.flag)ShareTitle.showSelf(ShareAchieve.datacmd,ShareAchieve.datacmd.flag);
			ShareAchieve.datacmd=null;
		}

		//截屏分享
		__proto.onbtnShare=function(){
			this.xy.visible=this.btnG.visible=false;
			RoleCenter.I.shareType=33;
			Laya.timer.frameOnce(3,this,function(){
				SnowUtils.shareShots(3,"Achievement");
			});
			this.bg.on("click",this,this.onbtnBack);
		}

		__proto.onReplyBtn=function(){
			this.btnG.visible=true;
			this.xy.visible=false;
		}

		__proto.showOne=function(data){
			this.btnG.visible=true;
			var dt=ConfigData.achieveDataNew [data.key];
			this.bg.skin="shareAchieve/bg.jpg";
			this.acIcon.skin="achieveIcon/ac"+data.key+".png";
			if(dt.msg.indexOf("段位")!=-1){
				this.caption.text=dt.msg.replace("{0}",HallUtil.getSeasonNameByExp(dt.count[data.level-1]).substr(0,2));
				}else{
				this.caption.text=dt.msg.replace("{0}",dt.count[data.level-1]);
			}
			this.date.text=SnowUtils.getDateToString(Date.now());
			this.back.on("click",this,this.onbtnBack);
			this.share.on("click",this,this.onbtnShare);
			Laya.stage.addChild(view.page.ShareAchieve.I);
		}

		__getset(1,ShareAchieve,'I',function(){ShareAchieve._ins=ShareAchieve._ins|| new ShareAchieve();
			return ShareAchieve._ins;
		},ui.hall.page.shareShots.ShareAchieveUI._$SET_I);

		ShareAchieve.showSelf=function(data,_cmd){
			if (!data)return;
			ShareAchieve.datacmd=_cmd;
			NotifyCenter.I.on("onShareFinish",view.page.ShareAchieve.I,view.page.ShareAchieve.I.onReplyBtn);
			if(!(Laya.loader.getRes("res/atlas/achieveIcon.atlas")&& Laya.loader.getRes("res/atlas/common.atlas")&& Laya.loader.getRes("res/atlas/shareAchieve.atlas")&& Laya.loader.getRes("shareAchieve/bg.jpg"))){
				SnowLoad.I.load([{url:"res/atlas/achieveIcon.atlas",type:"atlas" },{url:"res/atlas/common.atlas",type:"atlas" },{url:"res/atlas/shareAchieve.atlas",type:"atlas" },{url:"shareAchieve/bg.jpg",type:"image" }],Handler.create(null,onLoaded=function(){
					view.page.ShareAchieve.I.showOne(data);
				}));
				}else{
				view.page.ShareAchieve.I.showOne(data);
			}
		}

		ShareAchieve._ins=null
		ShareAchieve.datacmd=null
		return ShareAchieve;
	})(ShareAchieveUI)


	/**
	*段位截屏分享
	*@author ...
	*/
	//class view.page.ShareDuanwei extends ui.hall.page.shareShots.ShareDuanweiUI
	var ShareDuanwei=(function(_super){
		function ShareDuanwei(){
			ShareDuanwei.__super.call(this);
		}

		__class(ShareDuanwei,'view.page.ShareDuanwei',_super);
		var __proto=ShareDuanwei.prototype;
		__proto.onbtnBack=function(){
			SnowUtils.releaseImgSourse(this.bg);
			this.removeSelf();
			NotifyCenter.I.off("onShareFinish",this,this.onReplyBtn);
			this.bg.off("click",this,this.onbtnBack);
		}

		//截屏分享
		__proto.onbtnShare=function(){
			this.xy.visible=this.btnG.visible=false;
			RoleCenter.I.shareType=34;
			Laya.timer.frameOnce(3,this,function(){
				SnowUtils.shareShots(1,"Segment");
			});
			this.bg.on("click",this,this.onbtnBack);
		}

		__proto.onReplyBtn=function(){
			this.btnG.visible=true;
			this.xy.visible=false;
		}

		__proto.showOne=function(data){
			this.btnG.visible=true;
			this.bg.skin="shareAchieve/bg.jpg";
			this.nkName.changeText(HallUtil.getNkName(RoleCenter.I.myBasicData));
			this.headImg.skin=RoleCenter.I.myBasicData;
			this.headImg.bgSkin="";
			this.paiLevelClip1.index=data.jie-1;
			this.levelClip1.index=data.jie-1;
			this.typeName.skin="duanwei/d"+data.rank+".png";
			this.duanwei.skin="duanwei/steps"+data.rank+".png";
			if (data.rank > 4){
				this.paiLevelClip1.visible=false;
			}
			else{
				this.paiLevelClip1.skin="duanwei/s"+data.rank+".png"
				this.paiLevelClip1.visible=true;
			}
			this.back.on("click",this,this.onbtnBack);
			this.share.on("click",this,this.onbtnShare);
			Laya.stage.addChild(view.page.ShareDuanwei.I);
		}

		__getset(1,ShareDuanwei,'I',function(){ShareDuanwei._ins=ShareDuanwei._ins|| new ShareDuanwei();
			return ShareDuanwei._ins;
		},ui.hall.page.shareShots.ShareDuanweiUI._$SET_I);

		ShareDuanwei.showSelf=function(duanStep){
			if (!duanStep)return;
			NotifyCenter.I.on("onShareFinish",view.page.ShareDuanwei.I,view.page.ShareDuanwei.I.onReplyBtn);
			if(!(Laya.loader.getRes("res/atlas/shareAchieve.atlas")&& Laya.loader.getRes("shareAchieve/bg.jpg")&& Laya.loader.getRes("res/atlas/common.atlas"))){
				SnowLoad.I.load([{url:"res/atlas/shareAchieve.atlas",type:"atlas" },{url:"res/atlas/common.atlas",type:"atlas" },{url:"res/atlas/duanwei.atlas",type:"atlas" },{url:"shareAchieve/bg.jpg",type:"image" }],Handler.create(null,onLoaded=function(){
					view.page.ShareDuanwei.I.showOne(duanStep);
				}));
				}else{
				view.page.ShareDuanwei.I.showOne(duanStep);
			}
		}

		ShareDuanwei._ins=null
		return ShareDuanwei;
	})(ShareDuanweiUI)


	/**
	*称号截屏分享
	*@author ...
	*/
	//class view.page.ShareTitle extends ui.hall.page.shareShots.ShareTitleUI
	var ShareTitle=(function(_super){
		function ShareTitle(){
			ShareTitle.__super.call(this);
		}

		__class(ShareTitle,'view.page.ShareTitle',_super);
		var __proto=ShareTitle.prototype;
		__proto.onbtnBack=function(){
			SnowUtils.releaseImgSourse(this.bg);
			this.removeSelf();
			NotifyCenter.I.off("onShareFinish",this,this.onReplyBtn);
			this.bg.off("click",this,this.onbtnBack);
		}

		//截屏分享
		__proto.onbtnShare=function(){
			this.xy.visible=this.btnG.visible=false;
			RoleCenter.I.shareType=35;
			Laya.timer.frameOnce(3,this,function(){
				SnowUtils.shareShots(4,"Title");
			});
			this.bg.on("click",this,this.onbtnBack);
		}

		__proto.onReplyBtn=function(){
			this.btnG.visible=true;
			this.xy.visible=false;
		}

		__proto.showOne=function(data,title){
			this.btnG.visible=true;
			this.bg.skin="shareTitle/bg.jpg";
			this.nkName.changeText(HallUtil.getNkName(RoleCenter.I.myBasicData));
			this.headImg.skin=RoleCenter.I.myBasicData;
			this.headImg.bgSkin="";
			var srcId=data.avatar+1000;
			this.heroH.skin="res/goods/"+"half/"+srcId+".png";
			this.heroIcon.skin="res/goods/"+"icon/db_"+srcId+".png";
			this.myTitle.skin="shareTitle/"+title+".png";
			this.kill.text=data.kills+"";
			this.death.text=data.deaths+"";
			this.jifen.text=data.score+"";
			this.back.on("click",this,this.onbtnBack);
			this.share.on("click",this,this.onbtnShare);
			Laya.stage.addChild(view.page.ShareTitle.I);
		}

		__getset(1,ShareTitle,'I',function(){ShareTitle._ins=ShareTitle._ins|| new ShareTitle();
			return ShareTitle._ins;
		},ui.hall.page.shareShots.ShareTitleUI._$SET_I);

		ShareTitle.showSelf=function(data,title){
			if (!data)return;
			NotifyCenter.I.on("onShareFinish",view.page.ShareTitle.I,view.page.ShareTitle.I.onReplyBtn);
			if(!(Laya.loader.getRes("res/atlas/shareTitle.atlas")&& Laya.loader.getRes("res/atlas/common.atlas")&& Laya.loader.getRes("shareTitle/bg.jpg"))){
				SnowLoad.I.load([{url:"res/atlas/shareTitle.atlas",type:"atlas" },{url:"res/atlas/common.atlas",type:"atlas" },{url:"shareTitle/bg.jpg",type:"image" }],Handler.create(null,onLoaded=function(){
					view.page.ShareTitle.I.showOne(data,title);
				}));
				}else{
				view.page.ShareTitle.I.showOne(data,title);
			}
		}

		ShareTitle._ins=null
		return ShareTitle;
	})(ShareTitleUI)


	/**
	*网络差提示LoadingUI-有背景，可以屏蔽鼠标事件
	*@author xiaosong
	*/
	//class view.page.loading.LoadUI extends ui.load.LoadIngViewUI
	var LoadUI=(function(_super){
		function LoadUI(){
			this._isLoading=false;
			this.__tween=null;
			LoadUI.__super.call(this);
		}

		__class(LoadUI,'view.page.loading.LoadUI',_super);
		var __proto=LoadUI.prototype;
		/**
		*显示loading网络提示
		*<br> 先提示 "努力加载数据中..." 2-3s 后 飘框提示 "网络异常,请稍后尝试" 后，自动关闭界面
		*/
		__proto.onShow=function(){
			if (!LoadUI._instance || LoadUI._instance.parent)return;
			this.box1.visible=true;
			this.box2.visible=false;
			this.loadingAni.play();
			this.loadingAni.on("complete",this,this.onComplete);
			if(LoadUI._instance && LoadUI._instance.parent==null){
				UIMgr.getLayer("layer_nonet").addChild(LoadUI._instance);
			}
		}

		__proto.onComplete=function(evt){
			if(this._isLoading)
				return;
			this._isLoading=true;
			this.box1.visible=false;
			this.box2.visible=true;
			this.loadingAni.stop();this.__tween=this.__tween|| new Tween();
			this.__tween.to(this.box2,{alpha:0},1000,null,Handler.create(this,function(){
				LoadUI._instance.dispose();
			}),1000);
		}

		__proto.dispose=function(){
			MouseManager.enabled=true;
			this.__tween && this.__tween.clear();
			this._isLoading=false;
			this.box1.visible=false;
			this.box2.visible=false;
			this.box2.alpha=1;
			this.label_msg.changeText(SnowUtils.chkIsFB()?"Loading...":"努力加载数据中...");
			this.msg2.changeText(SnowUtils.chkIsFB()?"Abnormal network...":"网络异常,请稍后尝试");
			this.loadingAni.stop();
			this.loadingAni.off("complete",this,this.onComplete);
			if(this.parent)(this.parent).mouseEnabled=false;
			this.removeSelf();
		}

		/**
		*loading显示控制
		*<br> 此函数提示指定 msg 。
		*<br> 此提示 只有 旋转动画，直到再次调用此函数关闭界面，否则不会自动关闭
		*@param type true-显示 false-隐藏
		*/
		__proto.onLoad=function(type,msg){
			(msg===void 0)&& (msg="");
			if (LoadUI.isquit && type)return;
			if(type){
				this.box1.visible=true;
				this.box2.visible=false;
				this.loadingAni.play();
				msg.length && this.label_msg.changeText(msg);
				UIMgr.getLayer("layer_nonet").addChild(LoadUI._instance);
				MouseManager.enabled=false;
				}else{
				this.dispose();
			}
		}

		__getset(1,LoadUI,'instance',function(){
			return LoadUI._instance=LoadUI._instance|| new LoadUI();
		},ui.load.LoadIngViewUI._$SET_instance);

		LoadUI._instance=null
		LoadUI.isquit=false;
		return LoadUI;
	})(LoadIngViewUI)


	/**
	*...
	*@author ...
	*/
	//class view.page.ShopDiamond extends ui.hall.page.shop.ShopDiamondUI
	var ShopDiamond=(function(_super){
		function ShopDiamond(){
			this._curId=0;
			this._totalGetNum=0;
			this._payNum=0;
			ShopDiamond.__super.call(this);
			this.buyBtn.on("click",this,this.onBuyClick);
		}

		__class(ShopDiamond,'view.page.ShopDiamond',_super);
		var __proto=ShopDiamond.prototype;
		__proto.onBuyClick=function(){
			if (!this.dataSource)return;
			MenuList.I.onReqStart();
			RoleCenter.I.buyType="v2_payment_recharge_gear";
			RoleCenter.I.buyNum=this._payNum;
			HallApp.pay(this._payNum);
		}

		//ItemShow2.onShow([item],"充值成功",msgTxt);
		__getset(0,__proto,'dataSource',_super.prototype._$get_dataSource,function(value){
			_super.prototype._$set_dataSource.call(this,value);
			if (!value)return;
			var dat=value;
			this._curId=dat.id;
			this.icon.skin="shop/"+dat.zsIcon;
			if (dat.gift){
				this.giftTxt.text="另外赠送"+dat.gift;
				this.zs.visible=true;
				}else{
				this.giftTxt.text="";
				this.zs.visible=false;
			}
			this.amoutIco.skin="shop/x"+dat.amount+".png";
			this._payNum=dat.amount;
			this._totalGetNum=dat.gift+dat.amount;
			this.payVal.value="￥"+dat.price+".00";
		});

		return ShopDiamond;
	})(ShopDiamondUI)


	//class view.page.TitleBar extends ui.hall.page.roomList.TitleBarUI
	var TitleBar=(function(_super){
		function TitleBar(){
			this.myBasicData=null;
			this._homeCallback=null;
			this._myTitle=null;
			this.isAutoRefresh=true;
			TitleBar.__super.call(this);
		}

		__class(TitleBar,'view.page.TitleBar',_super);
		var __proto=TitleBar.prototype;
		/**
		*返回按钮
		*
		*/
		__proto.onBtnBack=function(){
			this._homeCallback&&this._homeCallback();
		}

		__proto.onOpen=function(){
			RoleCenter.I.on("roleChangeEvent",this,this.onRoleInfoChange);
			this.onRoleInfoChange();
		}

		__proto.onRoleInfoChange=function(){
			if(this.isAutoRefresh){
				this.lDiamond.text=(SnowUtils.setIntToThousandth(RoleCenter.I.diamond));
			}
		}

		/**刷新金币跟钻石数量**/
		__proto.onRefresh=function(){
			this.lDiamond.text=(SnowUtils.setIntToThousandth(RoleCenter.I.diamond));
		}

		__proto.onClose=function(){
			this.isAutoRefresh=true;
			RoleCenter.I.off("roleChangeEvent",this,this.onRoleInfoChange);
		}

		__getset(0,__proto,'homeCallback',null,function(value){
			this._homeCallback=value;
			this.backBtn&&this.backBtn.on("click",this,this.onBtnBack);
		});

		/**
		*设置图片资源
		*@param value
		*
		*/
		__getset(0,__proto,'myTitle',null,function(value){
			this._myTitle=value;
			if(this._myTitle&&this.imgtitle)
				this.imgtitle.skin=this._myTitle;
			this.titleBg.width=this.imgtitle.x+this.imgtitle.width+36;
		});

		return TitleBar;
	})(TitleBarUI)


	/**
	*...
	*@author ...
	*/
	//class view.shop.DbItem extends ui.hall.page.shop.DbItemUI
	var DbItem=(function(_super){
		function DbItem(){
			DbItem.__super.call(this);
			this.iDt=new WpData();
		}

		__class(DbItem,'view.shop.DbItem',_super);
		var __proto=DbItem.prototype;
		/**
		*按下
		*/
		__proto.onMouseDown=function(id){
			WpTips.I.onShow(this,id);
		}

		__getset(0,__proto,'dataSource',_super.prototype._$get_dataSource,function(value){
			_super.prototype._$set_dataSource.call(this,value);
			if (!value)return;
			var dat=value;
			this.xyt.visible=! !dat.isRare;
			this.xyt.skin="duobao/dbxy.png";
			this.ts.visible=false;
			this.heroName.visible=false;
			this.dbBg.skin=this.xyt.visible ? "duobao/dbxybg.png":"duobao/dbitem.png";
			if(this.xyt.visible && DuoBaoView.I.myFjson && DuoBaoView.I.myFjson.jackpotData && DuoBaoView.I.myFjson.jackpotData.rareItemGot){
				if (DuoBaoView.I.myFjson.jackpotData.rareItemGot.indexOf(dat.id)!=-1){
					this.xyt.skin="duobao/dbyy.png";
				}
			};
			var itemData=ConfigData.itemData[dat.itemId];
			if (itemData.type==1 || itemData.type==7){
				this.numVal.visible=false;
			}
			else{
				this.numVal.visible=true;
				this.numVal.value=dat.count+"";
			};
			var idStr="";
			if (itemData.type==1 || itemData.type==7){
				idStr="db_";
				this.heroName.visible=true;
			}
			this.itemIcon.size(74,74);
			if (itemData.type==7){
				this.ts.visible=true;
				this.ts.skin=Math.floor(itemData.deadline / 24)==1?"common/one.png":"common/three.png";
				this.itemIcon.skin=SnowUtils.itemIconUrl(idStr+itemData.communalId[0]);
				this.heroName.skin=SnowUtils.itemIconUrl("n_"+itemData.communalId[0]);
				}else{
				this.itemIcon.skin=SnowUtils.itemIconUrl(idStr+dat.itemId);
				if(itemData.type==1){
					this.heroName.skin=SnowUtils.itemIconUrl("n_"+dat.itemId);
					}else if (itemData.type==9){
					this.itemIcon.size(70,70);
					}else{
					this.itemIcon.size(60,60);
				}
			};
			var wpDt=SnowUtils.itemData(dat.itemId);
			this.on("mousedown",this,this.onMouseDown,[dat.itemId]);
		});

		return DbItem;
	})(DbItemUI)


	/**
	*...
	*@author ...
	*/
	//class view.page.SkillInfoTips extends ui.SkillinfoTipsUI
	var SkillInfoTips=(function(_super){
		function SkillInfoTips(){
			this._startX=NaN;
			this._startY=NaN;
			this.iDt=new Object();
			SkillInfoTips.__super.call(this);
		}

		__class(SkillInfoTips,'view.page.SkillInfoTips',_super);
		var __proto=SkillInfoTips.prototype;
		/**
		*在目标位置显示目标tips
		*@param target
		*@param data
		*/
		__proto.onShow=function(target,id){
			var point=new Point(target.width/2,0);
			point=target.localToGlobal(point);
			var infoDt=ConfigData.skillName[id];
			if (!infoDt){
				Log_Test.error("技能不存在！+id:"+id);
				return;
			}
			this.iDt.iName=SnowUtils.geti18nStr(infoDt);
			this.iDt.iContent=SnowUtils.geti18nStr(ConfigData.skillDes[id]);
			view.page.SkillInfoTips.I.anchorX=0;
			view.page.SkillInfoTips.I.anchorY=0;
			view.page.SkillInfoTips.I.setData(this.iDt);
			view.page.SkillInfoTips.I.x=point.x;
			view.page.SkillInfoTips.I.y=point.y-10;
			Laya.stage.addChild(view.page.SkillInfoTips.I);
			this._startX=Laya.stage.mouseX;
			this._startY=Laya.stage.mouseY;
			Laya.stage.on("mousemove",this,this.onMouseMove);
			Laya.stage.on("mouseup",this,this.onMouseLeave);
		}

		/**
		*移动
		*/
		__proto.onMouseMove=function(){
			if (Math.abs(this._startX-Laya.stage.mouseX)> 60 || Math.abs(this._startY-Laya.stage.mouseY)> 60){
				this.onMouseLeave();
			}
		}

		/**
		*离开目标（松开）
		*/
		__proto.onMouseLeave=function(){
			Laya.stage.off("mousemove",this,this.onMouseMove);
			Laya.stage.off("mouseup",this,this.onMouseLeave);
			view.page.SkillInfoTips.I.removeSelf();
		}

		/**
		*设置tips的内容
		*@param data
		*/
		__proto.setData=function(data){
			this.iName.text=data.iName;
			this.iContent.text=data.iContent;
			this.height=10+this.iContent.height+24+10;
			this.iBg.height=this.height+10;
			this.iContent.width=this.width-20;
		}

		__getset(1,SkillInfoTips,'I',function(){
			if (!SkillInfoTips._instance)SkillInfoTips._instance=new SkillInfoTips();
			return SkillInfoTips._instance;
		},ui.SkillinfoTipsUI._$SET_I);

		SkillInfoTips._instance=null
		return SkillInfoTips;
	})(SkillinfoTipsUI)


	/**
	*...
	*@author ...
	*/
	//class view.page.wheel.DianZan extends ui.hall.page.wheel.DianZanUI
	var DianZan=(function(_super){
		function DianZan(){
			DianZan.__super.call(this);
		}

		__class(DianZan,'view.page.wheel.DianZan',_super);
		var __proto=DianZan.prototype;
		Laya.imps(__proto,{"view.page.wheel.ITips":true})
		__proto.initFontClip=function(type,value){}
		/**
		*初始化信息
		*@param msgTxt
		*/
		__proto.initData=function(msgTxt){
			this.sb.innerHTML=msgTxt;
			this.sb.style.fontSize=30;
			this.sb.style.font="SimHei";
			this.sb.alpha=1;
			this.sb.width=Laya.stage.width;
			this.sb.mouseEnabled=false;
			this.msgBg.width=30+this.sb.contextWidth;
			this.sb.x=15;
			this.msgBg.x=0;
			this.width=this.msgBg.width;
		}

		return DianZan;
	})(DianZanUI)


	//class view.page.wheel.WheelFontClipView extends ui.hall.page.wheel.WheelFontClipViewUI
	var WheelFontClipView=(function(_super){
		function WheelFontClipView(){
			WheelFontClipView.__super.call(this);
		}

		__class(WheelFontClipView,'view.page.wheel.WheelFontClipView',_super);
		var __proto=WheelFontClipView.prototype;
		Laya.imps(__proto,{"view.page.wheel.ITips":true})
		__proto.initData=function(msgTxt){}
		__proto.initFontClip=function(type,value){
			this.fontClipTxt.value="+"+Math.abs(value);
		}

		return WheelFontClipView;
	})(WheelFontClipViewUI)


	/**
	*文字弹窗
	*@author xiaosong
	*@date-2017-08-16
	*/
	//class view.page.wheel.WheelTipsView extends ui.hall.page.wheel.WheelTipsViewUI
	var WheelTipsView=(function(_super){
		function WheelTipsView(){
			WheelTipsView.__super.call(this);
		}

		__class(WheelTipsView,'view.page.wheel.WheelTipsView',_super);
		var __proto=WheelTipsView.prototype;
		Laya.imps(__proto,{"view.page.wheel.ITips":true})
		__proto.initFontClip=function(type,value){}
		/**
		*初始化信息
		*@param msgTxt
		*/
		__proto.initData=function(msgTxt){
			this.tipsTxt.text=msgTxt;
			this.msgBg.skin="common/bg11.png";
			this.msgBg.width=30+this.tipsTxt.textField.textWidth;
			this.tipsTxt.x=15;
			this.msgBg.x=0;
			this.width=this.msgBg.width;
		}

		return WheelTipsView;
	})(WheelTipsViewUI)


	/**
	*...
	*@author ...
	*/
	//class view.page.WpTips extends ui.WpTipsUI
	var WpTips=(function(_super){
		function WpTips(){
			this._startX=NaN;
			this._startY=NaN;
			this.iDt=new WpData();
			WpTips.__super.call(this);
		}

		__class(WpTips,'view.page.WpTips',_super);
		var __proto=WpTips.prototype;
		/**
		*在目标位置显示目标tips
		*@param target
		*@param data
		*/
		__proto.onShow=function(target,id,num){
			(num===void 0)&& (num=0);
			var point=new Point(target.width/2,0);
			point=target.localToGlobal(point);
			var wpDt=SnowUtils.itemData(id);
			if (!wpDt){
				Log_Test.error("物品不存在！+id:"+id);
				return;
			}
			if(wpDt.type==4){
				this.iDt.imgUrl=SnowUtils.itemHalfUrl(id+"");
			}else
			this.iDt.imgUrl=SnowUtils.itemIconUrl(id+"");
			this.iDt.iName=SnowUtils.geti18nStr(ConfigData.thingName[id]);
			if (num)this.iDt.iName+="X"+num;
			this.iDt.iContent=SnowUtils.geti18nStr(ConfigData.thingDes[id]);
			view.page.WpTips.I.anchorX=0.5;
			view.page.WpTips.I.anchorY=1;
			view.page.WpTips.I.setData(this.iDt);
			var rx=Laya.stage.width-(view.page.WpTips.I.width / 2)*view.page.WpTips.I.scaleX;
			var lx=(view.page.WpTips.I.width / 2)*view.page.WpTips.I.scaleX;
			var bx=Laya.stage.height;
			var tx=(view.page.WpTips.I.height)*view.page.WpTips.I.scaleY;
			view.page.WpTips.I.x=point.x > rx?rx:(point.x < lx?lx:point.x);
			view.page.WpTips.I.y=point.y > bx?bx:(point.y < tx?tx:point.y);
			Laya.stage.addChild(view.page.WpTips.I);
			this._startX=Laya.stage.mouseX;
			this._startY=Laya.stage.mouseY;
			Laya.stage.on("mousemove",this,this.onMouseMove);
			Laya.stage.on("mouseup",this,this.onMouseLeave);
		}

		/**
		*移动
		*/
		__proto.onMouseMove=function(){
			if (Math.abs(this._startX-Laya.stage.mouseX)> 5 || Math.abs(this._startY-Laya.stage.mouseY)> 5){
				this.onMouseLeave();
			}
		}

		/**
		*离开目标（松开）
		*/
		__proto.onMouseLeave=function(){
			Laya.stage.off("mousemove",this,this.onMouseMove);
			Laya.stage.off("mouseup",this,this.onMouseLeave);
			view.page.WpTips.I.removeSelf();
		}

		/**
		*设置tips的内容
		*@param data
		*/
		__proto.setData=function(data){
			this.iImage.skin=data.imgUrl;
			this.iName.text=data.iName;
			this.iContent.width=this.width-40;
			this.iContent.height=0;
			this.iContent.style.fontSize=20;
			this.iContent.style.color="#ffffff";
			this.iContent.innerHTML=data.iContent;
			this.height=10+this.iContent.height+84+10+24;
			this.iBg.height=this.height;
			if (data.iCount=="" || data.iCount==null){
				this.iName.valign="middle";
			}
			else{
				this.iName.valign="top";
				this.iCount.style.fontSize=25;
				this.iCount.style.color="#ffffff";
				this.iCount.width=309;
				this.iCount.innerHTML=data.iCount;
			}
		}

		__getset(1,WpTips,'I',function(){
			if (!WpTips._instance)WpTips._instance=new WpTips();
			return WpTips._instance;
		},ui.WpTipsUI._$SET_I);

		WpTips._instance=null
		return WpTips;
	})(WpTipsUI)


	//class view.pages.loginUI extends ui.UIBase
	var loginUI=(function(_super){
		function loginUI(){
			this.txtUserName=null;
			this.txtPassword=null;
			this.btnLogin=null;
			this.btnReg=null;
			this.lUserNameHint=null;
			this.lPasswordHint=null;
			this.lMsg=null;
			this.btnQQ=null;
			this.btnWeixin=null;
			loginUI.__super.call(this);
		}

		__class(loginUI,'view.pages.loginUI',_super);
		var __proto=loginUI.prototype;
		__proto.createChildren=function(){
			laya.ui.Component.prototype.createChildren.call(this);
			this.createView(loginUI.uiView);
		}

		__static(loginUI,
		['uiView',function(){return this.uiView={"type":"UIBase","props":{"width":1136,"height":768},"child":[{"type":"Label","props":{"y":140,"x":478,"text":"用户名","color":"#ffffff"}},{"type":"TextInput","props":{"y":134,"x":524,"var":"txtUserName","text":"TextInput","skin":"comp/textinput.png"}},{"type":"Label","props":{"y":211,"x":475,"text":"密码","color":"#ffffff"}},{"type":"TextInput","props":{"y":206,"x":522,"var":"txtPassword","text":"TextInput","skin":"comp/textinput.png"}},{"type":"Button","props":{"y":304,"x":473,"var":"btnLogin","skin":"comp/button.png","label":"登录"}},{"type":"Button","props":{"y":304,"x":578,"var":"btnReg","skin":"comp/button.png","label":"注册"}},{"type":"Label","props":{"y":177,"x":484,"var":"lUserNameHint","color":"#fb110d"}},{"type":"Label","props":{"y":244,"x":489,"var":"lPasswordHint","color":"#ff1c08"}},{"type":"Label","props":{"y":277,"x":480,"var":"lMsg","color":"#f90a06"}},{"type":"Button","props":{"y":353,"x":580,"var":"btnQQ","stateNum":"1","skin":"login/btn_qq.png"}},{"type":"Button","props":{"y":349,"x":465,"var":"btnWeixin","stateNum":"1","skin":"login/btn_weixin.png"}}]};}
		]);
		return loginUI;
	})(UIBase)


	//class view.pages.login_qbUI extends ui.UIBase
	var login_qbUI=(function(_super){
		function login_qbUI(){
			this.btnWX=null;
			this.btnQQ=null;
			this.imgWx=null;
			this.imgQQ=null;
			this.lWx=null;
			this.lQQ=null;
			this.imgWxChecked=null;
			this.imgQQChecked=null;
			this.btnLogout=null;
			login_qbUI.__super.call(this);
		}

		__class(login_qbUI,'view.pages.login_qbUI',_super);
		var __proto=login_qbUI.prototype;
		__proto.createChildren=function(){
			laya.ui.Component.prototype.createChildren.call(this);
			this.createView(login_qbUI.uiView);
		}

		__static(login_qbUI,
		['uiView',function(){return this.uiView={"type":"UIBase","props":{"width":1136,"height":768},"child":[{"type":"Button","props":{"y":440,"x":264,"width":200,"var":"btnWX","skin":"comp/button.png","label":"微信登录","height":100}},{"type":"Button","props":{"y":443,"x":516,"width":200,"var":"btnQQ","skin":"comp/button.png","label":"QQ登录","height":100}},{"type":"Image","props":{"y":356,"x":356,"width":67,"var":"imgWx","height":63}},{"type":"Image","props":{"y":355,"x":488,"width":67,"var":"imgQQ","height":63}},{"type":"Label","props":{"y":312,"x":370,"var":"lWx","text":"label","color":"#ffffff"}},{"type":"Label","props":{"y":310,"x":483,"var":"lQQ","text":"label","color":"#ffffff"}},{"type":"Image","props":{"y":366,"x":366,"width":67,"var":"imgWxChecked","height":63}},{"type":"Image","props":{"y":365,"x":498,"width":67,"var":"imgQQChecked","height":63}},{"type":"Button","props":{"y":146,"x":920,"var":"btnLogout","skin":"comp/button.png"}}]};}
		]);
		return login_qbUI;
	})(UIBase)


	//class view.pages.messageBoxUI extends ui.UIBase
	var messageBoxUI=(function(_super){
		function messageBoxUI(){
			this.lTitle=null;
			this.lMessage=null;
			this.btnOk=null;
			messageBoxUI.__super.call(this);
		}

		__class(messageBoxUI,'view.pages.messageBoxUI',_super);
		var __proto=messageBoxUI.prototype;
		__proto.createChildren=function(){
			laya.ui.Component.prototype.createChildren.call(this);
			this.createView(messageBoxUI.uiView);
		}

		__static(messageBoxUI,
		['uiView',function(){return this.uiView={"type":"UIBase","props":{"width":1280,"height":720},"child":[{"type":"Label","props":{"y":343,"x":374,"var":"lTitle"}},{"type":"Label","props":{"y":431,"x":486,"var":"lMessage","text":"label"}},{"type":"Button","props":{"y":388,"x":712,"var":"btnOk","skin":"comp/button.png"}}]};}
		]);
		return messageBoxUI;
	})(UIBase)


	//class view.pages.regUI extends ui.UIBase
	var regUI=(function(_super){
		function regUI(){
			this.txtUserName=null;
			this.txtPassword=null;
			this.txtConfirmPassword=null;
			this.btnReg=null;
			this.btnReturn=null;
			this.lUserNameHint=null;
			this.lPasswordHint=null;
			this.lConfirmPasswordHint=null;
			this.lMsg=null;
			regUI.__super.call(this);
		}

		__class(regUI,'view.pages.regUI',_super);
		var __proto=regUI.prototype;
		__proto.createChildren=function(){
			laya.ui.Component.prototype.createChildren.call(this);
			this.createView(regUI.uiView);
		}

		__static(regUI,
		['uiView',function(){return this.uiView={"type":"UIBase","props":{"width":1136,"height":640},"child":[{"type":"Label","props":{"y":148,"x":405,"text":"用户名","color":"#ffffff"}},{"type":"Label","props":{"y":203,"x":406,"text":"密码","color":"#ffffff"}},{"type":"Label","props":{"y":255,"x":406,"text":"确认密码","color":"#ffffff"}},{"type":"TextInput","props":{"y":144,"x":480,"width":273,"var":"txtUserName","text":"TextInput","skin":"comp/textinput.png","height":22}},{"type":"TextInput","props":{"y":198,"x":479,"width":272,"var":"txtPassword","text":"TextInput","skin":"comp/textinput.png","height":22}},{"type":"TextInput","props":{"y":251,"x":480,"width":271,"var":"txtConfirmPassword","text":"TextInput","skin":"comp/textinput.png","height":22}},{"type":"Button","props":{"y":341,"x":404,"width":126,"var":"btnReg","skin":"comp/button.png","label":"注册","height":61}},{"type":"Button","props":{"y":343,"x":645,"width":99,"var":"btnReturn","skin":"comp/button.png","label":"返回","height":57}},{"type":"Label","props":{"y":175,"x":422,"var":"lUserNameHint","text":"label","color":"#f90a06"}},{"type":"Label","props":{"y":229,"x":422,"var":"lPasswordHint","text":"label","color":"#f90a06"}},{"type":"Label","props":{"y":278,"x":423,"var":"lConfirmPasswordHint","text":"label","color":"#f90a06"}},{"type":"Label","props":{"y":311,"x":570,"var":"lMsg","text":"label","color":"#f90a06"}}]};}
		]);
		return regUI;
	})(UIBase)


	//class view.pages.waiticonUI extends ui.UIBase
	var waiticonUI=(function(_super){
		function waiticonUI(){
			waiticonUI.__super.call(this);
		}

		__class(waiticonUI,'view.pages.waiticonUI',_super);
		var __proto=waiticonUI.prototype;
		__proto.createChildren=function(){
			laya.ui.Component.prototype.createChildren.call(this);
			this.createView(waiticonUI.uiView);
		}

		__static(waiticonUI,
		['uiView',function(){return this.uiView={"type":"UIBase","props":{"width":1136,"height":640}};}
		]);
		return waiticonUI;
	})(UIBase)


	/**
	*排行渲染单个item
	*@author xiaosong
	*@date-2018-01-16
	*/
	//class view.page.newRank.RankItem extends ui.hall.page.newRank.RankItemUI
	var RankItem=(function(_super){
		function RankItem(){
			RankItem.__super.call(this);
		}

		__class(RankItem,'view.page.newRank.RankItem',_super);
		var __proto=RankItem.prototype;
		/**
		*渲染数据
		*@param index 排行
		*@param data 排行单元数据
		*@param type 0 冠军数；1击杀数
		*/
		__proto.init=function(index,data){
			this.headImg.skin=data.avatarUrl;
			this.nameTxt.text=MsgMgr.getNkName(data.nickName);
			this.countTxt.text=ConfigMgr.getSeasonNameByID(data.rankValue);
			if(index <3){
				this.rankTxt.visible=false;
				this.rank_mark.visible=true;
				this.rank_mark.skin="layacommon/img_"+(index+1)+".png";
				}else{
				this.rankTxt.visible=true;
				this.rankTxt.text=String(index+1);
				this.rank_mark.visible=false;
			}
			this.visible=true;
		}

		return RankItem;
	})(RankItemUI)


	/**
	*排行pk
	*@author xiaosong
	*@date-2017-01-16
	*/
	//class view.page.newRank.RankListView extends ui.hall.page.newRank.RankListUI
	var RankListView=(function(_super){
		function RankListView(){
			this._tcData=null;
			RankListView.__super.call(this);
			this.initEvent();
		}

		__class(RankListView,'view.page.newRank.RankListView',_super);
		var __proto=RankListView.prototype;
		__proto.initEvent=function(){
			this.list_rank.selectEnable=true;
			this.list_rank.renderHandler=new Handler(this,this.onListRankHandler);
			this.list_rank.vScrollBarSkin="";
			this.list_rank.scrollBar.hide=true;
			this.list_rank.scrollBar.elasticDistance=150;
		}

		/**
		*渲染排行列表
		*@param rankItem
		*@param index
		*/
		__proto.onListRankHandler=function(rankItem,index){
			if(index < 0 || index >=RankListView._pageArr.length)
				return;
			rankItem.init(index,RankListView._pageArr[index]);
		}

		/**
		*初始化数据
		*@param pageType 0 冠軍；1击杀
		*/
		__proto.initData=function(data){
			var _$this=this;
			RankListView._pageType=data.pageType;
			this._tcData=data.data;
			this.loadTxt.visible=true;
			console.log("-----1---------ranklistView------------------------------");
			RankListView._pageArr=null;
			if(RankListView._pageArr==null){
				RankListView._pageArr=[];
				wx.getGroupUserGameData({
					success:function (res){
						console.log("-----2---------ranklistView------------------------------");
						console.log(res);
						if(res.data){
							for(var key in res.data){
								var tempData={};
								tempData.openId=res.data[key].openId;
								tempData.nickName=res.data[key].nickName;
								tempData.avatarUrl=res.data[key].avatarUrl;
								var bufferData=JSON.parse(res.data[key].buffer);
								if(bufferData.wxgame && bufferData.wxgame.rank){
									tempData.rankValue=_$this.getRankValue(bufferData.wxgame.rank,"rankValue");
									}else{
									tempData.rankValue=0;
								}
								RankListView._pageArr.push(tempData);
							}
							SortOn.sortOn(RankListView._pageArr,"rankValue",16| 2);
							_$this.list_rank.dataSource=RankListView._pageArr;
							if(RankListView._pageArr.length==0){
								_$this.loadTxt.visible=true;
								_$this.loadTxt.text="群成员暂无排行数据";
								}else{
								_$this.loadTxt.visible=false;
							}
						}
						},fail:function (data){
						console.log("----------------------ranklistview----fail-------");
						console.log(data);
				}});
				wx.getFriendUserGameData({
					success:function (res){
						console.log("----------------getFriendUserGameData------------------------");
						console.log(res);
					}
					,fail:function (data){
						console.log("------------getFriendUserGameData----------ranklistview----fail-------");
						console.log(data);
					}
				});
				}else{
			}
		}

		/**
		*获取
		*@param rankArr
		*@param type 1mvp数量；2击杀数
		*@return
		*/
		__proto.getRankValue=function(rankArr,type){
			(type===void 0)&& (type="rankValue");
			var count=0;
			for(var i in rankArr){
				if(rankArr[i].key==type){
					if(rankArr[i].value1 && rankArr[i].value1 > count){
						count=rankArr[i].value1;
					}
				}
			}
			return count;
		}

		__proto.dispose=function(){
			this.removeChildren();
			this.removeSelf();
		}

		RankListView._pageType=0;
		RankListView._pageArr=null
		return RankListView;
	})(RankListUI)


	//class view.page.newRank2.RankList1Item extends ui.hall.page.newRank2.RankList1ItemUI
	var RankList1Item=(function(_super){
		function RankList1Item(){
			RankList1Item.__super.call(this);
		}

		__class(RankList1Item,'view.page.newRank2.RankList1Item',_super);
		var __proto=RankList1Item.prototype;
		/**
		*渲染数据
		*@param data 排行单元数据
		*@param index 排行
		*/
		__proto.update=function(data,index){
			this.headImg.skin=data.avatarUrl;
			this.nameTxt.text=MsgMgr.getNkName(data.nickName);
			if(index <4){
				this.rankFontClip.visible=false;
				this.rank_mark.visible=true;
				this.rank_mark.skin="layacommon/img_r"+(index+1)+".png";
				}else{
				this.rankFontClip.visible=true;
				this.rankFontClip.value=String(index+1);
				this.rank_mark.visible=false;
			}
			this.scoreTxt.text=ConfigMgr.getSeasonNameByID(data.rankValue);
			this.visible=true;
		}

		return RankList1Item;
	})(RankList1ItemUI)


	//class view.page.newRank2.RankList1View extends ui.hall.page.newRank2.RankList1ViewUI
	var RankList1View=(function(_super){
		function RankList1View(){
			RankList1View.__super.call(this);
			this.initEvent();
		}

		__class(RankList1View,'view.page.newRank2.RankList1View',_super);
		var __proto=RankList1View.prototype;
		__proto.initEvent=function(){
			this.list_rank.selectEnable=true;
			this.list_rank.renderHandler=new Handler(this,this.onListRankHandler);
			this.list_rank.vScrollBarSkin="";
			this.list_rank.scrollBar.hide=true;
			this.list_rank.scrollBar.elasticDistance=150;
		}

		__proto.onListRankHandler=function(item,index){
			if(index < 0 || index >=RankList1View._pageArr.length)
				return;
			item.update(RankList1View._pageArr[index],index);
		}

		/**
		*渲染数据
		*@param rank
		*/
		__proto.initData=function(data){
			var _$this=this;
			console.log("-----1---------ranklistView------------------------------");
			wx.getFriendUserGameData({
				success:function (res){
					console.log("----------------getFriendUserGameData------------------------");
					console.log(res);
					if(res.data){
						var pageArr=[];
						var isCunZaiOwn=false;
						for(var key in res.data){
							var tempData={};
							tempData.openId=res.data[key].openId;
							tempData.nickName=res.data[key].nickName;
							tempData.avatarUrl=res.data[key].avatarUrl;
							var bufferData=JSON.parse(res.data[key].buffer);
							var openId=data.openId;
							var rank=data.rank;
							if(bufferData.wxgame && bufferData.wxgame.rank){
								if(tempData.openId==openId){
									tempData.rankValue=data.rankValue;
									isCunZaiOwn=true;
								}else
								tempData.rankValue=_$this.getRankValue(bufferData.wxgame.rank,"rankValue");
								}else{
								tempData.rankValue=0;
							}
							pageArr.push(tempData);
						}
						if(!isCunZaiOwn &&pageArr.length!=0){
							pageArr.push(data);
						}
						_$this.onZheHeData(pageArr,data);
					}
				}
				,fail:function (data){
					console.log("------------getFriendUserGameData----------ranklistview----fail-------");
					console.log(data);
				}
			});
		}

		/**
		*整合数据
		*@param res
		*/
		__proto.onZheHeData=function(pageArr,data){
			console.log(pageArr);
			console.log(data);
			if(pageArr && pageArr.length!=1){
				RankList1View._pageArr=[];
				RankList1View._pageArr=pageArr;
				SortOn.sortOn(RankList1View._pageArr,"rankValue",16| 2);
				this.list_rank.dataSource=RankList1View._pageArr;
			}
			this.onRenderOwnData(data);
		}

		/**
		*渲染自己列表数据
		*@param rank
		*/
		__proto.onRenderOwnData=function(data){
			var openId=data.openId;
			var rank=data.rankValue;
			var index=0;
			if(RankList1View._pageArr){
				for(var i=0,sz=RankList1View._pageArr.length;i<sz;i++){
					var tempObj=RankList1View._pageArr[i];
					if(tempObj.openId==openId){
						index=i;
						break ;
					}
				}
			}
			console.log("-------onRenderOwnData----------");
			console.log(data);
			this.headImg.skin=data.avatarUrl;
			this.nameTxt.text=data.nickName;
			if(index <4){
				this.rankFontClip.visible=false;
				this.rank_mark.skin="layacommon/img_r"+(index+1)+".png";
				this.rank_mark.visible=true;
				}else{
				this.rank_mark.visible=false;
				if(index==-1){
					this.rankFontClip.visible=false;
					}else{
					this.rankFontClip.visible=true;
					this.rankFontClip.value=String(index+1);
				}
			}
			this.scoreTxt.text=ConfigMgr.getSeasonNameByID(rank);
			this.box1.visible=true;
		}

		/**
		*获取
		*@param rankArr
		*@param type 平均积分
		*@return
		*/
		__proto.getRankValue=function(rankArr,type){
			(type===void 0)&& (type="rankValue");
			var count=0;
			for(var i in rankArr){
				if(rankArr[i].key==type){
					if(rankArr[i].value1 && rankArr[i].value1 > count){
						count=rankArr[i].value1;
					}
				}
			}
			console.log("-----------count:"+count);
			return count;
		}

		/**
		*生成指定范围的随机数
		*@param {*}minNum 最小值
		*@param {*}maxNum 最大值
		*/
		__proto.randRange=function(minNum,maxNum){
			return (Math.floor(Math.random()*(maxNum-minNum+1))+minNum);
		}

		__proto.dispose=function(){
			this.removeChildren();
			this.removeSelf();
		}

		RankList1View._pageArr=null
		return RankList1View;
	})(RankList1ViewUI)


	//class view.page.newRank2.RankList2Item extends ui.hall.page.newRank2.RankList2ItemUI
	var RankList2Item=(function(_super){
		function RankList2Item(){
			RankList2Item.__super.call(this);
		}

		__class(RankList2Item,'view.page.newRank2.RankList2Item',_super);
		var __proto=RankList2Item.prototype;
		__proto.update=function(data,index){
			this.img_head.skin=data.avatarUrl;
			this.rank_mark.visible=true;
			this.rank_mark.skin="layacommon/img_r"+(index+1)+".png";
			this.visible=true;
		}

		return RankList2Item;
	})(RankList2ItemUI)


	//class view.page.newRank2.RankList2View extends ui.hall.page.newRank2.RankList2ViewUI
	var RankList2View=(function(_super){
		function RankList2View(){
			RankList2View.__super.call(this);
			this.initEvent();
		}

		__class(RankList2View,'view.page.newRank2.RankList2View',_super);
		var __proto=RankList2View.prototype;
		__proto.initEvent=function(){
			this.list_rank.selectEnable=true;
			this.list_rank.renderHandler=new Handler(this,this.onListRankHandler);
		}

		__proto.onListRankHandler=function(item,index){
			if(index < 0 || index >=RankList2View._pageArr.length)
				return;
			if(index < 4){
				item.update(RankList2View._pageArr[index],index);
			}
		}

		__proto.initData=function(data){
			var _$this=this;
			console.log("-----1---------ranklistView------------------------------");
			wx.getFriendUserGameData({
				success:function (res){
					console.log("----------------getFriendUserGameData------------------------");
					console.log(res);
					if(res.data){
						var pageArr=[];
						var isCunZaiOwn=false;
						for(var key in res.data){
							var tempData={};
							tempData.openId=res.data[key].openId;
							tempData.nickName=res.data[key].nickName;
							tempData.avatarUrl=res.data[key].avatarUrl;
							var bufferData=JSON.parse(res.data[key].buffer);
							var openId=data.openId;
							if(bufferData.wxgame && bufferData.wxgame.rank){
								if(tempData.openId==openId){
									tempData.rankValue=data.rankValue;
									isCunZaiOwn=true;
								}else
								tempData.rankValue=_$this.getCount(bufferData.wxgame.rank,"rankValue");
								}else{
								tempData.rankValue=0;
							}
							pageArr.push(tempData);
						}
						if(!isCunZaiOwn){
							pageArr.push(data);
						}
						_$this.onZheHeData(pageArr,data);
					}
				}
				,fail:function (data){
					console.log("------------getFriendUserGameData----------ranklistview----fail-------");
					console.log(data);
				}
			});
		}

		/**
		*整合数据
		*@param res
		*/
		__proto.onZheHeData=function(pageArr,data){
			RankList2View._pageArr=[];
			RankList2View._pageArr=pageArr;
			SortOn.sortOn(RankList2View._pageArr,"rankValue",16| 2);
			this.list_rank.dataSource=RankList2View._pageArr;
		}

		/**
		*获取
		*@param rankArr
		*@param type 平均积分
		*@return
		*/
		__proto.getCount=function(rankArr,type){
			(type===void 0)&& (type="rankValue");
			var count=0;
			for(var i in rankArr){
				if(rankArr[i].key==type){
					if(rankArr[i].value1 && rankArr[i].value1 > count){
						count=rankArr[i].value1;
					}
				}
			}
			return count;
		}

		/**
		*生成指定范围的随机数
		*@param {*}minNum 最小值
		*@param {*}maxNum 最大值
		*/
		__proto.randRange=function(minNum,maxNum){
			return (Math.floor(Math.random()*(maxNum-minNum+1))+minNum);
		}

		__proto.dispose=function(){
			this.removeChildren();
			this.removeSelf();
		}

		RankList2View._pageArr=null
		return RankList2View;
	})(RankList2ViewUI)


	/**
	*...
	*@author luohuantao
	*/
	//class view.page.BjView extends ui.BjViewUI
	var BjView=(function(_super){
		function BjView(){
			this.snowAni=null;
			BjView.__super.call(this);
			this.snowAni=new SnowEffect();
		}

		__class(BjView,'view.page.BjView',_super);
		var __proto=BjView.prototype;
		__proto.onCreated=function(){
			view.UIBase0.prototype.onCreated.call(this);
			this.addChild(this.snowAni);
			this.isShowBg=false;
			this.init(10);
		}

		/******雪花飘动动画****************
		*******<br>参数：<br>_url:资源地址*********
		*******<br>_num:每次产生的个数**********/
		__proto.init=function(_num,_url){
			(_num===void 0)&& (_num=5);
			(_url===void 0)&& (_url="res/atlas/ani/snow.atlas");
			this.snowAni.init(_url,_num);
		}

		__proto.onShow=function(){
			this.snowAni.onStart();
		}

		__proto.onClose=function(){
			view.UIBase0.prototype.onClose.call(this);
			this.snowAni.onEnd();
			Laya.stage.off("resize",this,this.onResize);
		}

		__proto.onOpen=function(){
			view.UIBase0.prototype.onOpen.call(this);
			this.addToParent(this);
			Laya.stage.on("resize",this,this.onResize);
			this.onResize();
			this.visible=true;
		}

		// onShow();
		__proto.addToParent=function(uibase){
			if(this.layerName)
				UIMgr.autoCloseUI(this.layerName,true);
			this.layerParent.addChild(uibase);
			Log_Test.debug(1,"BjView 重写 addToParent    uiNum:"+this.uiNum);
		}

		__proto.onResize=function(){
			var sx=Laya.stage.width / Laya.stage.designWidth;
			var sy=Laya.stage.height / Laya.stage.designHeight;
			var sc=Math.max(sx,sy);
			if(sc <=1){
				sc=1/Math.min(sx,sy);
			}
			this.imgbg.scale(sc,sc,true);
		}

		__getset(0,__proto,'visible',_super.prototype._$get_visible,function(value){
			if(value)
				this.onShow();
			else
			this.snowAni.onEnd();
			_super.prototype._$set_visible.call(this,value);
		});

		BjView.onHide=function(){
			var bj=UIMgr.getUI(BjView);
			if(bj)
				bj.visible=false;
			UIMgr.closeUI(BjView);
		}

		return BjView;
	})(BjViewUI)


	/**复活界面
	*...
	*@author anling
	*/
	//class view.page.GameAgainView extends ui.gameAgain.gameAgainUI
	var GameAgainView=(function(_super){
		function GameAgainView(){
			this._isCloseByHelp=false;
			this.str1="积分决定名次,名次越高奖励越高";
			this.str2="团队模式,拾取雪晶可获得胜利";
			this.str3="团队积分决定名次,名次越高奖励越高";
			this.heroUrl="";
			this.curArr=null;
			GameAgainView.__super.call(this);
			GameAgainView.I=this;
			this.resList=[
			{url:"gaming/tipBg.png",type:"image"},
			{url:"res/goods/half/mrt.png",type:"image"}];
		}

		__class(GameAgainView,'view.page.GameAgainView',_super);
		var __proto=GameAgainView.prototype;
		Laya.imps(__proto,{"laya8.client.player.IActive":true})
		__proto.onCreated=function(){
			view.UIBase0.prototype.onCreated.call(this);
			this.btnBackHall.on("click",this,this.backToHall);
			this.btnRebirth.on("mousedown",this,this.quickRebirth);
			this.onResize();
			Laya.stage.on("resize",this,this.onResize);
		}

		__proto.onClose=function(){
			this.alpha=1;
			view.UIBase0.prototype.onClose.call(this);
		}

		__proto.createBj=function(){}
		__proto.onOpen=function(){
			var _$this=this;
			view.UIBase0.prototype.onOpen.call(this);
			this.heroUrl=SnowUtils.heroHalfUrl(RoleCenter.I.curHeroID);
			this.hero.skin="res/goods/half/mrt.png";
			this.hero.skin=this.heroUrl;
			this.helpTips.skin="gaming/tips"+GameAgainView.tipsIdx+".png";
			GameAgainView.tipsIdx++;
			if (GameAgainView.tipsIdx==6)GameAgainView.tipsIdx=0;
			this.btnBackHall.visible=true;
			this.btnRebirth.visible=false;
			this.alpha=0;
			Tween.to(this,{alpha:1},500);
			Laya.timer.once(1500,this,function(){
				_$this.btnRebirth.visible=true;
			})
			this.addToParent(this);
		}

		__proto.chkShowBoxFightSet=function(){}
		__proto.onEnd=function(){
			UIMgr.closeUI(GameAgainView);
		}

		// 返回大厅
		__proto.backToHall=function(){
			TipsView.endCloseBack=Handler.create(BjView,BjView.onHide);
			TipsView.myCallback=Handler.create(this,function(){
				GameAgainView._role && GameAgainView._role.destroy();
				SnowUtils.battleMsg.leaveGame();
				GameSocket.I.event("removeGaming");
				UIMgr.closeUI(GameAgainView);
				Player.I.exit();
				var f_e=new fight_exit();
				f_e.event="exitonfight";
				f_e.roomid=GameSocket.roomInfo.id;
				f_e.type=enumRoomType.nowType;
				StatManager.I.addCustom(f_e);
			});
			TipsView.showMe("common/backHall.png",SnowUtils.chkIsFB()?"Are you sure to quit the current battle?":"是否确定退出当前战斗?",TipsView.SHOW_YES_NO,false);
		}

		/**
		*复活
		*
		*/
		__proto.quickRebirth=function(){
			if (this.alpha !=1)
				return;
			this.rebirth();
		}

		__proto.rebirth=function(e){
			GameAgainView._role && GameAgainView._role.clearDieTimer();
			GameAgainView._role && GameAgainView._role.destroy();
			GameAgainView._role=null;
			var msg=MsgTemplate.createWithClass(CMsgRebirth);
			SnowUtils.battleMsg.rebirth(msg);
			msg.release();
			GamingView.I.visible=true;
			UIMgr.closeUI(GameAgainView);
		}

		__proto.onResize=function(){
			var scale=Math.min(Laya.stage.width / Laya.stage.designWidth,Laya.stage.height / Laya.stage.designHeight);
			this.scale(scale,scale);
		}

		__getset(1,GameAgainView,'lastScore',function(){
			return GameAgainView._lastScore;
			},function(value){
			GameAgainView._lastScore=value;
		});

		__getset(1,GameAgainView,'killerName',function(){
			return GameAgainView._killerName;
			},function(value){
			GameAgainView._killerName=value;
		});

		GameAgainView.start=function(role){
			GameAgainView._role=role;
			GamingView.I.visible=false;
			UIMgr.openUIFight(GameAgainView);
		}

		GameAgainView._killerName="";
		GameAgainView._lastScore=-1;
		GameAgainView.tipsIdx=0;
		GameAgainView.I=null
		GameAgainView._role=null
		return GameAgainView;
	})(gameAgainUI)


	/**
	*...
	*@author ...
	*/
	//class view.page.AttackEndPage extends ui.hall.page.gameBalance.AttactEndUI
	var AttackEndPage=(function(_super){
		function AttackEndPage(){
			this._dataCmd=null;
			this.pScale=new Point(1.5,1.5);
			AttackEndPage.__super.call(this);
			this.resList=[
			{url:"res/atlas/gameResult.atlas",type:"atlas" },
			{url:"res/atlas/common.atlas" ,type:"atlas" }];
		}

		__class(AttackEndPage,'view.page.AttackEndPage',_super);
		var __proto=AttackEndPage.prototype;
		__proto.onCreated=function(){
			view.UIBase0.prototype.onCreated.call(this);
		}

		__proto.onClose=function(){
			view.UIBase0.prototype.onClose.call(this);
			this.imgbg.off("click",this,this.onBtnClose);
		}

		// itemList.repeatX=0;
		__proto.onBtnClose=function(){
			Laya.timer.once(100,this,function(){
				this.onClose();
				GamingView.I.onClose();
			});
			AttackEndPage.myCallBack && AttackEndPage.myCallBack.runWith(AttackEndPage.myData);
		}

		__proto.createBj=function(){}
		__proto.onOpen=function(){
			view.UIBase0.prototype.onOpen.call(this);
			UIMgr.closeUI(GameAgainView);
			ShowJiFen.clearAll();
			HotPanelItem.clearAll();
			UIMgr.closeUI(GamingView);
			this._dataCmd=AttackEndPage.myData;
			this.initList();
			this.imgbg.on("click",this,this.onBtnClose);
			this.resultImg.alpha=0;
			this.resultImg.scale(5,5);
			Tween.to(this.resultImg,{alpha:1,scaleX:0.7,scaleY:0.7},500,null,null,200);
			this.addToParent(this);
		}

		/**
		*初始化进攻结算列表
		*/
		__proto.initList=function(){}
		AttackEndPage.showMe=function(bIsShow,myType,dat,callback){
			AttackEndPage.showType=myType;
			AttackEndPage.myCallBack=callback;
			AttackEndPage.myData=dat;
			if(bIsShow){
				GamingView.I.gameCtrl.stopCtrl();
				Player.isStartGame=false;
				UIMgr.openUI(AttackEndPage,"layer_pop5");
			}
			else{
				UIMgr.closeUI(AttackEndPage);
			}
		}

		AttackEndPage.myCallBack=null
		AttackEndPage.showType=0;
		AttackEndPage.myData=null
		return AttackEndPage;
	})(AttactEndUI)


	/**
	*...
	*@author ...
	*/
	//class view.page.GameResultN extends ui.gaming.GameResultNUI
	var GameResultN=(function(_super){
		function GameResultN(){
			this.myRank=0;
			GameResultN.__super.call(this);
			this.resList=[
			{url:"res/atlas/gameResultN.atlas",type:"atlas" },{url:"res/atlas/gameResultN.atlas",type:"atlas" },{url:"res/atlas/gameResultN.atlas",type:"atlas" },
			{url:"res/atlas/common.atlas",type:"atlas" }]
		}

		__class(GameResultN,'view.page.GameResultN',_super);
		var __proto=GameResultN.prototype;
		__proto.onOpen=function(){
			view.UIBase0.prototype.onOpen.call(this);
			UIMgr.closeUI(GameAgainView);
			ShowJiFen.clearAll();
			HotPanelItem.clearAll();
			UIMgr.closeUI(GamingView);
			if(enumRoomType.nowType==100){
				StatManager.I.addTeach(StatManager.I.getStatData(StatID.s4_3_1[0]),true);
			}
			SoundManager.playSound(ConfigData.soundCfg[35]);
			var arr=(GameResultN._dataCmd).usersResultList;
			for (var i=0;i < arr.length;i++){
				if (arr[i].id==GameResultN._dataCmd.userid){
					this.myRank=i+1;
					break ;
				}
			};
			var fromType=SnowUtils.getQueryString("ft");
			var teamId=SnowUtils.getQueryString("td");
			if (!teamId)
				teamId=SnowUtils.getQueryString("rd");
			var info=SnowUtils.getQueryString("ic");
			this.addToParent(this);
		}

		__proto.createBj=function(){}
		__proto.onClose=function(){
			RoleCenter.I.bIsNewPlayer=false;
			var data=NotifyCenter.I.Query("on_GotGameDataResult");
			if (data && data.results && data.results.fjson && data.results.fjson.generalData){
				data.results.fjson.generalData.playTimes=parseInt(data.results.fjson.generalData.playTimes)+1;
				NotifyCenter.I.SetData("on_GotGameDataResult",data);
			}
			data={results:{fjson:{generalData:{playTimes:1}}}};
			NotifyCenter.I.SetData("on_GotGameDataResult",data);
			RoleCenter.I.rank=GameResultN._dataCmd.currentStar;
			HallApp.getGameData({"fjson.generalData":1,"fjson.attributePoint":1});
			view.UIBase0.prototype.onClose.call(this);
		}

		__proto.onCreated=function(){
			view.UIBase0.prototype.onCreated.call(this);
			this.initEvent();
		}

		//Laya.timer.once(1000,this,initEvent)
		__proto.initEvent=function(){
			this.jixuBtn.clickHandler=new Handler(this,this.onJixuClick);
		}

		// gameAgain.visible=false;
		__proto.onAgain=function(){
			StatManager.I.addTeach(StatManager.I.getStatData(StatID.s4_3_8[0]),true);
			this.onTongJi();
			enumRoomType.isAgain=true;
			if(enumRoomType.nowType==100){
				enumRoomType.nowType=1;
				UIMgr.closeUI(GameResultN);
				this.readyToLogin();
				}else{
				this.readyToLogin();
			}
		}

		__proto.onJixuClick=function(){
			StatManager.I.addTeach(StatManager.I.getStatData(StatID.s4_3_9[0]),true);
			this.onTongJi();
			this.onGoBack();
		}

		/**
		*新手前六局统计用户点击关闭按钮的埋点次数
		*/
		__proto.onTongJi=function(){
			if(enumRoomType.nowType==100){
				StatManager.I.addTeach(StatManager.I.getStatData(StatID.s4_3_7[0]));
			}
		}

		/**
		*返回大厅
		*/
		__proto.onGoBack=function(){
			if(enumRoomType.nowType==100){
				StatManager.I.onTeachToMenuList();
			}
			GameSocket.I.event("removeGaming");
			MenuList.fromType=100;
			Player.I.exit();
			enumRoomType.isAgain=false;
		}

		//readyToLogin();
		__proto.readyToLogin=function(){
			GameSocket.I.close();
			GameSocket.I.event("removeGaming");
			Player.I.exit();
		}

		/**
		*炫耀
		*
		*/
		__proto.onXuanYaoClick=function(){
			var duanwei=HallUtil.getSeasonNameByExp(GameResultN._dataCmd.currentStar);
			this.addMaidian();
			RoleCenter.I.shareType=26;
			SnowUtils.rankShare(this.myRank,"duanwei");
		}

		/**关系链炫耀埋点*/
		__proto.addMaidian=function(){
			StatManager.I.v2_share("duanwei");
		}

		GameResultN.onShow=function(data){
			GameResultN._dataCmd=data;
			UIMgr.openUI(GameResultN,"layer_pop5");
		}

		GameResultN._dataCmd=null
		return GameResultN;
	})(GameResultNUI)


	/**
	*...
	*@author ...
	*/
	//class view.page.GameResultPage extends ui.gaming.GameResultUI
	var GameResultPage=(function(_super){
		function GameResultPage(){
			this._duanStep={};
			this.numVal=0;
			this._dataCmd=null;
			this.mBfb=NaN;
			this.dhTimes=0;
			this._xingS_Num=0;
			this.rwArr=[];
			this.pScale=new Point(1,1);
			this.curStar=NaN;
			this.preStar=NaN;
			GameResultPage.__super.call(this);
			this.resList=[
			{url:"res/atlas/gameResult.atlas",type:"atlas" },
			{url:"res/atlas/duanwei.atlas",type:"atlas" },
			{url:"res/atlas/common.atlas" ,type:"atlas" },
			{url:"gameResult/winbg.png",type:"image" },
			{url:"gameResult/losebg.png",type:"image" }];
		}

		__class(GameResultPage,'view.page.GameResultPage',_super);
		var __proto=GameResultPage.prototype;
		__proto.onCreated=function(){
			view.UIBase0.prototype.onCreated.call(this);
		}

		__proto.onClose=function(){
			this.reSetDh();
			view.UIBase0.prototype.onClose.call(this);
		}

		__proto.onBtnClose=function(){
			this.numVal=0;
			var tex=this.resultImg._bitmap.source;
			tex.bitmap.releaseResource();
			UIMgr.closeUI(GameResultPage);
			if((GameResultPage.myData instanceof msgSvr.SMsgGameEndTeam )){
				GameResultPage.myCallBack && GameResultPage.myCallBack.runWith(GameResultPage.myData);
				return;
			}
			MenuList.onShowMe();
			RoleCenter.finalMusic=ConfigData.soundCfg[1];
			SoundManager.playMusic(RoleCenter.finalMusic);
			return;
			if (this._dataCmd.duanweiAward && SnowUtils.chkIsQQ()){
				ShareDuanwei.showSelf(this._duanStep);
				return;
			}
			if (this._dataCmd.currentStar > this._dataCmd.prevStar && this._dataCmd.currentStar !=0){
				var friendDt=[];
				friendDt=NotifyCenter.I.Query("myFriendData_gxl")||[];
				var itemFp;
				var itemFc;
				var flagP=false;
				var flagC=false;
				for (var i=0,length=friendDt.length;i < length;i++){
					if (!flagP){
						itemFp=friendDt [i];
						if (this._dataCmd.prevStar > itemFp.RankValue){
							flagP=true;
						}
					}
					if (!flagC){
						itemFc=friendDt [i];
						if (this._dataCmd.currentStar > itemFc.RankValue){
							flagC=true;
							this.numVal=length-i;
						}
					}
					if (flagP && flagC)
						break ;
				}
			}
			if (!flagP)
				itemFp=null
			if (SnowUtils.battleMsg==RealServer.INSTANCE){
				this.share(itemFc,itemFp);
			}
			else{
				GameResultPage.myCallBack && GameResultPage.myCallBack.runWith(GameResultPage.myData);
			}
		}

		__proto.share=function(itemFc,itemFp){
			var datacmd=this._dataCmd;
			var titleObj;
			if (datacmd && datacmd.usersResultList){
				for (var j=0;j < datacmd.usersResultList.length;j++){
					var obj=datacmd.usersResultList[j];
					if (obj.id==datacmd.userid){
						if (j==0){
							titleObj=obj;
							titleObj.flag=1;
							}else if(obj.medals.indexOf(21)!=-1){
							titleObj=obj;
							titleObj.flag=2;
							}else if (obj.medals.indexOf(24)!=-1){
							titleObj=obj;
							titleObj.flag=3;
						}
					}
				}
			}
			if(SnowUtils.chkIsQQ()){
				var bo=true;
				if(this._dataCmd.newAchieveList){
					for (var k=0,len=this._dataCmd.newAchieveList.length;k < len;k++){
						if (this._dataCmd.newAchieveList[k].level==1){
							bo=false;
							ShareAchieve.showSelf(this._dataCmd.newAchieveList[k],titleObj);
						}
					}
				}
				if(titleObj && bo){
					ShareTitle.showSelf(titleObj,titleObj.flag);
				}
			}
			GameResultPage.myCallBack && GameResultPage.myCallBack.runWith(GameResultPage.myData);
		}

		__proto.createBj=function(){}
		__proto.onOpen=function(){
			view.UIBase0.prototype.onOpen.call(this);
			this._xingS_Num=0;
			UIMgr.closeUI(GameAgainView);
			ShowJiFen.clearAll();
			HotPanelItem.clearAll();
			UIMgr.closeUI(GamingView);
			this._dataCmd=GameResultPage.myData;
			this.imgbg.off("click",this,this.onBtnClose);
			this.setStar(this._dataCmd.prevStar);
			this.setRwInfo(this._dataCmd.prestigeTasks);
			this.resultImg.alpha=0;
			this.resultImg.scale(5,5);
			this.setDwRw();
			Tween.to(this.resultImg,{alpha:1,scaleX:1.3,scaleY:1.3},500,null,null,200);
			Laya.timer.once(750,this,this.starDh);
			if (enumRoomType.nowType==enumRoomType.ROOMTYPE_LADDER){
				this.paiziBox.scale(0.01,0.01);
				Tween.to(this.paiziBox,{scaleX:this.pScale.x,scaleY:this.pScale.y},500,Ease.backOut,Handler.create(this,this.starDh,[this._dataCmd.currentStar-this._dataCmd.prevStar]),250)
			}
			NotifyCenter.I.on('onNotify',this,this.onGotNotify);
			if(enumRoomType.nowType==100){
				StatManager.I.addTeach(StatManager.I.getStatData(StatID.s4_3_1[0]),true);
			}
			else{
				var playTimes=GamingView.I.playTimes;
				if(playTimes >0 && playTimes < 7){
					StatManager.I.addTeach(StatManager.I.getStatData(StatID['s4_'+(5+playTimes)+'_2'][0]),true);
				}
			}
			if(enumRoomType.nowType==100){
				GuideMgrI.instance.clearTime();
			}
			this.jsTt.visible=false;
			this.paiziBox.visible=false;
			this.selfBox.visible=false;
			this.tState.visible=false;
			if(enumRoomType.nowType==enumRoomType.ROOMTYPE_FREE || (this._dataCmd instanceof msgSvr.SMsgGameEndFree )){
				this.selfBox.visible=true;
				this.jsTt.visible=false;
				}else if(enumRoomType.nowType==enumRoomType.ROOMTYPE_LADDER){
				this.jsTt.visible=true;
				this.paiziBox.visible=true;
				}else{
				this.tState.visible=true;
				this.tState.skin=(this._dataCmd).rank==1 ? "gameResult/winbg.png":"gameResult/losebg.png";
				this.tState.alpha=0;
				Tween.to(this.tState,{alpha:1},500,null,null,200);
			}
			if(GameResultPage.myData){
				if ((GameResultPage.myData instanceof msgSvr.SMsgGameEndFree )){
					var free=GameResultPage.myData;
					this.resultImg.skin="gameResult/dwEnd.png";
					SoundManager.playSound(ConfigData.soundCfg[35]);
				}
				else{
					this.resultImg.skin="gameResult/dwEnd.png";
					SoundManager.playSound(ConfigData.soundCfg[35]);
				}
				Laya.timer.once(1100,this,this.dH4);
			}
			this.addToParent(this);
		}

		//}
		__proto.onGotNotify=function(data){}
		/**初始化段位图标*/
		__proto.initDuanWeiIcon=function(_curObj,_curCfg,curStar){
			this.levelClip1.index=_curObj.jie-1;
			this.paiLevelClip1.index=_curObj.jie-1;
			var tempValue=_curCfg.rankLv-1;
			this.typeName.skin="duanwei/d"+tempValue+".png";
			this.paizi1.skin="duanwei/steps"+tempValue+".png";
			if (tempValue > 4){
				this.paiLevelClip1.visible=false;
			}
			else{
				this.paiLevelClip1.skin="duanwei/s"+tempValue+".png"
				this.paiLevelClip1.visible=true;
			}
			if (curStar >=dwIcon.MAX_STAR){
				this.levelClip1.visible=false;
				this.typeName.x=195;
				this.starNum1.text=(curStar-dwIcon.MAX_STAR)+"";
			}
			else{
				this.typeName.x=181;
				this.levelClip1.visible=true;
				this.starMbox1.visible=false;
			}
		}

		__proto.dH1=function(){}
		//Tween.to(body,{alpha:1},200,Ease.quartIn,Handler.create(this,dH2));
		__proto.dH2=function(){}
		//Tween.to(ylBox,{alpha:1},300,null,Handler.create(this,dH3))
		__proto.dH3=function(){
			if (this.mBfb > 0){
				var sp=new Sprite();
				sp.x=0;
				Tween.to(sp,{x:this.mBfb,update:new Handler(this,myUdt=function(){
				})},500,null,Handler.create(this,this.dH4),1100);
			}
			else{
				Laya.timer.once(1100,this,this.dH4);
			}
		}

		__proto.dH4=function(){
			this.imgbg.on("click",this,this.onBtnClose);
		}

		/**
		*获取下一阶段有奖励时的段位表数据
		*@param curStarNum
		*@return
		*/
		__proto.getNextRewardCfg=function(curStarNum){
			var all=ConfigData.duanweiCfgByStar;
			var voCfg;
			for (var key in all){
				voCfg=all [key];
				if (!voCfg)continue ;
				if (voCfg.starReq <=curStarNum)continue ;
				if (!voCfg.rewardId || !voCfg.rewardId.length)continue ;
				return voCfg;
			}
			return null;
		}

		__proto.getPreRewardCfg=function(curId){
			var num=Math.floor(curId / 100);
			if (num-1 > 10){
				return num *100+51;
			}
			else
			return 1051;
		}

		__proto.setDwRw=function(){}
		__proto.starDh=function(num){
			var _$this=this;
			if (num==0)
				this.dH4();
			if (!this.preStar)
				this.preStar=this._dataCmd.prevStar;
			var curStar=this.preStar+(num > 0?1:-1);
			var curObj;
			var preObj;
			var _curCfg;
			var _prevCfg;
			if (num < 0){
				if (curStar >=dwIcon.MAX_STAR-1){
					Tween.to(this.paiziBox,{scaleY:0},250,null,Handler.create(this,function(){
						_$this.setStar(curStar);
						Tween.to(_$this.paiziBox,{scaleY:_$this.pScale.y},250,null,Handler.create(this,function(){
							num+=1;
							_$this.preStar=curStar;
							if (num)
								_$this.starDh(num);
							else
							_$this.dH4();
						}))
					}))
				}
				else{
					_curCfg=ConfigData.duanweiCfgByStar [this.preStar];
					curObj=SnowUtils.getJieAndStar(_curCfg.id);
					if (_curCfg.maxStar==3)
						curObj.star=curObj.star+2;
					else if (_curCfg.maxStar==4){
						curObj.star=curObj.star+1;
						if(curObj.star >=4){
							curObj.star+=1;
						}
					}
					else if(_curCfg.maxStar==5)
					curObj.star=curObj.star+1;
					else if(_curCfg.maxStar==6){
						curObj.star=curObj.star;
						if(curObj.star >=4){
							curObj.star+=1;
						}
					}
					this["dh"+curObj.star].visible=true;
					this["s"+curObj.star].index=1;
					Tween.to(this["dh"+curObj.star],{alpha:0,scaleX:3,scaleY:3},500,null,Handler.create(this,function(){
						this["dh"+curObj.star].alpha=1;
						this["dh"+curObj.star].scale(1,1);
						this["dh"+curObj.star].visible=false;
						_$this.setStar(curStar);
						num+=1;
						_$this.preStar=curStar;
						if (num)
							_$this.starDh(num);
						else
						_$this.dH4();
					}))
				}
			}
			else if (num > 0){
				if (curStar > dwIcon.MAX_STAR){
					this.dh4.visible=true;
					this.xingSound();
					this.dh4.scale(5,5);
					this.dh4.alpha=0;
					Tween.to(this.dh4,{scaleX:1,scaleY:1,alpha:1},500,Ease.quadIn,Handler.create(this,function(){
						_$this.dh4.alpha=1;
						_$this.dh4.scale(1,1);
						_$this.dh4.visible=false;
						_$this.setStar(curStar);
						num-=1;
						_$this.preStar=curStar;
						if (num)
							_$this.starDh(num);
						else{
							_$this.dh4.visible=true;
							_$this.dH4();
						}
					}))
				}
				else if (curStar==dwIcon.MAX_STAR){
					Tween.to(this.paiziBox,{scaleY:0},250,null,Handler.create(this,function(){
						_$this.setStar(curStar);
						Tween.to(_$this.paiziBox,{scaleY:_$this.pScale.y},250,null,Handler.create(this,function(){
							num-=1;
							_$this.preStar=curStar;
							if (num)
								_$this.starDh(num);
							else{
								_$this.dh4.visible=true;
								_$this.dH4();
							}
						}))
					}))
				}
				else{
					_curCfg=ConfigData.duanweiCfgByStar [curStar];
					_prevCfg=ConfigData.duanweiCfgByStar [this.preStar];
					curObj=SnowUtils.getJieAndStar(_curCfg.id);
					preObj=SnowUtils.getJieAndStar(_prevCfg.id);
					var timeNum=0;
					if (_curCfg.maxStar==3)
						curObj.star=curObj.star+2;
					else if (_curCfg.maxStar==4){
						curObj.star=curObj.star+1;
						if(curObj.star >=4){
							curObj.star+=1;
						}
					}
					else if(_curCfg.maxStar==5)
					curObj.star=curObj.star+1;
					else if(_curCfg.maxStar==6){
						curObj.star=curObj.star;
						if(curObj.star >=4){
							curObj.star+=1;
						}
					};
					var curStarObj=this["dh"+curObj.star];
					if (curObj.jie < preObj.jie || _curCfg.rankLv > _prevCfg.rankLv){
						timeNum=250;
						SoundManager.playSound(ConfigData.soundCfg[115]);
						Tween.to(this.paiziBox,{scaleY:0},timeNum,null,Handler.create(this,function(){
							_$this.setStar(curStar);
							curStarObj.alpha=0;
							curStarObj.scale(5,5);
							curStarObj.visible=true;
							this["s"+curObj.star].index=1;
							Tween.to(_$this.paiziBox,{scaleY:_$this.pScale.y},timeNum,null,Handler.create(this,function(){
								_$this.xingSound();
								Tween.to(curStarObj,{alpha:1,scaleX:1,scaleY:1},500,Ease.quadIn,Handler.create(this,sxdh));
							}));
						}));
						if (_curCfg.rankLv > _prevCfg.rankLv){
							this._duanStep.rank=_curCfg.rankLv-1;
							this._duanStep.jie=curObj.jie;
						}
					}
					else{
						curStarObj.alpha=0;
						curStarObj.scale(5,5);
						curStarObj.visible=true;
						this["s"+curObj.star].index=1;
						this.xingSound();
						Tween.to(curStarObj,{alpha:1,scaleX:1,scaleY:1},500,Ease.quadIn,Handler.create(this,sxdh));
					}
					function sxdh (){
						curStarObj.alpha=0;
						curStarObj.scale(1,1);
						curStarObj.visible=false;
						_$this["s"+curObj.star].visible=true;
						num-=1;
						_$this.preStar=curStar;
						_$this.setStar(curStar);
						if (num)
							_$this.starDh(num);
						else{
							_$this.dH4();
						}
					}
				}
			}
		}

		__proto.setStarLight=function(){
			var _curCfg=ConfigData.duanweiCfgByStar [this._dataCmd.currentStar];
			if (this._dataCmd.currentStar < dwIcon.MAX_STAR){
				var obj=SnowUtils.getJieAndStar(_curCfg.id);
				if (_curCfg.maxStar==3)
					obj.star=obj.star+2;
				else if (_curCfg.maxStar==4){
					obj.star=obj.star+1;
					if(obj.star >=4){
						obj.star+=1;
					}
				}
				else if(_curCfg.maxStar==5)
				obj.star=obj.star+1;
				else if(_curCfg.maxStar==6){
					obj.star=obj.star;
					if(obj.star >=4){
						obj.star+=1;
					}
				};
				var num=this._dataCmd.currentStar-this._dataCmd.prevStar;
				if (num==1){
					this["dh"+obj.star].alpha=0;
					this["dh"+obj.star].visible=true;
					this["ani"+obj.star].play(0);
				}
				else if(num==2){
					this["dh"+obj.star].visible=true;
					this["dh"+obj.star].alpha=0;
					this["ani"+obj.star].play(0);
					if(this["s"+(obj.star-1)] && this["s"+(obj.star-1)].visible==true){
						this["ani"+(obj.star-1)] && this["ani"+(obj.star-1)].play(0);
						if(this["dh"+(obj.star-1)]){
							this["dh"+(obj.star-1)].visible=true;
							this["dh"+(obj.star-1)].alpha=0;
						}
					}
				}
			}
		}

		__proto.xingSound=function(){
			this._xingS_Num++
			if(this._xingS_Num==1)SoundManager.playSound(ConfigData.soundCfg[113]);
			else if(this._xingS_Num==2)SoundManager.playSound(ConfigData.soundCfg[114]);
		}

		/**
		*重置动画
		*/
		__proto.reSetDh=function(){
			return;
			this.curStar=NaN;
			this.preStar=NaN;
			for (var i=1;i <=7;i++){
				this["dh"+i].visible=false;
				this["ani"+i].stop();
			}
		}

		/**
		*设置完成任务信息
		*@param rw
		*/
		__proto.setRwInfo=function(rw){
			this.rwBox.visible=false;
			return;
			if (!rw || !rw.length){
				this.text_rw1.text="";
				this.text_rw2.text="";
				this.rwBox.visible=false;
				return;
			};
			var rw1=rw [0];
			var rw2=rw [1];
			var voDwTcfg1=ConfigData.duanweiTaskCfg [rw1.id];
			if (voDwTcfg1 && voDwTcfg1.msg)
				this.text_rw1.text=voDwTcfg1.msg;
			else
			this.text_rw1.text=rw1.id+"";
			var voDwTcfg2=ConfigData.duanweiTaskCfg [rw2.id];
			if (voDwTcfg2 && voDwTcfg2.msg)
				this.text_rw2.text=voDwTcfg2.msg;
			else
			this.text_rw2.text=rw2.id+"";
			voDwTcfg1.msg=voDwTcfg1.msg.replace(" ","");
			voDwTcfg2.msg=voDwTcfg2.msg.replace(" ","");
			if(rw1.status==2){
				this.text_rw1.color="#ffffff";
				this.text_rw1.text=voDwTcfg1.msg;
				if (voDwTcfg1.getStar==1){
					this.text_rw1.text+="+"
				}
				else{
					this.text_rw1.text+="-"
				}
				this.star1.x=this.text_rw1.x+this.text_rw1.textWidth;
				this.star1.gray=false;
				}else{
				this.text_rw1.text=voDwTcfg1.wmsg;
				this.text_rw1.text+="+";
				this.star1.x=this.text_rw1.x+this.text_rw1.textWidth;
				this.star1.gray=true;
				this.text_rw1.color="#cccccc";
			}
			if(rw2.status==2){
				this.text_rw2.color="#ffffff";
				this.text_rw2.text=voDwTcfg2.msg;
				if (voDwTcfg2.getStar==1){
					this.text_rw2.text+="+";
				}
				else{
					this.text_rw2.text+="-";
				}
				this.star2.gray=false;
				this.star2.x=this.text_rw2.x+this.text_rw2.width;
				}else{
				this.text_rw2.text=voDwTcfg2.wmsg;
				this.text_rw2.text+="+";
				this.star2.x=this.text_rw2.x+this.text_rw2.textWidth;
				this.star2.gray=true;
				this.text_rw2.color="#cccccc";
			}
			this.timer.callLater(this,this.onReP);
		}

		__proto.onReP=function(){
			this.rwb1.event("added");
			this.rwb2.event("added");
		}

		/**
		*根据星星设置显示情况
		*@param num 当前段位星星数
		*/
		__proto.setStar=function(num){
			var curCfg=ConfigData.duanweiCfgByStar [num];
			if (curCfg && num !=dwIcon.MAX_STAR){
				var obj=SnowUtils.getJieAndStar(curCfg.id);
				this.initDuanWeiIcon(obj,curCfg,num)
				this.starMbox1.visible=false;
				if(curCfg.maxStar%2==1){
					this.s1.x=this.dh1.x=67;
					this.s2.x=this.dh2.x=137;
					this.s3.x=this.dh3.x=207;
					this.s4.x=this.dh4.x=278;
					this.s5.x=this.dh5.x=348;
					this.s6.x=this.dh6.x=418;
					this.s7.x=this.dh7.x=488;
					}else{
					this.s1.x=this.dh1.x=67;
					this.s2.x=this.dh2.x=151;
					this.s3.x=this.dh3.x=235;
					this.s4.x=this.dh4.x=278;
					this.s5.x=this.dh5.x=320;
					this.s6.x=this.dh6.x=404;
					this.s7.x=this.dh7.x=488;
				}
				if (curCfg.maxStar==3){
					this.s1.visible=false;
					this.s7.visible=false;
					this.s2.visible=false;
					this.s6.visible=false;
					this.s3.visible=true;
					this.s4.visible=true;
					this.s5.visible=true;
					this.setStarStat(3,obj.star,curCfg.maxStar)
				}
				else if(curCfg.maxStar==4){
					this.s4.visible=false;
					this.s7.visible=false;
					this.s1.visible=false;
					this.s2.visible=true;
					this.s3.visible=true;
					this.s5.visible=true;
					this.s6.visible=true;
					this.setStarStat(2,obj.star,curCfg.maxStar)
				}
				else if (curCfg.maxStar==5){
					this.s1.visible=false;
					this.s7.visible=false;
					this.s2.visible=true;
					this.s3.visible=true;
					this.s4.visible=true;
					this.s5.visible=true;
					this.s6.visible=true;
					this.setStarStat(2,obj.star,curCfg.maxStar)
				}
				else if(curCfg.maxStar==6){
					this.s4.visible=false;
					this.s2.visible=true;
					this.s3.visible=true;
					this.s5.visible=true;
					this.s6.visible=true;
					this.s7.visible=true;
					this.s1.visible=true;
					this.setStarStat(1,obj.star,curCfg.maxStar)
				}
				else{
					this.s1.visible=true;
					this.s2.visible=true;
					this.s3.visible=true;
					this.s4.visible=true;
					this.s5.visible=true;
					this.s6.visible=true;
					this.s7.visible=true;
					this.setStarStat(1,obj.star,curCfg.maxStar)
				}
			}
			else{
				curCfg=ConfigData.duanweiCfgByStar [dwIcon.MAX_STAR];
				var obj2=SnowUtils.getJieAndStar(curCfg.id);
				this.initDuanWeiIcon(obj2,curCfg,num)
				for (var i=1;i < 8;i++)
				this["s"+i].visible=false;
				this["s"+4].visible=true;
				this.starMbox1.visible=true;
				this.starNum1.text=(num-dwIcon.MAX_STAR);
			}
		}

		/**
		*设置星星的状态
		*@param start //从第几颗开始
		*@param have //拥有几个
		*/
		__proto.setStarStat=function(start,have,max){
			for (var i=start;i < start+max;i++){
				if (i < start+have){
					if(max%2==1){
						this["s"+i].index=0;
						}else{
						if(i>=4){
							this["s"+(i+1)].index=0;
							}else{
							this["s"+i].index=0;
						}
					}
				}
				else{
					if(max%2==1){
						this["s"+i].index=1;
						}else{
						if(i>=4){
							this["s"+(i+1)].index=1;
							}else{
							this["s"+i].index=1;
						}
					}
				}
			}
		}

		GameResultPage.showMe=function(bIsShow,myTpye,dat,callback){
			GameResultPage.showType=myTpye;
			GameResultPage.myCallBack=callback;
			GameResultPage.myData=dat;
			if(bIsShow){
				GamingView.I.gameCtrl.stopCtrl();
				Player.isStartGame=false;
				UIMgr.openUI(GameResultPage,"layer_pop5");
			}
			else{
				UIMgr.closeUI(GameResultPage);
			}
		}

		GameResultPage.myCallBack=null
		GameResultPage.showType=0;
		GameResultPage.myData=null
		return GameResultPage;
	})(GameResultUI)


	/**
	*战斗时的UI
	*...
	*@author anling
	*/
	//class view.page.GamingView extends ui.gaming.GamingUI
	var GamingView=(function(_super){
		function GamingView(){
			this.playTimes=0;
			this.isAttackHit=false;
			this.isNewUseSkill=false;
			this.battleData=null;
			this.isClickNormalBtn=false;
			this.isUseSkill=false;
			this._minutes=0;
			this._seconds=0;
			this.gameCtrl=null;
			this.passiveSkills=null;
			this.curMainSkill=null;
			this._curType=0;
			this.myBg=null;
			this.isPreThree=false;
			this.snowStorm=null;
			this.listSkillButton=[];
			this.skill1Flag=false;
			this.skill3Flag=false;
			this.shootLater=false;
			this.ispgCd=false;
			this.preEvent=null;
			this.currentData={priority:0,data:null};
			this.musicArr=[];
			this.preChannel=null;
			this.headImg={};
			this.preHandle=null;
			this.uAvtor1m=[];
			this.uAvtor2m=[];
			this.preScore=0;
			this._isRenderOwner=false;
			this._isRenderOther=false;
			this.timeSpan=NaN;
			this.gameTime=NaN;
			this._oldMinutes=0;
			this.isLoadFlag=false;
			this.loadTime=0;
			this.a=0;
			GamingView.__super.call(this);
			this.showPao=new NewPaopaoUI();
			this.daoword=new WordText();
			this.passiveSkills=new PassiveSkills();
			this.curMainSkill=new SkillInfo(-1,2,1,1,null);
		}

		__class(GamingView,'view.page.GamingView',_super);
		var __proto=GamingView.prototype;
		/**
		*初始化技能按钮
		*@param btn
		*/
		__proto.removeBtnState=function(btn){
			var skillNum=btn.getChildByName("skillNum");
			btn.mouseEnabled=true;
			if(skillNum){
				skillNum.visible=false;
				btn.skin="gaming/imgnot.png";
			}
			(btn).isEmpty=true;
		}

		__proto.emptyClck=function(btn,index){
			this.showMessge(btn,"获取技能",3000);
		}

		__proto.showMessge=function(btn,txt,time){}
		//timer.once(time,this,function hideTip(box:Box):void{box.visible=false ;},[box_skillTip]);
		__proto.showMessageUse=function(btn,txt,time){
			var maskSkill=btn.getChildByName("maskSkill");
			if (!maskSkill || maskSkill.graphics._one){
				return;
			}
			this.showMessge(btn,txt,time);
		}

		/**
		*@param data {gameId:1000,userId:500,code:0}
		*<br> code 0 表示成功，-1 为系统 PHP 请求失败，-70011 为内容含有屏蔽词，其它值为各种错误码
		*/
		__proto.onGotClientResult=function(data){
			if (data.code==0){}
				else{
				TipsManager.instance.showText("数据存储失败!");
			}
		}

		// netWorkControl.detroy();
		__proto.onCreated=function(){
			view.UIBase0.prototype.onCreated.call(this);
			this.on("onSelectSkill",this,this.onSelectSkill);
			NotifyCenter.I.on('onGotClientObjectResult',this,this.onGotClientResult);
			this.tabmoshi.selectHandler=new Handler(this,this.onTabMoShiSelectHandler);
			if(Render.isWebGL){
				{
					this.myBg=new SnowEffect();
					this.myBg.init("res/atlas/ani/snow.atlas",20,28);
					this.myBg.mouseEnabled=false;
					this.addChild(this.myBg);
				}
			}
			this.btn_fightSet.on("click",this,this.onFightSetClick);
			this.worldList.renderHandler=new Handler(this,this.worldRender);
			this.speakList.renderHandler=new Handler(this,this.speakRender);
			this.speak1.on("click",this,this.speakClick,[1]);
			this.speak2.on("click",this,this.speakClick,[2]);
			this.speak3.on("click",this,this.speakClick,[3]);
			this.speakSelf.on("click",this,this.selectClick,[this.speakSelf,this.speakAll]);
			this.speakAll.on("click",this,this.selectClick,[this.speakAll,this.speakSelf]);
		}

		/**模式设置**/
		__proto.onTabMoShiSelectHandler=function(index){
			if(index==0){
				this._curType=0x2;
				}else{
				this._curType=0x1;
			};
			var clientData;
			if(NotifyCenter.I.Query("client_data"))
				clientData=NotifyCenter.I.Query("client_data");clientData=clientData|| new ClientData();
			clientData.fightSetType=this._curType;
			HallApp.setClientObject(clientData);
			if(MsgManager.isInRoom){
				view.page.GamingView.I.changeAttackType(this._curType);
				view.page.GamingView.I.removeBox_fightSetTips();
				GameAgainView.I && GameAgainView.I.chkShowBoxFightSet();
			}
		}

		/**
		*选择发送全部还是队友
		*/
		__proto.selectClick=function(t1,t2){
			t1.selected=true;
			t2.selected=false;
		}

		/**
		*战斗短语点击
		*@param type
		*/
		__proto.speakClick=function(type){
			var now=Laya.timer.currTimer;
			var cd=ConfigData.speakWorld[type].cd+now;
			var looptime=200;
			if (cd < 500){
				looptime=60;
			}
			if (type==1 || type==2){
				this.speak2.mouseEnabled=false;
				this.speak1.mouseEnabled=false;
				this.cdLoop4(now,now,cd);
				Laya.timer.loop(looptime,this,this.cdLoop4,[now,now,cd]);
				this.cdLoop5(now,now,cd);
				Laya.timer.loop(looptime,this,this.cdLoop5,[now,now,cd]);
				var cmd=MsgTemplate.createWithClass(CMsgSpeak);
				cmd.worldKey=type;
				cmd.type=1;
				GameSocket.sendClientMsg(cmd);
				}else if(type==3){
				this.speakBox.visible=true;
				this.ctrlLayer.on("click",this,this.onClosSpeakBox);
			}
		}

		/**
		*关闭战斗短语盒子
		*/
		__proto.onClosSpeakBox=function(){
			this.speakBox.visible=false;
			this.ctrlLayer.off("click",this,this.onClosSpeakBox);
		}

		__proto.onBtnMousedDown=function(index){}
		//}
		__proto.onBtnMouseUp=function(index){}
		//}
		__proto.onSkill4BtnClick=function(){
			TipsManager.instance.showText("当前没有技能可以使用!");
		}

		__proto.createBj=function(){}
		__proto.onClose=function(){
			UIMgr.closeUI(TrainingEndPage);
			view.UIBase0.prototype.onClose.call(this);
		}

		__proto.onFightSetClick=function(){}
		//UIMgr.openUI(SetupInfo);
		__proto.initBox_fightSetTips=function(){
			var clientData=NotifyCenter.I.Query("client_data");
			if (clientData && clientData.fightSetType){
				this.removeBox_fightSetTips();
				return;
			}
			this.box_fightSetTips.visible=true;
			Laya.timer.loop(30000,this,this.playFSTips);
			this.playFSTips();
		}

		__proto.playFSTips=function(){
			var _$this=this;
			this.FSImg.alpha=0;
			Tween.to(this.FSImg,{alpha:1},500,null,Handler.create(this,function(){
				_$this.FSTips.play(0,false);
			}))
		}

		__proto.removeBox_fightSetTips=function(){
			if (!this.box_fightSetTips.visible)return;
			this.box_fightSetTips.visible=false;
			Laya.timer.clear(this,this.playFSTips);
			this.FSTips.stop();
		}

		__proto.onSelectSkill=function(msg){
			var skills=msg.activeSkill;
			var isEat=!!msg.isEat;
			for (var i=0;i < skills.length;i++){
				var item=skills [i];
				this.initSkill(item,isEat);
			}
		}

		__proto.update=function(t){
			this.curMainSkill && this.curMainSkill.update(t);
		}

		__proto.changeSkillText=function(){
			var txt=this.skillbox1.btnskill.getChildByName("skillNum");
			if (txt){
				txt.visible=true;
				txt.value="x"+this.curMainSkill.curFloor;
			}
		}

		__proto.initChongNeng=function(){}
		__proto.changeChongNeng=function(maxFloor){
			var skillIndex=2;
			var btn=this.listSkillButton[skillIndex];
			var skillId=btn.skillid;
			var curFloor=1;
			if (maxFloor <=1){
				this.curMainSkill.initSKillInfo(skillId,skillIndex,curFloor,maxFloor,null);
			}
			else{
				this.curMainSkill.initSKillInfo(skillId,skillIndex,curFloor,maxFloor,this.changeSkillText.bind(this));
				var txt=btn.getChildByName("skillNum");
				txt && (txt.visible=true);
				txt && (txt.value="x"+curFloor);
			}
		}

		/**
		*初始化技能
		*@param skill
		*@param isEat 标识是否是获得技能， true-获得，false-更新技能数据
		*/
		__proto.initSkill=function(skill,isEat){
			var skillId=skill.skillId;
			var skillIndex=skill.skillIndex;
			var url=SnowUtils.getSkillIconUrl(skillId);
			var btn=(this.listSkillButton [skillIndex]);
			if (skillIndex==3){
				btn=this.listSkillButton[0];
				(btn).xulisid=skill.skillId;
				return;
			}
			if (btn){
				var lc=skill.leftCount;
				if (!lc){
					this.removeBtnState(btn);
				}
				else{
					(btn).skillid=skillId;
					(btn).cd=skill.cd;
					var user=Player.curUser;
					user&&user.setSkill(skillIndex,lc==0?0:skillId,lc);
					btn.visible=true;
					var skillVo=ConfigData.skillCfg [skillId];
					var isTwo=skillVo.isTwo;
					(btn).needDouble=isTwo;
					(btn).canXuliTime=(null==(skillVo.canXuliTime))?ActorObject.XULIBEGINTIME:skillVo.canXuliTime;
					var tempSKill;
					if (skillIndex==2){
						tempSKill=this.skillbox1;
					}
					else if (skillIndex==1){
						tempSKill=this.skillbox2;
					}
					else{
						tempSKill=this.btnAttack;
					}
					tempSKill.initSKillButton(skillIndex,isTwo,this.listSkillButton);
					if (lc==-1 && skillIndex==2){
						this.changeChongNeng(1);
					};
					var txt=btn.getChildByName("skillNum");
					txt && (txt.visible=(lc !=-1));
					txt && (txt.value=lc+"");
					if (isEat){
						this.showSkillTip(btn,skillId);
					}
					if (this.getShowFlag()&& !this.skill1Flag){
						if (skillIndex==2){
							this.a1.play();
						}
					}
					(btn).isEmpty=false;
					if (skillIndex==0){
						if (skillId==280001){
							btn.skin="gaming/snowYS.png";
							}else{
							btn.skin="gaming/snow.png";
						}
						return;
					}
					SnowLoad.I.load(url,Handler.create(this,function(b){
						b.skin=url;
					},[btn]));
				}
			}
		}

		__proto.showSkillTip=function(btn,skillId){
			var skillVo=ConfigData.skillCfg [skillId];
			this.showMessge(btn,skillVo.name,2000);
		}

		/**
		*死亡清除技能
		*/
		__proto.clearSkill=function(){
			Player.I.setGhost(false);
			this.clearCD();
			this.ispgCd=false;
			this.shootLater=false;
			this.preEvent=null;
			this.skillbox1.removeBtnState();
			this.skillbox2.removeBtnState();
			this.btnAttack.removeBtnState();
			this.skill1Flag=false;
			this.skill3Flag=false;
			this.gameCtrl.unattach();
			this.curMainSkill && this.curMainSkill.clear();
		}

		__proto.startSnow=function(lastTime){this.snowStorm=this.snowStorm|| new Snowstorm();
			this.snowStorm.begin(this.ctrlLayer,lastTime,this.width,this.height);
		}

		__proto.endSnow=function(){
			if (this.snowStorm){
				this.snowStorm.end();
			}
		}

		__proto.init=function(){
			this.haveSkill.visible=false;
			this._oldMinutes=-1;
			this.isLoadFlag=false;
			this.skillbox1.removeBtnState();
			this.skillbox2.removeBtnState();
			this.btnAttack.removeBtnState();
			(this.btnAttack.clipAttack).xulisid=null;
			this.kill.visible=false;
			this.isPreThree=RoleCenter.I.rank<3;
			this.shootLater=false;
			this.ispgCd=false;
			this.preEvent=null;
			this.kill.scale(1,1);
			this.kill.alpha=1;
			this.clearCD();
			this.arrows.visible=false;
			this.labelEnd.visible=false;
			this.bgEnd.visible=false;
			this.visible=true;
			GameSocket.I.on("initGameTime",this,this.initGameTime);
			GameSocket.I.on("updateRank",this,this.updateList);
			GameSocket.I.on("updateMyRank",this,this.updateMyList);
			GameSocket.I.on("removeGaming",this,this.closeView);
			GameSocket.I.on("playerRestart",this,this.openGameAgainView);
			GameSocket.I.on("updateLevel",this,this.onUpdataLevel);
			this.viewInfo.backHomeBtn.on("click",this,this.backToHall);
			if (!this.gameCtrl){
				this.gameCtrl=new GameController();
				this.on("onBattleInfoType",this,this.onBattleInfoType);
				this.on("onUseSKill",this,this.onUserSkill);
				this.on("onRankQueen",this,this.updateQueenList);
				this.on("onRankGen" ,this,this.updateGemList);
			}
			this.gameCtrl.init();
			this.changeMouseEvent(false);
			this.viewInfo.restart();
			HotPanelItem.init(this);
			this.hideTips(false);{
				this.ctrlLayer.addChild(this.gameCtrl);
			}
			this.onResize();
			Laya.stage.on("resize",this,this.onResize);
			this.no1.visible=false;
			this.bearRefresh.visible=false;
			this.statFightSet();
			this.passiveSkills.initOne(this.haveSkill,this.choose0,this.choose1,this.choose2,this.skilldesc,this.skilldescText);
			this.speakInit();
			this.initgetSnow();
			if(enumRoomType.nowType==100)GuideMgrI.reconnect();
		}

		__proto.initgetSnow=function(){}
		//enablePick(false);
		__proto.enablePick=function(b){}
		/**
		*团战聊天初始化
		*/
		__proto.speakInit=function(){
			GamingView.soundCtr={};
			this.speakBox.visible=false;
			this.speakSelf.selected=true;
			this.speakAll.selected=false;
			if (enumRoomType.isTeam()){
				this.speakList.visible=true;
				this.speakMain.visible=true;
				this.speakList.array=[];
				if (enumRoomType.nowType==enumRoomType.ROOMTYPE_TEAM2V2)
					this.speakMain.top=130;
				else
				this.speakMain.top=70;
				}else{
				this.speakList.visible=false;
				this.speakMain.visible=false;
			}
		}

		/**
		*发出的战斗短语列表渲染
		*/
		__proto.speakRender=function(item,index){
			(item).innerHTML=item.dataSource;
		}

		/**
		*战斗短语列表渲染
		*/
		__proto.worldRender=function(item,index){
			(item).text=item.dataSource.worldVal;
			item.on("click",this,this.onWorldClick,[item.dataSource.key]);
		}

		/**
		*发送战斗短语
		*/
		__proto.onWorldClick=function(key){
			var now=Laya.timer.currTimer;
			var cd=ConfigData.speakWorld[key].cd+now;
			this.speak3.mouseEnabled=false;
			this.cdLoop3(now,now,cd);
			var looptime=200;
			if (cd < 500){
				looptime=60;
			}
			Laya.timer.loop(looptime,this,this.cdLoop3,[now,now,cd]);
			view.page.GamingView.I.speakBox.visible=false;
			var cmd=MsgTemplate.createWithClass(CMsgSpeak);
			cmd.worldKey=key;
			cmd.type=this.speakSelf.selected ? 1:2;
			GameSocket.sendClientMsg(cmd);
			cmd.release();
		}

		__proto.stack=function(index){
			if (index==0){
			}
		}

		//cmd.release();
		__proto.moveToLeft=function(){
			Tween.to(this.showPao,{scaleX:1,scaleY:1,x:this.skillbox1.x+this.skillbox1.width*this.skillbox1.scaleX / 2,y:this.skillbox1.y},500);
			Tween.to(this.showPao,{scaleX:0,scaleY:0},500,null,Handler.create(this,this.removeTips),4000);
		}

		__proto.removeTips=function(){
			this.showPao && this.showPao.removeSelf();
		}

		__proto.statFightSet=function(){
			var vod=ConfigData.duanweiCfgByStar [RoleCenter.I.rank];
			var clientData=NotifyCenter.I.Query("client_data");
			var modeType=0;
			if(clientData){
				modeType=clientData.fightSetType || RoleCenter.DEFAULTATTACKTYPE;
				}else{
				modeType=RoleCenter.DEFAULTATTACKTYPE;
			};
			var sobg=new StatOpmodeByGrade();
			sobg.event="v2_opmodebygrade";
			sobg.showtotal="show";
			sobg.mode=modeType;
			sobg.grade=vod ? vod.rankLv :0;
			StatManager.I.addCustom(sobg);
		}

		/**
		*设置操作模式
		*@param type
		*/
		__proto.changeAttackType=function(type){
			this.gameCtrl.changeAttackType(type);
		}

		/**
		*重置事件 技能按钮 普攻按钮 是否双摇杆
		*@param isDoubleContrl
		*/
		__proto.changeMouseEvent=function(isDoubleContrl){
			this.skillbox1.initSKillButton(2,isDoubleContrl,this.listSkillButton);
			this.skillbox2.initSKillButton(1,isDoubleContrl,this.listSkillButton);
			this.btnAttack.initSKillButton(0,isDoubleContrl,this.listSkillButton);
		}

		__proto.guideClick=function(index){
			if(index==0){
				GuideMgrI.instance.isAttack=true;
				GuideMgrI.instance.attackNum=0;
			}
		}

		// }
		__proto.realButtonDown=function(b,index,eve){
			if(enumRoomType.nowType==100){
				this.guideClick(index);
			}
			Player.btnIndex=index;
			this.beginSkill((b).skillid,index);
			Player.curUser && Player.curUser.buttonDown(b);
			if ((b).isDobuleContrl){
				b.on("mousemove",this,this.openDoubleCtrl,[b,eve]);
			}
			if ((b).isDowned){
				Player.curUser && Player.curUser.setCanMove(true,0x1);
			}
			(b).isDowned=true;
		}

		//Laya.timer.once(ActorObject.XULIBEGINTIME,this,beginXuli,[index]);
		__proto.realButtonUp=function(b,index){
			Laya.timer.clear(this,this.beginXuli);
			b.off("mouseout",b.parent,(b.parent).onButtonUp);
			var user=Player.curUser;
			if (!user || user.destroyed)return;
			user.buttonUp();
			b.off("mousemove",this,this.openDoubleCtrl);
			var r=Player.curUser.attackCircle.getRadius();
			if (enumRoomType.nowType==100){
				if ((b).isXuli){
					this.btnAttack.event("xuli",index);
					if (!CheckAttackButton.enableXULI){
						user.onEndXuli(0);
						this.gameCtrl.unattach();
						(b).isXuli=false;
						return;
					}
				}
				else if(CheckAttackButton.onlyXuli){
					this.gameCtrl.unattach();
					return;
				}
			}
			this.onSkill(b,index,r);
			this.gameCtrl.unattach();
			(b).isXuli=false;
		}

		/**
		*开始蓄力
		*@param index
		*/
		__proto.beginXuli=function(index,e){
			var btn=this.listSkillButton[index];
			if (btn.isDobuleContrl){
				var skillid=btn.xulisid||btn.skillid;
				this.gameCtrl.attach(skillid);
			}
			btn.isXuli=true;
			Player.curUser&&Player.curUser.beginXuLi(index);
		}

		__proto.openDoubleCtrl=function(btn,evn){
			this.gameCtrl.attackCtrl.changeTouchRect(btn);
			this.gameCtrl.attackCtrl.onTouchBegan(evn);
			btn.off("mousemove",this,this.openDoubleCtrl);
		}

		// 返回大厅
		__proto.backToHall=function(){
			GuideMgr.isTeach=false;
			TipsView.endCloseBack=Handler.create(BjView,BjView.onHide);
			TipsView.myCallback=Handler.create(this,function(){
				var cmd=MsgTemplate.createWithClass(CMsgLeaveGame);
				GameSocket.sendClientMsg(cmd);
				cmd.release();
				SnowUtils.battleMsg.leaveGame();
				GameSocket.I.event("removeGaming");
				UIMgr.closeUI(GamingView);
				Player.I.exit();
				var f_e=new fight_exit();
				f_e.event="exitonfight";
				f_e.roomid=GameSocket.roomInfo.id;
				f_e.type=enumRoomType.nowType;
				StatManager.I.addCustom(f_e);
			});
			StatManager.I.v2_clickmenu("fightBack");
			TipsView.showMe("",SnowUtils.chkIsFB()?"Are you sure to quit the current battle?":"是否确定退出当前战斗?",TipsView.SHOW_YES_NO,false);
		}

		/**
		*false 影藏 true 显示
		*@param b
		*/
		__proto._showAttackButton=function(b,isall){
			this.skillbox1.visible=b;
			if (isall){
				this.skillbox2.visible=b;
			}else{}
			this.btnAttack.visible=b;
		}

		/**
		*是否显示 攻击按钮
		*@param b true-显示，false-隐藏
		*@param isall 是否全部显示\隐藏-false时，则不对 skill3 技能槽进行操作
		*/
		__proto.showAttackButton=function(b,isall){
			this._showAttackButton(b,isall);
			b&&this._onGhostEnd();
		}

		__proto._onGhostEnd=function(){
			var top=this.skillbox2.btnskill.getChildByName("topmaskSkill");
			this.skillbox2.endCD();
		}

		__proto.onUserSkill=function(datas){
			if (datas.skillIndex==3)datas.skillIndex=0;
			var btn=this.listSkillButton [datas.skillIndex];
			(btn).isDowned=false;
			var varloop;
			switch (datas.useResult){
				case 1:
				switch(datas.skillIndex){
					case 0:
					case 1:
					case 2:
						if(enumRoomType.nowType==100){
							GuideMgrI.instance.removeAttactAni();
							GuideMgrI.instance.isAttack=false;
							GuideMgrI.instance.attackNum=0;
							GuideMgrI.instance.moveNum=0;
						}
						if (datas.skillIndex==0){
						};
						var skillid=(btn).skillid;
						var data=ConfigData.skillCfg[skillid];
						if (!data)return;
						if (!datas.leftCount){
							var _funName=data.cselfTrigger;
							Player.curUser && Player.curUser.setSkill(datas.skillIndex,0,0);
							this.removeBtnState(btn);
							break ;
						}
						if(GuideMgr.isTeach&&datas.skillIndex==1){
							this.isUseSkill=true;
						}
						this.playSkillSound(skillid);
						var duration=data.duration;
						var cd=(btn).cd;
						var now=Laya.timer.currTimer;
						if (varloop){
							varloop.call(this,now,duration+now,cd+now);
						};
						var looptime=200;
						if (cd < 500){
							looptime=60;
						};
						var txt=btn.getChildByName("skillNum");
						if (txt){
							if (this.curMainSkill.skillIndex==datas.skillIndex&&this.curMainSkill.maxFloors>1){
								if (this.curMainSkill.curFloor > 1){
									cd=ConfigData.gameCfg.publicCD;
								}
								this.curMainSkill.curFloor--;
								txt.visible=true;
								txt.value="x"+this.curMainSkill.curFloor;
							}
							else{
								txt.visible=(datas.leftCount !=-1);
								txt.value=datas.leftCount+"";
							}
						}
						if (!varloop){
							if(datas.skillIndex==2)
								this.skillbox1.beginCD(now,duration+now,cd+now,looptime);
							else if(datas.skillIndex==1)
							this.skillbox2.beginCD(now,duration+now,cd+now,looptime);
							else if (datas.skillIndex==0)
							this.btnAttack.beginCD(now,duration+now,cd+now,looptime);
						}
						else{
							Laya.timer.loop(looptime,this,varloop,[now,duration+now,cd+now]);
						};
						var maskSkill=btn.getChildByName("maskSkill");
						maskSkill.alpha=0.49;
						this.useEndSkill(skillid,datas.skillIndex);
						break ;
					}
				break ;
				case 0:
				case 3:
				break ;
				case 5:
				this.removeBtnState(btn);
				break ;
				case 2:
				switch(datas.skillIndex){
					case 1:
					case 2:
						btn.mouseEnabled=true;
						break ;
					default :
					}
				Player.curUser.showQiPao("亲 您的积分不够");
				break ;
				case 4:
				break ;
			}
		}

		__proto.getCanDown=function(btn){
			var attack=this.gameCtrl._isAttck;
			if (attack)return false;
			var maskSkill=btn.getChildByName("maskSkill");
			if (!maskSkill || maskSkill.graphics._one){
				return false;
			}
			return true;
		}

		__proto.durationOver=function(btn){
			this.removeBtnState(btn);
		}

		/**
		*2017年6月30日 13:47:35
		*播放技能声音
		*@param skillId 技能id
		*@param type_1 1-技能开始，2-技能持续中，3-技能攻击到人，6-取消持续音效（击中人也要取消持续音效）
		*/
		__proto.playSkillSound=function(skillId,type_1){
			(type_1===void 0)&& (type_1=1);
			if(type_1 % 3==0)SoundManager.stopSound(ConfigData.soundCfg[45]);
			var id=skillId % 1000000;
			switch(id){
				case 120001:
					if (type_1==1)SoundManager.playSound(ConfigData.soundCfg[121]);
					else if (type_1==3){
						SoundManager.stopSound(ConfigData.soundCfg[121]);
						SoundManager.playSound(ConfigData.soundCfg[122]);
					}
					return;
				case 210001:
					SoundManager.playSound(ConfigData.soundCfg[118]);
					return;
				case 240001:
					if (type_1==1)SoundManager.playSound(ConfigData.soundCfg[119]);
					else if (type_1==3){
						SoundManager.stopSound(ConfigData.soundCfg[119]);
						SoundManager.playSound(ConfigData.soundCfg[120]);
					}
					return;
				case 170001:
					SoundManager.playSound(ConfigData.soundCfg[128]);
					return;
				case 230001:
					if (type_1==1){
						SoundManager.playSound(ConfigData.soundCfg[123]);
						this.timer.once(200,this,this.playSkillSound,[skillId,2]);
					}
					else if(type_1==2)SoundManager.playSound(ConfigData.soundCfg[124],0);
					else if (type_1==3)SoundManager.playSound(ConfigData.soundCfg[125]);
					if (type_1 % 3==0){
						SoundManager.stopSound(ConfigData.soundCfg[123]);
						SoundManager.stopSound(ConfigData.soundCfg[124]);
					}
					return;
				}
			if(type_1==1)SoundManager.playSound(ConfigData.soundCfg[45]);
		}

		__proto.clearCD=function(){
			this.skillbox1.endCD();
			this.skillbox2.endCD();
		}

		__proto.cdLoop3=function(beginTime,duration,cd){
			this._loop(beginTime,duration,cd,this.speakMain,this.maskSkill4,this.speak3,this.cdLoop3,39);
		}

		__proto.cdLoop4=function(beginTime,duration,cd){
			this._loop(beginTime,duration,cd,this.speakMain,this.maskSkill5,this.speak1,this.cdLoop4,39);
		}

		__proto.cdLoop5=function(beginTime,duration,cd){
			this._loop(beginTime,duration,cd,this.speakMain,this.maskSkill6,this.speak2,this.cdLoop5,39);
		}

		__proto.cdLoop1=function(beginTime,duration,cd){}
		//173/2=86 49
		__proto._loop=function(beginTime,duration,cd,backMask,beforeMask,btn,fn,r){
			var g;
			var now=Laya.timer.currTimer;
			var top=btn.getChildByName("topmaskSkill");
			var t;
			var i=0;
			var lv=NaN;
			if (beginTime !=duration){
				if (now < duration){
					g=beforeMask.graphics;
					beforeMask.scaleX=-1
					g.clear();
					lv=(now-beginTime)/ (duration-beginTime);
					i=0|(1-lv)*72
					t=Laya.loader.getRes("skillCd/"+i+".png");
					if(r==65)
						g.drawTexture(t,-r *2+6,6.5,(r-7)*2,(r-7)*2,null,1);
					else
					g.drawTexture(t,-r *2+7.5,5,(r-7)*2,(r-7)*2,null,1);
					if (top){
						var dao=(0 | (duration-now)/ 1000)+"";
						if (this.daoword.toString()!=dao){
							this.daoword.setText(dao);
							top.graphics.clear();
							top.graphics.fillText(this.daoword,48,20,"bold 50px Arial","#ffffff","center");
						}
					}
				}
				else{
					btn.mouseEnabled=true;
					btn.event("duration");
					beforeMask.graphics.clear();
					if (top)top.graphics.clear();
					Laya.timer.clear(this,fn);
				}
			}
			else{
				if(now<cd){
					{
						backMask.graphics.clear();
						g=beforeMask.graphics;
						beforeMask.scaleX=-1;
						g.clear();
						lv=(now-beginTime)/ (cd-beginTime);
						i=0 | ((1-lv)*72);
						t=Laya.loader.getRes("skillCd/"+i+".png");
						if(r==65)
							g.drawTexture(t,-r *2+6,6.5,(r-7)*2,(r-7)*2,null,1);
						else if (r==39)
						g.drawTexture(t,-r *2+14,-2,(r-7)*2,(r-7)*2,null,1);
						else
						g.drawTexture(t,-r *2+7,3,(r-5)*2,(r-5)*2,null,1);
					}
				}
				else{
					beforeMask.graphics.clear();
					btn.mouseEnabled=true;
					Laya.timer.clear(this,fn);
				}
			}
		}

		__proto.getShowFlag=function(){
			return (enumRoomType.nowType==100 || this.isPreThree)
			&& (!GuideMgrI.instance._guideAttackUI || GuideMgrI.instance._guideAttackUI.visible==false);
		}

		__proto.getRoleName=function(id){
			return Player.I.getRoleNameByUid(id);
		}

		__proto.getTeamName=function(id){
			return ConfigData.teamDataCfg[id].name;
		}

		__proto.getData=function(data){
			switch(data.msgType){
				case 5:
					if (data.count > 8)
						data.count=9;
					else
					return null;
					break ;
				case 3:
					data.count=6;
					break ;
				case 2:
				case 1:
					data.count=0;
					break ;
				}
			return ConfigData.battleInfo[data.msgType+"_"+data.count];
		}

		__proto.onBattleInfoType=function(data){
			switch(data.msgType){
				case 14:
					if (Player.curUID==data.hitUid || Player.curUID==data.behitUid)return;
					break ;
				default :;
					var sdata=this.getData(data);
					if (!sdata){
						return;
					};
					var kType=sdata.resUrl+".png";
					HotPanelItem.createKill(Player.I.getNetObjByID(data.hitUid),Player.I.getNetObjByID(data.behitUid),"gaming/"+kType,sdata);
					break ;
				}
		}

		/**
		*显示tips
		*@param timeNum 毫秒后消失
		*/
		__proto.showTips=function(str,timeNum){
			(timeNum===void 0)&& (timeNum=2000);
			if (!str)return;
			this.hTips.stop();
			this.tipsLabel.text=str;
			this.tipsObj.width=this.tipsLabel.textField.textWidth+183;
			if (this.tipsObj.alpha !=1){
				this.tipsObj.scale(0,0);
				this.tipsObj.alpha=1;
				this.sTips.play(0,false);
			}
			Laya.timer.once(timeNum,this,this.hideTips,[true]);
		}

		__proto.hideTips=function(isPlay){
			(isPlay===void 0)&& (isPlay=false);
			Laya.timer.clear(this,this.hideTips);
			this.sTips.stop();
			if (isPlay)
				this.hTips.play(0,false);
			else
			this.tipsObj.alpha=0;
		}

		__proto.updateStack=function(data){}
		/**
		*按下技能按钮
		*@param skillid
		*@param index
		*/
		__proto.beginSkill=function(skillid,index){
			if (!Player.curUser)return;
			switch(index){
				case 0:
					break ;
				case 2:
				case 1:
				switch(skillid){
					case 65001:
						Player.curUser.onjuji();
						break ;
					case 1170001:
					case 170001:
						Player.curUser.onDilei();
						break ;
					default :
						break ;
					}
				break ;
			}
		}

		/**
		*抬起技能按钮
		*@param skillid
		*/
		__proto.usingSkill=function(skillid,index,r,isxuli){
			var self=Player.curUser;
			var selfData=ConfigData.roleData[self.itemid];
			if (!self.itemid || !selfData)return;
			var jj=ConfigData.oneTwo[selfData.flexible].atkAnimationScaleByCtr;
			var delay=selfData.frontShake*(1-jj);
			switch(skillid){
				case 65001:
					Player.curUser.onendjuji();
					break ;
				case 1170001:
				case 170001:
					delay=0;
					break ;
				}
			if (true){
				Laya.timer.clear(this,this.sendSkilltoServer);
			}
			if (ConfigData.skillCfg[skillid].preparation==1){
				this.gameCtrl && this.gameCtrl.realAtack();
				if (delay==0){
					this.sendSkilltoServer(skillid,index,r,isxuli);
				}
				else{
					Laya.timer.once(delay,this,this.sendSkilltoServer,[skillid,index,r,isxuli]);
				}
			}
			else{
				this.sendSkilltoServer(skillid,index,r,isxuli);
			}
			if(self.dileiQuan)Player.curUser.onendDilei();
		}

		/**
		*使用技能结束
		*@param skillid 技能id
		*@param index 0 普工 1 技能 2道具
		*/
		__proto.useEndSkill=function(skillid,index){}
		__proto.__sendSkilltoServer=function(){
			Player.curUser&&Player.curUser.canMoveNow();
		}

		/**
		*给服务器发送使用技能消息
		*@param index 技能槽的id 0 普攻 1 技能 2 道具
		*/
		__proto.sendSkilltoServer=function(skillid,index,r,isxuli){
			var user=Player.curUser;
			if (user){
				var data=ConfigData.skillCfg[skillid];
				if (!data)return;
				var msg=MsgTemplate.createWithClass(CMsgUseSkill);
				msg.skillIndex=index;
				if (index==0 && isxuli)msg.skillIndex=3;
				if (this.listSkillButton[index].isDobuleContrl){
					msg.angle=user.attackCircle.getRotation();
				}
				else if (data.ackBeat){
					msg.angle=this.gameCtrl.getAngle();
				}
				else{
					msg.angle=this.gameCtrl._getAttckAngle(user.attackCircle);
				}
				msg.dis=r;
				msg.aiUID=0;
				SnowUtils.battleMsg.useSKill(msg);
				msg.release();
				user.setCanMove(false,0x10);
				var delay=ConfigData.skillCfg[skillid].attRigid||0;
				if (delay)Laya.timer.once(delay,this,this.__sendSkilltoServer);
				else this.__sendSkilltoServer();
			}
		}

		/**
		*鼠标抬起给服务器发送使用技能消息
		*@param skSp
		*@param index
		*@param e
		*/
		__proto.onSkill=function(skSp,index,r){
			this.gameCtrl.attackCtrl&&this.gameCtrl.attackCtrl.offEvent();
			if (!Player.curUser)return;
			if (skSp.mouseEnabled){
				var btn=this.listSkillButton[index];
				var id=btn.isXuli?(btn.xulisid || btn.skillid):btn.skillid;
				this.usingSkill(id,index,r,btn.isXuli);
			}
		}

		/**
		*@param lv 当前等级
		*@param isReal 是否是正常的升级
		*/
		__proto.onUpdataLevel=function(lv,isReal){}
		__proto.onOpen=function(){
			this.viewRank.visible=false;
			if(enumRoomType.nowType==100){
				GuideMgr.isTeach=true;
				this.viewInfo.backHomeBtn.visible=false;
				this.levelProBar.visible=false;
				}else{
				this.viewInfo.backHomeBtn.visible=true;
				this.levelProBar.visible=true;
			}
			this.headImg={};
			this.skillbox2.skillButt.visible=false;
			this.skillbox1.skillButt.visible=false;
			this.btnAttack.skillButt.visible=false;
			view.UIBase0.prototype.onOpen.call(this);
			this.boxShake.alpha=0;
			this.addToParent(this);
			this.box_fightSetTips.visible=false;
			this.myBg&&this.myBg.onStart();
			var data=NotifyCenter.I.Query("on_GotGameDataResult");
			if(data && data['results'] && data.results.fjson && data.results.fjson.generalData){
				this.playTimes=data.results.fjson.generalData.playTimes+1;
			}
			this.b1.visible=false;
			this.b2.visible=false;
			this.team1_2.visible=false;
			this.team1_1.visible=false;
			this.team1_0.visible=false;
			this.team2_2.visible=false;
			this.team2_1.visible=false;
			this.team2_0.visible=false;
			this.selfk1.visible=false;
			this.selfk2.visible=false;
			this.battleBg.skin="gaming/img_timebg2.png";
			if(enumRoomType.nowType==enumRoomType.ROOMTYPE_CUSTOM_TEAM || enumRoomType.nowType==enumRoomType.ROOMTYPE_LADDER){
				var uAvtor1=SnowUtils.getDataInLocalStorage(RoleCenter.I.userId+"uAvtor1")|| {};
				var uAvtor2=SnowUtils.getDataInLocalStorage(RoleCenter.I.userId+"uAvtor2")|| {};
				var isChagePos=this.isBlueOrRed(uAvtor1);
				if(isChagePos){
					FreeMatch.myTeamId=1;
					this.onRenderMember(uAvtor1,uAvtor2);
					}else{
					FreeMatch.myTeamId=2;
					this.onRenderMember(uAvtor2,uAvtor1);
				}
				}else{
				this._isRenderOther=this._isRenderOwner=false;
				this.onUpdateType();
			}
			if(NotifyCenter.I.Query("client_data")){
				var clientData=NotifyCenter.I.Query("client_data");
				if(clientData.fightSetType){
					var index=clientData.fightSetType==1 ? 1 :0;
					this.tabmoshi.selectedIndex=index;
					this.onTabMoShiSelectHandler(index);
				}
			}
		}

		/**
		*红蓝方判断 true 蓝方，false红方
		*@param uAvtor1
		*@return
		*/
		__proto.isBlueOrRed=function(uAvtor1){
			var key,isBool=false;
			for(key in uAvtor1){
				if(RoleCenter.I.userId==key){
					isBool=true;
					break ;
				}
			}
			return isBool;
		}

		__proto.onRenderMember=function(uAvtor1,uAvtor2){
			var key;
			var i=0;
			if(uAvtor1){
				for(key in uAvtor1){
					this.b1.visible=true;
					if (this["team1_"+i]){
						this["team1_"+i].visible=true;
						this["team1_"+i].skin=SnowUtils.roleIconUrl(uAvtor1[key]);
						if(RoleCenter.I.userId==key){
							this.selfk1.visible=true;
							this.selfk1.pos(this["team1_"+i].parent.x-4,this["team1_"+i].parent.y-4);
						}
					}
					this.headImg[key]=this["team1_"+i];
					i++;
				}
			}
			i=0;
			if(uAvtor2){
				for(key in uAvtor2){
					this.b2.visible=true;
					if (this["team2_"+i]){
						this["team2_"+i].visible=true
						this["team2_"+i].skin=SnowUtils.roleIconUrl(uAvtor2[key]);
						if(RoleCenter.I.userId==key){
							this.selfk2.visible=true;
							this.selfk2.pos(this["team2_"+i].parent.x-4,this["team2_"+i].parent.y-4);
						}
					}
					this.headImg[key]=this["team2_"+i];
					i++;
				}
			}
		}

		__proto.changeShake=function(time){
			this.boxShake.alpha=0;
			Tween.to(this.boxShake,{alpha:1},time*1.2,null,Handler.create(this,this.changeComShake));
		}

		__proto.changeComShake=function(){
			this.boxShake.alpha=0;
			Tween.clearTween(this.boxShake);
		}

		//-----------------------------------------------------------------------------------------------------
		__proto.updateQueenList=function(data){}
		/**
		*钻石模式
		*@param data
		*/
		__proto.updateGemList=function(data){
			for (var i=0,len=data.rankList.length;i < len;i++){
				var item=data.rankList[i];
				var actor=Player.I.netObjects [item.id];
				if (i==0){
					this.checkNoOne(actor);
				}
				if (actor){
					actor.diamondNum=item.gem;
					actor.jifen=item.score;
				}
			}
		}

		/**
		*更新所有玩家的积分
		*/
		__proto.updateJifen=function(rankList){
			var len=rankList.length;
			for (var i=0;i < len;i++){
				var item=rankList[i];
				var o=Player.I.netObjects [item.id];
				if (i==0){
					this.checkNoOne(o);
				}
				if (o && !o.destroyed){
					if(item.score!=undefined)
						o.jifen=item.score;
				}
			}
		}

		/**
		*檢查第一名
		*@param actor
		*/
		__proto.checkNoOne=function(actor){
			if (actor){
				var a=CMsgHeartBeatRes.getServerTime(Browser.now())-MsgManager.enterRoomTime;
				if (actor !=MsgManager.nOne.player&&a>=60000){
					this.showNoOne(actor);
				}
				MsgManager.nOne.player=actor;
			}
			else{
				MsgManager.nOne.player=null;
			}
		}

		/**
		*顯示第一名特效
		*@param actor
		*/
		__proto.showNoOne=function(actor){
			var _$this=this;
			this.no1.visible=true;
			this.no1Text.text=actor.shortName;
			this.no1.x=99;
			Laya.timer.clear(this,this.completeFun);
			if (this.preHandle)return;
			this.preHandle=Handler.create(this,function(){
				_$this.preHandle=null;
				Laya.timer.once(1700,this,_$this.completeFun,[_$this.no1]);
			});
			Tween.from(this.no1,{x:400},300,Ease.linearIn,this.preHandle);
		}

		/**
		*第一名播放毀掉
		*@param no1
		*/
		__proto.completeFun=function(no1){
			no1.visible=false;
		}

		/**
		*狙擊射中人
		*@param b
		*/
		__proto.showJiZhong=function(bullet){
			var rect=Player.getViewportRect();
			var curUser=Player.curUser;
			if (curUser){
				var sv=Player.I._curMapScale;
				var x1=(curUser.x-rect.x+curUser.width / 2)*sv;
				var y1=(curUser.y-rect.y+curUser.height / 2)*sv;
				var x2=(bullet.x-rect.x+bullet.width / 2)*sv;
				var y2=(bullet.y-rect.y+bullet.height / 2)*sv;
				if (rect.contains(bullet.x+bullet.width / 2,bullet.y+bullet.height / 2)){
					return;
				};
				var a=Math.atan2(bullet.y-curUser.y,bullet.x-curUser.x)*180 / Math.PI;
				if (a < 0)a+=360;
				var vw=this.width;
				var vh=this.height;
				var lv=(y2-y1)/ (x2-x1);
				var jy=0;
				var jx=0;
				var b=Math.atan2(vh,vw)*180 / Math.PI;
				if (a > b && a <=180-b){
					jy=vh-80;
					jx=(jy-y1)/ lv+x1;
				}
				else if (a > 180-b && a <=180+b){
					jx=70;
					jy=(jx-x1)*lv+y1;
				}
				else if (a > 180+b && a <=360-b){
					jy=50;
					jx=(jy-y1)/ lv+x1;
				}
				else{
					jx=vw-80;
					jy=(jx-x1)*lv+y1;
				}
				FlyThings.FlyImage("gaming/tj4.png",jx,jy,a);
			}
		}

		/**
		*熊刷新時
		*/
		__proto.Showbear=function(){
			var time=Laya.timer.currTimer-MsgManager.clientEnterTime;
			if (time > 1000){
				this.bearRefresh.visible=true;
				Tween.from(this.bearRefresh,{alpha:0},300);
				Laya.timer.clear(this,this.hideBear);
				Laya.timer.once(2000,this,this.hideBear);
			}
		}

		/**
		*隱藏熊
		*/
		__proto.hideBear=function(){
			var _$this=this;
			Tween.to(this.bearRefresh,{alpha:0},300,null,Handler.create(this,brEndTween=function(){
				_$this.bearRefresh.visible=false;
				_$this.bearRefresh.alpha=1;
			}));
		}

		__proto.flyScore=function(){
			var obj=ViewFlyScore.getViewFly();
			view.page.GamingView.I.addChild(obj);
			obj.createView(null);
			obj.hidAni();
		}

		//更新排行榜-单人模式
		__proto.updateList=function(data){
			if(enumRoomType.nowType==enumRoomType.ROOMTYPE_CUSTOM_TEAM || enumRoomType.nowType==enumRoomType.ROOMTYPE_LADDER||enumRoomType.nowType==enumRoomType.ROOMTYPE_SOLO_NPC){
				for(var i=0,sz=data.rankList.length;i<sz;i++){
					var rankObj=data.rankList [i];
					if(rankObj.id==FreeMatch.myTeamId){
						if (this.preScore < rankObj.score){
							this.flyScore();
						}
						this.ownFontClip.value=rankObj.score+"";
						this.preScore=rankObj.score;
						}else{
						this.otherFontClip.value=rankObj.score+"";
					}
				}
				if (enumRoomType.nowType==enumRoomType.ROOMTYPE_SOLO_NPC){
					this.onUpdateType();
				}
				}else{
				if (this.preScore < (data).myRank.score){
					this.flyScore();
				}
				this.preScore=(data).myRank.score;
				this.ownFontClip.value=String(this.preScore);
				var otherTotalScore=0;
				for(i=0,sz=data.rankList.length;i<sz;i++){
					rankObj=data.rankList [i];
					otherTotalScore+=rankObj.score;
				}
				this.otherFontClip.value=String(parseInt(otherTotalScore/2+""));
				this.onUpdateType();
			};
			var rankList=(data.teamRankList.length==0)?data.rankList:data.teamRankList;
			this.updateJifen(rankList);
		}

		//更新排行榜-单人模式
		__proto.updateMyList=function(data){
			this.ownFontClip.value=String((data).myRank.score);
		}

		/**更新人机队伍数据**/
		__proto.onUpdateType=function(){
			var i=0,sz=0;
			if(this.uAvtor1m.length < 4 && !this._isRenderOwner){
				var tempObj={};
				for(i=0,sz=this.uAvtor1m.length;i<sz;i++){
					tempObj[this.uAvtor1m[i].uid]=this.uAvtor1m[i].av;
				}
				if(this.uAvtor1m.length==3)
					this._isRenderOwner=true;
				this.onRenderMember(tempObj);
			}
			if(this.uAvtor2m.length <4 && !this._isRenderOther){
				tempObj={};
				for(i=0,sz=this.uAvtor2m.length;i<sz;i++){
					tempObj[this.uAvtor2m[i].uid]=this.uAvtor2m[i].av;
				}
				if(this.uAvtor2m.length==3)
					this._isRenderOther=true;
				this.onRenderMember(null,tempObj);
			}
		}

		__proto.initGameTime=function(time,isCheck){
			(isCheck===void 0)&& (isCheck=false);
			if (isCheck){
				this.timeSpan=new Date().getTime();
				this.gameTime=time;
				this._minutes=0|(time / 1000 / 60);
				this._seconds=(0 | (time / 1000))% 60;
				if (this._minutes > 0 || this._seconds > 5){
					this.bgEnd.visible=false;
					this.labelEnd.visible=false;
				}
				this.timeFont.value=this.addZero(this._minutes)+":"+this.addZero(this._seconds);
			}
			else{
				this.timeSpan=new Date().getTime();
				this.gameTime=time;
				this._minutes=0|(time / 1000 / 60);
				this._seconds=(0 | (time / 1000))% 60;
				this.timeFont.value=this.addZero(this._minutes)+":"+this.addZero(this._seconds);
				if (enumRoomType.nowType==100){
					this.loadTime=1;
					}else{
					this.loadTime=2;
				}
				Laya.timer.loop(1000,this,this.updateGameData);
			}
		}

		/**
		*控制页面显示状态
		*@param value
		*
		*/
		__proto.onSetShow=function(value){
			this.visible=value;
		}

		__proto.updateGameData=function(){
			var delay=GameSocket.delayNetwork;
			var skin,color;
			if (delay < 100){
				skin="gaming/wifi3.png";
				color="#00ff18";
			}
			else if(delay>=100&&delay<200){
				skin="gaming/wifi2.png";
				color="#fff600";
			}
			else{
				skin="gaming/wifi1.png";
				color="#ff0000";
			}
			this.wiffi.skin=skin;
			this.ping.color=color;
			this.ping.changeText(delay+"ms");
			this.countDownTime();
		}

		__proto.countDownTime=function(){
			var _$this=this;
			var nowTime=this.gameTime-(new Date().getTime()-this.timeSpan);
			this._minutes=0|(nowTime / 1000 / 60);
			this._seconds=(0 | (nowTime / 1000))% 60;
			if(enumRoomType.nowType !=100){
				if(this.playTimes > 0 && this.playTimes <7){
					if(this._minutes !=this._oldMinutes && this._seconds==0 && this._minutes==2){
						console.log("-----------------playTimes:"+this.playTimes+"-------_minutes:"+this._minutes+"-------_seconds:"+this._seconds);
						this._oldMinutes=this._minutes;
						var type="4."+(this.playTimes+5)+".1."+this._minutes;
						console.log("---------type:"+type);
						StatManager.I.addTeach(StatManager.I.getStatData(type),true);
					}
				}
			}
			if (this._minutes==0 && this._seconds==0){
				Laya.timer.clear(this,this.updateGameData);
			}
			this.timeFont.value=this.addZero(this._minutes)+":"+this.addZero(this._seconds);
			this.snowStorm&&this.snowStorm.checkState(nowTime);
			if(enumRoomType.nowType==100){
				if(this._minutes==0&&this._seconds==59){
					this.isLoadFlag=true;
					SnowUtils.reloadRankRes();
				}
				}else{
				if (this._minutes <=this.loadTime && !this.isLoadFlag){
					this.isLoadFlag=true;
					SnowUtils.reloadRankRes();
				}
			}
			if (this._minutes==1){
				if (this._seconds==0){
				}else if (this._seconds==3){}
			}
			else if (this._minutes==0 && this._seconds <=5){
				this.bgEnd.visible=true;
				this.labelEnd.visible=true;
				Tween.from(this.labelEnd,{scaleX:3,scaleY:3},300,Ease.bounceOut);
				this.labelEnd.value=this._seconds+"";
				if (this._seconds > 0)SoundManager.playSound(ConfigData.soundCfg[58]);
				else if (this._seconds==0)SoundManager.playSound(ConfigData.soundCfg[59]);
				if (this._seconds==0){
					Laya.timer.once(3000,this,function(){
						if (MsgManager.isInRoom){
							_$this.bgEnd.visible=false;
							_$this.labelEnd.visible=false;
							var cmd=MsgTemplate.createWithClass(CMsgRoomResidualTime);
							GameSocket.sendClientMsg(cmd);
						}
					});
				}
			}
		}

		//MsgManager.I.backHome();
		__proto.countTime=function(){
			this._seconds+=1;
			if (this._seconds > 59){
				this._minutes+=1;
				this._seconds=0
				if (this._minutes > 59){
					Laya.timer.clear(this,this.updateGameData);
				}
			}
			this.timeFont.value=this.addZero(this._minutes)+":"+this.addZero(this._seconds);
		}

		__proto.addZero=function(value){
			return (value < 0 ?"00":value < 10?"0"+value :""+value);
		}

		/**显示雪章鱼技能，限制视口的功能*/
		__proto.showSnowOctopusEff=function(){
			this.snowOctopusImg.skin="gaming/snowOctopusImg.png";
			this.snowOctopusImg.visible=true;
			this.imgsnowword.visible=true;
			var skillVo=ConfigData.skillCfg [250001];
			var dt=skillVo.duration;
			Laya.timer.once(dt,this,this.removeSnowOctopusEff);
		}

		/**隐藏雪章鱼技能，限制视口的功能*/
		__proto.removeSnowOctopusEff=function(){
			Laya.timer.clear(this,this.removeSnowOctopusEff);
			this.snowOctopusImg.visible=false;
			this.imgsnowword.visible=false;
			SnowUtils.releaseImgSourse(this.snowOctopusImg);
		}

		/**
		*打开复活界面
		*@param role 需要复活的角色-复活、返回大厅时destroy
		*/
		__proto.openGameAgainView=function(role){
			if (enumRoomType.nowType !=enumRoomType.ROOMTYPE_UNLIMITED){
				this.gameCtrl.stopCtrl();
				this.btnAttack.clipAttack.skin="gaming/snow.png";
				GameAgainView.start(role);
			}
		}

		__proto.onResize=function(){
			this.width=Laya.stage.width / Laya.stage.scaleX;
		}

		//游戏结束关闭界面的回调
		__proto.closeView=function(){
			this.uAvtor1m=[];
			this.uAvtor2m=[];
			this.endSnow();
			this.onSetShow(true);
			this.timer.clearAll(this);
			this._showAttackButton(true,true);
			this.skillbox2.mouseEnabled=true;
			this.skillbox1.mouseEnabled=true;
			if((enumRoomType.nowType%10)==enumRoomType.ROOMTYPE_TEAM &&this.battleData&&this.battleData.team==0){
				StatManager.I.addTeach(StatManager.I.getStatData(StatID.s4_5_1[0]),true);
			}
			this.isNewUseSkill=false;
			this.isAttackHit=false;
			this.btnAttack.tishiSprite.visible=false;
			GuideMgr.isTeach=false;
			GuideMgrI.clearAllTime();
			this.isLoadFlag=false;
			this.kill.visible=false;
			this.kill.scale(1,1);
			this.kill.alpha=1;
			ActorObject.QuestList={};
			this.clearSkill();
			this.btnAttack.clipAttack.skin="gaming/snow.png";
			this.levelProBar.value=0;
			ShowJiFen.clearAll();
			this.gameCtrl.stopCtrl();
			this.arrows.visible=false;
			var list=this.arrows._childs;
			for (var i=0;i < list.length;i++){
				(list [i]).visible=false;
			}
			HotPanelItem.clearAll();
			GameSocket.I.off("initGameTime",this,this.initGameTime);
			GameSocket.I.off("updateRank",this,this.updateList);
			NotifyCenter.I.off('onGotClientObjectResult',this,this.onGotClientResult);
			GameSocket.I.off("updateMyRank",this,this.updateMyList);
			GameSocket.I.off("removeGaming",this,this.closeView);
			GameSocket.I.off("playerRestart",this,this.openGameAgainView);
			GameSocket.I.off("updateLevel",this,this.onUpdataLevel);
			this.skillbox1.btnskill.off("click",this,this.onSkill);
			Laya.timer.clear(this,this.updateGameData);
			this.timeFont.value="00:00";
			this.viewInfo.restart();
			if(enumRoomType.nowType==enumRoomType.ROOMTYPE_GEM)
				if(this.myBg){
				this.myBg.removeChildren();
				this.myBg.removeSelf();
			}
			this.removeBox_fightSetTips();
			this.removeSnowOctopusEff();
			this.snowOctopusImg.texture && this.snowOctopusImg.texture.destroy();
			this.imgsnowword.texture && this.imgsnowword.texture.destroy();
			SnowUtils.releaseImgSourse(this.jsbg);
			if(CrazySnowball.shareData){
				CrazySnowball.shareData={};
				CrazySnowball.shareData.query={};
				CrazySnowball.shareData.scene=0;
			}
			this.visible=false;
			UIMgr.closeUI(GamingView);
		}

		//------------------------------------------------------------------------------------------------
		__proto.tempBtnInit=function(){}
		__proto.onTempClick=function(i){
			var cmd=MsgTemplate.createWithClass(CGMSelectSkill);
			cmd.skillID=i;
			GameSocket.sendClientMsg(cmd);
		}

		/**
		*临时按钮
		*@param x 坐标x
		*@param y 坐标y
		*@param text 按钮文本
		*/
		__proto.tempButton=function(x,y,text,i){
			var sp=new Sprite();
			sp.x=x;
			sp.y=y-300;
			sp.width=100;
			sp.height=30;
			sp.graphics.drawRect(0,0,50,30,"#ffffff");
			var str=new Label(text);
			sp.addChild(str);
			this.addChild(sp);
			sp.on("click",this,this.onTempClick,[i]);
		}

		/**
		*新手隐藏攻击按钮
		*/
		__proto.hideAllButton=function(){
			this.skillbox1.visible=false;
			this.skillbox2.visible=false;
			this.btnAttack.visible=false;
			this.gameCtrl.getMoveRocker().visible=false
		}

		/**
		*新手显示攻击按钮
		*/
		__proto.showAllButton=function(){
			this.skillbox1.visible=true;
			this.skillbox2.visible=true;
			this.btnAttack.visible=true;
			this.gameCtrl.getMoveRocker().visible=true
		}

		/**
		*锁定当前用户
		*/
		__proto.lockUser=function(){
			this.hideAllButton();
			this.gameCtrl._stopMove();
			var user=Player.curUser;
			if (user){
				user.setCanMove(false,0x4);
				user.canRotate=false;
			}
		}

		/**
		*解锁当前用户
		*/
		__proto.unLockUser=function(){
			this.showAllButton();
			var user=Player.curUser;
			if (user){
				user.setCanMove(true,0x4);
				user.canRotate=true;
			}
		}

		/**
		*沉默
		*/
		__proto.silent=function(){
			this.skillbox1.mouseEnabled=false;
			this.skillbox2.mouseEnabled=false;
		}

		/**
		*解除沉默
		*/
		__proto.unSilent=function(){
			this.skillbox1.mouseEnabled=true;
			this.skillbox2.mouseEnabled=true;
		}

		//skillbox3.mouseEnabled=true;
		__proto.miniCD=function(cdDelta){
			this.skillbox1.miniCD(cdDelta);
		}

		//在死亡的时候会用 visible 隐藏战斗主界面，所以重写下，用于清除 部分 buf
		__getset(0,__proto,'visible',_super.prototype._$get_visible,function(value){
			_super.prototype._$set_visible.call(this,value);
			if (value==false){
				this.removeSnowOctopusEff();
			}
		});

		__getset(1,GamingView,'I',function(){
			if (!GamingView._i){
				GamingView._i=(UIMgr.getUI(GamingView));
			}
			return GamingView._i;
		},ui.gaming.GamingUI._$SET_I);

		GamingView.checkStop=function(){
			if(GamingView._i){
				GamingView._i.gameCtrl && GamingView._i.gameCtrl.stopCtrl();
			}
		}

		GamingView.ONSELECTSKILL="onSelectSkill";
		GamingView.ONBATTLEINFOTYPE="onBattleInfoType";
		GamingView.ONUSESKILL="onUseSKill";
		GamingView.ONRANKQUEEN="onRankQueen";
		GamingView.ONRANKGEM="onRankGen";
		GamingView._i=null
		GamingView.bgStr="gaming/imgnot.png";
		GamingView.soundCtr={};
		GamingView.ERROR="战斗内部消息表错误";
		GamingView.isChagePos=false;
		return GamingView;
	})(GamingUI)


	/**
	*...
	*@author ...
	*/
	//class view.page.DuoBaoView extends ui.hall.page.shop.DuoBaoViewUI
	var DuoBaoView=(function(_super){
		function DuoBaoView(){
			this.myFjson=null;
			this.duoBaoArr=null;
			this.dhSum=0;
			this.curIndex=0;
			this.curItem=null;
			this.getArr=[];
			this.isCloseSelf=false;
			DuoBaoView.__super.call(this);
			this.resList=[
			{url:"res/atlas/duobao.atlas",type:"atlas" },
			{url:"duobao/bg.png",type:"image" },]
		}

		__class(DuoBaoView,'view.page.DuoBaoView',_super);
		var __proto=DuoBaoView.prototype;
		__proto.onCreated=function(){
			view.UIBase0.prototype.onCreated.call(this);
			this.closeBg.on("click",this,this.onCloseSelf);
			this.dbBtn1.on("click",this,this.onDuoBaoClick,[1]);
			this.dbBtn5.on("click",this,this.onDuoBaoClick,[5]);
		}

		__proto.onCloseSelf=function(){
			this.isCloseSelf=false;
			HeroCardView.I.initView();
			UIMgr.closeUI(DuoBaoView);
		}

		__proto.onOpen=function(){
			view.UIBase0.prototype.onOpen.call(this);
			this.duoBaoArr=[this.item0,this.item1,this.item2,this.item3,this.item4,this.item5,this.item6,this.item7,this.item8,this.item9,this.item10,this.item11];
			this.addToParent(this);
			var data=NotifyCenter.I.Query("on_GotGameDataResult");
			if(data && data.results&& data.results.fjson && data.results.fjson.jackpotData){
				this.myFjson=data.results.fjson;
				}else{
				HallApp.getGameData({fjson:1});
				this.onCloseSelf();
			}
			this.db1t.text=ConfigData.gameCfg["treasureHuntCost"];
			this.db5t.text=ConfigData.gameCfg["treasureHuntCost5"];
			this.dbCsh();
			NotifyCenter.I.on('onNotify',this,this.onGotNotify)
		}

		__proto.onGotNotify=function(data){
			switch(data.method){
				case 30083:
					this.netWorkControl&&this.netWorkControl.detroy();
					this.onDuoBaoResult(data);
					break ;
				}
		}

		__proto.onDuoBaoResult=function(dat){
			if (dat.response==1){
				this.myFjson.jackpotData.buyTimes=dat.buyTimes;
				this.getArr=dat.index.concat();
				this.dbDh(dat.index);
				HallApp.listBackpacks();
				}else if(dat.response==ResponseJackpot.NOT_ENOUGH_DIAMOND){
				HuoDeTuJingView.onShow(SnowUtils.chkIsFB()?"Your diamonds is not enough.":"钻石余额不足");
			}else if(dat.response==ResponseJackpot.INVALID_BUYTYPE){}
		}

		//错误的类型 不处理
		__proto.initView=function(){}
		__proto.onClose=function(){
			view.UIBase0.prototype.onClose.call(this);
		}

		__proto.createBj=function(){}
		/**
		*播放夺宝动画
		*@param zd 终点
		*@param jg 切换间隔 毫秒
		*@param quan 圈数
		*@param startjg 起始间隔
		*@param startNum 默认从第0个开始增加切换间隔经过五个后变为最小间隔 匀速
		*@param lastNum 默认从倒数第10个开始增加切换间隔
		*@param lastTime 默认递增时间10毫秒
		*/
		__proto.dbDh=function(zdArr,jg,quan,startjg,startNum,lastNum,lastTime){
			(jg===void 0)&& (jg=50);
			(quan===void 0)&& (quan=3);
			(startjg===void 0)&& (startjg=300);
			(startNum===void 0)&& (startNum=5);
			(lastNum===void 0)&& (lastNum=10);
			(lastTime===void 0)&& (lastTime=30);
			MouseManager.enabled=false;
			this.mouseEnabled=false;
			if(zdArr.length==5){}
				this.dhSum=zdArr.shift()+this.duoBaoArr.length *quan;
			if (this.curItem){
				this.curItem.guang.visible=false;
				this.curItem.ani1.stop();
				this.curItem.guang.alpha=1;
			}
			this.curItem=this.duoBaoArr[0];
			this.curItem.guang.visible=true;
			this.curItem.ani1.stop();
			this.timer.once(startjg,this,this.dbToNext,[zdArr,jg,startjg,startNum,lastNum,lastTime]);
			this.curIndex=0;
		}

		/**
		*光圈切换
		*@param zdArr
		*@param jg
		*@param startjg
		*@param startNum
		*@param lastNum
		*@param lastTime
		*/
		__proto.dbToNext=function(zdArr,jg,startjg,startNum,lastNum,lastTime){
			(jg===void 0)&& (jg=50);
			(startjg===void 0)&& (startjg=300);
			(startNum===void 0)&& (startNum=5);
			(lastNum===void 0)&& (lastNum=10);
			(lastTime===void 0)&& (lastTime=10);
			if (this.curIndex==this.dhSum){
				var cfgDt;
				if(!zdArr || zdArr.length==0){
					this.curItem=this.duoBaoArr[this.curIndex % this.duoBaoArr.length];
					this.curItem.ani1.play();
					cfgDt=this.duoBaoArr[this.curIndex % this.duoBaoArr.length].dataSource;
					MouseManager.enabled=true;
					this.mouseEnabled=true;
					var arr=[];
					for (var i=0;i < this.getArr.length;i++){
						var dt=this.duoBaoArr[this.getArr[i]].dataSource;
						var obj={itemId:dt.itemId,itemNum:dt.count};
						arr.push(obj);
					}
					ItemShow.onShow(arr,SnowUtils.chkIsFB()? "Roulette Reward" :"夺宝奖励");
					if(this.isCloseSelf){
						this.onCloseSelf();
					}
					}else{
					this.duoBaoArr[this.curIndex % this.duoBaoArr.length].ani1.play();
					var curI=this.getArr.length-1-zdArr.length;
					cfgDt=this.duoBaoArr[this.curIndex % this.duoBaoArr.length].dataSource;
					var curNum=this.dhSum % this.duoBaoArr.length;
					var nextNum=zdArr.shift();
					if(nextNum-curNum > 0){
						this.dhSum+=nextNum-curNum;
						}else{
						this.dhSum+=this.duoBaoArr.length-curNum+nextNum;
					}
					if (this.dhSum==this.curIndex){
						this.dhSum+=this.duoBaoArr.length;
						}else{
						if(zdArr.length==0){
							this.dhSum+=this.duoBaoArr.length;
						}
					}
					Laya.timer.once(500,this,this.dbToNext,[zdArr,jg,startjg,startNum,10,lastTime])
				}
				if (cfgDt.isRare){
					var itemCfg=ConfigData.itemData[cfgDt.itemId];
					if(itemCfg && itemCfg.type==1){
						if (!this.myFjson.jackpotData.rareItemGot){
							this.myFjson.jackpotData.rareItemGot=[];
						}
						this.myFjson.jackpotData.rareItemGot.push(cfgDt.id);
						this.duoBaoArr[this.curIndex % this.duoBaoArr.length].dataSource=this.duoBaoArr[this.curIndex % this.duoBaoArr.length].dataSource;
						this.isCloseSelf=true;
						HallApp.getGameData({fjson:1});
					}
					this.myFjson.jackpotData.luckyPoint=1;
					}else{
					this.myFjson.jackpotData.luckyPoint+=1;
				}
				return;
			};
			var jiange=jg;
			if(this.curIndex < startNum){
				jiange=(startjg-(startjg-jg)/ startNum*this.curIndex);
			}
			if(zdArr.length==0){
				if (this.curIndex+lastNum > this.dhSum){
					var lastIndexNum=this.curIndex+lastNum-this.dhSum;
					jiange=jg+lastIndexNum *lastTime;
				}
			}
			this.duoBaoArr[this.curIndex % this.duoBaoArr.length].guang.visible=false;
			this.curIndex++;
			this.duoBaoArr[this.curIndex % this.duoBaoArr.length].guang.visible=true;
			this.duoBaoArr[this.curIndex % this.duoBaoArr.length].ani1.stop();
			this.duoBaoArr[this.curIndex % this.duoBaoArr.length].guang.alpha=1;
			this.timer.once(jiange,this,this.dbToNext,[zdArr,jg,startjg,startNum,lastNum,lastTime]);
		}

		/**
		*夺宝初始化
		*/
		__proto.dbCsh=function(){
			if (!this.duoBaoArr || this.duoBaoArr.length==0)return;
			var nowDt=SnowUtils.getCurMap(ConfigData.duoBao);
			for (var i=0;i < this.duoBaoArr.length;i++){
				this.duoBaoArr[i].ani1.stop();
				this.duoBaoArr[i].guang.alpha=1;
				this.duoBaoArr[i].guang.visible=false;
				this.duoBaoArr[i].dataSource=ConfigData.duoBaoItemData[nowDt.itemId[i]];
			}
			this.duoBaoArr[0].guang.visible=true;
			this.duoBaoArr[0].ani1.play();
		}

		/**
		*开始夺宝
		*@param type 1次 5次
		*/
		__proto.onDuoBaoClick=function(type){
			var dbMoney=type==1? parseInt(ConfigData.gameCfg["treasureHuntCost"]):ConfigData.gameCfg["treasureHuntCost5"];
			if(RoleCenter.I.diamond < dbMoney){
				var message=SnowUtils.chkIsFB()? "Not enough diamond" :"钻石余额不足！";
				HuoDeTuJingView.onShow(message);
				}else{
				var req=new RequestJackpot();
				req.buyType=type
				HallApp.notify(req);
				this.netWorkControl.reSet(10000);
			}
		}

		__getset(1,DuoBaoView,'I',function(){
			if (!DuoBaoView._ins)DuoBaoView._ins=UIMgr.getUI(DuoBaoView);
			return DuoBaoView._ins;
		},ui.hall.page.shop.DuoBaoViewUI._$SET_I);

		DuoBaoView.onShow=function(){
			UIMgr.openUI(DuoBaoView,"layer_pop4");
		}

		DuoBaoView._ins=null
		DuoBaoView.lastHeroCount=0;
		return DuoBaoView;
	})(DuoBaoViewUI)


	//class view.page.FreeChoose extends ui.hall.page.team.FreeChooseUI
	var FreeChoose=(function(_super){
		function FreeChoose(){
			FreeChoose.__super.call(this);
			this.resList=[
			{url:"res/atlas/freechoose.atlas",type:"atlas" }];
		}

		__class(FreeChoose,'view.page.FreeChoose',_super);
		var __proto=FreeChoose.prototype;
		__proto.createBj=function(){}
		__proto.onCreated=function(){
			view.UIBase0.prototype.onCreated.call(this);
			this.btn_close.on("click",this,this.onCloseClick2);
			this.btnSingle.on("click",this,this.onSingleClick);
			this.btnTeam.on("click",this,this.onTeamClick);
		}

		__proto.onCloseClick2=function(){
			this.onCloseClick();
		}

		__proto.onOpen=function(){
			view.UIBase0.prototype.onOpen.call(this);
			MenuList.I.updateBgCache("normal");
			this.addToParent(this);
			this.onTweenOpen();
		}

		/**显示效果**/
		__proto.onTweenOpen=function(){
			var btn_2Din=384;
			var btn_5Din=894;
			this.btnSingle.x=1280;
			this.btnTeam.x=-this.btnTeam.width;
			Tween.to(this.btnSingle,{x:btn_2Din},500,Ease.backOut);
			Tween.to(this.btnTeam,{x:btn_5Din},500,Ease.backOut);
		}

		/**
		*关闭效果
		*@param callBack
		*/
		__proto.onTweenClose=function(callBack){
			if (!this.parent){
				callBack && callBack.run();
				return;
			};
			var btn_2Din=1280;
			var btn_5Din=-this.btnTeam.width;
			this.btnSingle.x=384;
			this.btnTeam.x=894;
			Tween.to(this.btnSingle,{x:btn_2Din},300,Ease.backIn);
			Tween.to(this.btnTeam,{x:btn_5Din},300,Ease.backIn,callBack);
		}

		__proto.onClose=function(){
			MenuList.I.updateBgCache();
			view.UIBase0.prototype.onClose.call(this);
		}

		__proto.onCloseClick=function(){
			this.onTweenClose(Handler.create(this,this.onCloseUI));
		}

		__proto.onCloseUI=function(){
			UIMgr.closeUI(FreeChoose);
		}

		__proto.onMatchBack=function(cbk){
			this.onTweenClose(cbk);
		}

		__proto.onSingleClick=function(){
			EffectUtils.scaleEffect(this.btnSingle,Handler.create(this,this.onTweenSingle));
		}

		__proto.onTweenSingle=function(){
			this.netWorkControl.reSet(2000);
			FreeChoose.chooseType=enumRoomType.ROOMTYPE_CUSTOM_FREE;
			MenuList.inRoomByWhere=2;
			HallApp.match(FreeChoose.chooseType,1);
		}

		__proto.onTeamClick=function(){
			EffectUtils.scaleEffect(this.btnTeam,Handler.create(this,this.onTweenTeam));
		}

		__proto.onTweenTeam=function(){
			this.netWorkControl.reSet(2000);
			FreeChoose.chooseType=enumRoomType.ROOMTYPE_CUSTOM_TEAM;
			MenuList.inRoomByWhere=2;
			HallApp.match(FreeChoose.chooseType,1);
		}

		FreeChoose.onShowMe=function(){
			UIMgr.openUI(FreeChoose,"layer_pop4");
		}

		FreeChoose.chooseType=0;
		return FreeChoose;
	})(FreeChooseUI)


	//class view.page.FreeMatch extends ui.hall.page.team.FreeMatchUI
	var FreeMatch=(function(_super){
		function FreeMatch(){
			this._panelEffect=null;
			this.leftTime=0;
			this.timeIndex=15;
			FreeMatch.__super.call(this);
			FreeMatch.isZuDui=true;
			if(!FreeMatch._i)FreeMatch._i=this;
			this.resList=[
			{url:"res/atlas/freematch.atlas",type:"atlas"},
			{url:"res/atlas/common.atlas",type:"atlas"}];
		}

		__class(FreeMatch,'view.page.FreeMatch',_super);
		var __proto=FreeMatch.prototype;
		__proto.onCreated=function(){
			view.UIBase0.prototype.onCreated.call(this);
			this.btnStart.on("click",this,this.onBtnStart);
			this.btnCancle.on("click",this,this.onBtnCancle);
			this.btnEnter.on("click",this,this.onBtnEnter);
			this.btnBack.on("click",this,this.onBtnBack);
			this.btnYq.on("click",this,this.onBtnYq);
			this.btn_qiehuan.on("click",this,this.onChgHero);
		}

		// listFriend.scrollBar.elasticDistance=100;
		__proto.onChgHero=function(){
			HeroCardView.onShow();
		}

		__proto.onBtnYq=function(){
			SnowUtils.shareInitiative("team3vepk",{fromType:FreeMatch.myType,roomId:RoleCenter.I.myRoomId});
			StatManager.I.v2_share("team3vepk");
		}

		__proto.onBtnBack=function(){
			var _$this=this;
			TipsView.myCallback=Handler.create(this,function(){
				if (_$this._panelEffect)_$this._panelEffect.close(Handler.create(null,function(){
					var cmd=new CMsgLeaveCustomRoom();
					GameSocket.sendClientMsg(cmd);
					_$this.onSmsgBeKicked(null);
				}));
			});
			TipsView.showMe("",SnowUtils.chkIsFB()?"Are you sure you want to leave the room?":"确定要退出房间吗?",1,false);
		}

		//xiaosong
		__proto.changeTime=function(){
			this.leftTime=15;
			Laya.timer.loop(1000,this,this.onTimeChange);
		}

		__proto.onTimeChange=function(){
			this.leftTime--;
			if(this.leftTime<=0){
				Laya.timer.clear(this,this.onTimeChange);
				this.updateList();
			}
		}

		/**
		*同意更换位置
		*
		*/
		__proto.onBtnEnter=function(){
			var cmd=new CMsgAcceptSwitchRequest();
			cmd.accept=1;
			cmd.changeIndex=FreeMatch.changeInfo.changeIndex;
			cmd.changeTeamId=FreeMatch.changeInfo.changeTeamId;
			cmd.myIndex=FreeMatch.changeInfo.myIndex;
			cmd.myTeamId=FreeMatch.changeInfo.myTeamId;
			GameSocket.sendClientMsg(cmd);
			this.boxChange.visible=false;
		}

		/**
		*拒绝更换位置
		*
		*/
		__proto.onBtnCancle=function(){
			var cmd=new CMsgAcceptSwitchRequest();
			cmd.accept=0;
			cmd.changeIndex=FreeMatch.changeInfo.changeIndex;
			cmd.changeTeamId=FreeMatch.changeInfo.changeTeamId;
			cmd.myIndex=FreeMatch.changeInfo.myIndex;
			cmd.myTeamId=FreeMatch.changeInfo.myTeamId;
			GameSocket.sendClientMsg(cmd);
			this.boxChange.visible=false;
		}

		__proto.onOpen=function(){
			FreeMatch.isZuDui=true;
			RoleCenter.rebid=true;
			RoleCenter.teamOrMatch="match";
			MenuList.inRoomByWhere=88;
			FreeMatch.uAvtor1={};
			FreeMatch.uAvtor2={};
			NotifyCenter.I.on('onFriendListResult',this,this.onGotFriendList);
			NotifyCenter.I.on("askUserToChangePosition",this,this.onAskUserToChangePosition);
			NotifyCenter.I.on("userEnterCustomRoom",this,this.onUserEnterCustomRoom);
			NotifyCenter.I.on("userLeftCustomRoom",this,this.onUserLeftCustomRoom);
			NotifyCenter.I.on("smsgBeKicked",this,this.onSmsgBeKicked);
			NotifyCenter.I.on("userChangePosition",this,this.onUserChangePosition);
			NotifyCenter.I.on("switchPositionResult",this,this.onSwitchPositionResult);
			NotifyCenter.I.on("onLoadCustomResource",this,this.onLoadCustomResource);
			NotifyCenter.I.on("onChgUserState",this,this.onChgUserState);
			this.boxChange.visible=false;
			this.updateList();
			view.UIBase0.prototype.onOpen.call(this);
			if (!this._panelEffect){
				this._panelEffect=new PanelEffect();
				this._panelEffect.reg(this);
			}
			this.tabTeamSelectHandler(0);
			SnowUtils.shareBall("friendmodel",{fromType:FreeMatch.myType,roomId:RoleCenter.I.myRoomId});
			this.addToParent(this);
			UIMgr.closeAllByLayer("layer_pop3");
			UIMgr.closeAllByLayer("layer_pop4");
			this._panelEffect.start(50);
			this.updateVisile();
			Laya.timer.once(100,this,function(){
			});
		}

		__proto.onChgUserState=function(data){
			var indexNum=0;
			var cell
			if(FreeMatch.freeMatchData.userList_1.indexOf(data.playerUid)!=-1){
				indexNum=FreeMatch.freeMatchData.userList_1.indexOf(data.playerUid);
				cell=this.team1.getCell(indexNum);
				}else if(FreeMatch.freeMatchData.userList_2.indexOf(data.playerUid)!=-1){
				indexNum=FreeMatch.freeMatchData.userList_2.indexOf(data.playerUid);
				cell=this.team2.getCell(indexNum);
			}
			if(cell){
				if (data.stateMark==1){
					if (!FreeMatch.uState[data.playerUid])FreeMatch.uState[data.playerUid]={};
					if(data.stateValue==1){
						cell.txtReady.visible=true;
						FreeMatch.uState[data.playerUid].state1=1;
					}
					else{
						cell.txtReady.visible=false;
						FreeMatch.uState[data.playerUid].state1=0;
					}
				}
			}
		}

		__proto.updateVisile=function(){
			this.btnStart.visible=(FreeMatch.roomMaker==RoleCenter.I.userId);
		}

		/**
		*申请换位置提示
		*
		*/
		__proto.onAskUserToChangePosition=function(dat){
			FreeMatch.changeInfo=dat;
			this.boxChange.visible=true;
			var str;
			if(SnowUtils.chkIsFB()){
				str="Player from "+FreeMatch.changeInfo.myTeamId+" team "+(FreeMatch.changeInfo.myIndex+1)+" seat wants to exchange seat with you."
				}else{
				str="队伍"+FreeMatch.changeInfo.myTeamId+"中的第"+(FreeMatch.changeInfo.myIndex+1)+"名玩家要和你交互位置.";
			}
			this.txtChangeP.text=str;
		}

		/**
		*界面关闭调用
		*
		*/
		__proto.onClose=function(){
			FreeMatch.isZuDui=false;
			RoleCenter.rebid=false;
			FreeMatch.bIsShow=false;
			NotifyCenter.I.off('onFriendListResult',this,this.onGotFriendList);
			NotifyCenter.I.off("askUserToChangePosition",this,this.onAskUserToChangePosition);
			NotifyCenter.I.off("userEnterCustomRoom",this,this.onUserEnterCustomRoom);
			NotifyCenter.I.off("userLeftCustomRoom",this,this.onUserLeftCustomRoom);
			NotifyCenter.I.off("smsgBeKicked",this,this.onSmsgBeKicked);
			NotifyCenter.I.off("userChangePosition",this,this.onUserChangePosition);
			NotifyCenter.I.off("switchPositionResult",this,this.onSwitchPositionResult);
			NotifyCenter.I.off("onLoadCustomResource",this,this.onLoadCustomResource);
			FreeMatch.myType=0;
			this.timeIndex=15;
			Laya.timer.clear(this,this.clearMyTimer);
			FreeMatch.uState={};
			MenuList.inRoomByWhere=0;
			if(CrazySnowball.shareData){
				CrazySnowball.shareData={};
				CrazySnowball.shareData.query={};
				CrazySnowball.shareData.scene=0;
			}
			view.UIBase0.prototype.onClose.call(this);
		}

		/**
		*分享
		*
		*/
		__proto.onBtnInvWechat=function(){
			RoleCenter.I.shareType=29;
			SnowUtils.shareInitiative("team3vepk",{fromType:FreeMatch.myType,roomId:RoleCenter.I.myRoomId});
			StatManager.I.v2_share("team3vepk");
			this.onTcmd();
		}

		__proto.onTcmd=function(){
			SnowUtils.reportTlogReason(101,(FreeMatch.myType==enumRoomType.ROOMTYPE_CUSTOM_FREE)?enumTlogReason.SUBREASON_SNS_INVITE_3:enumTlogReason.SUBREASON_SNS_INVITE_4);
		}

		/**组队tab 切换回调*/
		__proto.tabTeamSelectHandler=function(index){
			var myInfo;
			var arr;
			SoundManager.playSound(ConfigData.soundCfg[102]);
			if (index==0){
				myInfo=NotifyCenter.I.Query("onGotRelation_arr");
				myInfo && (arr=myInfo.friends);
			}
			else if (index==1){
				myInfo=this.getFriendData(102);
				myInfo && (arr=myInfo.friends);
			}
			else if (index==2){
				arr=FriendRecentFight.getData();
			}
			if(arr){
				for (var i=0;i < arr.length;i++){
					var info=arr [i];
					if(info.online){
						if(info.teamId>0){
							info.index=2;
							}else{
							if(info.roomId>0){
								info.index=3;
								}else{
								info.index=1;
							}
						}
					}
					else{
						info.index=5;
					}
				}
				arr.sort(function(a,b){
					return a.index-b.index;
				})
			}
		}

		/**
		*更新单人模式数据
		*
		*/
		__proto.updateSingleMatch=function(){
			FreeMatch.roomMaker=FreeMatch.freeMatchData.owner_id;
			var array=[];
			for (var i=0;i < 15;i++){
				var obj=new Object();
				obj.index=i;
				obj.userId=FreeMatch.freeMatchData.userList_1[i];
				array.push(obj);
			}
		}

		/**
		*更新组队界面数据
		*
		*/
		__proto.updateTeamMatch=function(){
			FreeMatch.roomMaker=FreeMatch.freeMatchData.owner_id;
			var array1=[];
			var array2=[];
			var array3=[];
			if(FreeMatch.freeMatchData.userList_1.indexOf(RoleCenter.I.userId)!=-1){
				FreeMatch.myTeamId=1;
				FreeMatch.myIndex=FreeMatch.freeMatchData.userList_1.indexOf(RoleCenter.I.userId);
				}else if(FreeMatch.freeMatchData.userList_2.indexOf(RoleCenter.I.userId)!=-1){
				FreeMatch.myTeamId=2;
				FreeMatch.myIndex=FreeMatch.freeMatchData.userList_2.indexOf(RoleCenter.I.userId);
				}else if(FreeMatch.freeMatchData.userList_3.indexOf(RoleCenter.I.userId)!=-1){
				FreeMatch.myTeamId=3;
				FreeMatch.myIndex=FreeMatch.freeMatchData.userList_3.indexOf(RoleCenter.I.userId);
			}
			for (var i=0;i < 5;i++){
				var obj1=new Object();
				obj1.index=i;
				obj1.id=1;
				obj1.userId=FreeMatch.freeMatchData.userList_1[i];
				array1.push(obj1);
				var obj2=new Object();
				obj2.index=i;
				obj2.id=2;
				obj2.userId=FreeMatch.freeMatchData.userList_2[i];
				array2.push(obj2);
				var obj3=new Object();
				obj3.index=i;
				obj3.id=3;
				obj3.userId=FreeMatch.freeMatchData.userList_3[i];
				array3.push(obj3);
			}
		}

		// listTeam3.array=array3;
		__proto.updateTeamMatch3=function(){
			FreeMatch.roomMaker=FreeMatch.freeMatchData.owner_id;
			var array1=[];
			var array2=[];
			var array3=[];
			if(FreeMatch.freeMatchData.userList_1.indexOf(RoleCenter.I.userId)!=-1){
				FreeMatch.myTeamId=1;
				FreeMatch.myIndex=FreeMatch.freeMatchData.userList_1.indexOf(RoleCenter.I.userId);
				}else if(FreeMatch.freeMatchData.userList_2.indexOf(RoleCenter.I.userId)!=-1){
				FreeMatch.myTeamId=2;
				FreeMatch.myIndex=FreeMatch.freeMatchData.userList_2.indexOf(RoleCenter.I.userId);
			}
			for (var i=0;i < 5;i++){
				var obj1=new Object();
				obj1.index=i;
				obj1.id=1;
				obj1.userId=FreeMatch.freeMatchData.userList_1[i];
				array1.push(obj1);
				var obj2=new Object();
				obj2.index=i;
				obj2.id=2;
				obj2.userId=FreeMatch.freeMatchData.userList_2[i];
				array2.push(obj2);
			}
			FreeMatch.uAvtor1={};
			FreeMatch.uAvtor2={};
			var index=0;
			if(FreeMatch.freeMatchData.userList_1.indexOf(RoleCenter.I.userId)!=-1){
				index=1;
			}
			if(FreeMatch.freeMatchData.userList_2.indexOf(RoleCenter.I.userId)!=-1){
				index=2;
			}
			FreeMatch["uAvtor"+index][RoleCenter.I.userId]=RoleCenter.I.myBasicData.Avtor;
			SnowUtils.setDataInLocalStorage(RoleCenter.I.userId+"uAvtor"+index,FreeMatch["uAvtor"+index]);
			this.team1.array=array1;
			this.team2.array=array2;
		}

		/**
		*通知其他玩家有玩家加入
		*@param dat
		*
		*/
		__proto.onUserEnterCustomRoom=function(dat){
			if(dat.success==1){
				this.changeResult(dat);
				}else{
				TipsManager.instance.showText("当前房间已满,无法添加");
			}
		}

		/**
		*通知被T掉
		*@param dat
		*
		*/
		__proto.onSmsgBeKicked=function(dat){
			var cmd=MsgTemplate.createWithClass(CMsgExClose);
			GameSocket.sendClientMsg(cmd);
			GameSocket.I.onEnd();
			MsgManager.I.onEnd();
			Player.I.exit();
			FreeMatch.onHide();
		}

		/**
		*通知有人离开
		*@param dat
		*
		*/
		__proto.onUserLeftCustomRoom=function(dat){
			if(dat.owner_id){
				FreeMatch.roomMaker=FreeMatch.freeMatchData.owner_id=dat.owner_id;
				this.updateVisile();
			}
			this.changeResult(dat);
		}

		/**
		*通知其他人可以加载资源
		*@param dat
		*
		*/
		__proto.onLoadCustomResource=function(dat){
			UIMgr.closeUI(FreeMatch);
			MyGameEventHandler.I.changeGame();
			Loading.I.isLogin=true;
		}

		/**
		*同意交换位置
		*
		*/
		__proto.onSwitchPositionResult=function(dat){
			if(FreeMatch.myType==enumRoomType.ROOMTYPE_CUSTOM_TEAM){
				var array1=this.listByTeamId(dat.teamId_1);
				var array2=this.listByTeamId(dat.teamId_2);
				var oldUserId1=array1[dat.index_1];
				var oldUserId2=array2[dat.index_2];
				array1[dat.index_1]=oldUserId2;
				array2[dat.index_2]=oldUserId1;
			}
			this.changeResult(dat);
		}

		/**
		*通知有人换位
		*
		*/
		__proto.onUserChangePosition=function(dat){
			var index=0;
			if(FreeMatch.myType==enumRoomType.ROOMTYPE_CUSTOM_FREE){
				index=FreeMatch.freeMatchData.userList_1.indexOf(dat.userid);
				if(index !=-1){
					FreeMatch.freeMatchData.userList_1[index]=0
				}
				}else if(FreeMatch.myType==enumRoomType.ROOMTYPE_CUSTOM_TEAM){
				if(FreeMatch.freeMatchData.userList_1.indexOf(dat.userid)!=-1){
					index=FreeMatch.freeMatchData.userList_1.indexOf(dat.userid);
					FreeMatch.freeMatchData.userList_1[index]=0
					}else if(FreeMatch.freeMatchData.userList_2.indexOf(dat.userid)!=-1){
					index=FreeMatch.freeMatchData.userList_2.indexOf(dat.userid);
					FreeMatch.freeMatchData.userList_2[index]=0
				}
			}
			this.changeResult(dat);
		}

		/**
		*刷新切换之后的数据源
		*@param dat
		*
		*/
		__proto.changeResult=function(dat){
			if(!dat.userid)
				dat.userid=0;
			if(FreeMatch.myType==enumRoomType.ROOMTYPE_CUSTOM_FREE){
				FreeMatch.freeMatchData.userList_1[dat.index]=dat.userid;
				this.updateSingleMatch();
				}else if (FreeMatch.myType==enumRoomType.ROOMTYPE_CUSTOM_TEAM){
				this.listByTeamId(dat.userTeamId)[dat.index]=dat.userid;
				this.updateTeamMatch3();
			}
		}

		/**
		*更新列表
		*
		*/
		__proto.updateList=function(){
			if(FreeMatch.myType==enumRoomType.ROOMTYPE_CUSTOM_FREE){
				this.boxTeam3.visible=false;
				this.imgtitme.skin="freematch/title2.png";
				this.updateSingleMatch();
				}else if(FreeMatch.myType==enumRoomType.ROOMTYPE_CUSTOM_TEAM){
				this.boxTeam3.visible=true;
				this.imgtitme.skin="freematch/title4.png";
				this.titbg.width=SnowUtils.chkIsFB()?377:300;
				this.titips.x=SnowUtils.chkIsFB()?407:370;
				this.updateTeamMatch3();
			}
		}

		/**
		*邀请全部
		*
		*/
		__proto.onBtnInviteAll=function(){
			this.timeIndex=15;
			Laya.timer.loop(1000,this,this.clearMyTimer);
			var myInfo;
			var friends;
			if(!friends)return;
			for (var i=0;i < friends.length;i++){
				var fi=friends[i];
				if(fi.online){
					var da=new Object();
					da.type=FreeChoose.chooseType;
					da.rank=RoleCenter.I.rank;
					da.gender=RoleCenter.I.Gender;
					da.roomId=RoleCenter.I.myRoomId;
					HallApp.sendMessage(fi.friendId,JSON.stringify(da));
				}
			}
			this.onTcmd();
		}

		__proto.clearMyTimer=function(){
			this.timeIndex--;
			if(this.timeIndex <=0){
				this.timeIndex=15;
				Laya.timer.clear(this,this.clearMyTimer);
			}
		}

		// btnInvAll.visible=true;
		__proto.getFriendData=function(type){
			var friData=NotifyCenter.I.Query('onFriendListResult');
			if(!friData)return null;
			var voGr;
			for (var i=0,j=friData.groups.length;i < j;i++){
				voGr=friData.groups [i];
				if (voGr.id==type)return voGr;
			}
			return null;
		}

		/**
		*监听好友状态变化
		*@param data
		*@return
		*
		*/
		__proto.onGotFriendList=function(data){
			return true;
		}

		/**
		*组队添加机器人
		*@param team
		*
		*/
		__proto.onBtnTeamCom=function(team){
			if(this.updateArrLength(this.listByTeamId(team))>=5){
				TipsManager.instance.showText("当前队伍已满,无法添加机器人");
				return;
			};
			var cmd=new CMsgAddRobot();
			cmd.userTeamId=team;
			GameSocket.sendClientMsg(cmd);
		}

		/**
		*乱战添加机器人
		*
		*/
		__proto.onBtnSingleCom=function(){
			if(this.updateArrLength(FreeMatch.freeMatchData.userList_1)>=15){
				TipsManager.instance.showText("当前房间已满,无法添加机器人");
				return;
			};
			var cmd=new CMsgAddRobot();
			GameSocket.sendClientMsg(cmd);
		}

		/**
		*开始游戏
		*
		*/
		__proto.onBtnStart=function(){
			if(FreeMatch.myType==enumRoomType.ROOMTYPE_CUSTOM_FREE){
				if(this.updateArrLength(FreeMatch.freeMatchData.userList_1)<=1){
					TipsManager.instance.showText("至少有一名好友加入游戏，才可开始友谊赛!");
					return;
				}
				}else if(FreeMatch.myType==enumRoomType.ROOMTYPE_CUSTOM_TEAM){
				var index1=this.updateArrLength(FreeMatch.freeMatchData.userList_1);
				var index2=this.updateArrLength(FreeMatch.freeMatchData.userList_2);
				if(index1<=0 || index2<=0){
					TipsManager.instance.showText(SnowUtils.chkIsFB()?"At lease one player on each team is required to start the game.":"两队至少皆有一名玩家才可开始对战");
					return;
				}
			}
			for(var key in FreeMatch.uState){
				if (FreeMatch.uState[key] && FreeMatch.uState[key].state1 !=0){
					TipsManager.instance.showText("请等待其他玩家调整完毕！");
					return;
				}
			};
			var cmd=new CMsgLoadCustomResource();
			GameSocket.sendClientMsg(cmd);
		}

		/**
		*计算队伍实际人数
		*@param array
		*@return
		*
		*/
		__proto.updateArrLength=function(array){
			if(!array || array.length==0)return 0;
			var index=0;
			for (var i=0;i < array.length;i++){
				if(array[i]){
					index++;
				}
			}
			return index;
		}

		/**
		*根据teamId获取当前队伍数据
		*@param teamId
		*@return
		*
		*/
		__proto.listByTeamId=function(teamId){
			if(FreeMatch.freeMatchData){
				switch(teamId){
					case 1:
						return FreeMatch.freeMatchData.userList_1;
					case 2:
						return FreeMatch.freeMatchData.userList_2;
					case 3:
						return FreeMatch.freeMatchData.userList_3;
					}
			}
			return [];
		}

		__getset(1,FreeMatch,'I',function(){
			return FreeMatch._i;
		},ui.hall.page.team.FreeMatchUI._$SET_I);

		FreeMatch.onShowMe=function(dat){
			if(FreeMatch.bIsShow)return;
			FreeMatch.bIsShow=true;
			FreeMatch.myType=dat.type;
			FreeMatch.freeMatchData=dat;
			FreeMatch.uState=dat.userState
			UIMgr.openUI(FreeMatch);
			UIMgr.closeUI(FreeChoose);
		}

		FreeMatch.onHide=function(){
			UIMgr.closeUI(FreeMatch);
			MenuList.onShowMe();
		}

		FreeMatch.isZuDui=false;
		FreeMatch.myType=0;
		FreeMatch.roomMaker=0;
		FreeMatch.myIndex=0;
		FreeMatch.myTeamId=0;
		FreeMatch.changeInfo=null
		FreeMatch._i=null
		FreeMatch.freeMatchData=null
		FreeMatch.bIsShow=false;
		FreeMatch.uAvtor1={};
		FreeMatch.uAvtor2={};
		FreeMatch.uState={};
		return FreeMatch;
	})(FreeMatchUI)


	/**
	*...
	*@author ...
	*/
	//class view.page.ItemShow extends ui.hall.page.email.ItemShowUI
	var ItemShow=(function(_super){
		function ItemShow(){
			this.jzArr=null;
			this.isSelfOpen=false;
			ItemShow.__super.call(this);
		}

		__class(ItemShow,'view.page.ItemShow',_super);
		var __proto=ItemShow.prototype;
		__proto.onCreated=function(){
			view.UIBase0.prototype.onCreated.call(this);
			this.btnYes.on("click",this,this.onSelfClose,[1]);
			this.closeBtn.on("click",this,this.onSelfClose,[2]);
		}

		/**不要默认bj*/
		__proto.createBj=function(){}
		__proto.onClose=function(){
			this.itemBox.removeChildren();
			ItemShow._catchDtArr=[];
			this.isSelfOpen=false;
			view.UIBase0.prototype.onClose.call(this);
		}

		__proto.onOpen=function(){
			view.UIBase0.prototype.onOpen.call(this);
			this.title.text=ItemShow._tName;
			var sz=ItemShow._data.length;
			var i=NaN;
			var jiange=20;
			this.jzArr=[];
			var maxWidth=0;
			var itemWidth=NaN;
			var item;
			for (i=0;i < sz;i++){
				item=new Item2();
				item.init(ItemShow._data[i].itemId,ItemShow._data[i].itemNum);
				item.centerY=0;
				if(SnowUtils.chkIsFB()){
					itemWidth=item.width > item.lab_name.textField.width?item.width:item.lab_name.textField.width;
					}else{
					itemWidth=item.width > item.lab_name.textField.textWidth?item.width:item.lab_name.textField.textWidth;
				}
				if (itemWidth > maxWidth)
					maxWidth=itemWidth;
				item.x=(item.width+jiange)*i+(this.itemBox.width-item.width *sz-(sz-1)*jiange)/ 2;
				this.itemBox.addChild(item);
				if (ItemShow._data[i].itemId==1 || ItemShow._data[i].itemId==3){
					this.jzArr.push({target:item,itemId:ItemShow._data[i].itemId});
				}
				MenuList.I && MenuList.I.chkNewItemGet(ItemShow._data[i].itemId);
			}
			for (i=0,sz=this.itemBox._childs.length;i < sz;i++){
				item=this.itemBox._childs [i];
				item.x=(maxWidth+jiange)*i+(maxWidth-item.width)/2+(this.itemBox.width-maxWidth *sz-(sz-1)*jiange)/ 2;
			}
			this.addToParent(this);
			SoundManager.playSound(ConfigData.soundCfg[108]);
			EffectUtils.openDialog(this.myBox);
		}

		/**
		*@param type 1-确定，2-关闭
		*/
		__proto.onSelfClose=function(type){
			if (type==1){
				SoundManager.playSound(ConfigData.soundCfg[102]);
				}else if (type==2){
				SoundManager.playSound(ConfigData.soundCfg[104]);
			}
			this.jzFly();
			EffectUtils.closeDialog(this.myBox,Handler.create(this,this.onTweenClose));
			ItemShow.endCloseBack && ItemShow.endCloseBack.run();
			ItemShow.endCloseBack=null;
		}

		__proto.onTweenClose=function(){
			this.itemBox.removeChildren();
			view.page.ItemShow.I.isSelfOpen=false;
			ItemShow._callBack && ItemShow._callBack.run();
			if (ItemShow._catchDtArr.length > 0){
				var dt=ItemShow._catchDtArr.shift();
				view.page.ItemShow.onShow(dt.data,dt.tName,dt.cb);
			}else
			UIMgr.closeUI(ItemShow);
		}

		__proto.jzFly=function(){
			var obj;
			for (var i=0,sz=this.jzArr.length;i < sz;i++){
				obj=this.jzArr[i];
				if (obj.itemId==1){
				}
				else{
				}
			}
		}

		__getset(1,ItemShow,'I',function(){
			if (!ItemShow._instance)ItemShow._instance=UIMgr.getUI(ItemShow);
			return ItemShow._instance;
		},ui.hall.page.email.ItemShowUI._$SET_I);

		ItemShow.onShow=function(data,tName,cb){
			(tName===void 0)&& (tName="领取成功");
			if (view.page.ItemShow.I.isSelfOpen){
				ItemShow._catchDtArr.push({data:data,tName:tName,cb:cb});
				return;
			}
			view.page.ItemShow.I.isSelfOpen=true;
			ItemShow._data=data;
			ItemShow._tName=tName;
			ItemShow._callBack=cb;
			UIMgr.openUI(ItemShow,"layer_pop5");
		}

		ItemShow._data=null
		ItemShow._tName=null
		ItemShow._callBack=null
		ItemShow.endCloseBack=null
		ItemShow._catchDtArr=[];
		ItemShow._instance=null
		return ItemShow;
	})(ItemShowUI)


	//class view.page.GameTips extends ui.hall.page.team.GameTipsUI
	var GameTips=(function(_super){
		function GameTips(){
			GameTips.__super.call(this);
			this.resList=[
			{url:"res/atlas/gametips.atlas",type:"atlas" }];
		}

		__class(GameTips,'view.page.GameTips',_super);
		var __proto=GameTips.prototype;
		__proto.onCreated=function(){
			view.UIBase0.prototype.onCreated.call(this);
			this.btnKnow.on("click",this,this.onBtnKnow);
		}

		__proto.onOpen=function(){
			view.UIBase0.prototype.onOpen.call(this);
			this.btnCheck.selected=false;
			if(GameTips.showType==enumRoomType.ROOMTYPE_TEAM2V2){
				this.imgbg.skin="gametips/4_03.jpg";
			}
			else if(GameTips.showType==enumRoomType.ROOMTYPE_TEAM5V5){
				this.imgbg.skin="gametips/5_03.jpg";
			}
			else if(GameTips.showType==enumRoomType.ROOMTYPE_GEM){
				this.imgbg.skin="gametips/sj.jpg";
			}
			this.addToParent(this);
		}

		__proto.onClose=function(){
			this.imgbg.skin="";
			view.UIBase0.prototype.onClose.call(this);
		}

		/**
		*确定
		*
		*/
		__proto.onBtnKnow=function(){
			this.btnCheck.selected&&LocalStorage.setItem("snowGameTipsShow"+GameTips.showType,"have");
			GameTips.myCallBack&&GameTips.myCallBack.run();
			UIMgr.closeUI(GameTips);
		}

		GameTips.showMe=function(bIsShow,myTpye,callback){
			GameTips.showType=myTpye;
			GameTips.myCallBack=callback;
			if(bIsShow){
				var show=LocalStorage.getItem("snowGameTipsShow"+GameTips.showType);
				if(show=="have" || true){
					GameTips.myCallBack&&GameTips.myCallBack.run();
					}else{
					UIMgr.openUI(GameTips);
				}
			}
			else{
				UIMgr.closeUI(GameTips);
			}
		}

		GameTips.myCallBack=null
		GameTips.showType=0;
		return GameTips;
	})(GameTipsUI)


	/**
	*...
	*@author ...
	*/
	//class view.page.TrainingEndPage extends ui.gameBalance.TrainingEndUI
	var TrainingEndPage=(function(_super){
		function TrainingEndPage(){
			this._dataCmd=null;
			this.pScale=new Point(1.5,1.5);
			TrainingEndPage.__super.call(this);
			this.resList=[
			{url:"res/atlas/gameResult.atlas",type:"atlas" },
			{url:"res/atlas/common.atlas" ,type:"atlas" }];
		}

		__class(TrainingEndPage,'view.page.TrainingEndPage',_super);
		var __proto=TrainingEndPage.prototype;
		__proto.onCreated=function(){
			view.UIBase0.prototype.onCreated.call(this);
		}

		__proto.onClose=function(){
			view.UIBase0.prototype.onClose.call(this);
			this.imgbg.off("click",this,this.onBtnClose);
		}

		__proto.onBtnClose=function(type){{
				MenuList.onShowMe();
			}
			Laya.timer.once(100,this,function(){
				this.onClose();
				GamingView.I.onClose();
			});
			TrainingEndPage.myCallBack && TrainingEndPage.myCallBack.runWith(TrainingEndPage.myData);
			RoleCenter.finalMusic=ConfigData.soundCfg[1];
			SoundManager.playMusic(RoleCenter.finalMusic);
		}

		__proto.createBj=function(){}
		__proto.onOpen=function(){
			view.UIBase0.prototype.onOpen.call(this);
			UIMgr.closeUI(GameAgainView);
			ShowJiFen.clearAll();
			HotPanelItem.clearAll();
			UIMgr.closeUI(GamingView);
			this._dataCmd=TrainingEndPage.myData;
			if(enumRoomType.nowType==enumRoomType.ROOMTYPE_TRAINING){
				if (this._dataCmd && this._dataCmd.isSuccess){
					this.resultImg.skin="gameResult/tz_1.png";
					}else{
					this.resultImg.skin="gameResult/tz_2.png";
				}
				this.resultImg.centerY=25;
				this.imgbg.on("click",this,this.onBtnClose,[1]);
				}else{
				if(SnowUtils.chkIsFB()){
					this.resultImg.skin="gameResult/dwEnd.png";
					}else{
					this.resultImg.skin="gameResult/dwEnd2.png";
				}
				this.resultImg.centerY=0;
				this.imgbg.on("click",this,this.onBtnClose,[0]);
			}
			SoundManager.playSound(ConfigData.soundCfg[35]);
			this.imgbg.on("click",this,this.onBtnClose);
			this.resultImg.alpha=0;
			this.resultImg.scale(3,3);
			Tween.to(this.resultImg,{alpha:1,scaleX:1.2,scaleY:1.2},500,null,null,200);
			this.addToParent(this);
		}

		TrainingEndPage.showMe=function(bIsShow,myType,dat,callback){
			TrainingEndPage.showType=myType;
			TrainingEndPage.myCallBack=callback;
			TrainingEndPage.myData=dat;
			if(bIsShow){
				GamingView.I.gameCtrl.stopCtrl();
				Player.isStartGame=false;
				UIMgr.openUI(TrainingEndPage,"layer_pop4");
			}
			else{
				UIMgr.closeUI(TrainingEndPage);
			}
		}

		TrainingEndPage.myCallBack=null
		TrainingEndPage.showType=0;
		TrainingEndPage.myData=null
		return TrainingEndPage;
	})(TrainingEndUI)


	/**
	*...
	*@author luohuantao
	*/
	//class view.page.GroupModeView extends ui.hall.page.team.GroupModeUI
	var GroupModeView=(function(_super){
		function GroupModeView(){
			this.selfType=0;
			GroupModeView.__super.call(this);
			this.resList=[
			{url:"res/atlas/groupMode.atlas",type:"atlas" }];
		}

		__class(GroupModeView,'view.page.GroupModeView',_super);
		var __proto=GroupModeView.prototype;
		__proto.createBj=function(){}
		__proto.onCreated=function(){
			view.UIBase0.prototype.onCreated.call(this);
			this.btn_close.on("click",this,this.onCloseClick2);
			this.btn_2.on("click",this,this.on2V2Click);
			this.btn_5.on("click",this,this.on5V5Click);
		}

		__proto.onCloseClick2=function(){
			this.onCloseClick();
		}

		__proto.onOpen=function(){
			view.UIBase0.prototype.onOpen.call(this);
			MenuList.I.updateBgCache("normal");
			this.addToParent(this);
			this.onTweenOpen();
		}

		/**显示效果**/
		__proto.onTweenOpen=function(){
			var btn_2Din=375;
			var btn_5Din=907;
			this.btn_2.x=1280;
			this.btn_5.x=-this.btn_5.width;
			Tween.to(this.btn_2,{x:btn_2Din},500,Ease.backOut);
			Tween.to(this.btn_5,{x:btn_5Din},500,Ease.backOut);
		}

		/**
		*关闭效果
		*@param callBack
		*/
		__proto.onTweenClose=function(callBack){
			var btn_2Din=1280;
			var btn_5Din=-this.btn_5.width;
			this.btn_2.x=375;
			this.btn_5.x=907;
			Tween.to(this.btn_2,{x:btn_2Din},300,Ease.backIn);
			Tween.to(this.btn_5,{x:btn_5Din},300,Ease.backIn,callBack);
		}

		__proto.onClose=function(){
			MenuList.I.updateBgCache();
			view.UIBase0.prototype.onClose.call(this);
		}

		__proto.onCloseClick=function(){
			this.onTweenClose(Handler.create(this,this.onCloseUI));
		}

		__proto.onCloseUI=function(){
			UIMgr.closeUI(GroupModeView);
		}

		__proto.on2V2Click=function(){
			EffectUtils.scaleEffect(this.btn_2,Handler.create(this,this.onTween2V2));
		}

		__proto.onTween2V2=function(){
			var _$this=this;
			this.selfType=enumRoomType.ROOMTYPE_TEAM2V2;
			GameTips.showMe(true,this.selfType,new Handler(this,function(){
				TeamView.showGroupOrNew="group";
				TeamView.showMe(_$this.selfType,true);
			}))
			this.onCloseClick();
			Laya.timer.once(100,this,function(){
			});
		}

		//UIMgr.closeUI(SpinWheelView);
		__proto.on5V5Click=function(){
			EffectUtils.scaleEffect(this.btn_5,Handler.create(this,this.onTween5V5));
		}

		__proto.onTween5V5=function(){
			var _$this=this;
			this.selfType=enumRoomType.ROOMTYPE_TEAM5V5;
			GameTips.showMe(true,this.selfType,new Handler(this,function(){
				TeamView.showGroupOrNew="group";
				TeamView.showMe(_$this.selfType,true);
			}))
			this.onCloseClick();
			Laya.timer.once(100,this,function(){
			});
		}

		GroupModeView.onShowMe=function(){
			UIMgr.openUI(GroupModeView,"layer_pop4");
		}

		return GroupModeView;
	})(GroupModeUI)


	//class view.page.NewRankView extends ui.hall.page.newRank.RankListViewUI
	var NewRankView=(function(_super){
		function NewRankView(){
			this._rankTexture=null;
			NewRankView.__super.call(this);
			this.resList=[
			{url:"res/atlas/newRank.atlas",type:"atlas" }];
		}

		__class(NewRankView,'view.page.NewRankView',_super);
		var __proto=NewRankView.prototype;
		__proto.onCreated=function(){
			view.UIBase0.prototype.onCreated.call(this);
			this.startBtn.on("click",this,this.onCloseBtnClick);
			this.tab_rank.selectHandler=new Handler(this,this.onTabRankHandler);
			NotifyCenter.I.on("onRenderRanklist",this,this.onRenderRankList);
		}

		__proto.onRenderRankList=function(){
			console.log("-------------------onRenderRankList-------1-----------------------");
			this.onTabRankHandler(0);
		}

		/**
		*获取排行的数据信息
		*@param index
		*/
		__proto.onTabRankHandler=function(index){
			NewRankView._pageType=index;
			SoundManager.playSound(ConfigData.soundCfg[101],1)
			if(Browser.onMiniGame){
				MsgMgr.postMessage({type:MsgMgr.DUANWEI,pageType:NewRankView._pageType,data:CrazySnowball.shareData});
				Laya.timer.once(700,this,this.onAddRank);
			}
		}

		// }
		__proto.onCloseBtnClick=function(){
			if(FreeMatch._i){
				var cmd=new CMsgLeaveCustomRoom();
				GameSocket.sendClientMsg(cmd);
				FreeMatch.I.onSmsgBeKicked(null);
			}
			if(NotifyCenter.I.isNewUser()){
				NotifyCenter.I.onStartGuide();
				}else{
				UIMgr.closeUI(NewRankView);
				MenuList.onShowMe();
			}
		}

		__proto.onOpen=function(){
			view.UIBase0.prototype.onOpen.call(this);
			this.addToParent(this);
		}

		__proto.onAddRank=function(){
			this.box_rank.mouseEnabled=true;
			this.box_rank.mouseThrough=true;
			this.box_rank.graphics.clear();
			if(!this._rankTexture){
				this._rankTexture=new Texture(Browser.window.sharedCanvas);
				this._rankTexture.bitmap.alwaysChange=true;
			}
			this.box_rank.graphics.drawTexture(this._rankTexture,0,0,this._rankTexture.width,this._rankTexture.height);
		}

		__proto.onClose=function(){
			this.box_rank.graphics.clear();
			CrazySnowball.removePreBox();
			this.box_rank.graphics.clear();
			view.UIBase0.prototype.onClose.call(this);
		}

		NewRankView.onShowMe=function(){
			UIMgr.openUI(NewRankView);
		}

		NewRankView._pageType=0;
		NewRankView._pageArr=[];
		return NewRankView;
	})(RankListViewUI)


	//class view.page.ShareInfoView extends ui.hall.page.activity.ShareInfoUI
	var ShareInfoView=(function(_super){
		function ShareInfoView(){
			this.hisitryDiamond=0;
			this.shareData=null;
			this._curType=0;
			this.nowCanGet=NaN;
			this.datObj={};
			ShareInfoView.__super.call(this);
			this.resList=[{url:"res/atlas/shareInfo.atlas",type:"atlas"}];
		}

		__class(ShareInfoView,'view.page.ShareInfoView',_super);
		var __proto=ShareInfoView.prototype;
		__proto.onCreated=function(){
			view.UIBase0.prototype.onCreated.call(this);
			this.btnClose.on("click",this,this.onBtnClose);
			this.btnShare.on("click",this,this.onBtnShare);
			this.list2.renderHandler=new Handler(this,this.rightRender)
		}

		//btnGet.on(Event.CLICK,this,onBtnGet);
		__proto.rightRender=function(item,index){}
		/**
		*领取金币
		*/
		__proto.onBtnGet=function(){
			var cmd=new RequestReceiveShare();
			HallApp.notify(cmd);
		}

		/**
		*关闭
		*
		*/
		__proto.onBtnClose=function(){
			SnowUtils.shareBall("other",{});
			EffectUtils.closeDialog(this.boxMy,Handler.create(this,function(){
				UIMgr.closeUI(ShareInfoView);
			}));
		}

		/**
		*分享
		*
		*/
		__proto.onBtnShare=function(){
			if (this.btnShare.skin=="shareInfo/btn_lq.png"){
				this.onBtnGet();
				return;
			}
			RoleCenter.I.shareType=23;
			if(this._curType==1){
				SnowUtils.shareInitiative("Invitingfriends",{fromType:"menuShare" });
				}else{
				SnowUtils.shareInitiative("rewardInfo",{shareType:"rewardInfo",fromType:"rewardInfo"});
				StatManager.I.v2_share("rewardInfo");
			}
			StatManager.I.v2_openpage(3);
			StatManager.I.v2_share("menuShare");
		}

		__proto.onOpen=function(){
			view.UIBase0.prototype.onOpen.call(this);
			this.onTabSelectHandler(0);
			NotifyCenter.I.on('onNotify',this,this.onGotNotify);
			NotifyCenter.I.on('searchByUIdResult',this,this.onSearchData);
			HallApp.notify(new RequestDailyShareAward());
			this.shareData=NotifyCenter.I.Query(30031+"");
			if(!this.shareData){
				var obj={};
				obj.nowCanGet=0;
				obj.todayGet=0;
				obj.everGet=0;
				obj.whoClicksTheLink=[];
				NotifyCenter.I.SetData(30031+"",obj);
				this.shareData=obj;
			}
			this.list1.array=this.getDataArr();
			this.nowCanGet=0 | this.shareData.nowCanGet;
			this.canGet.value=(this.shareData.nowCanGet | 0)+"";
			this.changeInfo(this.shareData);
			SnowUtils.shareBall("Sharingactivities",{fromType:"menuShare"});
			this.addToParent(this);
			var data=NotifyCenter.I.Query("on_GotGameDataResult");
			if(!data || !data.results){
				return;
			};
			var fjson=data.results.fjson;
			this.list2.array=[null,null,null,null,null];
			if(fjson && fjson.shareAward && fjson.shareAward.lastShareTime){
				if (new Date(fjson.shareAward.lastShareTime).toLocaleDateString()===new Date().toLocaleDateString()){
					var arr=this.list2.array;
					var listArr=fjson.shareAward.whoClickedMyLink;
					for (var i=0,len=listArr.length;i < len;i++){
						arr[i]=listArr[i];
						if(!this.datObj[listArr[i]])
							HallApp.searchByUId(listArr[i]);
					}
				}
			}
			this.list2.array=this.list2.array;
			EffectUtils.openDialog(this.boxMy);
		}

		__proto.onSearchData=function(data){
			if (!data.userBasicData)
				return;
			this.datObj[data.userBasicData.userId]=data.userBasicData;
			this.list2.array=this.list2.array;
		}

		__proto.onTabSelectHandler=function(index){
			SoundManager.playSound(ConfigData.soundCfg[102],1)
			this._curType=index;
			this.initList();
			this.btnShare.skin="shareInfo/btn_share.png";
			if (this._curType==1){
				this.shareData=NotifyCenter.I.Query(30031+"");
				if (this.shareData.nowCanGet !=0){
					this.btnShare.skin="shareInfo/btn_lq.png";
				}
				else{
					this.btnShare.skin="shareInfo/btn_invite.png";
				}
				SnowUtils.shareBall("Invitingfriends",{fromType:"menuShare"});
				}else{
				SnowUtils.shareBall("Sharingactivities",{fromType:"menuShare"});
			}
			this.btnShare.pivot(this.btnShare.width / 2,this.btnShare.height / 2);
		}

		__proto.initList=function(){
			if (this._curType==0){
				this.leftCard.visible=true;
				this.rightCard.visible=false;
				}else if (this._curType==1){
				this.leftCard.visible=false;
				this.rightCard.visible=true;
			}
		}

		__proto.getDataArr=function(){
			var rep=NotifyCenter.I.Query(30087);
			if (!rep)return [];
			var jlArr=rep.ids;
			var jlNumArr=rep.nums;
			var voItemCfg;
			var obj;
			var resArr=[];
			for (var i=0,len=jlArr.length;i < len;i++){
				obj={};
				voItemCfg=ConfigData.itemData [jlArr[i]];
				if (!voItemCfg)continue ;
				if (voItemCfg.type==7){
					if(voItemCfg.deadline)
						obj.str="体验卡"+Math.floor(voItemCfg.deadline / 24)+"天";
					else
					obj.str="永久";
				}
				else{
					obj.str="x"+jlNumArr[i];
				}
				obj.skin=SnowUtils.itemIconUrl(jlArr[i]);
				obj.dtId=jlArr[i];
				resArr.push(obj);
			}
			return resArr;
		}

		__proto.changeInfo=function(shareData){
			var myNum=ConfigData.gameCfg['shareAwardNumTwo'][0] | 0;
			var maxNum=(ConfigData.gameCfg['passiveMax'] | 0)*myNum;
			this.hisitryDiamond=maxNum-shareData.todayGet;
			this.imgHisitry.value=this.hisitryDiamond+"";
			this.jd.value=(0 | (shareData.todayGet / myNum))+"/"+ConfigData.gameCfg['passiveMax'];
			this.nowCanGet=0 | shareData.nowCanGet;
			this.canGet.value=(shareData.nowCanGet | 0)+"";
			if (shareData.nowCanGet !=0 && this._curType==1){
				this.btnShare.skin="shareInfo/btn_lq.png";
			}
			else{
				if (this._curType==1)
					this.btnShare.skin="shareInfo/btn_invite.png"
				else
				this.btnShare.skin="shareInfo/btn_share.png";
			}
			this.btnShare.pivot(this.btnShare.width / 2,this.btnShare.height / 2);
		}

		/**
		*处理透传数据
		*@param data
		*
		*/
		__proto.onGotNotify=function(data){
			var dat=NotifyCenter.I.Query("on_GotGameDataResult");
			if(!dat || !dat.results){
				return;
			};
			var fjson=dat.results.fjson;
			switch (data.method){
				case 30031:
					this.shareData=NotifyCenter.I.Query(30031+"");
					if (fjson.shareAward)fjson.shareAward.whoClickedMyLink=this.shareData.whoClicksTheLink;
					var arr=this.list2.array;
					var listArr=fjson.shareAward.whoClickedMyLink;
					for (var i=0,len=listArr.length;i < len;i++){
						arr[i]=listArr[i];
						if(!this.datObj[listArr[i]])
							HallApp.searchByUId(listArr[i]);
					}
					this.list2.array=this.list2.array
					this.changeInfo(this.shareData);
					break ;
				case 30045:
					break ;
				case 30061:
					ItemShow.onShow([{itemId:3,itemNum:this.nowCanGet}],"分享奖励");
					this.shareData=NotifyCenter.I.Query(30031+"");
					this.shareData.nowCanGet=0;
					this.nowCanGet=0;
					this.btnShare.skin="shareInfo/btn_share.png";
					this.btnShare.pivot(this.btnShare.width / 2,this.btnShare.height / 2);
					this.onBtnClose();
					UIMgr.closeUI(ShareTips);
					break ;
				case 30087:
					this.list1.array=this.getDataArr();
					break ;
				}
		}

		/**
		*不创建背景
		*
		*/
		__proto.createBj=function(){}
		__proto.onClose=function(){
			NotifyCenter.I.off('onNotify',this,this.onGotNotify);
			NotifyCenter.I.off('searchByUIdResult',this,this.onSearchData);
			ShareInfoView.cbk && ShareInfoView.cbk.run();
			view.UIBase0.prototype.onClose.call(this);
		}

		ShareInfoView.onShow=function(callBack){
			ShareInfoView.cbk=callBack;
			UIMgr.openUI(ShareInfoView,"layer_pop5");
		}

		ShareInfoView.cbk=null
		return ShareInfoView;
	})(ShareInfoUI)


	/**
	*游戏登陆后公告
	*@author xiaosong
	*@date-2017-06-10
	*/
	//class view.page.NoticeHouUI extends ui.hall.page.prompt.NoticeHouViewUI
	var NoticeHouUI=(function(_super){
		function NoticeHouUI(){
			this._currentNoticeIndex=-1;
			this._isCalllater=false;
			NoticeHouUI.__super.call(this);
			this.resList=[
			{url:"res/atlas/common.atlas",type:"atlas"}];
		}

		__class(NoticeHouUI,'view.page.NoticeHouUI',_super);
		var __proto=NoticeHouUI.prototype;
		__proto.onClose=function(){
			this._isCalllater=false;
			this._currentNoticeIndex=-1;
			NoticeHouUI.noticeArr=null;
			view.UIBase0.prototype.onClose.call(this);
		}

		__proto.onCreated=function(){
			view.UIBase0.prototype.onCreated.call(this);
			this.btnYes.on("click",this,this.onYesBtnClick);
		}

		__proto.onYesBtnClick=function(){
			if(this._isCalllater)
				return;
			this._isCalllater=true;
			this._currentNoticeIndex++;
			if(this._currentNoticeIndex >=NoticeHouUI.noticeArr.length){
				EffectUtils.closeDialog(this.dialog,Handler.create(this,this.onClose));
				}else{
				if(this._currentNoticeIndex==NoticeHouUI.noticeArr.length-1){
					this.btnYes.skin="common/whgb.png";
					}else{
					this.btnYes.skin="common/whxyt.png";
				}
				this.onSwitchNotice(this._currentNoticeIndex);
			}
		}

		/**
		*切换显示公告内容
		*@param index
		*/
		__proto.onSwitchNotice=function(index){
			var obj=NoticeHouUI.noticeArr[index];
			obj&&(this.htmlEle.innerHTML=obj.content);
			this._isCalllater=false;
		}

		__proto.onOpen=function(){
			view.UIBase0.prototype.onOpen.call(this);
			this.addToParent(this);
			this.onYesBtnClick();
			EffectUtils.openDialog(this.dialog);
		}

		NoticeHouUI.onShowMe=function(data){
			if(data)
				NoticeHouUI.noticeArr=data;
			if(!GuideMgr.isTeach){
				UIMgr.openUI(NoticeHouUI,"layer_tips");
			}
		}

		NoticeHouUI.noticeArr=null;
		return NoticeHouUI;
	})(NoticeHouViewUI)


	/**
	*玩家信息页面
	*@author xiaosong
	*@date 2017-03-14
	*/
	//class view.page.PlayerListUI extends ui.hall.page.playerList.PlayerListViewUI
	var PlayerListUI=(function(_super){
		function PlayerListUI(){
			this._chengjiuArr=null;
			this._prevHistoryArr=null;
			this._myBasicData=null;
			this._currentTypeArr=[];
			this._btnArr=[{n:"battle",t:true},{n:"zhanji",t:false}];
			this._preIndex=0;
			this._generalData=null;
			this._isRqeustDataBack=false;
			this._panelEffect=null;
			this.playerUIData=null;
			this.remainPoint=0;
			this.remainResetCount=0;
			this.addPoint={};
			this.rNum=NaN;
			this.bNum=NaN;
			this.datObj={};
			this.duanWeiStar=0;
			PlayerListUI.__super.call(this);
			this.resList=[{url:"res/atlas/common.atlas",type:"atlas"},
			{url:"res/atlas/player.atlas",type:"atlas"},
			{url:"res/atlas/passiveSkills.atlas",type:"atlas"}];
		}

		__class(PlayerListUI,'view.page.PlayerListUI',_super);
		var __proto=PlayerListUI.prototype;
		/**初始化左侧按钮状态**/
		__proto.initLeftBtnType=function(index){
			(index===void 0)&& (index=0);
			for (var i=0,sz=this._btnArr.length;i < sz;i++){
				(this ['btn'+i]).on("click",this,this.onLeftBtnClick,[i]);
				var obj=this._btnArr[i];
				if (obj.t){
					this._preIndex=i;
					(this ['btn'+i]).skin="player/"+this._btnArr[i].n+"_l1.png";
				}
				else{
					(this ['btn'+i]).skin="player/"+this._btnArr[i].n+"_l2.png";
				}
			}
			this.onLeftBtnClick(index);
		}

		__proto.updateRed=function(){
			var dat=NotifyCenter.I.Query("on_GotGameDataResult");
		}

		/**
		*左侧按钮点击
		*@param i 按钮索引id
		*@param evt
		*/
		__proto.onLeftBtnClick=function(i,evt){
			if (this._isRqeustDataBack){
				TipsManager.instance.showText(SnowUtils.chkIsFB()?"Retrieving data..":"页面数据请求中，请等待!");
				this.loading.visible=true;
				Laya.timer.frameLoop(5,this,this.onSnowTimeLoop);
				return;
			}
			(this ['btn'+this._preIndex]).skin="player/"+this._btnArr[this._preIndex].n+"_l2.png";
			(this ['btn'+i]).skin="player/"+this._btnArr[i].n+"_l1.png";
			this._btnArr[this._preIndex].t=false;
			this._btnArr[i].t=true;
			this._preIndex=i;
			this.viewStack.selectedIndex=i;
			if (i==1)
				this.zhanjiList.array=this._prevHistoryArr;
			else if (i==0){
				this.onBattleDataRender();
			}
			SoundManager.playSound(ConfigData.soundCfg[102],1);
			this.loading.visible=false;
		}

		__proto.onSnowTimeLoop=function(){
			this.loading.rotation+=8;
		}

		__proto.updateGoldPay=function(){}
		/**
		*格式化时间戳
		*@param stamp
		*@param formatStr
		*@return
		*/
		__proto.getDateFormatStr=function(stamp){
			var date=new Date(stamp);
			var nn=((date.getMonth()+1)< 10)? "0"+(date.getMonth()+1):(date.getMonth()+1)+"";
			var dd=(date.getDate()< 10)? "0"+date.getDate():date.getDate()+"";
			var hh=(date.getHours()<10)? "0"+date.getHours():date.getHours()+"";
			var mm=(date.getMinutes()< 10)?"0"+date.getMinutes():date.getMinutes()+"";
			return nn+"-"+dd+"  "+hh+":"+mm;
		}

		__proto.removeSocketEvent=function(){
			NotifyCenter.I.off("on_GotGameDataResult",this,this.onGetUserInfoData);
			NotifyCenter.I.off('onGotCurrentSeasonDataResult',this,this.onGetMyCurSeasonData);
		}

		/**初始化事件**/
		__proto.initEvent=function(){
			this.zhanjiList.vScrollBarSkin="";
			this.zhanjiList.selectEnable=true;
			this.zhanjiList.scrollBar.elasticDistance=200;
			this.zhanjiList.renderHandler=new Handler(this,this.onZhanJiListRender);
		}

		/**初始化tips说明内容**/
		__proto.initTipsInfo=function(text,target){}
		/**
		*帮助
		*
		*/
		__proto.onBtnPointHelp=function(){
			this.on("mouseup",this,this.onTipsUp);
		}

		__proto.onTipsUp=function(){
			this.off("mouseup",this,this.onTipsUp);
		}

		/**
		*重置点数
		*
		*/
		__proto.onBtnRestart=function(){
			if (this.remainResetCount > 0){
				this.requestStart();
			}
			else{
				TipsView.myCallback=new Handler(this,this.requestStart);
				TipsView.showMe("","是否花费"+ConfigData.gameCfg.resetAttpGold+"金币洗点",1,false);
			}
		}

		__proto.requestStart=function(){
			var cmd=new RequestUseReset();
			cmd.resetType=0;
			HallApp.notify(cmd);
		}

		/**
		*取消加点
		*
		*/
		__proto.onBtnCancle=function(){
			var dat=NotifyCenter.I.Query("on_GotGameDataResult");
			if (dat && dat.results.fjson && dat.results.fjson.attributePoint){
				this.updatePoint(dat.results.fjson.attributePoint);
			}
			this.addPoint={};
			this.timer.callLater(this,this.changePointBtn);
		}

		__proto.updatePoint=function(attributePoint){
			this.remainPoint=attributePoint.remainPoint;
			this.remainResetCount=attributePoint.remainResetCount;
			this.updateGoldPay();
		}

		/**
		*确定加点
		*
		*/
		__proto.onBtnEnter=function(){
			var cmd=new RequestUseAttPoint();
			cmd.addAttPoint=this.addPoint;
			HallApp.notify(cmd);
		}

		/**
		*属性点渲染
		*
		*/
		__proto.renderListPro=function(item,index){
			if (!item || !item.dataSource)return;
			var txtPros=item.getChildByName("txtPros");
			var btnAdd=item.getChildByName("btnAdd");
			var btnRemove=item.getChildByName("btnRemove");
			var jdt=item.getChildByName("jdt");
			var jdt2=item.getChildByName("jdt2");
			var dat=item.dataSource;
			item.dataSource.maxPro=dat.size || 0;
			jdt.value=(dat.size / PlayerListUI.POINTMAX > 1 ? 1 :dat.size / PlayerListUI.POINTMAX);
			this.timer.callLater(this,function(a,b){
				a.width=b.bar.width;
				a.visible=!!b.value;
			},[jdt2,jdt])
			txtPros.text=SnowLang.getProByName(dat.name);
			var str=ConfigData.gameCfg[dat.name] ? ConfigData.gameCfg[dat.name] :""
			item.on("mousedown",this,this.onItemDown,[str,item]);
			btnAdd.on("click",this,this.btnAddHandle,[dat.name,item]);
			btnRemove.on("click",this,this.btnRemoveHandle,[dat.name,item]);
			btnRemove.disabled=true;
		}

		__proto.onItemDown=function(text,item){
			if (!text)return;
			this.initTipsInfo(text,item);
			this.on("mouseup",this,this.onTipsUp);
		}

		/**
		*减点
		*@param name
		*@param item
		*
		*/
		__proto.btnRemoveHandle=function(name,item){
			if (item.dataSource.maxPro <=0){
				TipsManager.instance.showText("已达最小值!");
				return;
			}
			if (item.dataSource.maxPro <=item.dataSource.size){
				TipsManager.instance.showText("没有可减点数");
				return;
			}
			this.remainPoint++;
			item.dataSource.maxPro--;
			this.addPoint[name]=item.dataSource.maxPro-item.dataSource.size;
			var jdt=item.getChildByName("jdt");
			jdt.value=(item.dataSource.maxPro / PlayerListUI.POINTMAX > 1 ? 1 :item.dataSource.maxPro / PlayerListUI.POINTMAX);
			this.changePointBtn();
		}

		/**
		*加点
		*@param name
		*@param item
		*
		*/
		__proto.btnAddHandle=function(name,item){
			if (this.remainPoint > 0){
				if (item.dataSource.maxPro >=PlayerListUI.POINTMAX){
					TipsManager.instance.showText("已达最大值!");
					return;
				}
				this.remainPoint--;
				item.dataSource.maxPro++;
				this.addPoint[name]=item.dataSource.maxPro-item.dataSource.size;
				var jdt=item.getChildByName("jdt");
				jdt.value=(item.dataSource.maxPro / PlayerListUI.POINTMAX > 1 ? 1 :item.dataSource.maxPro / PlayerListUI.POINTMAX);
				this.changePointBtn();
			}
			else
			TipsManager.instance.showText("剩余属性点不够!");
		}

		/**
		*处理透传数据
		*@param data
		*
		*/
		__proto.onGotNotify=function(data){
			switch (data.method){
				case 30053:;
					var point=data;
					if (point.useResult==2){
						this.addPoint={};
						var dat=NotifyCenter.I.Query("on_GotGameDataResult");
						if (dat && dat.results.fjson && dat.results.fjson.attributePoint){
							data && (dat.results.fjson.attributePoint=point.attpData);
						}
						data && this.updatePoint(point.attpData);
					}
					else if (point.useResult==1){
						this.addPoint={};
						var dat2=NotifyCenter.I.Query("on_GotGameDataResult");
						if (dat2 && dat2.results.fjson && dat2.results.fjson.attributePoint){
							data && (dat2.results.fjson.attributePoint=point.attpData);
						}
						this.updateRed();
						data && this.updatePoint(point.attpData);
					}
					else if (point.useResult==4){
						TipsManager.instance.showText("重置点数失败");
					}
					else if (point.useResult==3){
						TipsManager.instance.showText("更改点数失败");
					}
					break ;
				case 30057:
					if ((data).code==0){
						this.playerUIData.usingAchieve=(data).resultArr;
						this.initAchieveItems();
					}
					else{
						TipsManager.instance.showText("保存失败!");
					}
					break ;
				case 30058:
					this.netWorkControl&&this.netWorkControl.detroy();
					if (data.code==0){
						PlayerListUI.AchieveDatas[99999].curLevel=data.lv;
						var rwObj=ConfigData.achieveReward[data.lv];
						var jlArr=[];
						var obj;
						for (var i=0,len=rwObj.rewardID.length;i < len;i++){
							obj={};
							obj.itemId=rwObj.rewardID[i];
							obj.itemNum=rwObj.rewardNum[i];
							jlArr.push(obj);
						}
						this.initAchieveView();
					}
					else{
						if (data.code==1)
							TipsManager.instance.showText("经验不足!");
					}
					break ;
				default :
					break ;
				}
		}

		/**
		*刷新按钮状态
		*
		*/
		__proto.changePointBtn=function(){
			this.updateRed();
		}

		__proto.initSocketEvent=function(){
			NotifyCenter.I.on("on_GotGameDataResult",this,this.onGetUserInfoData);
			NotifyCenter.I.on('onGotCurrentSeasonDataResult',this,this.onGetMyCurSeasonData);
		}

		/**修改信息**/
		__proto.onReviseBtnClick=function(evt){}
		/**修改回调**/
		__proto.onReviseCallBack=function(){
			this.initSocketEvent();
			HallApp.getGameData({fjson:1});
		}

		/**
		*添加动画效果
		*@param item
		*/
		__proto.onItemClick=function(item){
			EffectUtils.scaleEffect(item);
		}

		/**
		*历史战绩渲染
		*@param item
		*@param item
		*@param index
		*/
		__proto.onZhanJiListRender=function(item,index){
			if (index < 0 && index >=this._prevHistoryArr.length)
				return;
			var matchHistory=this._prevHistoryArr [index];
			var roomTypeTxt=item.getChildByName("roomTypeTxt");
			var timeTxt=item.getChildByName("timeTxt");
			var rank=item.getChildByName("rank");
			var rankTxt=item.getChildByName("rankTxt");
			var maxScoreTxt=item.getChildByName("maxScoreTxt");
			var heroIcon=item.getChildByName("heroIcon");
			var skillList=item.getChildByName("skillList");
			timeTxt.text=this.getDateFormatStr(matchHistory.time);
			for (var i=0;i < 5;i++){
				(skillList.getCell(i)).skin="player/empty.png";
				if(matchHistory.skillOwnedWithLevel){
					if(i<matchHistory.skillOwnedWithLevel.length){
						(skillList.getCell(i)).skin="passiveSkills/"+ConfigData.skillCfg[matchHistory.skillOwnedWithLevel[i]].btnIcon+".png";
					}
				}
			}
			maxScoreTxt.text=matchHistory.maxScore.toString();
			if(matchHistory.heroId){
				heroIcon.skin=SnowUtils.heroIconUrl(matchHistory.heroId);
				}else{
				heroIcon.skin="player/defIco.png";
			}
			switch (matchHistory.rank){
				case 1:
					rankTxt.visible=false;
					rank.skin="player/1st.png";
					rank.visible=true;
					break ;
				case 2:
					rankTxt.visible=false;
					rank.skin="player/2nd.png";
					rank.visible=true;
					break ;
				case 3:
					rankTxt.visible=false;
					rank.skin="player/3rd.png";
					rank.visible=true;
					break ;
				default :
					rank.visible=false;
					rankTxt.text=matchHistory.rank+"th";
					rankTxt.visible=true;
					break ;
				}
			switch(matchHistory.roomType){
				case enumRoomType.ROOMTYPE_SOLO_NPC:
					roomTypeTxt.text=SnowUtils.chkIsFB()?"AI Mode":"人机练习";
					break ;
				case enumRoomType.ROOMTYPE_TEAM2V2:
					roomTypeTxt.text="团队2V2";
					break ;
				case enumRoomType.ROOMTYPE_TEAM5V5:
					roomTypeTxt.text="团队5V5";
					break ;
				case enumRoomType.ROOMTYPE_CUSTOM_FREE:
					roomTypeTxt.text="友谊赛乱斗";
					break ;
				case enumRoomType.ROOMTYPE_CUSTOM_TEAM:
					roomTypeTxt.text=SnowUtils.chkIsFB()?"3v3 Mode":"3v3对战";
					break ;
				case enumRoomType.ROOMTYPE_LADDER:
					roomTypeTxt.text=SnowUtils.chkIsFB()?"Rank Mode":"段位赛";
					break ;
				}
			this.visible=true;
		}

		/**
		*设置等级进度条等等
		*@param lv 等级数据
		*/
		__proto.setPro=function(lv){
			var curObj=lv;
			if (!ConfigData.prestigeLevel[curObj.level]){
				return;
			}
			if (curObj.level==0)curObj.level=1;
			RoleCenter.I.level=curObj.level;
			var curNum=ConfigData.prestigeLevel[curObj.level].exp;
			if (curObj.level > 0)
				curNum=curNum-ConfigData.prestigeLevel[curObj.level-1].exp;
			var scaleX=(curNum-curObj.expRequired)/ curNum < 0 ? 0 :(curNum-curObj.expRequired)/ curNum;
			scaleX=scaleX > 1 ? 1 :scaleX;
		}

		// expNum.text=(curNum-curObj.expRequired)+'/'+curNum;
		__proto.onBattleDataRender=function(){
			var battleMaxDef=ConfigData.gameCfg.battleInfoMaxNum;
			var battleMinDef=ConfigData.gameCfg.battleInfoMinNum;
			var battleOrigin=ConfigData.gameCfg.battleMinRatio;
			var len=this._prevHistoryArr.length;
			var score=0;
			var damage=0;
			var kills=0;
			var deaths=0;
			var hit=0;
			var xuli=0;
			var arr=[];
			var i=0;
			var nc=0;
			for (i=0;i < len;i++){
				if (isNaN(this._prevHistoryArr[i].deaths)){
					nc++;
					continue ;
				}
				arr.push(this._prevHistoryArr[i].finalScore);
				damage+=this._prevHistoryArr[i].totalDamge;
				kills+=this._prevHistoryArr[i].kills;
				deaths+=this._prevHistoryArr[i].deaths;
				(this._prevHistoryArr[i].normalFireTimes !=0)&& (hit+=this._prevHistoryArr[i].normalHitTimes / this._prevHistoryArr[i].normalFireTimes);
				xuli+=this._prevHistoryArr[i].totalDamgeXuli;
			}
			if (nc==len){
				this.poly.alpha=0;
				return;
				}else{
				len-=nc;
			}
			if (len > 2){
				var temp=0;
				for (i=0;i < len;i++){
					for (var j=0;j < len-i-1;j++){
						if (arr[j] > arr[j+1]){
							temp=arr[j];
							arr[j]=arr[j+1];
							arr[j+1]=temp;
						}
					}
				}
				for (i=1;i < len-1;i++){
					score+=arr[i];
				}
				score=score /(len-2);
			}
			else{
				for (i=0;i < len;i++){
					score+=arr[i];
				}
				score=score / len;
			};
			var jifenValue=(score-battleMinDef[0])/ (battleMaxDef[0]-battleMinDef[0]);
			var shanghaiValue=(damage / len-battleMinDef[1])/ (battleMaxDef[1]-battleMinDef[1]);
			var jishaValue=(kills / len-battleMinDef[2])/ (battleMaxDef[2]-battleMinDef[2]);
			var survialValue=(deaths / len-battleMinDef[3])/ (battleMaxDef[3]-battleMinDef[3]);
			var hitValue=(hit / len-battleMinDef[4])/ (battleMaxDef[4]-battleMinDef[4]);
			var xuliValue=(xuli / len-battleMinDef[5])/ (battleMaxDef[5]-battleMinDef[5]);
			this.poly.alpha=0.6;
			var g=this.poly._graphics;
			var _one=g._one;
			var radius=this.img_shuxing.height / 2;
			var centerPo=new Point(this.img_shuxing.width / 2,radius-4);
			var pArr=[jifenValue,shanghaiValue,jishaValue,survialValue,hitValue,xuliValue];
			for (i=0;i < 6;i++){
				pArr[i]=(pArr[i] < battleOrigin[i])? battleOrigin[i]:pArr[i];
				if (pArr[i] > 1)
					pArr[i]=1;
			}
			SnowUtils.getDuoBianXing(this.poly,radius,centerPo,pArr,_one[3],_one[4],_one[5]);
			this.poly.visible=true;
		}

		/**
		*获取页面信息
		*@param data
		*/
		__proto.onGetUserInfoData=function(data){
			data=NotifyCenter.I.Query("on_GotGameDataResult");
			this._isRqeustDataBack=false;
			this._generalData=null;
			if (!data.results.fjson)return;
			if (!data.results.fjson.playerUIData)return;
			PlayerListUI.AchieveDatas=(data.results.fjson).achieveData;
			this.playerUIData=(data.results.fjson).playerUIData;
			PlayerListUI.initAchieveDatas();
			this.initAchieveItems();
			this.initAchieveView();
			if (this.playerUIData){
				var duanwei;
				if ((this.playerUIData.historyMaxStar | 0)< this.duanWeiStar){
					duanwei=HallUtil.getSeasonNameByExp(this.duanWeiStar);
				}
				else{
					duanwei=HallUtil.getSeasonNameByExp(this.playerUIData.historyMaxStar | 0);
				}
				if (this.playerUIData.lvData)this.setPro(this.playerUIData.lvData);
			}
			this._generalData=data.results.fjson.generalData;
			this.getUserDatas(data.results.fjson);
			this._prevHistoryArr=[];
			this._prevHistoryArr=data.results.fjson.prevHistory;
			if (this._generalData){
				this.highest.text=this._generalData.maxScore+"";
				this.kill.text=this._generalData.allKills+"";
				this.kill2.text=this._generalData.maxKill+"";
				this.even.text=(this._generalData.maxKillStreak | 0)+"";
				this.mvp.text=this._generalData.mvpTimes_free+this._generalData.mvpTimes_team+"";
				this.match.text=(this._generalData.playTimes | 0)+"";
				this.average.text=(this._generalData.averageScore | 0)+"";
				this.rising.text=((this._generalData.hasStarCount / this._generalData.playTimes *100)|0)+"%";
			}
			else{
				this.highest.text=0+"";
				this.kill.text=0+"";
				this.kill2.text=0+"";
				this.even.text=0+"";
				this.mvp.text=0+"";
				this.match.text=0+"";
				this.average.text=0+"";
				this.rising.text=0+"";
			}
			this._myBasicData=null;
			this._myBasicData=NotifyCenter.I.Query("on_BasicDataChg");
			this.onUserBasicDataChg(this._myBasicData);
			NotifyCenter.I.on("on_BasicDataChg",this,this.onUserBasicDataChg);
			var userDataBack=new UserDataCallBack();
			userDataBack.uid=this._myBasicData.userId;
			userDataBack.callBack=Handler.create(this,this.onGetMyCurSeasonData);
			UserInfoMgr.I.askDuanwei([userDataBack]);
			this.initLeftBtnType();
			if (PlayerListUI._showKey){
				PlayerListUI._currentType=3;
			}
			else{
				PlayerListUI._currentType=0;
			}
			this.addToParent(this);
			this.onLeftBtnClick(PlayerListUI._currentType);
		}

		__proto.initAchieveItems=function(){
			if (!this.playerUIData.usingAchieve)
				this.playerUIData.usingAchieve=[];
		}

		__proto.initAchieveView=function(){
			var mainAc=PlayerListUI.AchieveDatas [99999];
			if (!mainAc)
				return;
			var curExp=PlayerListUI.getMainAchieveExpByUid(PlayerListUI.AchieveDatas);
			var needExp=mainAc.count[mainAc.curLevel];
			if (needExp){
				if (curExp >=needExp){
				}
			}
			else{
			}
			if (this.playerUIData.newAchieve && PlayerListUI.AchieveDatas[this.playerUIData.newAchieve]){
			}
			else{
			}
		}

		__proto.dzShow20=function(_generalData){
			if (_generalData.likeData && _generalData.likeData.length !=0){
				if (this.bNum < this.rNum){
					TipsManager.instance.showText(SnowUtils.chkIsFB()?"Retrieving data..":"数据请求中，请稍后再试!");
				}
				else{
				}
			}
			else
			TipsManager.instance.showText("还没有人为你点赞!");
		}

		__proto.getUserDatas=function(data){
			if (data && data.likeData){
				var list=data.likeData;
				var qch=[];
				for (var x=0,xlength=list.length;x < xlength;x++)
				if (qch.indexOf(list[x])==-1)
					qch.push(list[x]);
				this.rNum=qch.length;
				this.bNum=0;
				for (var i=0;i < this.rNum;i++){
					this.getOneData(qch[i]);
				}
			}
		}

		__proto.getOneData=function(uid){
			HallApp.searchByUId(uid);
		}

		/**
		*更新玩家基础信息
		*@param data
		*/
		__proto.onUserBasicDataChg=function(dat){}
		__proto.onGetMyCurSeasonData=function(data){
			if (!data)return;
			if (data.code !=0 || !this._myBasicData || data.userId !=this._myBasicData.userId)return;
			var duanwei=HallUtil.getSeasonNameByExp(data.result.s1);
			this.dzNum.text=(data.result.s5 | 0)+"";
			this.duanWeiStar=data.result.s1;
			if (this.playerUIData){
				if ((this.playerUIData.historyMaxStar | 0)< this.duanWeiStar){
					duanwei=HallUtil.getSeasonNameByExp(this.duanWeiStar);
				}
				else{
					duanwei=HallUtil.getSeasonNameByExp(this.playerUIData.historyMaxStar | 0);
				}
				if (this.playerUIData.lvData)this.setPro(this.playerUIData.lvData);
			}
		}

		/**
		*资源加载完成，UI布局初始化完成
		*/
		__proto.onCreated=function(){
			var _$this=this;
			view.UIBase0.prototype.onCreated.call(this);
			this.topPanel.myTitle="player/image_title.png";
			this.topPanel.boxMoney.visible=false;
			this.topPanel.bg.visible=false;
			this.topPanel.homeCallback=function (){
				if (_$this._panelEffect)_$this._panelEffect.close(Handler.create(null,_$this.onSelfColse));
			};
			this.initEvent();
			var height1=Laya.stage.height / UIMgr.scale;
			PlayerListUI.POINTMAX=ConfigData.gameCfg.maxAttp;
			this.btnshare.on("click",this,this.onShareClick);
		}

		__proto.onSelfColse=function(){
			console.log("------------------onSelfColse------------------");
			MenuList.onShowMe();
			UIMgr.closeUI(PlayerListUI);
		}

		/**
		*主城就升级
		*/
		__proto.onLvUpClick=function(){
			var req=Pool.getItemByClass("RequsetLevelUp",RequsetLevelUp);
			HallApp.notify(req);
			Pool.recover("RequsetLevelUp",req);
			this.netWorkControl.reSet(5000);
		}

		/**
		*战斗数据分享
		*/
		__proto.onShareClick=function(){
			SnowUtils.shareInitiative("playerpk",{shareType:"playerpk",fromType:"playerpk"});
			StatManager.I.v2_share("playerpk");
		}

		/**
		*初始化渲染显示当前UI内容,可以初始消息跟事件处理
		*/
		__proto.onOpen=function(){
			this.duanWeiStar=0;
			this._btnArr=[{n:"battle",t:true},{n:"zhanji",t:false}];
			if (!this._panelEffect){
				this._panelEffect=new PanelEffect();
				this._panelEffect.reg(this);
			}
			this._panelEffect.start(50);
			NotifyCenter.I.on('searchByUIdResult',this,this.onSearchData);
			NotifyCenter.I.on('onNotify',this,this.onGotNotify);
			this.initSocketEvent();
			this._isRqeustDataBack=true;
			var fensiData=NotifyCenter.I.Query('onListBeInGroupResult_arr');
			var fensiDataArr=[];
			if (fensiData && fensiData.friends !=null)
				fensiDataArr=fensiData.friends;
			var guanzhuData=this.getFriendData(102);
			var guanzhuDataArr=[];
			if (guanzhuData && guanzhuData.friends !=null)
				guanzhuDataArr=guanzhuData.friends;
			view.UIBase0.prototype.onOpen.call(this);
			this.setAchieveRank();
			this.nameTxt.changeText(HallUtil.getSeasonNameByID2(RoleCenter.I.rank));
			this.uidTxt.changeText("UID:"+RoleCenter.I.userId);
			this.imgAvtor.skin=RoleCenter.I.myBasicData;
			HallApp.getGameData({fjson:1});
			this.topPanel.onOpen();
			var data=NotifyCenter.I.Query("on_GotGameDataResult")
			if(data){
				this.addToParent(this);
			}
		}

		//updateRed();
		__proto.setAchieveRank=function(){
			var myRankData=NotifyCenter.I.Query("on_MyRanksChg");
			if (!myRankData)
				return;
			var obj;
			for (var i=0,len=myRankData.length;i < len;i++){
				obj=myRankData[i];
				if (obj.RankListId==10051){
				}
			}
		}

		// cjpm.text=pmNum.text=obj.Rank+"";
		__proto.onSearchData=function(data){
			this.bNum+=1;
			if (!data.userBasicData)
				return;
			this.datObj[data.userBasicData.userId]=data.userBasicData;
		}

		/**
		*获取我关注的列表
		*@param type
		*@return
		*/
		__proto.getFriendData=function(type){
			var friData=NotifyCenter.I.Query('onFriendListResult');
			var voGr;
			if (friData==null)
				return null;
			for (var i=0,j=friData.groups.length;i < j;i++){
				voGr=friData.groups [i];
				if (voGr.id==type)return voGr;
			}
			return null;
		}

		__proto.onClose=function(){
			NotifyCenter.I.off('searchByUIdResult',this,this.onSearchData);
			NotifyCenter.I.off('onNotify',this,this.onGotNotify);
			NotifyCenter.I.off("on_BasicDataChg",this,this.onUserBasicDataChg);
			this._preIndex=0;
			PlayerListUI._currentType=0;
			this.viewStack.selectedIndex=0;
			this.removeSocketEvent();
			this.topPanel.onClose();
			view.UIBase0.prototype.onClose.call(this);
		}

		PlayerListUI.onShow=function(key){
			(key===void 0)&& (key=0);
			PlayerListUI._showKey=key;
			UIMgr.openUI(PlayerListUI);
		}

		PlayerListUI.initAchieveDatas=function(){
			var dtItem;
			var jsItem;
			PlayerListUI.nextCjStr="暂无";
			var max=0;
			var haveArr=[];
			var noHaveArr=[];
			if (!PlayerListUI.AchieveDatas){
				PlayerListUI.AchieveDatas={};
			}
			for(var key in PlayerListUI.AchieveDatas){
				if (!ConfigData.achieveDataNew[key])
					delete PlayerListUI.AchieveDatas[key];
			}
			for (var key1 in ConfigData.achieveDataNew){
				if (!PlayerListUI.AchieveDatas[key1])
					PlayerListUI.AchieveDatas[key1]={curCount:0,curLevel:0};
				dtItem=PlayerListUI.AchieveDatas [key1];
				jsItem=ConfigData.achieveDataNew [key1];
				dtItem.id=jsItem.id;
				dtItem.model=jsItem.model;
				dtItem.count=jsItem.count;
				dtItem.title=jsItem.title;
				dtItem.msg=jsItem.msg;
				dtItem.icon=jsItem.icon;
				dtItem.expNum=jsItem.expNum;
				if (max < dtItem.curCount / dtItem.count[dtItem.curLevel]){
					max=dtItem.curCount / dtItem.count[dtItem.curLevel];
					PlayerListUI.nextCjStr=dtItem.title+PlayerListUI.lvArr[dtItem.curLevel];
				}
				if (key1 !=99999){
					if (dtItem.curLevel > 0){
						haveArr.push(dtItem);
					}
					else{
						noHaveArr.push(dtItem);
					}
				}
			}
			PlayerListUI.cjDataArr=haveArr.concat(noHaveArr);
		}

		PlayerListUI.getMainAchieveExpByUid=function(dt){
			var exp=0;
			var lv=0;
			if (!dt)
				return 0;
			else{
				for (var key in dt){
					lv=0 | dt[key].curLevel;
					for (var i=0;i < lv;i++)
					exp+=0 | dt[key].expNum[i];
				}
			}
			return exp;
		}

		PlayerListUI.getHotPoint=function(){
			PlayerListUI.initAchieveDatas();
			var mainAc=PlayerListUI.AchieveDatas [99999];
			var curExp=PlayerListUI.getMainAchieveExpByUid(PlayerListUI.AchieveDatas);
			var needExp=mainAc.count[mainAc.curLevel];
			if (curExp >=needExp)
				return true;
			return false;
		}

		PlayerListUI._currentType=0;
		PlayerListUI.POINTMAX=0;
		PlayerListUI.AchieveDatas={};
		PlayerListUI._showKey=NaN
		PlayerListUI.nextCjStr=null
		PlayerListUI.cjDataArr=[];
		PlayerListUI.ACHIEVE_MAIN=99999;
		__static(PlayerListUI,
		['lvArr',function(){return this.lvArr=['Ⅰ','Ⅱ','Ⅲ','Ⅳ','Ⅴ'];}
		]);
		return PlayerListUI;
	})(PlayerListViewUI)


	/**
	*...
	*@author anling
	*/
	//class view.page.MenuList extends ui.hall.page.roomList.menuListUI
	var MenuList=(function(_super){
		function MenuList(){
			this.handUI=null;
			this.myBg=null;
			this._onTweenType=false;
			this.btnObj=null;
			this.bIsFirstIn=false;
			this._clickEnterGame=false;
			this.myBasicData=null;
			this._index=-1;
			this.isChg1=false;
			this.isFs=false;
			this.allTaskData=null;
			this.singleTaskData=null;
			this.signData=null;
			this.isInitDataBool=false;
			this._boardName="rankTotal";
			this._rank1ListUI=null;
			this._rank2LIstUI=null;
			this.lMessage=null;
			this._rankTexture=null;
			this.isGetLastRoomed=false;
			this.isChkHasRoomed=false;
			this._clientData=null;
			this._clientData2=null;
			this._checkdesk=false;
			this.roleRoomS=NaN;
			this.boxBtnS=NaN;
			this.rankboxS=NaN;
			this.rightBoxS=NaN;
			this.moneyBoxS=NaN;
			MenuList.__super.call(this);
			MenuList.I=this;
			this.resList=[
			{url:"res/atlas/newhall.atlas",type:"atlas"},
			{url:"res/atlas/ani/snow.atlas",type:"atlas"},
			{url:"res/atlas/login2.atlas",type:"atlas"}];
			if(SnowUtils.chkIsFB()){
				this.resList.push({url:"res/atlas/layacommon.atlas",type:"atlas"});
			}
		}

		__class(MenuList,'view.page.MenuList',_super);
		var __proto=MenuList.prototype;
		__proto.onRemoveHandUI=function(){
			if(this.handUI){
				this.handUI.onSetPlay(false);
				this.handUI.parent.removeChild(this.handUI);
				this.handUI.dispose();
				this.handUI=null;
			}
		}

		/**新手引导操作**/
		__proto.onGuide=function(step){
			if(SnowUtils.chkIsFB())
				return;
			this.onRemoveHandUI();
			var tempX=0,tempY=0;
			if(step==enumUserEnterGameType.default1){
				return;
			}
			if(step==enumUserEnterGameType.freeModel){
				this.handUI=new HandUI();
				this.btnfree.addChild(this.handUI);
				tempY=186;
				tempX=160;
			}
			else if(step==enumUserEnterGameType.teamModel){
				StatManager.I.addTeach(StatManager.I.getStatData(StatID.s4_4_1[0]),true);
				this.handUI=new HandUI();
				this.btnteam.addChild(this.handUI);
				tempY=186;
				tempX=160;
			}
			else if(step==enumUserEnterGameType.skillButton){
				this.handUI=new HandUI();
				this.btnrank.addChild(this.handUI);
				tempY=186;
				tempX=160;
			}
			this.handUI&&this.handUI.pos(tempX,tempY);
			this.handUI&&this.handUI.onSetPlay(true);
		}

		__proto.onCreated=function(){
			view.UIBase0.prototype.onCreated.call(this);
			this.onInitPos();
			GameCfg.setI(ConfigData.gameCfg);
			RoleCenter.I.on("roleChangeEvent",this,this.onUserBasicDataChg);
			this.btnfree.on("click",this,this.onBtnFree);
			this.btnteam.on("click",this,this.onBtnTeam);
			this.btnrank.on("click",this,this.onBtnRank);
			this.libaoBtn.on("click",this,this.onLiBaoBtnClick);
			this.roleRoom.on("click",this,this.onPlayerDialog);
			this.rankPkBtn.on("click",this,this.onRankPkBtnClick);
			this.soundBtn.on("click",this,this.onSoundBtnClick);
			this.exitBtn.on("click",this,this.onExitBtnClick);
			this.btnShop.on("click",this,this.onBtnShopClick);
			this.chongzhiBtn.on("click",this,this.onChongZhiBtnClick);
			this.maskBox.on("click",this,this.onMaskBoxClick);
			this.rankSprite2.on("click",this,this.onrankSprite2Click);
			this.shareBtn2.on("click",this,this.onShareBtn2Click);
			NotifyCenter.I.on("menulist_goGame",this,this.onRoomTypeButtonClick);
			NotifyCenter.I.on('onNotify',this,this.onGotNotify);
			NotifyCenter.I.on("onGetGuangGaoReward",this,this.onGetGuangGaoReward);
			NotifyCenter.I.on('onFriendListResult',this,this.showFriendRank);
			NotifyCenter.I.on("on_ListBackpacksResult",this,this.onGotBackpack);
			NotifyCenter.I.on("menuListShowInfo",this,this.onMenuListShow);
			NotifyCenter.I.on("menu_list_friend",this,this.onChkFriend);
			NotifyCenter.I.on("onMailGotUnreadMailCount",this,this.onChkEmail);
			NotifyCenter.I.on("onTeamInvite",this,this.onTeamInvite);
			NotifyCenter.I.on("onReceiveMessage",this,this.onReceiveMessage);
			NotifyCenter.I.on("onSendMessageResult",this,this.onSendMessageResult);
			this.changeEvent(true);
			NotifyCenter.I.on('boost_update',this,this.controllShareBuffView);
			NotifyCenter.I.on("onGotWxShareParams",this,this.onGotWxShareParams);
			NotifyCenter.I.on("onSentDesktop",this,this.onFsCg);
			NotifyCenter.I.on('onGotClientObjectResult',this,this.onGotClientResult);
			if(Render.isWebGL){
				this.myBg=new SnowEffect();
				this.myBg.init("res/atlas/ani/snow.atlas",20);
				this.snowBox.addChild(this.myBg);
			}
			Laya.stage.on("resize",this,this.onResize);
			MsgManager.I.skillRefresh();
			HallApp.notify(new RequestShareData());
			HallApp.notify(new RequestDailyShareAward());
			if(SnowUtils.isWxApp()){
				if(!RoleCenter.I.bIsNewPlayer)
					HallApp.getWXShareParams();
				}else{
				this.checkTeam();
			};
			var types=[1];
		}

		// });
		__proto.onChongZhiBtnClick=function(){
			ShouChongView.onShow();
		}

		/**
		*获取排行榜总数量
		*@param data{name:排行榜标识;contextld:与排行榜相关的编号，如果排行榜与特定的环境关联，则为null,playerCount:排行榜中玩家上榜分数的总量}
		*/
		__proto.onGetRankListNum=function(data){
			if(!data.code){
				TipsView.showMe("",JSON.stringify(data));
				}else{
				TipsView.showMe("",data.message);
			}
		}

		/**
		*视频广告奖励回调
		*@param data
		*/
		__proto.onGetGuangGaoReward=function(data){
			MouseManager.enabled=true;
			if(data.code==null){
				var cmds=new RequestFbAds();
				HallApp.notify(cmds);
				}else{
				TipsView.showMe("",data.message,1,false);
			}
		}

		__proto.onZuoGG=function(){
			HallApp.getRewardedVideoAsync(view.page.MenuList.currentIdStr);
		}

		__proto.onShareBtn2Click=function(){
			SnowUtils.shareInitiative("rankPK",{shareType:"rankPK",fromType:"rankPK"});
			StatManager.I.v2_share("rankPK");
		}

		// SnowUtils.reportTlogReason(enumTlogReason.REASON_SNS_SHARE,enumTlogReason.SUBREASON_SNS_SHARE_11);
		__proto.onrankSprite2Click=function(){
			this.maskBox.visible=true;
			this.rankbg2.visible=false;
			MsgMgr.postMessage({type:MsgMgr.RANK_LIST1,data:this.onOwnData});
			this.onAddRankList1();
		}

		__proto.onAddRankList1=function(){
			this.rankbg2.visible=false;
			if(Browser.onMiniGame){
				this.rankSprite2.graphics.clear();
				this.rankSprite1.graphics.clear();
				if(!this._rankTexture){
					this._rankTexture=new Texture(Browser.window.sharedCanvas);
					this._rankTexture.bitmap.alwaysChange=true;
				}
				this.rankSprite1.graphics.drawTexture(this._rankTexture,0,6,this._rankTexture.width,this._rankTexture.height);
				}else{
				if(!this._rank1ListUI){
					this._rank1ListUI=new RankList1View();
					this.rankSprite1.addChild(this._rank1ListUI);
					this._rank1ListUI.list_rank.scrollBar.changeHandler=new Handler(this,this.onScrollBarHandler);
				}
				if(this._rank1ListUI){
					this._rank1ListUI.onZheHeData(MenuList.rankArr,this.onOwnData);
				}
			}
			this.rankbg1.visible=true;
			this.rank1Ani.index=0;
			this.rank1Ani.play(0,false);
		}

		__proto.onScrollBarHandler=function(value){
			if(SnowUtils.chkIsFB()&& value > 0.8 && !MenuList._isReques){
				MenuList._isReques=true;
			}
		}

		//这里需要根据总排行数量进行处理
		__proto.onMaskBoxClick=function(){
			MsgMgr.postMessage({type:MsgMgr.RANK_LIST2,data:this.onOwnData});
			this.rankbg1.visible=false;
			if(Browser.onMiniGame){
				this.rankSprite1.graphics.clear();
			}
			this.maskBox.visible=false;
			this.onAddRankList2();
		}

		__proto.onBtnShopClick=function(){
			HeroCardView.onShow();
		}

		/**
		*@param data {gameId:1000,userId:500,code:0}
		*<br> code 0 表示成功，-1 为系统 PHP 请求失败，-70011 为内容含有屏蔽词，其它值为各种错误码
		*/
		__proto.onGotClientResult=function(data){
			if (data.code==0){}
				else{
				TipsManager.instance.showText("数据存储失败!");
			}
			this.netWorkControl&&this.netWorkControl.detroy();
		}

		/**
		*处理客户端数据
		*@param type 控制声音播放状态；0 只控制声音按钮状态；1开启声音；2关闭声音
		*/
		__proto.onSetSound=function(type){
			(type===void 0)&& (type=0);
			if(!this._clientData2)
				return;
			if (this._clientData2.hasOwnProperty("music_set")){
				if (this._clientData2.music_set){
					this.soundBtn.skin="newhall/btn_sound1.png";
					}else {
					this.soundBtn.skin="newhall/btn_sound2.png";
				}
			}
			if (this._clientData2.hasOwnProperty("musicSet")){
				this._clientData2.music_set=this._clientData2["musicSet"];
				delete this._clientData2["musicSet"];
			}
			if(type==1){
				console.log("-----------------------------Laya.stage.isVisibility:"+Laya.stage.isVisibility);
				if (this._clientData2.hasOwnProperty("music_set")){
					console.log("---------------onSetSound------_clientData.music_set:"+this._clientData.music_set);
					if (this._clientData2.music_set){
						console.log("-----menulist--3----wx--------onHide-------------------");
						SoundManager.soundMuted=SoundManager.musicMuted=false;
						}else{
						console.log("-----menulist--1----wx--------onHide-------------------");
						SoundManager.soundMuted=SoundManager.musicMuted=true;
					}
				}
				}else if(type==2){
				console.log("-----menulist--2----wx--------onHide-------------------");
				SoundManager.soundMuted=SoundManager.musicMuted=false;
			}
		}

		__proto.onSoundBtnClick=function(){
			SoundManager.soundMuted=SoundManager.musicMuted=!SoundManager.musicMuted;
			this.isChg1=!this.isChg1;
			if (SoundManager.musicMuted){
				StatManager.I.v2_openpage(11);
				StatManager.I.v2_clickmenu("musicClose");
				this.soundBtn.skin="newhall/btn_sound2.png";
			}
			else{
				this.soundBtn.skin="newhall/btn_sound1.png";
			}
			if (this._clientData2.hasOwnProperty("soundSet"))
				delete this._clientData2["soundSet"];
			this._clientData2.music_set=!SoundManager.musicMuted;
			this.netWorkControl.reSet(5000);
			HallApp.setClientObject(this._clientData2);
		}

		// private var _isClickGG:Boolean;
		__proto.onLiBaoBtnClick=function(){
			if(SnowUtils.chkIsFB()){
				ShowLbView.onShow();
				}else{
				ShowCzView.onShow();
			}
		}

		__proto.onCallLer=function(){
			this.netWorkControl && this.netWorkControl._detroy();
		}

		__proto.onExitBtnClick=function(){
			TipsView.myCallback=Handler.create(this,function(){
				if(Browser.onMiniGame){
					wx.exitMiniProgram();
				}
			});
			TipsView.showMe("",SnowUtils.chkIsFB()?"Are you sure you want to quit the game?":"您确定要退出游戏吗?",1,false);
		}

		__proto.onRankPkBtnClick=function(){
			if(SnowUtils.chkIsFB()){
				SnowUtils.shareInitiative("playerpk",{shareType:"playerpk",fromType:"menuPkShare"});
				StatManager.I.v2_share("playerpk");
				}else{
				ShareInfoView.onShow();
			}
		}

		/**
		*显示首冲
		*/
		__proto.onShouChong=function(){
			ShouChongView.onShow();
		}

		__proto.onWheelBtnClick=function(){
			if (RoleCenter.I.level <3){
				return;
			}
		}

		/**
		*发送桌面请求奖励
		*/
		__proto.onFsCg=function(dat){}
		/**
		*微信参数返回
		*@param dat
		*
		*/
		__proto.onGotWxShareParams=function(dat){
			if(!dat || RoleCenter.I.bIsNewPlayer)return;
			var teamId=dat.teamId;
			if(teamId){
				var array=teamId.split("_");
				if(array&&array.length>1){
					HallApp.joinTeam(array[0],array[1]);
					view.page.MenuList.inRoomByWhere=0;
					RoleCenter.I.inviteGameUID=array[1];
				}
			};
			var roomId=dat.roomId;
			if(roomId > 0){
				view.page.MenuList.inRoomByWhere=0;
				HallApp.joinRoom(roomId,false);
			}
			RoleCenter.I.bIsNewPlayer=false;
		}

		/**
		*发送桌面
		*
		*/
		__proto.onBtnSend=function(){
			SendDesktop.onShow();
		}

		/**
		*
		*/
		__proto.onChkEmail=function(data){
			if (data["code"]){
			}
			for (var i=0,sz=data.length;i < sz;i++){
				if (data[i].count>0){
					break ;
				}
			}
		}

		/**
		*给其他玩家发送消息返回
		*FRONTEND_INVALID_PARAMETER-1300001 前端接口请求参数不正确
		*FRONTEND_INVALID_USERID-1300002 前端接口 UserId 不正确
		*FRONTEND_USERID_EQUALS_TARGETID-1300003 前端接口用户自己的 UserId 不能和 TargetId 相等，不允许自己给自己发某些消息
		*FRONTEND_FAILURE-1300005 前端接口调用失败
		*FRONTEND_USER_OFFLINE-1300011 前端接口用户不在线
		*FRONTEND_USER_NOT_EXISTS-1300012 前端接口用户不存在
		*FRONTEND_HAS_MARK_WORKDS-1300021 前端接口有屏蔽词
		*@param dat
		*
		*/
		__proto.onSendMessageResult=function(dat){
			if(dat.code!=0){
				console.log("发送邀请不成功,错误码"+dat.code);
			}
		}

		/**
		*被邀请来直接进入组队房间
		*
		*/
		__proto.checkTeam=function(){
			var spId=SnowUtils.getQueryString("spId");
			if(spId==-110){
				var shareData=logic.game.GameManager.GetCurrentGame().user.GetUnion().getShareInfoData();
				if(shareData){
					Browser.window.hostStr+=("&"+shareData.share_url);
				}
			}
			if(!Browser.onMiniGame&&RoleCenter.I.bIsNewPlayer)return;
			var teamId=SnowUtils.getQueryString("td");
			var array;
			console.log("---------------------2------------------------------------teamId:"+teamId+"hosts:"+Browser.window.hostStr);
			if(teamId){
				array=teamId.split("_");
				if(array&&array.length>1){
					HallApp.joinTeam(array[0],array[1]);
					RoleCenter.I.inviteGameUID=array[1];
				}
				return;
			};
			var roomId=SnowUtils.getQueryString("rd");
			console.log("---------------------2------------------------------------roomId:"+roomId);
			if (roomId)roomId=roomId.split("_")[0];
			if(parseInt(roomId)> 0){
				console.log("-----------------------roomId:"+roomId);
				HallApp.joinRoom(parseInt(roomId),false);
				if(Browser.onMiniGame){
					this.onReqStart(1000);
					Laya.timer.loop(1500,this,this.onCheckIsJoinRoom,[roomId]);
				}
			}
			if(!Browser.onMiniGame)
				RoleCenter.I.bIsNewPlayer=false;
		}

		//防止断网处理
		__proto.onCheckIsJoinRoom=function(roomId){
			if(FreeMatch.isZuDui || TeamView.isZuDui){
				console.log("-----------1-----------clear-------onCheckIsJoinRoom------------");
				Laya.timer.clear(this,this.onCheckIsJoinRoom);
				}else{
				console.log("-----------2-----------joinRoom------------");
				HallApp.joinRoom(roomId,false);
			}
		}

		/**
		*分享
		*
		*/
		__proto.onBtnShare=function(){}
		// }
		__proto.updateBgCache=function(info){
			(info===void 0)&& (info="none");
		}

		// imgBg&&(imgBg.cacheAs=info);
		__proto.onNoticesClick=function(evt){}
		/**
		*组队邀请
		*
		*/
		__proto.onTeamInvite=function(dat){
			if (Player.isStartGame || Loading.I.isShowLoad)return;
			if (dat.teamid){
				TeamView.bIsShow=false;
				HallApp.joinTeam(dat.teamid,"");
			}
		}

		/**
		*友谊赛邀请
		*@param dat
		*
		*/
		__proto.onReceiveMessage=function(dat){
			if (Player.isStartGame || Loading.I.isShowLoad)return;
		}

		/**
		*加入队伍
		*
		*/
		__proto.onTeamJoined=function(info){
			if(info.code==-90011){
				TipsManager.instance.showText("队伍人数已满");
			}
			else if(info.code==-90012){
				TipsManager.instance.showText("你当前队伍已经解散");
			}
			if (info.code !=0){
				RoleCenter.I.inviteGameUID=-1;
				return;
			}
			TeamView.teamJoinInfo=info;
			TeamView.showMe(info.type,false);
		}

		__proto.changeEvent=function(show){
			if(show)
				NotifyCenter.I.on("onTeamJoined",this,this.onTeamJoined);
			else
			NotifyCenter.I.on("onTeamJoined",this,this.onTeamJoined);
		}

		/**打开玩家信息**/
		__proto.onPlayerDialog=function(evt){
			UIMgr.openUI(PlayerListUI);
		}

		__proto.onBtnOpenFriendQ=function(){
			var opts=new OpenWebViewInfo();
			opts.url="//buluo.qq.com/p/barindex.html?bid=368639";
			opts.openType=1;
			HallApp.openUrlWithExtraWebview(opts);
			if(this._clientData){
				var data=this._clientData.qqData;
				var myDate=new Date();
				this._clientData.qqData.date=myDate.getDate();
				this._clientData.qqData.isShow=false;
			}
			HallApp.setClientObject(this._clientData);
		}

		__proto.onBtnOpenFriendWeChat=function(){
			var opts=new OpenWebViewInfo();
			opts.url=Browser.window.location.protocol+"//game.weixin.qq.com/cgi-bin/h5/static/community/club_index.html?appid=wxa45f40f2c4d1cfa9";
			opts.openType=1;
			HallApp.openUrlWithExtraWebview(opts);
			if(this._clientData){
				var data=this._clientData.quanData;
				var myDate=new Date();
				this._clientData.quanData.date=myDate.getDate();
				this._clientData.quanData.isShow=false;
			}
			HallApp.setClientObject(this._clientData);
		}

		/**
		*退出
		*/
		__proto.onQuitClick=function(){
			TipsView.myCallback=Handler.create(this,ascef=function(){
				HallApp.closeWindow();
			});
			TipsView.showMe("","是否退出游戏",1,false,true);
		}

		/**
		*交流群
		*/
		__proto.onJlClick=function(){
			var opts=new OpenWebViewInfo();
			opts.openType=1;
			if (SnowUtils.isWxApp()){
				opts.url=Browser.window.location.protocol+"//game.weixin.qq.com/cgi-bin/h5/static/group/index.html?appid=wx9e8f5c13236cb27d&group=2#wechat_redirect";
			}
			else{
				opts.url="//youxi.vip.qq.com/m/act/ebf823f0ca_ldt3_204862.html?_wv=1&_wwv=4";
			}
			HallApp.openUrlWithExtraWebview(opts);
			if(this._clientData){
				var data=this._clientData.qunData;
				var myDate=new Date();
				this._clientData.qunData.date=myDate.getDate();
				this._clientData.qunData.isShow=false;
			}
			HallApp.setClientObject(this._clientData);
		}

		/**
		*成就
		*
		*/
		__proto.onBtnAchieve=function(){}
		/**更新红点**/
		__proto.onUpdateRedPointCallBack=function(){}
		/**
		*渲染左边排行榜
		*@param cell
		*@param index
		*
		*/
		__proto.onRankRenderHandler=function(cell,index){
			var rankInfo=cell.dataSource;
			if(!rankInfo)return;
			var imgHead=cell.getChildByName('imgHead');
			var level=cell.getChildByName('level');
			imgHead&&(imgHead.skin=rankInfo.UserData);
			imgHead.bgSkin="common/rolebg.png";
			if(rankInfo.Rank<=10){
				level.skin="menulist/"+rankInfo.Rank+".png";
				}else{
				level.skin="";
			}
		}

		/**
		*2017年4月24日 23:47:19 显示 好友排行前10
		*@param data
		*
		*/
		__proto.loadListScoreData=function(data){
			var tempRankArr=data.List;
			MenuList.rankArr=[];
			for(var i=0,sz=tempRankArr.length;i<sz;i++){
				var rankInfo=tempRankArr[i];
				var newRankInfo=new NewRankInfo();
				newRankInfo.nickName=HallUtil.getNkName(rankInfo.UserData);
				newRankInfo.avatarUrl=HallUtil.getHeadIcon(rankInfo.UserData);
				newRankInfo.openId=String(rankInfo.UserData.userId);
				newRankInfo.rankValue=rankInfo.RankValue;
				MenuList.rankArr.push(newRankInfo);
			}
			this.onInitRankList();
			this.onAddRankList2();
		}

		/**获取好友排行*/
		__proto.showFriendRank=function(){
			NotifyCenter.I.showFriendRank(Handler.create(this,this.paixuArr),10001);
		}

		__proto.paixuArr=function(arr){
			var myRankListInfo=new RankListInfo();
			myRankListInfo.List=arr;
			this.callLater(this.loadListScoreData,[myRankListInfo]);
		}

		/**
		*检测好友数据是否存在
		*@param data
		*@return
		*/
		__proto.onGotFriendList=function(data){data=data|| NotifyCenter.I.Query('onFriendListResult');
			if (!data || data.code !=0){
				Log_Test.error("onGotFriendList is error!");
				return false;
			};
			var gArr=data.groups;
			var gLen=data.groups.length;
			var voGr;
			for (var i=0;i < gLen;i++){
				voGr=gArr [i];
				if (voGr.id==102){}
					}
			return true;
		}

		/**
		*团队模式
		*
		*/
		__proto.onBtnTeam=function(){
			HallApp.match(enumRoomType.ROOMTYPE_CUSTOM_TEAM,1);
		}

		// }))
		__proto.onBtnRank=function(){
			TeamView.showMe(enumRoomType.ROOMTYPE_LADDER,true);
		}

		/**
		*自由模式
		*
		*/
		__proto.onBtnFree=function(){
			HallApp.match(enumRoomType.ROOMTYPE_SOLO_NPC,999);
			return;
			if (!MenuList.getOpenState("btnfree")){
				return;
			}
			if (RoleCenter.I.nowStep==enumUserEnterGameType.freeModel){
				MenuList.curGuideType=enumUserEnterGameType.freeModel;
			}
			this.onRoomTypeButtonClick(1);
		}

		/**
		*友谊赛
		*
		*/
		__proto.onBtnFreeFriend=function(){
			FreeChoose.onShowMe();
		}

		/**
		*监听任务或者成就完成状态
		*@param data
		*
		*/
		__proto.onMenuListShow=function(){
			var notifySize=NotifyCenter.I.Query("menuListShowInfo");
		}

		// TxtPushMgr.I.initPushList(hintReward.visible,allTaskData,singleTaskData);
		__proto.loopCanGet=function(end){
			var timeNum=end-NotifyCenter.I.getServerTimer();
			if (timeNum < 0){
				var cmd=new RequestSignData();
				HallApp.notify(cmd);
				this.timer.clear(this,this.loopCanGet);
			}else{}
		}

		__proto.onOpen=function(){
			UIMgr.closeUI(GameResultPage);
			UIMgr.closeUI(GameResultN);
			UIMgr.closeUI(TrainingEndPage);
			this.myBasicData=RoleCenter.I.myBasicData;
			if (!this.myBasicData){
				Laya.timer.once(100,this,this.openAgain);
				return;
			}
			NotifyCenter.I.on('onNotify',this,this.onGotNotify);
			if(SnowUtils.chkIsFB()){
				Log_Test.info("请求关系链");
				HallApp.relation();
				this.shareBtn2.visible=false;
			};
			var userDataBack=new UserDataCallBack();
			userDataBack.uid=this.myBasicData.userId;
			userDataBack.callBack=Handler.create(this,this.onGetMyCurSeasonData);
			UserInfoMgr.I.askDuanwei([userDataBack]);
			Laya.timer.clear(this,this.openAgain);
			if (RoleCenter.I.fashions[0]=="1001"){
				HallApp.notify(new RequestNewBieEnd());
			}
			SnowTime.nuST && SnowTime.nuST.removeTime();
			SnowTime.nuST=null;
			view.UIBase0.prototype.onOpen.call(this);
			this.isChg1=false;
			this.addToParent(this);
			NotifyCenter.I.on("on_GotGameDataResult",this,this.onGotClientData);
			this.onUserBasicDataChg();
			this.mouseEnabled=true;
			this._clickEnterGame=false;
			if (!this.isGetLastRoomed){
				this.isGetLastRoomed=true;
				HallApp.getLastRoom();
			}
			MenuList.numTimes++;
			this.onMenuListShow();
			this.onChkFriend();
			NotifyCenter.I.chkFriendUnreadMsg();
			HallApp.getGameData({fjson:1,fclient:1});
			this.myBg&&this.myBg.onStart();
			this.onResize();
			if (MenuList.fromType==100)
				console.log("埋点 从教学模式打开大厅");
			MenuList.curGuideType=enumUserEnterGameType.default1;
			if(RoleCenter.I.nowStep!=enumUserEnterGameType.default1){
				this.onGuide(RoleCenter.I.nowStep);
			}
			MenuList.fromType=enumRoomType.ROOMTYPE_NONE;
			if (!this.chkOpen())return;
			BjView.onHide();
			if(Browser.onMiniGame && !Browser.onAndriod){
				this.libaoBtn.visible=false;
			}else
			this.libaoBtn.visible=true;
			this.menuAni.index=0;
			this.starView.ani1.play();
			if(Browser.onMiniGame){
				SnowUtils.shareBall("playerpk",{shareType:"playerpk",fromType:"playerpk"});
				if(CrazySnowball.shareData && CrazySnowball.shareData.query && CrazySnowball.shareData.query.sh){
					LoadingSplash.I.dispose();
					}else{
					LoadingSplash.I.removeSplash();
				}
				}else{
				HallApp.removeSplash();
				if(SnowUtils.chkIsFB()){
					FBSDK.startGameAsync(function(){});
				}
				Laya.timer.once(400,this,this.onPlayAni);
			};
			var spId=SnowUtils.getQueryString("spId");
			if(spId==-110){
				var share=ConfigData.shareData["playerpk"] || ConfigData.shareData["other"];
				if(!MenuList.shareImage){
					MenuList.shareImage=new Image();
					MenuList.shareImage.skin=SnowUtils.shareUrl()+share["QQImage"];
					this.addChildAt(MenuList.shareImage,0);
					MenuList.shareImage.visible=false;
				}
			}
		}

		/**
		*上报数据成功
		*@param data
		*/
		__proto.onSetScoreCallBack=function(data){
			if(!data.code){
				var option={};
				option.boardName=this._boardName;
				option.count=MenuList.countNum;
				option.offset=MenuList.offsetNum;
				HallApp.getEntriesAsync(option);
			}
		}

		/**
		*获取排行数据
		*@param data
		*/
		__proto.onGetRankData=function(data){
			console.log("--------------onGetRankData---------------------");
			if(!MenuList.rankArr)
				MenuList.rankArr=[];
			for(var i=0,sz=data.length;i<sz;i++){
				MenuList.rankArr.push(JSON.parse(data[i].ext));
			}
			this.onInitRankList();
			this.onAddRankList2();
		}

		/**初始化排行列表**/
		__proto.onInitRankList=function(){
			if(!this._rank2LIstUI){
				this._rank2LIstUI=new RankList2View();
				this.rankSprite2.addChild(this._rank2LIstUI);
				this.rankSprite2.pos(5,78);
			}
		}

		__proto.onQxPiPei=function(){
			var req=new RequestCancelLadderMatch();
			HallApp.notify(req);
		}

		__proto.onPlayAni=function(){
			var _$this=this;
			Loader.completeCallbackPause=true;
			Socket.onMessagePause=true;
			Laya.timer.once(100,this,function(){
				_$this.menuAni.play(0,false);
				_$this.menuAni.once("complete",this,_$this.onCenterAniComplete);
				_$this.onCenterAniComplete();
			});
		}

		__proto.onAddRankList2=function(){
			if(SnowUtils.chkIsFB()&& !MenuList.rankArr)return;
			if(Browser.onMiniGame){
				this.rankSprite1.graphics.clear();
				this.rankSprite2.graphics.clear();
				if(!this._rankTexture){
					this._rankTexture=new Texture(Browser.window.sharedCanvas);
					this._rankTexture.bitmap.alwaysChange=true;
				}
				this.rankSprite2.graphics.drawTexture(this._rankTexture,5,78,this._rankTexture.width,this._rankTexture.height);
				}else{
				if(!MenuList.rankArr)MenuList.rankArr=[];
				if(this._rank2LIstUI){
					this._rank2LIstUI.onZheHeData(MenuList.rankArr,this.onOwnData);
				}
			}
			this.rankbg1.visible=false;
			this.rankbg2.visible=true;
			this.rank2Ani.play(0,false);
		}

		__proto.onCenterAniComplete=function(){
			Loader.completeCallbackPause=false;
			Socket.onMessagePause=false;
		}

		__proto.chkNewItemGet=function(itemId){
			if (MenuList.bIsGetNewItem)return;
			var itemData=ConfigData.itemData[itemId];
			if (itemData.type==7){
				MenuList.bIsGetNewItem=true;
			}
		}

		// packHong.visible=true;
		__proto.onSetDate=function(){
			if(!this.isInitDataBool){
				this.isInitDataBool=true;
				var myDate=new Date();
				var clientData=NotifyCenter.I.Query("client_data");
				if(clientData){
					this._clientData=clientData;
					var qqData=this._clientData.qqData;
					var qunData=this._clientData.qunData;
					var quanData=this._clientData.quanData;
					if(myDate.getDate()!=qqData.date){
						this._clientData.qqData={date:myDate.getDate(),isShow:true,clickDate:0};
					}
					if(myDate.getDate()!=quanData.date){
						this._clientData.quanData={date:myDate.getDate(),isShow:true,clickDate:0};
					}
					if(myDate.getDate()!=qunData.date){
						this._clientData.qunData={date:myDate.getDate(),isShow:true,clickDate:0};
					}
					HallApp.setClientObject(this._clientData);
				}
			}
		}

		__proto.chkLockState=function(){
			var btnData=ConfigData.menuBtnCfgByBtnName;
			var img;
			for (var key in btnData){
				var btnName=btnData[key] .btnName;
				if(!this[btnName])continue ;
				img=this[btnName].getChildByName("locker");
				if(!img)continue ;
				if (!MenuList.getOpenState(btnName,false)){
				}
				else{
					img.visible=false;
					if (btnName=="btnteam"){
						this.onGuide(RoleCenter.I.nowStep);
					}
				}
			}
		}

		/**交流群、游戏圈、QQ群 红点显示控制**/
		__proto.onRedPointControl=function(){
			var myDate=new Date();
			var data;
			if (this._clientData.hasOwnProperty("quanData")){
				if(this._clientData.quanData){
					data=this._clientData.quanData;
					if((myDate.getDate()-data.start)>3){
						}else{
					}
				}
			}
			if (this._clientData.hasOwnProperty("qqData")){
				if(this._clientData.qqData){
					data=this._clientData.qqData;
					if((myDate.getDate()-data.start)>3){
						}else{
					}
				}
			}
			if (this._clientData.hasOwnProperty("qunData")){
				if(this._clientData.qunData){
					data=this._clientData.qunData;
					if((myDate.getDate()-data.start)> 3){
						}else{
						if(SnowUtils.isWxApp()){
						}else{}
					}
				}
			}
		}

		// qunShare.visible=data.isShow;
		__proto.onPlayComplete=function(){}
		// boxBtn.bottom=boxBtnS;
		__proto.openAgain=function(){
			this.onOpen();
		}

		/**
		*检查是否可以解锁技能
		*/
		__proto.chkCanUnLockSkill=function(){
			var packArr=NotifyCenter.I._packetArr;
			var itemObj;
			var itemCfg;
			var levelNum=0;
			MenuList.canUnlockFlag=false;
			for (var i=0,length=packArr.length;i < length;i++){
				itemObj=ConfigData.itemData[packArr[i].staticId-90000];
				if(itemObj && itemObj.type==4){
					var packetDt=NotifyCenter.I.packetObj[itemObj.defId];
					levelNum=packetDt ? packetDt.amount-1:0;
					if (levelNum==5)continue ;
					if(!packetDt){
						itemCfg=ConfigData.itemUpByItemIDLv[itemObj.defId+"_1"];
						}else{
						itemCfg=ConfigData.itemUpByItemIDLv[itemObj.defId+"_"+((packetDt.amount+1)> 6?6:packetDt.amount+1)];
					}
					if (!itemCfg)
						continue ;
					var spObj=NotifyCenter.I.packetObj[itemCfg.currencyId[1]];
					var haveVal=spObj?(0 | spObj.amount):0;
					haveVal=haveVal < 0?0:haveVal;
					var needVal=0 | itemCfg.currencyNum[1];
					if (!needVal)continue ;
					if (haveVal >=needVal){
						MenuList.canUnlockFlag=true;
						break ;
					}
				}
			}
		}

		__proto.chkOpen=function(){
			if (this.chkHasRoom())return false;
			NotifyCenter.applyOnceData();
			return true;
		}

		/**
		*
		*@param arr 数据源
		*@param type 类型
		*<br> 1-被其他玩家邀请好友
		*<br> 2-被其他玩家拒绝
		*<br> 3-被其他玩家接受
		*<br> 4-被其他玩家拉黑
		*<br> 5-被其他玩家恢复
		*<br> 6-被其他玩家删除
		*<br> 7-被其他玩家移动（组）
		*@return
		*/
		__proto._chkFriendDataChg=function(arr,type){
			if (arr && arr.length){
				return true;
			}
			if (type==1){
			}
			return false;
		}

		/**检测ext中房间id是否可进入
		*<br> 用于断线重连，求救功能的处理
		**/
		__proto.chkHasRoom=function(){
			if (this.isChkHasRoomed)return false;
			this.isChkHasRoomed=true;
			var str=HallApp.getVars("ext");
			if (str){
				var ext=JSON.parse(str);
				if (NotifyCenter.I.getServerTimer()-ext.time > 6 *60 *1000){
					return false;
				}
				GameSocket.isForcein=1;
				GameSocket.voExt=ext;
				view.page.MenuList.inRoomByWhere=0;
				HallApp.joinRoom(parseInt(ext.roomId),true);
				return true;
			}
			return false;
		}

		__proto.onResize=function(){
			var sx=Laya.stage.width / Laya.stage.designWidth;
			var sy=Laya.stage.height / Laya.stage.designHeight;
			var sc=Math.max(sx,sy);
			if(sc <=1){
				sc=1/Math.min(sx,sy);
			}
		}

		// 处理房间数据
		__proto.onRoomTypesChanged=function(list){
			console.log('得到roomlist:',list);
			for (var i=0,sz=list.length;i < sz;i++){
				var rtInfo=list[i];
				var btn=this ['model'+rtInfo.id];
				if (btn)btn.on("click",this,this.onRoomTypeButtonClick,[rtInfo]);
			}
		}

		// 点击进入房间的按钮
		__proto.onRoomTypeButtonClick=function(id){
			view.page.MenuList.inRoomByWhere=0;
			HallApp.match(id);
			this.netWorkControl.reSet(2000,Handler.create(this,this.onRoomTypeButtonClick,[id]));
			this._clickEnterGame=true;
			UIMgr.closeAll2_tips();
		}

		/**获取段位信息**/
		__proto.onGetMyCurSeasonData=function(data){
			if (data.code !=0 || data.userId !=this.myBasicData.userId)return;
			var duanwei=HallUtil.getSeasonNameByExp(data.result.s1);
			RoleCenter.I.rank=MenuList._duanWeiStar=data.result.s1 || 0;
			if(Browser.onMiniGame){
				MsgMgr.postMessage({type:MsgMgr.RANK_LIST2,data:this.onOwnData});
				Laya.timer.once(700,this,this.onAddRankList2);
			}
		}

		/**上报排行数据**/
		__proto.onReqRankData=function(){
			var extData=new NewRankInfo();
			extData.openId=RoleCenter.I.openId;
			extData.nickName=HallUtil.getNkName(RoleCenter.I.myBasicData);
			extData.avatarUrl=HallUtil.getHeadIcon(RoleCenter.I.myBasicData);
			extData.rankValue=MenuList._duanWeiStar;
			HallApp.setScoreAsync("rankTotal",extData.rankValue,extData);
		}

		// 处理用户基础数据
		__proto.onUserBasicDataChg=function(){
			this.lNkName.changeText(HallUtil.getNkName(RoleCenter.I.myBasicData));
			this.lMoney.changeText(SnowUtils.setIntToThousandth(RoleCenter.I.diamond));
			this.ICrystal.text=NotifyCenter.I.packetObj[90001] ? NotifyCenter.I.packetObj[90001].amount :"0";
			this.imgAvtor.skin=RoleCenter.I.myBasicData;
			this.imgAvtor.bgSkin="";
			this.checkEnoughToBuy();
		}

		/**处理客户端数据**/
		__proto.onGotClientData=function(data){
			data=NotifyCenter.I.Query("on_GotGameDataResult");
			if(!data || !data.results){
				return;
			}
			if (!data.results.fjson.saveToDesktopTimes){
				if (!this._checkdesk){
					if (SnowUtils.isIos()&& SnowUtils.checkFromDesk()){
						var cmd=new RequestAddToDesktop();
						HallApp.notify(cmd);
					}
					this._checkdesk=true;
				}
			}
			this.chkShopHd();
			var giftId=SnowUtils.getQueryString("GIFT");
			var giftDt=ConfigData.qqGift[giftId];
			if (giftId && giftDt && data.results.fjson && (!data.results.fjson.libaoData || !data.results.fjson.libaoData[giftId])){
				var giftReq=new RequestOpenLibao();
				giftReq.libaoId=parseInt(giftId);
				HallApp.notify(giftReq);
			}
			this.updateSign();
			if(data.results.fjson.achieveData){
				PlayerListUI.AchieveDatas=data.results.fjson.achieveData;
			}
			if (data.results.hasOwnProperty("fclient")){
				var clientData=data.results.fclient;
				this._clientData=clientData;
				if(this._clientData.hasOwnProperty("qqData")==false){
					var myDate=new Date();
					clientData.qqData={mouth:myDate.getMonth(),date:myDate.getDate(),isShow:true,clickDate:0,start:myDate.getDate()};
					clientData.quanData={mouth:myDate.getMonth(),date:myDate.getDate(),isShow:true,clickDate:0,start:myDate.getDate()};
					clientData.qunData={mouth:myDate.getMonth(),date:myDate.getDate(),isShow:true,clickDate:0,start:myDate.getDate()};
					HallApp.setClientObject(clientData);
					this._clientData=clientData;
					this.onRedPointControl();
					}else{
					this.onSetDate();
					this.onRedPointControl();
				}
				if(this._clientData2==null){
					this._clientData2=NotifyCenter.I.Query("client_data");
				}
				if (this._clientData2.hasOwnProperty("soundSet")){
					this._clientData2.music_set=this._clientData2["soundSet"];
					delete this._clientData2["soundSet"];
				}
				if (this._clientData2.hasOwnProperty("music_set")){
					if (SoundManager.musicMuted==this._clientData2.music_set){
						SoundManager.soundMuted=SoundManager.musicMuted=!this._clientData2.music_set;
					}
				}else
				if(SoundManager.musicMuted)
					SoundManager.soundMuted=SoundManager.musicMuted=false;
				this.onSetSound();
			}
			this.updateBoostData(data);
		}

		__proto.controllShareBuffView=function(){}
		// this.shareBuffView.setData();
		__proto.updateBoostData=function(data){
			if (data.results["fjson"] && data.results['fjson']["boost"]){
				if (data.results['fjson']['boost']["1"]){
					NotifyCenter.I.event('boost_update',data.results['fjson']['boost']["1"]);
				}
			}
		}

		// 处理背包(已购买)的数据
		__proto.onGotBackpack=function(){
			this.ICrystal.text=NotifyCenter.I.packetObj[90001] ? NotifyCenter.I.packetObj[90001].amount :"0";
		}

		// 判断是否能购买商品-大厅商城红点规则
		__proto.checkEnoughToBuy=function(){
			return;
		}

		/**
		*处理透传数据
		*@param data
		*
		*/
		__proto.onGotNotify=function(dat){
			console.log("-------1111-----onGotNotify----------------------------------");
			switch(dat.method){
				case 30025:
				if(RoleCenter.I.nowStep !=enumUserEnterGameType.default1 && this.displayedInStage){
						this.onGuide(RoleCenter.I.nowStep);
					}
					break ;
				case 30031:;
					var shareData=NotifyCenter.I.Query(30031+"");
					break ;
				case 30029:
					RoleCenter.I.bIsFirstOpen=true;
					break ;
				case 30030:
					break ;
				case 30036:
					NotifyCenter.I.event("activityRewardData",[dat]);
					break ;
				case 30037:
					NotifyCenter.I.event("noticeUpdateRedPoint",[dat]);
					break ;
				case 30047:
					StatManager.I.v2_send_desktop();
					break ;
				case 30048:
					NotifyCenter.I.event("onDuihuanRewardData",[dat]);
					break ;
				case 30051:
					NotifyCenter.I.event("onLunPanYaoShaiZiData",[dat]);
					break ;
				case 30052:
					NotifyCenter.I.event("onLunPanBuyCiShuData",[dat]);
					break ;
				case 30055:
					NotifyCenter.I.event("onLanPanRandomReward",[dat]);
					break ;
				case 30060:
					NotifyCenter.I.event("onLanPanZeroShareReward",[dat]);
					break ;
				case 30002:
					this.allTaskData=dat;
					break ;
				case 30001:
					this.singleTaskData=dat;
					break ;
				case 30094:
					break ;
				case 30090:;
					var myFjson=SnowUtils.getFjson();
					if (myFjson){
						if (!myFjson.newInviteInfo)
							myFjson.newInviteInfo={};
						if (!myFjson.newInviteInfo.inviteStatus)
							myFjson.newInviteInfo.inviteStatus={};
						myFjson.newInviteInfo.inviteStatus[dat.whoMeInvite]=2;
					}
					break ;
				case 30098:
					this.onFbAdsDataCallBack(dat);
					break ;
				case 30045:;
					var fjson=SnowUtils.getFjson();
					if (!fjson.shareAward)fjson.shareAward=new ShareAward();
					fjson.shareAward.lastShareTime=new Date().toLocaleDateString();
					ItemShow.onShow([{itemId:dat.awardId,itemNum:dat.awardNum}],"分享奖励");
					var shareKey=RoleCenter.I.userId+"_share_reword";
					var shareTimeSpan=SnowUtils.getDataInLocalStorage(shareKey);
					if(!shareTimeSpan || shareTimeSpan !=SnowUtils.getTimeSpanAt0()){
						SnowUtils.setDataInLocalStorage(shareKey,SnowUtils.getTimeSpanAt0());
					}
					UIMgr.closeUI(ShareTips);
					HallApp.listBackpacks();
					break ;
				default :
					break ;
				}
		}

		/**增加钻石回调**/
		__proto.onFbAdsDataCallBack=function(data){
			if(data && data.code==1){
				var diamond=ConfigData.gameCfg.fbAdsDiamond;
				var arr=SnowUtils.getArrByIdsNums([1],[diamond]);
				ItemShow.onShow(arr,SnowUtils.chkIsFB()?"Reward" :"奖励");
			}
		}

		/**
		*判断当天是否已经分享过了
		*@return
		*/
		__proto.todayIsFirstShare=function(){
			var shareKey=RoleCenter.I.userId+"_share_reword";
			var shareTimeSpan=SnowUtils.getDataInLocalStorage(shareKey);
			if(shareTimeSpan && shareTimeSpan==(SnowUtils.getTimeSpanAt0()+"")){
				return false;
				}else{
				return true;
			}
		}

		__proto.setCanGetHero=function(){
			var responseSignData=NotifyCenter.I.Query(30029);
			if (responseSignData){
				var oo;
				for (var key in responseSignData.signDatas){
					this.signData=responseSignData.signDatas[key];
					oo=responseSignData.signDatas[key].nextHero;
				};
				var noSignDays=this.signData.noSignDays;
				var signDay=this.signData.curDay;
				if (oo && oo.nextItemId !=-1){
					var leftTimer=NotifyCenter.I.getServerTimer();
					var timeDt=new Date(leftTimer+oo.needDay *24 *60 *60 *1000);
					var endTimeSpan=new Date(timeDt.toDateString()).getTime();
					var continueLoop=true;
					if ((noSignDays.indexOf(signDay)==-1 && oo.needDay <=1)|| (noSignDays.indexOf(signDay)==0 && oo.needDay==0)){
						var timeNum=endTimeSpan-NotifyCenter.I.getServerTimer();
						if(timeNum <=0){
							continueLoop=false;
						}
						if(continueLoop)this.timer.frameLoop(30,this,this.loopCanGet,[endTimeSpan]);
					}else{}
				}else {}
			}
		}

		/**
		*检测大转盘红点状态
		*@param data
		*/
		__proto.onChkLunPanReadType=function(data){
			if(data && !data.code){
			}
		}

		/**
		*更新签到数据
		*
		*/
		__proto.updateSign=function(){
			if (!view.page.MenuList.I.parent)
				return;
			var responseSignData=NotifyCenter.I.Query(30029);
			if (!responseSignData)return;
			var data=NotifyCenter.I.Query("on_GotGameDataResult");
			var signData=null;
			for (var id in responseSignData.signDatas){
				if(id){
					signData=responseSignData.signDatas[id];
					break ;
				}
			}
			if(signData){
				this.setCanGetHero();
			}
			if (!data || !data.results.fjson || !data.results.fjson.generalData)
				return;
			var playTimes=data.results.fjson.generalData.playTimes;
			if (signData && RoleCenter.bIsShowSCh){
				RoleCenter.bIsShowSCh=false;
			}
			if (!playTimes || playTimes < 2 || playTimes==4){
				return;
			}
			if(!RoleCenter.I.bIsFirstOpen){
				return;
			}
			RoleCenter.I.bIsFirstOpen=false;
		}

		/**
		*更新签到数据
		*
		*/
		__proto.updateSignResult=function(){
			var signData=null;
			var responseResult=NotifyCenter.I.Query(30030);
			if(responseResult.signResult){
				var responseSign=NotifyCenter.I.Query(30029);
				for (var ids in responseSign.signDatas){
					if(ids){
						signData=responseSign.signDatas[ids];
						break ;
					}
				}
				signData.nextHero=responseResult.nextHero;
				var curDay=responseResult.curDay-1;
				var signInData=ConfigData.signInData[signData.signId];
				signData.noSignDays.shift();
				var itemIds=signInData.items[curDay];
				var itemSizes=signInData.itemsSize[curDay];
				var itemId;
				var itemSize;
				var item=[];
				for (var i=0,len=itemSizes.length;i < len;i++){
					itemId=itemIds[i];
					itemSize=itemSizes[i];
					item.push({"itemId":itemId,"itemNum":itemSize})
				}
				if(item.length !=0)
					ItemShow.onShow(item,"签到奖励");
				else
				TipsManager.instance.showText("签到成功！");
				}else{
				TipsManager.instance.showText("签到失败");
			}
		}

		__proto.chkShopHd=function(){
			var sDt=ConfigData.shopData;
			var objDt;
			this.scHd.visible=false;
			for(var key in sDt){
				objDt=sDt[key];
				var iDt=ConfigData.itemData[key];
				if(objDt.type !=0 && iDt.type==1){
					if(!NotifyCenter.I.fJsonITLObj[objDt.defId]){
						this.scHd.visible=true;
						break ;
					}
				}
			}
		}

		//打开社交 聊天
		__proto.btnFriend_onClick=function(){
			if (!MenuList.getOpenState("btnFriend")){
				return;
			}
		}

		// FriendView.onShowMe();
		__proto.btnNotice_onClick=function(){
			if (!MenuList.getOpenState("btnNotice")){
				return;
			}
		}

		/**点击大厅英雄按钮*/
		__proto.btnShop_onclick=function(type){}
		/**
		*设置按钮点击事件
		*/
		__proto.btnSet_onclick=function(){}
		/**
		*任务按钮点击事件
		*/
		__proto.btnTask_onclick=function(){
			if (!MenuList.getOpenState("btnTask")){
				return;
			}
		}

		/**
		*帮助按钮点击事件
		*/
		__proto.btnHelp_onclick=function(){}
		/**==========================================================================================**/
		__proto.onClose=function(){
			Laya.timer.clear(this,this.onCheckIsJoinRoom);
			this.rankbg1.visible=false;
			this.rankbg2.visible=false;
			this.rankSprite2.graphics.clear();
			this.rankSprite1.graphics.clear();
			this.starView.ani1.stop();
			this.onRemoveHandUI();
			MenuList.isShow=false;
			NotifyCenter.I.off("on_GotGameDataResult",this,this.onGotClientData);
			view.UIBase0.prototype.onClose.call(this);
			this.mouseEnabled=true;
			if (this._clickEnterGame){
				LoadingPage.getInstance().hide();
			}
			this.netWorkControl&&this.netWorkControl.detroy();
			this.myBg && this.myBg.onEnd();
		}

		__proto.createBj=function(){}
		/**社交按钮红点判断*/
		__proto.onChkFriend=function(){
			var isFriendChat=NotifyCenter.I.Query('gam_unread_msg');
			var haveNewFans=SnowUtils.getDataInLocalStorage("haveNewFans"+RoleCenter.I.userId);
			if (isFriendChat || haveNewFans=="true"){
				return;
			}
		}

		//------------------------------------------------------------------------------------------------
		__proto.tempBtnInit=function(){
			this.tempButton(300,300,"限时匹配");
		}

		/**
		*临时按钮
		*@param x 坐标x
		*@param y 坐标y
		*@param text 按钮文本
		*/
		__proto.tempButton=function(x,y,text){
			var sp=new Sprite();
			sp.x=x;
			sp.y=y;
			sp.width=100;
			sp.height=30;
			sp.graphics.drawRect(0,0,100,30,"#ffffff","yellow",2);
			var str=new Label(text);
			str.fontSize=25;
			str.color="#000000";
			str.align="center";
			str.valign="middle";
			str.width=100;
			str.height=30;
			sp.addChild(str);
			this.addChild(sp);
			sp.on("click",this,this.onTempClick,[text]);
		}

		__proto.onTempClick=function(str){}
		/**初始化位置**/
		__proto.onInitPos=function(){}
		/**缓动大厅整体容器**/
		__proto.onTweenEffect=function(){
			this._onTweenType=true;
		}

		/**
		*数据请求中禁用鼠标事件 默认持续5000秒 超过五秒没用调用onReqEnd自动取消
		*@param value
		*/
		__proto.onReqStart=function(value){
			(value===void 0)&& (value=5000);
			this.netWorkControl.reSet(value);
		}

		/**
		*数据请求成功后调用此方法清除鼠标禁用状态
		*/
		__proto.onReqEnd=function(){
			this.netWorkControl&&this.netWorkControl.detroy();
		}

		/**获取个人排行信息**/
		__getset(0,__proto,'onOwnData',function(){
			var extData=new NewRankInfo();
			extData.openId=RoleCenter.I.openId;
			extData.nickName=HallUtil.getNkName(RoleCenter.I.myBasicData);
			extData.avatarUrl=HallUtil.getHeadIcon(RoleCenter.I.myBasicData);
			extData.rankValue=RoleCenter.I.rank;
			return extData;
		});

		MenuList.onShowMe=function(){
			if (Loading.I.isShowLoad || MenuList.isShow)return;
			ResCacheManager.I.enterMainUI();
			UIMgr.openUI(MenuList);
			MenuList.isShow=true;
		}

		MenuList.onGoldPay=function(){}
		MenuList.getOpenState=function(btnName,tips){
			(tips===void 0)&& (tips=true);
			var mu;
			if (ConfigData.menuBtnCfgByBtnName[btnName]){
				mu=ConfigData.menuBtnCfgByBtnName[btnName];
			}
			else
			return true;
			if (mu&&mu.need <=MenuList._level && mu.need !=-2){
				return true;
			}
			if (mu.need==-2 && tips){
				TipsManager.instance.showText("该功能暂未开放,敬请期待");
				return false;
			}
			if (tips){
				if (HallUtil.getSeasonNameByExp(mu.need)!="数据异常"){
				}
			}
			return false;
		}

		MenuList.isShow=false;
		MenuList.bIsGetNewItem=false;
		MenuList.GOGAME="menulist_goGame";
		MenuList.numTimes=0;
		MenuList.inRoomByWhere=0;
		MenuList._duanWeiStar=0;
		MenuList._level=0;
		MenuList.I=null
		MenuList._isReques=false;
		MenuList.currentIdStr="1972212883029472_1973664682884292";
		MenuList.countNum=100;
		MenuList.offsetNum=0;
		MenuList.rankArr=null
		MenuList.shareImage=null
		MenuList.canUnlockFlag=false;
		MenuList.bIsShow=false;
		__static(MenuList,
		['fromType',function(){return this.fromType=enumRoomType.ROOMTYPE_NONE;},'curGuideType',function(){return this.curGuideType=enumUserEnterGameType.default1;}
		]);
		return MenuList;
	})(menuListUI)


	/**
	*...
	*@author ...
	*/
	//class view.page.HeroCardView extends ui.hall.page.shop.HeroCardViewUI
	var HeroCardView=(function(_super){
		function HeroCardView(){
			this._itemId=0;
			this._curItemId=0;
			this.signData=null;
			this._panelEffect=null;
			HeroCardView.__super.call(this);
			this.resList=[
			{url:"res/atlas/heroCard.atlas",type:"atlas" },
			{url:"res/atlas/common.atlas",type:"atlas" },
			{url:"common/bg.jpg",type:"image" },
			{url:"common/bg031.png",type:"image" },];
		}

		__class(HeroCardView,'view.page.HeroCardView',_super);
		var __proto=HeroCardView.prototype;
		__proto.onCreated=function(){
			var _$this=this;
			view.UIBase0.prototype.onCreated.call(this);
			this.btn_use.on("click",this,this.onUseHero);
			this.btn_buy.on("click",this,this.onBuyHero);
			this.btn_buy1.on("click",this,this.onBuyHero);
			this.btn_qd.on("click",this,this.onQd)
			this.btn_Db.on("click",this,this.onDb)
			this.topPanel.homeCallback=function (){
				if (_$this._panelEffect)_$this._panelEffect.close(new Handler(this,_$this.onSelfColse));
			};
			this.topPanel.boxMoney.visible=false;
			this.topPanel.bg.visible=false;
			this.topPanel.myTitle="heroCard/img_title.png";
			this.hList.renderHandler=new Handler(this,this.listRender);
			this.hList.array=HeroCardView._itemArr;
			this.hList.hScrollBarSkin="";
		}

		__proto.onDb=function(){
			DuoBaoView.onShow();
		}

		__proto.onQd=function(){
			if(this.signData && this.signData.noSignDays.indexOf(this.signData.curDay)!=-1){
				var cmd=new RequestSign();
				var signInData=ConfigData.signInData[this.signData.signId];
				cmd.signId=signInData.id;
				HallApp.notify(cmd);
			}
		}

		__proto.listRender=function(item,index){
			if (!item || !item.dataSource)return;
			item.on("click",this,this.onItemClick,[item.dataSource,index]);
			item.itemH.skin="heroCard/"+item.dataSource+".png";
			item.scale(1,1);
			item.alpha=0.7;
			item.ani1.stop();
			item.hs.visible=false;
			if (NotifyCenter.I.fJsonITLObj[HeroCardView._itemArr[index]]){
				item.hd.visible=false;
				}else{
				item.hd.visible=true;
			}
			if(index==HeroCardView._itemArr.indexOf(this._itemId)){
				item.scale(1.1,1.1);
				item.alpha=1;
				item.hs.visible=true;
				item.ani1.play();
			}
		}

		__proto.onSelfColse=function(){
			if(!FreeMatch.bIsShow && !TeamView.bIsShow){
				MenuList.onShowMe();
			}
			UIMgr.closeUI(HeroCardView);
		}

		/**
		*购买英雄
		*/
		__proto.onBuyHero=function(){
			ShopNewBuyRole.onShowMe(this._itemId);
		}

		/**
		*使用英雄
		*/
		__proto.onUseHero=function(){
			HallApp.useItem(this._itemId,1);
		}

		__proto.onOpen=function(){
			view.UIBase0.prototype.onOpen.call(this);
			this.initEvent();
			this.topPanel.onOpen();
			if (!this._panelEffect){
				this._panelEffect=new PanelEffect();
				this._panelEffect.reg(this);
			}
			this.addToParent(this);
			this._panelEffect.start(50);
			this.initView();
			if(FreeMatch.bIsShow){
				var cmd=new CMsgChgUserState();
				cmd.stateMark=1;
				cmd.stateValue=1;
				GameSocket.sendClientMsg(cmd);
			}
			this.moneyImg.skin="common/diamond.png";
			this.moneyTxt.text=SnowUtils.setIntToThousandth(RoleCenter.I.diamond);
			HallApp.getGameData({fjson:1});
			UIMgr.closeUI(MenuList);
			var cmd2=new RequestSignData();
			HallApp.notify(cmd2);
			NotifyCenter.I.on('onNotify',this,this.onGotNotify);
			this.setSignData();
		}

		__proto.setSignData=function(){
			var responseSign=NotifyCenter.I.Query(30029);
			if (!responseSign)return;
			for (var ids in responseSign.signDatas){
				if(ids){
					this.signData=responseSign.signDatas[ids];
					break ;
				}
			}
		}

		__proto.onGotNotify=function(data){
			switch(data.method){
				case 30029:
					this.setSignData();
					this.timer.callLater(this,this.initView);
					break ;
				case 30030:
					this.updateSignResult();
					this.timer.callLater(this,this.initView);
					break ;
				default :
					break ;
				}
		}

		__proto.updateSignResult=function(){
			var signData=null;
			var responseResult=NotifyCenter.I.Query(30030);
			if(responseResult.signResult){
				var responseSign=NotifyCenter.I.Query(30029);
				for (var ids in responseSign.signDatas){
					if(ids){
						signData=responseSign.signDatas[ids];
						break ;
					}
				}
				signData.nextHero=responseResult.nextHero;
				var curDay=responseResult.curDay-1;
				var signInData=ConfigData.signInData[signData.signId];
				signData.noSignDays.shift();
				var itemIds=signInData.items[curDay];
				var itemSizes=signInData.itemsSize[curDay];
				var itemId;
				var itemSize;
				var item=[];
				for (var i=0,len=itemSizes.length;i < len;i++){
					itemId=itemIds[i];
					itemSize=itemSizes[i];
					item.push({"itemId":itemId,"itemNum":itemSize})
				}
				if(item.length !=0){
					ItemShow.onShow(item,SnowUtils.chkIsFB()?"Sign-in reward":"签到奖励");
					HallApp.getGameData({fjson:1});
				}
				this.hList.array=this.hList.array;
				}else{
				TipsManager.instance.showText(SnowUtils.chkIsFB()?"Sign-in failed":"签到失败");
			}
		}

		/**
		*初始化页面
		*/
		__proto.initView=function(){
			HeroCardView._itemArr=[];
			HeroCardView.unLockType=[];
			var sDt=ConfigData.shopData;
			var objDt;
			var haveArr=[];
			var haveTpArr=[];
			for(var key in sDt){
				objDt=sDt[key];
				var iDt=ConfigData.itemData[key];
				if (objDt.type !=0 && iDt.type==1){
					var tVal=0;
					var vVal=0;
					if (objDt.type==2){
						tVal=2;
						vVal=0;
						}else if(objDt.type==3){
						tVal=3;
						vVal=0;
						}else if(objDt.type==5){
						tVal=1;
						vVal=15;
						}else if(objDt.type==6){
						tVal=1;
						vVal=30;
						}else if(objDt.type==7){
						tVal=1;
						vVal=45;
					}
					if (NotifyCenter.I.fJsonITLObj[objDt.defId]){
						haveArr.push(objDt.defId);
						haveTpArr.push({type:tVal,value:vVal});
					}
					else{
						HeroCardView._itemArr.push(objDt.defId);
						HeroCardView.unLockType.push({type:tVal,value:vVal});
					}
				}
			}
			HeroCardView._itemArr=haveArr.concat(HeroCardView._itemArr);
			HeroCardView.unLockType=haveTpArr.concat(HeroCardView.unLockType);
			var tempArr=NotifyCenter.I.Query("activeItems")|| {};
			var arr=SnowUtils.deComposeAvatar(tempArr[1] || 1);
			this.hList.array=HeroCardView._itemArr;
			if(!arr || arr.length <=0){
				this._itemId=1035;
				}else{
				if(!this._itemId){
					this._itemId=arr[0]==1001 ? 1036:arr[0];
				}
				this._curItemId=arr[0]==1001 ? 1036:arr[0];
			}
			this.setData();
		}

		/**
		*
		*@param id
		*@param index 点击索引
		*/
		__proto.onItemClick=function(id,index){
			this.onResetType(index);
			SoundManager.playSound(ConfigData.soundCfg[102],1);
			this._itemId=id;
			this.setData();
		}

		/**重置状态**/
		__proto.onResetType=function(index){}
		__proto.setData=function(){
			var itemData=ConfigData.itemData [this._itemId];
			var shopData=ConfigData.shopData [this._itemId];
			if(!itemData || !shopData){
				itemData=ConfigData.itemData [1035];
				shopData=ConfigData.shopData [1035];
				this._itemId=1035;
			}
			if(HeroCardView._itemArr.indexOf(this._itemId)!=-1){
				this.hList.array=this.hList.array;
			};
			var roleCfg;
			roleCfg=ConfigData.roleData[itemData.communalId[0]];
			var skillCfg=roleCfg.defaultSkill;
			this.pgSk.on("mousedown",this,this.onShowSkill,[this.pgSk,skillCfg[0]]);
			this.xlSk.on("mousedown",this,this.onShowSkill,[this.xlSk,skillCfg[2]]);
			this.tfSk.on("mousedown",this,this.onShowSkill,[this.tfSk,skillCfg[1]]);
			this.Avtor.skin=SnowUtils.itemHalfUrl(this._itemId+"");
			this.uName.skin=SnowUtils.itemHalfUrlNew("n_"+this._itemId);
			this.tfSk.skin="res/skillIcon/"+ConfigData.skillCfg[skillCfg[1]].btnIcon+".png";
			var gongjiValue=roleCfg.attack / 50;
			var linghuoValue=roleCfg.flexible / 50;
			var shengcunValue=roleCfg.survival / 50;
			var baofaValue=roleCfg.erupt / 50;
			this.sct.text=roleCfg.attack+"/"+50;
			this.gjt.text=roleCfg.flexible+"/"+50;
			this.bft.text=roleCfg.survival+"/"+50;
			this.lmt.text=roleCfg.erupt+"/"+50;
			this.sc.width=216 *gongjiValue;
			this.gj.width=216 *linghuoValue;
			this.bf.width=216 *shengcunValue;
			this.lm.width=216 *baofaValue;
			this.btn_buy.skin="heroCard/btn_buy.png";
			this.buyBox.visible=false;
			this.btn_use.visible=false;
			this.bgDw.visible=false;
			this.dwImg.visible=false;
			this.btn_Db.visible=false;
			this.qdBox.visible=false;
			if(this._curItemId==this._itemId){
				this.buyBox.visible=false;
				this.btn_use.visible=false;
				if(shopData.buyType !=5){
					this.moneyImg.skin=this.icon.skin="common/diamond.png";
					this.moneyTxt.text=SnowUtils.setIntToThousandth(RoleCenter.I.diamond);
					this.btn_buy.skin="heroCard/btn_buy.png";
					}else{
					this.moneyImg.skin=this.icon.skin="heroCard/g2.png";
					this.moneyTxt.text=NotifyCenter.I.packetObj[90001] ? NotifyCenter.I.packetObj[90001].amount :"0";
					this.btn_buy.skin="heroCard/btn_buy2.png";
				}
				}else{
				var fJsonITLObj=NotifyCenter.I.fJsonITLObj;
				if (NotifyCenter.I.fJsonITLObj[this._itemId]){
					this.buyBox.visible=false;
					this.btn_use.visible=true;
					if(shopData.buyType !=5){
						this.moneyImg.skin=this.icon.skin="common/diamond.png";
						this.moneyTxt.text=SnowUtils.setIntToThousandth(RoleCenter.I.diamond);
						this.btn_buy.skin="heroCard/btn_buy.png";
						}else{
						this.moneyImg.skin=this.icon.skin="heroCard/g2.png";
						this.moneyTxt.text=NotifyCenter.I.packetObj[90001] ? NotifyCenter.I.packetObj[90001].amount :"0";
						this.btn_buy.skin="heroCard/btn_buy2.png";
					}
					}else{
					if(shopData.buyType !=5){
						this.moneyImg.skin=this.icon.skin="common/diamond.png";
						this.moneyTxt.text=SnowUtils.setIntToThousandth(RoleCenter.I.diamond);
						this.needVal.text=shopData.currencyNum[0]+"";
						this.btn_buy.skin="heroCard/btn_buy.png";
						}else{
						this.moneyImg.skin=this.icon.skin="heroCard/g2.png";
						this.moneyTxt.text=NotifyCenter.I.packetObj[90001] ? NotifyCenter.I.packetObj[90001].amount :"0";
						this.needVal.text=shopData.currencyNum[1]+"";
						this.btn_buy.skin="heroCard/btn_buy2.png";
					}
					this.buyBox.y=501;
					var obj=HeroCardView.unLockType[HeroCardView._itemArr.indexOf(this._itemId)];
					if(obj){
						if (obj.type==1){
							this.buyBox.visible=true;
							this.btn_buy.skin="heroCard/btn_jiesuo.png";
							this.bgDw.visible=true;
							this.dwImg.visible=true;
							this.dwImg.skin="heroCard/star_"+obj.value+".png";
							}else if(obj.type==2){
							this.btn_Db.visible=true;
							}else if (obj.type==3){
							this.qdBox.visible=true;
							this.bgDw.visible=true;
							this.needVal1.text=this.needVal.text;
							this.icon1.skin=this.icon.skin;
							if(this.signData){
								if(this.signData.noSignDays.indexOf(this.signData.curDay)!=-1){
									this.qdPn.width=HeroCardView.qiDaoArr[this.signData.curDay-1];
									this.btn_qd.disabled=false;
									}else{
									this.qdPn.width=HeroCardView.qiDaoArr[this.signData.curDay];
									this.btn_qd.disabled=true;
								}
							}
							}else{
							this.buyBox.visible=true;
							this.buyBox.y=471;
						}
					}
				}
			}
		}

		__proto.onShowSkill=function(target,id){
			SkillInfoTips.I.onShow(target,id);
		}

		__proto.createBj=function(){}
		__proto.onClose=function(){
			this.removeEvent();
			this._itemId=NaN;
			if(FreeMatch.bIsShow){
				var cmd=new CMsgChgUserState();
				cmd.stateMark=1;
				cmd.stateValue=0;
				GameSocket.sendClientMsg(cmd);
			}
			view.UIBase0.prototype.onClose.call(this);
		}

		__proto.initEvent=function(){
			RoleCenter.I.on("roleChangeEvent",this,this.chkDataChange);
			NotifyCenter.I.on("on_ListBackpacksResult",this,this.chkDataChange);
			NotifyCenter.I.on("on_GotGameDataResult",this,this.chkDataChange);
			NotifyCenter.I.on("on_UseItemResult",this,this.onGetUseData);
			NotifyCenter.I.on('onNotify',this,this.onGetNotice);
		}

		//用于监听购买消息
		__proto.onGetNotice=function(data){
			switch(data.method){
				case 30016:
					if ((data).useReuslt==1){
						HallApp.listBackpacks();
						this.timer.callLater(this,this.initView);
					}
					this.netWorkControl.detroy();
					break ;
				default :
					break ;
				}
		}

		__proto.onGetUseData=function(data){
			this.netWorkControl.detroy();
			if (!data.isSuccess){
				return;
			}
			this.timer.callLater(this,this.initView);
		}

		__proto.chkDataChange=function(){
			this.timer.callLater(this,this.initView);
		}

		__proto.removeEvent=function(){
			RoleCenter.I.off("roleChangeEvent",this,this.chkDataChange);
			NotifyCenter.I.off("on_ListBackpacksResult",this,this.chkDataChange);
			NotifyCenter.I.off("on_UseItemResult",this,this.onGetUseData);
			NotifyCenter.I.off('onNotify',this,this.onGetNotice);
		}

		__getset(1,HeroCardView,'I',function(){
			if (!HeroCardView._ins)HeroCardView._ins=UIMgr.getUI(HeroCardView);
			return HeroCardView._ins;
		},ui.hall.page.shop.HeroCardViewUI._$SET_I);

		HeroCardView.onShow=function(){
			UIMgr.openUI(HeroCardView,"layer_pop3");
		}

		HeroCardView._ins=null
		HeroCardView._itemArr=[];
		HeroCardView.unLockType=[];
		HeroCardView.maxPropertyNum=50;
		__static(HeroCardView,
		['qiDaoArr',function(){return this.qiDaoArr=[0,33,64,97,128,162,192,214];}
		]);
		return HeroCardView;
	})(HeroCardViewUI)


	//class view.page.HuoDeTuJingView extends ui.hall.page.shop.HuoDeTuJingViewUI
	var HuoDeTuJingView=(function(_super){
		function HuoDeTuJingView(){
			this._arr=null;
			HuoDeTuJingView.__super.call(this);
			this.resList=[];
		}

		__class(HuoDeTuJingView,'view.page.HuoDeTuJingView',_super);
		var __proto=HuoDeTuJingView.prototype;
		__proto.onCreated=function(){
			view.UIBase0.prototype.onCreated.call(this);
			this.btnYes.on("click",this,this.onBtnYes);
			this.btnNo.on("click",this,this.onBtnNo);
			this.btnClose.on("click",this,this.OnBtnClose);
			this.tujingList.renderHandler=new Handler(this,this.onTJRenderHandler);
			this.tujingList.vScrollBarSkin="";
			this.tujingList.scrollBar.hide=true;
			this.tujingList.scrollBar.elasticDistance=150;
			this.initData();
		}

		__proto.initData=function(){
			this._arr=[];
			this._arr[0]=[];
			if(!FreeMatch.isZuDui){
				this._arr[0].push({it:2,cn:"3V3组队赛",en:"3v3Mode"});
			}
			if(!TeamView.isZuDui){
				this._arr[0].push({it:4,cn:"段位赛",en:"Rank"});
			}
			if(Browser.onMiniGame && Browser.onAndriod){
				this._arr[0].push({it:3,cn:"充值",en:"Pay"});
				}else{
				if(SnowUtils.chkIsFB()){
					this._arr[0].push({it:4,cn:"广告",en:"Advertising"});
				}
			}
			this._arr[1]=[];
			this._arr[1].push({it:1,cn:"夺宝",en:"roulette only"});
		}

		/**
		*关闭
		*
		*/
		__proto.OnBtnClose=function(){
			SoundManager.playSound(ConfigData.soundCfg[103]);
			EffectUtils.closeDialog(this.myBox,Handler.create(this,this.onTweenBtnClose));
		}

		__proto.onTweenBtnClose=function(){
			UIMgr.closeUI(HuoDeTuJingView);
		}

		/**
		*途径列表渲染
		*@param item
		*@param index
		*/
		__proto.onTJRenderHandler=function(item,index){
			if(index < 0 || index >=this._arr[HuoDeTuJingView._type].length)
				return;
			var tpImg=item.getChildByName("tpImg");
			var tpDes=item.getChildByName("tpDes");
			var qwBtn=item.getChildByName("qwBtn");
			var obj=this._arr[HuoDeTuJingView._type][index];
			tpImg.skin="heroCard/img_rr"+obj.it+".png";
			this.msgTxt.text=HuoDeTuJingView._msg;
			tpDes.text=SnowUtils.chkIsFB()? obj.en :obj.cn;
			qwBtn.on("click",this,this.onQwBtnClick,[obj.it]);
			this.visible=true;
		}

		/**
		*前往按钮点击
		*@param index
		*
		*/
		__proto.onQwBtnClick=function(index){
			if(!HuoDeTuJingView._type){
				if(index==1){
					DuoBaoView.onShow();
					}else if(index==2){
					HallApp.match(enumRoomType.ROOMTYPE_CUSTOM_TEAM,1);
					}else if(index==3){
					if(SnowUtils.chkIsFB()){
						ShowLbView.onShow();
						}else{
						ShowCzView.onShow();
					}
					UIMgr.closeUI(HuoDeTuJingView);
					}else if(index==4){
					TeamView.showMe(enumRoomType.ROOMTYPE_LADDER,true);
				}
				}else{
				if(index==1){
					DuoBaoView.onShow();
				}
			}
		}

		/**
		*否
		*
		*/
		__proto.onBtnNo=function(){
			SoundManager.playSound(ConfigData.soundCfg[104]);
			EffectUtils.closeDialog(this.myBox,Handler.create(this,this.onTweenNo));
		}

		__proto.onTweenNo=function(){
			UIMgr.closeUI(HuoDeTuJingView);
		}

		/**
		*是
		*
		*/
		__proto.onBtnYes=function(){
			SoundManager.playSound(ConfigData.soundCfg[102]);
			EffectUtils.closeDialog(this.myBox,Handler.create(this,this.onTweenYes));
		}

		__proto.onTweenYes=function(){
			UIMgr.closeUI(HuoDeTuJingView);
		}

		__proto.onOpen=function(){
			view.UIBase0.prototype.onOpen.call(this);
			this.addToParent(this);
			this.typeImg.skin=HuoDeTuJingView._type==0 ? "heroCard/diamond.png" :"heroCard/90001.png";
			if(!this._arr)
				this.initData();
			this.tujingList.array=this._arr[HuoDeTuJingView._type];
			EffectUtils.openDialog(this.myBox);
		}

		__proto.onClose=function(){
			this._arr=null;
			view.UIBase0.prototype.onClose.call(this);
		}

		__proto.createBj=function(){}
		HuoDeTuJingView.onShow=function(msg,type){
			(type===void 0)&& (type=0);
			HuoDeTuJingView._msg=msg;
			HuoDeTuJingView._type=type;
			UIMgr.openUI(HuoDeTuJingView,"layer_pop4");
		}

		HuoDeTuJingView._type=0;
		HuoDeTuJingView._msg=null
		return HuoDeTuJingView;
	})(HuoDeTuJingViewUI)


	/**
	*...
	*@author ...
	*/
	//class view.page.SendDesktop extends ui.hall.page.roomList.SendDeskTopUI
	var SendDesktop=(function(_super){
		function SendDesktop(){
			this.isFs=false;
			SendDesktop.__super.call(this);
			this.resList=[
			{url:"res/atlas/common.atlas",type:"atlas" },
			{url:"res/atlas/sendDesktop.atlas",type:"atlas" }]
		}

		__class(SendDesktop,'view.page.SendDesktop',_super);
		var __proto=SendDesktop.prototype;
		__proto.onCreated=function(){
			view.UIBase0.prototype.onCreated.call(this);
			this.btnClose.on("click",this,this.oncloseTween);
			this.btnSend.on("click",this,this.onBtnSend);
		}

		__proto.onClose=function(){
			view.UIBase0.prototype.onClose.call(this);
			NotifyCenter.I.off("onSentDesktop",this,this.onFsCg);
			NotifyCenter.I.off('onNotify',this,this.onGotNotify);
		}

		__proto.onOpen=function(){
			view.UIBase0.prototype.onOpen.call(this);
			NotifyCenter.I.on("onSentDesktop",this,this.onFsCg);
			NotifyCenter.I.on('onNotify',this,this.onGotNotify);
			EffectUtils.openDialog(this.myBox);
			this.addToParent(this);
		}

		__proto.onGotNotify=function(data){
			if (data.method==30047){
				UIMgr.closeUI(ShareTips);
				this.oncloseTween();
			}
		}

		/**
		*发送桌面请求奖励
		*/
		__proto.onFsCg=function(dat){
			if (dat.result==0 && !this.isFs){
				this.isFs=true;
				var cmd=new RequestAddToDesktop();
				HallApp.notify(cmd);
			}
		}

		__proto.oncloseTween=function(){
			EffectUtils.closeDialog(this.myBox,Handler.create(this,this.onCloseSelf));
		}

		__proto.onCloseSelf=function(){
			UIMgr.closeUI(SendDesktop);
		}

		/**
		*发送桌面
		*
		*/
		__proto.onBtnSend=function(){
			if (SnowUtils.isWxApp()){
				ShareTips.onShowMe("gonggao/wx_1.jpg");
			}
			else{
				var opts=new SendDesktopInfo();
				opts.icon=enumShareType.desctopIcon;
				opts.title="全民打雪球";
				opts.url=enumShareType.share_game_url+"&sd=true";
				HallApp.addQQGameShortcut(opts);
			}
		}

		__getset(1,SendDesktop,'I',function(){SendDesktop._ins=SendDesktop._ins|| UIMgr.getUI(SendDesktop);
			return SendDesktop._ins;
		},ui.hall.page.roomList.SendDeskTopUI._$SET_I);

		SendDesktop.onShow=function(){
			UIMgr.openUI(SendDesktop,"layer_pop3");
		}

		SendDesktop._ins=null
		return SendDesktop;
	})(SendDeskTopUI)


	/**
	*...
	*@author ...
	*/
	//class view.page.Team3V3Balance extends ui.hall.page.gameBalance.Team3V3BalanceUI
	var Team3V3Balance=(function(_super){
		function Team3V3Balance(){
			this._shareObj={};
			this.teamResultList=null;
			this.teamFirstUser=null;
			this.zanList=[];
			this.teamInfo=[];
			this.s1=0;
			Team3V3Balance.__super.call(this);
			this.resList=[
			{url:"res/atlas/balance.atlas",type:"atlas"}]
		}

		__class(Team3V3Balance,'view.page.Team3V3Balance',_super);
		var __proto=Team3V3Balance.prototype;
		__proto.onOpen=function(){
			view.UIBase0.prototype.onOpen.call(this);
			debugger;
			this.zanList=[];
			this.teamInfo=[];
			NotifyCenter.I.on('onNotify',this,this.onGotNotify);
			Team3V3Balance._dataCmd=NotifyCenter.I.curGameEndCmd;
			this.teamResultList=Team3V3Balance._dataCmd.teamResultList || [];
			this.teamFirstUser=Team3V3Balance._dataCmd.teamFirstUser || [];
			this.initView();
			this.addToParent(this);
		}

		__proto.initView=function(){
			var i=0,len=0;
			len=this.teamResultList[0] ? this.teamResultList[0].length:0;
			for (i=0;i < len;i++){
				this.teamInfo.push(this.teamResultList[0][i]);
			}
			len=this.teamResultList[1] ? this.teamResultList[1].length:0;
			for (i=0;i < len;i++){
				this.teamInfo.push(this.teamResultList[1][i]);
			}
			if(FreeMatch.myTeamId==1){
				this.myList1.array=this.teamResultList[0] || [];
				this.myList2.array=this.teamResultList[1] || [];
				}else{
				this.myList1.array=this.teamResultList[1] || [];
				this.myList2.array=this.teamResultList[0] || [];
			}
			this.f1.value="0";
			this.f2.value="0";
			var o1=this.teamFirstUser[0];
			var o2=this.teamFirstUser[1];
			this.s1=this.teamFirstUser[0].id;
			if (o1&&o2){
				if(o1.teamId==FreeMatch.myTeamId){
					this["f"+1].value=o1.teamScore;
					this["f"+2].value=o2.teamScore;
				}
				else{
					this["f"+1].value=o2.teamScore;
					this["f"+2].value=o1.teamScore;
				}
			}
			this.addVal.text="+"+(Team3V3Balance._dataCmd.diamond | 0);
			this.zhouTxt.text=Team3V3Balance._dataCmd.hasGetDiamond+"/"+ConfigData.gameCfg.weekLimits[1];
			this.zhouTxt.visible=true;
			this.rStat.skin=Team3V3Balance._dataCmd.rank==1 ? "balance/sl.png":"balance/sb.png";
			if(Team3V3Balance._dataCmd.rank==1){
				this.slt.visible=true;
				}else{
				this.slt.visible=false;
			}
		}

		__proto.onCreated=function(){
			view.UIBase0.prototype.onCreated.call(this);
			this.goBack.on("click",this,this.onGoBack);
			this.gShare.on("click",this,this.onShareMc);
			this.myList1.renderHandler=new Handler(this,this.onList1Render);
			this.myList2.renderHandler=new Handler(this,this.onList2Render);
		}

		__proto.onList1Render=function(item,index){
			if (!item || !item.dataSource)return;
			var dt=item.dataSource;
			item.mvp.visible=(dt.id==this.s1);
			item.itemBg.skin="balance/itemBg.png";
			item.zanBtn.skin="balance/btn_zan_l1.png";
			item.sNum.text=dt.score+"";
			item.kNum.text=dt.kills+"";
			item.dNum.text=dt.deaths+"";
			item.uHead.skin=SnowUtils.roleIconUrl(dt.avatar);
			item.uName.text=Team3V3Balance.getNkName(dt.name);
			if (dt.id==Team3V3Balance._dataCmd.userid){
				item.zanBtn.disabled=true;
			}
			else{
				item.zanBtn.disabled=true;
				item.zanBtn.on("click",this,this.onZanClick,[dt,item.zanBtn,"balance/btn_zan_l2.png"]);
				item.zanBtn.disabled=false;
				if (this.zanList.indexOf(dt.id)!=-1){
					item.zanBtn.disabled=true;
					item.zanBtn.offAll("click");
				}
			}
			for (var i=0;i < 5;i++){
				var sImg=item.skillList.getCell(i);
				if(!dt.passiveSkills[i]){
					sImg.skin="balance/empty.png";
					}else{
					sImg.skin="passiveSkills/"+ConfigData.skillCfg[dt.passiveSkills[i]*1000+1].btnIcon+".png";
				}
			}
		}

		__proto.onList2Render=function(item,index){
			if (!item || !item.dataSource)return;
			var dt=item.dataSource;
			item.mvp.visible=(dt.id==this.s1);
			item.itemBg.skin="balance/itemBg_2.png";
			item.zanBtn.skin="balance/btn_zan_r1.png";
			item.sNum.text=dt.score+"";
			item.kNum.text=dt.kills+"";
			item.dNum.text=dt.deaths+"";
			item.uHead.skin=SnowUtils.roleIconUrl(dt.avatar);
			item.uName.text=Team3V3Balance.getNkName(dt.name);
			if (dt.id==Team3V3Balance._dataCmd.userid){
				item.zanBtn.disabled=true;
			}
			else{
				item.zanBtn.disabled=true;
				item.zanBtn.on("click",this,this.onZanClick,[dt,item.zanBtn,"balance/btn_zan_r2.png"]);
				item.zanBtn.disabled=false;
				if (this.zanList.indexOf(dt.id)!=-1){
					item.zanBtn.disabled=true;
					item.zanBtn.offAll("click");
				}
			}
			for (var i=0;i < 5;i++){
				var sImg=item.skillList.getCell(i);
				if(!dt.passiveSkills[i]){
					sImg.skin="balance/empty.png";
					}else{
					sImg.skin="passiveSkills/"+ConfigData.skillCfg[dt.passiveSkills[i]*1000+1].btnIcon+".png";
				}
			}
		}

		/**
		*按钮点击
		*@param sData
		*@param btn
		*@param type
		*/
		__proto.onZanClick=function(sData,btn,btnSkin){
			this.zanList.push(sData.id);
			btn.skin=btnSkin;
			btn.mouseEnabled=false;
			btn.offAll("click");
			TipsManager.instance.showText("<span style='color:#ffffff;font-size:30px'>I liked</span><span style='color:#fdff39;font-size:30px;decode:true'> "+encodeURIComponent(sData.name)+"</span><span style='color:#ffffff;font-size:30px'>!</span>",null,0,null,3);
			if(sData.id > 0){
				var cmd=new RequestLikeUser();
				cmd.beLikeUserId=sData.id;
				HallApp.notify(cmd);
			}
		}

		__proto.onGotNotify=function(data){
			if (data.method==30049){
				TipsManager.instance.showText("<span style='color:#fdff39;font-size:30px;decode:true'>"+encodeURIComponent(this.getUserInfoByUid(data.likeUserId))+" </span><span style='color:#ffffff;font-size:30px'>liked you！</span>",null,0,null,3);
			}else if (data.method==30062){}
		}

		//ShowOtherUserData.onShow(true);
		__proto.getUserInfoByUid=function(likeUserId){
			if(this.teamInfo){
				for (var i=0,length=this.teamInfo.length;i < length;i++)
				if (this.teamInfo[i].id==likeUserId)
					return this.teamInfo[i].name;
				return "";
			}
			else
			return "";
		}

		__proto.onClose=function(){
			NotifyCenter.I.off('onNotify',this,this.onGotNotify);
			view.UIBase0.prototype.onClose.call(this);
		}

		__proto.createBj=function(){}
		/**
		*返回大厅
		*/
		__proto.onGoBack=function(){
			StatManager.I.v2_clickmenu("jiesuan3v3");
			enumRoomType.isAgain=false;
			this.readyToLogin();
		}

		__proto.readyToLogin=function(){
			GameSocket.I.close();
			UIMgr.closeUI(Team3V3Balance);
			Player.I.exit();
		}

		/**
		*分享名次
		*/
		__proto.onShareMc=function(){
			SnowUtils.shareInitiative("playerpk",{shareType:"playerpk",fromType:"playerpk"});
			StatManager.I.v2_share("playerpk");
		}

		__getset(1,Team3V3Balance,'I',function(){
			if (!Team3V3Balance._ins)Team3V3Balance._ins=UIMgr.getUI(Team3V3Balance);
			return Team3V3Balance._ins;
		},ui.hall.page.gameBalance.Team3V3BalanceUI._$SET_I);

		Team3V3Balance.onShow=function(){
			UIMgr.openUI(Team3V3Balance,"layer_pop4");
		}

		Team3V3Balance.getNkName=function(NkName,length,isAll){
			(length===void 0)&& (length=12);
			(isAll===void 0)&& (isAll=false);
			if (!isAll){
				var name="";
				try{
					name=decodeURIComponent(NkName);
				}
				catch(error){
					name=NkName;
				}
				return SnowUtils.cutString(name,length);
				}else{
				return "显示组合名字";
			}
		}

		Team3V3Balance._ins=null
		Team3V3Balance._dataCmd=null
		return Team3V3Balance;
	})(Team3V3BalanceUI)


	/**
	*...
	*@author ...
	*/
	//class view.page.ShouChongView extends ui.hall.page.roomList.ShouChongViewUI
	var ShouChongView=(function(_super){
		function ShouChongView(){
			ShouChongView.__super.call(this);
			this.resList=[
			{url:"res/atlas/shouchong.atlas",type:"atlas" },]
		}

		__class(ShouChongView,'view.page.ShouChongView',_super);
		var __proto=ShouChongView.prototype;
		__proto.createBj=function(){}
		__proto.onCreated=function(){
			view.UIBase0.prototype.onCreated.call(this);
		}

		__proto.onShouChong=function(){
			var _$this=this;
			this.czBtn.mouseEnabled=false;
			Laya.timer.once(5000,this,function(){
				_$this.czBtn.mouseEnabled=true;
			});
			RoleCenter.I.buyType="v2_payment_first_charge";
			RoleCenter.I.buyNum=RoleCenter.scType *10;
			HallApp.pay(RoleCenter.scType *10);
		}

		__proto.onTweenClose=function(){
			EffectUtils.closeDialog(this.myBox,new Handler(this,this.onSelfClose));
		}

		__proto.onSelfClose=function(){
			UIMgr.closeUI(ShouChongView);
		}

		__proto.onOpen=function(){
			view.UIBase0.prototype.onOpen.call(this);
			this.czBtn.mouseEnabled=true;
			this.closeBtn.on("click",this,this.onTweenClose);
			this.czBtn.on("click",this,this.onShouChong);
			this.bg.skin="shouchong/cz"+RoleCenter.scType+".png";
			EffectUtils.openDialog(this.myBox);
			this.addToParent(this);
		}

		__proto.onClose=function(){
			view.UIBase0.prototype.onClose.call(this);
			this.closeBtn.off("click",this,this.onTweenClose);
			this.czBtn.off("click",this,this.onShouChong);
		}

		__getset(1,ShouChongView,'I',function(){
			if (!ShouChongView._ins)ShouChongView._ins=UIMgr.getUI(ShouChongView);
			return ShouChongView._ins;
		},ui.hall.page.roomList.ShouChongViewUI._$SET_I);

		ShouChongView.onShow=function(){
			UIMgr.openUI(ShouChongView,"layer_pop3");
		}

		ShouChongView._ins=null
		return ShouChongView;
	})(ShouChongViewUI)


	/**
	*个人Pk页面
	*@author xiaosong
	*/
	//class view.page.ShareSingleFView extends ui.hall.page.shareSingle.ShareSingleFUI
	var ShareSingleFView=(function(_super){
		function ShareSingleFView(){
			this._userData={};
			ShareSingleFView.__super.call(this);
			this.resList=[
			{url:"res/atlas/newRank.atlas",type:"atlas" }];
		}

		__class(ShareSingleFView,'view.page.ShareSingleFView',_super);
		var __proto=ShareSingleFView.prototype;
		__proto.onCreated=function(){
			view.UIBase0.prototype.onCreated.call(this);
			console.log("======1======onRenderPersonPk===================");
			this.btn_challenge.on("click",this,this.onChallengeBtnClick);
			NotifyCenter.I.on("onRenderPersonPk",this,this.onRenderPersonPk);
		}

		__proto.onRenderPersonPk=function(){
			console.log("=====2=======onRenderPersonPk===================");
			NotifyCenter.I.on('onNotify',this,this.onGotNotify);
			var userData=new RequestUserData();
			userData.uid=RoleCenter.I.userId;
			HallApp.notify(userData);
			this.ownerName.text=HallUtil.getNkName(RoleCenter.I.myBasicData)
			this.ownHead.skin=HallUtil.getHeadIcon(RoleCenter.I.myBasicData);
			this.poly2.visible=false;
			this.otherHead.skin="";
			this.otherName.text="";
		}

		__proto.onChallengeBtnClick=function(){
			if(FreeMatch._i){
				var cmd=new CMsgLeaveCustomRoom();
				GameSocket.sendClientMsg(cmd);
				FreeMatch.I.onSmsgBeKicked(null);
			}
			if(NotifyCenter.I.isNewUser()){
				NotifyCenter.I.onStartGuide();
				}else{
				MenuList.onShowMe();
			}
		}

		__proto.onOpen=function(){
			view.UIBase0.prototype.onOpen.call(this);
			this.addToParent(this);
			CrazySnowball.removePreBox();
		}

		__proto.onGotNotify=function(data){
			console.log("----------------onGotNotify----------------------data.method:"+data.method);
			if(data.method==30062){
				console.log("-----------------------------own---data--------------------");
				ShareSingleFView._prevHistoryArr=(data).userData.fjson.prevHistory;
				this.onBattleDataRender(1);
				NotifyCenter.I.off('onNotify',this,this.onGotNotify);
				var wxuid=SnowUtils.getQueryString("wxuid");
				console.log("-------------1----------------wxuid:"+wxuid+"---RoleCenter.I.userId:"+RoleCenter.I.userId);
				if(wxuid && wxuid !=RoleCenter.I.userId){
					NotifyCenter.I.on('onNotify',this,this.onGotNotifyOther);
					var userData=new RequestUserData();
					userData.uid=wxuid;
					HallApp.notify(userData);
					NotifyCenter.I.on('searchByUIdResult',this,this.onSearchDataOther,[wxuid]);
					HallApp.searchByUId(wxuid);
				}
			}
		}

		__proto.onSearchDataOther=function(userId,value){
			if(userId==value.targetId){
				this.otherName.text=SnowUtils.cutString(decodeURIComponent(value.userBasicData.NkName),10);
				this.otherHead.skin=HallUtil.getHeadIcon(value.userBasicData);
			}
		}

		__proto.onGotNotifyOther=function(data){
			if(data.method==30062){
				var wxuid=SnowUtils.getQueryString("wxuid");
				console.log("---------------2--------------wxuid:"+wxuid);
				this.poly2.visible=true;
				NotifyCenter.I.off('onNotify',this,this.onGotNotifyOther);
				ShareSingleFView._prevHistoryArr=(data).userData.fjson.prevHistory;
				this.onBattleDataRender(2);
			}
		}

		/**
		*初始化渲染数据
		*@param type
		*@param data
		*/
		__proto.onBattleDataRender=function(type){
			(type===void 0)&& (type=1);
			var battleMaxDef,battleMinDef,battleOrigin;
			battleMaxDef=ConfigData.gameCfg.battleInfoMaxNum;
			battleMinDef=ConfigData.gameCfg.battleInfoMinNum;
			battleOrigin=ConfigData.gameCfg.battleMinRatio;
			var len=ShareSingleFView._prevHistoryArr.length;
			var score=0;
			var damage=0;
			var kills=0;
			var deaths=0;
			var hit=0;
			var xuli=0;
			var arr=[];
			var i=0;
			var nc=0;
			for (i=0;i < len;i++){
				if (isNaN(ShareSingleFView._prevHistoryArr[i].deaths)){
					nc++;
					continue ;
				}
				arr.push(ShareSingleFView._prevHistoryArr[i].finalScore);
				damage+=ShareSingleFView._prevHistoryArr[i].totalDamge;
				kills+=ShareSingleFView._prevHistoryArr[i].kills;
				deaths+=ShareSingleFView._prevHistoryArr[i].deaths;
				(ShareSingleFView._prevHistoryArr[i].normalFireTimes !=0)&& (hit+=ShareSingleFView._prevHistoryArr[i].normalHitTimes / ShareSingleFView._prevHistoryArr[i].normalFireTimes);
				xuli+=ShareSingleFView._prevHistoryArr[i].totalDamgeXuli;
			}
			if (nc==len){
				this['poly'+type].alpha=0;
				return;
				}else{
				len-=nc;
			}
			if (len > 2){
				var temp=0;
				for (i=0;i < len;i++){
					for (var j=0;j < len-i-1;j++){
						if (arr[j] > arr[j+1]){
							temp=arr[j];
							arr[j]=arr[j+1];
							arr[j+1]=temp;
						}
					}
				}
				for (i=1;i < len-1;i++){
					score+=arr[i];
				}
				score=score /(len-2);
			}
			else{
				for (i=0;i < len;i++){
					score+=arr[i];
				}
				score=score / len;
			};
			var jifenValue=(score-battleMinDef[0])/ (battleMaxDef[0]-battleMinDef[0]);
			var shanghaiValue=(damage / len-battleMinDef[1])/ (battleMaxDef[1]-battleMinDef[1]);
			var jishaValue=(kills / len-battleMinDef[2])/ (battleMaxDef[2]-battleMinDef[2]);
			var survialValue=(deaths / len-battleMinDef[3])/ (battleMaxDef[3]-battleMinDef[3]);
			var hitValue=(hit / len-battleMinDef[4])/ (battleMaxDef[4]-battleMinDef[4]);
			var xuliValue=(xuli / len-battleMinDef[5])/ (battleMaxDef[5]-battleMinDef[5]);
			this['poly'+type].alpha=0.6;
			var g=this['poly'+type]._graphics;
			var _one=g._one;
			var radius=this.img_shuxing.height / 2-4;
			var centerPo=new Point(this.img_shuxing.width / 2,radius);
			var pArr=[jifenValue,shanghaiValue,jishaValue,survialValue,hitValue,xuliValue];
			for (i=0;i < 6;i++){
				pArr[i]=(pArr[i] < battleOrigin[i])? battleOrigin[i]:pArr[i];
				if (pArr[i] > 1)
					pArr[i]=1;
			}
			SnowUtils.getDuoBianXing(this['poly'+type],radius,centerPo,pArr,_one[3],_one[4],_one[5]);
		}

		__proto.onClose=function(){
			CrazySnowball.removePreBox();
			NotifyCenter.I.off('onNotify',this,this.onGotNotifyOther);
			NotifyCenter.I.off('onNotify',this,this.onGotNotify);
			view.UIBase0.prototype.onClose.call(this);
		}

		ShareSingleFView.onShowMe=function(data){
			UIMgr.openUI(ShareSingleFView);
		}

		ShareSingleFView._prevHistoryArr=null
		return ShareSingleFView;
	})(ShareSingleFUI)


	/**
	*...
	*@author ...
	*/
	//class view.page.ShowCzView extends ui.hall.page.roomList.ShowCzViewUI
	var ShowCzView=(function(_super){
		function ShowCzView(){
			ShowCzView.__super.call(this);
			this.resList=[
			{url:"res/atlas/common.atlas",type:"atlas"},
			{url:"res/atlas/shop.atlas",type:"atlas"},
			{url:"res/atlas/newhall.atlas",type:"atlas"}]
		}

		__class(ShowCzView,'view.page.ShowCzView',_super);
		var __proto=ShowCzView.prototype;
		__proto.onCreated=function(){
			view.UIBase0.prototype.onCreated.call(this);
			this.closeBtn.on("click",this,this.onTweenClose);
			this.closeBtn2.on("click",this,this.onTweenClose);
			this.myList.hScrollBarSkin="";
		}

		__proto.onOpen=function(){
			view.UIBase0.prototype.onOpen.call(this);
			this.myList.array=this.getRechargeArr();
			EffectUtils.openDialog(this.myBox);
			this.addToParent(this);
		}

		__proto.createBj=function(){}
		__proto.onClose=function(){
			view.UIBase0.prototype.onClose.call(this);
		}

		__proto.getRechargeArr=function(){
			var allCharge=[];
			var obj=ConfigData.reCharge;
			for (var key in obj){
				allCharge.push(obj[key]);
			}
			return allCharge;
		}

		__proto.onTweenClose=function(){
			EffectUtils.closeDialog(this.myBox,Handler.create(this,this.onSelfClose))
		}

		__proto.onSelfClose=function(){
			UIMgr.closeUI(ShowCzView);
		}

		__getset(1,ShowCzView,'I',function(){
			if (!ShowCzView._ins)ShowCzView._ins=UIMgr.getUI(ShowCzView);
			return ShowCzView._ins;
		},ui.hall.page.roomList.ShowCzViewUI._$SET_I);

		ShowCzView.onShow=function(){
			UIMgr.openUI(ShowCzView,"layer_pop5");
		}

		ShowCzView._ins=null
		return ShowCzView;
	})(ShowCzViewUI)


	//class view.page.ShareTips extends ui.hall.page.ShareTipsUI
	var ShareTips=(function(_super){
		function ShareTips(){
			ShareTips.__super.call(this);
			this.resList=[
			{url:"sharetips/tips1.jpg",type:"image" },
			{url:"gonggao/wx_1.jpg",type:"image" },
			{url:"sharetips/tips3.jpg",type:"image" }];
		}

		__class(ShareTips,'view.page.ShareTips',_super);
		var __proto=ShareTips.prototype;
		__proto.onCreated=function(){
			view.UIBase0.prototype.onCreated.call(this);
			this.imgBg.on("click",this,this.onBtnClose);
		}

		/**
		*关闭界面
		*
		*/
		__proto.onBtnClose=function(){
			UIMgr.closeUI(ShareTips);
		}

		__proto.onOpen=function(){
			view.UIBase0.prototype.onOpen.call(this);
			var dtObj=ConfigData.normalConfig.shareAward["1"];
			this.addToParent(this);
			this.sbg.skin=ShareTips.imgSrc;
			if (ShareTips.imgSrc=="sharetips/tips1.jpg"){
				var td=new Date();
				var day=td.getDay();
				var id=NaN;
				if(day==2 || day==3){
					id=dtObj.rewardID[0];
					}else if(day==4 || day==5){
					id=dtObj.rewardID[1];
					}else if(day==6 || day==0){
					id=dtObj.rewardID[2];
					}else{
					id=dtObj.rewardID[3];
				};
				var itemData=ConfigData.itemData [id];
				if (!itemData){
					Log_Test.error("wu pin bu cun zai");
					this.onBtnClose();
					return;
				}
				this.hero.skin=SnowUtils.itemHalfUrl(itemData.communalId[0]);
				this.hero.visible=true;
			}
			else
			this.hero.visible=false;
		}

		__proto.onClose=function(){
			view.UIBase0.prototype.onClose.call(this);
			SnowUtils.shareBall("other",{});
		}

		ShareTips.onShowMe=function(str){
			(str===void 0)&& (str="sharetips/tips1.jpg");
			ShareTips.imgSrc=str;
			UIMgr.openUI(ShareTips,"layer_tips");
		}

		ShareTips.imgSrc=null
		return ShareTips;
	})(ShareTipsUI)


	/**
	*下午3:05:43
	*2017-5-25
	*loading条
	*@zcc
	*/
	//class view.page.Loading extends ui.load.LoadingUI
	var Loading=(function(_super){
		function Loading(){
			this.isLogin=false;
			this.isloadedAssets=false;
			this.isShowLoad=false;
			this.closeLogin=false;
			this._LoadingWait=null;
			this.resouArray=["0.jpg"];
			this._isChuliRes=false;
			this._yuchuliTxt=null;
			this._yuchuliTxtStr="0123456789排名名字积分击败时间点击左下摇杆可进行移动拾取雪花可获取积分击中玩家可获取更多积分使用技能可造成更高伤害积分决定名次，名次越高奖励越高长按攻击或技能按键可进入蓄力模式每次攻击都会消耗积分，一定要瞄准哦！升级会变胖哦！移动速度和攻击速度会下降点击右下攻击按钮可进行攻击开启宝箱获得道具：幽灵你获得了";
			this._yuchuliImg=null;
			this._yuchuliImgUrlArr=[
			'res/newbullet/newbullet.png',
			'res/atlas/neweffect.png',
			'res/atlas/neweffect1~.png',
			'res/atlas/skillCd.png',
			'res/rocker/control_base.png',
			'res/rocker/control_knob.png',
			'res/atlas/newguide.png',
			'newguide/renqi_font.png',
			'map/map03min.png',
			'res/role/bstx.png',
			'res/obj/SnowGroup.png',
			'res/skillIcon/bottom.png',
			'res/skillIcon/s1.png',
			'res/skillIcon/s2.png',
			'res/skillIcon/s4.png',
			'res/skillIcon/s5.png',
			'res/skillIcon/s120001.png',
			'res/skillIcon/s140001.png',
			'res/skillIcon/s150001.png',
			'res/skillIcon/s210001.png',
			'res/skillIcon/210001.png',
			'res/skillIcon/s170001.png'];
			this.strObj={
				"1":"长按攻击可蓄力",
				"2":"升级会变大！移速和攻速会下降",
				"3":"团队模式：团队积分决定团队名次",
				"4":"积分决定名次，名次越高奖励越高",
				"5":"团队积分决定名次，名次越高奖励越高",
				"6":"拾取雪花可增加积分",
				"7":"攻击会消耗积分（雪量）",
				"8":"使用技能可造成更高伤害",
				"9":"击败熊得陨石雨技能"
			};
			this.tipsArr=[];
			this.sec=null;
			this.index=0;
			this._beishuNum=2;
			this._isShow=false;
			this._timeNum=10;
			this._isInit=false;
			this._loadIndex=0;
			Loading.__super.call(this);
			this.resList=[{url:"common/bg.jpg",type:"image" }];
			this.resList.push({url:"res/atlas/ani/snow.atlas",type:"atlas"});
			this.resList.push({url:"res/atlas/login2.atlas",type:"atlas"});
			if(GameSocket.roomInfo && GameSocket.roomInfo.type==enumRoomType.ROOMTYPE_LADDER){
				this.resList.push({url:"res/atlas/login.atlas",type:"atlas"});
			};
			var tipsCfg=ConfigData.i18n[1].data;
			if (!tipsCfg)return;
			for (var i=5;i <=13;i++){
				if (SnowUtils.chkIsFB()){
					this.tipsArr.push(tipsCfg[i].us);
					}else{
					this.tipsArr.push(tipsCfg[i].cn);
				}
			}
			this.sec=SnowUtils.chkIsFB()?"s":"秒";
		}

		__class(Loading,'view.page.Loading',_super);
		var __proto=Loading.prototype;
		__proto.uiIsView=function(){
			return this.isShowLoad;
		}

		__proto.onCreated=function(){
			view.UIBase0.prototype.onCreated.call(this);
		}

		__proto.onOpen=function(){
			var _$this=this;
			view.UIBase0.prototype.onOpen.call(this);
			this.ani1.play();
			Laya.timer.loop(1000,this,this.messageChange);
			this.ttLayer.visible=false;
			this.imgBg.visible=true;
			if(Loading.bIsTeach){
				this._yuchuliTxt=new Text();
				this._yuchuliTxt.text=this._yuchuliTxtStr;
				this.addChild(this._yuchuliTxt);
				this._yuchuliTxt.pos(-3000,-3000);
				this.precent.text="";
				this.txtTeach.visible=true;
				this.boxShow.visible=false;
				var url="MessageBox/loginBG1.jpg";
				this.imgBg.skin=url;
				this.precent.y=476;
				this.precent.visible=false;
				this.precent.color="#29a618";
				this.imglogo.visible=true;
				SnowLoad.I.load([{url:url,type:"image"}],Handler.create(this,this.loadComplete,[url]),null,null,0);
				SnowUtils.setDataInLocalStorage(RoleCenter.I.userId+"","1,2,4,5,6,7,8");
				}else{
				this.renyiImg.visible=false;
				this.daoTime.visible=false;
				this.precent.bottom=74;
				this.precent.visible=true;
				this.message.visible=false;
				this.txtTeach.visible=false;
				this.boxShow.visible=true;
				this.daoTime.visible=true;
				this.imglogo.visible=false;
				this.imgBg.skin="common/bg.jpg";
				this.precent.changeText("匹配中.")
				this.precent.align="left";
				Loading.ranStr=this.tipsArr[Math.floor(Math.random()*8)];
				var resUrl="MessageBox/loginBG1.jpg";
				Laya.timer.frameLoop(20,this,this.piPei);
				this._timeNum=5;
				this.precent.centerX=-65
				this.daoTime.text=Loading.ranStr+"(5"+this.sec+")";
				this.prog.visible=true;
				this.daoTime.visible=false;
				this.prog.visible=false;
				this.prog.value=0;
				this.jdtBox.visible=true;
				if (GameSocket.roomInfo && GameSocket.roomInfo.type==enumRoomType.ROOMTYPE_LADDER){
					this.lbg.skin="login/ld.png";
					this.rbg.skin="login/hd.png";
					this.VsImg.skin="login/vs.png"
					this.ttLayer.visible=true;
					this.leftBox.left=-this.leftBox.width;
					this.rightBox.right=-this.rightBox.width;
					this.VsImg.alpha=0;
					this.VsImg.scale(2,2);
					Tween.to(this.VsImg,{scaleX:1,scaleY:1,alpha:1},500,Ease.quadIn);
					Tween.to(this.leftBox,{left:0},500,Ease.quadIn);
					Tween.to(this.rightBox,{right:0},500,Ease.quadIn,Handler.create(this,function(){
						SnowLoad.I.load([{url:resUrl,type:"image"}],Handler.create(this,function(){
							_$this.imgBg.skin=resUrl;
							_$this.daoTime.visible=true;
							_$this.prog.visible=true;
							Laya.timer.loop(1000,this,_$this.onTimeLoop2);
							_$this._LoadingWait=new LoadingWait(this,20000,_$this._onPrecent,_$this.onEnd,2500);
							_$this.precent.color="#ffffff";
						}),null,null,0)
					}));
					this.msg.text=Loading.ranStr;
					this.imgBg.visible=false;
					this.jdtBox.visible=false;
					var i=0;
					var dt={};
					var arr;
					var itemData;
					var roleCfg;
					var skillCfg;
					for (i=0;i < 3;i++){
						dt=TeamView.t1Arr[i];
						if(!dt){
							this["l"+i].skin="";
							this["ls"+i].skin="";
							this["nl"+i].skin="";
							continue ;
						}
						this["l"+i].skin=this.headByAvtor(dt.avtor);
						this["nl"+i].skin=this.headByAvtor(dt.avtor,"_nl");
						arr=SnowUtils.deComposeAvatar(dt.avtor||1);
						if(!arr || arr.length <=0){
							}else{
							itemData=ConfigData.itemData[arr[0]];
							if (!itemData)continue ;
							roleCfg=ConfigData.roleData[itemData.communalId[0]];
							if (!roleCfg)continue ;
							skillCfg=roleCfg.defaultSkill;
							if (!skillCfg)continue ;
							this["ls"+i].skin="res/skillIcon/"+ConfigData.skillCfg[skillCfg[1]].btnIcon+".png";
						}
					}
					for (i=0;i < 3;i++){
						dt=TeamView.t2Arr[i];
						if(!dt){
							this["r"+i].skin="";
							this["rs"+i].skin="";
							this["nr"+i].skin="";
							continue ;
						}
						this["r"+i].skin=this.headByAvtor(dt.avtor);
						this["nr"+i].skin=this.headByAvtor(dt.avtor,"_nr");
						arr=SnowUtils.deComposeAvatar(dt.avtor||1);
						if(!arr || arr.length <=0){
							}else{
							itemData=ConfigData.itemData[arr[0]];
							if (!itemData)continue ;
							roleCfg=ConfigData.roleData[itemData.communalId[0]];
							if (!roleCfg)continue ;
							skillCfg=roleCfg.defaultSkill;
							if (!skillCfg)continue ;
							this["rs"+i].skin="res/skillIcon/"+ConfigData.skillCfg[skillCfg[1]].btnIcon+".png";
						}
					}
					}else{
					SnowLoad.I.load([{url:resUrl,type:"image"}],Handler.create(this,function(){
						_$this.imgBg.skin=resUrl;
						_$this.daoTime.visible=true;
						_$this.prog.visible=true;
						Laya.timer.loop(1000,this,_$this.onTimeLoop2);
						_$this._LoadingWait=new LoadingWait(this,20000,_$this._onPrecent,_$this.onEnd);
						_$this.precent.color="#ffffff";
					}),null,null,0)
				}
			}
			this.addToParent(this);
		}

		__proto.headByAvtor=function(Avtor,str){
			(str===void 0)&& (str="");
			var arr=SnowUtils.deComposeAvatar(Avtor||1);
			if (!arr || arr.length <=0)return "login/1036"+str+".png";
			return "login/"+arr[0]+str+".png";
		}

		__proto.listRender=function(item,index){
			if (!item || !item.dataSource)return;
			var dt=item.dataSource;
			item.Avtor.skin=SnowUtils.roleHalfUrlNew2(dt.avtor);
			var arr=SnowUtils.deComposeAvatar(dt.avtor||1);
			if(!arr || arr.length <=0){
				}else{
				item.uName.skin=SnowUtils.itemHalfUrlNew2(arr[0]+"_n");
			}
			if(dt.team==2){
				item.teamBg.skin="freematch/bg3V3_2.png";
				}else{
				item.teamBg.skin="freematch/bg3V3.png";
			}
		}

		__proto.piPei=function(){
			var length=6;
			if (this.precent.text.indexOf("匹配")==-1)
				length=8;
			if (this.precent.text.length < length)
				this.precent.changeText(this.precent.text+".");
			else
			this.precent.changeText(this.precent.text.substr(0,length-2))
		}

		/**
		*根据比赛模式返回提示指引
		*/
		__proto.getLoginBg=function(){
			var obj=SnowUtils.getDataInLocalStorage(RoleCenter.I.userId+"");
			var lArr;
			var flag=false;
			var type;
			var str="";
			var msStr="";
			if (!obj)obj="";
			lArr=obj.split(",");
			var roomType=-1;
			if (GameSocket.roomInfo)
				roomType=GameSocket.roomInfo.type;
			if (lArr.indexOf('1')!=-1){
				lArr.splice(0,1);
				str="长按攻击可蓄力";
			}
			else if (lArr.indexOf('2')!=-1){
				lArr.splice(0,1);
				str="升级会变大！移速和攻速会下降";
			}
			else if (roomType==enumRoomType.ROOMTYPE_FREE){
				type=enumRoomType.ROOMTYPE_FREE+"";
				flag=!SnowUtils.getDataInLocalStorage(RoleCenter.I.userId+type);
				if (flag && LocalStorage.support){
					str="积分决定名次，名次越高奖励越高";
					SnowUtils.setDataInLocalStorage(RoleCenter.I.userId+type,true);
				}
				else
				msStr="3_2";
			}
			else if(roomType==enumRoomType.ROOMTYPE_GEM){
				type=enumRoomType.ROOMTYPE_GEM+"";
				flag=!SnowUtils.getDataInLocalStorage(RoleCenter.I.userId+type);
				if (flag && LocalStorage.support){
					str="团队模式：冰晶数量决定团队名次";
					SnowUtils.setDataInLocalStorage(RoleCenter.I.userId+type,true);
				}
				else
				msStr="3_1";
			}
			else if (roomType==enumRoomType.ROOMTYPE_TEAM2V2 || roomType==enumRoomType.ROOMTYPE_TEAM5V5){
				type=enumRoomType.ROOMTYPE_TEAM2V2+"";
				flag=!SnowUtils.getDataInLocalStorage(RoleCenter.I.userId+type);
				if (flag && LocalStorage.support){
					str="积分决定名次，名次越高奖励越高";
					SnowUtils.setDataInLocalStorage(RoleCenter.I.userId+type,true);
				}
				else
				msStr="3_3";
			}
			if(!str)
				str=this.getNext(lArr,msStr);
			SnowUtils.setDataInLocalStorage(RoleCenter.I.userId+"",lArr.toString());
			return str;
		}

		__proto.getNext=function(lArr,but){
			var next=lArr[0];
			next && lArr.splice(0,1);
			return next ? this.strObj[next] :this.strObj[this.getLoginBgBut(but)];
		}

		__proto.getLoginBgBut=function(but){
			(but===void 0)&& (but="");
			var resArr=['1','2','4','5','6','7','8'];
			if (but)
				resArr.push(but);
			return resArr[0 | resArr.length *Math.random()];
		}

		__proto.messageChange=function(){
			if(this.index <=0){
				this.txtTeach.text="数据准备中";
				}else{
				this.index--;
				this.txtTeach.text=this.index+"秒后立即开始";
			}
			if(this.index%3==0)
				this.message.text=this.randomMsg();
		}

		__proto.createBj=function(){}
		__proto.loadComplete=function(url){
			(url===void 0)&& (url="");
			StatManager.I.addTeach(StatManager.I.getStatData(StatID.s2_2_1[0]));
			this.txtTeach.visible=false
			if(Browser.window.myIndexInfo){
				this.txtTeach.text=Browser.window.myIndexInfo;
				}else{
				this.index=Browser.window.myTimeIndex;
				this.index--;
				this.txtTeach.text=this.index+"秒后立即开始";
			}
			HallApp.removeSplash();
			this.showMainImg();
		}

		__proto.showMainImg=function(){
			Laya.timer.loop(100,this,this.goTeachGame);
		}

		__proto.onClose=function(){
			Laya.timer.clear(this,this.piPei);
			this.ani1.stop();
			this._timeNum=0;
			this._isInit=false;
			this.daoTime.visible=false;
			view.page.Loading.I.isShowLoad=false;
			this.imgBg._bitmap.source && this.imgBg._bitmap.source.destroy();
			Loading.bIsTeach=false;
			this.message&&(this.message.text="");
			this.precent&&(this.precent.text="");
			BjView.onHide();
			if (this._LoadingWait){
				this._LoadingWait.del();
				this._LoadingWait=null;
			}
			Laya.timer.clear(this,this.messageChange);
			Laya.timer.clear(this,this.onTimeLoop);
			Laya.timer.clear(this,this.loadImgLoop);
			console.log("--------------loading----onClose----------------------");
			view.UIBase0.prototype.onClose.call(this);
		}

		__proto.onShowMe=function(){
			if(this.isShowLoad)return;
			this.isShowLoad=true;
			UIMgr.openUI(Loading,"layer_loading");
		}

		/**显示进度条-进入战斗，在角色被创建&&地图加载完成后关闭*/
		__proto.showLoad=function(){
			Player.I.on("PLAYERWILLEND",this,this.onEnd);
			if (!GameSocket.isAgainConnect){
				this.onShowMe();
			}
		}

		__proto._onPrecent=function(p){
			if (!GuideMgr.isTeach){
				if (p >=1){
					p=0.99;
				}
			}
			if (Player.curUser && Player.isMapInit && (p >=0.9 || GameSocket.isAgainConnect)){
				SnowUtils.battleMsg.beginUpdate();
				RoleCenter.finalMusic=ConfigData.soundCfg[2];
				SoundManager.playMusic(RoleCenter.finalMusic);
				Log_Test.info("自己被创建、地图加载完成，开始游戏");
				return false;
			}
			return p<1;
		}

		__proto.onEnd=function(){
			this.messageChange && (Laya.timer.clear(this,this.messageChange));
			UIMgr.closeUI(Loading);
			Player.mapLayer&&(Player.mapLayer.visible=true);
		}

		__proto.onEnd2=function(){
			if(GuideMgr.isTeach)
				return;
			this.messageChange && (Laya.timer.clear(this,this.messageChange));
			UIMgr.closeUI(Loading);
			Player.mapLayer&&(Player.mapLayer.visible=true);
		}

		__proto.showAgain=function(){
			Loading.bIsTeach=false;
			this.onShowMe();
		}

		__proto.showNewUserLoad=function(){
			Loading.bIsTeach=true;
			this.onShowMe();
		}

		__proto.randomMsg=function(){
			var len=SnowLang.msgArr.length;
			var str=SnowLang.msgArr[Math.floor(Math.random()*len)];
			return "温馨提示："+str;
		}

		/**背景点击事件**/
		__proto.onImgBgClick=function(){
			if(this._yuchuliTxt){
				this._yuchuliTxt.removeSelf();
				this._yuchuliTxt=null;
			}
			this.ani1.stop();
			StatManager.I.addTeach(StatManager.I.getStatData(StatID.s3_1_1[0]));
			this.daoTime.visible=false;
			Laya.timer.clear(this,this.onTimeLoop);
			if(this._isInit){
				return;
			}
			this._isInit=true;
			this.onEnd();
			this.message && (this.message.visible=true);
			console.log("-----------------teach---------------------");
			if(GuideMgr.isTeach){
				GuideMgrI.instance.init();
				GuideMgrI.instance.event("step_guide",["step_start"]);
				GuideMgr.isTeach=false;
			}
			this.imgBg.off("click",this,this.onImgBgClick);
			Player.mapLayer.visible=true;
			this.renyiImg.visible=false;
			if (CrazySnowball.isembed){
				if(!document.getElementById('splash'))return;;
				var loadingStart=document.getElementById('start');
				loadingStart.style.visibility='hidden';
				console.log("goTeachGame :: loadingStart is removed");
			}
		}

		__proto.onTimeLoop=function(){
			if(this._timeNum <=1){
				this.renyiImg.visible=false;
				this.daoTime.visible=false;
				Laya.timer.clear(this,this.onTimeLoop);
				this.onImgBgClick();
				}else{
				this._timeNum-=1;
				this.daoTime.text=Loading.ranStr+"("+this._timeNum+this.sec+")";
			}
		}

		__proto.onTimeLoop2=function(){
			if(this._timeNum <=1){
				this.daoTime.visible=false;
				this.precent && this.precent.changeText(this.precent.text.replace("匹配","资源加载"));
				this.precent.centerX=-30;
				Laya.timer.clear(this,this.onTimeLoop2);
				}else{
				this._timeNum-=1;
				if (!view.page.Loading.ranStr){
					view.page.Loading.ranStr=this.tipsArr[Math.floor(Math.random()*7)]
				}
				this.daoTime.text=Loading.ranStr+"("+this._timeNum+this.sec+")";
			}
		}

		__proto.goTeachGame=function(){
			console.log("-----------------------Player.curUser:"+Player.curUser+"----------Player.isMapInit:"+Player.isMapInit);
			if (Player.curUser && Player.isMapInit){
				Laya.timer.clear(this,this.goTeachGame);
				if(this._isChuliRes){
					Laya.timer.loop(20,this,this.loadImgLoop);
					}else{
					Laya.timer.clear(this,this.goTeachGame);
					Laya.timer.clear(this,this.loadImgLoop);
					this.onChuLi();
				}
				return true;
			}
			return false;
		}

		/**处理状态**/
		__proto.onChuLi=function(){
			SnowUtils.battleMsg.beginUpdate();
			this.txtTeach.visible=false;
			this.ani1.play();
			Laya.timer.clear(this,this.loadImgLoop);
			this.onImgBgClick();
		}

		/**模拟预使用图片处理**/
		__proto.loadImgLoop=function(){
			if(this._yuchuliImg==null){
				this._yuchuliImg=new Image();
				this.addChild(this._yuchuliImg);
				this._yuchuliImg.pos(-5000,-5000);
				this._yuchuliImg.skin=URL.formatURL(this._yuchuliImgUrlArr.pop());
				}else{
				if(this._yuchuliImgUrlArr && this._yuchuliImgUrlArr.length > 0){
					var textureUrl=URL.formatURL(this._yuchuliImgUrlArr.pop());
					this._yuchuliImg.skin=textureUrl;
					}else{
					this._yuchuliImg.removeSelf();
					this._yuchuliImg=null;
					this.onChuLi();
				}
			}
		}

		/**
		*初始化
		*/
		__proto._init=function(){
			StatManager.I.addTeach(StatManager.I.getStatData(StatID.s2_1_2[0]));
			Player.I.init();
			UIMgr.fightBox.addChild(Player.mapLayer);
			MsgManager.I.start();
		}

		__proto.backHome=function(){
			if(!SnowUtils.bIsShowHelpBtn){
				TipsView.myCallback=Handler.create(this,function(){
					Browser.window.location.reload();
				});
				TipsView.showMe("",SnowUtils.chkIsFB()?"The current network is abnormal. Please try again later.":"当前网络异常，请稍后重试!",TipsView.SHOW_YES,true,false);
				}else{
				MenuList.onShowMe();
				this.onEnd();
			}
		}

		/**准备战斗，初始化player,加载资源*/
		__proto.readyGame=function(){
			this.isLogin=false;
			this._init();
			this._loadAssets();
		}

		/**加载资源--loadView 资源不打包，即时加载图片*/
		__proto._loadAssets=function(){
			StatManager.I.addTeach(StatManager.I.getStatData(StatID.s2_1_3[0]));
			this.isloadedAssets=false;
			var arr=[
			{url:"res/atlas/gaming.atlas",type:"atlas"},
			{url:"res/atlas/passiveSkills.atlas",type:"atlas"},
			{url:"res/atlas/gamingtop.atlas",type:"atlas"},
			{url:"res/newbullet/newbullet.atlas",type:"atlas"},
			{url:"res/atlas/neweffect.atlas",type:"atlas"},
			{url:"res/atlas/skillCd.atlas",type:"atlas"},
			{url:"res/atlas/ani/die.atlas",type:"atlas"},
			{url:"res/skillIcon/s1.png",type:"image"},
			{url:"res/skillIcon/s3.png",type:"image"},
			{url:"res/skillIcon/bottom.png",type:"image"},
			{url:"res/skillIcon/s210001.png",type:"image"},
			{url:"res/skillIcon/210001.png",type:"image"},
			{url:"res/atlas/common.atlas",type:"atlas"}];
			if (RoleCenter.I.bIsNewPlayer){
				arr.push({url:"res/atlas/newguide.atlas",type:"atlas"});
				arr.push({url:"res/rocker/control_base.png",type:"image"});
				arr.push({url:"res/rocker/control_knob.png",type:"image"});
			}
			else{
				arr.push({url:"ani/donghua/jizhong.ani",type:"json"});
			}
			SnowLoad.I.load(arr,Handler.create(this,this.onLoaded));
		}

		__proto.onLoaded=function(type){
			if(this._isChuliRes){
				var tex1=Laya.loader.getRes("gaming/backhome.png");
				tex1&&tex1.active();
				var tex2=Laya.loader.getRes("gamingtop/bear_1.png");
				tex2&&tex2.active();
				var tex3=Laya.loader.getRes("newbullet/300_.png");
				tex3&&tex3.active();
				var tex4=Laya.loader.getRes("neweffect/bao0.png");
				tex4&&tex4.active();
				var tex5=Laya.loader.getRes("skillCd/0.png");
				tex5&&tex5.active();
			}
			if (!type){
				this.backHome();
				return;
			}
			StatManager.I.addTeach(StatManager.I.getStatData(StatID.s2_2_2[0]));
			Log_Test.info("配置、资源加载完成 isloadedAssets = true");
			this.onFreeMode();
			Player.I.onCompleteLoad();
			this.isloadedAssets=true;
		}

		//}
		__proto.getActionNum=function(i,_animeArr){
			if (i >=0 && i < 5)return 0;
			else if (i >=5 && i < _animeArr.length)return 1;
			return-1;
		}

		__proto.onFreeMode=function(){
			if (!this.isReady()){
				Laya.timer.frameLoop(1,this,this.checkPlayInit);
				Laya.timer.frameLoop(1,this,this.checkLoadMap);
				}else{
				this.checkLoadMap();
				this.checkPlayInit();
			}
		}

		__proto.checkLoadMap=function(){
			if (!this.isLogin || !this.isloadedAssets)return;
			Laya.timer.clear(this,this.checkLoadMap);
			Player.I.loadMap(Player._curMapSourceId,Player._curForce);
		}

		__proto.isReady=function(){
			if (!this.isLogin || !Player.isDefaultInit || !Player.isMapInit)return false;
			return true;
		}

		__proto.checkPlayInit=function(){
			if (!this.isReady())return;
			Log_Test.info("登录成功，默认资源加载完成，发送进入房间消息");
			SoundManager.setMusicVolume(0.5);
			Laya.timer.clear(this,this.checkPlayInit);
			if((GameSocket.roomInfo.type==enumRoomType.ROOMTYPE_CUSTOM_FREE || GameSocket.roomInfo.type==enumRoomType.ROOMTYPE_CUSTOM_TEAM)&&(MenuList.inRoomByWhere!=-2)){
				var cmd=new CMsgStartCustomGame();
				GameSocket.sendClientMsg(cmd);
				}else{
				var readStart=MsgTemplate.createWithClass(CMsgReadyStart);
				readStart.userRoomId=parseInt(GameSocket.roomInfo.id);
				readStart.userRoomType=GameSocket.roomInfo.roomType;
				readStart.inviteGameUID=RoleCenter.I.inviteGameUID;
				RoleCenter.I.inviteGameUID=-1;
				readStart.friendGameUID=Loading.friendGameUID;
				SnowUtils.battleMsg.readyStart(readStart);
				NotifyCenter.I.showFriendRank(Handler.create(this,this.friendRankBack),10001,false);
				readStart.release();
			}
			Loading.friendGameUID=-1;
		}

		__proto.friendRankBack=function(arr){
			var dt;
			for (var i=0,sz=arr.length;i < sz;i++){
				dt=arr [i];
				if (dt.userId==RoleCenter.I.userId)
					break ;
			}
			arr.splice(i,1);
			NotifyCenter.I.SetData("myFriendData_gxl",arr);
		}

		__getset(1,Loading,'I',function(){
			if(!Loading._i)
				Loading._i=new Loading();
			return Loading._i;
		},ui.load.LoadingUI._$SET_I);

		Loading._i=null
		Loading.bIsTeach=false;
		Loading.friendGameUID=-1;
		Loading.ranStr=null
		return Loading;
	})(LoadingUI)


	/**
	*...
	*@author ...
	*/
	//class view.page.ShowLbView extends ui.hall.page.roomList.ShowLbUI
	var ShowLbView=(function(_super){
		function ShowLbView(){
			ShowLbView.__super.call(this);
			this.resList=[
			{url:"res/atlas/newLb.atlas",type:"atlas"}]
		}

		__class(ShowLbView,'view.page.ShowLbView',_super);
		var __proto=ShowLbView.prototype;
		__proto.onCreated=function(){
			view.UIBase0.prototype.onCreated.call(this);
			this.closeBtn.on("click",this,this.onTweenClose);
			this.payBtn.on("click",this,this.onPay);
		}

		/**
		*支付
		*/
		__proto.onPay=function(){
			MenuList.I.onReqStart();
			if(SnowUtils.chkIsFB()){
				MenuList.I.onZuoGG();
				}else{
				HallApp.pay(60);
			}
		}

		//首冲6块钱 1块钱=10钻石
		__proto.onOpen=function(){
			if(SnowUtils.chkIsFB()){
				this.payBtn.skin="newLb/btn_watch.png";
				this.img.skin="newLb/img_3.png";
				}else{
				this.payBtn.skin="newLb/btn_cz.png";
				this.img.skin="newLb/img_1.png";
			}
			this.rewardTxt.text=SnowUtils.chkIsFB()? (ConfigData.gameCfg.fbAdsDiamond+" Diamond"):"60 钻石";
			view.UIBase0.prototype.onOpen.call(this);
			EffectUtils.openDialog(this.myBox);
			this.addToParent(this);
		}

		// initView();
		__proto.initView=function(){
			if(SnowUtils.chkIsFB()){
				this.onGetLimitTimer();
			}
		}

		__proto.onClose=function(){
			view.UIBase0.prototype.onClose.call(this);
		}

		__proto.createBj=function(){}
		__proto.onTweenClose=function(){
			EffectUtils.closeDialog(this.myBox,Handler.create(this,this.onSelfClose))
		}

		__proto.onSelfClose=function(){
			UIMgr.closeUI(ShowLbView);
		}

		__proto.onGetLimitTimer=function(){
			var endTimeSpan=SnowUtils.getTimeSpanAt0()+1 *60 *60 *1000;
			var continueLoop=true;
			var timeNum=endTimeSpan-NotifyCenter.I.getServerTimer();
			if (timeNum <=0){
				this.timer.clear(this,this.loopLimit);
				this.updateTxt.text=SnowUtils.chkIsFB()? "Refresh time 00:00:00" :"更新时间：00:00:00";
				this.payBtn.mouseEnabled=false;
				this.payBtn.gray=true;
				return;
			}
			if (continueLoop)this.timer.frameLoop(30,this,this.loopLimit,[endTimeSpan]);
		}

		__proto.loopLimit=function(end){
			var timeNum=end-NotifyCenter.I.getServerTimer();
			if (timeNum < 0){
				this.timer.clear(this,this.loopLimit);
				this.updateTxt.text=SnowUtils.chkIsFB()? "Refresh time 00:00:00" :"更新时间：00:00:00";
				this.payBtn.mouseEnabled=false;
				this.payBtn.gray=true;
				}else{
				this.payBtn.gray=false;
				this.payBtn.mouseEnabled=true;
				this.updateTxt.text=(SnowUtils.chkIsFB()? "Refresh time " :"更新时间：")+ShowLbView.parseTime(timeNum);
			}
		}

		__getset(1,ShowLbView,'I',function(){
			if (!ShowLbView._ins)ShowLbView._ins=UIMgr.getUI(ShowLbView);
			return ShowLbView._ins;
		},ui.hall.page.roomList.ShowLbUI._$SET_I);

		ShowLbView.onShow=function(){
			UIMgr.openUI(ShowLbView,"layer_pop5");
		}

		ShowLbView.parseTime=function(timeNum){
			if(!timeNum || timeNum <0)return "00:00:00";
			var hour=0,min=0,sec=0;
			timeNum=(timeNum / 1000)| 0;
			var timeStr="";
			hour=(timeNum / 3600)| 0;
			hour=hour % 24;
			if(hour<10){
				timeStr+="0"+hour;
				}else{
				timeStr+=hour;
			}
			timeStr+=":";
			min=((timeNum % 3600)/ 60)| 0;
			if(min <10){
				timeStr+="0"+min;
				}else{
				timeStr+=min;
			}
			timeStr+=":";
			sec=((timeNum % 360)% 60);
			if(sec <10){
				timeStr+="0"+sec;
				}else{
				timeStr+=sec;
			}
			return timeStr;
		}

		ShowLbView._ins=null
		return ShowLbView;
	})(ShowLbUI)


	/**
	*...
	*@author luohuantao
	*/
	//class view.page.ShopNewBuyRole extends ui.hall.page.shop.ShopNewBuyRoleUI
	var ShopNewBuyRole=(function(_super){
		function ShopNewBuyRole(){
			this._voItemCfg=null;
			this._voShopCfg=null;
			ShopNewBuyRole.__super.call(this);
			this.resList=[];
		}

		__class(ShopNewBuyRole,'view.page.ShopNewBuyRole',_super);
		var __proto=ShopNewBuyRole.prototype;
		__proto.onCreated=function(){
			view.UIBase0.prototype.onCreated.call(this);
			this.btnClose.on("click",this,this.onCloseClick,[1]);
			this.btn_sendFriend.on("click",this,this.onSendFr);
			this.btn_buyAndUse.on("click",this,this.onBuyAndUse);
		}

		__proto.onClose=function(){
			this._voItemCfg=null;
			this._voShopCfg=null;
			NotifyCenter.I.off('onNotify',this,this.onGetNotice);
			view.UIBase0.prototype.onClose.call(this);
		}

		__proto.createBj=function(){}
		__proto.onOpen=function(){
			var _$this=this;
			view.UIBase0.prototype.onOpen.call(this);
			this.visible=false;
			NotifyCenter.I.on('onNotify',this,this.onGetNotice);
			this._voItemCfg=ConfigData.itemData[ShopNewBuyRole._itemId];
			if (!this._voItemCfg){
				TipsView.myCallback=Handler.create(this,ascef=function(){
					_$this.onCloseClick(0);
				});
				TipsView.showMe("","购买的物品错误！",1,false);
				return;
			}
			this._voShopCfg=ConfigData.shopData[ShopNewBuyRole._itemId];
			if (!this._voShopCfg){
				TipsView.myCallback=Handler.create(this,ascef=function(){
					_$this.onCloseClick(0);
				});
				TipsView.showMe("","该商品已经下架。",1,false);
				return;
			}
			this.lab_name.text=this._voItemCfg.name;
			var sex=this._voItemCfg.sex;
			if (sex==-1)this.img_sex.visible=false;
			else{
				this.img_sex.visible=true;
			}
			this.img_role.skin=SnowUtils.itemHalfUrl(ShopNewBuyRole._itemId+"");
			var goodat=this._voItemCfg.goodatType;
			this.img_goodat.skin=SnowUtils.getGoodAtIcon(goodat);
			this.img_icon.skin=SnowUtils.itemIconUrl(this._voShopCfg.currencyId[0]+"");
			this.lab_num.text=this._voShopCfg.currencyNum[0]+"";
			this.lab_dec.text=this._voItemCfg.goodatMsg;
			this.addToParent(this);
			EffectUtils.openDialog(this.dialog);
			this.onBuyAndUse();
		}

		/**购买并使用*/
		__proto.onBuyAndUse=function(){
			var _$this=this;
			var mType="";
			var mStr="";
			var buyType=this._voShopCfg.buyType;
			if (buyType==1){
				mType=SnowUtils.chkIsFB()?" diamonds":"钻石";
				mStr=this._voShopCfg.currencyNum[0]+mType;
				if (RoleCenter.I.diamond < this._voShopCfg.currencyNum[0]){
					var message=SnowUtils.chkIsFB()? "Not enough diamond" :"钻石余额不足！";
					HuoDeTuJingView.onShow(message);
					return;
				}
				}else if (buyType==3){
				mType=SnowUtils.chkIsFB()?" gold coins":"金币";
				mStr=this._voShopCfg.currencyNum[0]+mType;
				if (RoleCenter.I.money < this._voShopCfg.currencyNum[0]){
					TipsManager.instance.showText(SnowUtils.chkIsFB()?"Your gold coins is not enough.":"金币不足");
					return;
				}
				}else if (buyType==5){
				mType=SnowUtils.chkIsFB()?"pieces":"碎片";
				mStr=this._voShopCfg.currencyNum[1]+mType;
				var haveCount=NotifyCenter.I.packetObj[this._voShopCfg.currencyId[1]] ? NotifyCenter.I.packetObj[this._voShopCfg.currencyId[1]].amount :0;
				if (haveCount < this._voShopCfg.currencyNum[1]){
					message=SnowUtils.chkIsFB()? "Not enough fragments. "+(this._voShopCfg.currencyNum[1]-haveCount)+" fragments are required." :"碎片数量不足，还差 "+(this._voShopCfg.currencyNum[1]-haveCount)+" 个碎片才能合成！";
					HuoDeTuJingView.onShow(message,1);
					return;
				}
			};
			var buyFlag=true;
			if(this._voItemCfg.type==100){
				TipsView.showMe("common/buy.png","是否花费"+mStr+"购买"+this._voItemCfg.name+"皮肤?",1,false);
				buyFlag=false;
				}else{
				TipsView.showMe("common/buy.png",SnowUtils.chkIsFB()?"Do you want to spend "+mStr+" to buy "+ConfigData.thingName[ShopNewBuyRole._itemId].us+" hero?":"是否花费"+mStr+"购买"+this._voItemCfg.name+"英雄?",1,false);
			}
			TipsView.myCallback=Handler.create(this,ascef=function(cid){
				var cmd=new ClientRequestFragmentExchange();
				cmd.itemID=ShopNewBuyRole._itemId;
				cmd.itemNum=1;
				if (buyType==5)
					cmd.fragmentID=cid;
				cmd.buyChannel=0;
				NotifyCenter.isBuyAndUse=buyFlag;
				NotifyCenter.uByType=cmd.fragmentID;
				HallApp.notify(cmd);
				_$this.netWorkControl.reSet(2000);
			},[this._voShopCfg.currencyId[1]]);
		}

		/**
		*获取透传回调数据
		*/
		__proto.onGetNotice=function(data){
			switch(data.method){
				case 30016:
					if ((data).useReuslt==1){
						this.onCloseClick(0);
						if(NotifyCenter.isBuyAndUse)
							HallApp.useItem(ShopNewBuyRole._itemId,1);
					}
					this.netWorkControl&&this.netWorkControl.detroy();
					break ;
				}
		}

		/**赠送物品给好友的回调*/
		__proto.onSendFr=function(){
			TipsManager.instance.showText("该功能暂未开放");
		}

		/**
		*@param type 是否播放关闭缓动 0-不播，1-播放
		*/
		__proto.onCloseClick=function(type){
			ShopNewBuyRole._closeHandler && ShopNewBuyRole._closeHandler.run();
			if (!type){
				UIMgr.closeUI(ShopNewBuyRole);
				return;
			}
			EffectUtils.closeDialog(this.dialog,Handler.create(this,c=function(){
				UIMgr.closeUI(ShopNewBuyRole);
			}));
		}

		ShopNewBuyRole.onShowMe=function(itemid,closeHandler){
			ShopNewBuyRole._itemId=itemid;
			ShopNewBuyRole._closeHandler=null;
			UIMgr.openUIFight(ShopNewBuyRole,"layer_pop5");
		}

		ShopNewBuyRole._itemId=0;
		ShopNewBuyRole._closeHandler=null
		return ShopNewBuyRole;
	})(ShopNewBuyRoleUI)


	/**
	*...
	*@author ...
	*/
	//class view.page.ShareReword extends ui.ShareRewordUI
	var ShareReword=(function(_super){
		function ShareReword(){
			ShareReword.__super.call(this);
			this.resList=[{url:"res/atlas/shareInfo.atlas",type:"atlas"}];
		}

		__class(ShareReword,'view.page.ShareReword',_super);
		var __proto=ShareReword.prototype;
		__proto.onCreated=function(){
			view.UIBase0.prototype.onCreated.call(this);
			this.list1.renderHandler=new Handler(this,this.onListRender)
		}

		__proto.onOpen=function(){
			view.UIBase0.prototype.onOpen.call(this);
			this.list1.array=this.getDataArr();
			EffectUtils.openDialog(this.myBox);
			NotifyCenter.I.on('onNotify',this,this.onGotNotify);
			this.addToParent(this);
		}

		__proto.createBj=function(){}
		__proto.onClose=function(){
			NotifyCenter.I.off('onNotify',this,this.onGotNotify);
			view.UIBase0.prototype.onClose.call(this);
		}

		__proto.onListRender=function(item,index){
			if (!item || !item.dataSource)return;
			item.myIcon.skin=item.dataSource.skin;
			item.myLabel.text=item.dataSource.str;
			item.kuang.visible=true;
			item.on("click",this,this.onChoose,[index]);
		}

		__proto.onChoose=function(index){
			this.onTweenClose();
			var cmd1=new RequestShare();
			cmd1.shareType=1;
			cmd1.shareUserId=RoleCenter.I.userId;
			cmd1.awardIndex=index;
			HallApp.notify(cmd1);
		}

		__proto.getDataArr=function(){
			var rep=NotifyCenter.I.Query(30087);
			if (!rep)return [];
			var jlArr=rep.ids;
			var jlNumArr=rep.nums;
			var voItemCfg;
			var obj;
			var resArr=[];
			for (var i=0,len=jlArr.length;i < len;i++){
				obj={};
				voItemCfg=ConfigData.itemData [jlArr[i]];
				if (!voItemCfg)continue ;
				if (voItemCfg.type==7){
					if(voItemCfg.deadline)
						obj.str="体验卡"+Math.floor(voItemCfg.deadline / 24)+"天";
					else
					obj.str="永久";
				}
				else{
					obj.str="x"+jlNumArr[i];
				}
				obj.skin=SnowUtils.itemIconUrl(jlArr[i]);
				resArr.push(obj);
			}
			return resArr;
		}

		__proto.onGotNotify=function(data){
			if (data.method==30045){
				var fjson=SnowUtils.getFjson();
				if (!fjson.shareAward)fjson.shareAward=new ShareAward();
				fjson.shareAward.lastShareTime=new Date().toLocaleDateString();
				ItemShow.onShow([{itemId:data.awardId,itemNum:data.awardNum}],"分享奖励");
				var shareKey=RoleCenter.I.userId+"_share_reword";
				var shareTimeSpan=SnowUtils.getDataInLocalStorage(shareKey);
				if(!shareTimeSpan || shareTimeSpan !=SnowUtils.getTimeSpanAt0()){
					SnowUtils.setDataInLocalStorage(shareKey,SnowUtils.getTimeSpanAt0());
				}
				HallApp.listBackpacks();
				UIMgr.closeUI(ShareTips);
			}
		}

		/**
		*关闭
		*
		*/
		__proto.onTweenClose=function(){
			EffectUtils.closeDialog(this.myBox,Handler.create(this,function(){
				UIMgr.closeUI(ShareReword);
			}));
		}

		ShareReword.onShow=function(){
			UIMgr.openUI(ShareReword,"layer_pop5");
		}

		return ShareReword;
	})(ShareRewordUI$1)


	/**
	*
	*@author Administrator
	*
	*/
	//class view.page.TeamView extends ui.hall.page.team.TeamUI
	var TeamView=(function(_super){
		function TeamView(){
			this.teamInfoArray=null;
			this.myBasicData=null;
			this.killIndex=0;
			this.leaderId=0;
			this.teamInfo=null;
			this.tl=null;
			this.gameStart=false;
			this._panelEffect=null;
			this.timeIndex=15;
			this.bIsClickStart=false;
			TeamView.__super.call(this);
			TeamView.isZuDui=true;
			this.resList=[
			{url:"res/atlas/team.atlas",type:"atlas"},
			{url:"res/atlas/freematch.atlas",type:"atlas"}];
		}

		__class(TeamView,'view.page.TeamView',_super);
		var __proto=TeamView.prototype;
		__proto.onCreated=function(){
			view.UIBase0.prototype.onCreated.call(this);
			this.btnStart.on("click",this,this.onBtnStart);
			this.btnCancle.on("click",this,this.onBtnCancle);
			this.btnStore.on("click",this,this.onBtnStore);
			this.btnReady.on("click",this,this.onBtnReady);
			this.btnBack.on("click",this,this.onBtnBack);
			this.btnIvt.on("click",this,this.onBtnIvt)
		}

		//listFriend.scrollBar.elasticDistance=100;
		__proto.onBtnIvt=function(){
			SnowUtils.shareInitiative("team3vepk",{fromType:TeamView.myTpye,teamId:TeamView.myTeamId});
			StatManager.I.v2_share("team3v3PiPei");
		}

		__proto.onBtnBack=function(){
			var _$this=this;
			TipsView.myCallback=Handler.create(this,function(){
				HallApp.leaveTeam();
				if (_$this._panelEffect)_$this._panelEffect.close(Handler.create(null,function(){
					UIMgr.closeUI(TeamView);
					MenuList.onShowMe();
					if(TeamView.bIsLeader){}
						}));
			});
			var iMsg1=SnowUtils.chkIsFB()?"Are you sure you want to dissolve the team?":"确定要解散队伍吗？";
			var iMsg2=SnowUtils.chkIsFB()?"Are you sure you want to leave the team?":"确定要退出队伍吗？";
			TipsView.showMe("",TeamView.bIsLeader?iMsg1:iMsg2,1,false);
		}

		/**
		*准备
		*
		*/
		__proto.onBtnReady=function(){
			HallApp.teamReady(true);
		}

		/**
		*更换枪械
		*
		*/
		__proto.onBtnStore=function(){
			HeroCardView.onShow();
		}

		/**
		*取消准备
		*
		*/
		__proto.onBtnCancle=function(){
			HallApp.teamReady(false);
		}

		/**
		*分享
		*
		*/
		__proto.onBtnInvWechat=function(){
			RoleCenter.I.shareType=24;
			SnowUtils.shareInitiative("teammodel",{fromType:TeamView.myTpye,teamId:TeamView.myTeamId});
			this.onTcmd();
			this.addMaidianRelationInvite();
		}

		__proto.onTcmd=function(){}
		//SnowUtils.reportTlogReason(enumTlogReason.REASON_SNS_INVITE,(myTpye==enumRoomType.ROOMTYPE_TEAM2V2)?enumTlogReason.SUBREASON_SNS_INVITE_1:enumTlogReason.SUBREASON_SNS_INVITE_2);
		__proto.onOpen=function(){
			var _$this=this;
			TeamView.isZuDui=true;
			RoleCenter.teamOrMatch="team";
			this.bIsClickStart=false;
			this.gameStart=false;
			this.ani1.stop();
			this.ppLayer.visible=false;
			this.pList.renderHandler=new Handler(this,this.pListRender);
			NotifyCenter.I.on("onTeamJoined",this,this.onTeamJoined);
			NotifyCenter.I.on("onTeamCreated",this,this.onTeamCreated);
			NotifyCenter.I.on("onTeamLeft",this,this.onTeamLeft);
			NotifyCenter.I.on('onFriendListResult',this,this.onGotFriendList);
			NotifyCenter.I.on("onTeamReady",this,this.onTeamReady);
			NotifyCenter.I.on("on_usererror",this,this.onGameError);
			RoleCenter.I.on("roleChangeEvent",this,this.onUserBasicDataChg);
			NotifyCenter.I.on("onOtherUserBasicdataChange",this,this.onOtherUserBasicdataChange);
			MenuList.I.changeEvent(false);
			this.teamInfoArray=[];
			this.teamInfo=[];
			this.pList.array=this.teamInfoArray;
			switch(parseInt(TeamView.myTpye+"")){
				case enumRoomType.ROOMTYPE_TEAM2V2:
					break ;
				case enumRoomType.ROOMTYPE_TEAM5V5:
				case enumRoomType.ROOMTYPE_GEM:
					break ;
				case enumRoomType.ROOMTYPE_FLAG:
					break ;
				case enumRoomType.ROOMTYPE_LOLIPOP:
					break ;
				}
			this.myBasicData=NotifyCenter.I.Query("on_BasicDataChg");
			TeamView.bIsLeader && HallApp.createTeam(TeamView.myTpye);
			this.tabTeamSelectHandler(0);
			TeamView.teamJoinInfo&&this.onTeamJoined(TeamView.teamJoinInfo);
			this.btnStart.visible=TeamView.bIsLeader;
			if (TeamView.bIsLeader){
				if(!this.tl)
					this.tl=EffectUtils.tada(this.btnStart,1200);
				else
				this.tl.play(0);
				this.tl.on("complete",this,function(){
					_$this.btnStart.scale(1,1);
					_$this.btnStart.rotation=0;
					if (_$this.gameStart){
						_$this.tl.offAll("complete");
						return;
					}
					Laya.timer.once(1000,this,function(){
						_$this.tl.play(0);
					})
				})
			};
			this.btnCancle.visible=this.btnReady.visible=!TeamView.bIsLeader;
			if(!TeamView.bIsLeader){
				this.onBtnReady();
			}
			view.UIBase0.prototype.onOpen.call(this);
			if (!this._panelEffect){
				this._panelEffect=new PanelEffect();
				this._panelEffect.reg(this);
			}
			this.addToParent(this);
			UIMgr.closeAllByLayer("layer_pop3");
			UIMgr.closeAllByLayer("layer_pop4");
			this._panelEffect.start(50,Handler.create(this,function(){
				_$this.ani1.play(0);
			}));
		}

		__proto.pListRender=function(item,index){
			if (!item)return;
			item.btnDelete.visible=false;
			item.chgHero.visible=false;
			item.btnChangeOther.visible=true;
			item.roomMaker.visible=false;
			item.btnChangeOther.visible=false;
			item.Avtor1.skin="";
			item.uName.skin="";
			item.imgHead.skin="";
			var dt=item.dataSource;
			if(dt){
				if(this.leaderId==RoleCenter.I.userId && dt.userId !=RoleCenter.I.userId){
					item.btnDelete.visible=true;
					item.btnDelete.on("click",this,this.onBtnDelete,[dt,index]);
				}
				if(this.leaderId==dt.userId){
					item.roomMaker.visible=true;
				}
				item.imgHead.skin=HallUtil.getHeadIcon(dt);
				item.Avtor1.skin=SnowUtils.roleHalfUrlNew2(dt.Avtor);
				var arr=SnowUtils.deComposeAvatar(dt.Avtor||1);
				if(!arr || arr.length <=0){
					}else{
					item.uName.skin=SnowUtils.itemHalfUrlNew2(arr[0]+"_n");
				}
			}
		}

		/**
		*更新其他玩家基础信息
		*@param dat
		*
		*/
		__proto.onOtherUserBasicdataChange=function(dat){
			for (var i=0,j=this.teamInfo.length;i < j;i++){
				if(this.teamInfo[i].userId==dat.userId){
					this.teamInfo[i].Avtor=dat.Avtor;
					break ;
				}
			}
			this.changeTeamList();
		}

		/**
		*刷新人物数据
		*
		*/
		__proto.onUserBasicDataChg=function(){
			this.myBasicData=NotifyCenter.I.Query("on_BasicDataChg");
			for (var i=0,j=this.teamInfo.length;i < j;i++){
				var user=this.teamInfo[i];
				if(user.userId==RoleCenter.I.userId){
					this.teamInfo[i].Avtor=this.myBasicData.Avtor;
					break ;
				}
			}
			this.changeTeamList();
		}

		/**
		*组队准备返回
		*@param dat
		*
		*/
		__proto.onTeamReady=function(dat){
			for (var i=0,j=this.teamInfo.length;i < j;i++){
				var user=this.teamInfo[i];
				if(user.userId==dat.userId){
					this.teamInfo[i].ready=dat.ready;
					break ;
				}
			}
			if(!TeamView.bIsLeader && dat.userId==RoleCenter.I.userId){
				this.btnCancle.visible=dat.ready;
				this.btnReady.visible=!dat.ready;
			}
			this.changeTeamList();
		}

		/**
		*异常消息
		*@param error
		*
		*/
		__proto.onGameError=function(error){
			switch(parseInt(error.errorCode+"")){
				case-90014:
					TipsManager.instance.showText("当前还有玩家未准备");
					this.bIsClickStart=false;
					break ;
				}
		}

		/**
		*界面关闭调用
		*
		*/
		__proto.onClose=function(){
			TeamView.isZuDui=false;
			TeamView.bIsShow=false
			this.bIsClickStart=false;
			TeamView.teamJoinInfo=null;
			this.gameStart=true;
			TeamView.myTeamId=0;
			TeamView.starObj={};
			TeamView.sldObj={};
			NotifyCenter.I.off("onTeamJoined",this,this.onTeamJoined);
			NotifyCenter.I.off("onTeamCreated",this,this.onTeamCreated)
			NotifyCenter.I.off("onTeamLeft",this,this.onTeamLeft);
			NotifyCenter.I.off('onFriendListResult',this,this.onGotFriendList);
			NotifyCenter.I.off("onTeamReady",this,this.onTeamReady);
			NotifyCenter.I.off("on_usererror",this,this.onGameError);
			RoleCenter.I.off("roleChangeEvent",this,this.onUserBasicDataChg);
			NotifyCenter.I.off("onOtherUserBasicdataChange",this,this.onOtherUserBasicdataChange);
			MenuList.I.changeEvent(true);
			this.timeIndex=15;
			Laya.timer.clear(this,this.clearMyTimer);
			if(CrazySnowball.shareData){
				CrazySnowball.shareData={};
				CrazySnowball.shareData.query={};
				CrazySnowball.shareData.scene=0;
			}
			view.UIBase0.prototype.onClose.call(this);
		}

		/**组队tab 切换回调*/
		__proto.tabTeamSelectHandler=function(index){
			var myInfo;
			var arr;
			SoundManager.playSound(ConfigData.soundCfg[102]);
			if (index==0){
				myInfo=NotifyCenter.I.Query("onGotRelation_arr");
				myInfo && (arr=myInfo.friends);
			}
			else if (index==1){
				myInfo=this.getFriendData(102);
				myInfo && (arr=myInfo.friends);
			}
			else if (index==2){
				arr=FriendRecentFight.getData();
			}
			if(arr){
				for (var i=0;i < arr.length;i++){
					var info=arr [i];
					if(info.online){
						info.index=1;
						if(info.teamId>0){
							info.index=2;
							}else{
							if(info.roomId>0){
								info.index=3;
							}
						}
					}
					else{
						info.index=5;
					}
				}
				arr.sort(function(a,b){
					return a.index-b.index;
				});
			}
		}

		/**
		*加入队伍
		*@param dat
		*
		*/
		__proto.onTeamJoined=function(info){
			if(info.code==-90011){
				TipsManager.instance.showText("队伍人数已满");
			}
			else if(info.code==-90012){
				TipsManager.instance.showText("你当前队伍已经解散");
			}
			if (info.code !=0){
				RoleCenter.I.inviteGameUID=-1;
				return;
			};
			var num=0;
			for (var i=0;i < info.userInfo.length;i++){
				var dat=info.userInfo[i];
				if (this.chkInRoom(dat.userId))continue ;
				dat.ownSelf=0
				if(dat.userId==RoleCenter.I.userId){
					TeamView.myTeamId=info.teamid;
					dat.ownSelf=1;
				}
				dat.ready=dat.isReady;
				this.teamInfo.indexOf(dat)==-1&&this.teamInfo.push(dat);
			}
			for (var m=0;m < this.teamInfo.length;m++)
			if (!!this.teamInfo[m].payload && this.teamInfo[m].payload !=''&& this.teamInfo[m].payload !='null'&& this.teamInfo[m].payload !='undefined')
				num++;
			info.creator>0&&(this.leaderId=info.creator);
			this.changeTeamList();
		}

		/**根据 userId 检查是否在队伍中*/
		__proto.chkInRoom=function(userId){
			for (var i=0,j=this.teamInfo.length;i < j;i++){
				var dat=this.teamInfo[i];
				if (dat.userId==userId)return true;
			}
			return false;
		}

		/**
		*渲染组队列表
		*@param e
		*
		*/
		__proto.listRender=function(box,index){
			if(!box)return;
			var txtName=box.getChildByName("txtName");
			var txtDuanwei=box.getChildByName("txtDuanwei");
			var imgHome=box.getChildByName("imgHome");
			var imgSex=box.getChildByName("imgSex");
			var imgWaiting=box.getChildByName("imgWaiting");
			var imgHead=box.getChildByName("imgHead");
			var imgBG=box.getChildByName("imgBG");
			var lbg=box.getChildByName("lbg");
			var imgType=box.getChildByName("imgType");
			var txtReady=box.getChildByName("txtReady");
			var btnDelete=box.getChildByName("btnDelete");
			var sldIcon=(box).sldIcon;
			var imgRank=(box).imgRank;
			sldIcon.visible=false;
			txtReady.visible=false;
			imgRank.visible=false;
			imgHome.visible=false;
			btnDelete.visible=false;
			if(box.dataSource){
				var info=box.dataSource;
				var array=SnowUtils.deComposeAvatar(info.Avtor);
				imgSex.skin="common/sex_"+info.Gender+".png";
				txtName.text=HallUtil.getNkName(info);
				txtName.color="#ffffff";
				var avtArr=SnowUtils.deComposeAvatar(info.Avtor);
				if(TeamView.myTpye==enumRoomType.ROOMTYPE_TEAM2V2){
					imgHead.skin=SnowUtils.itemHalfUrl("sc_"+avtArr[0]);
					}else{
					imgHead.skin=SnowUtils.itemHalfUrl("n"+avtArr[0]);
				};
				var userid=info.userId;
				if(!TeamView.starObj[userid] && TeamView.starObj[userid] !=0){
					var userDataBack=new UserDataCallBack();
					userDataBack.uid=info.userId;
					userDataBack.callBack=Handler.create(this,cbk=function(data){
						if (data.code !=0)return;
						txtDuanwei.text=HallUtil.getSeasonNameByExp(data.result.s1);
						imgRank.setVal(data.result.s1);
						imgRank.visible=true;
						TeamView.starObj[userid]=data.result.s1
						console.log(TeamView.starObj)
					});
					UserInfoMgr.I.askDuanwei([userDataBack]);
					}else{
					txtDuanwei.text=HallUtil.getSeasonNameByExp(TeamView.starObj[userid]);
					imgRank.setVal(TeamView.starObj[userid]);
					imgRank.visible=true;
				}
				imgWaiting.visible=false;
				if(TeamView.bIsLeader && this.myBasicData.userId !=info.userId){
					btnDelete.visible=true;
					btnDelete.on("click",this,this.onBtnDelete,[info,index]);
				}
				if(TeamView.bIsLeader && this.myBasicData.userId==info.userId)imgHome.visible=true;
				if(!TeamView.sldObj[userid]){
					NotifyCenter.I.on('onNotify',box,this.onGotNotify);
					var req=Pool.getItemByClass("RequestCUserData",RequestCUserData);
					req.uid=info.userId;
					req.query=["fjson.heroProficiency","fjson.activeItems"];
					HallApp.notify(req);
					Pool.recover("RequestCUserData",req);
					}else{
					TeamView.setOtherSld(TeamView.sldObj[userid]["fjson.heroProficiency"],TeamView.sldObj[userid]["fjson.activeItems"],box);
				}
				if(array[0]){
					var item=ConfigData.itemData[array[0]];
					if(item){
						imgType.skin="team/type"+item.goodatType+".png";
						imgBG.skin="team/n"+item.goodatType+".png";
						lbg.visible=true;
					}
					else{
						imgType.skin="";
						imgBG.skin="team/emptybg.png";
						lbg.visible=false;
					}
				}
				imgType.visible=true;
				if(this.leaderId !=info.userId){
					txtReady.visible=!info.ready;
					}else{
					txtReady.visible=false;
				}
				}else{
				imgSex.skin="";
				txtName.text="";
				txtDuanwei.text="";
				imgHead.skin="";
				imgWaiting.visible=true;
				imgType.skin="";
				imgBG.skin="team/emptybg.png";
				lbg.visible=false;
			}
		}

		__proto.onGotNotify=function(data){
			if (data.method==30063){
				if (this.dataSource && data && this.dataSource.userId==data.uid){
					TeamView.sldObj[this.dataSource.userId]=data.userData;
					TeamView.setOtherSld(data.userData["fjson.heroProficiency"],data.userData["fjson.activeItems"],this);
				}
			}
		}

		/**
		*离开队伍回调
		*
		*/
		__proto.onTeamLeft=function(dat){
			delete TeamView.starObj[dat.userid];
			delete TeamView.sldObj[dat.userid];
			if (dat.userid==this.myBasicData.userId){
				if (TeamView.isPi){
					this.ppLayer.visible=true;
					var startTime=Laya.timer.currTimer;
					this.timeVal.text="00:00";
					Laya.timer.frameLoop(30,this,this.waitTime,[startTime]);
					this.btnQx.on("click",this,this.onQxPiPei);
					return;
				}
				RoleCenter.I.inviteGameUID=-1;
				if (this._panelEffect)this._panelEffect.close(Handler.create(null,function(){
					UIMgr.closeUI(TeamView);
					MenuList.onShowMe();
					if(TeamView.bIsLeader){}
						}));
				}else{
				for (var i=0;i < this.teamInfo.length;i++){
					if(this.teamInfo[i].userId==dat.userid){
						this.teamInfo.splice(i,1);
						break ;
					}
				};
				var num=0;
				for (var m=0;m < this.teamInfo.length;m++){
					if (!!this.teamInfo[m].payload && this.teamInfo[m].payload !=''&& this.teamInfo[m].payload !='null'&& this.teamInfo[m].payload !='undefined')
						num++;
				}
				this.changeTeamList();
			}
		}

		__proto.waitTime=function(startTime){
			var timeNum=Laya.timer.currTimer-startTime;
			var fen=Math.floor(timeNum / 1000 / 60);
			var miao=Math.floor(timeNum / 1000)% 60;
			var fenStr;
			var miaoStr;
			fenStr=fen < 10 ? ("0"+fen):(fen+"");
			miaoStr=miao < 10 ? ("0"+miao):(miao+"");
			this.timeVal.text=fenStr+":"+miaoStr;
		}

		__proto.onQxPiPei=function(){
			MenuList.I.onReqStart();
			Laya.timer.clear(this,this.waitTime);
			var req=new RequestCancelLadderMatch();
			HallApp.notify(req);
		}

		__proto.changeTeamList=function(){
			this.teamInfo.sort(function(a,b){
				return b.ownSelf-a.ownSelf;
			});
			for (var i=0;i < 5;i++){
				if(this.teamInfo[i]){
					this.teamInfoArray[i]=this.teamInfo[i];
					}else{
					this.teamInfoArray[i]=null;
				}
			}
			switch(parseInt(TeamView.myTpye+"")){
				case enumRoomType.ROOMTYPE_TEAM2V2:
					break ;
				case enumRoomType.ROOMTYPE_TEAM5V5:
				case enumRoomType.ROOMTYPE_GEM:
				case enumRoomType.ROOMTYPE_FLAG:
				case enumRoomType.ROOMTYPE_LOLIPOP:
					break ;
				case enumRoomType.ROOMTYPE_LADDER:
					this.pList.array=this.teamInfoArray;
					break ;
				}
		}

		/**
		*邀请单个玩家进来玩
		*@param fopenid
		*
		*/
		__proto.inviteSingle=function(fopenid){
			var name;
			switch(parseInt(TeamView.myTpye+"")){
				case enumRoomType.ROOMTYPE_TEAM2V2:
					name="2人组队";
					break ;
				case enumRoomType.ROOMTYPE_TEAM5V5:
				case enumRoomType.ROOMTYPE_GEM:
					name="5人组队";
					break ;
				case enumRoomType.ROOMTYPE_FLAG:
					name="夺旗战";
					break ;
				case enumRoomType.ROOMTYPE_LOLIPOP:
					name="糖糖大战";
					break ;
				}
		}

		/**
		*监听好友状态变化
		*@param data
		*@return
		*
		*/
		__proto.onGotFriendList=function(data){
			return true;
		}

		/**
		*创建队伍成功
		*@param team
		*
		*/
		__proto.onTeamCreated=function(team){
			TeamView.myTeamId=team;
			this.teamInfoArray=[];
			this.teamInfo=[];
			console.log("lifei------------->td="+TeamView.myTeamId+"_"+RoleCenter.I.userId);
			if(TeamView.arrPlayers){
				for (var i=0;i < TeamView.arrPlayers.length;i++){
					HallApp.inviteTeam(TeamView.arrPlayers[i]);
				}
			}
			SnowUtils.shareBall("teammodel",{fromType:TeamView.myTpye,teamId:TeamView.myTeamId});
		}

		/**
		*腾讯组队邀请单独的玩家
		*@param info
		*
		*/
		__proto.onBtnUnInvitation=function(info){
			this.inviteSingle(info.openId);
		}

		/**
		*踢出队伍
		*@param info
		*
		*/
		__proto.onBtnDelete=function(info,index){
			this.killIndex=index;
			if (TeamView.myTpye==enumRoomType.ROOMTYPE_TEAM2V2){
				}else if(TeamView.myTpye==enumRoomType.ROOMTYPE_TEAM5V5){
				}else{
				var curItem=this.pList.getCell(this.killIndex);
				if (!curItem)return;
			}
			HallApp.kickTeam(info.userId);
		}

		/**
		*邀请全部
		*
		*/
		__proto.onBtnInviteAll=function(){
			this.timeIndex=15;
			Laya.timer.loop(1000,this,this.clearMyTimer);
			var myInfo;
			var friends;
			if (0){
				myInfo=NotifyCenter.I.Query("onGotRelation_arr");
				myInfo && (friends=myInfo.friends);
			}
			else if (1){
				myInfo=this.getFriendData(102);
				myInfo && (friends=myInfo.friends);
			}
			else if (2){
				friends=FriendRecentFight.getData();
			}
			if (!friends)return;
			var da=new Object();
			da.type=view.page.TeamView.myTpye;
			da.rank=RoleCenter.I.rank;
			da.gender=RoleCenter.I.Gender;
			for (var i=0;i < friends.length;i++){
				var fi=friends[i];
				if(fi.online)
					fi&&HallApp.inviteTeam(fi.friendId,JSON.stringify(da));
			}
			this.onTcmd();
			this.addMaidianInvite(0);
		}

		__proto.clearMyTimer=function(){
			this.timeIndex--;
			if(this.timeIndex <=0){
				this.timeIndex=5;
				Laya.timer.clear(this,this.clearMyTimer);
			}
		}

		/**
		*开始匹配
		*
		*/
		__proto.onBtnStart=function(){
			if(this.bIsClickStart)return;
			var index=0;
			for (var i=0,j=this.teamInfo.length;i < j;i++){
				var dat=this.teamInfo[i];
				if (dat.userId !=this.leaderId && dat.ready==false){
					index++;
				}
			}
			if(index>0){
				TipsManager.instance.showText("当前还有玩家未准备");
				return;
			}
			this.bIsClickStart=true;
			HallApp.matchFun(TeamView.myTpye);
		}

		__proto.getFriendData=function(type){
			var friData=NotifyCenter.I.Query('onFriendListResult');
			if(!friData)return null;
			var voGr;
			for (var i=0,j=friData.groups.length;i < j;i++){
				voGr=friData.groups [i];
				if (voGr.id==type)return voGr;
			}
			return null;
		}

		__proto.addMaidianInvite=function(targetid){}
		/**
		*关系链邀请埋点
		*/
		__proto.addMaidianRelationInvite=function(){
			StatManager.I.v2_share(TeamView.myTpye);
		}

		TeamView.showMe=function(type,leader,arr){
			if(TeamView.bIsShow)return;
			TeamView.bIsShow=true;
			TeamView.myTpye=type;
			TeamView.bIsLeader=leader;
			TeamView.arrPlayers=arr;
			TeamView.isPi=false;
			TeamView.t1Arr=[];
			TeamView.t2Arr=[];
			UIMgr.closeUI(GroupModeView);
			UIMgr.openUI(TeamView);
		}

		TeamView.setOtherSld=function(_sldObj,usingItem,curObj){
			if (!usingItem || !usingItem[1]){
				curObj.sldIcon.visible=true;
				curObj.sldIcon.skin="res/goods/goodat/lv_1.png";
				}else{
				var heroId=ConfigData.itemData[usingItem[1]].communalId[0];
				var exp=0 | _sldObj[heroId];
				if (!ConfigData.roleData[heroId]){
					curObj.sldIcon.visible=false;
					}else{
					curObj.sldIcon.visible=true;
					heroId=ConfigData.roleData[heroId].heroType;
					if(_sldObj){
						var lvNum=SnowUtils.getHeroPlv(heroId,exp);
						curObj.sldIcon.skin=SnowUtils.getGoodAtIcon(("lv_"+lvNum));
					}else
					curObj.sldIcon.skin="res/goods/goodat/lv_1.png";
				}
			}
		}

		TeamView.isZuDui=false;
		TeamView.myTpye=0;
		TeamView.myTeamId=0;
		TeamView.teamJoinInfo=null
		TeamView.bIsShow=false;
		TeamView.showGroupOrNew="";
		TeamView.bIsLeader=false;
		TeamView.isPi=false;
		TeamView.arrPlayers=null
		TeamView.t1Arr=[];
		TeamView.t2Arr=[];
		TeamView.starObj={};
		TeamView.sldObj={};
		return TeamView;
	})(TeamUI)


	/**
	*通用弹框类 可选择显示按钮类型， 需要单独设置回调方法
	*此弹框默认带背景，如果点击回调会走到其他面板的可以使用背景，
	*如果只是在其他面板的提示作用不要用背景
	*@author Administrator
	*
	*/
	//class view.page.TipsView extends ui.TipsViewUI
	var TipsView=(function(_super){
		function TipsView(){
			TipsView.__super.call(this);
		}

		__class(TipsView,'view.page.TipsView',_super);
		var __proto=TipsView.prototype;
		// ];
		__proto.onCreated=function(){
			view.UIBase0.prototype.onCreated.call(this);
			this.btnYes.on("click",this,this.onBtnYes);
			this.btnNo.on("click",this,this.onBtnNo);
			this.btnClose.on("click",this,this.OnBtnClose);
		}

		__proto.onOpen=function(){
			this.isShowBg=TipsView.myShowBg;
			this.btnYes.visible=this.btnNo.visible=false;
			this.btnYes.skin="newhall/yes.png";
			switch(TipsView.myType){
				case TipsView.SHOW_YES:
					this.btnYes.visible=true;
					this.btnYes.x=this.myBox.width/2;
					break ;
				case TipsView.SHOW_NO:
					this.btnNo.visible=true;
					this.btnNo.x=this.myBox.width/2;
					break ;
				case TipsView.SHOW_YES_NO:
					this.btnYes.visible=this.btnNo.visible=true;
					this.btnYes.x=this.myBox.width/3;
					this.btnNo.x=this.myBox.width/3*2;
					break ;
				case TipsView.SHOW_CHONGZHI_NO:
					this.btnYes.skin="common/btn_chongzhi.png";
					this.btnYes.visible=this.btnNo.visible=true;
					this.btnYes.x=this.myBox.width/3;
					this.btnNo.x=this.myBox.width/3*2;
					break ;
				case TipsView.SHOW_DUOBAO_NO:
					this.btnYes.skin="common/btn_duobao.png";
					this.btnYes.visible=this.btnNo.visible=true;
					this.btnYes.x=this.myBox.width/3;
					this.btnNo.x=this.myBox.width/3*2;
					break ;
				}
			this.btnClose.visible=TipsView.myClose;
			this.msg.text=TipsView.myMsg;
			this.title.skin=TipsView.myTitle;
			this.bg.visible=!TipsView.myShowBg;
			view.UIBase0.prototype.onOpen.call(this);
			this.addToParent(this);
			EffectUtils.openDialog(this.myBox);
		}

		__proto.addToParent=function(uibase0){
			view.UIBase0.prototype.addToParent.call(this,uibase0);
			if(TipsView.myShowBg){
				UIMgr.openUI(BjView,"layer_pop5");
			}
		}

		__proto.onClose=function(){
			TipsView.myShowBg && UIMgr.openUI(BjView,"layer_bg");
			TipsView.myCloseBack=null;
			TipsView.myCancleBack=null;
			TipsView.myType=1;
			TipsView.myTitle="";
			TipsView.myMsg="";
			this.msg.text="";
			this.btnYes.skin="newhall/yes.png";
			TipsView.endCloseBack && TipsView.endCloseBack.run();
			TipsView.endCloseBack=null;
			view.UIBase0.prototype.onClose.call(this);
		}

		/**
		*关闭
		*
		*/
		__proto.OnBtnClose=function(){
			SoundManager.playSound(ConfigData.soundCfg[103]);
			EffectUtils.closeDialog(this.myBox,Handler.create(this,this.onTweenBtnClose));
		}

		__proto.onTweenBtnClose=function(){
			TipsView.myCloseBack&&TipsView.myCloseBack.run();
			UIMgr.closeUI(TipsView);
		}

		/**
		*否
		*
		*/
		__proto.onBtnNo=function(){
			SoundManager.playSound(ConfigData.soundCfg[104]);
			EffectUtils.closeDialog(this.myBox,Handler.create(this,this.onTweenNo));
		}

		__proto.onTweenNo=function(){
			TipsView.myCancleBack&&TipsView.myCancleBack.run();
			UIMgr.closeUI(TipsView);
		}

		/**
		*是
		*
		*/
		__proto.onBtnYes=function(){
			SoundManager.playSound(ConfigData.soundCfg[102]);
			EffectUtils.closeDialog(this.myBox,Handler.create(this,this.onTweenYes));
			this.btnYes.event("stepEnd");
		}

		__proto.onTweenYes=function(){
			UIMgr.closeUI(TipsView);
			TipsView.myCallback && TipsView.myCallback.run();
			TipsView.myCallback=null
		}

		TipsView.showMe=function(tl,mg,type,showGB,close){
			(type===void 0)&& (type=1);
			(showGB===void 0)&& (showGB=true);
			(close===void 0)&& (close=true);
			UIMgr.closeUI(TipsView);
			TipsView.myType=type;
			TipsView.myTitle=tl || "newhall/tishi.png";
			TipsView.myMsg=mg || "";
			TipsView.myClose=close;
			TipsView.myShowBg=showGB;
			UIMgr.openUI(TipsView,"layer_tips");
		}

		TipsView.SHOW_YES=1;
		TipsView.SHOW_NO=2;
		TipsView.SHOW_YES_NO=4;
		TipsView.SHOW_CHONGZHI_NO=5;
		TipsView.SHOW_DUOBAO_NO=6;
		TipsView.myType=1;
		TipsView.myTitle=null
		TipsView.myMsg=null
		TipsView.myClose=false;
		TipsView.myShowBg=false;
		TipsView.myCallback=null
		TipsView.myCloseBack=null
		TipsView.myCancleBack=null
		TipsView.endCloseBack=null
		return TipsView;
	})(TipsViewUI)


	/**
	*...
	*@author
	*/
	//class view.page.gaming.SupportSkillBox extends view.page.gaming.SkillBox
	var SupportSkillBox=(function(_super){
		function SupportSkillBox(){
			this.isDown=false;
			SupportSkillBox.__super.call(this);
		}

		__class(SupportSkillBox,'view.page.gaming.SupportSkillBox',_super);
		var __proto=SupportSkillBox.prototype;
		__proto.initSKillButton=function(index,isDoubleContrl,list){
			var btn=this.btnskill;
			if (this.index==index && (btn).isDobuleContrl==isDoubleContrl){
				return;
			}
			this.offx=70;
			this.offy=70;
			this.index=index;
			list[index]=this.btnskill;
			(btn).isDobuleContrl=isDoubleContrl;
			btn.off("mousedown",this,this._checkxuli);
			btn.on("mousedown",this,this._checkxuli,[true]);
			btn.on("mouseup",this,this.onButtonUp);
		}

		__proto._checkxuli=function(checkMove,e){
			this.onDown();
			this.isDown=true;
		}

		//super._checkxuli(checkMove,e);
		__proto.onButtonUp=function(e){
			if (this.isDown){
				this.onUp();
				if ((this.btnskill).isEmpty)return;
				var maskSkill=this.btnskill.getChildByName("maskSkill");
				if (!maskSkill || maskSkill.graphics._one){
					return;
				}
				GamingView.I.sendSkilltoServer((this.btnskill).skillid,this.index,0,false);
			}
		}

		//super.onButtonUp(e);
		__proto.onUp=function(){
			this.isDown=false;
			_super.prototype.onUp.call(this);
		}

		return SupportSkillBox;
	})(SkillBox)


	/**
	*...
	*@author 贾艳昭
	*/
	//class ui.Login extends view.pages.loginUI
	var Login=(function(_super){
		function Login(){
			this.loginErrorCode=null;
			Login.__super.call(this);
			this.CustomizeFieldName='login';
			this.loginErrorCode={
				1:"系统错误",
				2:"参数错误",
				3:"请登录",
				99:"系统错误",
				100:"用户名无效",
				101:"密码无效",
				102:"邮箱无效",
				103:"手机号无效",
				104:"昵称无效",
				107:"ip无效",
				108:"用户已存在",
				109:"邮箱已存在",
				110:"手机号已存在",
				111:"用户不存在"
			};
		}

		__class(Login,'ui.Login',_super);
		var __proto=Login.prototype;
		__proto.onCreated=function(){
			ui.UIBase.prototype.onCreated.call(this);
			this.btnLogin.on("click",this,this.btnLogin_onclick);
			this.btnReg.on("click",this,this.btnReg_onclick);
			this.btnWeixin && this.btnWeixin.on("click",this,this.btnWeixin_onclick);
			this.btnQQ && this.btnQQ.on("click",this,this.btnQQ_onclick);
			if (this.btnWeixin){
				this.btnWeixin.visible=Browser.onPC || Browser.window.runtime;
			}
			if (this.btnQQ){
				this.btnQQ.visible=Browser.onPC || Browser.window.runtime;
			}
			this.init();
		}

		__proto.onOpen=function(){
			ui.UIBase.prototype.onOpen.call(this);
			UIBase._game.removeStartScreen();
			this.init();
		}

		__proto.init=function(){
			this.txtUserName.text='';
			this.txtPassword.text='';
			this.lUserNameHint.text='';
			this.lPasswordHint.text='';
			this.lMsg.text='';
		}

		__proto.btnQQ_onclick=function(){
			LayaBoxUser.thirdLogin('QQ');
		}

		__proto.btnWeixin_onclick=function(){
			LayaBoxUser.thirdLogin('WX');
		}

		__proto.btnReg_onclick=function(){
			UIMgr$1.openUI(Reg);
		}

		__proto.btnLogin_onclick=function(){
			var userName=this.txtUserName.text;
			var password=this.txtPassword.text;
			var r=new RegExp("^\\w{6,20}$");
			this.lUserNameHint.text='';
			this.lPasswordHint.text='';
			this.lMsg.text='';
			if (!r.test(userName)){
				this.lUserNameHint.text='支持字母、数字和下划线的组合,6-20个字符';
				return;
			}
			if (!r.test(password)){
				this.lPasswordHint.text='支持字母、数字和下划线的组合,6-20个字符';
				return;
			}
			LayaBoxUser.login(userName,password,Handler.create(this,this.onLoginCallback));
		}

		__proto.onLoginCallback=function(res){
			if (res.ret==0){
				Method.log('layastoremarket登录成功',res);
				Union_LayaBox.instance.setLoginStatus(true,res);
				Union_LayaBox.instance.Login();
				UIMgr$1.closeUI(Login);
				}else{
				this.lMsg.text=this.loginErrorCode[res.ret] ? this.loginErrorCode[res.ret]:'错误';
			}
		}

		return Login;
	})(loginUI)


	/**
	*...
	*@author 贾艳昭
	*/
	//class ui.Login_QB extends view.pages.login_qbUI
	var Login_QB=(function(_super){
		function Login_QB(){
			Login_QB.__super.call(this);
			this.CustomizeFieldName='login_qb';
		}

		__class(Login_QB,'ui.Login_QB',_super);
		var __proto=Login_QB.prototype;
		__proto.onCreated=function(){
			ui.UIBase.prototype.onCreated.call(this);
			this.btnQQ.on("click",this,this.btnLogin_onclick,['qq']);
			this.imgQQ.on("click",this,this.btnLogin_onclick,['qq']);
			this.btnWX.on("click",this,this.btnLogin_onclick,['wx']);
			this.imgWx.on("click",this,this.btnLogin_onclick,['wx']);
		}

		//btnLogout.on(Event.CLICK,this,btnLogout_onclick);
		__proto.onOpen=function(){
			ui.UIBase.prototype.onOpen.call(this);
			this.hideAll();
			if (Login_QB.LoginData!=null){
				for (var i=0;i < Login_QB.LoginData.length;i++){
					this.setLoginData(Login_QB.LoginData[i]);
				}
			}
		}

		//console.log(LoginData);
		__proto.onClose=function(){
			ui.UIBase.prototype.onClose.call(this);
			this.game.showStartScreen(true);
		}

		//}
		__proto.btnLogin_onclick=function(loginType){
			this.game.user.GetUnion().Login(loginType);
		}

		__proto.hideAll=function(){
			this.btnQQ.visible=false;
			this.lQQ.visible=false;
			this.imgQQ.visible=false;
			this.imgQQChecked.visible=false;
			this.btnWX.visible=false;
			this.lWx.visible=false;
			this.imgWx.visible=false;
			this.imgWxChecked.visible=false;
		}

		//btnLogout.visible=false;
		__proto.setLoginData=function(dat){
			if (dat.loginType=='wx'){
				if (dat.accInfo !=null && dat.accInfo.avatarUrl !="" && dat.accInfo.nickName !=""){
					this.imgWx.skin=dat.accInfo.avatarUrl;
					this.lWx.text=Method.cutString(dat.accInfo.nickName,6);
					this.lWx.visible=true;
					this.imgWx.visible=true;
					this.imgWxChecked.visible=true;
					}else {
					this.lWx.text='微信登录';
					this.lWx.visible=true;
					this.btnWX.visible=true;
				}
			}
			if (dat.loginType=='qq'){
				if (dat.accInfo !=null && dat.accInfo.avatarUrl !="" && dat.accInfo.nickName !=""){
					var protocol=Browser.window.location.protocol;
					this.imgQQ.skin=protocol+'//picproxy.layabox.com/picproxy/test?'+dat.accInfo.avatarUrl.substr(dat.accInfo.avatarUrl.indexOf('//')+2);
					this.lQQ.text=Method.cutString(dat.accInfo.nickName,6);
					this.lQQ.visible=true;
					this.imgQQ.visible=true;
					this.imgQQChecked.visible=true;
					}else {
					this.lQQ.text='QQ登录';
					this.lQQ.visible=true;
					this.btnQQ.visible=true;
				}
			}
		}

		Login_QB.LoginData=null;
		return Login_QB;
	})(login_qbUI)


	/**
	*...
	*@author 贾艳昭
	*/
	//class ui.MessageBox extends view.pages.messageBoxUI
	var MessageBox=(function(_super){
		function MessageBox(){
			MessageBox.__super.call(this);
			this.CustomizeFieldName='messagebox';
		}

		__class(MessageBox,'ui.MessageBox',_super);
		var __proto=MessageBox.prototype;
		__proto.onCreated=function(){
			ui.UIBase.prototype.onCreated.call(this);
			this.btnOk.on("click",this,this.btnOK_onclick);
		}

		__proto.onClose=function(){
			ui.UIBase.prototype.onClose.call(this);
			Laya.stage.off("keyup",this,this.onKeyUP);
		}

		//}
		__proto.btnOK_onclick=function(){
			if (MessageBox.onCloseCallbackFn !=null){
				MessageBox.onCloseCallbackFn.run();
				MessageBox.onCloseCallbackFn=null;
			}
			UIMgr$1.closeUI(MessageBox);
		}

		__proto.onOpen=function(){
			ui.UIBase.prototype.onOpen.call(this);
			this.game.removeStartScreen();
			if (this.lTitle){
				this.lTitle.text=MessageBox.title;
			}
			if (this.lMessage){
				this.lMessage.text=MessageBox.message;
			}
			Laya.stage.on("keyup",this,this.onKeyUP);
		}

		__proto.onKeyUP=function(e){
			if (KeyMap.isSure(e.keyCode)){
				this.btnOK_onclick();
			}
		}

		MessageBox.title='';
		MessageBox.message='';
		MessageBox.onCloseCallbackFn=null
		return MessageBox;
	})(messageBoxUI)


	/**
	*注册页面
	*@author 贾艳昭
	*/
	//class ui.Reg extends view.pages.regUI
	var Reg=(function(_super){
		function Reg(){
			this.regErrorCode=null;
			Reg.__super.call(this);
			this.CustomizeFieldName='reg';
			this.regErrorCode={
				1:"系统错误",
				2:"参数错误",
				3:"请登录",
				99:"系统错误",
				100:"用户名无效",
				101:"密码无效",
				102:"邮箱无效",
				103:"手机号无效",
				104:"昵称无效",
				107:"ip无效",
				108:"用户已存在",
				109:"邮箱已存在",
				110:"手机号已存在",
				111:"用户不存在"
			};
		}

		__class(Reg,'ui.Reg',_super);
		var __proto=Reg.prototype;
		__proto.onCreated=function(){
			ui.UIBase.prototype.onCreated.call(this);
			this.btnReturn.on("click",this,this.btnReturn_onclick);
			this.btnReg.on("click",this,this.btnReg_onclick);
			this.init();
		}

		__proto.onOpen=function(){
			ui.UIBase.prototype.onOpen.call(this);
			this.init();
		}

		__proto.init=function(){
			this.txtUserName.text='';
			this.txtPassword.text='';
			this.txtConfirmPassword.text='';
			this.lUserNameHint.text='';
			this.lPasswordHint.text='';
			this.lConfirmPasswordHint.text='';
			this.lMsg.text='';
		}

		__proto.btnReg_onclick=function(){
			var userName=this.txtUserName.text;
			var password=this.txtPassword.text;
			var confirmPassword=this.txtConfirmPassword.text;
			var r=new RegExp("^\\w{6,20}$");
			this.lUserNameHint.text='';
			this.lPasswordHint.text='';
			this.lConfirmPasswordHint.text='';
			this.lMsg.text='';
			if (!r.test(userName)){
				this.lUserNameHint.text='支持字母、数字和下划线的组合,6-20个字符';
				return;
			}
			if (!r.test(password)){
				this.lPasswordHint.text='支持字母、数字和下划线的组合,6-20个字符';
				return;
			}
			if (password!=confirmPassword){
				this.lConfirmPasswordHint.text='两次密码输入不一致';
				return;
			}
			LayaBoxUser.regAndLogin(this.txtUserName.text,this.txtPassword.text,Handler.create(this,this.onRegCallback));
		}

		__proto.onRegCallback=function(res){
			Method.log('注册完成:',res);
			if (res.ret==0){
				Union_LayaBox.instance.setLoginStatus(true,res);
				Union_LayaBox.instance.Login();
				UIMgr$1.closeUI(Reg);
				}else{
				this.lMsg.text=this.regErrorCode[res.ret] ? this.regErrorCode[res.ret]:'错误';
			}
		}

		__proto.btnReturn_onclick=function(){
			UIMgr$1.openUI(Login);
		}

		return Reg;
	})(regUI)


	/**
	*...
	*@author 贾艳昭
	*/
	//class ui.WaitIcon extends view.pages.waiticonUI
	var WaitIcon=(function(_super){
		function WaitIcon(){
			WaitIcon.__super.call(this);
		}

		__class(WaitIcon,'ui.WaitIcon',_super);
		var __proto=WaitIcon.prototype;
		__proto.setMaskWH=function(offsetx2,offsety2,scale_tmp,scale_tmp1){}
		return WaitIcon;
	})(waiticonUI)


	/**
	*事件派发监听管理类
	*author xiaosong
	*@date 2017-02-26
	*/
	//class Utils.MsgMgr extends laya.events.EventDispatcher
	var MsgMgr=(function(_super){
		function MsgMgr(){
			MsgMgr.__super.call(this);
		}

		__class(MsgMgr,'Utils.MsgMgr',_super);
		var __proto=MsgMgr.prototype;
		/**
		*
		*@param shareTicket
		*/
		__proto.getShareInfo=function(shareTicket){
			wx.getShareInfo({
				shareTicket:shareTicket,
				success:function (res){
					Method.log('getshare success:',res);
				},
				fail:function (res){
					Method.log('getshare fail:',res);
				}
			});
		}

		/**
		*初始化本地资源列表
		*/
		__proto.initLocalFile=function(){
			MiniAdpter.nativefiles=[
			"layaNativeDir/",
			"res/atlas/newhall.atlas",
			"res/atlas/newhall.png",
			"res/atlas/newhall1.png",
			"res/atlas/newRank.png",
			"res/atlas/newRank.atlas",
			"res/atlas/ani/snow.atlas",
			"res/atlas/ani/snow.png",
			"res/atlas/loading.atlas",
			"res/atlas/loading.png",
			"load/LoadingAni.ani",
			"res/atlas/newguide.atlas",
			"res/atlas/newguide.png",
			"res/atlas/login.atlas",
			"res/atlas/login.png",
			"res/atlas/login1.png",
			"res/atlas/login2.atlas",
			"res/atlas/login2.png",
			"res/load_bj.png",
			"res/bj_part.png",
			"newRank/bg.jpg",
			"newRank/bg2.jpg",
			"common/bg.jpg",
			"common/bg031.png",
			"common/no.png",
			"common/tishi.png",
			"common/bg.png",
			"common/x.png",
			"common/yes.png",
			"res/atlas/common.atlas",
			"res/atlas/common.png",
			"laya8/config.json",
			"laya8/MessageBox.json",
			"MessageBox/loginBG1.jpg",
			"ui.json",
			"newguide/renqi_font.png",
			"res/skillIcon/s308.png",
			"res/atlas/newLb.atlas",
			"res/atlas/newLb.png",
			"newLb/bg031.png"];
		}

		/**
		*初始化微信相关方法监听
		*/
		__proto.initWxFunc=function(){
			this.initLocalFile();
			MiniAdpter.AutoCacheDownFile=true;
			MiniAdpter['getUrlEncode']=MsgMgr.getUrlAndEncode;
			Game$1.onNetWorkType=MsgMgr.onNetWorkType;
			if(Browser.onMiniGame && Browser.window.location){
				Browser.window.location.reload=function (){
					MsgMgr.exit();
				};
			}
			wx.setKeepScreenOn({keepScreenOn:true});
			sharedCanvas.width=737;
			sharedCanvas.height=533;
			wx.postMessage({url:"",data:{type:"resizeShared",width:Laya.stage.width,height:Laya.stage.height,matrix:Laya.stage._canvasTransform},isLoad:false});
			wx.onAudioInterruptionEnd(function(data){
				console.log("-------------------------onAudioInterruptionEnd----------------------");
				MenuList.I && MenuList.I.onSetSound(1);
			});
			wx.onAudioInterruptionBegin(function(data){
				console.log("-------------------------onAudioInterruptionBegin----------------------");
				MenuList.I && MenuList.I.onSetSound(2);
			});
			wx.onNetworkStatusChange(function(data){
				console.log("-------------------------onNetworkStatusChange----------------------");
				CrazySnowball.isConnected=data.isConnected
			});
			wx.onHide(function(data){
				MenuList.I && MenuList.I.onSetSound(2);
			});
		}

		__getset(1,MsgMgr,'instance',function(){
			return MsgMgr._i=MsgMgr._i|| new MsgMgr();
		},laya.events.EventDispatcher._$SET_instance);

		MsgMgr.exit=function(){
			if(Browser.onMiniGame){
				wx.exitMiniProgram();
			}
		}

		MsgMgr.postMessage=function(data){
			if(Browser.onMiniGame){
				wx.postMessage(data);
			}
		}

		MsgMgr.addEvent=function(type,caller,listener,arg){
			MsgMgr._i.on(type,caller,listener,arg);
		}

		MsgMgr.removeEvent=function(type,caller,listener){
			MsgMgr._i.off(type,caller,listener);
		}

		MsgMgr.emit=function(type,arg){
			MsgMgr._i.event(type,arg);
		}

		MsgMgr.PLAYERPK=1007;
		MsgMgr.PERSONPK="personpk";
		MsgMgr.DUANWEI="duanwei";
		MsgMgr.CONFIGDATA="configdata";
		MsgMgr.RANK_LIST1="ranklist1";
		MsgMgr.RANK_LIST2="ranklist2";
		MsgMgr._i=null;
		MsgMgr.onNetWorkType=function(msg){
			if(!CrazySnowball.isConnected)
				CrazySnowball.onShowDialog(msg);
			return CrazySnowball.isConnected;
		}

		MsgMgr.getUrlAndEncode=function(url,type){
			if (url.indexOf(".fnt")!=-1 || url.indexOf("ui.json")!=-1 || url.indexOf("laya8/config.json")!=-1||url.indexOf("laya8/MessageBox.json")!=-1){
				return "utf8";
				}else if (type=="arraybuffer"){
				return "";
			}
			return "ascii";
		}

		return MsgMgr;
	})(EventDispatcher)


	Laya.__init([LoaderManager,TimeLine,EventDispatcher,ActorObject,Browser,Collision,LocalStorage,Render,View,SnowGroupObject,SkillBaseData,WebGLContext2D,TrailImages,TipsManager,MiniMapView,CCreateObjData,ItemMathed,TiledMap,ViewImages,SnowEffect,DrawText,ShaderCompile,Timer,GraphicAnimation,AtlasGrid]);
	new CrazySnowball();

})(window,document,Laya);
